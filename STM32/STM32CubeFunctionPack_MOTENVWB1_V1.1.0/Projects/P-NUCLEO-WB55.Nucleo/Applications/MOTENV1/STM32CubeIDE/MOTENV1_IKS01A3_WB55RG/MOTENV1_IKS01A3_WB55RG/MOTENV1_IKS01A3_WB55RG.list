
MOTENV1_IKS01A3_WB55RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000140  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023d00  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022b8  08023e40  08023e40  00033e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080260f8  080260f8  000360f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08026100  08026100  00036100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08026104  08026104  00036104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000350  20000008  08026108  00040008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 000000fa  20000358  08026458  00040358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 0000016c  20000454  08026552  00040454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 0000005d  200005c0  080266be  000405c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 0000000e  20000620  0802671b  00040620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000066ac  20000630  08026729  00040630  2**3
                  ALLOC
 12 ._user_heap_stack 00008800  20006cdc  08026729  00046cdc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0004062e  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00050000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00050000  2**2
                  ALLOC
 16 MB_MEM2       0000086f  200301e0  200301e0  00050000  2**2
                  ALLOC
 17 .debug_line   00078ae3  00000000  00000000  0004065c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   00095a37  00000000  00000000  000b913f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 0000c160  00000000  00000000  0014eb76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003838  00000000  00000000  0015acd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0012c944  00000000  00000000  0015e510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 0000e5b8  00000000  00000000  0028ae58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0006a4d0  00000000  00000000  00299410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0003b326  00000000  00000000  003038e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000a3  00000000  00000000  0033ec06  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000d8ec  00000000  00000000  0033ecac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .stab         00000084  00000000  00000000  0034c598  2**2
                  CONTENTS, READONLY, DEBUGGING
 28 .stabstr      00000117  00000000  00000000  0034c61c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000630 	.word	0x20000630
 800015c:	00000000 	.word	0x00000000
 8000160:	08023e24 	.word	0x08023e24

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000634 	.word	0x20000634
 800017c:	08023e24 	.word	0x08023e24

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_frsub>:
 8000c28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	e002      	b.n	8000c34 <__addsf3>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_fsub>:
 8000c30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c34 <__addsf3>:
 8000c34:	0042      	lsls	r2, r0, #1
 8000c36:	bf1f      	itttt	ne
 8000c38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c3c:	ea92 0f03 	teqne	r2, r3
 8000c40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c48:	d06a      	beq.n	8000d20 <__addsf3+0xec>
 8000c4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c52:	bfc1      	itttt	gt
 8000c54:	18d2      	addgt	r2, r2, r3
 8000c56:	4041      	eorgt	r1, r0
 8000c58:	4048      	eorgt	r0, r1
 8000c5a:	4041      	eorgt	r1, r0
 8000c5c:	bfb8      	it	lt
 8000c5e:	425b      	neglt	r3, r3
 8000c60:	2b19      	cmp	r3, #25
 8000c62:	bf88      	it	hi
 8000c64:	4770      	bxhi	lr
 8000c66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4249      	negne	r1, r1
 8000c86:	ea92 0f03 	teq	r2, r3
 8000c8a:	d03f      	beq.n	8000d0c <__addsf3+0xd8>
 8000c8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c90:	fa41 fc03 	asr.w	ip, r1, r3
 8000c94:	eb10 000c 	adds.w	r0, r0, ip
 8000c98:	f1c3 0320 	rsb	r3, r3, #32
 8000c9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	d502      	bpl.n	8000cac <__addsf3+0x78>
 8000ca6:	4249      	negs	r1, r1
 8000ca8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cb0:	d313      	bcc.n	8000cda <__addsf3+0xa6>
 8000cb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cb6:	d306      	bcc.n	8000cc6 <__addsf3+0x92>
 8000cb8:	0840      	lsrs	r0, r0, #1
 8000cba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cbe:	f102 0201 	add.w	r2, r2, #1
 8000cc2:	2afe      	cmp	r2, #254	; 0xfe
 8000cc4:	d251      	bcs.n	8000d6a <__addsf3+0x136>
 8000cc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cce:	bf08      	it	eq
 8000cd0:	f020 0001 	biceq.w	r0, r0, #1
 8000cd4:	ea40 0003 	orr.w	r0, r0, r3
 8000cd8:	4770      	bx	lr
 8000cda:	0049      	lsls	r1, r1, #1
 8000cdc:	eb40 0000 	adc.w	r0, r0, r0
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	bf28      	it	cs
 8000ce4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ce8:	d2ed      	bcs.n	8000cc6 <__addsf3+0x92>
 8000cea:	fab0 fc80 	clz	ip, r0
 8000cee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cfa:	bfaa      	itet	ge
 8000cfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d00:	4252      	neglt	r2, r2
 8000d02:	4318      	orrge	r0, r3
 8000d04:	bfbc      	itt	lt
 8000d06:	40d0      	lsrlt	r0, r2
 8000d08:	4318      	orrlt	r0, r3
 8000d0a:	4770      	bx	lr
 8000d0c:	f092 0f00 	teq	r2, #0
 8000d10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d14:	bf06      	itte	eq
 8000d16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d1a:	3201      	addeq	r2, #1
 8000d1c:	3b01      	subne	r3, #1
 8000d1e:	e7b5      	b.n	8000c8c <__addsf3+0x58>
 8000d20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d28:	bf18      	it	ne
 8000d2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d2e:	d021      	beq.n	8000d74 <__addsf3+0x140>
 8000d30:	ea92 0f03 	teq	r2, r3
 8000d34:	d004      	beq.n	8000d40 <__addsf3+0x10c>
 8000d36:	f092 0f00 	teq	r2, #0
 8000d3a:	bf08      	it	eq
 8000d3c:	4608      	moveq	r0, r1
 8000d3e:	4770      	bx	lr
 8000d40:	ea90 0f01 	teq	r0, r1
 8000d44:	bf1c      	itt	ne
 8000d46:	2000      	movne	r0, #0
 8000d48:	4770      	bxne	lr
 8000d4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d4e:	d104      	bne.n	8000d5a <__addsf3+0x126>
 8000d50:	0040      	lsls	r0, r0, #1
 8000d52:	bf28      	it	cs
 8000d54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d58:	4770      	bx	lr
 8000d5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d5e:	bf3c      	itt	cc
 8000d60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bxcc	lr
 8000d66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d72:	4770      	bx	lr
 8000d74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d78:	bf16      	itet	ne
 8000d7a:	4608      	movne	r0, r1
 8000d7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d80:	4601      	movne	r1, r0
 8000d82:	0242      	lsls	r2, r0, #9
 8000d84:	bf06      	itte	eq
 8000d86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d8a:	ea90 0f01 	teqeq	r0, r1
 8000d8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d92:	4770      	bx	lr

08000d94 <__aeabi_ui2f>:
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e004      	b.n	8000da4 <__aeabi_i2f+0x8>
 8000d9a:	bf00      	nop

08000d9c <__aeabi_i2f>:
 8000d9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000da0:	bf48      	it	mi
 8000da2:	4240      	negmi	r0, r0
 8000da4:	ea5f 0c00 	movs.w	ip, r0
 8000da8:	bf08      	it	eq
 8000daa:	4770      	bxeq	lr
 8000dac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000db0:	4601      	mov	r1, r0
 8000db2:	f04f 0000 	mov.w	r0, #0
 8000db6:	e01c      	b.n	8000df2 <__aeabi_l2f+0x2a>

08000db8 <__aeabi_ul2f>:
 8000db8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dbc:	bf08      	it	eq
 8000dbe:	4770      	bxeq	lr
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e00a      	b.n	8000ddc <__aeabi_l2f+0x14>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_l2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dd4:	d502      	bpl.n	8000ddc <__aeabi_l2f+0x14>
 8000dd6:	4240      	negs	r0, r0
 8000dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ddc:	ea5f 0c01 	movs.w	ip, r1
 8000de0:	bf02      	ittt	eq
 8000de2:	4684      	moveq	ip, r0
 8000de4:	4601      	moveq	r1, r0
 8000de6:	2000      	moveq	r0, #0
 8000de8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dec:	bf08      	it	eq
 8000dee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000df2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000df6:	fabc f28c 	clz	r2, ip
 8000dfa:	3a08      	subs	r2, #8
 8000dfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e00:	db10      	blt.n	8000e24 <__aeabi_l2f+0x5c>
 8000e02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e06:	4463      	add	r3, ip
 8000e08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0c:	f1c2 0220 	rsb	r2, r2, #32
 8000e10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e14:	fa20 f202 	lsr.w	r2, r0, r2
 8000e18:	eb43 0002 	adc.w	r0, r3, r2
 8000e1c:	bf08      	it	eq
 8000e1e:	f020 0001 	biceq.w	r0, r0, #1
 8000e22:	4770      	bx	lr
 8000e24:	f102 0220 	add.w	r2, r2, #32
 8000e28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e34:	fa21 f202 	lsr.w	r2, r1, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_uldivmod>:
 8000e44:	b953      	cbnz	r3, 8000e5c <__aeabi_uldivmod+0x18>
 8000e46:	b94a      	cbnz	r2, 8000e5c <__aeabi_uldivmod+0x18>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	bf08      	it	eq
 8000e4c:	2800      	cmpeq	r0, #0
 8000e4e:	bf1c      	itt	ne
 8000e50:	f04f 31ff 	movne.w	r1, #4294967295
 8000e54:	f04f 30ff 	movne.w	r0, #4294967295
 8000e58:	f000 b9a8 	b.w	80011ac <__aeabi_idiv0>
 8000e5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e64:	f000 f83a 	bl	8000edc <__udivmoddi4>
 8000e68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e70:	b004      	add	sp, #16
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_f2lz>:
 8000e74:	ee07 0a90 	vmov	s15, r0
 8000e78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	d401      	bmi.n	8000e86 <__aeabi_f2lz+0x12>
 8000e82:	f000 b80b 	b.w	8000e9c <__aeabi_f2ulz>
 8000e86:	eef1 7a67 	vneg.f32	s15, s15
 8000e8a:	b508      	push	{r3, lr}
 8000e8c:	ee17 0a90 	vmov	r0, s15
 8000e90:	f000 f804 	bl	8000e9c <__aeabi_f2ulz>
 8000e94:	4240      	negs	r0, r0
 8000e96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e9a:	bd08      	pop	{r3, pc}

08000e9c <__aeabi_f2ulz>:
 8000e9c:	b5d0      	push	{r4, r6, r7, lr}
 8000e9e:	f7ff fb23 	bl	80004e8 <__aeabi_f2d>
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <__aeabi_f2ulz+0x38>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	4606      	mov	r6, r0
 8000ea8:	460f      	mov	r7, r1
 8000eaa:	f7ff fb75 	bl	8000598 <__aeabi_dmul>
 8000eae:	f7ff fe4b 	bl	8000b48 <__aeabi_d2uiz>
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	f7ff faf6 	bl	80004a4 <__aeabi_ui2d>
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <__aeabi_f2ulz+0x3c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f7ff fb6c 	bl	8000598 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	4639      	mov	r1, r7
 8000ec8:	f7ff f9ae 	bl	8000228 <__aeabi_dsub>
 8000ecc:	f7ff fe3c 	bl	8000b48 <__aeabi_d2uiz>
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ed4:	3df00000 	.word	0x3df00000
 8000ed8:	41f00000 	.word	0x41f00000

08000edc <__udivmoddi4>:
 8000edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee0:	9d08      	ldr	r5, [sp, #32]
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	468e      	mov	lr, r1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d14d      	bne.n	8000f86 <__udivmoddi4+0xaa>
 8000eea:	428a      	cmp	r2, r1
 8000eec:	4694      	mov	ip, r2
 8000eee:	d969      	bls.n	8000fc4 <__udivmoddi4+0xe8>
 8000ef0:	fab2 f282 	clz	r2, r2
 8000ef4:	b152      	cbz	r2, 8000f0c <__udivmoddi4+0x30>
 8000ef6:	fa01 f302 	lsl.w	r3, r1, r2
 8000efa:	f1c2 0120 	rsb	r1, r2, #32
 8000efe:	fa20 f101 	lsr.w	r1, r0, r1
 8000f02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f06:	ea41 0e03 	orr.w	lr, r1, r3
 8000f0a:	4094      	lsls	r4, r2
 8000f0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f10:	0c21      	lsrs	r1, r4, #16
 8000f12:	fbbe f6f8 	udiv	r6, lr, r8
 8000f16:	fa1f f78c 	uxth.w	r7, ip
 8000f1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000f1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f22:	fb06 f107 	mul.w	r1, r6, r7
 8000f26:	4299      	cmp	r1, r3
 8000f28:	d90a      	bls.n	8000f40 <__udivmoddi4+0x64>
 8000f2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f32:	f080 811f 	bcs.w	8001174 <__udivmoddi4+0x298>
 8000f36:	4299      	cmp	r1, r3
 8000f38:	f240 811c 	bls.w	8001174 <__udivmoddi4+0x298>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	1a5b      	subs	r3, r3, r1
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f48:	fb08 3310 	mls	r3, r8, r0, r3
 8000f4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f50:	fb00 f707 	mul.w	r7, r0, r7
 8000f54:	42a7      	cmp	r7, r4
 8000f56:	d90a      	bls.n	8000f6e <__udivmoddi4+0x92>
 8000f58:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f60:	f080 810a 	bcs.w	8001178 <__udivmoddi4+0x29c>
 8000f64:	42a7      	cmp	r7, r4
 8000f66:	f240 8107 	bls.w	8001178 <__udivmoddi4+0x29c>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f72:	1be4      	subs	r4, r4, r7
 8000f74:	2600      	movs	r6, #0
 8000f76:	b11d      	cbz	r5, 8000f80 <__udivmoddi4+0xa4>
 8000f78:	40d4      	lsrs	r4, r2
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000f80:	4631      	mov	r1, r6
 8000f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f86:	428b      	cmp	r3, r1
 8000f88:	d909      	bls.n	8000f9e <__udivmoddi4+0xc2>
 8000f8a:	2d00      	cmp	r5, #0
 8000f8c:	f000 80ef 	beq.w	800116e <__udivmoddi4+0x292>
 8000f90:	2600      	movs	r6, #0
 8000f92:	e9c5 0100 	strd	r0, r1, [r5]
 8000f96:	4630      	mov	r0, r6
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	fab3 f683 	clz	r6, r3
 8000fa2:	2e00      	cmp	r6, #0
 8000fa4:	d14a      	bne.n	800103c <__udivmoddi4+0x160>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d302      	bcc.n	8000fb0 <__udivmoddi4+0xd4>
 8000faa:	4282      	cmp	r2, r0
 8000fac:	f200 80f9 	bhi.w	80011a2 <__udivmoddi4+0x2c6>
 8000fb0:	1a84      	subs	r4, r0, r2
 8000fb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	469e      	mov	lr, r3
 8000fba:	2d00      	cmp	r5, #0
 8000fbc:	d0e0      	beq.n	8000f80 <__udivmoddi4+0xa4>
 8000fbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000fc2:	e7dd      	b.n	8000f80 <__udivmoddi4+0xa4>
 8000fc4:	b902      	cbnz	r2, 8000fc8 <__udivmoddi4+0xec>
 8000fc6:	deff      	udf	#255	; 0xff
 8000fc8:	fab2 f282 	clz	r2, r2
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	f040 8092 	bne.w	80010f6 <__udivmoddi4+0x21a>
 8000fd2:	eba1 010c 	sub.w	r1, r1, ip
 8000fd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fda:	fa1f fe8c 	uxth.w	lr, ip
 8000fde:	2601      	movs	r6, #1
 8000fe0:	0c20      	lsrs	r0, r4, #16
 8000fe2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fe6:	fb07 1113 	mls	r1, r7, r3, r1
 8000fea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fee:	fb0e f003 	mul.w	r0, lr, r3
 8000ff2:	4288      	cmp	r0, r1
 8000ff4:	d908      	bls.n	8001008 <__udivmoddi4+0x12c>
 8000ff6:	eb1c 0101 	adds.w	r1, ip, r1
 8000ffa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ffe:	d202      	bcs.n	8001006 <__udivmoddi4+0x12a>
 8001000:	4288      	cmp	r0, r1
 8001002:	f200 80cb 	bhi.w	800119c <__udivmoddi4+0x2c0>
 8001006:	4643      	mov	r3, r8
 8001008:	1a09      	subs	r1, r1, r0
 800100a:	b2a4      	uxth	r4, r4
 800100c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001010:	fb07 1110 	mls	r1, r7, r0, r1
 8001014:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001018:	fb0e fe00 	mul.w	lr, lr, r0
 800101c:	45a6      	cmp	lr, r4
 800101e:	d908      	bls.n	8001032 <__udivmoddi4+0x156>
 8001020:	eb1c 0404 	adds.w	r4, ip, r4
 8001024:	f100 31ff 	add.w	r1, r0, #4294967295
 8001028:	d202      	bcs.n	8001030 <__udivmoddi4+0x154>
 800102a:	45a6      	cmp	lr, r4
 800102c:	f200 80bb 	bhi.w	80011a6 <__udivmoddi4+0x2ca>
 8001030:	4608      	mov	r0, r1
 8001032:	eba4 040e 	sub.w	r4, r4, lr
 8001036:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x9a>
 800103c:	f1c6 0720 	rsb	r7, r6, #32
 8001040:	40b3      	lsls	r3, r6
 8001042:	fa22 fc07 	lsr.w	ip, r2, r7
 8001046:	ea4c 0c03 	orr.w	ip, ip, r3
 800104a:	fa20 f407 	lsr.w	r4, r0, r7
 800104e:	fa01 f306 	lsl.w	r3, r1, r6
 8001052:	431c      	orrs	r4, r3
 8001054:	40f9      	lsrs	r1, r7
 8001056:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800105a:	fa00 f306 	lsl.w	r3, r0, r6
 800105e:	fbb1 f8f9 	udiv	r8, r1, r9
 8001062:	0c20      	lsrs	r0, r4, #16
 8001064:	fa1f fe8c 	uxth.w	lr, ip
 8001068:	fb09 1118 	mls	r1, r9, r8, r1
 800106c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001070:	fb08 f00e 	mul.w	r0, r8, lr
 8001074:	4288      	cmp	r0, r1
 8001076:	fa02 f206 	lsl.w	r2, r2, r6
 800107a:	d90b      	bls.n	8001094 <__udivmoddi4+0x1b8>
 800107c:	eb1c 0101 	adds.w	r1, ip, r1
 8001080:	f108 3aff 	add.w	sl, r8, #4294967295
 8001084:	f080 8088 	bcs.w	8001198 <__udivmoddi4+0x2bc>
 8001088:	4288      	cmp	r0, r1
 800108a:	f240 8085 	bls.w	8001198 <__udivmoddi4+0x2bc>
 800108e:	f1a8 0802 	sub.w	r8, r8, #2
 8001092:	4461      	add	r1, ip
 8001094:	1a09      	subs	r1, r1, r0
 8001096:	b2a4      	uxth	r4, r4
 8001098:	fbb1 f0f9 	udiv	r0, r1, r9
 800109c:	fb09 1110 	mls	r1, r9, r0, r1
 80010a0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80010a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80010a8:	458e      	cmp	lr, r1
 80010aa:	d908      	bls.n	80010be <__udivmoddi4+0x1e2>
 80010ac:	eb1c 0101 	adds.w	r1, ip, r1
 80010b0:	f100 34ff 	add.w	r4, r0, #4294967295
 80010b4:	d26c      	bcs.n	8001190 <__udivmoddi4+0x2b4>
 80010b6:	458e      	cmp	lr, r1
 80010b8:	d96a      	bls.n	8001190 <__udivmoddi4+0x2b4>
 80010ba:	3802      	subs	r0, #2
 80010bc:	4461      	add	r1, ip
 80010be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010c2:	fba0 9402 	umull	r9, r4, r0, r2
 80010c6:	eba1 010e 	sub.w	r1, r1, lr
 80010ca:	42a1      	cmp	r1, r4
 80010cc:	46c8      	mov	r8, r9
 80010ce:	46a6      	mov	lr, r4
 80010d0:	d356      	bcc.n	8001180 <__udivmoddi4+0x2a4>
 80010d2:	d053      	beq.n	800117c <__udivmoddi4+0x2a0>
 80010d4:	b15d      	cbz	r5, 80010ee <__udivmoddi4+0x212>
 80010d6:	ebb3 0208 	subs.w	r2, r3, r8
 80010da:	eb61 010e 	sbc.w	r1, r1, lr
 80010de:	fa01 f707 	lsl.w	r7, r1, r7
 80010e2:	fa22 f306 	lsr.w	r3, r2, r6
 80010e6:	40f1      	lsrs	r1, r6
 80010e8:	431f      	orrs	r7, r3
 80010ea:	e9c5 7100 	strd	r7, r1, [r5]
 80010ee:	2600      	movs	r6, #0
 80010f0:	4631      	mov	r1, r6
 80010f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f6:	f1c2 0320 	rsb	r3, r2, #32
 80010fa:	40d8      	lsrs	r0, r3
 80010fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8001100:	fa21 f303 	lsr.w	r3, r1, r3
 8001104:	4091      	lsls	r1, r2
 8001106:	4301      	orrs	r1, r0
 8001108:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800110c:	fa1f fe8c 	uxth.w	lr, ip
 8001110:	fbb3 f0f7 	udiv	r0, r3, r7
 8001114:	fb07 3610 	mls	r6, r7, r0, r3
 8001118:	0c0b      	lsrs	r3, r1, #16
 800111a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800111e:	fb00 f60e 	mul.w	r6, r0, lr
 8001122:	429e      	cmp	r6, r3
 8001124:	fa04 f402 	lsl.w	r4, r4, r2
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x260>
 800112a:	eb1c 0303 	adds.w	r3, ip, r3
 800112e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001132:	d22f      	bcs.n	8001194 <__udivmoddi4+0x2b8>
 8001134:	429e      	cmp	r6, r3
 8001136:	d92d      	bls.n	8001194 <__udivmoddi4+0x2b8>
 8001138:	3802      	subs	r0, #2
 800113a:	4463      	add	r3, ip
 800113c:	1b9b      	subs	r3, r3, r6
 800113e:	b289      	uxth	r1, r1
 8001140:	fbb3 f6f7 	udiv	r6, r3, r7
 8001144:	fb07 3316 	mls	r3, r7, r6, r3
 8001148:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800114c:	fb06 f30e 	mul.w	r3, r6, lr
 8001150:	428b      	cmp	r3, r1
 8001152:	d908      	bls.n	8001166 <__udivmoddi4+0x28a>
 8001154:	eb1c 0101 	adds.w	r1, ip, r1
 8001158:	f106 38ff 	add.w	r8, r6, #4294967295
 800115c:	d216      	bcs.n	800118c <__udivmoddi4+0x2b0>
 800115e:	428b      	cmp	r3, r1
 8001160:	d914      	bls.n	800118c <__udivmoddi4+0x2b0>
 8001162:	3e02      	subs	r6, #2
 8001164:	4461      	add	r1, ip
 8001166:	1ac9      	subs	r1, r1, r3
 8001168:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800116c:	e738      	b.n	8000fe0 <__udivmoddi4+0x104>
 800116e:	462e      	mov	r6, r5
 8001170:	4628      	mov	r0, r5
 8001172:	e705      	b.n	8000f80 <__udivmoddi4+0xa4>
 8001174:	4606      	mov	r6, r0
 8001176:	e6e3      	b.n	8000f40 <__udivmoddi4+0x64>
 8001178:	4618      	mov	r0, r3
 800117a:	e6f8      	b.n	8000f6e <__udivmoddi4+0x92>
 800117c:	454b      	cmp	r3, r9
 800117e:	d2a9      	bcs.n	80010d4 <__udivmoddi4+0x1f8>
 8001180:	ebb9 0802 	subs.w	r8, r9, r2
 8001184:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001188:	3801      	subs	r0, #1
 800118a:	e7a3      	b.n	80010d4 <__udivmoddi4+0x1f8>
 800118c:	4646      	mov	r6, r8
 800118e:	e7ea      	b.n	8001166 <__udivmoddi4+0x28a>
 8001190:	4620      	mov	r0, r4
 8001192:	e794      	b.n	80010be <__udivmoddi4+0x1e2>
 8001194:	4640      	mov	r0, r8
 8001196:	e7d1      	b.n	800113c <__udivmoddi4+0x260>
 8001198:	46d0      	mov	r8, sl
 800119a:	e77b      	b.n	8001094 <__udivmoddi4+0x1b8>
 800119c:	3b02      	subs	r3, #2
 800119e:	4461      	add	r1, ip
 80011a0:	e732      	b.n	8001008 <__udivmoddi4+0x12c>
 80011a2:	4630      	mov	r0, r6
 80011a4:	e709      	b.n	8000fba <__udivmoddi4+0xde>
 80011a6:	4464      	add	r4, ip
 80011a8:	3802      	subs	r0, #2
 80011aa:	e742      	b.n	8001032 <__udivmoddi4+0x156>

080011ac <__aeabi_idiv0>:
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80011b0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b4:	3304      	adds	r3, #4

080011b6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80011ba:	d3f9      	bcc.n	80011b0 <CopyDataInit>
  bx lr
 80011bc:	4770      	bx	lr

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80011be:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80011c0:	3004      	adds	r0, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80011c2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>
  bx lr
 80011c6:	4770      	bx	lr

080011c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80011ca:	4685      	mov	sp, r0

  INIT_DATA _sdata, _edata, _sidata
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <LoopForever+0x8>)
 80011ce:	490d      	ldr	r1, [pc, #52]	; (8001204 <LoopForever+0xc>)
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <LoopForever+0x10>)
 80011d2:	2300      	movs	r3, #0
 80011d4:	f7ff ffef 	bl	80011b6 <LoopCopyDataInit>
  INIT_BSS _sbss, _ebss
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <LoopForever+0x14>)
 80011da:	490d      	ldr	r1, [pc, #52]	; (8001210 <LoopForever+0x18>)
 80011dc:	2300      	movs	r3, #0
 80011de:	f7ff fff0 	bl	80011c2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80011e2:	480c      	ldr	r0, [pc, #48]	; (8001214 <LoopForever+0x1c>)
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <LoopForever+0x20>)
 80011e6:	2300      	movs	r3, #0
 80011e8:	f7ff ffeb 	bl	80011c2 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011ec:	f009 fc9c 	bl	800ab28 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80011f0:	f021 fd82 	bl	8022cf8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80011f4:	f000 fd14 	bl	8001c20 <main>

080011f8 <LoopForever>:

LoopForever:
  b LoopForever
 80011f8:	e7fe      	b.n	80011f8 <LoopForever>
 80011fa:	0000      	.short	0x0000
  ldr   r0, =_estack
 80011fc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001200:	20000008 	.word	0x20000008
 8001204:	20000358 	.word	0x20000358
 8001208:	08026108 	.word	0x08026108
  INIT_BSS _sbss, _ebss
 800120c:	20000630 	.word	0x20000630
 8001210:	20006cdc 	.word	0x20006cdc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001214:	200301e0 	.word	0x200301e0
 8001218:	20030a4f 	.word	0x20030a4f

0800121c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC1_IRQHandler>
	...

08001220 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
  UNUSED(status);
  return;
}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop

08001224 <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 8001224:	b508      	push	{r3, lr}
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001226:	f00e f885 	bl	800f334 <TL_TRACES_Init>

  APP_BLE_Init( );
 800122a:	f001 f92f 	bl	800248c <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
  return;
}
 800122e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001232:	2100      	movs	r1, #0
 8001234:	2001      	movs	r0, #1
 8001236:	f00e b8ad 	b.w	800f394 <UTIL_LPM_SetOffMode>
 800123a:	bf00      	nop

0800123c <APPE_Init>:
{
 800123c:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800123e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001242:	b088      	sub	sp, #32
 8001244:	6893      	ldr	r3, [r2, #8]
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001246:	4c1e      	ldr	r4, [pc, #120]	; (80012c0 <APPE_Init+0x84>)
 8001248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800124c:	6093      	str	r3, [r2, #8]
  UTIL_LPM_Init( );
 800124e:	f00e f899 	bl	800f384 <UTIL_LPM_Init>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001252:	491c      	ldr	r1, [pc, #112]	; (80012c4 <APPE_Init+0x88>)
 8001254:	2000      	movs	r0, #0
 8001256:	f000 f93d 	bl	80014d4 <HW_TS_Init>
  HAL_DBGMCU_EnableDBGSleepMode();
 800125a:	f009 fcfd 	bl	800ac58 <HAL_DBGMCU_EnableDBGSleepMode>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <APPE_Init+0x8c>)
 8001260:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001264:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001268:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 800126c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8001270:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001274:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  DbgTraceInit();
 8001278:	f00c ffca 	bl	800e210 <DbgTraceInit>
  TL_Init();
 800127c:	f00d ff6e 	bl	800f15c <TL_Init>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <APPE_Init+0x90>)
 8001282:	2100      	movs	r1, #0
 8001284:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001288:	f00e f89c 	bl	800f3c4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <APPE_Init+0x94>)
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800128e:	4811      	ldr	r0, [pc, #68]	; (80012d4 <APPE_Init+0x98>)
 8001290:	4669      	mov	r1, sp
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001292:	e9cd 4300 	strd	r4, r3, [sp]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001296:	f00d fdd7 	bl	800ee48 <shci_init>
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800129a:	f504 7186 	add.w	r1, r4, #268	; 0x10c
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800129e:	f504 7206 	add.w	r2, r4, #536	; 0x218
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80012a2:	f240 533c 	movw	r3, #1340	; 0x53c
  TL_MM_Init( &tl_mm_config );
 80012a6:	a802      	add	r0, sp, #8
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80012a8:	f504 7449 	add.w	r4, r4, #804	; 0x324
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80012ac:	e9cd 1202 	strd	r1, r2, [sp, #8]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80012b0:	e9cd 4304 	strd	r4, r3, [sp, #16]
  TL_MM_Init( &tl_mm_config );
 80012b4:	f00e f810 	bl	800f2d8 <TL_MM_Init>
  TL_Enable();
 80012b8:	f00d ff4e 	bl	800f158 <TL_Enable>
}
 80012bc:	b008      	add	sp, #32
 80012be:	bd10      	pop	{r4, pc}
 80012c0:	200301e0 	.word	0x200301e0
 80012c4:	20000728 	.word	0x20000728
 80012c8:	58000800 	.word	0x58000800
 80012cc:	0800eea1 	.word	0x0800eea1
 80012d0:	08001221 	.word	0x08001221
 80012d4:	08001225 	.word	0x08001225

080012d8 <HAL_GPIO_EXTI_Callback>:
  switch (GPIO_Pin)
 80012d8:	2801      	cmp	r0, #1
 80012da:	d008      	beq.n	80012ee <HAL_GPIO_EXTI_Callback+0x16>
 80012dc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80012e0:	d104      	bne.n	80012ec <HAL_GPIO_EXTI_Callback+0x14>
    UTIL_SEQ_SetTask(1<<CFG_TASK_HANDLE_MEMS_IT_ID, CFG_SCH_PRIO_0);
 80012e2:	2100      	movs	r1, #0
 80012e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012e8:	f00e b87e 	b.w	800f3e8 <UTIL_SEQ_SetTask>
 80012ec:	4770      	bx	lr
    UTIL_SEQ_SetTask(1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80012ee:	2100      	movs	r1, #0
 80012f0:	2008      	movs	r0, #8
 80012f2:	f00e b879 	b.w	800f3e8 <UTIL_SEQ_SetTask>
 80012f6:	bf00      	nop

080012f8 <UTIL_SEQ_Idle>:
{
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop

080012fc <UTIL_SEQ_EvtIdle>:
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f00e b8ae 	b.w	800f460 <UTIL_SEQ_Run>

08001304 <shci_notify_asynch_evt>:
}

void shci_notify_asynch_evt(void* pdata)
{
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001304:	2100      	movs	r1, #0
 8001306:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800130a:	f00e b86d 	b.w	800f3e8 <UTIL_SEQ_SetTask>
 800130e:	bf00      	nop

08001310 <shci_cmd_resp_release>:
  return;
}

void shci_cmd_resp_release(uint32_t flag)
{
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8001310:	2002      	movs	r0, #2
 8001312:	f00e b895 	b.w	800f440 <UTIL_SEQ_SetEvt>
 8001316:	bf00      	nop

08001318 <shci_cmd_resp_wait>:
  return;
}

void shci_cmd_resp_wait(uint32_t timeout)
{
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8001318:	2002      	movs	r0, #2
 800131a:	f00e b90b 	b.w	800f534 <UTIL_SEQ_WaitEvt>
 800131e:	bf00      	nop

08001320 <DbgOutputInit>:
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
    MX_USART1_UART_Init();
 8001320:	f000 bd3c 	b.w	8001d9c <MX_USART1_UART_Init>

08001324 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001324:	4613      	mov	r3, r2
  HW_UART_Transmit_DMA(DBG_TRACE_UART_CFG, p_data, size, cb);
 8001326:	460a      	mov	r2, r1
 8001328:	4601      	mov	r1, r0
 800132a:	2000      	movs	r0, #0
 800132c:	f000 bbdc 	b.w	8001ae8 <HW_UART_Transmit_DMA>

08001330 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001332:	4b64      	ldr	r3, [pc, #400]	; (80014c4 <RescheduleTimerList+0x194>)
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001334:	4d64      	ldr	r5, [pc, #400]	; (80014c8 <RescheduleTimerList+0x198>)
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f413 6f80 	tst.w	r3, #1024	; 0x400
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	681e      	ldr	r6, [r3, #0]
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001340:	f040 8085 	bne.w	800144e <RescheduleTimerList+0x11e>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001344:	68b3      	ldr	r3, [r6, #8]

  localTimerID = CurrentRunningTimerID;
 8001346:	4c61      	ldr	r4, [pc, #388]	; (80014cc <RescheduleTimerList+0x19c>)
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800134c:	60b3      	str	r3, [r6, #8]
  localTimerID = CurrentRunningTimerID;
 800134e:	7823      	ldrb	r3, [r4, #0]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001350:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001354:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
  localTimerID = CurrentRunningTimerID;
 8001358:	b2da      	uxtb	r2, r3
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800135a:	f8d1 e00c 	ldr.w	lr, [r1, #12]
  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800135e:	f8d4 10f4 	ldr.w	r1, [r4, #244]	; 0xf4
 8001362:	3101      	adds	r1, #1
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001364:	ea4f 0343 	mov.w	r3, r3, lsl #1
  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001368:	f000 808c 	beq.w	8001484 <RescheduleTimerList+0x154>
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800136c:	f8df c154 	ldr.w	ip, [pc, #340]	; 80014c4 <RescheduleTimerList+0x194>
 8001370:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001374:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001378:	b280      	uxth	r0, r0
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800137a:	b289      	uxth	r1, r1
  while(first_read != second_read)
 800137c:	4288      	cmp	r0, r1
 800137e:	d005      	beq.n	800138c <RescheduleTimerList+0x5c>
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001380:	f8dc 7028 	ldr.w	r7, [ip, #40]	; 0x28
 8001384:	4608      	mov	r0, r1
 8001386:	b2b9      	uxth	r1, r7
  while(first_read != second_read)
 8001388:	4281      	cmp	r1, r0
 800138a:	d1f9      	bne.n	8001380 <RescheduleTimerList+0x50>
    if (SSRValueOnLastSetup >= return_value)
 800138c:	f8d4 10f4 	ldr.w	r1, [r4, #244]	; 0xf4
 8001390:	4281      	cmp	r1, r0
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001392:	bf3b      	ittet	cc
 8001394:	88a9      	ldrhcc	r1, [r5, #4]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001396:	f8d4 70f4 	ldrcc.w	r7, [r4, #244]	; 0xf4
      return_value = SSRValueOnLastSetup - return_value;
 800139a:	f8d4 10f4 	ldrcs.w	r1, [r4, #244]	; 0xf4
      return_value = SSRValueOnLastSetup + wrap_counter;
 800139e:	19c9      	addcc	r1, r1, r7
 80013a0:	1a08      	subs	r0, r1, r0
    return_value = return_value*AsynchPrescalerUserConfig;
 80013a2:	79a9      	ldrb	r1, [r5, #6]
 80013a4:	fb01 f000 	mul.w	r0, r1, r0
    return_value = return_value >> WakeupTimerDivider;
 80013a8:	79e9      	ldrb	r1, [r5, #7]
 80013aa:	40c8      	lsrs	r0, r1
  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();

  if(timecountleft < time_elapsed )
 80013ac:	b281      	uxth	r1, r0
 80013ae:	458e      	cmp	lr, r1
 80013b0:	f080 8085 	bcs.w	80014be <RescheduleTimerList+0x18e>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80013b4:	2001      	movs	r0, #1
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013b6:	2a0a      	cmp	r2, #10
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80013b8:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
    wakeup_timer_value = 0;
 80013bc:	bf18      	it	ne
 80013be:	2000      	movne	r0, #0
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013c0:	d04d      	beq.n	800145e <RescheduleTimerList+0x12e>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80013c2:	2700      	movs	r7, #0
 80013c4:	e005      	b.n	80013d2 <RescheduleTimerList+0xa2>
 80013c6:	60df      	str	r7, [r3, #12]
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80013c8:	7e5b      	ldrb	r3, [r3, #25]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013ca:	2b0a      	cmp	r3, #10
    localTimerID = aTimerContext[localTimerID].NextID;
 80013cc:	b2da      	uxtb	r2, r3
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013ce:	d00d      	beq.n	80013ec <RescheduleTimerList+0xbc>
 80013d0:	0053      	lsls	r3, r2, #1
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80013d2:	4413      	add	r3, r2
 80013d4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	428a      	cmp	r2, r1
 80013dc:	d3f3      	bcc.n	80013c6 <RescheduleTimerList+0x96>
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	1a52      	subs	r2, r2, r1
 80013e2:	60da      	str	r2, [r3, #12]
    localTimerID = aTimerContext[localTimerID].NextID;
 80013e4:	7e5b      	ldrb	r3, [r3, #25]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013e6:	2b0a      	cmp	r3, #10
    localTimerID = aTimerContext[localTimerID].NextID;
 80013e8:	b2da      	uxtb	r2, r3
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013ea:	d1f1      	bne.n	80013d0 <RescheduleTimerList+0xa0>
  if(Value == 0)
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d036      	beq.n	800145e <RescheduleTimerList+0x12e>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80013f0:	2801      	cmp	r0, #1
 80013f2:	d05f      	beq.n	80014b4 <RescheduleTimerList+0x184>
      Value -= 1;
 80013f4:	3801      	subs	r0, #1
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80013f6:	b287      	uxth	r7, r0
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80013f8:	68f3      	ldr	r3, [r6, #12]
 80013fa:	075b      	lsls	r3, r3, #29
 80013fc:	d5fc      	bpl.n	80013f8 <RescheduleTimerList+0xc8>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013fe:	68f3      	ldr	r3, [r6, #12]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8001406:	60f3      	str	r3, [r6, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001408:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <RescheduleTimerList+0x1a0>)
 800140a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800140e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001410:	2003      	movs	r0, #3
 8001412:	f009 fcc5 	bl	800ada0 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001416:	482b      	ldr	r0, [pc, #172]	; (80014c4 <RescheduleTimerList+0x194>)
 8001418:	6943      	ldr	r3, [r0, #20]
 800141a:	0c1b      	lsrs	r3, r3, #16
 800141c:	041b      	lsls	r3, r3, #16
 800141e:	433b      	orrs	r3, r7
 8001420:	6143      	str	r3, [r0, #20]
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001422:	6a82      	ldr	r2, [r0, #40]	; 0x28
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001424:	6a83      	ldr	r3, [r0, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001426:	b292      	uxth	r2, r2
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001428:	b29b      	uxth	r3, r3
  while(first_read != second_read)
 800142a:	429a      	cmp	r2, r3
 800142c:	d004      	beq.n	8001438 <RescheduleTimerList+0x108>
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800142e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001430:	461a      	mov	r2, r3
 8001432:	b28b      	uxth	r3, r1
  while(first_read != second_read)
 8001434:	429a      	cmp	r2, r3
 8001436:	d1fa      	bne.n	800142e <RescheduleTimerList+0xfe>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001438:	682a      	ldr	r2, [r5, #0]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800143a:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	6893      	ldr	r3, [r2, #8]
 8001442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001446:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001448:	f3af 8000 	nop.w
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);

  return ;
}
 800144c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800144e:	68f3      	ldr	r3, [r6, #12]
 8001450:	075a      	lsls	r2, r3, #29
 8001452:	f57f af77 	bpl.w	8001344 <RescheduleTimerList+0x14>
 8001456:	68f3      	ldr	r3, [r6, #12]
 8001458:	075a      	lsls	r2, r3, #29
 800145a:	d4f8      	bmi.n	800144e <RescheduleTimerList+0x11e>
 800145c:	e772      	b.n	8001344 <RescheduleTimerList+0x14>
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800145e:	4819      	ldr	r0, [pc, #100]	; (80014c4 <RescheduleTimerList+0x194>)
 8001460:	6a82      	ldr	r2, [r0, #40]	; 0x28
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001462:	6a83      	ldr	r3, [r0, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001464:	b292      	uxth	r2, r2
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001466:	b29b      	uxth	r3, r3
  while(first_read != second_read)
 8001468:	429a      	cmp	r2, r3
 800146a:	d004      	beq.n	8001476 <RescheduleTimerList+0x146>
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800146c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800146e:	461a      	mov	r2, r3
 8001470:	b28b      	uxth	r3, r1
  while(first_read != second_read)
 8001472:	4293      	cmp	r3, r2
 8001474:	d1fa      	bne.n	800146c <RescheduleTimerList+0x13c>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001476:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800147a:	2003      	movs	r0, #3
}
 800147c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001480:	f009 bc7e 	b.w	800ad80 <HAL_NVIC_SetPendingIRQ>
 8001484:	f04f 0c00 	mov.w	ip, #0
 8001488:	4661      	mov	r1, ip
  return (uint16_t)return_value;
 800148a:	4660      	mov	r0, ip
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800148c:	892f      	ldrh	r7, [r5, #8]
 800148e:	fa1c f787 	uxtah	r7, ip, r7
 8001492:	4577      	cmp	r7, lr
 8001494:	d207      	bcs.n	80014a6 <RescheduleTimerList+0x176>
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001496:	8928      	ldrh	r0, [r5, #8]
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001498:	2700      	movs	r7, #0
      wakeup_timer_value = MaxWakeupTimerSetup;
 800149a:	b280      	uxth	r0, r0
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800149c:	f884 70f8 	strb.w	r7, [r4, #248]	; 0xf8
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014a0:	2a0a      	cmp	r2, #10
 80014a2:	d18e      	bne.n	80013c2 <RescheduleTimerList+0x92>
 80014a4:	e7a2      	b.n	80013ec <RescheduleTimerList+0xbc>
      wakeup_timer_value = timecountleft - time_elapsed;
 80014a6:	ebae 0000 	sub.w	r0, lr, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014aa:	2701      	movs	r7, #1
      wakeup_timer_value = timecountleft - time_elapsed;
 80014ac:	b280      	uxth	r0, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014ae:	f884 70f8 	strb.w	r7, [r4, #248]	; 0xf8
 80014b2:	e7f5      	b.n	80014a0 <RescheduleTimerList+0x170>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80014b4:	79eb      	ldrb	r3, [r5, #7]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d19c      	bne.n	80013f4 <RescheduleTimerList+0xc4>
 80014ba:	4607      	mov	r7, r0
 80014bc:	e79c      	b.n	80013f8 <RescheduleTimerList+0xc8>
  return (uint16_t)return_value;
 80014be:	4608      	mov	r0, r1
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80014c0:	468c      	mov	ip, r1
 80014c2:	e7e3      	b.n	800148c <RescheduleTimerList+0x15c>
 80014c4:	40002800 	.word	0x40002800
 80014c8:	2000064c 	.word	0x2000064c
 80014cc:	20000358 	.word	0x20000358
 80014d0:	58000800 	.word	0x58000800

080014d4 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80014d4:	b570      	push	{r4, r5, r6, lr}
   * Get RTC handler
   */
  phrtc = hrtc;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80014d6:	680d      	ldr	r5, [r1, #0]

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80014d8:	4e43      	ldr	r6, [pc, #268]	; (80015e8 <HW_TS_Init+0x114>)
  phrtc = hrtc;
 80014da:	4c44      	ldr	r4, [pc, #272]	; (80015ec <HW_TS_Init+0x118>)
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80014dc:	23ca      	movs	r3, #202	; 0xca
 80014de:	626b      	str	r3, [r5, #36]	; 0x24
 80014e0:	2353      	movs	r3, #83	; 0x53
 80014e2:	626b      	str	r3, [r5, #36]	; 0x24
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80014e4:	68b3      	ldr	r3, [r6, #8]
  phrtc = hrtc;
 80014e6:	6021      	str	r1, [r4, #0]
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80014e8:	f043 0320 	orr.w	r3, r3, #32
 80014ec:	60b3      	str	r3, [r6, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80014ee:	68b3      	ldr	r3, [r6, #8]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	f1c3 0304 	rsb	r3, r3, #4
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	71e1      	strb	r1, [r4, #7]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80014fc:	6932      	ldr	r2, [r6, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f44f 0cfe 	mov.w	ip, #8323072	; 0x7f0000
 8001502:	fa9c fcac 	rbit	ip, ip

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001506:	6933      	ldr	r3, [r6, #16]
  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001508:	fabc fc8c 	clz	ip, ip
 800150c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001510:	fa22 f20c 	lsr.w	r2, r2, ip
  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001514:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001518:	3301      	adds	r3, #1
  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800151a:	3201      	adds	r2, #1
 800151c:	b2d2      	uxtb	r2, r2
  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800151e:	80a3      	strh	r3, [r4, #4]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001520:	3b01      	subs	r3, #1
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800152a:	71a2      	strb	r2, [r4, #6]
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800152c:	40cb      	lsrs	r3, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800152e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001532:	4293      	cmp	r3, r2
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001534:	bf88      	it	hi
 8001536:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800153a:	4a2d      	ldr	r2, [pc, #180]	; (80015f0 <HW_TS_Init+0x11c>)
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800153c:	bf98      	it	ls
 800153e:	b29b      	uxthls	r3, r3
 8001540:	8123      	strh	r3, [r4, #8]
 8001542:	6813      	ldr	r3, [r2, #0]
 8001544:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001548:	6013      	str	r3, [r2, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800154a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800154e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001552:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001556:	2800      	cmp	r0, #0
 8001558:	d13d      	bne.n	80015d6 <HW_TS_Init+0x102>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <HW_TS_Init+0x120>)
 800155c:	2101      	movs	r1, #1
 800155e:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001562:	f04f 31ff 	mov.w	r1, #4294967295
 8001566:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800156a:	210a      	movs	r1, #10
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800156c:	7418      	strb	r0, [r3, #16]
 800156e:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 8001572:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 8001576:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 800157a:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
 800157e:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
 8001582:	f883 00a0 	strb.w	r0, [r3, #160]	; 0xa0
 8001586:	f883 00b8 	strb.w	r0, [r3, #184]	; 0xb8
 800158a:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
 800158e:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001592:	7019      	strb	r1, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001594:	68ab      	ldr	r3, [r5, #8]
 8001596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800159a:	60ab      	str	r3, [r5, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800159c:	68eb      	ldr	r3, [r5, #12]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f463 6390 	orn	r3, r3, #1152	; 0x480
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80015a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80015a8:	60eb      	str	r3, [r5, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80015aa:	2003      	movs	r0, #3
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80015ac:	60d1      	str	r1, [r2, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80015ae:	f009 fbf7 	bl	800ada0 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	681d      	ldr	r5, [r3, #0]
 80015b6:	68ab      	ldr	r3, [r5, #8]
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015bc:	60ab      	str	r3, [r5, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80015be:	2103      	movs	r1, #3
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80015c0:	23ff      	movs	r3, #255	; 0xff
  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80015c2:	4608      	mov	r0, r1
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80015c4:	626b      	str	r3, [r5, #36]	; 0x24
  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80015c6:	2200      	movs	r2, #0
 80015c8:	f009 fb60 	bl	800ac8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */

  return;
}
 80015cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015d0:	2003      	movs	r0, #3
 80015d2:	f009 bb99 	b.w	800ad08 <HAL_NVIC_EnableIRQ>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80015d6:	68eb      	ldr	r3, [r5, #12]
 80015d8:	055b      	lsls	r3, r3, #21
 80015da:	d5f0      	bpl.n	80015be <HW_TS_Init+0xea>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80015dc:	2003      	movs	r0, #3
 80015de:	f009 fbcf 	bl	800ad80 <HAL_NVIC_SetPendingIRQ>
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	681d      	ldr	r5, [r3, #0]
 80015e6:	e7ea      	b.n	80015be <HW_TS_Init+0xea>
 80015e8:	40002800 	.word	0x40002800
 80015ec:	2000064c 	.word	0x2000064c
 80015f0:	58000800 	.word	0x58000800
 80015f4:	20000358 	.word	0x20000358

080015f8 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80015f8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015fa:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80015fe:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001600:	4c2b      	ldr	r4, [pc, #172]	; (80016b0 <HW_TS_Create+0xb8>)
 8001602:	7c25      	ldrb	r5, [r4, #16]
 8001604:	b1f5      	cbz	r5, 8001644 <HW_TS_Create+0x4c>
 8001606:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
 800160a:	b36d      	cbz	r5, 8001668 <HW_TS_Create+0x70>
 800160c:	f894 5040 	ldrb.w	r5, [r4, #64]	; 0x40
 8001610:	b375      	cbz	r5, 8001670 <HW_TS_Create+0x78>
 8001612:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 8001616:	b37d      	cbz	r5, 8001678 <HW_TS_Create+0x80>
 8001618:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 800161c:	b385      	cbz	r5, 8001680 <HW_TS_Create+0x88>
 800161e:	f894 5088 	ldrb.w	r5, [r4, #136]	; 0x88
 8001622:	b38d      	cbz	r5, 8001688 <HW_TS_Create+0x90>
 8001624:	f894 50a0 	ldrb.w	r5, [r4, #160]	; 0xa0
 8001628:	b395      	cbz	r5, 8001690 <HW_TS_Create+0x98>
 800162a:	f894 50b8 	ldrb.w	r5, [r4, #184]	; 0xb8
 800162e:	b39d      	cbz	r5, 8001698 <HW_TS_Create+0xa0>
 8001630:	f894 50d0 	ldrb.w	r5, [r4, #208]	; 0xd0
 8001634:	b3a5      	cbz	r5, 80016a0 <HW_TS_Create+0xa8>
 8001636:	f894 50e8 	ldrb.w	r5, [r4, #232]	; 0xe8
 800163a:	b3ad      	cbz	r5, 80016a8 <HW_TS_Create+0xb0>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800163c:	f386 8810 	msr	PRIMASK, r6
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001640:	2001      	movs	r0, #1
  }

  return(localreturnstatus);
}
 8001642:	bd70      	pop	{r4, r5, r6, pc}
 8001644:	f005 0eff 	and.w	lr, r5, #255	; 0xff
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001648:	46f4      	mov	ip, lr
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800164a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800164e:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8001652:	2501      	movs	r5, #1
 8001654:	7425      	strb	r5, [r4, #16]
 8001656:	f386 8810 	msr	PRIMASK, r6
    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800165a:	6160      	str	r0, [r4, #20]
    aTimerContext[loop].TimerMode = TimerMode;
 800165c:	7462      	strb	r2, [r4, #17]
    localreturnstatus = hw_ts_Successful;
 800165e:	2000      	movs	r0, #0
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001660:	6063      	str	r3, [r4, #4]
    *pTimerId = loop;
 8001662:	f881 e000 	strb.w	lr, [r1]
}
 8001666:	bd70      	pop	{r4, r5, r6, pc}
    loop++;
 8001668:	f04f 0e01 	mov.w	lr, #1
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800166c:	46f4      	mov	ip, lr
 800166e:	e7ec      	b.n	800164a <HW_TS_Create+0x52>
    loop++;
 8001670:	f04f 0e02 	mov.w	lr, #2
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001674:	46f4      	mov	ip, lr
 8001676:	e7e8      	b.n	800164a <HW_TS_Create+0x52>
    loop++;
 8001678:	f04f 0e03 	mov.w	lr, #3
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800167c:	46f4      	mov	ip, lr
 800167e:	e7e4      	b.n	800164a <HW_TS_Create+0x52>
    loop++;
 8001680:	f04f 0e04 	mov.w	lr, #4
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001684:	46f4      	mov	ip, lr
 8001686:	e7e0      	b.n	800164a <HW_TS_Create+0x52>
    loop++;
 8001688:	f04f 0e05 	mov.w	lr, #5
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800168c:	46f4      	mov	ip, lr
 800168e:	e7dc      	b.n	800164a <HW_TS_Create+0x52>
    loop++;
 8001690:	f04f 0e06 	mov.w	lr, #6
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001694:	46f4      	mov	ip, lr
 8001696:	e7d8      	b.n	800164a <HW_TS_Create+0x52>
    loop++;
 8001698:	f04f 0e07 	mov.w	lr, #7
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800169c:	46f4      	mov	ip, lr
 800169e:	e7d4      	b.n	800164a <HW_TS_Create+0x52>
    loop++;
 80016a0:	f04f 0e08 	mov.w	lr, #8
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80016a4:	46f4      	mov	ip, lr
 80016a6:	e7d0      	b.n	800164a <HW_TS_Create+0x52>
    loop++;
 80016a8:	f04f 0e09 	mov.w	lr, #9
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80016ac:	46f4      	mov	ip, lr
 80016ae:	e7cc      	b.n	800164a <HW_TS_Create+0x52>
 80016b0:	20000358 	.word	0x20000358

080016b4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80016b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b6:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016b8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016be:	4e3b      	ldr	r6, [pc, #236]	; (80017ac <HW_TS_Stop+0xf8>)
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80016c0:	2003      	movs	r0, #3
 80016c2:	f009 fb2f 	bl	800ad24 <HAL_NVIC_DisableIRQ>
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016c6:	6833      	ldr	r3, [r6, #0]

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80016c8:	4839      	ldr	r0, [pc, #228]	; (80017b0 <HW_TS_Stop+0xfc>)
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	22ca      	movs	r2, #202	; 0xca
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
 80016d0:	2253      	movs	r2, #83	; 0x53
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80016d4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80016d8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80016dc:	7c11      	ldrb	r1, [r2, #16]
 80016de:	2902      	cmp	r1, #2
 80016e0:	d007      	beq.n	80016f2 <HW_TS_Stop+0x3e>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80016e2:	22ff      	movs	r2, #255	; 0xff
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016e6:	2003      	movs	r0, #3
 80016e8:	f009 fb0e 	bl	800ad08 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ec:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 80016f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(TimerID == CurrentRunningTimerID)
 80016f2:	7801      	ldrb	r1, [r0, #0]
 80016f4:	428c      	cmp	r4, r1
 80016f6:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 80016fa:	d02e      	beq.n	800175a <HW_TS_Stop+0xa6>
    previous_id = aTimerContext[TimerID].PreviousID;
 80016fc:	7e11      	ldrb	r1, [r2, #24]
    next_id = aTimerContext[TimerID].NextID;
 80016fe:	7e57      	ldrb	r7, [r2, #25]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001700:	f892 e019 	ldrb.w	lr, [r2, #25]
 8001704:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001708:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800170c:	fa5f fe8e 	uxtb.w	lr, lr
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001710:	2f0a      	cmp	r7, #10
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001712:	f881 e019 	strb.w	lr, [r1, #25]
    next_id = aTimerContext[TimerID].NextID;
 8001716:	b2f9      	uxtb	r1, r7
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001718:	d006      	beq.n	8001728 <HW_TS_Stop+0x74>
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800171a:	7e12      	ldrb	r2, [r2, #24]
 800171c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001720:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	760a      	strb	r2, [r1, #24]
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001728:	4464      	add	r4, ip
 800172a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800172e:	2201      	movs	r2, #1
 8001730:	7422      	strb	r2, [r4, #16]
  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001732:	7802      	ldrb	r2, [r0, #0]
 8001734:	2a0a      	cmp	r2, #10
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001736:	bf04      	itt	eq
 8001738:	f04f 32ff 	moveq.w	r2, #4294967295
 800173c:	f8c0 20f4 	streq.w	r2, [r0, #244]	; 0xf4
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001740:	7802      	ldrb	r2, [r0, #0]
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001742:	2a0a      	cmp	r2, #10
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001744:	b2d1      	uxtb	r1, r2
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001746:	d010      	beq.n	800176a <HW_TS_Stop+0xb6>
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001748:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
 800174c:	428a      	cmp	r2, r1
 800174e:	d0c8      	beq.n	80016e2 <HW_TS_Stop+0x2e>
      RescheduleTimerList();
 8001750:	f7ff fdee 	bl	8001330 <RescheduleTimerList>
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001754:	6833      	ldr	r3, [r6, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	e7c3      	b.n	80016e2 <HW_TS_Stop+0x2e>
    PreviousRunningTimerID = CurrentRunningTimerID;
 800175a:	7801      	ldrb	r1, [r0, #0]
 800175c:	b2c9      	uxtb	r1, r1
 800175e:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001762:	7e52      	ldrb	r2, [r2, #25]
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	7002      	strb	r2, [r0, #0]
 8001768:	e7de      	b.n	8001728 <HW_TS_Stop+0x74>
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <HW_TS_Stop+0x100>)
 800176c:	6892      	ldr	r2, [r2, #8]
 800176e:	0550      	lsls	r0, r2, #21
 8001770:	d415      	bmi.n	800179e <HW_TS_Stop+0xea>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001778:	609a      	str	r2, [r3, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	0752      	lsls	r2, r2, #29
 800177e:	d5fc      	bpl.n	800177a <HW_TS_Stop+0xc6>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001780:	68da      	ldr	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001782:	490d      	ldr	r1, [pc, #52]	; (80017b8 <HW_TS_Stop+0x104>)
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800178a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800178c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001790:	60cb      	str	r3, [r1, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001792:	2003      	movs	r0, #3
 8001794:	f009 fb04 	bl	800ada0 <HAL_NVIC_ClearPendingIRQ>
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001798:	6833      	ldr	r3, [r6, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	e7a1      	b.n	80016e2 <HW_TS_Stop+0x2e>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	0751      	lsls	r1, r2, #29
 80017a2:	d5e6      	bpl.n	8001772 <HW_TS_Stop+0xbe>
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	0751      	lsls	r1, r2, #29
 80017a8:	d4f9      	bmi.n	800179e <HW_TS_Stop+0xea>
 80017aa:	e7e2      	b.n	8001772 <HW_TS_Stop+0xbe>
 80017ac:	2000064c 	.word	0x2000064c
 80017b0:	20000358 	.word	0x20000358
 80017b4:	40002800 	.word	0x40002800
 80017b8:	58000800 	.word	0x58000800

080017bc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80017bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80017c0:	4c7e      	ldr	r4, [pc, #504]	; (80019bc <HW_TS_Start+0x200>)
 80017c2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80017c6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
{
 80017ca:	4606      	mov	r6, r0
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80017cc:	7c1b      	ldrb	r3, [r3, #16]
 80017ce:	2b02      	cmp	r3, #2
{
 80017d0:	4689      	mov	r9, r1
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80017d2:	ea4f 0740 	mov.w	r7, r0, lsl #1
 80017d6:	f000 80e4 	beq.w	80019a2 <HW_TS_Start+0x1e6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017da:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80017de:	b672      	cpsid	i
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017e0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80019c0 <HW_TS_Start+0x204>
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80017e4:	2003      	movs	r0, #3
 80017e6:	f009 fa9d 	bl	800ad24 <HAL_NVIC_DisableIRQ>
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017ea:	f8d8 3000 	ldr.w	r3, [r8]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	22ca      	movs	r2, #202	; 0xca

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80017f2:	19bb      	adds	r3, r7, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017f4:	6242      	str	r2, [r0, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80017f6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017fa:	2253      	movs	r2, #83	; 0x53
 80017fc:	6242      	str	r2, [r0, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80017fe:	2202      	movs	r2, #2
 8001800:	741a      	strb	r2, [r3, #16]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001802:	f8c3 900c 	str.w	r9, [r3, #12]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001806:	f8c3 9008 	str.w	r9, [r3, #8]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800180a:	7822      	ldrb	r2, [r4, #0]
 800180c:	2a0a      	cmp	r2, #10
 800180e:	b2d1      	uxtb	r1, r2
 8001810:	d121      	bne.n	8001856 <HW_TS_Start+0x9a>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001812:	7822      	ldrb	r2, [r4, #0]
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	f884 20f9 	strb.w	r2, [r4, #249]	; 0xf9
    CurrentRunningTimerID = TimerID;
 800181a:	7026      	strb	r6, [r4, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800181c:	7659      	strb	r1, [r3, #25]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    time_elapsed = 0;
 8001826:	f04f 0c00 	mov.w	ip, #0

  time_elapsed =  linkTimer(timer_id);

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800182a:	7823      	ldrb	r3, [r4, #0]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800182c:	f894 20f9 	ldrb.w	r2, [r4, #249]	; 0xf9
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8093 	bne.w	800195c <HW_TS_Start+0x1a0>
  {
    RescheduleTimerList();
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001836:	443e      	add	r6, r7
 8001838:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800183c:	68e3      	ldr	r3, [r4, #12]
 800183e:	eba3 030c 	sub.w	r3, r3, ip
 8001842:	60e3      	str	r3, [r4, #12]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001844:	23ff      	movs	r3, #255	; 0xff
 8001846:	6243      	str	r3, [r0, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001848:	2003      	movs	r0, #3
 800184a:	f009 fa5d 	bl	800ad08 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800184e:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 8001852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001856:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800185a:	3301      	adds	r3, #1
 800185c:	f000 80ab 	beq.w	80019b6 <HW_TS_Start+0x1fa>
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001860:	f8df c160 	ldr.w	ip, [pc, #352]	; 80019c4 <HW_TS_Start+0x208>
 8001864:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001868:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800186c:	b292      	uxth	r2, r2
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800186e:	b29b      	uxth	r3, r3
  while(first_read != second_read)
 8001870:	429a      	cmp	r2, r3
 8001872:	d005      	beq.n	8001880 <HW_TS_Start+0xc4>
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001874:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
 8001878:	461a      	mov	r2, r3
 800187a:	b28b      	uxth	r3, r1
  while(first_read != second_read)
 800187c:	429a      	cmp	r2, r3
 800187e:	d1f9      	bne.n	8001874 <HW_TS_Start+0xb8>
    if (SSRValueOnLastSetup >= return_value)
 8001880:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
    return_value = return_value*AsynchPrescalerUserConfig;
 8001884:	f898 c006 	ldrb.w	ip, [r8, #6]
    if (SSRValueOnLastSetup >= return_value)
 8001888:	4293      	cmp	r3, r2
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800188a:	bf85      	ittet	hi
 800188c:	f8b8 2004 	ldrhhi.w	r2, [r8, #4]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001890:	f8d4 10f4 	ldrhi.w	r1, [r4, #244]	; 0xf4
      return_value = SSRValueOnLastSetup - return_value;
 8001894:	f8d4 20f4 	ldrls.w	r2, [r4, #244]	; 0xf4
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001898:	1852      	addhi	r2, r2, r1
 800189a:	1ad3      	subs	r3, r2, r3
    return_value = return_value*AsynchPrescalerUserConfig;
 800189c:	fb03 f30c 	mul.w	r3, r3, ip
    return_value = return_value >> WakeupTimerDivider;
 80018a0:	f898 c007 	ldrb.w	ip, [r8, #7]
 80018a4:	fa23 fc0c 	lsr.w	ip, r3, ip
 80018a8:	fa1f fc8c 	uxth.w	ip, ip
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80018ac:	19ba      	adds	r2, r7, r6
 80018ae:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80018b2:	68d3      	ldr	r3, [r2, #12]
 80018b4:	4463      	add	r3, ip
 80018b6:	60d3      	str	r3, [r2, #12]
    time_left = aTimerContext[TimerID].CountLeft;
 80018b8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80018bc:	7823      	ldrb	r3, [r4, #0]
 80018be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80018c2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	459e      	cmp	lr, r3
 80018ca:	d34d      	bcc.n	8001968 <HW_TS_Start+0x1ac>
      timer_id_lookup = CurrentRunningTimerID;
 80018cc:	7823      	ldrb	r3, [r4, #0]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80018ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80018d2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
      timer_id_lookup = CurrentRunningTimerID;
 80018d6:	b2d9      	uxtb	r1, r3
      next_id = aTimerContext[timer_id_lookup].NextID;
 80018d8:	f892 9019 	ldrb.w	r9, [r2, #25]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80018dc:	f1b9 0f0a 	cmp.w	r9, #10
      next_id = aTimerContext[timer_id_lookup].NextID;
 80018e0:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80018e4:	fa5f f389 	uxtb.w	r3, r9
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80018e8:	d110      	bne.n	800190c <HW_TS_Start+0x150>
 80018ea:	e01a      	b.n	8001922 <HW_TS_Start+0x166>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80018ec:	f899 3019 	ldrb.w	r3, [r9, #25]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80018f0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80018f4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80018f8:	b2d9      	uxtb	r1, r3
        next_id = aTimerContext[timer_id_lookup].NextID;
 80018fa:	f892 9019 	ldrb.w	r9, [r2, #25]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80018fe:	f1b9 0f0a 	cmp.w	r9, #10
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001902:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8001906:	fa5f f389 	uxtb.w	r3, r9
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800190a:	d00a      	beq.n	8001922 <HW_TS_Start+0x166>
 800190c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001910:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001914:	eb02 0901 	add.w	r9, r2, r1
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	459e      	cmp	lr, r3
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800191c:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001920:	d2e4      	bcs.n	80018ec <HW_TS_Start+0x130>
  next_id = aTimerContext[RefTimerID].NextID;
 8001922:	1853      	adds	r3, r2, r1
 8001924:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001928:	7e5b      	ldrb	r3, [r3, #25]
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800192a:	2b0a      	cmp	r3, #10
  next_id = aTimerContext[RefTimerID].NextID;
 800192c:	fa5f fe83 	uxtb.w	lr, r3
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001930:	d004      	beq.n	800193c <HW_TS_Start+0x180>
    aTimerContext[next_id].PreviousID = TimerID;
 8001932:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8001936:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800193a:	761e      	strb	r6, [r3, #24]
  aTimerContext[RefTimerID].NextID = TimerID;
 800193c:	1853      	adds	r3, r2, r1
  aTimerContext[TimerID].NextID = next_id;
 800193e:	19ba      	adds	r2, r7, r6
 8001940:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
  aTimerContext[RefTimerID].NextID = TimerID;
 8001944:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  aTimerContext[TimerID].NextID = next_id;
 8001948:	f882 e019 	strb.w	lr, [r2, #25]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800194c:	7611      	strb	r1, [r2, #24]
  aTimerContext[RefTimerID].NextID = TimerID;
 800194e:	765e      	strb	r6, [r3, #25]
  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001950:	7823      	ldrb	r3, [r4, #0]
  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001952:	f894 20f9 	ldrb.w	r2, [r4, #249]	; 0xf9
 8001956:	429a      	cmp	r2, r3
 8001958:	f43f af6d 	beq.w	8001836 <HW_TS_Start+0x7a>
    RescheduleTimerList();
 800195c:	f7ff fce8 	bl	8001330 <RescheduleTimerList>
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001960:	f8d8 3000 	ldr.w	r3, [r8]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	e76d      	b.n	8001844 <HW_TS_Start+0x88>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001968:	7821      	ldrb	r1, [r4, #0]
  if(RefTimerID != CurrentRunningTimerID)
 800196a:	f894 e000 	ldrb.w	lr, [r4]
 800196e:	4571      	cmp	r1, lr
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001970:	b2cb      	uxtb	r3, r1
  if(RefTimerID != CurrentRunningTimerID)
 8001972:	d019      	beq.n	80019a8 <HW_TS_Start+0x1ec>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001974:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 8001978:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 800197c:	f89e 1018 	ldrb.w	r1, [lr, #24]
    aTimerContext[previous_id].NextID = TimerID;
 8001980:	eb01 0941 	add.w	r9, r1, r1, lsl #1
 8001984:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001988:	b2c9      	uxtb	r1, r1
    aTimerContext[previous_id].NextID = TimerID;
 800198a:	f889 6019 	strb.w	r6, [r9, #25]
    aTimerContext[TimerID].NextID = RefTimerID;
 800198e:	7653      	strb	r3, [r2, #25]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001990:	7611      	strb	r1, [r2, #24]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001992:	f88e 6018 	strb.w	r6, [lr, #24]
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001996:	7823      	ldrb	r3, [r4, #0]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
      CurrentRunningTimerID = TimerID;
 800199e:	7026      	strb	r6, [r4, #0]
 80019a0:	e743      	b.n	800182a <HW_TS_Start+0x6e>
    HW_TS_Stop( timer_id );
 80019a2:	f7ff fe87 	bl	80016b4 <HW_TS_Stop>
 80019a6:	e718      	b.n	80017da <HW_TS_Start+0x1e>
    aTimerContext[TimerID].NextID = RefTimerID;
 80019a8:	7653      	strb	r3, [r2, #25]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80019aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80019ae:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80019b2:	761e      	strb	r6, [r3, #24]
 80019b4:	e7ef      	b.n	8001996 <HW_TS_Start+0x1da>
 80019b6:	f04f 0c00 	mov.w	ip, #0
 80019ba:	e777      	b.n	80018ac <HW_TS_Start+0xf0>
 80019bc:	20000358 	.word	0x20000358
 80019c0:	2000064c 	.word	0x2000064c
 80019c4:	40002800 	.word	0x40002800

080019c8 <HW_TS_RTC_Int_AppNot>:
  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
  pTimerCallBack();
 80019c8:	4710      	bx	r2
 80019ca:	bf00      	nop

080019cc <HW_TS_RTC_Wakeup_Handler>:
{
 80019cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019d0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80019d4:	b672      	cpsid	i
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80019d6:	4c41      	ldr	r4, [pc, #260]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x110>)
  local_current_running_timer_id = CurrentRunningTimerID;
 80019d8:	4841      	ldr	r0, [pc, #260]	; (8001ae0 <HW_TS_RTC_Wakeup_Handler+0x114>)
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	27ca      	movs	r7, #202	; 0xca
 80019e0:	2653      	movs	r6, #83	; 0x53
 80019e2:	625f      	str	r7, [r3, #36]	; 0x24
 80019e4:	625e      	str	r6, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ec:	609a      	str	r2, [r3, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 80019ee:	7802      	ldrb	r2, [r0, #0]
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80019f0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80019f4:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  local_current_running_timer_id = CurrentRunningTimerID;
 80019f8:	fa5f f882 	uxtb.w	r8, r2
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80019fc:	0051      	lsls	r1, r2, #1
 80019fe:	f89c 2010 	ldrb.w	r2, [ip, #16]
 8001a02:	2a02      	cmp	r2, #2
 8001a04:	d013      	beq.n	8001a2e <HW_TS_RTC_Wakeup_Handler+0x62>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	0752      	lsls	r2, r2, #29
 8001a0a:	d5fc      	bpl.n	8001a06 <HW_TS_RTC_Wakeup_Handler+0x3a>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a0c:	68da      	ldr	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a0e:	4935      	ldr	r1, [pc, #212]	; (8001ae4 <HW_TS_RTC_Wakeup_Handler+0x118>)
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a16:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a1e:	f385 8810 	msr	PRIMASK, r5
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	22ff      	movs	r2, #255	; 0xff
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001a2e:	f8dc a004 	ldr.w	sl, [ip, #4]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001a32:	f8dc 9014 	ldr.w	r9, [ip, #20]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001a36:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d040      	beq.n	8001ac0 <HW_TS_RTC_Wakeup_Handler+0xf4>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001a3e:	f89c 3011 	ldrb.w	r3, [ip, #17]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d00e      	beq.n	8001a64 <HW_TS_RTC_Wakeup_Handler+0x98>
 8001a46:	f385 8810 	msr	PRIMASK, r5
        HW_TS_Stop(local_current_running_timer_id);
 8001a4a:	4640      	mov	r0, r8
 8001a4c:	f7ff fe32 	bl	80016b4 <HW_TS_Stop>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	625f      	str	r7, [r3, #36]	; 0x24
 8001a56:	625e      	str	r6, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001a58:	4652      	mov	r2, sl
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	4648      	mov	r0, r9
 8001a5e:	f7ff ffb3 	bl	80019c8 <HW_TS_RTC_Int_AppNot>
 8001a62:	e7de      	b.n	8001a22 <HW_TS_RTC_Wakeup_Handler+0x56>
  if(TimerID == CurrentRunningTimerID)
 8001a64:	7803      	ldrb	r3, [r0, #0]
 8001a66:	4598      	cmp	r8, r3
 8001a68:	d02f      	beq.n	8001aca <HW_TS_RTC_Wakeup_Handler+0xfe>
    previous_id = aTimerContext[TimerID].PreviousID;
 8001a6a:	f89c 3018 	ldrb.w	r3, [ip, #24]
    next_id = aTimerContext[TimerID].NextID;
 8001a6e:	f89c 6019 	ldrb.w	r6, [ip, #25]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001a72:	f89c 2019 	ldrb.w	r2, [ip, #25]
 8001a76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a7a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001a7e:	b2d2      	uxtb	r2, r2
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a80:	2e0a      	cmp	r6, #10
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001a82:	765a      	strb	r2, [r3, #25]
    next_id = aTimerContext[TimerID].NextID;
 8001a84:	b2f3      	uxtb	r3, r6
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a86:	d007      	beq.n	8001a98 <HW_TS_RTC_Wakeup_Handler+0xcc>
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001a88:	f89c 2018 	ldrb.w	r2, [ip, #24]
 8001a8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a90:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	761a      	strb	r2, [r3, #24]
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001a98:	eb01 0308 	add.w	r3, r1, r8
 8001a9c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	741a      	strb	r2, [r3, #16]
  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001aa4:	7802      	ldrb	r2, [r0, #0]
 8001aa6:	f385 8810 	msr	PRIMASK, r5
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001aaa:	6899      	ldr	r1, [r3, #8]
 8001aac:	4640      	mov	r0, r8
 8001aae:	f7ff fe85 	bl	80017bc <HW_TS_Start>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	22ca      	movs	r2, #202	; 0xca
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
 8001aba:	2253      	movs	r2, #83	; 0x53
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
 8001abe:	e7cb      	b.n	8001a58 <HW_TS_RTC_Wakeup_Handler+0x8c>
      RescheduleTimerList();
 8001ac0:	f7ff fc36 	bl	8001330 <RescheduleTimerList>
 8001ac4:	f385 8810 	msr	PRIMASK, r5
}
 8001ac8:	e7ab      	b.n	8001a22 <HW_TS_RTC_Wakeup_Handler+0x56>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001aca:	7803      	ldrb	r3, [r0, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f880 30f9 	strb.w	r3, [r0, #249]	; 0xf9
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001ad2:	f89c 3019 	ldrb.w	r3, [ip, #25]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	7003      	strb	r3, [r0, #0]
 8001ada:	e7dd      	b.n	8001a98 <HW_TS_RTC_Wakeup_Handler+0xcc>
 8001adc:	2000064c 	.word	0x2000064c
 8001ae0:	20000358 	.word	0x20000358
 8001ae4:	58000800 	.word	0x58000800

08001ae8 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001ae8:	b510      	push	{r4, lr}
HAL_StatusTypeDef hal_status = HAL_OK;
hw_status_t hw_status = hw_uart_ok;

    switch (hw_uart_id)
 8001aea:	b180      	cbz	r0, 8001b0e <HW_UART_Transmit_DMA+0x26>
 8001aec:	2802      	cmp	r0, #2
 8001aee:	d10c      	bne.n	8001b0a <HW_UART_Transmit_DMA+0x22>
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case hw_lpuart1:
            HW_hlpuart1TxCb = cb;
 8001af0:	4c0b      	ldr	r4, [pc, #44]	; (8001b20 <HW_UART_Transmit_DMA+0x38>)
            hlpuart1.Instance = LPUART1;
 8001af2:	480c      	ldr	r0, [pc, #48]	; (8001b24 <HW_UART_Transmit_DMA+0x3c>)
            HW_hlpuart1TxCb = cb;
 8001af4:	60e3      	str	r3, [r4, #12]
            hlpuart1.Instance = LPUART1;
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HW_UART_Transmit_DMA+0x40>)
 8001af8:	6003      	str	r3, [r0, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8001afa:	f00b fa61 	bl	800cfc0 <HAL_UART_Transmit_DMA>

        default:
            break;
    }

    switch (hal_status)
 8001afe:	1e43      	subs	r3, r0, #1
 8001b00:	b2db      	uxtb	r3, r3
{
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	bf28      	it	cs
 8001b06:	2000      	movcs	r0, #0
        default:
            break;
    }

    return hw_status;
}
 8001b08:	bd10      	pop	{r4, pc}
    switch (hw_uart_id)
 8001b0a:	2000      	movs	r0, #0
}
 8001b0c:	bd10      	pop	{r4, pc}
            HW_huart1TxCb = cb;
 8001b0e:	4c04      	ldr	r4, [pc, #16]	; (8001b20 <HW_UART_Transmit_DMA+0x38>)
            huart1.Instance = USART1;
 8001b10:	4806      	ldr	r0, [pc, #24]	; (8001b2c <HW_UART_Transmit_DMA+0x44>)
            HW_huart1TxCb = cb;
 8001b12:	60a3      	str	r3, [r4, #8]
            huart1.Instance = USART1;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HW_UART_Transmit_DMA+0x48>)
 8001b16:	6003      	str	r3, [r0, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001b18:	f00b fa52 	bl	800cfc0 <HAL_UART_Transmit_DMA>
            break;
 8001b1c:	e7ef      	b.n	8001afe <HW_UART_Transmit_DMA+0x16>
 8001b1e:	bf00      	nop
 8001b20:	20000658 	.word	0x20000658
 8001b24:	20000770 	.word	0x20000770
 8001b28:	40008000 	.word	0x40008000
 8001b2c:	20000800 	.word	0x20000800
 8001b30:	40013800 	.word	0x40013800

08001b34 <HAL_UART_TxCpltCallback>:
    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    switch ((uint32_t)huart->Instance)
 8001b34:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <HAL_UART_TxCpltCallback+0x24>)
 8001b36:	6803      	ldr	r3, [r0, #0]
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d007      	beq.n	8001b4c <HAL_UART_TxCpltCallback+0x18>
 8001b3c:	f502 4238 	add.w	r2, r2, #47104	; 0xb800
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d107      	bne.n	8001b54 <HAL_UART_TxCpltCallback+0x20>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
                if(HW_huart1TxCb)
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_UART_TxCpltCallback+0x28>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	b123      	cbz	r3, 8001b54 <HAL_UART_TxCpltCallback+0x20>

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
                if(HW_hlpuart1TxCb)
                {
                    HW_hlpuart1TxCb();
 8001b4a:	4718      	bx	r3
                if(HW_hlpuart1TxCb)
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <HAL_UART_TxCpltCallback+0x28>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1fa      	bne.n	8001b4a <HAL_UART_TxCpltCallback+0x16>
        default:
            break;
    }

    return;
}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40008000 	.word	0x40008000
 8001b5c:	20000658 	.word	0x20000658

08001b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b60:	b5d0      	push	{r4, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b62:	2400      	movs	r4, #0
{
 8001b64:	b0b0      	sub	sp, #192	; 0xc0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b66:	4621      	mov	r1, r4
 8001b68:	2234      	movs	r2, #52	; 0x34
 8001b6a:	a80f      	add	r0, sp, #60	; 0x3c
 8001b6c:	f021 f910 	bl	8022d90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b70:	4621      	mov	r1, r4
 8001b72:	2250      	movs	r2, #80	; 0x50
 8001b74:	a81c      	add	r0, sp, #112	; 0x70
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b76:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001b7a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001b7e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001b82:	9408      	str	r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b84:	f021 f904 	bl	8022d90 <memset>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8c:	a80a      	add	r0, sp, #40	; 0x28
 8001b8e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001b92:	f023 0318 	bic.w	r3, r3, #24
 8001b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b9a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8001b9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba6:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8001baa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bae:	9415      	str	r4, [sp, #84]	; 0x54
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bb4:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bbc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bca:	2340      	movs	r3, #64	; 0x40
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001bcc:	2600      	movs	r6, #0
 8001bce:	2700      	movs	r7, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd0:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd2:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd4:	f00a f9f8 	bl	800bfc8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001bd8:	226f      	movs	r2, #111	; 0x6f
 8001bda:	2302      	movs	r3, #2
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bdc:	a802      	add	r0, sp, #8
 8001bde:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001be0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001be4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001be8:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001bec:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bee:	f00a fd4d 	bl	800c68c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001bf2:	f643 0207 	movw	r2, #14343	; 0x3807
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bf6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bfa:	f44f 7180 	mov.w	r1, #256	; 0x100
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001bfe:	921c      	str	r2, [sp, #112]	; 0x70
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c00:	9324      	str	r3, [sp, #144]	; 0x90
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001c02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001c06:	2302      	movs	r3, #2
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c08:	a81c      	add	r0, sp, #112	; 0x70
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c0a:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001c0e:	e9cd 122c 	strd	r1, r2, [sp, #176]	; 0xb0
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001c12:	e9cd 342e 	strd	r3, r4, [sp, #184]	; 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c16:	f00a ff63 	bl	800cae0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001c1a:	b030      	add	sp, #192	; 0xc0
 8001c1c:	bdd0      	pop	{r4, r6, r7, pc}
 8001c1e:	bf00      	nop

08001c20 <main>:
{
 8001c20:	b500      	push	{lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	2400      	movs	r4, #0
{
 8001c24:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001c26:	f008 ffd5 	bl	800abd4 <HAL_Init>
  SystemClock_Config();
 8001c2a:	f7ff ff99 	bl	8001b60 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001c32:	e9cd 4408 	strd	r4, r4, [sp, #32]
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c36:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001c3a:	940a      	str	r4, [sp, #40]	; 0x28
 8001c3c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001c3e:	4851      	ldr	r0, [pc, #324]	; (8001d84 <main+0x164>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	64eb      	str	r3, [r5, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c46:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001c4e:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c50:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c58:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001c60:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c62:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c6a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8001c72:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c74:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001c76:	f043 0308 	orr.w	r3, r3, #8
 8001c7a:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c7c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	4622      	mov	r2, r4
 8001c84:	9305      	str	r3, [sp, #20]
 8001c86:	2103      	movs	r1, #3
  (void)tmpreg;
 8001c88:	9b05      	ldr	r3, [sp, #20]
 8001c8a:	f009 fc25 	bl	800b4d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001c8e:	2203      	movs	r2, #3
 8001c90:	2301      	movs	r3, #1
 8001c92:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	483b      	ldr	r0, [pc, #236]	; (8001d84 <main+0x164>)
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001c9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca2:	f009 faaf 	bl	800b204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001caa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cae:	4836      	ldr	r0, [pc, #216]	; (8001d88 <main+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb2:	a906      	add	r1, sp, #24

  /*Configure GPIO pin : BUTTON_SW2_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb4:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cba:	f009 faa3 	bl	800b204 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_SW2_Pin;
 8001cbe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cc2:	2201      	movs	r2, #1
  HAL_GPIO_Init(BUTTON_SW2_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	4831      	ldr	r0, [pc, #196]	; (8001d8c <main+0x16c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc6:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(BUTTON_SW2_GPIO_Port, &GPIO_InitStruct);
 8001cc8:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = BUTTON_SW2_Pin;
 8001cca:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(BUTTON_SW2_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f009 fa99 	bl	800b204 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cd2:	4622      	mov	r2, r4
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	2006      	movs	r0, #6
 8001cd8:	f008 ffd8 	bl	800ac8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cdc:	2006      	movs	r0, #6
 8001cde:	f009 f813 	bl	800ad08 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	2028      	movs	r0, #40	; 0x28
 8001ce8:	f008 ffd0 	bl	800ac8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cec:	2028      	movs	r0, #40	; 0x28
 8001cee:	f009 f80b 	bl	800ad08 <HAL_NVIC_EnableIRQ>
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001cf2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	64ab      	str	r3, [r5, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001cfa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001d02:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001d04:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001d06:	4333      	orrs	r3, r6
 8001d08:	64ab      	str	r3, [r5, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001d0a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001d0c:	4033      	ands	r3, r6
 8001d0e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001d10:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001d12:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	64ab      	str	r3, [r5, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001d1a:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hrtc.Instance = RTC;
 8001d1c:	4d1c      	ldr	r5, [pc, #112]	; (8001d90 <main+0x170>)
 8001d1e:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001d22:	210f      	movs	r1, #15
 8001d24:	4622      	mov	r2, r4
 8001d26:	9306      	str	r3, [sp, #24]
 8001d28:	200e      	movs	r0, #14
  (void)tmpreg;
 8001d2a:	9b06      	ldr	r3, [sp, #24]
 8001d2c:	f008 ffae 	bl	800ac8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001d30:	200e      	movs	r0, #14
 8001d32:	f008 ffe9 	bl	800ad08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001d36:	210f      	movs	r1, #15
 8001d38:	4622      	mov	r2, r4
 8001d3a:	203a      	movs	r0, #58	; 0x3a
 8001d3c:	f008 ffa6 	bl	800ac8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001d40:	203a      	movs	r0, #58	; 0x3a
 8001d42:	f008 ffe1 	bl	800ad08 <HAL_NVIC_EnableIRQ>
  hrtc.Instance = RTC;
 8001d46:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <main+0x174>)
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d48:	61ec      	str	r4, [r5, #28]
  hrtc.Init.AsynchPrediv = 127;
 8001d4a:	237f      	movs	r3, #127	; 0x7f
 8001d4c:	60ab      	str	r3, [r5, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d4e:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 8001d50:	23ff      	movs	r3, #255	; 0xff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d52:	e9c5 2400 	strd	r2, r4, [r5]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d56:	e9c5 3403 	strd	r3, r4, [r5, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d5a:	e9c5 4405 	strd	r4, r4, [r5, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d5e:	f00b f8af 	bl	800cec0 <HAL_RTC_Init>
  hcrc.Instance = CRC;
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <main+0x178>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001d64:	852c      	strh	r4, [r5, #40]	; 0x28
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001d66:	f105 0024 	add.w	r0, r5, #36	; 0x24
  hcrc.Instance = CRC;
 8001d6a:	626b      	str	r3, [r5, #36]	; 0x24
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001d6c:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001d70:	646e      	str	r6, [r5, #68]	; 0x44
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001d72:	f009 f825 	bl	800adc0 <HAL_CRC_Init>
  APPE_Init();
 8001d76:	f7ff fa61 	bl	800123c <APPE_Init>
  	UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7e:	f00d fb6f 	bl	800f460 <UTIL_SEQ_Run>
  while(1)
 8001d82:	e7fa      	b.n	8001d7a <main+0x15a>
 8001d84:	48000400 	.word	0x48000400
 8001d88:	48000800 	.word	0x48000800
 8001d8c:	48000c00 	.word	0x48000c00
 8001d90:	20000728 	.word	0x20000728
 8001d94:	40002800 	.word	0x40002800
 8001d98:	40023000 	.word	0x40023000

08001d9c <MX_USART1_UART_Init>:
{
 8001d9c:	b538      	push	{r3, r4, r5, lr}
  huart1.Instance = USART1;
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <MX_USART1_UART_Init+0x50>)
  huart1.Init.BaudRate = 115200;
 8001da0:	4913      	ldr	r1, [pc, #76]	; (8001df0 <MX_USART1_UART_Init+0x54>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001da2:	f103 05d8 	add.w	r5, r3, #216	; 0xd8
  huart1.Init.BaudRate = 115200;
 8001da6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001daa:	2400      	movs	r4, #0
  huart1.Init.BaudRate = 115200;
 8001dac:	e9c3 1236 	strd	r1, r2, [r3, #216]	; 0xd8
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001db0:	4628      	mov	r0, r5
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001db2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db6:	210c      	movs	r1, #12
 8001db8:	e9c3 413a 	strd	r4, r1, [r3, #232]	; 0xe8
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dbc:	e9c3 4438 	strd	r4, r4, [r3, #224]	; 0xe0
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001dc0:	e9c3 423c 	strd	r4, r2, [r3, #240]	; 0xf0
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dc4:	e9c3 443e 	strd	r4, r4, [r3, #248]	; 0xf8
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dcc:	f00b fd96 	bl	800d8fc <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	f00b fe22 	bl	800da1c <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd8:	4621      	mov	r1, r4
 8001dda:	4628      	mov	r0, r5
 8001ddc:	f00b fe5c 	bl	800da98 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001de0:	4628      	mov	r0, r5
}
 8001de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001de6:	f00b bdfb 	b.w	800d9e0 <HAL_UARTEx_DisableFifoMode>
 8001dea:	bf00      	nop
 8001dec:	20000728 	.word	0x20000728
 8001df0:	40013800 	.word	0x40013800

08001df4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop

08001df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b500      	push	{lr}
  OTP_ID0_t * p_otp;

  /**
    * Read HSE_Tuning from OTP
    */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001dfa:	2000      	movs	r0, #0
{
 8001dfc:	b083      	sub	sp, #12
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001dfe:	f00c ff31 	bl	800ec64 <OTP_Read>
  if (p_otp)
 8001e02:	b168      	cbz	r0, 8001e20 <HAL_MspInit+0x28>
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_MspInit+0x44>)
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001e0a:	7981      	ldrb	r1, [r0, #6]
 8001e0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001e10:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8001e14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e18:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e1c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e26:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e2a:	651a      	str	r2, [r3, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e32:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e34:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e36:	b003      	add	sp, #12
 8001e38:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e3c:	cafecafe 	.word	0xcafecafe

08001e40 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_CRC_MspInit+0x28>)
 8001e42:	6802      	ldr	r2, [r0, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d000      	beq.n	8001e4a <HAL_CRC_MspInit+0xa>
 8001e48:	4770      	bx	lr
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8001e4e:	b082      	sub	sp, #8
 8001e50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e56:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e60:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e62:	b002      	add	sp, #8
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023000 	.word	0x40023000

08001e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e6c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==LPUART1)
 8001e6e:	6803      	ldr	r3, [r0, #0]
 8001e70:	4a4a      	ldr	r2, [pc, #296]	; (8001f9c <HAL_UART_MspInit+0x130>)
{
 8001e72:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	2400      	movs	r4, #0
  if(huart->Instance==LPUART1)
 8001e76:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001e7c:	e9cd 4406 	strd	r4, r4, [sp, #24]
{
 8001e80:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	9408      	str	r4, [sp, #32]
  if(huart->Instance==LPUART1)
 8001e84:	d004      	beq.n	8001e90 <HAL_UART_MspInit+0x24>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 8001e86:	4a46      	ldr	r2, [pc, #280]	; (8001fa0 <HAL_UART_MspInit+0x134>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d041      	beq.n	8001f10 <HAL_UART_MspInit+0xa4>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e8c:	b00a      	add	sp, #40	; 0x28
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8001e9a:	4e42      	ldr	r6, [pc, #264]	; (8001fa4 <HAL_UART_MspInit+0x138>)
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001ea2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ea4:	f002 0201 	and.w	r2, r2, #1
 8001ea8:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001eaa:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001eac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec8:	a904      	add	r1, sp, #16
  (void)tmpreg;
 8001eca:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f009 f998 	bl	800b204 <HAL_GPIO_Init>
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001ed4:	4a34      	ldr	r2, [pc, #208]	; (8001fa8 <HAL_UART_MspInit+0x13c>)
 8001ed6:	2311      	movs	r3, #17
 8001ed8:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001edc:	4630      	mov	r0, r6
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ede:	2210      	movs	r2, #16
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee0:	2380      	movs	r3, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee2:	e9c6 2402 	strd	r2, r4, [r6, #8]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee6:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eea:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001eee:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001ef0:	f008 ffd8 	bl	800aea4 <HAL_DMA_Init>
 8001ef4:	2800      	cmp	r0, #0
 8001ef6:	d14b      	bne.n	8001f90 <HAL_UART_MspInit+0x124>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001efc:	67ae      	str	r6, [r5, #120]	; 0x78
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001efe:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001f00:	62b5      	str	r5, [r6, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001f02:	f008 fec3 	bl	800ac8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001f06:	2025      	movs	r0, #37	; 0x25
 8001f08:	f008 fefe 	bl	800ad08 <HAL_NVIC_EnableIRQ>
}
 8001f0c:	b00a      	add	sp, #40	; 0x28
 8001f0e:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f14:	4825      	ldr	r0, [pc, #148]	; (8001fac <HAL_UART_MspInit+0x140>)
 8001f16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8001f18:	4e25      	ldr	r6, [pc, #148]	; (8001fb0 <HAL_UART_MspInit+0x144>)
 8001f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f1e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f22:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f26:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001f28:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f2c:	f042 0202 	orr.w	r2, r2, #2
 8001f30:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f3a:	22c0      	movs	r2, #192	; 0xc0
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f42:	2201      	movs	r2, #1
 8001f44:	2303      	movs	r3, #3
 8001f46:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f4c:	2307      	movs	r3, #7
 8001f4e:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8001f50:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f52:	f009 f957 	bl	800b204 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001f56:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <HAL_UART_MspInit+0x148>)
 8001f58:	230f      	movs	r3, #15
 8001f5a:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f5e:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f60:	2210      	movs	r2, #16
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f62:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f64:	e9c6 2402 	strd	r2, r4, [r6, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f68:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f6c:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f70:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f72:	f008 ff97 	bl	800aea4 <HAL_DMA_Init>
 8001f76:	b970      	cbnz	r0, 8001f96 <HAL_UART_MspInit+0x12a>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001f7e:	67ae      	str	r6, [r5, #120]	; 0x78
 8001f80:	62b5      	str	r5, [r6, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f82:	f008 fe83 	bl	800ac8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f86:	2024      	movs	r0, #36	; 0x24
 8001f88:	f008 febe 	bl	800ad08 <HAL_NVIC_EnableIRQ>
}
 8001f8c:	b00a      	add	sp, #40	; 0x28
 8001f8e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001f90:	f7ff ff30 	bl	8001df4 <Error_Handler>
 8001f94:	e7b0      	b.n	8001ef8 <HAL_UART_MspInit+0x8c>
      Error_Handler();
 8001f96:	f7ff ff2d 	bl	8001df4 <Error_Handler>
 8001f9a:	e7ed      	b.n	8001f78 <HAL_UART_MspInit+0x10c>
 8001f9c:	40008000 	.word	0x40008000
 8001fa0:	40013800 	.word	0x40013800
 8001fa4:	200008f0 	.word	0x200008f0
 8001fa8:	40020044 	.word	0x40020044
 8001fac:	48000400 	.word	0x48000400
 8001fb0:	20000890 	.word	0x20000890
 8001fb4:	40020444 	.word	0x40020444

08001fb8 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_RTC_MspInit+0x1c>)
 8001fba:	6802      	ldr	r2, [r0, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d000      	beq.n	8001fc2 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001fc0:	4770      	bx	lr
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd2:	4770      	bx	lr
 8001fd4:	40002800 	.word	0x40002800

08001fd8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop

08001fdc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <HardFault_Handler>
 8001fde:	bf00      	nop

08001fe0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <MemManage_Handler>
 8001fe2:	bf00      	nop

08001fe4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <BusFault_Handler>
 8001fe6:	bf00      	nop

08001fe8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <UsageFault_Handler>
 8001fea:	bf00      	nop

08001fec <SVC_Handler>:
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop

08001ff0 <DebugMon_Handler>:
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop

08001ff4 <PendSV_Handler>:
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop

08001ff8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff8:	f008 be04 	b.w	800ac04 <HAL_IncTick>

08001ffc <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f009 ba71 	b.w	800b4e4 <HAL_GPIO_EXTI_IRQHandler>
 8002002:	bf00      	nop

08002004 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002004:	4801      	ldr	r0, [pc, #4]	; (800200c <DMA1_Channel4_IRQHandler+0x8>)
 8002006:	f009 b8af 	b.w	800b168 <HAL_DMA_IRQHandler>
 800200a:	bf00      	nop
 800200c:	200008f0 	.word	0x200008f0

08002010 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002010:	4801      	ldr	r0, [pc, #4]	; (8002018 <USART1_IRQHandler+0x8>)
 8002012:	f00b b8cf 	b.w	800d1b4 <HAL_UART_IRQHandler>
 8002016:	bf00      	nop
 8002018:	20000800 	.word	0x20000800

0800201c <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800201c:	4801      	ldr	r0, [pc, #4]	; (8002024 <LPUART1_IRQHandler+0x8>)
 800201e:	f00b b8c9 	b.w	800d1b4 <HAL_UART_IRQHandler>
 8002022:	bf00      	nop
 8002024:	20000770 	.word	0x20000770

08002028 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002028:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800202c:	f009 ba5a 	b.w	800b4e4 <HAL_GPIO_EXTI_IRQHandler>

08002030 <DMA2_Channel4_IRQHandler>:
void DMA2_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002030:	4801      	ldr	r0, [pc, #4]	; (8002038 <DMA2_Channel4_IRQHandler+0x8>)
 8002032:	f009 b899 	b.w	800b168 <HAL_DMA_IRQHandler>
 8002036:	bf00      	nop
 8002038:	20000890 	.word	0x20000890

0800203c <RTC_WKUP_IRQHandler>:
/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
  HW_TS_RTC_Wakeup_Handler();
 800203c:	f7ff bcc6 	b.w	80019cc <HW_TS_RTC_Wakeup_Handler>

08002040 <IPCC_C1_RX_IRQHandler>:
/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
  HW_IPCC_Rx_Handler();
 8002040:	f003 b916 	b.w	8005270 <HW_IPCC_Rx_Handler>

08002044 <IPCC_C1_TX_IRQHandler>:
/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
  HW_IPCC_Tx_Handler();
 8002044:	f003 b8bc 	b.w	80051c0 <HW_IPCC_Tx_Handler>

08002048 <I2C1_MspDeInit>:
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 800204c:	4804      	ldr	r0, [pc, #16]	; (8002060 <I2C1_MspDeInit+0x18>)
 800204e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002050:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002054:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002058:	6593      	str	r3, [r2, #88]	; 0x58
 800205a:	f009 b9b1 	b.w	800b3c0 <HAL_GPIO_DeInit>
 800205e:	bf00      	nop
 8002060:	48000400 	.word	0x48000400
 8002064:	00000000 	.word	0x00000000

08002068 <I2C1_MspInit>:
{
 8002068:	b510      	push	{r4, lr}
  SET_BIT(RCC->AHB2ENR, Periphs);
 800206a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800206e:	b088      	sub	sp, #32
 8002070:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	4813      	ldr	r0, [pc, #76]	; (80020c0 <I2C1_MspInit+0x58>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800207a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800207c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80020b8 <I2C1_MspInit+0x50>
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002086:	2304      	movs	r3, #4
  (void)tmpreg;
 8002088:	9a01      	ldr	r2, [sp, #4]
 800208a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800208c:	2201      	movs	r2, #1
 800208e:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002096:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f009 f8b3 	bl	800b204 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800209e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020a4:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ac:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80020ae:	9b00      	ldr	r3, [sp, #0]
}
 80020b0:	b008      	add	sp, #32
 80020b2:	bd10      	pop	{r4, pc}
 80020b4:	f3af 8000 	nop.w
 80020b8:	00000300 	.word	0x00000300
 80020bc:	00000012 	.word	0x00000012
 80020c0:	48000400 	.word	0x48000400

080020c4 <BSP_I2C1_DeInit>:
  if (I2C1InitCounter > 0)
 80020c4:	4808      	ldr	r0, [pc, #32]	; (80020e8 <BSP_I2C1_DeInit+0x24>)
{
 80020c6:	b508      	push	{r3, lr}
  if (I2C1InitCounter > 0)
 80020c8:	6803      	ldr	r3, [r0, #0]
 80020ca:	b113      	cbz	r3, 80020d2 <BSP_I2C1_DeInit+0xe>
    if (--I2C1InitCounter == 0)
 80020cc:	3b01      	subs	r3, #1
 80020ce:	6003      	str	r3, [r0, #0]
 80020d0:	b10b      	cbz	r3, 80020d6 <BSP_I2C1_DeInit+0x12>
  int32_t ret = BSP_ERROR_NONE;
 80020d2:	2000      	movs	r0, #0
}
 80020d4:	bd08      	pop	{r3, pc}
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 80020d6:	3004      	adds	r0, #4
 80020d8:	f009 fb72 	bl	800b7c0 <HAL_I2C_DeInit>
 80020dc:	2800      	cmp	r0, #0
 80020de:	d0f8      	beq.n	80020d2 <BSP_I2C1_DeInit+0xe>
    		ret = BSP_ERROR_BUS_FAILURE;
 80020e0:	f06f 0007 	mvn.w	r0, #7
}
 80020e4:	bd08      	pop	{r3, pc}
 80020e6:	bf00      	nop
 80020e8:	20000950 	.word	0x20000950

080020ec <BSP_I2C1_WriteReg>:
{
 80020ec:	b500      	push	{lr}
 80020ee:	b085      	sub	sp, #20
 80020f0:	4684      	mov	ip, r0
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80020f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020f6:	e9cd 2300 	strd	r2, r3, [sp]
 80020fa:	9002      	str	r0, [sp, #8]
 80020fc:	460a      	mov	r2, r1
 80020fe:	480a      	ldr	r0, [pc, #40]	; (8002128 <BSP_I2C1_WriteReg+0x3c>)
 8002100:	2301      	movs	r3, #1
 8002102:	4661      	mov	r1, ip
 8002104:	f009 fbe0 	bl	800b8c8 <HAL_I2C_Mem_Write>
 8002108:	b910      	cbnz	r0, 8002110 <BSP_I2C1_WriteReg+0x24>
}
 800210a:	b005      	add	sp, #20
 800210c:	f85d fb04 	ldr.w	pc, [sp], #4
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <BSP_I2C1_WriteReg+0x3c>)
 8002112:	f009 fe41 	bl	800bd98 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002116:	2804      	cmp	r0, #4
 8002118:	bf0c      	ite	eq
 800211a:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800211e:	f06f 0003 	mvnne.w	r0, #3
}
 8002122:	b005      	add	sp, #20
 8002124:	f85d fb04 	ldr.w	pc, [sp], #4
 8002128:	20000954 	.word	0x20000954

0800212c <BSP_I2C1_ReadReg>:
{
 800212c:	b500      	push	{lr}
 800212e:	b085      	sub	sp, #20
 8002130:	4684      	mov	ip, r0
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002132:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002136:	e9cd 2300 	strd	r2, r3, [sp]
 800213a:	9002      	str	r0, [sp, #8]
 800213c:	460a      	mov	r2, r1
 800213e:	480a      	ldr	r0, [pc, #40]	; (8002168 <BSP_I2C1_ReadReg+0x3c>)
 8002140:	2301      	movs	r3, #1
 8002142:	4661      	mov	r1, ip
 8002144:	f009 fcf0 	bl	800bb28 <HAL_I2C_Mem_Read>
 8002148:	b910      	cbnz	r0, 8002150 <BSP_I2C1_ReadReg+0x24>
}
 800214a:	b005      	add	sp, #20
 800214c:	f85d fb04 	ldr.w	pc, [sp], #4
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <BSP_I2C1_ReadReg+0x3c>)
 8002152:	f009 fe21 	bl	800bd98 <HAL_I2C_GetError>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002156:	2804      	cmp	r0, #4
 8002158:	bf0c      	ite	eq
 800215a:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800215e:	f06f 0003 	mvnne.w	r0, #3
}
 8002162:	b005      	add	sp, #20
 8002164:	f85d fb04 	ldr.w	pc, [sp], #4
 8002168:	20000954 	.word	0x20000954

0800216c <BSP_GetTick>:
  return HAL_GetTick();
 800216c:	f008 bd56 	b.w	800ac1c <HAL_GetTick>

08002170 <MX_I2C1_Init>:
  hi2c->Init.Timing = 0x00300F38;
 8002170:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <MX_I2C1_Init+0x48>)
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <MX_I2C1_Init+0x4c>)
{
 8002174:	b570      	push	{r4, r5, r6, lr}
  hi2c->Init.OwnAddress1 = 0;
 8002176:	2600      	movs	r6, #0
  hi2c->Init.Timing = 0x00300F38;
 8002178:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800217c:	2301      	movs	r3, #1
 800217e:	e9c0 6302 	strd	r6, r3, [r0, #8]
  hi2c->Init.OwnAddress2 = 0;
 8002182:	e9c0 6604 	strd	r6, r6, [r0, #16]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002186:	e9c0 6606 	strd	r6, r6, [r0, #24]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800218a:	6206      	str	r6, [r0, #32]
{
 800218c:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800218e:	f009 fa93 	bl	800b6b8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002192:	4631      	mov	r1, r6
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002194:	4605      	mov	r5, r0
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002196:	4620      	mov	r0, r4
 8002198:	f009 fe00 	bl	800bd9c <HAL_I2CEx_ConfigAnalogFilter>
 800219c:	4305      	orrs	r5, r0
 800219e:	b2ed      	uxtb	r5, r5
    ret = HAL_ERROR;
 80021a0:	1bad      	subs	r5, r5, r6
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80021a2:	4631      	mov	r1, r6
 80021a4:	4620      	mov	r0, r4
    ret = HAL_ERROR;
 80021a6:	bf18      	it	ne
 80021a8:	2501      	movne	r5, #1
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80021aa:	f009 fe21 	bl	800bdf0 <HAL_I2CEx_ConfigDigitalFilter>
    ret = HAL_ERROR;
 80021ae:	42b0      	cmp	r0, r6
}
 80021b0:	bf0c      	ite	eq
 80021b2:	4628      	moveq	r0, r5
 80021b4:	2001      	movne	r0, #1
 80021b6:	bd70      	pop	{r4, r5, r6, pc}
 80021b8:	40005400 	.word	0x40005400
 80021bc:	00300f38 	.word	0x00300f38

080021c0 <BSP_I2C1_Init>:
{
 80021c0:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance  = I2C1;
 80021c2:	4c1a      	ldr	r4, [pc, #104]	; (800222c <BSP_I2C1_Init+0x6c>)
 80021c4:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <BSP_I2C1_Init+0x70>)
  if(I2C1InitCounter++ == 0)
 80021c6:	6823      	ldr	r3, [r4, #0]
  hi2c1.Instance  = I2C1;
 80021c8:	6062      	str	r2, [r4, #4]
  if(I2C1InitCounter++ == 0)
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	6022      	str	r2, [r4, #0]
 80021ce:	b10b      	cbz	r3, 80021d4 <BSP_I2C1_Init+0x14>
      		ret = BSP_ERROR_NONE;
 80021d0:	2000      	movs	r0, #0
}
 80021d2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80021d4:	1d25      	adds	r5, r4, #4
 80021d6:	4628      	mov	r0, r5
 80021d8:	f009 fdda 	bl	800bd90 <HAL_I2C_GetState>
 80021dc:	2800      	cmp	r0, #0
 80021de:	d1f7      	bne.n	80021d0 <BSP_I2C1_Init+0x10>
      if(IsI2C1MspCbValid == 0U)
 80021e0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80021e4:	b993      	cbnz	r3, 800220c <BSP_I2C1_Init+0x4c>
  if (HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_MSPINIT_CB_ID, I2C1_MspInit)  != HAL_OK)
 80021e6:	4a13      	ldr	r2, [pc, #76]	; (8002234 <BSP_I2C1_Init+0x74>)
  __HAL_I2C_RESET_HANDLE_STATE(&hi2c1);
 80021e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  if (HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_MSPINIT_CB_ID, I2C1_MspInit)  != HAL_OK)
 80021ec:	2109      	movs	r1, #9
 80021ee:	4628      	mov	r0, r5
  __HAL_I2C_RESET_HANDLE_STATE(&hi2c1);
 80021f0:	e9c4 331e 	strd	r3, r3, [r4, #120]	; 0x78
  if (HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_MSPINIT_CB_ID, I2C1_MspInit)  != HAL_OK)
 80021f4:	f009 fb06 	bl	800b804 <HAL_I2C_RegisterCallback>
 80021f8:	b9a8      	cbnz	r0, 8002226 <BSP_I2C1_Init+0x66>
  if (HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_MSPDEINIT_CB_ID, I2C1_MspDeInit) != HAL_OK)
 80021fa:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <BSP_I2C1_Init+0x78>)
 80021fc:	210a      	movs	r1, #10
 80021fe:	4628      	mov	r0, r5
 8002200:	f009 fb00 	bl	800b804 <HAL_I2C_RegisterCallback>
 8002204:	b978      	cbnz	r0, 8002226 <BSP_I2C1_Init+0x66>
  IsI2C1MspCbValid = 1;
 8002206:	2301      	movs	r3, #1
 8002208:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800220c:	480b      	ldr	r0, [pc, #44]	; (800223c <BSP_I2C1_Init+0x7c>)
 800220e:	f7ff ffaf 	bl	8002170 <MX_I2C1_Init>
 8002212:	4601      	mov	r1, r0
 8002214:	b920      	cbnz	r0, 8002220 <BSP_I2C1_Init+0x60>
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8002216:	4809      	ldr	r0, [pc, #36]	; (800223c <BSP_I2C1_Init+0x7c>)
 8002218:	f009 fdc0 	bl	800bd9c <HAL_I2CEx_ConfigAnalogFilter>
 800221c:	2800      	cmp	r0, #0
 800221e:	d0d7      	beq.n	80021d0 <BSP_I2C1_Init+0x10>
      		ret = BSP_ERROR_BUS_FAILURE;
 8002220:	f06f 0007 	mvn.w	r0, #7
}
 8002224:	bd38      	pop	{r3, r4, r5, pc}
          return BSP_ERROR_MSP_FAILURE;
 8002226:	f06f 0009 	mvn.w	r0, #9
}
 800222a:	bd38      	pop	{r3, r4, r5, pc}
 800222c:	20000950 	.word	0x20000950
 8002230:	40005400 	.word	0x40005400
 8002234:	08002069 	.word	0x08002069
 8002238:	08002049 	.word	0x08002049
 800223c:	20000954 	.word	0x20000954

08002240 <MotionAR_manager_run>:
 * @param  timestamp  Timestamp in [ms]
 * @retval None
 */
void MotionAR_manager_run(MAR_input_t *data_in, MAR_output_t *data_out, uint32_t timestamp)
{
  MotionAR_Update(data_in, data_out, (long int)(timestamp & LONG_MAX));
 8002240:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002244:	2300      	movs	r3, #0
 8002246:	f00d b99b 	b.w	800f580 <MotionAR_Update>
 800224a:	bf00      	nop

0800224c <MotionCP_manager_run>:
 * @param  data_out Structure containing ouput data
 * @retval None
 */
void MotionCP_manager_run(MCP_input_t *data_in, MCP_output_t *data_out)
{
  MotionCP_Update(data_in, data_out);
 800224c:	f00e bfd0 	b.w	80111f0 <MotionCP_Update>

08002250 <MotionFX_manager_init>:
 * @brief  Initialises MotionFX algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8002250:	b530      	push	{r4, r5, lr}

  mag_orientation[0] = 'n';
  mag_orientation[1] = 'e';
  mag_orientation[2] = 'u';

  MotionFX_initialize((MFXState_t *)mfxstate_pt);
 8002252:	4c23      	ldr	r4, [pc, #140]	; (80022e0 <MotionFX_manager_init+0x90>)
{
 8002254:	b085      	sub	sp, #20
  acc_orientation[2] = 'u';
 8002256:	2375      	movs	r3, #117	; 0x75
  acc_orientation[0] = 's';
 8002258:	f246 5273 	movw	r2, #25971	; 0x6573

  MotionFX_getKnobs(mfxstate_pt, ipKnobs);
 800225c:	f504 6518 	add.w	r5, r4, #2432	; 0x980
  mag_orientation[0] = 'n';
 8002260:	f246 516e 	movw	r1, #25966	; 0x656e
  MotionFX_initialize((MFXState_t *)mfxstate_pt);
 8002264:	4620      	mov	r0, r4
  acc_orientation[0] = 's';
 8002266:	f8ad 2004 	strh.w	r2, [sp, #4]
  acc_orientation[2] = 'u';
 800226a:	f88d 3006 	strb.w	r3, [sp, #6]
  gyro_orientation[0] = 's';
 800226e:	f8ad 2008 	strh.w	r2, [sp, #8]
  gyro_orientation[2] = 'u';
 8002272:	f88d 300a 	strb.w	r3, [sp, #10]
  mag_orientation[2] = 'u';
 8002276:	f88d 300e 	strb.w	r3, [sp, #14]
  mag_orientation[0] = 'n';
 800227a:	f8ad 100c 	strh.w	r1, [sp, #12]
  MotionFX_initialize((MFXState_t *)mfxstate_pt);
 800227e:	f019 fe77 	bl	801bf70 <MotionFX_initialize>
  MotionFX_getKnobs(mfxstate_pt, ipKnobs);
 8002282:	4629      	mov	r1, r5
 8002284:	4620      	mov	r0, r4
 8002286:	f019 ff57 	bl	801c138 <MotionFX_getKnobs>

  (void)strcpy(ipKnobs->acc_orientation, acc_orientation);
 800228a:	a901      	add	r1, sp, #4
 800228c:	f604 109d 	addw	r0, r4, #2461	; 0x99d
 8002290:	f020 fe14 	bl	8022ebc <strcpy>
  (void)strcpy(ipKnobs->gyro_orientation, gyro_orientation);
 8002294:	a902      	add	r1, sp, #8
 8002296:	f604 10a1 	addw	r0, r4, #2465	; 0x9a1
 800229a:	f020 fe0f 	bl	8022ebc <strcpy>
  (void)strcpy(ipKnobs->mag_orientation, mag_orientation);
 800229e:	a903      	add	r1, sp, #12
 80022a0:	f604 10a5 	addw	r0, r4, #2469	; 0x9a5
 80022a4:	f020 fe0a 	bl	8022ebc <strcpy>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC_6X;
 80022a8:	490e      	ldr	r1, [pc, #56]	; (80022e4 <MotionFX_manager_init+0x94>)
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC_6X;
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <MotionFX_manager_init+0x98>)
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC_6X;
 80022ac:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <MotionFX_manager_init+0x9c>)
  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC_6X;
 80022ae:	6169      	str	r1, [r5, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC_6X;
 80022b0:	61ab      	str	r3, [r5, #24]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
  ipKnobs->LMode = 1;
  ipKnobs->modx = DECIMATION;

  MotionFX_setKnobs(mfxstate_pt, ipKnobs);
 80022b2:	4629      	mov	r1, r5
  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 80022b4:	2301      	movs	r3, #1
  MotionFX_setKnobs(mfxstate_pt, ipKnobs);
 80022b6:	4620      	mov	r0, r4
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC_6X;
 80022b8:	612a      	str	r2, [r5, #16]
  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 80022ba:	f884 39a9 	strb.w	r3, [r4, #2473]	; 0x9a9
  ipKnobs->LMode = 1;
 80022be:	f884 398c 	strb.w	r3, [r4, #2444]	; 0x98c
  ipKnobs->modx = DECIMATION;
 80022c2:	f884 399c 	strb.w	r3, [r4, #2460]	; 0x99c
  MotionFX_setKnobs(mfxstate_pt, ipKnobs);
 80022c6:	f019 feed 	bl	801c0a4 <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate_pt, MFX_ENGINE_DISABLE);
 80022ca:	4620      	mov	r0, r4
 80022cc:	2100      	movs	r1, #0
 80022ce:	f019 ff6f 	bl	801c1b0 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate_pt, MFX_ENGINE_DISABLE);
 80022d2:	2100      	movs	r1, #0
 80022d4:	4620      	mov	r0, r4
}
 80022d6:	b005      	add	sp, #20
 80022d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  MotionFX_enable_9X(mfxstate_pt, MFX_ENGINE_DISABLE);
 80022dc:	f019 bf88 	b.w	801c1f0 <MotionFX_enable_9X>
 80022e0:	200009d4 	.word	0x200009d4
 80022e4:	3ac88a48 	.word	0x3ac88a48
 80022e8:	3b83126f 	.word	0x3b83126f
 80022ec:	3b449ba6 	.word	0x3b449ba6

080022f0 <MotionFX_manager_run>:
 * @brief  Run sensor fusion algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 80022f0:	b570      	push	{r4, r5, r6, lr}
 80022f2:	b084      	sub	sp, #16
  if (discardedCount == sampleToDiscard)
 80022f4:	4e0e      	ldr	r6, [pc, #56]	; (8002330 <MotionFX_manager_run+0x40>)
{
 80022f6:	9203      	str	r2, [sp, #12]
  if (discardedCount == sampleToDiscard)
 80022f8:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <MotionFX_manager_run+0x44>)
 80022fa:	f8d6 39b0 	ldr.w	r3, [r6, #2480]	; 0x9b0
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	4293      	cmp	r3, r2
 8002302:	d004      	beq.n	800230e <MotionFX_manager_run+0x1e>
    MotionFX_propagate(mfxstate_pt, data_out, data_in, &delta_time);
    MotionFX_update(mfxstate_pt, data_out, data_in, &delta_time, NULL);
  }
  else
  {
    discardedCount++;
 8002304:	3301      	adds	r3, #1
 8002306:	f8c6 39b0 	str.w	r3, [r6, #2480]	; 0x9b0
  }
}
 800230a:	b004      	add	sp, #16
 800230c:	bd70      	pop	{r4, r5, r6, pc}
 800230e:	4604      	mov	r4, r0
    MotionFX_propagate(mfxstate_pt, data_out, data_in, &delta_time);
 8002310:	ab03      	add	r3, sp, #12
 8002312:	4602      	mov	r2, r0
 8002314:	4630      	mov	r0, r6
 8002316:	460d      	mov	r5, r1
 8002318:	f019 ff9a 	bl	801c250 <MotionFX_propagate>
    MotionFX_update(mfxstate_pt, data_out, data_in, &delta_time, NULL);
 800231c:	2300      	movs	r3, #0
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	4622      	mov	r2, r4
 8002322:	ab03      	add	r3, sp, #12
 8002324:	4629      	mov	r1, r5
 8002326:	4630      	mov	r0, r6
 8002328:	f019 ff82 	bl	801c230 <MotionFX_update>
}
 800232c:	b004      	add	sp, #16
 800232e:	bd70      	pop	{r4, r5, r6, pc}
 8002330:	200009d4 	.word	0x200009d4
 8002334:	20000008 	.word	0x20000008

08002338 <MotionFX_manager_start_9X>:
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
  MotionFX_enable_9X(mfxstate_pt, MFX_ENGINE_ENABLE);
 8002338:	4801      	ldr	r0, [pc, #4]	; (8002340 <MotionFX_manager_start_9X+0x8>)
 800233a:	2101      	movs	r1, #1
 800233c:	f019 bf58 	b.w	801c1f0 <MotionFX_enable_9X>
 8002340:	200009d4 	.word	0x200009d4

08002344 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 8002344:	b510      	push	{r4, lr}
 8002346:	460c      	mov	r4, r1
  MotionFX_MagCal_run(data_in);
 8002348:	f01a f968 	bl	801c61c <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 800234c:	4620      	mov	r0, r4
}
 800234e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MotionFX_MagCal_getParams(data_out);
 8002352:	f01a bb85 	b.w	801ca60 <MotionFX_MagCal_getParams>
 8002356:	bf00      	nop

08002358 <MotionFX_manager_MagCal_start>:
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
  MotionFX_MagCal_init(sampletime, 1);
 8002358:	2101      	movs	r1, #1
 800235a:	f01a b8c9 	b.w	801c4f0 <MotionFX_MagCal_init>
 800235e:	bf00      	nop

08002360 <MotionFX_manager_MagCal_stop>:
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
  MotionFX_MagCal_init(sampletime, 0);
 8002360:	2100      	movs	r1, #0
 8002362:	f01a b8c5 	b.w	801c4f0 <MotionFX_MagCal_init>
 8002366:	bf00      	nop

08002368 <MotionGR_manager_run>:
 * @param  data_out Structure containing output data
 * @retval None
 */
void MotionGR_manager_run(MGR_input_t *data_in, MGR_output_t *data_out)
{
  MotionGR_Update(data_in, data_out);
 8002368:	f01a bbb6 	b.w	801cad8 <MotionGR_Update>

0800236c <MotionID_manager_run>:
 * @param  data_out Structure containing output data
 * @retval None
 */
void MotionID_manager_run(MID_input_t *data_in, MID_output_t *data_out)
{
  MotionID_Update(data_in, data_out);
 800236c:	f01c bed0 	b.w	801f110 <MotionID_Update>

08002370 <MotionPM_manager_run>:
 * @param  data_out Structure containing output data
 * @retval None
 */
void MotionPM_manager_run(MPM_input_t *data_in, MPM_output_t *data_out)
{
  MotionPM_Update(data_in, data_out);
 8002370:	f01d b85a 	b.w	801f428 <MotionPM_Update>

08002374 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop

08002378 <Adv_Cancel_Req>:
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8002378:	2100      	movs	r1, #0
 800237a:	2001      	movs	r0, #1
 800237c:	f00d b834 	b.w	800f3e8 <UTIL_SEQ_SetTask>

08002380 <BLE_UserEvtRx>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
  return;
}

static void BLE_UserEvtRx( void * pPayload )
{
 8002380:	b510      	push	{r4, lr}
 8002382:	4604      	mov	r4, r0
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8002384:	6840      	ldr	r0, [r0, #4]
 8002386:	3008      	adds	r0, #8
 8002388:	f00c fea2 	bl	800f0d0 <SVCCTL_UserEvtRx>
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800238c:	3800      	subs	r0, #0
 800238e:	bf18      	it	ne
 8002390:	2001      	movne	r0, #1
 8002392:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8002394:	bd10      	pop	{r4, pc}
 8002396:	bf00      	nop

08002398 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
  uint32_t task_id_list;
  switch (status)
 8002398:	b130      	cbz	r0, 80023a8 <BLE_StatusNot+0x10>
 800239a:	2801      	cmp	r0, #1
 800239c:	d103      	bne.n	80023a6 <BLE_StatusNot+0xe>
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
 800239e:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80023a2:	f00d b841 	b.w	800f428 <UTIL_SEQ_ResumeTask>
 80023a6:	4770      	bx	lr
      UTIL_SEQ_PauseTask(task_id_list);
 80023a8:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80023ac:	f00d b82e 	b.w	800f40c <UTIL_SEQ_PauseTask>

080023b0 <Adv_Cancel>:
{
 80023b0:	b510      	push	{r4, lr}
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80023b2:	4c0c      	ldr	r4, [pc, #48]	; (80023e4 <Adv_Cancel+0x34>)
 80023b4:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d100      	bne.n	80023be <Adv_Cancel+0xe>
}
 80023bc:	bd10      	pop	{r4, pc}
    result = aci_gap_set_non_discoverable();
 80023be:	f00b fba9 	bl	800db14 <aci_gap_set_non_discoverable>
    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    if (result == BLE_STATUS_SUCCESS)
 80023c8:	b938      	cbnz	r0, 80023da <Adv_Cancel+0x2a>
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 80023ca:	4807      	ldr	r0, [pc, #28]	; (80023e8 <Adv_Cancel+0x38>)
 80023cc:	f020 fce8 	bl	8022da0 <iprintf>
}
 80023d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 80023d4:	4805      	ldr	r0, [pc, #20]	; (80023ec <Adv_Cancel+0x3c>)
 80023d6:	f020 bce3 	b.w	8022da0 <iprintf>
}
 80023da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 80023de:	4804      	ldr	r0, [pc, #16]	; (80023f0 <Adv_Cancel+0x40>)
 80023e0:	f020 bcde 	b.w	8022da0 <iprintf>
 80023e4:	20000454 	.word	0x20000454
 80023e8:	08024318 	.word	0x08024318
 80023ec:	08024320 	.word	0x08024320
 80023f0:	0802433c 	.word	0x0802433c

080023f4 <Adv_Request.constprop.0>:
static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
 80023f4:	b570      	push	{r4, r5, r6, lr}
    Min_Inter = AdvIntervalMin;
 80023f6:	4c1e      	ldr	r4, [pc, #120]	; (8002470 <Adv_Request.constprop.0+0x7c>)
static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
 80023f8:	b08a      	sub	sp, #40	; 0x28
    Max_Inter = AdvIntervalMax;
 80023fa:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80023fe:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
    Max_Inter = AdvIntervalMax;
 8002402:	9209      	str	r2, [sp, #36]	; 0x24
    Min_Inter = AdvIntervalMin;
 8002404:	f8b4 6094 	ldrh.w	r6, [r4, #148]	; 0x94
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002408:	f7ff f954 	bl	80016b4 <HW_TS_Stop>
    APP_DBG_MSG("First index in %d state \n",
 800240c:	f894 1090 	ldrb.w	r1, [r4, #144]	; 0x90
 8002410:	4818      	ldr	r0, [pc, #96]	; (8002474 <Adv_Request.constprop.0+0x80>)
 8002412:	f020 fcc5 	bl	8022da0 <iprintf>
    BleApplicationContext.Device_Connection_Status = New_Status;
 8002416:	2001      	movs	r0, #1
 8002418:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
    ret = aci_gap_set_discoverable(
 800241c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8002420:	9003      	str	r0, [sp, #12]
 8002422:	4815      	ldr	r0, [pc, #84]	; (8002478 <Adv_Request.constprop.0+0x84>)
 8002424:	9002      	str	r0, [sp, #8]
 8002426:	2300      	movs	r3, #0
 8002428:	2008      	movs	r0, #8
 800242a:	f104 0529 	add.w	r5, r4, #41	; 0x29
 800242e:	4631      	mov	r1, r6
 8002430:	9001      	str	r0, [sp, #4]
 8002432:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002438:	9504      	str	r5, [sp, #16]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f00b fb87 	bl	800db50 <aci_gap_set_discoverable>
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8002442:	490e      	ldr	r1, [pc, #56]	; (800247c <Adv_Request.constprop.0+0x88>)
 8002444:	200e      	movs	r0, #14
 8002446:	f00b fc87 	bl	800dd58 <aci_gap_update_adv_data>
     if (ret == BLE_STATUS_SUCCESS)
 800244a:	b950      	cbnz	r0, 8002462 <Adv_Request.constprop.0+0x6e>
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 800244c:	480c      	ldr	r0, [pc, #48]	; (8002480 <Adv_Request.constprop.0+0x8c>)
 800244e:	f020 fd2d 	bl	8022eac <puts>
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8002452:	490c      	ldr	r1, [pc, #48]	; (8002484 <Adv_Request.constprop.0+0x90>)
 8002454:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
}
 8002458:	b00a      	add	sp, #40	; 0x28
 800245a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800245e:	f7ff b9ad 	b.w	80017bc <HW_TS_Start>
 8002462:	4601      	mov	r1, r0
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 8002464:	4808      	ldr	r0, [pc, #32]	; (8002488 <Adv_Request.constprop.0+0x94>)
}
 8002466:	b00a      	add	sp, #40	; 0x28
 8002468:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800246c:	f020 bc98 	b.w	8022da0 <iprintf>
 8002470:	20000454 	.word	0x20000454
 8002474:	08024360 	.word	0x08024360
 8002478:	08023e40 	.word	0x08023e40
 800247c:	2000000c 	.word	0x2000000c
 8002480:	0802437c 	.word	0x0802437c
 8002484:	0001e046 	.word	0x0001e046
 8002488:	080243a4 	.word	0x080243a4

0800248c <APP_BLE_Init>:
{
 800248c:	b530      	push	{r4, r5, lr}
 800248e:	b097      	sub	sp, #92	; 0x5c
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002490:	2230      	movs	r2, #48	; 0x30
 8002492:	2100      	movs	r1, #0
 8002494:	a80a      	add	r0, sp, #40	; 0x28
 8002496:	f020 fc7b 	bl	8022d90 <memset>
 800249a:	4a78      	ldr	r2, [pc, #480]	; (800267c <APP_BLE_Init+0x1f0>)
 800249c:	4b78      	ldr	r3, [pc, #480]	; (8002680 <APP_BLE_Init+0x1f4>)
 800249e:	4c79      	ldr	r4, [pc, #484]	; (8002684 <APP_BLE_Init+0x1f8>)
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80024a0:	4879      	ldr	r0, [pc, #484]	; (8002688 <APP_BLE_Init+0x1fc>)
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80024a2:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
 80024a6:	f5a3 03d7 	sub.w	r3, r3, #7045120	; 0x6b8000
 80024aa:	f6a3 4306 	subw	r3, r3, #3078	; 0xc06
 80024ae:	9311      	str	r3, [sp, #68]	; 0x44
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
 80024b4:	e9cd 4312 	strd	r4, r3, [sp, #72]	; 0x48
 80024b8:	4b74      	ldr	r3, [pc, #464]	; (800268c <APP_BLE_Init+0x200>)
 80024ba:	9314      	str	r3, [sp, #80]	; 0x50
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80024bc:	4b74      	ldr	r3, [pc, #464]	; (8002690 <APP_BLE_Init+0x204>)
 80024be:	9308      	str	r3, [sp, #32]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80024c0:	a908      	add	r1, sp, #32
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80024c2:	4b74      	ldr	r3, [pc, #464]	; (8002694 <APP_BLE_Init+0x208>)
 80024c4:	9309      	str	r3, [sp, #36]	; 0x24
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80024c6:	f00b fecb 	bl	800e260 <hci_init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80024ca:	2101      	movs	r1, #1
 80024cc:	2002      	movs	r0, #2
 80024ce:	f00c ff61 	bl	800f394 <UTIL_LPM_SetOffMode>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80024d2:	4a71      	ldr	r2, [pc, #452]	; (8002698 <APP_BLE_Init+0x20c>)
 80024d4:	2100      	movs	r1, #0
 80024d6:	2004      	movs	r0, #4
 80024d8:	f00c ff74 	bl	800f3c4 <UTIL_SEQ_RegTask>
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 80024dc:	2400      	movs	r4, #0
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 80024de:	a80a      	add	r0, sp, #40	; 0x28
 80024e0:	f00c fc94 	bl	800ee0c <SHCI_C2_BLE_Init>
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 80024e4:	f8ad 4018 	strh.w	r4, [sp, #24]
  hci_reset();
 80024e8:	f00b fe40 	bl	800e16c <hci_reset>
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80024ec:	4b6b      	ldr	r3, [pc, #428]	; (800269c <APP_BLE_Init+0x210>)
 80024ee:	496c      	ldr	r1, [pc, #432]	; (80026a0 <APP_BLE_Init+0x214>)
 80024f0:	f8d3 2580 	ldr.w	r2, [r3, #1408]	; 0x580
  if(udn != 0xFFFFFFFF)
 80024f4:	f8b1 1080 	ldrh.w	r1, [r1, #128]	; 0x80
 80024f8:	1c55      	adds	r5, r2, #1
 80024fa:	f000 80b6 	beq.w	800266a <APP_BLE_Init+0x1de>
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80024fe:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8002502:	4c68      	ldr	r4, [pc, #416]	; (80026a4 <APP_BLE_Init+0x218>)
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8002504:	0c12      	lsrs	r2, r2, #16
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8002506:	8021      	strh	r1, [r4, #0]
    bd_addr_udn[3] = (uint8_t)device_id;
 8002508:	70e3      	strb	r3, [r4, #3]
 800250a:	0a19      	lsrs	r1, r3, #8
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800250c:	0c1b      	lsrs	r3, r3, #16
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800250e:	70a2      	strb	r2, [r4, #2]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8002510:	7121      	strb	r1, [r4, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8002512:	7163      	strb	r3, [r4, #5]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8002514:	4622      	mov	r2, r4
 8002516:	2106      	movs	r1, #6
 8002518:	2000      	movs	r0, #0
 800251a:	f00b fdaf 	bl	800e07c <aci_hal_write_config_data>
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800251e:	4b62      	ldr	r3, [pc, #392]	; (80026a8 <APP_BLE_Init+0x21c>)
 8002520:	7962      	ldrb	r2, [r4, #5]
 8002522:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8002524:	7922      	ldrb	r2, [r4, #4]
 8002526:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8002528:	78e2      	ldrb	r2, [r4, #3]
 800252a:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800252c:	78a2      	ldrb	r2, [r4, #2]
 800252e:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8002530:	7862      	ldrb	r2, [r4, #1]
 8002532:	731a      	strb	r2, [r3, #12]
  srd_bd_addr[1] =  0x0000ED6E;
 8002534:	f64e 516e 	movw	r1, #60782	; 0xed6e
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002538:	4a58      	ldr	r2, [pc, #352]	; (800269c <APP_BLE_Init+0x210>)
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800253a:	7824      	ldrb	r4, [r4, #0]
  srd_bd_addr[1] =  0x0000ED6E;
 800253c:	9109      	str	r1, [sp, #36]	; 0x24
 800253e:	f8d2 0580 	ldr.w	r0, [r2, #1408]	; 0x580
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8002542:	9008      	str	r0, [sp, #32]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8002544:	735c      	strb	r4, [r3, #13]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8002546:	aa08      	add	r2, sp, #32
 8002548:	2106      	movs	r1, #6
 800254a:	202e      	movs	r0, #46	; 0x2e
 800254c:	f00b fd96 	bl	800e07c <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8002550:	4a56      	ldr	r2, [pc, #344]	; (80026ac <APP_BLE_Init+0x220>)
 8002552:	2110      	movs	r1, #16
 8002554:	2018      	movs	r0, #24
 8002556:	f00b fd91 	bl	800e07c <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800255a:	4a55      	ldr	r2, [pc, #340]	; (80026b0 <APP_BLE_Init+0x224>)
 800255c:	2110      	movs	r1, #16
 800255e:	2008      	movs	r0, #8
 8002560:	f00b fd8c 	bl	800e07c <aci_hal_write_config_data>
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002564:	2118      	movs	r1, #24
 8002566:	2001      	movs	r0, #1
 8002568:	f00b fdb6 	bl	800e0d8 <aci_hal_set_tx_power_level>
    aci_gap_init(role, 0,
 800256c:	f10d 041e 	add.w	r4, sp, #30
  aci_gatt_init();
 8002570:	f00b fc3a 	bl	800dde8 <aci_gatt_init>
    aci_gap_init(role, 0,
 8002574:	a807      	add	r0, sp, #28
 8002576:	e9cd 0400 	strd	r0, r4, [sp]
 800257a:	f10d 031a 	add.w	r3, sp, #26
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800257e:	4c4d      	ldr	r4, [pc, #308]	; (80026b4 <APP_BLE_Init+0x228>)
    aci_gap_init(role, 0,
 8002580:	2207      	movs	r2, #7
 8002582:	2100      	movs	r1, #0
 8002584:	2001      	movs	r0, #1
 8002586:	f00b fba1 	bl	800dccc <aci_gap_init>
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800258a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800258e:	9400      	str	r4, [sp, #0]
 8002590:	2307      	movs	r3, #7
 8002592:	2200      	movs	r2, #0
  if(aci_gatt_update_char_value(gap_service_handle,
 8002594:	ac06      	add	r4, sp, #24
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8002596:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800259a:	f00b fd19 	bl	800dfd0 <aci_gatt_update_char_value>
  if(aci_gatt_update_char_value(gap_service_handle,
 800259e:	2302      	movs	r3, #2
 80025a0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80025a4:	9400      	str	r4, [sp, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80025ac:	4c42      	ldr	r4, [pc, #264]	; (80026b8 <APP_BLE_Init+0x22c>)
 80025ae:	2500      	movs	r5, #0
  if(aci_gatt_update_char_value(gap_service_handle,
 80025b0:	f00b fd0e 	bl	800dfd0 <aci_gatt_update_char_value>
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 80025b4:	2202      	movs	r2, #2
 80025b6:	4611      	mov	r1, r2
 80025b8:	4628      	mov	r0, r5
 80025ba:	f00b fdf5 	bl	800e1a8 <hci_le_set_default_phy>
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80025be:	4628      	mov	r0, r5
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80025c0:	7025      	strb	r5, [r4, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80025c2:	f00b fb1f 	bl	800dc04 <aci_gap_set_io_capability>
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 80025c6:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <APP_BLE_Init+0x230>)
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 80025c8:	2210      	movs	r2, #16
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80025ca:	e9cd 3503 	strd	r3, r5, [sp, #12]
 80025ce:	e9cd 2501 	strd	r2, r5, [sp, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 80025d2:	75a2      	strb	r2, [r4, #22]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 80025d4:	4a3a      	ldr	r2, [pc, #232]	; (80026c0 <APP_BLE_Init+0x234>)
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 80025d6:	70e5      	strb	r5, [r4, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 0;
 80025d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80025dc:	2008      	movs	r0, #8
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 0;
 80025de:	82a1      	strh	r1, [r4, #20]
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80025e0:	9000      	str	r0, [sp, #0]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 80025e2:	6062      	str	r2, [r4, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 80025e4:	61a3      	str	r3, [r4, #24]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 80025e6:	f102 3204 	add.w	r2, r2, #67372036	; 0x4040404
 80025ea:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <APP_BLE_Init+0x238>)
 80025ec:	60a2      	str	r2, [r4, #8]
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80025ee:	2101      	movs	r1, #1
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80025f0:	f240 1001 	movw	r0, #257	; 0x101
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 80025f4:	f102 3204 	add.w	r2, r2, #67372036	; 0x4040404
 80025f8:	e9c4 2303 	strd	r2, r3, [r4, #12]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80025fc:	f8a4 0001 	strh.w	r0, [r4, #1]
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002600:	462b      	mov	r3, r5
 8002602:	462a      	mov	r2, r5
 8002604:	4608      	mov	r0, r1
 8002606:	f00b fb21 	bl	800dc4c <aci_gap_set_authentication_requirement>
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800260a:	78a3      	ldrb	r3, [r4, #2]
 800260c:	bb53      	cbnz	r3, 8002664 <APP_BLE_Init+0x1d8>
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800260e:	2500      	movs	r5, #0
  SVCCTL_Init();
 8002610:	f00c fd48 	bl	800f0a4 <SVCCTL_Init>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8002614:	4629      	mov	r1, r5
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 8002616:	f64f 73ff 	movw	r3, #65535	; 0xffff
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800261a:	4a2b      	ldr	r2, [pc, #172]	; (80026c8 <APP_BLE_Init+0x23c>)
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800261c:	84e3      	strh	r3, [r4, #38]	; 0x26
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800261e:	2001      	movs	r0, #1
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002620:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8002624:	f00c fece 	bl	800f3c4 <UTIL_SEQ_RegTask>
  aci_hal_set_radio_activity_mask(0x0006);
 8002628:	2006      	movs	r0, #6
 800262a:	f00b fd7b 	bl	800e124 <aci_hal_set_radio_activity_mask>
  P2PS_APP_Init();
 800262e:	f002 fd6f 	bl	8005110 <P2PS_APP_Init>
  MOTENV_APP_Init();
 8002632:	f000 ff87 	bl	8003544 <MOTENV_APP_Init>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8002636:	462a      	mov	r2, r5
 8002638:	4b24      	ldr	r3, [pc, #144]	; (80026cc <APP_BLE_Init+0x240>)
 800263a:	4925      	ldr	r1, [pc, #148]	; (80026d0 <APP_BLE_Init+0x244>)
 800263c:	4628      	mov	r0, r5
 800263e:	f7fe ffdb 	bl	80015f8 <HW_TS_Create>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8002642:	4924      	ldr	r1, [pc, #144]	; (80026d4 <APP_BLE_Init+0x248>)
 8002644:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <APP_BLE_Init+0x24c>)
 8002646:	462a      	mov	r2, r5
 8002648:	4628      	mov	r0, r5
 800264a:	f7fe ffd5 	bl	80015f8 <HW_TS_Create>
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800264e:	2280      	movs	r2, #128	; 0x80
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8002650:	23a0      	movs	r3, #160	; 0xa0
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8002652:	8525      	strh	r5, [r4, #40]	; 0x28
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8002654:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8002658:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
   Adv_Request(APP_BLE_FAST_ADV);
 800265c:	f7ff feca 	bl	80023f4 <Adv_Request.constprop.0>
}
 8002660:	b017      	add	sp, #92	; 0x5c
 8002662:	bd30      	pop	{r4, r5, pc}
     aci_gap_configure_whitelist();
 8002664:	f00b fba2 	bl	800ddac <aci_gap_configure_whitelist>
 8002668:	e7d1      	b.n	800260e <APP_BLE_Init+0x182>
    otp_addr = OTP_Read(0);
 800266a:	4620      	mov	r0, r4
 800266c:	f00c fafa 	bl	800ec64 <OTP_Read>
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8002670:	4c1a      	ldr	r4, [pc, #104]	; (80026dc <APP_BLE_Init+0x250>)
 8002672:	2800      	cmp	r0, #0
 8002674:	bf18      	it	ne
 8002676:	4604      	movne	r4, r0
 8002678:	e74c      	b.n	8002514 <APP_BLE_Init+0x88>
 800267a:	bf00      	nop
 800267c:	00080044 	.word	0x00080044
 8002680:	01080540 	.word	0x01080540
 8002684:	010001f4 	.word	0x010001f4
 8002688:	08002381 	.word	0x08002381
 800268c:	00010148 	.word	0x00010148
 8002690:	20030028 	.word	0x20030028
 8002694:	08002399 	.word	0x08002399
 8002698:	0800e2b1 	.word	0x0800e2b1
 800269c:	1fff7000 	.word	0x1fff7000
 80026a0:	1fff7500 	.word	0x1fff7500
 80026a4:	20001388 	.word	0x20001388
 80026a8:	2000000c 	.word	0x2000000c
 80026ac:	08023e50 	.word	0x08023e50
 80026b0:	08023e60 	.word	0x08023e60
 80026b4:	080243d4 	.word	0x080243d4
 80026b8:	20000454 	.word	0x20000454
 80026bc:	0001b207 	.word	0x0001b207
 80026c0:	03020100 	.word	0x03020100
 80026c4:	0f0e0d0c 	.word	0x0f0e0d0c
 80026c8:	080023b1 	.word	0x080023b1
 80026cc:	08002379 	.word	0x08002379
 80026d0:	200004e5 	.word	0x200004e5
 80026d4:	200004e6 	.word	0x200004e6
 80026d8:	08002375 	.word	0x08002375
 80026dc:	08023e48 	.word	0x08023e48

080026e0 <SVCCTL_App_Notification>:
{
 80026e0:	b538      	push	{r3, r4, r5, lr}
  switch (event_pckt->evt)
 80026e2:	7843      	ldrb	r3, [r0, #1]
 80026e4:	2b3e      	cmp	r3, #62	; 0x3e
{
 80026e6:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 80026e8:	d005      	beq.n	80026f6 <SVCCTL_App_Notification+0x16>
 80026ea:	2bff      	cmp	r3, #255	; 0xff
 80026ec:	d01e      	beq.n	800272c <SVCCTL_App_Notification+0x4c>
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d00a      	beq.n	8002708 <SVCCTL_App_Notification+0x28>
}
 80026f2:	2001      	movs	r0, #1
 80026f4:	bd38      	pop	{r3, r4, r5, pc}
      switch (meta_evt->subevent)
 80026f6:	78c3      	ldrb	r3, [r0, #3]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d023      	beq.n	8002744 <SVCCTL_App_Notification+0x64>
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d1f8      	bne.n	80026f2 <SVCCTL_App_Notification+0x12>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8002700:	482a      	ldr	r0, [pc, #168]	; (80027ac <SVCCTL_App_Notification+0xcc>)
 8002702:	f020 fbd3 	bl	8022eac <puts>
          break;
 8002706:	e7f4      	b.n	80026f2 <SVCCTL_App_Notification+0x12>
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8002708:	4d29      	ldr	r5, [pc, #164]	; (80027b0 <SVCCTL_App_Notification+0xd0>)
 800270a:	8882      	ldrh	r2, [r0, #4]
 800270c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800270e:	429a      	cmp	r2, r3
 8002710:	d044      	beq.n	800279c <SVCCTL_App_Notification+0xbc>
      Adv_Request(APP_BLE_FAST_ADV);
 8002712:	f7ff fe6f 	bl	80023f4 <Adv_Request.constprop.0>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8002716:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <SVCCTL_App_Notification+0xd4>)
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002718:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 800271a:	815a      	strh	r2, [r3, #10]
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800271c:	2101      	movs	r1, #1
        P2PS_APP_Notification(&handleNotification);
 800271e:	f103 0008 	add.w	r0, r3, #8
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8002722:	7219      	strb	r1, [r3, #8]
        P2PS_APP_Notification(&handleNotification);
 8002724:	f002 fcee 	bl	8005104 <P2PS_APP_Notification>
}
 8002728:	2001      	movs	r0, #1
 800272a:	bd38      	pop	{r3, r4, r5, pc}
      switch (blue_evt->ecode)
 800272c:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d025      	beq.n	8002780 <SVCCTL_App_Notification+0xa0>
 8002734:	f240 4207 	movw	r2, #1031	; 0x407
 8002738:	4293      	cmp	r3, r2
 800273a:	d1da      	bne.n	80026f2 <SVCCTL_App_Notification+0x12>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 800273c:	481e      	ldr	r0, [pc, #120]	; (80027b8 <SVCCTL_App_Notification+0xd8>)
 800273e:	f020 fbb5 	bl	8022eac <puts>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8002742:	e7d6      	b.n	80026f2 <SVCCTL_App_Notification+0x12>
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002744:	4d1a      	ldr	r5, [pc, #104]	; (80027b0 <SVCCTL_App_Notification+0xd0>)
 8002746:	f895 0091 	ldrb.w	r0, [r5, #145]	; 0x91
 800274a:	f7fe ffb3 	bl	80016b4 <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n",
 800274e:	f8b4 1005 	ldrh.w	r1, [r4, #5]
 8002752:	481a      	ldr	r0, [pc, #104]	; (80027bc <SVCCTL_App_Notification+0xdc>)
 8002754:	f020 fb24 	bl	8022da0 <iprintf>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8002758:	f895 2090 	ldrb.w	r2, [r5, #144]	; 0x90
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800275c:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <SVCCTL_App_Notification+0xd4>)
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800275e:	2a04      	cmp	r2, #4
 8002760:	bf0c      	ite	eq
 8002762:	2206      	moveq	r2, #6
 8002764:	2205      	movne	r2, #5
 8002766:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800276a:	f8b4 2005 	ldrh.w	r2, [r4, #5]
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800276e:	84ea      	strh	r2, [r5, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002770:	2100      	movs	r1, #0
          P2PS_APP_Notification(&handleNotification);
 8002772:	f103 0008 	add.w	r0, r3, #8
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002776:	7219      	strb	r1, [r3, #8]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002778:	815a      	strh	r2, [r3, #10]
          P2PS_APP_Notification(&handleNotification);
 800277a:	f002 fcc3 	bl	8005104 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800277e:	e7b8      	b.n	80026f2 <SVCCTL_App_Notification+0x12>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	4611      	mov	r1, r2
 8002784:	480e      	ldr	r0, [pc, #56]	; (80027c0 <SVCCTL_App_Notification+0xe0>)
 8002786:	f008 fea7 	bl	800b4d8 <HAL_GPIO_WritePin>
          HAL_Delay(5);
 800278a:	2005      	movs	r0, #5
 800278c:	f008 fa52 	bl	800ac34 <HAL_Delay>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002790:	480b      	ldr	r0, [pc, #44]	; (80027c0 <SVCCTL_App_Notification+0xe0>)
 8002792:	2200      	movs	r2, #0
 8002794:	2101      	movs	r1, #1
 8002796:	f008 fe9f 	bl	800b4d8 <HAL_GPIO_WritePin>
        break; /* RADIO_ACTIVITY_EVENT */
 800279a:	e7aa      	b.n	80026f2 <SVCCTL_App_Notification+0x12>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800279c:	2300      	movs	r3, #0
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 800279e:	4809      	ldr	r0, [pc, #36]	; (80027c4 <SVCCTL_App_Notification+0xe4>)
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80027a0:	84eb      	strh	r3, [r5, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80027a2:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 80027a6:	f020 fb81 	bl	8022eac <puts>
 80027aa:	e7b2      	b.n	8002712 <SVCCTL_App_Notification+0x32>
 80027ac:	08024404 	.word	0x08024404
 80027b0:	20000454 	.word	0x20000454
 80027b4:	20001388 	.word	0x20001388
 80027b8:	08024464 	.word	0x08024464
 80027bc:	08024430 	.word	0x08024430
 80027c0:	48000400 	.word	0x48000400
 80027c4:	080243dc 	.word	0x080243dc

080027c8 <hci_notify_asynch_evt>:
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80027c8:	2100      	movs	r1, #0
 80027ca:	2004      	movs	r0, #4
 80027cc:	f00c be0c 	b.w	800f3e8 <UTIL_SEQ_SetTask>

080027d0 <hci_cmd_resp_release>:
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80027d0:	2002      	movs	r0, #2
 80027d2:	f00c be35 	b.w	800f440 <UTIL_SEQ_SetEvt>
 80027d6:	bf00      	nop

080027d8 <hci_cmd_resp_wait>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80027d8:	2002      	movs	r0, #2
 80027da:	f00c beab 	b.w	800f534 <UTIL_SEQ_WaitEvt>
 80027de:	bf00      	nop

080027e0 <CONFIG_Context_Init>:
 * @param  status The new notification status
 * @retval None
 */
void CONFIG_Set_Notification_Status(uint8_t status)
{
  CONFIG_Server_App_Context.NotificationStatus = status;
 80027e0:	4b01      	ldr	r3, [pc, #4]	; (80027e8 <CONFIG_Context_Init+0x8>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	801a      	strh	r2, [r3, #0]
}
 80027e6:	4770      	bx	lr
 80027e8:	200004ec 	.word	0x200004ec

080027ec <CONFIG_Set_Notification_Status>:
  CONFIG_Server_App_Context.NotificationStatus = status;
 80027ec:	4b01      	ldr	r3, [pc, #4]	; (80027f4 <CONFIG_Set_Notification_Status+0x8>)
 80027ee:	7018      	strb	r0, [r3, #0]
}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	200004ec 	.word	0x200004ec

080027f8 <CONFIG_Set_FirstConnection_Config>:
 * @param  status The new flag status
 * @retval None
 */
void CONFIG_Set_FirstConnection_Config(uint8_t status)
{
  CONFIG_Server_App_Context.FirstConnectionConfig = status;
 80027f8:	4b01      	ldr	r3, [pc, #4]	; (8002800 <CONFIG_Set_FirstConnection_Config+0x8>)
 80027fa:	7058      	strb	r0, [r3, #1]
}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	200004ec 	.word	0x200004ec

08002804 <CONFIG_Get_FirstConnection_Config>:
 * @param  None
 * @retval The current flag status
 */
uint8_t CONFIG_Get_FirstConnection_Config(void)
{
  return CONFIG_Server_App_Context.FirstConnectionConfig;
 8002804:	4b01      	ldr	r3, [pc, #4]	; (800280c <CONFIG_Get_FirstConnection_Config+0x8>)
}
 8002806:	7858      	ldrb	r0, [r3, #1]
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	200004ec 	.word	0x200004ec

08002810 <CONFIG_Send_Notification>:
 * @param  Command Reply to this Command
 * @param  data Result to send back
 * @retval None
 */
void CONFIG_Send_Notification(uint32_t Feature, uint8_t Command, uint8_t data)
{
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	4604      	mov	r4, r0
 8002816:	460e      	mov	r6, r1
 8002818:	4615      	mov	r5, r2
  uint8_t value[VALUE_LEN_CONFIG];

  /* Timestamp */
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 800281a:	f008 f9ff 	bl	800ac1c <HAL_GetTick>
 800281e:	08c0      	lsrs	r0, r0, #3
 8002820:	f88d 0000 	strb.w	r0, [sp]
 8002824:	f008 f9fa 	bl	800ac1c <HAL_GetTick>
  STORE_BE_32(value+2,Feature);
  value[6] = Command;
  value[7] = data;

  if(CONFIG_Server_App_Context.NotificationStatus)
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <CONFIG_Send_Notification+0x68>)
  value[6] = Command;
 800282a:	f88d 6006 	strb.w	r6, [sp, #6]
  STORE_BE_32(value+2,Feature);
 800282e:	0a22      	lsrs	r2, r4, #8
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002830:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 8002832:	f88d 2004 	strb.w	r2, [sp, #4]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002836:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 8002838:	0c21      	lsrs	r1, r4, #16
 800283a:	0e22      	lsrs	r2, r4, #24
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 800283c:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002840:	f88d 4005 	strb.w	r4, [sp, #5]
 8002844:	f88d 1003 	strb.w	r1, [sp, #3]
 8002848:	f88d 2002 	strb.w	r2, [sp, #2]
  value[7] = data;
 800284c:	f88d 5007 	strb.w	r5, [sp, #7]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002850:	b163      	cbz	r3, 800286c <CONFIG_Send_Notification+0x5c>
  {
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- CONFIG APPLICATION SERVER : NOTIFY CLIENT WITH NEW CONFIG PARAMETER VALUE \n ");
 8002852:	480a      	ldr	r0, [pc, #40]	; (800287c <CONFIG_Send_Notification+0x6c>)
 8002854:	f020 faa4 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 8002858:	4809      	ldr	r0, [pc, #36]	; (8002880 <CONFIG_Send_Notification+0x70>)
 800285a:	f020 faa1 	bl	8022da0 <iprintf>
#endif
    MOTENV_STM_App_Update_Char(CONFIG_CHAR_UUID, VALUE_LEN_CONFIG, (uint8_t *)&value);
 800285e:	466a      	mov	r2, sp
 8002860:	2108      	movs	r1, #8
 8002862:	2002      	movs	r0, #2
 8002864:	f00c f954 	bl	800eb10 <MOTENV_STM_App_Update_Char>
    APP_DBG_MSG("-- CONFIG APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
#endif
  }

  return;
}
 8002868:	b002      	add	sp, #8
 800286a:	bd70      	pop	{r4, r5, r6, pc}
    APP_DBG_MSG("-- CONFIG APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 800286c:	4805      	ldr	r0, [pc, #20]	; (8002884 <CONFIG_Send_Notification+0x74>)
 800286e:	f020 fa97 	bl	8022da0 <iprintf>
}
 8002872:	b002      	add	sp, #8
 8002874:	bd70      	pop	{r4, r5, r6, pc}
 8002876:	bf00      	nop
 8002878:	200004ec 	.word	0x200004ec
 800287c:	0802448c 	.word	0x0802448c
 8002880:	080244dc 	.word	0x080244dc
 8002884:	080244e0 	.word	0x080244e0

08002888 <CONFIG_Parse_Command>:
 * @param att_data Attribute data
 * @param data_length Length of the data
 * @retval SendItBack true/false
 */
uint8_t CONFIG_Parse_Command(uint8_t *att_data, uint8_t data_length)
{
 8002888:	b570      	push	{r4, r5, r6, lr}
 800288a:	6803      	ldr	r3, [r0, #0]
  uint32_t FeatureMask = (att_data[3]) | (att_data[2]<<8) | (att_data[1]<<16) | (att_data[0]<<24);
  uint8_t Command = att_data[4];
 800288c:	7905      	ldrb	r5, [r0, #4]
  uint8_t Data    = att_data[5];
  uint8_t SendItBack = 1;

  switch (FeatureMask)
 800288e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
{
 8002892:	b082      	sub	sp, #8
 8002894:	ba1c      	rev	r4, r3
  switch (FeatureMask)
 8002896:	d007      	beq.n	80028a8 <CONFIG_Parse_Command+0x20>
 8002898:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800289c:	d039      	beq.n	8002912 <CONFIG_Parse_Command+0x8a>
 800289e:	2c40      	cmp	r4, #64	; 0x40
 80028a0:	d002      	beq.n	80028a8 <CONFIG_Parse_Command+0x20>
    }
    break;
  }

  return SendItBack;
}
 80028a2:	2001      	movs	r0, #1
 80028a4:	b002      	add	sp, #8
 80028a6:	bd70      	pop	{r4, r5, r6, pc}
    switch (Command)
 80028a8:	2d00      	cmp	r5, #0
 80028aa:	f000 808c 	beq.w	80029c6 <CONFIG_Parse_Command+0x13e>
 80028ae:	2dff      	cmp	r5, #255	; 0xff
 80028b0:	d1f7      	bne.n	80028a2 <CONFIG_Parse_Command+0x1a>
        CONFIG_Send_Notification(FeatureMask, Command, MOTIONFX_Get_MagCalStatus() ? 100: 0);
 80028b2:	f002 fa39 	bl	8004d28 <MOTIONFX_Get_MagCalStatus>
 80028b6:	1e06      	subs	r6, r0, #0
 80028b8:	bf18      	it	ne
 80028ba:	2664      	movne	r6, #100	; 0x64
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80028bc:	f008 f9ae 	bl	800ac1c <HAL_GetTick>
 80028c0:	08c0      	lsrs	r0, r0, #3
 80028c2:	f88d 0000 	strb.w	r0, [sp]
 80028c6:	f008 f9a9 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 80028ca:	4bd6      	ldr	r3, [pc, #856]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
  value[6] = Command;
 80028cc:	f88d 5006 	strb.w	r5, [sp, #6]
  STORE_BE_32(value+2,Feature);
 80028d0:	0a22      	lsrs	r2, r4, #8
  if(CONFIG_Server_App_Context.NotificationStatus)
 80028d2:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 80028d4:	f88d 2004 	strb.w	r2, [sp, #4]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80028d8:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 80028da:	0c21      	lsrs	r1, r4, #16
 80028dc:	0e22      	lsrs	r2, r4, #24
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80028de:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 80028e2:	f88d 4005 	strb.w	r4, [sp, #5]
 80028e6:	f88d 1003 	strb.w	r1, [sp, #3]
 80028ea:	f88d 2002 	strb.w	r2, [sp, #2]
  value[7] = data;
 80028ee:	f88d 6007 	strb.w	r6, [sp, #7]
  if(CONFIG_Server_App_Context.NotificationStatus)
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d061      	beq.n	80029ba <CONFIG_Parse_Command+0x132>
    APP_DBG_MSG("-- CONFIG APPLICATION SERVER : NOTIFY CLIENT WITH NEW CONFIG PARAMETER VALUE \n ");
 80028f6:	48cc      	ldr	r0, [pc, #816]	; (8002c28 <CONFIG_Parse_Command+0x3a0>)
 80028f8:	f020 fa52 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 80028fc:	48cb      	ldr	r0, [pc, #812]	; (8002c2c <CONFIG_Parse_Command+0x3a4>)
 80028fe:	f020 fa4f 	bl	8022da0 <iprintf>
    MOTENV_STM_App_Update_Char(CONFIG_CHAR_UUID, VALUE_LEN_CONFIG, (uint8_t *)&value);
 8002902:	466a      	mov	r2, sp
 8002904:	2108      	movs	r1, #8
 8002906:	2002      	movs	r0, #2
 8002908:	f00c f902 	bl	800eb10 <MOTENV_STM_App_Update_Char>
}
 800290c:	2001      	movs	r0, #1
 800290e:	b002      	add	sp, #8
 8002910:	bd70      	pop	{r4, r5, r6, pc}
 8002912:	3d64      	subs	r5, #100	; 0x64
  uint8_t Data    = att_data[5];
 8002914:	7944      	ldrb	r4, [r0, #5]
    switch (Command)
 8002916:	2d13      	cmp	r5, #19
 8002918:	d8c3      	bhi.n	80028a2 <CONFIG_Parse_Command+0x1a>
 800291a:	a301      	add	r3, pc, #4	; (adr r3, 8002920 <CONFIG_Parse_Command+0x98>)
 800291c:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8002920:	08002a7f 	.word	0x08002a7f
 8002924:	080028a3 	.word	0x080028a3
 8002928:	08002af3 	.word	0x08002af3
 800292c:	080028a3 	.word	0x080028a3
 8002930:	080028a3 	.word	0x080028a3
 8002934:	080028a3 	.word	0x080028a3
 8002938:	080028a3 	.word	0x080028a3
 800293c:	080028a3 	.word	0x080028a3
 8002940:	080028a3 	.word	0x080028a3
 8002944:	08002ab9 	.word	0x08002ab9
 8002948:	080028a3 	.word	0x080028a3
 800294c:	08002b2d 	.word	0x08002b2d
 8002950:	08002a0b 	.word	0x08002a0b
 8002954:	080028a3 	.word	0x080028a3
 8002958:	080028a3 	.word	0x080028a3
 800295c:	08002a45 	.word	0x08002a45
 8002960:	080029d1 	.word	0x080029d1
 8002964:	080028a3 	.word	0x080028a3
 8002968:	080028a3 	.word	0x080028a3
 800296c:	08002971 	.word	0x08002971
      switch(Data) {
 8002970:	2c00      	cmp	r4, #0
 8002972:	f000 80f6 	beq.w	8002b62 <CONFIG_Parse_Command+0x2da>
 8002976:	2c01      	cmp	r4, #1
 8002978:	d193      	bne.n	80028a2 <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_WAKE_UP);
 800297a:	2010      	movs	r0, #16
 800297c:	f001 f886 	bl	8003a8c <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002980:	f008 f94c 	bl	800ac1c <HAL_GetTick>
 8002984:	08c0      	lsrs	r0, r0, #3
 8002986:	f88d 0000 	strb.w	r0, [sp]
 800298a:	f008 f947 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 800298e:	4aa5      	ldr	r2, [pc, #660]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
  STORE_BE_32(value+2,Feature);
 8002990:	2104      	movs	r1, #4
 8002992:	2300      	movs	r3, #0
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002994:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002996:	7812      	ldrb	r2, [r2, #0]
  STORE_BE_32(value+2,Feature);
 8002998:	f88d 1004 	strb.w	r1, [sp, #4]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 800299c:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 80029a0:	f88d 3005 	strb.w	r3, [sp, #5]
  value[6] = Command;
 80029a4:	2177      	movs	r1, #119	; 0x77
  STORE_BE_32(value+2,Feature);
 80029a6:	f88d 3003 	strb.w	r3, [sp, #3]
 80029aa:	f88d 3002 	strb.w	r3, [sp, #2]
  value[6] = Command;
 80029ae:	f88d 1006 	strb.w	r1, [sp, #6]
  value[7] = data;
 80029b2:	f88d 4007 	strb.w	r4, [sp, #7]
  if(CONFIG_Server_App_Context.NotificationStatus)
 80029b6:	2a00      	cmp	r2, #0
 80029b8:	d19d      	bne.n	80028f6 <CONFIG_Parse_Command+0x6e>
    APP_DBG_MSG("-- CONFIG APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 80029ba:	489d      	ldr	r0, [pc, #628]	; (8002c30 <CONFIG_Parse_Command+0x3a8>)
 80029bc:	f020 f9f0 	bl	8022da0 <iprintf>
}
 80029c0:	2001      	movs	r0, #1
 80029c2:	b002      	add	sp, #8
 80029c4:	bd70      	pop	{r4, r5, r6, pc}
      MOTIONFX_ReCalibration();
 80029c6:	f002 f9b9 	bl	8004d3c <MOTIONFX_ReCalibration>
}
 80029ca:	2001      	movs	r0, #1
 80029cc:	b002      	add	sp, #8
 80029ce:	bd70      	pop	{r4, r5, r6, pc}
      switch(Data) {
 80029d0:	2c00      	cmp	r4, #0
 80029d2:	f000 80f7 	beq.w	8002bc4 <CONFIG_Parse_Command+0x33c>
 80029d6:	2c01      	cmp	r4, #1
 80029d8:	f47f af63 	bne.w	80028a2 <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_TILT);
 80029dc:	2020      	movs	r0, #32
 80029de:	f001 f855 	bl	8003a8c <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80029e2:	f008 f91b 	bl	800ac1c <HAL_GetTick>
 80029e6:	08c0      	lsrs	r0, r0, #3
 80029e8:	f88d 0000 	strb.w	r0, [sp]
 80029ec:	f008 f916 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 80029f0:	4a8c      	ldr	r2, [pc, #560]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
  STORE_BE_32(value+2,Feature);
 80029f2:	2104      	movs	r1, #4
 80029f4:	2300      	movs	r3, #0
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80029f6:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 80029f8:	f88d 1004 	strb.w	r1, [sp, #4]
  if(CONFIG_Server_App_Context.NotificationStatus)
 80029fc:	7812      	ldrb	r2, [r2, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80029fe:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002a02:	f88d 3005 	strb.w	r3, [sp, #5]
  value[6] = Command;
 8002a06:	2174      	movs	r1, #116	; 0x74
 8002a08:	e7cd      	b.n	80029a6 <CONFIG_Parse_Command+0x11e>
      switch(Data) {
 8002a0a:	2c00      	cmp	r4, #0
 8002a0c:	f000 80ea 	beq.w	8002be4 <CONFIG_Parse_Command+0x35c>
 8002a10:	2c01      	cmp	r4, #1
 8002a12:	f47f af46 	bne.w	80028a2 <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_PEDOMETER);
 8002a16:	4620      	mov	r0, r4
 8002a18:	f001 f838 	bl	8003a8c <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002a1c:	f008 f8fe 	bl	800ac1c <HAL_GetTick>
 8002a20:	08c0      	lsrs	r0, r0, #3
 8002a22:	f88d 0000 	strb.w	r0, [sp]
 8002a26:	f008 f8f9 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002a2a:	4a7e      	ldr	r2, [pc, #504]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
  STORE_BE_32(value+2,Feature);
 8002a2c:	2104      	movs	r1, #4
 8002a2e:	2300      	movs	r3, #0
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002a30:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 8002a32:	f88d 1004 	strb.w	r1, [sp, #4]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002a36:	7812      	ldrb	r2, [r2, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002a38:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002a3c:	f88d 3005 	strb.w	r3, [sp, #5]
  value[6] = Command;
 8002a40:	2170      	movs	r1, #112	; 0x70
 8002a42:	e7b0      	b.n	80029a6 <CONFIG_Parse_Command+0x11e>
      switch(Data) {
 8002a44:	2c00      	cmp	r4, #0
 8002a46:	f000 80dd 	beq.w	8002c04 <CONFIG_Parse_Command+0x37c>
 8002a4a:	2c01      	cmp	r4, #1
 8002a4c:	f47f af29 	bne.w	80028a2 <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_SINGLE_TAP);
 8002a50:	2008      	movs	r0, #8
 8002a52:	f001 f81b 	bl	8003a8c <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002a56:	f008 f8e1 	bl	800ac1c <HAL_GetTick>
 8002a5a:	08c0      	lsrs	r0, r0, #3
 8002a5c:	f88d 0000 	strb.w	r0, [sp]
 8002a60:	f008 f8dc 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002a64:	4a6f      	ldr	r2, [pc, #444]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
  STORE_BE_32(value+2,Feature);
 8002a66:	2104      	movs	r1, #4
 8002a68:	2300      	movs	r3, #0
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002a6a:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 8002a6c:	f88d 1004 	strb.w	r1, [sp, #4]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002a70:	7812      	ldrb	r2, [r2, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002a72:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002a76:	f88d 3005 	strb.w	r3, [sp, #5]
  value[6] = Command;
 8002a7a:	2173      	movs	r1, #115	; 0x73
 8002a7c:	e793      	b.n	80029a6 <CONFIG_Parse_Command+0x11e>
      switch(Data) {
 8002a7e:	2c00      	cmp	r4, #0
 8002a80:	f000 80e8 	beq.w	8002c54 <CONFIG_Parse_Command+0x3cc>
 8002a84:	2c01      	cmp	r4, #1
 8002a86:	f47f af0c 	bne.w	80028a2 <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_DOUBLE_TAP);
 8002a8a:	2004      	movs	r0, #4
 8002a8c:	f000 fffe 	bl	8003a8c <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002a90:	f008 f8c4 	bl	800ac1c <HAL_GetTick>
 8002a94:	08c0      	lsrs	r0, r0, #3
 8002a96:	f88d 0000 	strb.w	r0, [sp]
 8002a9a:	f008 f8bf 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002a9e:	4a61      	ldr	r2, [pc, #388]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
  STORE_BE_32(value+2,Feature);
 8002aa0:	2104      	movs	r1, #4
 8002aa2:	2300      	movs	r3, #0
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002aa4:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 8002aa6:	f88d 1004 	strb.w	r1, [sp, #4]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002aaa:	7812      	ldrb	r2, [r2, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002aac:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002ab0:	f88d 3005 	strb.w	r3, [sp, #5]
  value[6] = Command;
 8002ab4:	2164      	movs	r1, #100	; 0x64
 8002ab6:	e776      	b.n	80029a6 <CONFIG_Parse_Command+0x11e>
      switch(Data) {
 8002ab8:	2c00      	cmp	r4, #0
 8002aba:	f000 80bb 	beq.w	8002c34 <CONFIG_Parse_Command+0x3ac>
 8002abe:	2c01      	cmp	r4, #1
 8002ac0:	f47f aeef 	bne.w	80028a2 <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_MULTIPLE_EVENTS);
 8002ac4:	2080      	movs	r0, #128	; 0x80
 8002ac6:	f000 ffe1 	bl	8003a8c <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002aca:	f008 f8a7 	bl	800ac1c <HAL_GetTick>
 8002ace:	08c0      	lsrs	r0, r0, #3
 8002ad0:	f88d 0000 	strb.w	r0, [sp]
 8002ad4:	f008 f8a2 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002ad8:	4a52      	ldr	r2, [pc, #328]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
  STORE_BE_32(value+2,Feature);
 8002ada:	2104      	movs	r1, #4
 8002adc:	2300      	movs	r3, #0
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002ade:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 8002ae0:	f88d 1004 	strb.w	r1, [sp, #4]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002ae4:	7812      	ldrb	r2, [r2, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002ae6:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002aea:	f88d 3005 	strb.w	r3, [sp, #5]
  value[6] = Command;
 8002aee:	216d      	movs	r1, #109	; 0x6d
 8002af0:	e759      	b.n	80029a6 <CONFIG_Parse_Command+0x11e>
      switch(Data) {
 8002af2:	2c00      	cmp	r4, #0
 8002af4:	f000 80be 	beq.w	8002c74 <CONFIG_Parse_Command+0x3ec>
 8002af8:	2c01      	cmp	r4, #1
 8002afa:	f47f aed2 	bne.w	80028a2 <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_FREE_FALL);
 8002afe:	2002      	movs	r0, #2
 8002b00:	f000 ffc4 	bl	8003a8c <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002b04:	f008 f88a 	bl	800ac1c <HAL_GetTick>
 8002b08:	08c0      	lsrs	r0, r0, #3
 8002b0a:	f88d 0000 	strb.w	r0, [sp]
 8002b0e:	f008 f885 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002b12:	4a44      	ldr	r2, [pc, #272]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
  STORE_BE_32(value+2,Feature);
 8002b14:	2104      	movs	r1, #4
 8002b16:	2300      	movs	r3, #0
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002b18:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 8002b1a:	f88d 1004 	strb.w	r1, [sp, #4]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002b1e:	7812      	ldrb	r2, [r2, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002b20:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002b24:	f88d 3005 	strb.w	r3, [sp, #5]
  value[6] = Command;
 8002b28:	2166      	movs	r1, #102	; 0x66
 8002b2a:	e73c      	b.n	80029a6 <CONFIG_Parse_Command+0x11e>
      switch(Data) {
 8002b2c:	b3d4      	cbz	r4, 8002ba4 <CONFIG_Parse_Command+0x31c>
 8002b2e:	2c01      	cmp	r4, #1
 8002b30:	f47f aeb7 	bne.w	80028a2 <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_6D_ORIENTATION);
 8002b34:	2040      	movs	r0, #64	; 0x40
 8002b36:	f000 ffa9 	bl	8003a8c <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002b3a:	f008 f86f 	bl	800ac1c <HAL_GetTick>
 8002b3e:	08c0      	lsrs	r0, r0, #3
 8002b40:	f88d 0000 	strb.w	r0, [sp]
 8002b44:	f008 f86a 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002b48:	4a36      	ldr	r2, [pc, #216]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
  STORE_BE_32(value+2,Feature);
 8002b4a:	2104      	movs	r1, #4
 8002b4c:	2300      	movs	r3, #0
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002b4e:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 8002b50:	f88d 1004 	strb.w	r1, [sp, #4]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002b54:	7812      	ldrb	r2, [r2, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002b56:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002b5a:	f88d 3005 	strb.w	r3, [sp, #5]
  value[6] = Command;
 8002b5e:	216f      	movs	r1, #111	; 0x6f
 8002b60:	e721      	b.n	80029a6 <CONFIG_Parse_Command+0x11e>
        MOTION_EXT_Disable_Feature(EXT_HWF_WAKE_UP);
 8002b62:	2010      	movs	r0, #16
 8002b64:	f001 f85a 	bl	8003c1c <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002b68:	f008 f858 	bl	800ac1c <HAL_GetTick>
 8002b6c:	08c0      	lsrs	r0, r0, #3
 8002b6e:	f88d 0000 	strb.w	r0, [sp]
 8002b72:	f008 f853 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002b76:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002b7a:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 8002b7c:	2104      	movs	r1, #4
  value[6] = Command;
 8002b7e:	2277      	movs	r2, #119	; 0x77
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002b80:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002b84:	f88d 4005 	strb.w	r4, [sp, #5]
 8002b88:	f88d 1004 	strb.w	r1, [sp, #4]
 8002b8c:	f88d 4003 	strb.w	r4, [sp, #3]
 8002b90:	f88d 4002 	strb.w	r4, [sp, #2]
  value[6] = Command;
 8002b94:	f88d 2006 	strb.w	r2, [sp, #6]
  value[7] = data;
 8002b98:	f88d 4007 	strb.w	r4, [sp, #7]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f43f af0c 	beq.w	80029ba <CONFIG_Parse_Command+0x132>
 8002ba2:	e6a8      	b.n	80028f6 <CONFIG_Parse_Command+0x6e>
        MOTION_EXT_Disable_Feature(EXT_HWF_6D_ORIENTATION);
 8002ba4:	2040      	movs	r0, #64	; 0x40
 8002ba6:	f001 f839 	bl	8003c1c <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002baa:	f008 f837 	bl	800ac1c <HAL_GetTick>
 8002bae:	08c0      	lsrs	r0, r0, #3
 8002bb0:	f88d 0000 	strb.w	r0, [sp]
 8002bb4:	f008 f832 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002bb8:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002bba:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 8002bbe:	2104      	movs	r1, #4
  value[6] = Command;
 8002bc0:	226f      	movs	r2, #111	; 0x6f
 8002bc2:	e7dd      	b.n	8002b80 <CONFIG_Parse_Command+0x2f8>
        MOTION_EXT_Disable_Feature(EXT_HWF_TILT);
 8002bc4:	2020      	movs	r0, #32
 8002bc6:	f001 f829 	bl	8003c1c <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002bca:	f008 f827 	bl	800ac1c <HAL_GetTick>
 8002bce:	08c0      	lsrs	r0, r0, #3
 8002bd0:	f88d 0000 	strb.w	r0, [sp]
 8002bd4:	f008 f822 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002bda:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 8002bde:	2104      	movs	r1, #4
  value[6] = Command;
 8002be0:	2274      	movs	r2, #116	; 0x74
 8002be2:	e7cd      	b.n	8002b80 <CONFIG_Parse_Command+0x2f8>
        MOTION_EXT_Disable_Feature(EXT_HWF_PEDOMETER);
 8002be4:	2001      	movs	r0, #1
 8002be6:	f001 f819 	bl	8003c1c <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002bea:	f008 f817 	bl	800ac1c <HAL_GetTick>
 8002bee:	08c0      	lsrs	r0, r0, #3
 8002bf0:	f88d 0000 	strb.w	r0, [sp]
 8002bf4:	f008 f812 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002bfa:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 8002bfe:	2104      	movs	r1, #4
  value[6] = Command;
 8002c00:	2270      	movs	r2, #112	; 0x70
 8002c02:	e7bd      	b.n	8002b80 <CONFIG_Parse_Command+0x2f8>
        MOTION_EXT_Disable_Feature(EXT_HWF_SINGLE_TAP);
 8002c04:	2008      	movs	r0, #8
 8002c06:	f001 f809 	bl	8003c1c <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002c0a:	f008 f807 	bl	800ac1c <HAL_GetTick>
 8002c0e:	08c0      	lsrs	r0, r0, #3
 8002c10:	f88d 0000 	strb.w	r0, [sp]
 8002c14:	f008 f802 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002c18:	4b02      	ldr	r3, [pc, #8]	; (8002c24 <CONFIG_Parse_Command+0x39c>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002c1a:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 8002c1e:	2104      	movs	r1, #4
  value[6] = Command;
 8002c20:	2273      	movs	r2, #115	; 0x73
 8002c22:	e7ad      	b.n	8002b80 <CONFIG_Parse_Command+0x2f8>
 8002c24:	200004ec 	.word	0x200004ec
 8002c28:	0802448c 	.word	0x0802448c
 8002c2c:	080244dc 	.word	0x080244dc
 8002c30:	080244e0 	.word	0x080244e0
        MOTION_EXT_Disable_Feature(EXT_HWF_MULTIPLE_EVENTS);
 8002c34:	2080      	movs	r0, #128	; 0x80
 8002c36:	f000 fff1 	bl	8003c1c <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002c3a:	f007 ffef 	bl	800ac1c <HAL_GetTick>
 8002c3e:	08c0      	lsrs	r0, r0, #3
 8002c40:	f88d 0000 	strb.w	r0, [sp]
 8002c44:	f007 ffea 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <CONFIG_Parse_Command+0x40c>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002c4a:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 8002c4e:	2104      	movs	r1, #4
  value[6] = Command;
 8002c50:	226d      	movs	r2, #109	; 0x6d
 8002c52:	e795      	b.n	8002b80 <CONFIG_Parse_Command+0x2f8>
        MOTION_EXT_Disable_Feature(EXT_HWF_DOUBLE_TAP);
 8002c54:	2004      	movs	r0, #4
 8002c56:	f000 ffe1 	bl	8003c1c <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002c5a:	f007 ffdf 	bl	800ac1c <HAL_GetTick>
 8002c5e:	08c0      	lsrs	r0, r0, #3
 8002c60:	f88d 0000 	strb.w	r0, [sp]
 8002c64:	f007 ffda 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <CONFIG_Parse_Command+0x40c>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002c6a:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 8002c6e:	2104      	movs	r1, #4
  value[6] = Command;
 8002c70:	2264      	movs	r2, #100	; 0x64
 8002c72:	e785      	b.n	8002b80 <CONFIG_Parse_Command+0x2f8>
        MOTION_EXT_Disable_Feature(EXT_HWF_FREE_FALL);
 8002c74:	2002      	movs	r0, #2
 8002c76:	f000 ffd1 	bl	8003c1c <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002c7a:	f007 ffcf 	bl	800ac1c <HAL_GetTick>
 8002c7e:	08c0      	lsrs	r0, r0, #3
 8002c80:	f88d 0000 	strb.w	r0, [sp]
 8002c84:	f007 ffca 	bl	800ac1c <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002c88:	4b02      	ldr	r3, [pc, #8]	; (8002c94 <CONFIG_Parse_Command+0x40c>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002c8a:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 8002c8e:	2104      	movs	r1, #4
  value[6] = Command;
 8002c90:	2266      	movs	r2, #102	; 0x66
 8002c92:	e775      	b.n	8002b80 <CONFIG_Parse_Command+0x2f8>
 8002c94:	200004ec 	.word	0x200004ec

08002c98 <CONSOLE_Set_Term_Notification_Status>:
 * @param  status The new notification status
 * @retval None
 */
void CONSOLE_Set_Term_Notification_Status(uint8_t status)
{
  CONSOLE_Server_App_Context.TermNotificationStatus = status;
 8002c98:	4b01      	ldr	r3, [pc, #4]	; (8002ca0 <CONSOLE_Set_Term_Notification_Status+0x8>)
 8002c9a:	7018      	strb	r0, [r3, #0]
}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	200004f0 	.word	0x200004f0

08002ca4 <CONSOLE_Set_Stderr_Notification_Status>:
 * @param  status The new notification status
 * @retval None
 */
void CONSOLE_Set_Stderr_Notification_Status(uint8_t status)
{
  CONSOLE_Server_App_Context.StderrNotificationStatus = status;
 8002ca4:	4b01      	ldr	r3, [pc, #4]	; (8002cac <CONSOLE_Set_Stderr_Notification_Status+0x8>)
 8002ca6:	7058      	strb	r0, [r3, #1]
}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	200004f0 	.word	0x200004f0

08002cb0 <CONSOLE_Term_Update_AfterRead>:
 * @brief Send a notification for Terminal char value after a read request
 * @param None
 * @retval None
 */
void CONSOLE_Term_Update_AfterRead(void)
{
 8002cb0:	b510      	push	{r4, lr}
  if(CONSOLE_Server_App_Context.TermNotificationStatus)
 8002cb2:	4c09      	ldr	r4, [pc, #36]	; (8002cd8 <CONSOLE_Term_Update_AfterRead+0x28>)
 8002cb4:	7823      	ldrb	r3, [r4, #0]
 8002cb6:	b903      	cbnz	r3, 8002cba <CONSOLE_Term_Update_AfterRead+0xa>
#endif
      MOTENV_STM_App_Update_Char(CONSOLE_TERM_CHAR_UUID, CONSOLE_Server_App_Context.LastTermLen, CONSOLE_Server_App_Context.LastTermBuffer);
  }

  return;
}
 8002cb8:	bd10      	pop	{r4, pc}
      APP_DBG_MSG("-- CONSOLE APPLICATION SERVER : NOTIFY CLIENT WITH NEW TERM PARAMETER VALUE \n ");
 8002cba:	4808      	ldr	r0, [pc, #32]	; (8002cdc <CONSOLE_Term_Update_AfterRead+0x2c>)
 8002cbc:	f020 f870 	bl	8022da0 <iprintf>
      APP_DBG_MSG(" \n\r");
 8002cc0:	4807      	ldr	r0, [pc, #28]	; (8002ce0 <CONSOLE_Term_Update_AfterRead+0x30>)
 8002cc2:	f020 f86d 	bl	8022da0 <iprintf>
      MOTENV_STM_App_Update_Char(CONSOLE_TERM_CHAR_UUID, CONSOLE_Server_App_Context.LastTermLen, CONSOLE_Server_App_Context.LastTermBuffer);
 8002cc6:	7de1      	ldrb	r1, [r4, #23]
 8002cc8:	1ce2      	adds	r2, r4, #3
 8002cca:	f44f 7087 	mov.w	r0, #270	; 0x10e
}
 8002cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      MOTENV_STM_App_Update_Char(CONSOLE_TERM_CHAR_UUID, CONSOLE_Server_App_Context.LastTermLen, CONSOLE_Server_App_Context.LastTermBuffer);
 8002cd2:	f00b bf1d 	b.w	800eb10 <MOTENV_STM_App_Update_Char>
 8002cd6:	bf00      	nop
 8002cd8:	200004f0 	.word	0x200004f0
 8002cdc:	08024530 	.word	0x08024530
 8002ce0:	080244dc 	.word	0x080244dc

08002ce4 <CONSOLE_Stderr_Update_AfterRead>:
 * @brief Send a notification for Stderr char value after a read request
 * @param None
 * @retval None
 */
void CONSOLE_Stderr_Update_AfterRead(void)
{
 8002ce4:	b510      	push	{r4, lr}
  if(CONSOLE_Server_App_Context.StderrNotificationStatus)
 8002ce6:	4c09      	ldr	r4, [pc, #36]	; (8002d0c <CONSOLE_Stderr_Update_AfterRead+0x28>)
 8002ce8:	7863      	ldrb	r3, [r4, #1]
 8002cea:	b903      	cbnz	r3, 8002cee <CONSOLE_Stderr_Update_AfterRead+0xa>
#endif
      MOTENV_STM_App_Update_Char(CONSOLE_TERM_CHAR_UUID, CONSOLE_Server_App_Context.LastTermLen, CONSOLE_Server_App_Context.LastTermBuffer);
  }

  return;
}
 8002cec:	bd10      	pop	{r4, pc}
      APP_DBG_MSG("-- CONSOLE APPLICATION SERVER : NOTIFY CLIENT WITH NEW STDERR PARAMETER VALUE \n ");
 8002cee:	4808      	ldr	r0, [pc, #32]	; (8002d10 <CONSOLE_Stderr_Update_AfterRead+0x2c>)
 8002cf0:	f020 f856 	bl	8022da0 <iprintf>
      APP_DBG_MSG(" \n\r");
 8002cf4:	4807      	ldr	r0, [pc, #28]	; (8002d14 <CONSOLE_Stderr_Update_AfterRead+0x30>)
 8002cf6:	f020 f853 	bl	8022da0 <iprintf>
      MOTENV_STM_App_Update_Char(CONSOLE_TERM_CHAR_UUID, CONSOLE_Server_App_Context.LastTermLen, CONSOLE_Server_App_Context.LastTermBuffer);
 8002cfa:	7de1      	ldrb	r1, [r4, #23]
 8002cfc:	1ce2      	adds	r2, r4, #3
 8002cfe:	f44f 7087 	mov.w	r0, #270	; 0x10e
}
 8002d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      MOTENV_STM_App_Update_Char(CONSOLE_TERM_CHAR_UUID, CONSOLE_Server_App_Context.LastTermLen, CONSOLE_Server_App_Context.LastTermBuffer);
 8002d06:	f00b bf03 	b.w	800eb10 <MOTENV_STM_App_Update_Char>
 8002d0a:	bf00      	nop
 8002d0c:	200004f0 	.word	0x200004f0
 8002d10:	08024580 	.word	0x08024580
 8002d14:	080244dc 	.word	0x080244dc

08002d18 <ENV_Set_Notification_Status>:
 * @param  status The new notification status
 * @retval None
 */
void ENV_Set_Notification_Status(uint8_t status)
{
  ENV_Server_App_Context.NotificationStatus = status;
 8002d18:	4b01      	ldr	r3, [pc, #4]	; (8002d20 <ENV_Set_Notification_Status+0x8>)
 8002d1a:	7018      	strb	r0, [r3, #0]
}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000508 	.word	0x20000508

08002d24 <ENV_Update>:
 * @brief  Update the Environmental char value
 * @param  None
 * @retval None
 */
void ENV_Update(void)
{
 8002d24:	b570      	push	{r4, r5, r6, lr}
  float pressure, humidity, temperature;
  int32_t decPart, intPart;

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
  {
    if(ENV_Server_App_Context.hasPressure == 1)
 8002d26:	4c9b      	ldr	r4, [pc, #620]	; (8002f94 <ENV_Update+0x270>)
 8002d28:	7ba3      	ldrb	r3, [r4, #14]
 8002d2a:	2b01      	cmp	r3, #1
{
 8002d2c:	b086      	sub	sp, #24
    if(ENV_Server_App_Context.hasPressure == 1)
 8002d2e:	f000 8110 	beq.w	8002f52 <ENV_Update+0x22e>
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
        ENV_Server_App_Context.PressureValue = intPart*100+decPart;
      }
    }

    if(ENV_Server_App_Context.hasHumidity == 1)
 8002d32:	7be3      	ldrb	r3, [r4, #15]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	f000 80ec 	beq.w	8002f12 <ENV_Update+0x1ee>
        MCR_BLUEMS_F2I_1D(humidity, intPart, decPart);
        ENV_Server_App_Context.HumidityValue = intPart*10+decPart;
      }
    }

    if(ENV_Server_App_Context.hasTemperature >= 1)
 8002d3a:	7c26      	ldrb	r6, [r4, #16]
    {
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_TEMPERATURE, &temperature) == 0)
 8002d3c:	ad03      	add	r5, sp, #12
    if(ENV_Server_App_Context.hasTemperature >= 1)
 8002d3e:	2e00      	cmp	r6, #0
 8002d40:	f040 8082 	bne.w	8002e48 <ENV_Update+0x124>
    if(ENV_Server_App_Context.hasPressure == 1)
 8002d44:	7ba0      	ldrb	r0, [r4, #14]
 8002d46:	2801      	cmp	r0, #1
 8002d48:	f000 80a3 	beq.w	8002e92 <ENV_Update+0x16e>
    if(ENV_Server_App_Context.hasHumidity == 1)
 8002d4c:	7be0      	ldrb	r0, [r4, #15]
 8002d4e:	2801      	cmp	r0, #1
 8002d50:	f000 80c0 	beq.w	8002ed4 <ENV_Update+0x1b0>
    if(ENV_Server_App_Context.hasTemperature >= 1)
 8002d54:	7c23      	ldrb	r3, [r4, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d155      	bne.n	8002e06 <ENV_Update+0xe2>
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8002d5a:	f007 ff5f 	bl	800ac1c <HAL_GetTick>
 8002d5e:	08c0      	lsrs	r0, r0, #3
 8002d60:	f88d 000c 	strb.w	r0, [sp, #12]
 8002d64:	f007 ff5a 	bl	800ac1c <HAL_GetTick>
  if(ENV_Server_App_Context.hasPressure == 1)
 8002d68:	7ba3      	ldrb	r3, [r4, #14]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8002d6a:	0ac0      	lsrs	r0, r0, #11
  if(ENV_Server_App_Context.hasPressure == 1)
 8002d6c:	2b01      	cmp	r3, #1
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8002d6e:	f88d 000d 	strb.w	r0, [sp, #13]
  if(ENV_Server_App_Context.hasPressure == 1)
 8002d72:	d037      	beq.n	8002de4 <ENV_Update+0xc0>
 8002d74:	2202      	movs	r2, #2
 8002d76:	2604      	movs	r6, #4
 8002d78:	4611      	mov	r1, r2
  uint8_t BuffPos = 2;
 8002d7a:	4613      	mov	r3, r2
  if(ENV_Server_App_Context.hasHumidity == 1)
 8002d7c:	7be0      	ldrb	r0, [r4, #15]
 8002d7e:	2801      	cmp	r0, #1
 8002d80:	d10e      	bne.n	8002da0 <ENV_Update+0x7c>
    STORE_LE_16(&value[BuffPos], ENV_Server_App_Context.HumidityValue);
 8002d82:	f101 0318 	add.w	r3, r1, #24
 8002d86:	8920      	ldrh	r0, [r4, #8]
 8002d88:	eb0d 0103 	add.w	r1, sp, r3
 8002d8c:	f102 0318 	add.w	r3, r2, #24
 8002d90:	eb0d 0203 	add.w	r2, sp, r3
 8002d94:	f801 0c0c 	strb.w	r0, [r1, #-12]
 8002d98:	0a00      	lsrs	r0, r0, #8
    BuffPos += HUMIDITY_BYTES;
 8002d9a:	4633      	mov	r3, r6
    STORE_LE_16(&value[BuffPos], ENV_Server_App_Context.HumidityValue);
 8002d9c:	f802 0c0b 	strb.w	r0, [r2, #-11]
  for(tempIndex = 0; tempIndex < ENV_Server_App_Context.hasTemperature; tempIndex++)
 8002da0:	7c21      	ldrb	r1, [r4, #16]
 8002da2:	b1b9      	cbz	r1, 8002dd4 <ENV_Update+0xb0>
    STORE_LE_16(&value[BuffPos], ENV_Server_App_Context.TemperatureValue[tempIndex]);
 8002da4:	f103 0018 	add.w	r0, r3, #24
 8002da8:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8002dac:	4468      	add	r0, sp
    BuffPos += TEMPERATURE_BYTES;
 8002dae:	3302      	adds	r3, #2
    STORE_LE_16(&value[BuffPos], ENV_Server_App_Context.TemperatureValue[tempIndex]);
 8002db0:	f800 2c0c 	strb.w	r2, [r0, #-12]
  for(tempIndex = 0; tempIndex < ENV_Server_App_Context.hasTemperature; tempIndex++)
 8002db4:	2901      	cmp	r1, #1
    STORE_LE_16(&value[BuffPos], ENV_Server_App_Context.TemperatureValue[tempIndex]);
 8002db6:	ea4f 2222 	mov.w	r2, r2, asr #8
 8002dba:	f800 2c0b 	strb.w	r2, [r0, #-11]
    BuffPos += TEMPERATURE_BYTES;
 8002dbe:	b2db      	uxtb	r3, r3
  for(tempIndex = 0; tempIndex < ENV_Server_App_Context.hasTemperature; tempIndex++)
 8002dc0:	d008      	beq.n	8002dd4 <ENV_Update+0xb0>
    STORE_LE_16(&value[BuffPos], ENV_Server_App_Context.TemperatureValue[tempIndex]);
 8002dc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002dc6:	3318      	adds	r3, #24
 8002dc8:	446b      	add	r3, sp
 8002dca:	1211      	asrs	r1, r2, #8
 8002dcc:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8002dd0:	f803 1c0b 	strb.w	r1, [r3, #-11]
  MOTENV_STM_App_Update_Char(ENV_CHAR_UUID, VALUE_LEN_ENV, (uint8_t *)&value);
 8002dd4:	462a      	mov	r2, r5
 8002dd6:	210c      	movs	r1, #12
 8002dd8:	f44f 50e8 	mov.w	r0, #7424	; 0x1d00
 8002ddc:	f00b fe98 	bl	800eb10 <MOTENV_STM_App_Update_Char>
}
 8002de0:	b006      	add	sp, #24
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
    STORE_LE_32(&value[BuffPos], ENV_Server_App_Context.PressureValue);
 8002de4:	6863      	ldr	r3, [r4, #4]
 8002de6:	f88d 300e 	strb.w	r3, [sp, #14]
 8002dea:	1219      	asrs	r1, r3, #8
 8002dec:	2206      	movs	r2, #6
 8002dee:	f88d 100f 	strb.w	r1, [sp, #15]
 8002df2:	1419      	asrs	r1, r3, #16
 8002df4:	161b      	asrs	r3, r3, #24
 8002df6:	f88d 1010 	strb.w	r1, [sp, #16]
 8002dfa:	f88d 3011 	strb.w	r3, [sp, #17]
 8002dfe:	2608      	movs	r6, #8
 8002e00:	4611      	mov	r1, r2
    BuffPos += PRESSURE_BYTES;
 8002e02:	4613      	mov	r3, r2
 8002e04:	e7ba      	b.n	8002d7c <ENV_Update+0x58>
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_TEMPERATURE, &temperature) == 0)
 8002e06:	2101      	movs	r1, #1
 8002e08:	462a      	mov	r2, r5
 8002e0a:	4608      	mov	r0, r1
 8002e0c:	f007 f9dc 	bl	800a1c8 <IKS01A3_ENV_SENSOR_GetValue>
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d1a2      	bne.n	8002d5a <ENV_Update+0x36>
      {
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 8002e14:	eddd 7a03 	vldr	s15, [sp, #12]
 8002e18:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002e1c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e20:	ee16 3a90 	vmov	r3, s13
 8002e24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        ENV_Server_App_Context.TemperatureValue[tempIndex] = intPart*10+decPart;
 8002e28:	eb04 0646 	add.w	r6, r4, r6, lsl #1
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 8002e2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
        ENV_Server_App_Context.TemperatureValue[tempIndex] = intPart*10+decPart;
 8002e30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 8002e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        ENV_Server_App_Context.TemperatureValue[tempIndex] = intPart*10+decPart;
 8002e3c:	ee17 2a90 	vmov	r2, s15
 8002e40:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002e44:	8173      	strh	r3, [r6, #10]
        tempIndex++;
 8002e46:	e788      	b.n	8002d5a <ENV_Update+0x36>
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_TEMPERATURE, &temperature) == 0)
 8002e48:	462a      	mov	r2, r5
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f007 f9bb 	bl	800a1c8 <IKS01A3_ENV_SENSOR_GetValue>
 8002e52:	2800      	cmp	r0, #0
 8002e54:	f040 809c 	bne.w	8002f90 <ENV_Update+0x26c>
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 8002e58:	eddd 7a03 	vldr	s15, [sp, #12]
    if(ENV_Server_App_Context.hasPressure == 1)
 8002e5c:	7ba0      	ldrb	r0, [r4, #14]
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 8002e5e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002e62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e66:	ee16 3a90 	vmov	r3, s13
 8002e6a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        ENV_Server_App_Context.TemperatureValue[tempIndex] = intPart*10+decPart;
 8002e6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 8002e72:	ee77 7ae6 	vsub.f32	s15, s15, s13
    if(ENV_Server_App_Context.hasPressure == 1)
 8002e76:	2801      	cmp	r0, #1
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 8002e78:	ee67 7a87 	vmul.f32	s15, s15, s14
        tempIndex++;
 8002e7c:	f04f 0601 	mov.w	r6, #1
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 8002e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        ENV_Server_App_Context.TemperatureValue[tempIndex] = intPart*10+decPart;
 8002e84:	ee17 2a90 	vmov	r2, s15
 8002e88:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002e8c:	8163      	strh	r3, [r4, #10]
    if(ENV_Server_App_Context.hasPressure == 1)
 8002e8e:	f47f af5d 	bne.w	8002d4c <ENV_Update+0x28>
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_PRESSURE, &pressure) == 0)
 8002e92:	aa01      	add	r2, sp, #4
 8002e94:	2102      	movs	r1, #2
 8002e96:	f007 f997 	bl	800a1c8 <IKS01A3_ENV_SENSOR_GetValue>
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	f47f af56 	bne.w	8002d4c <ENV_Update+0x28>
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 8002ea0:	eddd 7a01 	vldr	s15, [sp, #4]
 8002ea4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8002f98 <ENV_Update+0x274>
    if(ENV_Server_App_Context.hasHumidity == 1)
 8002ea8:	7be0      	ldrb	r0, [r4, #15]
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 8002eaa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
        ENV_Server_App_Context.PressureValue = intPart*100+decPart;
 8002eae:	2264      	movs	r2, #100	; 0x64
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 8002eb0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
        ENV_Server_App_Context.PressureValue = intPart*100+decPart;
 8002eb4:	ee17 1a10 	vmov	r1, s14
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 8002eb8:	ee77 7ac6 	vsub.f32	s15, s15, s12
    if(ENV_Server_App_Context.hasHumidity == 1)
 8002ebc:	2801      	cmp	r0, #1
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 8002ebe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ec6:	ee17 3a90 	vmov	r3, s15
        ENV_Server_App_Context.PressureValue = intPart*100+decPart;
 8002eca:	fb02 3301 	mla	r3, r2, r1, r3
 8002ece:	6063      	str	r3, [r4, #4]
    if(ENV_Server_App_Context.hasHumidity == 1)
 8002ed0:	f47f af40 	bne.w	8002d54 <ENV_Update+0x30>
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_HUMIDITY, &humidity) == 0)
 8002ed4:	aa02      	add	r2, sp, #8
 8002ed6:	2104      	movs	r1, #4
 8002ed8:	f007 f976 	bl	800a1c8 <IKS01A3_ENV_SENSOR_GetValue>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	f47f af39 	bne.w	8002d54 <ENV_Update+0x30>
        MCR_BLUEMS_F2I_1D(humidity, intPart, decPart);
 8002ee2:	eddd 7a02 	vldr	s15, [sp, #8]
 8002ee6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002eea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002eee:	ee16 3a90 	vmov	r3, s13
 8002ef2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        ENV_Server_App_Context.HumidityValue = intPart*10+decPart;
 8002ef6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        MCR_BLUEMS_F2I_1D(humidity, intPart, decPart);
 8002efa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f06:	ee17 3a90 	vmov	r3, s15
        ENV_Server_App_Context.HumidityValue = intPart*10+decPart;
 8002f0a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002f0e:	8123      	strh	r3, [r4, #8]
 8002f10:	e720      	b.n	8002d54 <ENV_Update+0x30>
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_HUMIDITY, &humidity) == 0)
 8002f12:	aa02      	add	r2, sp, #8
 8002f14:	2104      	movs	r1, #4
 8002f16:	2000      	movs	r0, #0
 8002f18:	f007 f956 	bl	800a1c8 <IKS01A3_ENV_SENSOR_GetValue>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	f47f af0c 	bne.w	8002d3a <ENV_Update+0x16>
        MCR_BLUEMS_F2I_1D(humidity, intPart, decPart);
 8002f22:	eddd 7a02 	vldr	s15, [sp, #8]
 8002f26:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002f2a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f2e:	ee16 3a90 	vmov	r3, s13
 8002f32:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        ENV_Server_App_Context.HumidityValue = intPart*10+decPart;
 8002f36:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        MCR_BLUEMS_F2I_1D(humidity, intPart, decPart);
 8002f3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f46:	ee17 3a90 	vmov	r3, s15
        ENV_Server_App_Context.HumidityValue = intPart*10+decPart;
 8002f4a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002f4e:	8123      	strh	r3, [r4, #8]
 8002f50:	e6f3      	b.n	8002d3a <ENV_Update+0x16>
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_PRESSURE, &pressure) == 0)
 8002f52:	aa01      	add	r2, sp, #4
 8002f54:	2102      	movs	r1, #2
 8002f56:	2000      	movs	r0, #0
 8002f58:	f007 f936 	bl	800a1c8 <IKS01A3_ENV_SENSOR_GetValue>
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	f47f aee8 	bne.w	8002d32 <ENV_Update+0xe>
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 8002f62:	eddd 7a01 	vldr	s15, [sp, #4]
 8002f66:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002f98 <ENV_Update+0x274>
 8002f6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
        ENV_Server_App_Context.PressureValue = intPart*100+decPart;
 8002f6e:	2264      	movs	r2, #100	; 0x64
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 8002f70:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
        ENV_Server_App_Context.PressureValue = intPart*100+decPart;
 8002f74:	ee17 1a10 	vmov	r1, s14
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 8002f78:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002f7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f84:	ee17 3a90 	vmov	r3, s15
        ENV_Server_App_Context.PressureValue = intPart*100+decPart;
 8002f88:	fb02 3301 	mla	r3, r2, r1, r3
 8002f8c:	6063      	str	r3, [r4, #4]
 8002f8e:	e6d0      	b.n	8002d32 <ENV_Update+0xe>
  uint8_t tempIndex = 0;
 8002f90:	2600      	movs	r6, #0
 8002f92:	e6d7      	b.n	8002d44 <ENV_Update+0x20>
 8002f94:	20000508 	.word	0x20000508
 8002f98:	42c80000 	.word	0x42c80000

08002f9c <ENV_Send_Notification_Task>:
{
 8002f9c:	b508      	push	{r3, lr}
  if(CONFIG_Get_FirstConnection_Config() == 1)
 8002f9e:	f7ff fc31 	bl	8002804 <CONFIG_Get_FirstConnection_Config>
 8002fa2:	2801      	cmp	r0, #1
 8002fa4:	d00b      	beq.n	8002fbe <ENV_Send_Notification_Task+0x22>
  if(ENV_Server_App_Context.NotificationStatus)
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <ENV_Send_Notification_Task+0x50>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	b11b      	cbz	r3, 8002fb4 <ENV_Send_Notification_Task+0x18>
}
 8002fac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ENV_Update();
 8002fb0:	f7ff beb8 	b.w	8002d24 <ENV_Update>
}
 8002fb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    APP_DBG_MSG("-- ENV APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 8002fb8:	480d      	ldr	r0, [pc, #52]	; (8002ff0 <ENV_Send_Notification_Task+0x54>)
 8002fba:	f01f bef1 	b.w	8022da0 <iprintf>
    CONFIG_Send_Notification(FEATURE_MASK_SENSORFUSION_SHORT, W2ST_COMMAND_CAL_STATUS, MOTIONFX_Get_MagCalStatus() ? 100: 0);
 8002fbe:	f001 feb3 	bl	8004d28 <MOTIONFX_Get_MagCalStatus>
 8002fc2:	1e02      	subs	r2, r0, #0
 8002fc4:	bf18      	it	ne
 8002fc6:	2264      	movne	r2, #100	; 0x64
 8002fc8:	21ff      	movs	r1, #255	; 0xff
 8002fca:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fce:	f7ff fc1f 	bl	8002810 <CONFIG_Send_Notification>
    CONFIG_Send_Notification(FEATURE_MASK_ECOMPASS, W2ST_COMMAND_CAL_STATUS, MOTIONFX_Get_MagCalStatus() ? 100: 0);
 8002fd2:	f001 fea9 	bl	8004d28 <MOTIONFX_Get_MagCalStatus>
 8002fd6:	1e02      	subs	r2, r0, #0
 8002fd8:	bf18      	it	ne
 8002fda:	2264      	movne	r2, #100	; 0x64
 8002fdc:	2040      	movs	r0, #64	; 0x40
 8002fde:	21ff      	movs	r1, #255	; 0xff
 8002fe0:	f7ff fc16 	bl	8002810 <CONFIG_Send_Notification>
    CONFIG_Set_FirstConnection_Config(0);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7ff fc07 	bl	80027f8 <CONFIG_Set_FirstConnection_Config>
 8002fea:	e7dc      	b.n	8002fa6 <ENV_Send_Notification_Task+0xa>
 8002fec:	20000508 	.word	0x20000508
 8002ff0:	08024610 	.word	0x08024610

08002ff4 <MOTENV_IntensityDetUpdate_Timer_Callback>:
 * @param  None
 * @retval None
 */
static void MOTENV_IntensityDetUpdate_Timer_Callback(void)
{
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_INTENSITY_DET_ID, CFG_SCH_PRIO_0);
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002ffa:	f00c b9f5 	b.w	800f3e8 <UTIL_SEQ_SetTask>
 8002ffe:	bf00      	nop

08003000 <MOTENV_PedometerUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_PEDOMETER_ID, CFG_SCH_PRIO_0);
 8003000:	2100      	movs	r1, #0
 8003002:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003006:	f00c b9ef 	b.w	800f3e8 <UTIL_SEQ_SetTask>
 800300a:	bf00      	nop

0800300c <MOTENV_GestureRecUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_GESTURE_REC_ID, CFG_SCH_PRIO_0);
 800300c:	2100      	movs	r1, #0
 800300e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003012:	f00c b9e9 	b.w	800f3e8 <UTIL_SEQ_SetTask>
 8003016:	bf00      	nop

08003018 <MOTENV_CarryPositionUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_CARRY_POSITION_ID, CFG_SCH_PRIO_0);
 8003018:	2100      	movs	r1, #0
 800301a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800301e:	f00c b9e3 	b.w	800f3e8 <UTIL_SEQ_SetTask>
 8003022:	bf00      	nop

08003024 <MOTENV_ActivityRecUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_ACTIVITY_REC_ID, CFG_SCH_PRIO_0);
 8003024:	2100      	movs	r1, #0
 8003026:	f44f 7080 	mov.w	r0, #256	; 0x100
 800302a:	f00c b9dd 	b.w	800f3e8 <UTIL_SEQ_SetTask>
 800302e:	bf00      	nop

08003030 <MOTENV_ECompassUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_ECOMPASS_ID, CFG_SCH_PRIO_0);
 8003030:	2100      	movs	r1, #0
 8003032:	2080      	movs	r0, #128	; 0x80
 8003034:	f00c b9d8 	b.w	800f3e8 <UTIL_SEQ_SetTask>

08003038 <MOTENV_MotionFxUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_MOTIONFX_ID, CFG_SCH_PRIO_0);
 8003038:	2100      	movs	r1, #0
 800303a:	2040      	movs	r0, #64	; 0x40
 800303c:	f00c b9d4 	b.w	800f3e8 <UTIL_SEQ_SetTask>

08003040 <MOTENV_EnvUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_ENVIRONMENT_ID, CFG_SCH_PRIO_0);
 8003040:	2100      	movs	r1, #0
 8003042:	2020      	movs	r0, #32
 8003044:	f00c b9d0 	b.w	800f3e8 <UTIL_SEQ_SetTask>

08003048 <MOTENV_AccGyroMagUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_ACC_GYRO_MAG_ID, CFG_SCH_PRIO_0);
 8003048:	2100      	movs	r1, #0
 800304a:	2010      	movs	r0, #16
 800304c:	f00c b9cc 	b.w	800f3e8 <UTIL_SEQ_SetTask>

08003050 <MOTENV_STM_App_Notification>:
{
 8003050:	b510      	push	{r4, lr}
  switch(pNotification->Motenv_Evt_Opcode)
 8003052:	7803      	ldrb	r3, [r0, #0]
 8003054:	2b22      	cmp	r3, #34	; 0x22
 8003056:	f200 822d 	bhi.w	80034b4 <MOTENV_STM_App_Notification+0x464>
 800305a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800305e:	021b      	.short	0x021b
 8003060:	01fb020c 	.word	0x01fb020c
 8003064:	01a101ab 	.word	0x01a101ab
 8003068:	018b0196 	.word	0x018b0196
 800306c:	01710181 	.word	0x01710181
 8003070:	01520162 	.word	0x01520162
 8003074:	01330143 	.word	0x01330143
 8003078:	011a0124 	.word	0x011a0124
 800307c:	00fb010a 	.word	0x00fb010a
 8003080:	00e100f1 	.word	0x00e100f1
 8003084:	00c800d2 	.word	0x00c800d2
 8003088:	00a900b8 	.word	0x00a900b8
 800308c:	008f009f 	.word	0x008f009f
 8003090:	00720080 	.word	0x00720080
 8003094:	00570064 	.word	0x00570064
 8003098:	0041004c 	.word	0x0041004c
 800309c:	002b0036 	.word	0x002b0036
 80030a0:	00230027 	.word	0x00230027
}
 80030a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CONSOLE_Stderr_Update_AfterRead();
 80030a8:	f7ff be1c 	b.w	8002ce4 <CONSOLE_Stderr_Update_AfterRead>
}
 80030ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CONSOLE_Term_Update_AfterRead();
 80030b0:	f7ff bdfe 	b.w	8002cb0 <CONSOLE_Term_Update_AfterRead>
      CONSOLE_Set_Stderr_Notification_Status(0);
 80030b4:	2000      	movs	r0, #0
 80030b6:	f7ff fdf5 	bl	8002ca4 <CONSOLE_Set_Stderr_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CONSOLE STDERR NOTIFICATION DISABLED\n");
 80030ba:	48c6      	ldr	r0, [pc, #792]	; (80033d4 <MOTENV_STM_App_Notification+0x384>)
 80030bc:	f01f fef6 	bl	8022eac <puts>
}
 80030c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 80030c4:	48c4      	ldr	r0, [pc, #784]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 80030c6:	f01f be6b 	b.w	8022da0 <iprintf>
      CONSOLE_Set_Stderr_Notification_Status(1);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f7ff fdea 	bl	8002ca4 <CONSOLE_Set_Stderr_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CONSOLE STDERR NOTIFICATION ENABLED\n");
 80030d0:	48c2      	ldr	r0, [pc, #776]	; (80033dc <MOTENV_STM_App_Notification+0x38c>)
 80030d2:	f01f feeb 	bl	8022eac <puts>
}
 80030d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 80030da:	48bf      	ldr	r0, [pc, #764]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 80030dc:	f01f be60 	b.w	8022da0 <iprintf>
      CONSOLE_Set_Term_Notification_Status(0);
 80030e0:	2000      	movs	r0, #0
 80030e2:	f7ff fdd9 	bl	8002c98 <CONSOLE_Set_Term_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CONSOLE TERM NOTIFICATION DISABLED\n");
 80030e6:	48be      	ldr	r0, [pc, #760]	; (80033e0 <MOTENV_STM_App_Notification+0x390>)
 80030e8:	f01f fee0 	bl	8022eac <puts>
}
 80030ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 80030f0:	48b9      	ldr	r0, [pc, #740]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 80030f2:	f01f be55 	b.w	8022da0 <iprintf>
      CONSOLE_Set_Term_Notification_Status(1);
 80030f6:	2001      	movs	r0, #1
 80030f8:	f7ff fdce 	bl	8002c98 <CONSOLE_Set_Term_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CONSOLE TERM NOTIFICATION ENABLED\n");
 80030fc:	48b9      	ldr	r0, [pc, #740]	; (80033e4 <MOTENV_STM_App_Notification+0x394>)
 80030fe:	f01f fed5 	bl	8022eac <puts>
}
 8003102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 8003106:	48b4      	ldr	r0, [pc, #720]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 8003108:	f01f be4a 	b.w	8022da0 <iprintf>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CONFIG WRITE EVENT RECEIVED\n");
 800310c:	4604      	mov	r4, r0
 800310e:	48b6      	ldr	r0, [pc, #728]	; (80033e8 <MOTENV_STM_App_Notification+0x398>)
 8003110:	f01f fecc 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 8003114:	48b0      	ldr	r0, [pc, #704]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 8003116:	f01f fe43 	bl	8022da0 <iprintf>
      CONFIG_Parse_Command(pNotification->DataTransfered.pPayload, pNotification->DataTransfered.Length);
 800311a:	7a21      	ldrb	r1, [r4, #8]
 800311c:	6860      	ldr	r0, [r4, #4]
}
 800311e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CONFIG_Parse_Command(pNotification->DataTransfered.pPayload, pNotification->DataTransfered.Length);
 8003122:	f7ff bbb1 	b.w	8002888 <CONFIG_Parse_Command>
      CONFIG_Set_Notification_Status(0);
 8003126:	2000      	movs	r0, #0
 8003128:	f7ff fb60 	bl	80027ec <CONFIG_Set_Notification_Status>
      CONFIG_Set_FirstConnection_Config(0);
 800312c:	2000      	movs	r0, #0
 800312e:	f7ff fb63 	bl	80027f8 <CONFIG_Set_FirstConnection_Config>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CONFIG NOTIFICATION DISABLED\n");
 8003132:	48ae      	ldr	r0, [pc, #696]	; (80033ec <MOTENV_STM_App_Notification+0x39c>)
 8003134:	f01f feba 	bl	8022eac <puts>
}
 8003138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 800313c:	48a6      	ldr	r0, [pc, #664]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 800313e:	f01f be2f 	b.w	8022da0 <iprintf>
      CONFIG_Set_Notification_Status(1);
 8003142:	2001      	movs	r0, #1
 8003144:	f7ff fb52 	bl	80027ec <CONFIG_Set_Notification_Status>
      CONFIG_Set_FirstConnection_Config(1);
 8003148:	2001      	movs	r0, #1
 800314a:	f7ff fb55 	bl	80027f8 <CONFIG_Set_FirstConnection_Config>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CONFIG NOTIFICATION ENABLED\n");
 800314e:	48a8      	ldr	r0, [pc, #672]	; (80033f0 <MOTENV_STM_App_Notification+0x3a0>)
 8003150:	f01f feac 	bl	8022eac <puts>
}
 8003154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 8003158:	489f      	ldr	r0, [pc, #636]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 800315a:	f01f be21 	b.w	8022da0 <iprintf>
      MOTIONID_Set_Notification_Status(0);
 800315e:	2000      	movs	r0, #0
 8003160:	f001 fe94 	bl	8004e8c <MOTIONID_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : INTENSITY DET NOTIFICATION DISABLED\n");
 8003164:	48a3      	ldr	r0, [pc, #652]	; (80033f4 <MOTENV_STM_App_Notification+0x3a4>)
 8003166:	f01f fea1 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 800316a:	489b      	ldr	r0, [pc, #620]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 800316c:	f01f fe18 	bl	8022da0 <iprintf>
      HW_TS_Stop(MOTENV_Server_App_Context.IntensityDet_Update_Timer_Id);
 8003170:	4ba1      	ldr	r3, [pc, #644]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 8003172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.IntensityDet_Update_Timer_Id);
 8003176:	7a18      	ldrb	r0, [r3, #8]
 8003178:	f7fe ba9c 	b.w	80016b4 <HW_TS_Stop>
      MOTIONID_Set_Notification_Status(1);
 800317c:	2001      	movs	r0, #1
 800317e:	f001 fe85 	bl	8004e8c <MOTIONID_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : INTENSITY DET NOTIFICATION ENABLED\n");
 8003182:	489e      	ldr	r0, [pc, #632]	; (80033fc <MOTENV_STM_App_Notification+0x3ac>)
 8003184:	f01f fe92 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 8003188:	4893      	ldr	r0, [pc, #588]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 800318a:	f01f fe09 	bl	8022da0 <iprintf>
      HW_TS_Start(MOTENV_Server_App_Context.IntensityDet_Update_Timer_Id, INTENSITY_DET_UPDATE_PERIOD);
 800318e:	4b9a      	ldr	r3, [pc, #616]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 8003190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Start(MOTENV_Server_App_Context.IntensityDet_Update_Timer_Id, INTENSITY_DET_UPDATE_PERIOD);
 8003194:	7a18      	ldrb	r0, [r3, #8]
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	f7fe bb10 	b.w	80017bc <HW_TS_Start>
      MOTIONPM_Pedometer_Update();
 800319c:	f001 ff6a 	bl	8005074 <MOTIONPM_Pedometer_Update>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : PEDOMETER READ\n");
 80031a0:	4897      	ldr	r0, [pc, #604]	; (8003400 <MOTENV_STM_App_Notification+0x3b0>)
 80031a2:	f01f fe83 	bl	8022eac <puts>
}
 80031a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 80031aa:	488b      	ldr	r0, [pc, #556]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 80031ac:	f01f bdf8 	b.w	8022da0 <iprintf>
      MOTIONPM_Set_Notification_Status(0);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f001 fed7 	bl	8004f64 <MOTIONPM_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : PEDOMETER NOTIFICATION DISABLED\n");
 80031b6:	4893      	ldr	r0, [pc, #588]	; (8003404 <MOTENV_STM_App_Notification+0x3b4>)
 80031b8:	f01f fe78 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 80031bc:	4886      	ldr	r0, [pc, #536]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 80031be:	f01f fdef 	bl	8022da0 <iprintf>
      HW_TS_Stop(MOTENV_Server_App_Context.Pedometer_Update_Timer_Id);
 80031c2:	4b8d      	ldr	r3, [pc, #564]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 80031c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.Pedometer_Update_Timer_Id);
 80031c8:	79d8      	ldrb	r0, [r3, #7]
 80031ca:	f7fe ba73 	b.w	80016b4 <HW_TS_Stop>
      MOTIONPM_Set_Notification_Status(1);
 80031ce:	2001      	movs	r0, #1
 80031d0:	f001 fec8 	bl	8004f64 <MOTIONPM_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : PEDOMETER NOTIFICATION ENABLED\n");
 80031d4:	488c      	ldr	r0, [pc, #560]	; (8003408 <MOTENV_STM_App_Notification+0x3b8>)
 80031d6:	f01f fe69 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 80031da:	487f      	ldr	r0, [pc, #508]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 80031dc:	f01f fde0 	bl	8022da0 <iprintf>
      HW_TS_Start(MOTENV_Server_App_Context.Pedometer_Update_Timer_Id, PEDOMETER_UPDATE_PERIOD);
 80031e0:	4b85      	ldr	r3, [pc, #532]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 80031e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Start(MOTENV_Server_App_Context.Pedometer_Update_Timer_Id, PEDOMETER_UPDATE_PERIOD);
 80031e6:	79d8      	ldrb	r0, [r3, #7]
 80031e8:	2128      	movs	r1, #40	; 0x28
 80031ea:	f7fe bae7 	b.w	80017bc <HW_TS_Start>
      MOTIONGR_GestureRec_Update();
 80031ee:	f001 fe29 	bl	8004e44 <MOTIONGR_GestureRec_Update>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : GESTURE REC READ\n");
 80031f2:	4886      	ldr	r0, [pc, #536]	; (800340c <MOTENV_STM_App_Notification+0x3bc>)
 80031f4:	f01f fe5a 	bl	8022eac <puts>
}
 80031f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 80031fc:	4876      	ldr	r0, [pc, #472]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 80031fe:	f01f bdcf 	b.w	8022da0 <iprintf>
      MOTIONGR_Set_Notification_Status(0);
 8003202:	2000      	movs	r0, #0
 8003204:	f001 fdb0 	bl	8004d68 <MOTIONGR_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : GESTURE REC NOTIFICATION DISABLED\n");
 8003208:	4881      	ldr	r0, [pc, #516]	; (8003410 <MOTENV_STM_App_Notification+0x3c0>)
 800320a:	f01f fe4f 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 800320e:	4872      	ldr	r0, [pc, #456]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 8003210:	f01f fdc6 	bl	8022da0 <iprintf>
      HW_TS_Stop(MOTENV_Server_App_Context.GestureRec_Update_Timer_Id);
 8003214:	4b78      	ldr	r3, [pc, #480]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 8003216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.GestureRec_Update_Timer_Id);
 800321a:	7998      	ldrb	r0, [r3, #6]
 800321c:	f7fe ba4a 	b.w	80016b4 <HW_TS_Stop>
      MOTIONGR_Set_Notification_Status(1);
 8003220:	2001      	movs	r0, #1
 8003222:	f001 fda1 	bl	8004d68 <MOTIONGR_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : GESTURE REC NOTIFICATION ENABLED\n");
 8003226:	487b      	ldr	r0, [pc, #492]	; (8003414 <MOTENV_STM_App_Notification+0x3c4>)
 8003228:	f01f fe40 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 800322c:	486a      	ldr	r0, [pc, #424]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 800322e:	f01f fdb7 	bl	8022da0 <iprintf>
      HW_TS_Start(MOTENV_Server_App_Context.GestureRec_Update_Timer_Id, GESTURE_REC_UPDATE_PERIOD);
 8003232:	4b71      	ldr	r3, [pc, #452]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 8003234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Start(MOTENV_Server_App_Context.GestureRec_Update_Timer_Id, GESTURE_REC_UPDATE_PERIOD);
 8003238:	7998      	ldrb	r0, [r3, #6]
 800323a:	2128      	movs	r1, #40	; 0x28
 800323c:	f7fe babe 	b.w	80017bc <HW_TS_Start>
      MOTIONCP_CarryPosition_Update();
 8003240:	f001 fb00 	bl	8004844 <MOTIONCP_CarryPosition_Update>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CARRY POSITION READ\n");
 8003244:	4874      	ldr	r0, [pc, #464]	; (8003418 <MOTENV_STM_App_Notification+0x3c8>)
 8003246:	f01f fe31 	bl	8022eac <puts>
}
 800324a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 800324e:	4862      	ldr	r0, [pc, #392]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 8003250:	f01f bda6 	b.w	8022da0 <iprintf>
      MOTIONCP_Set_Notification_Status(0);
 8003254:	2000      	movs	r0, #0
 8003256:	f001 fa89 	bl	800476c <MOTIONCP_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CARRY POSITION NOTIFICATION DISABLED\n");
 800325a:	4870      	ldr	r0, [pc, #448]	; (800341c <MOTENV_STM_App_Notification+0x3cc>)
 800325c:	f01f fe26 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 8003260:	485d      	ldr	r0, [pc, #372]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 8003262:	f01f fd9d 	bl	8022da0 <iprintf>
      HW_TS_Stop(MOTENV_Server_App_Context.CarryPosition_Update_Timer_Id);
 8003266:	4b64      	ldr	r3, [pc, #400]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 8003268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.CarryPosition_Update_Timer_Id);
 800326c:	7958      	ldrb	r0, [r3, #5]
 800326e:	f7fe ba21 	b.w	80016b4 <HW_TS_Stop>
      MOTIONCP_Set_Notification_Status(1);
 8003272:	2001      	movs	r0, #1
 8003274:	f001 fa7a 	bl	800476c <MOTIONCP_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : CARRY POSITION NOTIFICATION ENABLED\n");
 8003278:	4869      	ldr	r0, [pc, #420]	; (8003420 <MOTENV_STM_App_Notification+0x3d0>)
 800327a:	f01f fe17 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 800327e:	4856      	ldr	r0, [pc, #344]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 8003280:	f01f fd8e 	bl	8022da0 <iprintf>
      HW_TS_Start(MOTENV_Server_App_Context.CarryPosition_Update_Timer_Id, CARRY_POSITION_UPDATE_PERIOD);
 8003284:	4b5c      	ldr	r3, [pc, #368]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 8003286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Start(MOTENV_Server_App_Context.CarryPosition_Update_Timer_Id, CARRY_POSITION_UPDATE_PERIOD);
 800328a:	7958      	ldrb	r0, [r3, #5]
 800328c:	2128      	movs	r1, #40	; 0x28
 800328e:	f7fe ba95 	b.w	80017bc <HW_TS_Start>
      MOTIONAR_ActivityRec_Update();
 8003292:	f001 fa47 	bl	8004724 <MOTIONAR_ActivityRec_Update>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : ACITIVITY REC READ\n");
 8003296:	4863      	ldr	r0, [pc, #396]	; (8003424 <MOTENV_STM_App_Notification+0x3d4>)
 8003298:	f01f fe08 	bl	8022eac <puts>
}
 800329c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 80032a0:	484d      	ldr	r0, [pc, #308]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 80032a2:	f01f bd7d 	b.w	8022da0 <iprintf>
      MOTIONAR_Set_Notification_Status(0);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f001 f9cc 	bl	8004644 <MOTIONAR_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : ACTIVITY REC NOTIFICATION DISABLED\n");
 80032ac:	485e      	ldr	r0, [pc, #376]	; (8003428 <MOTENV_STM_App_Notification+0x3d8>)
 80032ae:	f01f fdfd 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 80032b2:	4849      	ldr	r0, [pc, #292]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 80032b4:	f01f fd74 	bl	8022da0 <iprintf>
      HW_TS_Stop(MOTENV_Server_App_Context.ActivityRec_Update_Timer_Id);
 80032b8:	4b4f      	ldr	r3, [pc, #316]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 80032ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.ActivityRec_Update_Timer_Id);
 80032be:	7918      	ldrb	r0, [r3, #4]
 80032c0:	f7fe b9f8 	b.w	80016b4 <HW_TS_Stop>
      MOTIONAR_Set_Notification_Status(1);
 80032c4:	2001      	movs	r0, #1
 80032c6:	f001 f9bd 	bl	8004644 <MOTIONAR_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : ACITIVITY REC NOTIFICATION ENABLED\n");
 80032ca:	4858      	ldr	r0, [pc, #352]	; (800342c <MOTENV_STM_App_Notification+0x3dc>)
 80032cc:	f01f fdee 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 80032d0:	4841      	ldr	r0, [pc, #260]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 80032d2:	f01f fd65 	bl	8022da0 <iprintf>
      HW_TS_Start(MOTENV_Server_App_Context.ActivityRec_Update_Timer_Id, ACTIVITY_REC_UPDATE_PERIOD);
 80032d6:	4b48      	ldr	r3, [pc, #288]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 80032d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Start(MOTENV_Server_App_Context.ActivityRec_Update_Timer_Id, ACTIVITY_REC_UPDATE_PERIOD);
 80032dc:	7918      	ldrb	r0, [r3, #4]
 80032de:	2180      	movs	r1, #128	; 0x80
 80032e0:	f7fe ba6c 	b.w	80017bc <HW_TS_Start>
      MOTIONFX_Set_ECompass_Notification_Status(0);
 80032e4:	2000      	movs	r0, #0
 80032e6:	f001 fd15 	bl	8004d14 <MOTIONFX_Set_ECompass_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : ECOMPASS NOTIFICATION DISABLED\n");
 80032ea:	4851      	ldr	r0, [pc, #324]	; (8003430 <MOTENV_STM_App_Notification+0x3e0>)
 80032ec:	f01f fdde 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 80032f0:	4839      	ldr	r0, [pc, #228]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 80032f2:	f01f fd55 	bl	8022da0 <iprintf>
      HW_TS_Stop(MOTENV_Server_App_Context.ECompass_Update_Timer_Id);
 80032f6:	4b40      	ldr	r3, [pc, #256]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 80032f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.ECompass_Update_Timer_Id);
 80032fc:	78d8      	ldrb	r0, [r3, #3]
 80032fe:	f7fe b9d9 	b.w	80016b4 <HW_TS_Stop>
      MOTIONFX_Set_ECompass_Notification_Status(1);
 8003302:	2001      	movs	r0, #1
 8003304:	f001 fd06 	bl	8004d14 <MOTIONFX_Set_ECompass_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : ECOMPASS NOTIFICATION ENABLED\n");
 8003308:	484a      	ldr	r0, [pc, #296]	; (8003434 <MOTENV_STM_App_Notification+0x3e4>)
 800330a:	f01f fdcf 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 800330e:	4832      	ldr	r0, [pc, #200]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 8003310:	f01f fd46 	bl	8022da0 <iprintf>
      HW_TS_Start(MOTENV_Server_App_Context.ECompass_Update_Timer_Id, ECOMPASS_UPDATE_PERIOD);
 8003314:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 8003316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Start(MOTENV_Server_App_Context.ECompass_Update_Timer_Id, ECOMPASS_UPDATE_PERIOD);
 800331a:	78d8      	ldrb	r0, [r3, #3]
 800331c:	2114      	movs	r1, #20
 800331e:	f7fe ba4d 	b.w	80017bc <HW_TS_Start>
      MOTIONFX_Set_Quat_Notification_Status(0);
 8003322:	2000      	movs	r0, #0
 8003324:	f001 fcf0 	bl	8004d08 <MOTIONFX_Set_Quat_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : MOTIONFX NOTIFICATION DISABLED\n");
 8003328:	4843      	ldr	r0, [pc, #268]	; (8003438 <MOTENV_STM_App_Notification+0x3e8>)
 800332a:	f01f fdbf 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 800332e:	482a      	ldr	r0, [pc, #168]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 8003330:	f01f fd36 	bl	8022da0 <iprintf>
      HW_TS_Stop(MOTENV_Server_App_Context.MotionFx_Update_Timer_Id);
 8003334:	4b30      	ldr	r3, [pc, #192]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 8003336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.MotionFx_Update_Timer_Id);
 800333a:	7898      	ldrb	r0, [r3, #2]
 800333c:	f7fe b9ba 	b.w	80016b4 <HW_TS_Stop>
      MOTIONFX_Set_Quat_Notification_Status(1);
 8003340:	2001      	movs	r0, #1
 8003342:	f001 fce1 	bl	8004d08 <MOTIONFX_Set_Quat_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : MOTIONFX NOTIFICATION ENABLED\n");
 8003346:	483d      	ldr	r0, [pc, #244]	; (800343c <MOTENV_STM_App_Notification+0x3ec>)
 8003348:	f01f fdb0 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 800334c:	4822      	ldr	r0, [pc, #136]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 800334e:	f01f fd27 	bl	8022da0 <iprintf>
      HW_TS_Start(MOTENV_Server_App_Context.MotionFx_Update_Timer_Id, MOTIONFX_UPDATE_PERIOD);
 8003352:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 8003354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Start(MOTENV_Server_App_Context.MotionFx_Update_Timer_Id, MOTIONFX_UPDATE_PERIOD);
 8003358:	7898      	ldrb	r0, [r3, #2]
 800335a:	2114      	movs	r1, #20
 800335c:	f7fe ba2e 	b.w	80017bc <HW_TS_Start>
      MOTION_EXT_ReadCB();
 8003360:	f000 fd08 	bl	8003d74 <MOTION_EXT_ReadCB>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : MOTION EXT READ\n");
 8003364:	4836      	ldr	r0, [pc, #216]	; (8003440 <MOTENV_STM_App_Notification+0x3f0>)
 8003366:	f01f fda1 	bl	8022eac <puts>
}
 800336a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 800336e:	481a      	ldr	r0, [pc, #104]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 8003370:	f01f bd16 	b.w	8022da0 <iprintf>
      MOTION_EXT_Set_Notification_Status(0);
 8003374:	2000      	movs	r0, #0
 8003376:	f000 fb6b 	bl	8003a50 <MOTION_EXT_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : MOTION EXT NOTIFICATION DISABLED\n");
 800337a:	4832      	ldr	r0, [pc, #200]	; (8003444 <MOTENV_STM_App_Notification+0x3f4>)
 800337c:	f01f fd96 	bl	8022eac <puts>
}
 8003380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 8003384:	4814      	ldr	r0, [pc, #80]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 8003386:	f01f bd0b 	b.w	8022da0 <iprintf>
      MOTION_EXT_Set_Notification_Status(1);
 800338a:	2001      	movs	r0, #1
 800338c:	f000 fb60 	bl	8003a50 <MOTION_EXT_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : MOTION EXT NOTIFICATION ENABLED\n");
 8003390:	482d      	ldr	r0, [pc, #180]	; (8003448 <MOTENV_STM_App_Notification+0x3f8>)
 8003392:	f01f fd8b 	bl	8022eac <puts>
}
 8003396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 800339a:	480f      	ldr	r0, [pc, #60]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 800339c:	f01f bd00 	b.w	8022da0 <iprintf>
      ENV_Update();
 80033a0:	f7ff fcc0 	bl	8002d24 <ENV_Update>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : ENV READ\n");
 80033a4:	4829      	ldr	r0, [pc, #164]	; (800344c <MOTENV_STM_App_Notification+0x3fc>)
 80033a6:	f01f fd81 	bl	8022eac <puts>
}
 80033aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      APP_DBG_MSG(" \n\r");
 80033ae:	480a      	ldr	r0, [pc, #40]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 80033b0:	f01f bcf6 	b.w	8022da0 <iprintf>
      ENV_Set_Notification_Status(0);
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7ff fcaf 	bl	8002d18 <ENV_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : ENV NOTIFICATION DISABLED\n");
 80033ba:	4825      	ldr	r0, [pc, #148]	; (8003450 <MOTENV_STM_App_Notification+0x400>)
 80033bc:	f01f fd76 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 80033c0:	4805      	ldr	r0, [pc, #20]	; (80033d8 <MOTENV_STM_App_Notification+0x388>)
 80033c2:	f01f fced 	bl	8022da0 <iprintf>
      HW_TS_Stop(MOTENV_Server_App_Context.Env_Update_Timer_Id);
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <MOTENV_STM_App_Notification+0x3a8>)
}
 80033c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.Env_Update_Timer_Id);
 80033cc:	7858      	ldrb	r0, [r3, #1]
 80033ce:	f7fe b971 	b.w	80016b4 <HW_TS_Stop>
 80033d2:	bf00      	nop
 80033d4:	08024cdc 	.word	0x08024cdc
 80033d8:	080244dc 	.word	0x080244dc
 80033dc:	08024974 	.word	0x08024974
 80033e0:	08024c98 	.word	0x08024c98
 80033e4:	08024930 	.word	0x08024930
 80033e8:	08024e54 	.word	0x08024e54
 80033ec:	08024c58 	.word	0x08024c58
 80033f0:	080248f0 	.word	0x080248f0
 80033f4:	08024c10 	.word	0x08024c10
 80033f8:	2000051c 	.word	0x2000051c
 80033fc:	080248ac 	.word	0x080248ac
 8003400:	08024e24 	.word	0x08024e24
 8003404:	08024bcc 	.word	0x08024bcc
 8003408:	0802486c 	.word	0x0802486c
 800340c:	08024df0 	.word	0x08024df0
 8003410:	08024b88 	.word	0x08024b88
 8003414:	08024828 	.word	0x08024828
 8003418:	08024db8 	.word	0x08024db8
 800341c:	08024b40 	.word	0x08024b40
 8003420:	080247e0 	.word	0x080247e0
 8003424:	08024d84 	.word	0x08024d84
 8003428:	08024afc 	.word	0x08024afc
 800342c:	0802479c 	.word	0x0802479c
 8003430:	08024abc 	.word	0x08024abc
 8003434:	0802475c 	.word	0x0802475c
 8003438:	08024a7c 	.word	0x08024a7c
 800343c:	0802471c 	.word	0x0802471c
 8003440:	08024d50 	.word	0x08024d50
 8003444:	08024a38 	.word	0x08024a38
 8003448:	080246d8 	.word	0x080246d8
 800344c:	08024d24 	.word	0x08024d24
 8003450:	080249bc 	.word	0x080249bc
      ENV_Set_Notification_Status(1);
 8003454:	2001      	movs	r0, #1
 8003456:	f7ff fc5f 	bl	8002d18 <ENV_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : ENV NOTIFICATION ENABLED\n");
 800345a:	4817      	ldr	r0, [pc, #92]	; (80034b8 <MOTENV_STM_App_Notification+0x468>)
 800345c:	f01f fd26 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 8003460:	4816      	ldr	r0, [pc, #88]	; (80034bc <MOTENV_STM_App_Notification+0x46c>)
 8003462:	f01f fc9d 	bl	8022da0 <iprintf>
      HW_TS_Start(MOTENV_Server_App_Context.Env_Update_Timer_Id, ENVIRONMENT_UPDATE_PERIOD);
 8003466:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <MOTENV_STM_App_Notification+0x470>)
}
 8003468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Start(MOTENV_Server_App_Context.Env_Update_Timer_Id, ENVIRONMENT_UPDATE_PERIOD);
 800346c:	7858      	ldrb	r0, [r3, #1]
 800346e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003472:	f7fe b9a3 	b.w	80017bc <HW_TS_Start>
      MOTION_Set_Notification_Status(0);
 8003476:	2000      	movs	r0, #0
 8003478:	f000 ff9c 	bl	80043b4 <MOTION_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : MOTION NOTIFICATION DISABLED\n");
 800347c:	4811      	ldr	r0, [pc, #68]	; (80034c4 <MOTENV_STM_App_Notification+0x474>)
 800347e:	f01f fd15 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 8003482:	480e      	ldr	r0, [pc, #56]	; (80034bc <MOTENV_STM_App_Notification+0x46c>)
 8003484:	f01f fc8c 	bl	8022da0 <iprintf>
      HW_TS_Stop(MOTENV_Server_App_Context.AccGyroMag_Update_Timer_Id);
 8003488:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <MOTENV_STM_App_Notification+0x470>)
}
 800348a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.AccGyroMag_Update_Timer_Id);
 800348e:	7818      	ldrb	r0, [r3, #0]
 8003490:	f7fe b910 	b.w	80016b4 <HW_TS_Stop>
      MOTION_Set_Notification_Status(1);
 8003494:	2001      	movs	r0, #1
 8003496:	f000 ff8d 	bl	80043b4 <MOTION_Set_Notification_Status>
      APP_DBG_MSG("-- TEMPLATE APPLICATION SERVER : MOTION NOTIFICATION ENABLED\n");
 800349a:	480b      	ldr	r0, [pc, #44]	; (80034c8 <MOTENV_STM_App_Notification+0x478>)
 800349c:	f01f fd06 	bl	8022eac <puts>
      APP_DBG_MSG(" \n\r");
 80034a0:	4806      	ldr	r0, [pc, #24]	; (80034bc <MOTENV_STM_App_Notification+0x46c>)
 80034a2:	f01f fc7d 	bl	8022da0 <iprintf>
      HW_TS_Start(MOTENV_Server_App_Context.AccGyroMag_Update_Timer_Id, ACC_GYRO_MAG_UPDATE_PERIOD);
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <MOTENV_STM_App_Notification+0x470>)
}
 80034a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HW_TS_Start(MOTENV_Server_App_Context.AccGyroMag_Update_Timer_Id, ACC_GYRO_MAG_UPDATE_PERIOD);
 80034ac:	7818      	ldrb	r0, [r3, #0]
 80034ae:	2166      	movs	r1, #102	; 0x66
 80034b0:	f7fe b984 	b.w	80017bc <HW_TS_Start>
}
 80034b4:	bd10      	pop	{r4, pc}
 80034b6:	bf00      	nop
 80034b8:	0802465c 	.word	0x0802465c
 80034bc:	080244dc 	.word	0x080244dc
 80034c0:	2000051c 	.word	0x2000051c
 80034c4:	080249f8 	.word	0x080249f8
 80034c8:	08024698 	.word	0x08024698

080034cc <MOTENV_APP_HandleDisconnection>:
{
 80034cc:	b510      	push	{r4, lr}
  HW_TS_Stop(MOTENV_Server_App_Context.Env_Update_Timer_Id);
 80034ce:	4c1c      	ldr	r4, [pc, #112]	; (8003540 <MOTENV_APP_HandleDisconnection+0x74>)
  ENV_Set_Notification_Status(0);
 80034d0:	2000      	movs	r0, #0
 80034d2:	f7ff fc21 	bl	8002d18 <ENV_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.Env_Update_Timer_Id);
 80034d6:	7860      	ldrb	r0, [r4, #1]
 80034d8:	f7fe f8ec 	bl	80016b4 <HW_TS_Stop>
  MOTION_Set_Notification_Status(0);
 80034dc:	2000      	movs	r0, #0
 80034de:	f000 ff69 	bl	80043b4 <MOTION_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.AccGyroMag_Update_Timer_Id);
 80034e2:	7820      	ldrb	r0, [r4, #0]
 80034e4:	f7fe f8e6 	bl	80016b4 <HW_TS_Stop>
  MOTIONFX_Set_Quat_Notification_Status(0);
 80034e8:	2000      	movs	r0, #0
 80034ea:	f001 fc0d 	bl	8004d08 <MOTIONFX_Set_Quat_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.MotionFx_Update_Timer_Id);
 80034ee:	78a0      	ldrb	r0, [r4, #2]
 80034f0:	f7fe f8e0 	bl	80016b4 <HW_TS_Stop>
  MOTIONFX_Set_ECompass_Notification_Status(0);
 80034f4:	2000      	movs	r0, #0
 80034f6:	f001 fc0d 	bl	8004d14 <MOTIONFX_Set_ECompass_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.ECompass_Update_Timer_Id);
 80034fa:	78e0      	ldrb	r0, [r4, #3]
 80034fc:	f7fe f8da 	bl	80016b4 <HW_TS_Stop>
  MOTIONAR_Set_Notification_Status(0);
 8003500:	2000      	movs	r0, #0
 8003502:	f001 f89f 	bl	8004644 <MOTIONAR_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.ActivityRec_Update_Timer_Id);
 8003506:	7920      	ldrb	r0, [r4, #4]
 8003508:	f7fe f8d4 	bl	80016b4 <HW_TS_Stop>
  MOTIONCP_Set_Notification_Status(0);
 800350c:	2000      	movs	r0, #0
 800350e:	f001 f92d 	bl	800476c <MOTIONCP_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.CarryPosition_Update_Timer_Id);
 8003512:	7960      	ldrb	r0, [r4, #5]
 8003514:	f7fe f8ce 	bl	80016b4 <HW_TS_Stop>
  MOTIONGR_Set_Notification_Status(0);
 8003518:	2000      	movs	r0, #0
 800351a:	f001 fc25 	bl	8004d68 <MOTIONGR_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.GestureRec_Update_Timer_Id);
 800351e:	79a0      	ldrb	r0, [r4, #6]
 8003520:	f7fe f8c8 	bl	80016b4 <HW_TS_Stop>
  MOTIONPM_Set_Notification_Status(0);
 8003524:	2000      	movs	r0, #0
 8003526:	f001 fd1d 	bl	8004f64 <MOTIONPM_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.Pedometer_Update_Timer_Id);
 800352a:	79e0      	ldrb	r0, [r4, #7]
 800352c:	f7fe f8c2 	bl	80016b4 <HW_TS_Stop>
  MOTIONID_Set_Notification_Status(0);
 8003530:	2000      	movs	r0, #0
 8003532:	f001 fcab 	bl	8004e8c <MOTIONID_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.IntensityDet_Update_Timer_Id);
 8003536:	7a20      	ldrb	r0, [r4, #8]
}
 8003538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_TS_Stop(MOTENV_Server_App_Context.IntensityDet_Update_Timer_Id);
 800353c:	f7fe b8ba 	b.w	80016b4 <HW_TS_Stop>
 8003540:	2000051c 	.word	0x2000051c

08003544 <MOTENV_APP_Init>:
{
 8003544:	b510      	push	{r4, lr}
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8003546:	4c3d      	ldr	r4, [pc, #244]	; (800363c <MOTENV_APP_Init+0xf8>)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_ACC_GYRO_MAG_ID, UTIL_SEQ_RFU, MOTION_Send_Notification_Task);
 8003548:	4a3d      	ldr	r2, [pc, #244]	; (8003640 <MOTENV_APP_Init+0xfc>)
 800354a:	2100      	movs	r1, #0
 800354c:	2010      	movs	r0, #16
 800354e:	f00b ff39 	bl	800f3c4 <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8003552:	4b3c      	ldr	r3, [pc, #240]	; (8003644 <MOTENV_APP_Init+0x100>)
 8003554:	4621      	mov	r1, r4
 8003556:	2201      	movs	r2, #1
 8003558:	2000      	movs	r0, #0
 800355a:	f7fe f84d 	bl	80015f8 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_ENVIRONMENT_ID, UTIL_SEQ_RFU, ENV_Send_Notification_Task);
 800355e:	4a3a      	ldr	r2, [pc, #232]	; (8003648 <MOTENV_APP_Init+0x104>)
 8003560:	2100      	movs	r1, #0
 8003562:	2020      	movs	r0, #32
 8003564:	f00b ff2e 	bl	800f3c4 <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8003568:	4b38      	ldr	r3, [pc, #224]	; (800364c <MOTENV_APP_Init+0x108>)
 800356a:	1c61      	adds	r1, r4, #1
 800356c:	2201      	movs	r2, #1
 800356e:	2000      	movs	r0, #0
 8003570:	f7fe f842 	bl	80015f8 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_MOTIONFX_ID, UTIL_SEQ_RFU, MOTIONFX_Send_Quat_Notification_Task);
 8003574:	4a36      	ldr	r2, [pc, #216]	; (8003650 <MOTENV_APP_Init+0x10c>)
 8003576:	2100      	movs	r1, #0
 8003578:	2040      	movs	r0, #64	; 0x40
 800357a:	f00b ff23 	bl	800f3c4 <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 800357e:	4b35      	ldr	r3, [pc, #212]	; (8003654 <MOTENV_APP_Init+0x110>)
 8003580:	1ca1      	adds	r1, r4, #2
 8003582:	2201      	movs	r2, #1
 8003584:	2000      	movs	r0, #0
 8003586:	f7fe f837 	bl	80015f8 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_ECOMPASS_ID, UTIL_SEQ_RFU, MOTIONFX_Send_ECompass_Notification_Task);
 800358a:	4a33      	ldr	r2, [pc, #204]	; (8003658 <MOTENV_APP_Init+0x114>)
 800358c:	2100      	movs	r1, #0
 800358e:	2080      	movs	r0, #128	; 0x80
 8003590:	f00b ff18 	bl	800f3c4 <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8003594:	4b31      	ldr	r3, [pc, #196]	; (800365c <MOTENV_APP_Init+0x118>)
 8003596:	1ce1      	adds	r1, r4, #3
 8003598:	2201      	movs	r2, #1
 800359a:	2000      	movs	r0, #0
 800359c:	f7fe f82c 	bl	80015f8 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_ACTIVITY_REC_ID, UTIL_SEQ_RFU, MOTIONAR_Send_Notification_Task);
 80035a0:	4a2f      	ldr	r2, [pc, #188]	; (8003660 <MOTENV_APP_Init+0x11c>)
 80035a2:	2100      	movs	r1, #0
 80035a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035a8:	f00b ff0c 	bl	800f3c4 <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 80035ac:	4b2d      	ldr	r3, [pc, #180]	; (8003664 <MOTENV_APP_Init+0x120>)
 80035ae:	1d21      	adds	r1, r4, #4
 80035b0:	2201      	movs	r2, #1
 80035b2:	2000      	movs	r0, #0
 80035b4:	f7fe f820 	bl	80015f8 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_CARRY_POSITION_ID, UTIL_SEQ_RFU, MOTIONCP_Send_Notification_Task);
 80035b8:	4a2b      	ldr	r2, [pc, #172]	; (8003668 <MOTENV_APP_Init+0x124>)
 80035ba:	2100      	movs	r1, #0
 80035bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80035c0:	f00b ff00 	bl	800f3c4 <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 80035c4:	4b29      	ldr	r3, [pc, #164]	; (800366c <MOTENV_APP_Init+0x128>)
 80035c6:	1d61      	adds	r1, r4, #5
 80035c8:	2201      	movs	r2, #1
 80035ca:	2000      	movs	r0, #0
 80035cc:	f7fe f814 	bl	80015f8 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_GESTURE_REC_ID, UTIL_SEQ_RFU, MOTIONGR_Send_Notification_Task);
 80035d0:	4a27      	ldr	r2, [pc, #156]	; (8003670 <MOTENV_APP_Init+0x12c>)
 80035d2:	2100      	movs	r1, #0
 80035d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80035d8:	f00b fef4 	bl	800f3c4 <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 80035dc:	4b25      	ldr	r3, [pc, #148]	; (8003674 <MOTENV_APP_Init+0x130>)
 80035de:	1da1      	adds	r1, r4, #6
 80035e0:	2201      	movs	r2, #1
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fe f808 	bl	80015f8 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_PEDOMETER_ID, UTIL_SEQ_RFU, MOTIONPM_Send_Notification_Task);
 80035e8:	4a23      	ldr	r2, [pc, #140]	; (8003678 <MOTENV_APP_Init+0x134>)
 80035ea:	2100      	movs	r1, #0
 80035ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80035f0:	f00b fee8 	bl	800f3c4 <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 80035f4:	4b21      	ldr	r3, [pc, #132]	; (800367c <MOTENV_APP_Init+0x138>)
 80035f6:	1de1      	adds	r1, r4, #7
 80035f8:	2201      	movs	r2, #1
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7fd fffc 	bl	80015f8 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_INTENSITY_DET_ID, UTIL_SEQ_RFU, MOTIONID_Send_Notification_Task);
 8003600:	4a1f      	ldr	r2, [pc, #124]	; (8003680 <MOTENV_APP_Init+0x13c>)
 8003602:	2100      	movs	r1, #0
 8003604:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003608:	f00b fedc 	bl	800f3c4 <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 800360c:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <MOTENV_APP_Init+0x140>)
 800360e:	f104 0108 	add.w	r1, r4, #8
 8003612:	2201      	movs	r2, #1
 8003614:	2000      	movs	r0, #0
 8003616:	f7fd ffef 	bl	80015f8 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HANDLE_MEMS_IT_ID, UTIL_SEQ_RFU, MOTION_EXT_Handle_IT);
 800361a:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <MOTENV_APP_Init+0x144>)
 800361c:	2100      	movs	r1, #0
 800361e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003622:	f00b fecf 	bl	800f3c4 <UTIL_SEQ_RegTask>
{
//  /* Init ENV context */
//  ENV_Context_Init();
//
  /* Init MOTION Context */
  MOTION_Context_Init();
 8003626:	f000 fe73 	bl	8004310 <MOTION_Context_Init>

  /* Init MOTION Context */
  MOTION_EXT_Context_Init();
 800362a:	f000 f9d3 	bl	80039d4 <MOTION_EXT_Context_Init>

  /* Init MOTIONFX Context */
  MOTIONFX_Context_Init();
 800362e:	f001 fb17 	bl	8004c60 <MOTIONFX_Context_Init>
}
 8003632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//
//  /* Init MOTIONID Context */
//  MOTIONID_Context_Init();
//
  /* Init CONFIG Context */
  CONFIG_Context_Init();
 8003636:	f7ff b8d3 	b.w	80027e0 <CONFIG_Context_Init>
 800363a:	bf00      	nop
 800363c:	2000051c 	.word	0x2000051c
 8003640:	080043c1 	.word	0x080043c1
 8003644:	08003049 	.word	0x08003049
 8003648:	08002f9d 	.word	0x08002f9d
 800364c:	08003041 	.word	0x08003041
 8003650:	08004d21 	.word	0x08004d21
 8003654:	08003039 	.word	0x08003039
 8003658:	08004d25 	.word	0x08004d25
 800365c:	08003031 	.word	0x08003031
 8003660:	08004665 	.word	0x08004665
 8003664:	08003025 	.word	0x08003025
 8003668:	0800478d 	.word	0x0800478d
 800366c:	08003019 	.word	0x08003019
 8003670:	08004d89 	.word	0x08004d89
 8003674:	0800300d 	.word	0x0800300d
 8003678:	08004f85 	.word	0x08004f85
 800367c:	08003001 	.word	0x08003001
 8003680:	08004ead 	.word	0x08004ead
 8003684:	08002ff5 	.word	0x08002ff5
 8003688:	08003df9 	.word	0x08003df9

0800368c <DisableExtFeatures>:
 * @brief  Disable all Extended Features
 * @param  None
 * @retval None
 */
static void DisableExtFeatures(void)
{
 800368c:	b538      	push	{r3, r4, r5, lr}
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 800368e:	4c69      	ldr	r4, [pc, #420]	; (8003834 <DisableExtFeatures+0x1a8>)
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	07d8      	lsls	r0, r3, #31
 8003694:	d40f      	bmi.n	80036b6 <DisableExtFeatures+0x2a>
  {
    Disable_Pedometer();
  }

  if(EXT_CHECK_HW_FEATURE(EXT_HWF_FREE_FALL))
 8003696:	0799      	lsls	r1, r3, #30
 8003698:	4d67      	ldr	r5, [pc, #412]	; (8003838 <DisableExtFeatures+0x1ac>)
 800369a:	d421      	bmi.n	80036e0 <DisableExtFeatures+0x54>
  {
    Disable_FreeFall();
  }

  if(EXT_CHECK_HW_FEATURE(EXT_HWF_DOUBLE_TAP))
 800369c:	075a      	lsls	r2, r3, #29
 800369e:	d432      	bmi.n	8003706 <DisableExtFeatures+0x7a>
  {
    Disable_DoubleTap();
  }

  if(EXT_CHECK_HW_FEATURE(EXT_HWF_SINGLE_TAP))
 80036a0:	0718      	lsls	r0, r3, #28
 80036a2:	d443      	bmi.n	800372c <DisableExtFeatures+0xa0>
  {
    Disable_SingleTap();
  }

  if(EXT_CHECK_HW_FEATURE(EXT_HWF_WAKE_UP))
 80036a4:	06d9      	lsls	r1, r3, #27
 80036a6:	d454      	bmi.n	8003752 <DisableExtFeatures+0xc6>
  {
    Disable_WakeUp();
  }

  if(EXT_CHECK_HW_FEATURE(EXT_HWF_TILT))
 80036a8:	069a      	lsls	r2, r3, #26
 80036aa:	d465      	bmi.n	8003778 <DisableExtFeatures+0xec>
  {
    Disable_Tilt();
  }

  if(EXT_CHECK_HW_FEATURE(EXT_HWF_6D_ORIENTATION))
 80036ac:	065b      	lsls	r3, r3, #25
 80036ae:	d476      	bmi.n	800379e <DisableExtFeatures+0x112>
  {
    Disable_6D_Orientation();
  }

  MOTION_EXT_Server_App_Context.MultiEventEnabled = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	706b      	strb	r3, [r5, #1]
}
 80036b4:	bd38      	pop	{r3, r4, r5, pc}
  if (IKS01A3_MOTION_SENSOR_Disable_Pedometer(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 80036b6:	2000      	movs	r0, #0
 80036b8:	f007 f892 	bl	800a7e0 <IKS01A3_MOTION_SENSOR_Disable_Pedometer>
 80036bc:	2800      	cmp	r0, #0
 80036be:	f040 808c 	bne.w	80037da <DisableExtFeatures+0x14e>
    EXT_OFF_HW_FEATURE(EXT_HWF_PEDOMETER);
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 80036ca:	4d5b      	ldr	r5, [pc, #364]	; (8003838 <DisableExtFeatures+0x1ac>)
 80036cc:	2102      	movs	r1, #2
 80036ce:	686a      	ldr	r2, [r5, #4]
 80036d0:	2000      	movs	r0, #0
 80036d2:	f006 ffd7 	bl	800a684 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d17b      	bne.n	80037d2 <DisableExtFeatures+0x146>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_FREE_FALL))
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	0799      	lsls	r1, r3, #30
 80036de:	d5dd      	bpl.n	800369c <DisableExtFeatures+0x10>
  if (IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 80036e0:	2000      	movs	r0, #0
 80036e2:	f007 f84d 	bl	800a780 <IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection>
 80036e6:	2800      	cmp	r0, #0
 80036e8:	d17f      	bne.n	80037ea <DisableExtFeatures+0x15e>
    EXT_OFF_HW_FEATURE(EXT_HWF_FREE_FALL);
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	f023 0302 	bic.w	r3, r3, #2
 80036f0:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 80036f2:	686a      	ldr	r2, [r5, #4]
 80036f4:	2102      	movs	r1, #2
 80036f6:	2000      	movs	r0, #0
 80036f8:	f006 ffc4 	bl	800a684 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d170      	bne.n	80037e2 <DisableExtFeatures+0x156>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_DOUBLE_TAP))
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	075a      	lsls	r2, r3, #29
 8003704:	d5cc      	bpl.n	80036a0 <DisableExtFeatures+0x14>
  if (IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003706:	2000      	movs	r0, #0
 8003708:	f007 f91e 	bl	800a948 <IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection>
 800370c:	2800      	cmp	r0, #0
 800370e:	d174      	bne.n	80037fa <DisableExtFeatures+0x16e>
    EXT_OFF_HW_FEATURE(EXT_HWF_DOUBLE_TAP);
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	f023 0304 	bic.w	r3, r3, #4
 8003716:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8003718:	686a      	ldr	r2, [r5, #4]
 800371a:	2102      	movs	r1, #2
 800371c:	2000      	movs	r0, #0
 800371e:	f006 ffb1 	bl	800a684 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8003722:	2800      	cmp	r0, #0
 8003724:	d165      	bne.n	80037f2 <DisableExtFeatures+0x166>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_SINGLE_TAP))
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	0718      	lsls	r0, r3, #28
 800372a:	d5bb      	bpl.n	80036a4 <DisableExtFeatures+0x18>
  if (IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 800372c:	2000      	movs	r0, #0
 800372e:	f007 f8eb 	bl	800a908 <IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection>
 8003732:	2800      	cmp	r0, #0
 8003734:	d169      	bne.n	800380a <DisableExtFeatures+0x17e>
    EXT_OFF_HW_FEATURE(EXT_HWF_SINGLE_TAP);
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	f023 0308 	bic.w	r3, r3, #8
 800373c:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 800373e:	686a      	ldr	r2, [r5, #4]
 8003740:	2102      	movs	r1, #2
 8003742:	2000      	movs	r0, #0
 8003744:	f006 ff9e 	bl	800a684 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8003748:	2800      	cmp	r0, #0
 800374a:	d15a      	bne.n	8003802 <DisableExtFeatures+0x176>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_WAKE_UP))
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	06d9      	lsls	r1, r3, #27
 8003750:	d5aa      	bpl.n	80036a8 <DisableExtFeatures+0x1c>
  if (IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003752:	2000      	movs	r0, #0
 8003754:	f007 f8ae 	bl	800a8b4 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection>
 8003758:	2800      	cmp	r0, #0
 800375a:	d15e      	bne.n	800381a <DisableExtFeatures+0x18e>
    EXT_OFF_HW_FEATURE(EXT_HWF_WAKE_UP);
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	f023 0310 	bic.w	r3, r3, #16
 8003762:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8003764:	686a      	ldr	r2, [r5, #4]
 8003766:	2102      	movs	r1, #2
 8003768:	2000      	movs	r0, #0
 800376a:	f006 ff8b 	bl	800a684 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 800376e:	2800      	cmp	r0, #0
 8003770:	d14f      	bne.n	8003812 <DisableExtFeatures+0x186>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_TILT))
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	069a      	lsls	r2, r3, #26
 8003776:	d599      	bpl.n	80036ac <DisableExtFeatures+0x20>
  if (IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003778:	2000      	movs	r0, #0
 800377a:	f007 f871 	bl	800a860 <IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection>
 800377e:	2800      	cmp	r0, #0
 8003780:	d153      	bne.n	800382a <DisableExtFeatures+0x19e>
    EXT_OFF_HW_FEATURE(EXT_HWF_TILT);
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	f023 0320 	bic.w	r3, r3, #32
 8003788:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 800378a:	686a      	ldr	r2, [r5, #4]
 800378c:	2102      	movs	r1, #2
 800378e:	2000      	movs	r0, #0
 8003790:	f006 ff78 	bl	800a684 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8003794:	2800      	cmp	r0, #0
 8003796:	d144      	bne.n	8003822 <DisableExtFeatures+0x196>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_6D_ORIENTATION))
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	065b      	lsls	r3, r3, #25
 800379c:	d588      	bpl.n	80036b0 <DisableExtFeatures+0x24>
  if (IKS01A3_MOTION_SENSOR_Disable_6D_Orientation(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 800379e:	2000      	movs	r0, #0
 80037a0:	f007 f90c 	bl	800a9bc <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation>
 80037a4:	b988      	cbnz	r0, 80037ca <DisableExtFeatures+0x13e>
    EXT_OFF_HW_FEATURE(EXT_HWF_6D_ORIENTATION);
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ac:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 80037ae:	686a      	ldr	r2, [r5, #4]
 80037b0:	2102      	movs	r1, #2
 80037b2:	2000      	movs	r0, #0
 80037b4:	f006 ff66 	bl	800a684 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 80037b8:	2800      	cmp	r0, #0
 80037ba:	f43f af79 	beq.w	80036b0 <DisableExtFeatures+0x24>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR SETTING DEFAULT ODR\n ");
 80037be:	481f      	ldr	r0, [pc, #124]	; (800383c <DisableExtFeatures+0x1b0>)
 80037c0:	f01f faee 	bl	8022da0 <iprintf>
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	706b      	strb	r3, [r5, #1]
}
 80037c8:	bd38      	pop	{r3, r4, r5, pc}
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING 6D ORIENTATION\n ");
 80037ca:	481d      	ldr	r0, [pc, #116]	; (8003840 <DisableExtFeatures+0x1b4>)
 80037cc:	f01f fae8 	bl	8022da0 <iprintf>
 80037d0:	e7ed      	b.n	80037ae <DisableExtFeatures+0x122>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR SETTING DEFAULT ODR\n ");
 80037d2:	481a      	ldr	r0, [pc, #104]	; (800383c <DisableExtFeatures+0x1b0>)
 80037d4:	f01f fae4 	bl	8022da0 <iprintf>
 80037d8:	e77f      	b.n	80036da <DisableExtFeatures+0x4e>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING PEDOMETER\n ");
 80037da:	481a      	ldr	r0, [pc, #104]	; (8003844 <DisableExtFeatures+0x1b8>)
 80037dc:	f01f fae0 	bl	8022da0 <iprintf>
 80037e0:	e773      	b.n	80036ca <DisableExtFeatures+0x3e>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR SETTING DEFAULT ODR\n ");
 80037e2:	4816      	ldr	r0, [pc, #88]	; (800383c <DisableExtFeatures+0x1b0>)
 80037e4:	f01f fadc 	bl	8022da0 <iprintf>
 80037e8:	e78a      	b.n	8003700 <DisableExtFeatures+0x74>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING FREE FALL\n ");
 80037ea:	4817      	ldr	r0, [pc, #92]	; (8003848 <DisableExtFeatures+0x1bc>)
 80037ec:	f01f fad8 	bl	8022da0 <iprintf>
 80037f0:	e77f      	b.n	80036f2 <DisableExtFeatures+0x66>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR SETTING DEFAULT ODR\n ");
 80037f2:	4812      	ldr	r0, [pc, #72]	; (800383c <DisableExtFeatures+0x1b0>)
 80037f4:	f01f fad4 	bl	8022da0 <iprintf>
 80037f8:	e795      	b.n	8003726 <DisableExtFeatures+0x9a>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING DOUBLE TAP\n ");
 80037fa:	4814      	ldr	r0, [pc, #80]	; (800384c <DisableExtFeatures+0x1c0>)
 80037fc:	f01f fad0 	bl	8022da0 <iprintf>
 8003800:	e78a      	b.n	8003718 <DisableExtFeatures+0x8c>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR SETTING DEFAULT ODR\n ");
 8003802:	480e      	ldr	r0, [pc, #56]	; (800383c <DisableExtFeatures+0x1b0>)
 8003804:	f01f facc 	bl	8022da0 <iprintf>
 8003808:	e7a0      	b.n	800374c <DisableExtFeatures+0xc0>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING SINGLE TAP\n ");
 800380a:	4811      	ldr	r0, [pc, #68]	; (8003850 <DisableExtFeatures+0x1c4>)
 800380c:	f01f fac8 	bl	8022da0 <iprintf>
 8003810:	e795      	b.n	800373e <DisableExtFeatures+0xb2>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR SETTING DEFAULT ODR\n ");
 8003812:	480a      	ldr	r0, [pc, #40]	; (800383c <DisableExtFeatures+0x1b0>)
 8003814:	f01f fac4 	bl	8022da0 <iprintf>
 8003818:	e7ab      	b.n	8003772 <DisableExtFeatures+0xe6>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING WAKE UP\n ");
 800381a:	480e      	ldr	r0, [pc, #56]	; (8003854 <DisableExtFeatures+0x1c8>)
 800381c:	f01f fac0 	bl	8022da0 <iprintf>
 8003820:	e7a0      	b.n	8003764 <DisableExtFeatures+0xd8>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR SETTING DEFAULT ODR\n ");
 8003822:	4806      	ldr	r0, [pc, #24]	; (800383c <DisableExtFeatures+0x1b0>)
 8003824:	f01f fabc 	bl	8022da0 <iprintf>
 8003828:	e7b6      	b.n	8003798 <DisableExtFeatures+0x10c>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING TILT\n ");
 800382a:	480b      	ldr	r0, [pc, #44]	; (8003858 <DisableExtFeatures+0x1cc>)
 800382c:	f01f fab8 	bl	8022da0 <iprintf>
 8003830:	e7ab      	b.n	800378a <DisableExtFeatures+0xfe>
 8003832:	bf00      	nop
 8003834:	20001394 	.word	0x20001394
 8003838:	20000528 	.word	0x20000528
 800383c:	08024ed4 	.word	0x08024ed4
 8003840:	08025050 	.word	0x08025050
 8003844:	08024e94 	.word	0x08024e94
 8003848:	08024f14 	.word	0x08024f14
 800384c:	08024f54 	.word	0x08024f54
 8003850:	08024f94 	.word	0x08024f94
 8003854:	08024fd4 	.word	0x08024fd4
 8003858:	08025014 	.word	0x08025014

0800385c <Enable_MultiEvent>:
{
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	b082      	sub	sp, #8
  DisableExtFeatures();
 8003860:	f7ff ff14 	bl	800368c <DisableExtFeatures>
  if (IKS01A3_MOTION_SENSOR_Enable_Pedometer(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003864:	2000      	movs	r0, #0
 8003866:	f006 ffab 	bl	800a7c0 <IKS01A3_MOTION_SENSOR_Enable_Pedometer>
 800386a:	2800      	cmp	r0, #0
 800386c:	d176      	bne.n	800395c <Enable_MultiEvent+0x100>
    EXT_ON_HW_FEATURE(EXT_HWF_PEDOMETER);
 800386e:	4c4c      	ldr	r4, [pc, #304]	; (80039a0 <Enable_MultiEvent+0x144>)
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	6023      	str	r3, [r4, #0]
  IKS01A3_MOTION_SENSOR_Reset_Step_Counter(IKS01A3_LSM6DSO_0);
 8003878:	2000      	movs	r0, #0
 800387a:	f006 ffc1 	bl	800a800 <IKS01A3_MOTION_SENSOR_Reset_Step_Counter>
  if (IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 800387e:	2100      	movs	r1, #0
 8003880:	4608      	mov	r0, r1
 8003882:	f006 ffdd 	bl	800a840 <IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection>
 8003886:	2800      	cmp	r0, #0
 8003888:	f040 8085 	bne.w	8003996 <Enable_MultiEvent+0x13a>
    EXT_ON_HW_FEATURE(EXT_HWF_TILT);
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	f043 0320 	orr.w	r3, r3, #32
 8003892:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8003894:	2100      	movs	r1, #0
 8003896:	4608      	mov	r0, r1
 8003898:	f006 ff62 	bl	800a760 <IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection>
 800389c:	2800      	cmp	r0, #0
 800389e:	d176      	bne.n	800398e <Enable_MultiEvent+0x132>
    EXT_ON_HW_FEATURE(EXT_HWF_FREE_FALL);
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	f043 0302 	orr.w	r3, r3, #2
 80038a6:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold(IKS01A3_LSM6DSO_0, LSM6DSO_FF_TSH_250mg) != BSP_ERROR_NONE)
 80038a8:	2102      	movs	r1, #2
 80038aa:	2000      	movs	r0, #0
 80038ac:	f006 ff78 	bl	800a7a0 <IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold>
 80038b0:	2800      	cmp	r0, #0
 80038b2:	d168      	bne.n	8003986 <Enable_MultiEvent+0x12a>
  if (IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 80038b4:	2100      	movs	r1, #0
 80038b6:	4608      	mov	r0, r1
 80038b8:	f007 f816 	bl	800a8e8 <IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection>
 80038bc:	2800      	cmp	r0, #0
 80038be:	d15e      	bne.n	800397e <Enable_MultiEvent+0x122>
    EXT_ON_HW_FEATURE(EXT_HWF_SINGLE_TAP);
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	f043 0308 	orr.w	r3, r3, #8
 80038c6:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 80038c8:	2100      	movs	r1, #0
 80038ca:	4608      	mov	r0, r1
 80038cc:	f007 f82c 	bl	800a928 <IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection>
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d150      	bne.n	8003976 <Enable_MultiEvent+0x11a>
    EXT_ON_HW_FEATURE(EXT_HWF_DOUBLE_TAP);
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	f043 0304 	orr.w	r3, r3, #4
 80038da:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_Set_Tap_Threshold(IKS01A3_LSM6DSO_0, 0x10/*LSM6DSL_TAP_THRESHOLD_MID*/) != BSP_ERROR_NONE)
 80038dc:	2110      	movs	r1, #16
 80038de:	2000      	movs	r0, #0
 80038e0:	f007 f842 	bl	800a968 <IKS01A3_MOTION_SENSOR_Set_Tap_Threshold>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d142      	bne.n	800396e <Enable_MultiEvent+0x112>
  if (IKS01A3_MOTION_SENSOR_Enable_6D_Orientation(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 80038e8:	2100      	movs	r1, #0
 80038ea:	4608      	mov	r0, r1
 80038ec:	f007 f84c 	bl	800a988 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	d138      	bne.n	8003966 <Enable_MultiEvent+0x10a>
    EXT_ON_HW_FEATURE(EXT_HWF_6D_ORIENTATION);
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038fa:	6023      	str	r3, [r4, #0]
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 1;
 80038fc:	4e29      	ldr	r6, [pc, #164]	; (80039a4 <Enable_MultiEvent+0x148>)
  MOTION_EXT_Server_App_Context.PedometerStepCount = 0;
 80038fe:	2500      	movs	r5, #0
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 1;
 8003900:	2301      	movs	r3, #1
 8003902:	7073      	strb	r3, [r6, #1]
  MOTION_EXT_Server_App_Context.PedometerStepCount = 0;
 8003904:	8075      	strh	r5, [r6, #2]
  case 2:
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
    STORE_LE_16(valueSmall+2, Command);
    break;
  case 3:
    STORE_LE_16(valueLarge, (HAL_GetTick()>>3));
 8003906:	f007 f989 	bl	800ac1c <HAL_GetTick>
 800390a:	08c0      	lsrs	r0, r0, #3
 800390c:	f88d 0000 	strb.w	r0, [sp]
 8003910:	f007 f984 	bl	800ac1c <HAL_GetTick>
    valueLarge[2] = 0;
    STORE_LE_16(valueLarge+3, Command);
    break;
  }

  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003914:	7833      	ldrb	r3, [r6, #0]
    valueLarge[2] = 0;
 8003916:	f88d 5002 	strb.w	r5, [sp, #2]
    STORE_LE_16(valueLarge, (HAL_GetTick()>>3));
 800391a:	0ac0      	lsrs	r0, r0, #11
 800391c:	f88d 0001 	strb.w	r0, [sp, #1]
    STORE_LE_16(valueLarge+3, Command);
 8003920:	f88d 5003 	strb.w	r5, [sp, #3]
 8003924:	f88d 5004 	strb.w	r5, [sp, #4]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003928:	b1a3      	cbz	r3, 8003954 <Enable_MultiEvent+0xf8>
  {
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : NOTIFY CLIENT WITH NEW MOTION PARAMETER VALUE \n ");
 800392a:	481f      	ldr	r0, [pc, #124]	; (80039a8 <Enable_MultiEvent+0x14c>)
 800392c:	f01f fa38 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 8003930:	481e      	ldr	r0, [pc, #120]	; (80039ac <Enable_MultiEvent+0x150>)
 8003932:	f01f fa35 	bl	8022da0 <iprintf>
    {
    case 2:
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
      break;
    case 3:
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_LARGE, (uint8_t *)&valueLarge);
 8003936:	466a      	mov	r2, sp
 8003938:	2105      	movs	r1, #5
 800393a:	2004      	movs	r0, #4
 800393c:	f00b f8e8 	bl	800eb10 <MOTENV_STM_App_Update_Char>
  EXT_ON_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8003940:	6823      	ldr	r3, [r4, #0]
  IKS01A3_MOTION_SENSOR_Reset_Step_Counter(IKS01A3_LSM6DSO_0);
 8003942:	2000      	movs	r0, #0
  EXT_ON_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8003944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003948:	6023      	str	r3, [r4, #0]
}
 800394a:	b002      	add	sp, #8
 800394c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IKS01A3_MOTION_SENSOR_Reset_Step_Counter(IKS01A3_LSM6DSO_0);
 8003950:	f006 bf56 	b.w	800a800 <IKS01A3_MOTION_SENSOR_Reset_Step_Counter>
    }
  }
  else
  {
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 8003954:	4816      	ldr	r0, [pc, #88]	; (80039b0 <Enable_MultiEvent+0x154>)
 8003956:	f01f fa23 	bl	8022da0 <iprintf>
 800395a:	e7f1      	b.n	8003940 <Enable_MultiEvent+0xe4>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR ENABLING PEDOMETER\n ");
 800395c:	4815      	ldr	r0, [pc, #84]	; (80039b4 <Enable_MultiEvent+0x158>)
 800395e:	4c10      	ldr	r4, [pc, #64]	; (80039a0 <Enable_MultiEvent+0x144>)
 8003960:	f01f fa1e 	bl	8022da0 <iprintf>
 8003964:	e788      	b.n	8003878 <Enable_MultiEvent+0x1c>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR ENABLING 6D ORIENTATION\n ");
 8003966:	4814      	ldr	r0, [pc, #80]	; (80039b8 <Enable_MultiEvent+0x15c>)
 8003968:	f01f fa1a 	bl	8022da0 <iprintf>
 800396c:	e7c6      	b.n	80038fc <Enable_MultiEvent+0xa0>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR SETTING TAP_TSH\n ");
 800396e:	4813      	ldr	r0, [pc, #76]	; (80039bc <Enable_MultiEvent+0x160>)
 8003970:	f01f fa16 	bl	8022da0 <iprintf>
 8003974:	e7b8      	b.n	80038e8 <Enable_MultiEvent+0x8c>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR ENABLING DOUBLE TAP\n ");
 8003976:	4812      	ldr	r0, [pc, #72]	; (80039c0 <Enable_MultiEvent+0x164>)
 8003978:	f01f fa12 	bl	8022da0 <iprintf>
 800397c:	e7ae      	b.n	80038dc <Enable_MultiEvent+0x80>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR ENABLING SINGLE TAP\n ");
 800397e:	4811      	ldr	r0, [pc, #68]	; (80039c4 <Enable_MultiEvent+0x168>)
 8003980:	f01f fa0e 	bl	8022da0 <iprintf>
 8003984:	e7a0      	b.n	80038c8 <Enable_MultiEvent+0x6c>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR SETTING FF_TSH\n ");
 8003986:	4810      	ldr	r0, [pc, #64]	; (80039c8 <Enable_MultiEvent+0x16c>)
 8003988:	f01f fa0a 	bl	8022da0 <iprintf>
 800398c:	e792      	b.n	80038b4 <Enable_MultiEvent+0x58>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR ENABLING FREE FALL\n ");
 800398e:	480f      	ldr	r0, [pc, #60]	; (80039cc <Enable_MultiEvent+0x170>)
 8003990:	f01f fa06 	bl	8022da0 <iprintf>
 8003994:	e788      	b.n	80038a8 <Enable_MultiEvent+0x4c>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR ENABLING TILT\n ");
 8003996:	480e      	ldr	r0, [pc, #56]	; (80039d0 <Enable_MultiEvent+0x174>)
 8003998:	f01f fa02 	bl	8022da0 <iprintf>
 800399c:	e77a      	b.n	8003894 <Enable_MultiEvent+0x38>
 800399e:	bf00      	nop
 80039a0:	20001394 	.word	0x20001394
 80039a4:	20000528 	.word	0x20000528
 80039a8:	0802528c 	.word	0x0802528c
 80039ac:	080244dc 	.word	0x080244dc
 80039b0:	080252e0 	.word	0x080252e0
 80039b4:	08025094 	.word	0x08025094
 80039b8:	08025248 	.word	0x08025248
 80039bc:	0802520c 	.word	0x0802520c
 80039c0:	080251cc 	.word	0x080251cc
 80039c4:	0802518c 	.word	0x0802518c
 80039c8:	08025150 	.word	0x08025150
 80039cc:	08025110 	.word	0x08025110
 80039d0:	080250d4 	.word	0x080250d4

080039d4 <MOTION_EXT_Context_Init>:
{
 80039d4:	b538      	push	{r3, r4, r5, lr}
  IKS01A3_MOTION_SENSOR_GetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &MOTION_EXT_Server_App_Context.defaultODR);
 80039d6:	4c19      	ldr	r4, [pc, #100]	; (8003a3c <MOTION_EXT_Context_Init+0x68>)
 80039d8:	2102      	movs	r1, #2
 80039da:	1d22      	adds	r2, r4, #4
 80039dc:	2000      	movs	r0, #0
 80039de:	f006 fe27 	bl	800a630 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
  MCR_BLUEMS_F2I_2D(MOTION_EXT_Server_App_Context.defaultODR, intPart, decPart);
 80039e2:	edd4 7a01 	vldr	s15, [r4, #4]
 80039e6:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003a40 <MOTION_EXT_Context_Init+0x6c>
  APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ODR=%d.%02d [Hz] \n ", (int)intPart, (int)decPart);
 80039ea:	4816      	ldr	r0, [pc, #88]	; (8003a44 <MOTION_EXT_Context_Init+0x70>)
  MCR_BLUEMS_F2I_2D(MOTION_EXT_Server_App_Context.defaultODR, intPart, decPart);
 80039ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  MOTION_EXT_Server_App_Context.defaultODR = intPart*100+decPart;
 80039f0:	2364      	movs	r3, #100	; 0x64
  MCR_BLUEMS_F2I_2D(MOTION_EXT_Server_App_Context.defaultODR, intPart, decPart);
 80039f2:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
  APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ODR=%d.%02d [Hz] \n ", (int)intPart, (int)decPart);
 80039f6:	ee17 1a10 	vmov	r1, s14
  MCR_BLUEMS_F2I_2D(MOTION_EXT_Server_App_Context.defaultODR, intPart, decPart);
 80039fa:	ee77 7ac6 	vsub.f32	s15, s15, s12
  MOTION_EXT_Server_App_Context.NotificationStatus = status;
 80039fe:	2500      	movs	r5, #0
  MCR_BLUEMS_F2I_2D(MOTION_EXT_Server_App_Context.defaultODR, intPart, decPart);
 8003a00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a08:	ee17 2a90 	vmov	r2, s15
  MOTION_EXT_Server_App_Context.defaultODR = intPart*100+decPart;
 8003a0c:	fb03 2301 	mla	r3, r3, r1, r2
 8003a10:	ee07 3a10 	vmov	s14, r3
 8003a14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003a18:	ed84 7a01 	vstr	s14, [r4, #4]
  APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ODR=%d.%02d [Hz] \n ", (int)intPart, (int)decPart);
 8003a1c:	f01f f9c0 	bl	8022da0 <iprintf>
  APP_DBG_MSG(" \n\r");
 8003a20:	4809      	ldr	r0, [pc, #36]	; (8003a48 <MOTION_EXT_Context_Init+0x74>)
 8003a22:	f01f f9bd 	bl	8022da0 <iprintf>
  MOTION_EXT_Server_App_Context.NotificationStatus = status;
 8003a26:	7025      	strb	r5, [r4, #0]
  DisableExtFeatures();
 8003a28:	f7ff fe30 	bl	800368c <DisableExtFeatures>
  EXT_OFF_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8003a2c:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <MOTION_EXT_Context_Init+0x78>)
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 0;
 8003a2e:	7065      	strb	r5, [r4, #1]
  EXT_OFF_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8003a30:	6813      	ldr	r3, [r2, #0]
 8003a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a36:	6013      	str	r3, [r2, #0]
}
 8003a38:	bd38      	pop	{r3, r4, r5, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000528 	.word	0x20000528
 8003a40:	42c80000 	.word	0x42c80000
 8003a44:	08025334 	.word	0x08025334
 8003a48:	080244dc 	.word	0x080244dc
 8003a4c:	20001394 	.word	0x20001394

08003a50 <MOTION_EXT_Set_Notification_Status>:
  MOTION_EXT_Server_App_Context.NotificationStatus = status;
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <MOTION_EXT_Set_Notification_Status+0x34>)
  if(status == 1)
 8003a52:	2801      	cmp	r0, #1
{
 8003a54:	b510      	push	{r4, lr}
 8003a56:	4604      	mov	r4, r0
  MOTION_EXT_Server_App_Context.NotificationStatus = status;
 8003a58:	7018      	strb	r0, [r3, #0]
  if(status == 1)
 8003a5a:	d009      	beq.n	8003a70 <MOTION_EXT_Set_Notification_Status+0x20>
  else if(status == 0)
 8003a5c:	b100      	cbz	r0, 8003a60 <MOTION_EXT_Set_Notification_Status+0x10>
}
 8003a5e:	bd10      	pop	{r4, pc}
  DisableExtFeatures();
 8003a60:	f7ff fe14 	bl	800368c <DisableExtFeatures>
  EXT_OFF_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8003a64:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <MOTION_EXT_Set_Notification_Status+0x38>)
 8003a66:	6813      	ldr	r3, [r2, #0]
 8003a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6c:	6013      	str	r3, [r2, #0]
}
 8003a6e:	bd10      	pop	{r4, pc}
    Enable_MultiEvent();
 8003a70:	f7ff fef4 	bl	800385c <Enable_MultiEvent>
    CONFIG_Send_Notification(FEATURE_MASK_ACC_EVENTS,'m',1);
 8003a74:	4622      	mov	r2, r4
 8003a76:	216d      	movs	r1, #109	; 0x6d
}
 8003a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CONFIG_Send_Notification(FEATURE_MASK_ACC_EVENTS,'m',1);
 8003a7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003a80:	f7fe bec6 	b.w	8002810 <CONFIG_Send_Notification>
 8003a84:	20000528 	.word	0x20000528
 8003a88:	20001394 	.word	0x20001394

08003a8c <MOTION_EXT_Enable_Feature>:
{
 8003a8c:	b510      	push	{r4, lr}
  if(MOTION_EXT_Server_App_Context.MultiEventEnabled == 1)
 8003a8e:	4b58      	ldr	r3, [pc, #352]	; (8003bf0 <MOTION_EXT_Enable_Feature+0x164>)
 8003a90:	785b      	ldrb	r3, [r3, #1]
 8003a92:	2b01      	cmp	r3, #1
{
 8003a94:	4604      	mov	r4, r0
  if(MOTION_EXT_Server_App_Context.MultiEventEnabled == 1)
 8003a96:	d02b      	beq.n	8003af0 <MOTION_EXT_Enable_Feature+0x64>
  switch(feature)
 8003a98:	2c20      	cmp	r4, #32
 8003a9a:	d821      	bhi.n	8003ae0 <MOTION_EXT_Enable_Feature+0x54>
 8003a9c:	b1fc      	cbz	r4, 8003ade <MOTION_EXT_Enable_Feature+0x52>
 8003a9e:	1e60      	subs	r0, r4, #1
 8003aa0:	281f      	cmp	r0, #31
 8003aa2:	d81c      	bhi.n	8003ade <MOTION_EXT_Enable_Feature+0x52>
 8003aa4:	e8df f000 	tbb	[pc, r0]
 8003aa8:	4c1b3627 	.word	0x4c1b3627
 8003aac:	621b1b1b 	.word	0x621b1b1b
 8003ab0:	1b1b1b1b 	.word	0x1b1b1b1b
 8003ab4:	6e1b1b1b 	.word	0x6e1b1b1b
 8003ab8:	1b1b1b1b 	.word	0x1b1b1b1b
 8003abc:	1b1b1b1b 	.word	0x1b1b1b1b
 8003ac0:	1b1b1b1b 	.word	0x1b1b1b1b
 8003ac4:	101b1b1b 	.word	0x101b1b1b
  if (IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4608      	mov	r0, r1
 8003acc:	f006 feb8 	bl	800a840 <IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d179      	bne.n	8003bc8 <MOTION_EXT_Enable_Feature+0x13c>
    EXT_ON_HW_FEATURE(EXT_HWF_TILT);
 8003ad4:	4a47      	ldr	r2, [pc, #284]	; (8003bf4 <MOTION_EXT_Enable_Feature+0x168>)
 8003ad6:	6813      	ldr	r3, [r2, #0]
 8003ad8:	f043 0320 	orr.w	r3, r3, #32
 8003adc:	6013      	str	r3, [r2, #0]
}
 8003ade:	bd10      	pop	{r4, pc}
  switch(feature)
 8003ae0:	2c40      	cmp	r4, #64	; 0x40
 8003ae2:	d05a      	beq.n	8003b9a <MOTION_EXT_Enable_Feature+0x10e>
 8003ae4:	2c80      	cmp	r4, #128	; 0x80
 8003ae6:	d1fa      	bne.n	8003ade <MOTION_EXT_Enable_Feature+0x52>
}
 8003ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Enable_MultiEvent();
 8003aec:	f7ff beb6 	b.w	800385c <Enable_MultiEvent>
    DisableExtFeatures();
 8003af0:	f7ff fdcc 	bl	800368c <DisableExtFeatures>
 8003af4:	e7d0      	b.n	8003a98 <MOTION_EXT_Enable_Feature+0xc>
  if (IKS01A3_MOTION_SENSOR_Enable_Pedometer(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003af6:	2000      	movs	r0, #0
 8003af8:	f006 fe62 	bl	800a7c0 <IKS01A3_MOTION_SENSOR_Enable_Pedometer>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	d15f      	bne.n	8003bc0 <MOTION_EXT_Enable_Feature+0x134>
    EXT_ON_HW_FEATURE(EXT_HWF_PEDOMETER);
 8003b00:	4a3c      	ldr	r2, [pc, #240]	; (8003bf4 <MOTION_EXT_Enable_Feature+0x168>)
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	6013      	str	r3, [r2, #0]
}
 8003b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IKS01A3_MOTION_SENSOR_Reset_Step_Counter(IKS01A3_LSM6DSO_0);
 8003b0e:	2000      	movs	r0, #0
 8003b10:	f006 be76 	b.w	800a800 <IKS01A3_MOTION_SENSOR_Reset_Step_Counter>
  if (IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8003b14:	2100      	movs	r1, #0
 8003b16:	4608      	mov	r0, r1
 8003b18:	f006 fe22 	bl	800a760 <IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection>
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d14b      	bne.n	8003bb8 <MOTION_EXT_Enable_Feature+0x12c>
    EXT_ON_HW_FEATURE(EXT_HWF_FREE_FALL);
 8003b20:	4a34      	ldr	r2, [pc, #208]	; (8003bf4 <MOTION_EXT_Enable_Feature+0x168>)
 8003b22:	6813      	ldr	r3, [r2, #0]
 8003b24:	f043 0302 	orr.w	r3, r3, #2
 8003b28:	6013      	str	r3, [r2, #0]
  if (IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold(IKS01A3_LSM6DSO_0, LSM6DSO_FF_TSH_250mg) != BSP_ERROR_NONE)
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f006 fe37 	bl	800a7a0 <IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d0d3      	beq.n	8003ade <MOTION_EXT_Enable_Feature+0x52>
}
 8003b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR SETTING FF_TSH\n ");
 8003b3a:	482f      	ldr	r0, [pc, #188]	; (8003bf8 <MOTION_EXT_Enable_Feature+0x16c>)
 8003b3c:	f01f b930 	b.w	8022da0 <iprintf>
  if (IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8003b40:	2100      	movs	r1, #0
 8003b42:	4608      	mov	r0, r1
 8003b44:	f006 fef0 	bl	800a928 <IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection>
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d131      	bne.n	8003bb0 <MOTION_EXT_Enable_Feature+0x124>
    EXT_ON_HW_FEATURE(EXT_HWF_DOUBLE_TAP);
 8003b4c:	4a29      	ldr	r2, [pc, #164]	; (8003bf4 <MOTION_EXT_Enable_Feature+0x168>)
 8003b4e:	6813      	ldr	r3, [r2, #0]
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	6013      	str	r3, [r2, #0]
  if (IKS01A3_MOTION_SENSOR_Set_Tap_Threshold(IKS01A3_LSM6DSO_0, 0x10/*LSM6DSL_TAP_THRESHOLD_MID*/) != BSP_ERROR_NONE)
 8003b56:	2110      	movs	r1, #16
 8003b58:	2000      	movs	r0, #0
 8003b5a:	f006 ff05 	bl	800a968 <IKS01A3_MOTION_SENSOR_Set_Tap_Threshold>
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d0bd      	beq.n	8003ade <MOTION_EXT_Enable_Feature+0x52>
}
 8003b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR SETTING TAP_TSH\n ");
 8003b66:	4825      	ldr	r0, [pc, #148]	; (8003bfc <MOTION_EXT_Enable_Feature+0x170>)
 8003b68:	f01f b91a 	b.w	8022da0 <iprintf>
  if (IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4608      	mov	r0, r1
 8003b70:	f006 feba 	bl	800a8e8 <IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d136      	bne.n	8003be6 <MOTION_EXT_Enable_Feature+0x15a>
    EXT_ON_HW_FEATURE(EXT_HWF_SINGLE_TAP);
 8003b78:	4a1e      	ldr	r2, [pc, #120]	; (8003bf4 <MOTION_EXT_Enable_Feature+0x168>)
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	f043 0308 	orr.w	r3, r3, #8
 8003b80:	6013      	str	r3, [r2, #0]
}
 8003b82:	bd10      	pop	{r4, pc}
  if (IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8003b84:	2100      	movs	r1, #0
 8003b86:	4608      	mov	r0, r1
 8003b88:	f006 fe7a 	bl	800a880 <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection>
 8003b8c:	bb30      	cbnz	r0, 8003bdc <MOTION_EXT_Enable_Feature+0x150>
    EXT_ON_HW_FEATURE(EXT_HWF_WAKE_UP);
 8003b8e:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <MOTION_EXT_Enable_Feature+0x168>)
 8003b90:	6813      	ldr	r3, [r2, #0]
 8003b92:	f043 0310 	orr.w	r3, r3, #16
 8003b96:	6013      	str	r3, [r2, #0]
}
 8003b98:	bd10      	pop	{r4, pc}
  if (IKS01A3_MOTION_SENSOR_Enable_6D_Orientation(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	f006 fef3 	bl	800a988 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation>
 8003ba2:	b9b0      	cbnz	r0, 8003bd2 <MOTION_EXT_Enable_Feature+0x146>
    EXT_ON_HW_FEATURE(EXT_HWF_6D_ORIENTATION);
 8003ba4:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <MOTION_EXT_Enable_Feature+0x168>)
 8003ba6:	6813      	ldr	r3, [r2, #0]
 8003ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bac:	6013      	str	r3, [r2, #0]
}
 8003bae:	bd10      	pop	{r4, pc}
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR ENABLING DOUBLE TAP\n ");
 8003bb0:	4813      	ldr	r0, [pc, #76]	; (8003c00 <MOTION_EXT_Enable_Feature+0x174>)
 8003bb2:	f01f f8f5 	bl	8022da0 <iprintf>
 8003bb6:	e7ce      	b.n	8003b56 <MOTION_EXT_Enable_Feature+0xca>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR ENABLING FREE FALL\n ");
 8003bb8:	4812      	ldr	r0, [pc, #72]	; (8003c04 <MOTION_EXT_Enable_Feature+0x178>)
 8003bba:	f01f f8f1 	bl	8022da0 <iprintf>
 8003bbe:	e7b4      	b.n	8003b2a <MOTION_EXT_Enable_Feature+0x9e>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR ENABLING PEDOMETER\n ");
 8003bc0:	4811      	ldr	r0, [pc, #68]	; (8003c08 <MOTION_EXT_Enable_Feature+0x17c>)
 8003bc2:	f01f f8ed 	bl	8022da0 <iprintf>
 8003bc6:	e7a0      	b.n	8003b0a <MOTION_EXT_Enable_Feature+0x7e>
}
 8003bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR ENABLING TILT\n ");
 8003bcc:	480f      	ldr	r0, [pc, #60]	; (8003c0c <MOTION_EXT_Enable_Feature+0x180>)
 8003bce:	f01f b8e7 	b.w	8022da0 <iprintf>
}
 8003bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR ENABLING 6D ORIENTATION\n ");
 8003bd6:	480e      	ldr	r0, [pc, #56]	; (8003c10 <MOTION_EXT_Enable_Feature+0x184>)
 8003bd8:	f01f b8e2 	b.w	8022da0 <iprintf>
}
 8003bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR ENABLING WAKE UP\n ");
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <MOTION_EXT_Enable_Feature+0x188>)
 8003be2:	f01f b8dd 	b.w	8022da0 <iprintf>
}
 8003be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR ENABLING SINGLE TAP\n ");
 8003bea:	480b      	ldr	r0, [pc, #44]	; (8003c18 <MOTION_EXT_Enable_Feature+0x18c>)
 8003bec:	f01f b8d8 	b.w	8022da0 <iprintf>
 8003bf0:	20000528 	.word	0x20000528
 8003bf4:	20001394 	.word	0x20001394
 8003bf8:	08025150 	.word	0x08025150
 8003bfc:	0802520c 	.word	0x0802520c
 8003c00:	080251cc 	.word	0x080251cc
 8003c04:	08025110 	.word	0x08025110
 8003c08:	08025094 	.word	0x08025094
 8003c0c:	080250d4 	.word	0x080250d4
 8003c10:	08025248 	.word	0x08025248
 8003c14:	0802536c 	.word	0x0802536c
 8003c18:	0802518c 	.word	0x0802518c

08003c1c <MOTION_EXT_Disable_Feature>:
  switch(feature)
 8003c1c:	2820      	cmp	r0, #32
{
 8003c1e:	b508      	push	{r3, lr}
  switch(feature)
 8003c20:	d815      	bhi.n	8003c4e <MOTION_EXT_Disable_Feature+0x32>
 8003c22:	b1f8      	cbz	r0, 8003c64 <MOTION_EXT_Disable_Feature+0x48>
 8003c24:	3801      	subs	r0, #1
 8003c26:	281f      	cmp	r0, #31
 8003c28:	d81c      	bhi.n	8003c64 <MOTION_EXT_Disable_Feature+0x48>
 8003c2a:	e8df f000 	tbb	[pc, r0]
 8003c2e:	3e33      	.short	0x3e33
 8003c30:	1b1b491b 	.word	0x1b1b491b
 8003c34:	1b1b541b 	.word	0x1b1b541b
 8003c38:	1b1b1b1b 	.word	0x1b1b1b1b
 8003c3c:	1b1b5e1b 	.word	0x1b1b5e1b
 8003c40:	1b1b1b1b 	.word	0x1b1b1b1b
 8003c44:	1b1b1b1b 	.word	0x1b1b1b1b
 8003c48:	1b1b1b1b 	.word	0x1b1b1b1b
 8003c4c:	1c1b      	.short	0x1c1b
 8003c4e:	2840      	cmp	r0, #64	; 0x40
 8003c50:	d055      	beq.n	8003cfe <MOTION_EXT_Disable_Feature+0xe2>
 8003c52:	2880      	cmp	r0, #128	; 0x80
 8003c54:	d106      	bne.n	8003c64 <MOTION_EXT_Disable_Feature+0x48>
  DisableExtFeatures();
 8003c56:	f7ff fd19 	bl	800368c <DisableExtFeatures>
  EXT_OFF_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8003c5a:	4a3c      	ldr	r2, [pc, #240]	; (8003d4c <MOTION_EXT_Disable_Feature+0x130>)
 8003c5c:	6813      	ldr	r3, [r2, #0]
 8003c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c62:	6013      	str	r3, [r2, #0]
}
 8003c64:	bd08      	pop	{r3, pc}
  if (IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003c66:	2000      	movs	r0, #0
 8003c68:	f006 fdfa 	bl	800a860 <IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d150      	bne.n	8003d12 <MOTION_EXT_Disable_Feature+0xf6>
    EXT_OFF_HW_FEATURE(EXT_HWF_TILT);
 8003c70:	4a36      	ldr	r2, [pc, #216]	; (8003d4c <MOTION_EXT_Disable_Feature+0x130>)
 8003c72:	6813      	ldr	r3, [r2, #0]
 8003c74:	f023 0320 	bic.w	r3, r3, #32
 8003c78:	6013      	str	r3, [r2, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8003c7a:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <MOTION_EXT_Disable_Feature+0x134>)
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	2000      	movs	r0, #0
 8003c82:	f006 fcff 	bl	800a684 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d0ec      	beq.n	8003c64 <MOTION_EXT_Disable_Feature+0x48>
}
 8003c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR SETTING DEFAULT ODR\n ");
 8003c8e:	4831      	ldr	r0, [pc, #196]	; (8003d54 <MOTION_EXT_Disable_Feature+0x138>)
 8003c90:	f01f b886 	b.w	8022da0 <iprintf>
  if (IKS01A3_MOTION_SENSOR_Disable_Pedometer(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003c94:	2000      	movs	r0, #0
 8003c96:	f006 fda3 	bl	800a7e0 <IKS01A3_MOTION_SENSOR_Disable_Pedometer>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d151      	bne.n	8003d42 <MOTION_EXT_Disable_Feature+0x126>
    EXT_OFF_HW_FEATURE(EXT_HWF_PEDOMETER);
 8003c9e:	4a2b      	ldr	r2, [pc, #172]	; (8003d4c <MOTION_EXT_Disable_Feature+0x130>)
 8003ca0:	6813      	ldr	r3, [r2, #0]
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	e7e7      	b.n	8003c7a <MOTION_EXT_Disable_Feature+0x5e>
  if (IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003caa:	2000      	movs	r0, #0
 8003cac:	f006 fd68 	bl	800a780 <IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	d142      	bne.n	8003d3a <MOTION_EXT_Disable_Feature+0x11e>
    EXT_OFF_HW_FEATURE(EXT_HWF_FREE_FALL);
 8003cb4:	4a25      	ldr	r2, [pc, #148]	; (8003d4c <MOTION_EXT_Disable_Feature+0x130>)
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	f023 0302 	bic.w	r3, r3, #2
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e7dc      	b.n	8003c7a <MOTION_EXT_Disable_Feature+0x5e>
  if (IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	f006 fe41 	bl	800a948 <IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d133      	bne.n	8003d32 <MOTION_EXT_Disable_Feature+0x116>
    EXT_OFF_HW_FEATURE(EXT_HWF_DOUBLE_TAP);
 8003cca:	4a20      	ldr	r2, [pc, #128]	; (8003d4c <MOTION_EXT_Disable_Feature+0x130>)
 8003ccc:	6813      	ldr	r3, [r2, #0]
 8003cce:	f023 0304 	bic.w	r3, r3, #4
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	e7d1      	b.n	8003c7a <MOTION_EXT_Disable_Feature+0x5e>
  if (IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	f006 fe16 	bl	800a908 <IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection>
 8003cdc:	bb28      	cbnz	r0, 8003d2a <MOTION_EXT_Disable_Feature+0x10e>
    EXT_OFF_HW_FEATURE(EXT_HWF_SINGLE_TAP);
 8003cde:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <MOTION_EXT_Disable_Feature+0x130>)
 8003ce0:	6813      	ldr	r3, [r2, #0]
 8003ce2:	f023 0308 	bic.w	r3, r3, #8
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	e7c7      	b.n	8003c7a <MOTION_EXT_Disable_Feature+0x5e>
  if (IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003cea:	2000      	movs	r0, #0
 8003cec:	f006 fde2 	bl	800a8b4 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection>
 8003cf0:	b9b8      	cbnz	r0, 8003d22 <MOTION_EXT_Disable_Feature+0x106>
    EXT_OFF_HW_FEATURE(EXT_HWF_WAKE_UP);
 8003cf2:	4a16      	ldr	r2, [pc, #88]	; (8003d4c <MOTION_EXT_Disable_Feature+0x130>)
 8003cf4:	6813      	ldr	r3, [r2, #0]
 8003cf6:	f023 0310 	bic.w	r3, r3, #16
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	e7bd      	b.n	8003c7a <MOTION_EXT_Disable_Feature+0x5e>
  if (IKS01A3_MOTION_SENSOR_Disable_6D_Orientation(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003cfe:	2000      	movs	r0, #0
 8003d00:	f006 fe5c 	bl	800a9bc <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation>
 8003d04:	b948      	cbnz	r0, 8003d1a <MOTION_EXT_Disable_Feature+0xfe>
    EXT_OFF_HW_FEATURE(EXT_HWF_6D_ORIENTATION);
 8003d06:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <MOTION_EXT_Disable_Feature+0x130>)
 8003d08:	6813      	ldr	r3, [r2, #0]
 8003d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	e7b3      	b.n	8003c7a <MOTION_EXT_Disable_Feature+0x5e>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING TILT\n ");
 8003d12:	4811      	ldr	r0, [pc, #68]	; (8003d58 <MOTION_EXT_Disable_Feature+0x13c>)
 8003d14:	f01f f844 	bl	8022da0 <iprintf>
 8003d18:	e7af      	b.n	8003c7a <MOTION_EXT_Disable_Feature+0x5e>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING 6D ORIENTATION\n ");
 8003d1a:	4810      	ldr	r0, [pc, #64]	; (8003d5c <MOTION_EXT_Disable_Feature+0x140>)
 8003d1c:	f01f f840 	bl	8022da0 <iprintf>
 8003d20:	e7ab      	b.n	8003c7a <MOTION_EXT_Disable_Feature+0x5e>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING WAKE UP\n ");
 8003d22:	480f      	ldr	r0, [pc, #60]	; (8003d60 <MOTION_EXT_Disable_Feature+0x144>)
 8003d24:	f01f f83c 	bl	8022da0 <iprintf>
 8003d28:	e7a7      	b.n	8003c7a <MOTION_EXT_Disable_Feature+0x5e>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING SINGLE TAP\n ");
 8003d2a:	480e      	ldr	r0, [pc, #56]	; (8003d64 <MOTION_EXT_Disable_Feature+0x148>)
 8003d2c:	f01f f838 	bl	8022da0 <iprintf>
 8003d30:	e7a3      	b.n	8003c7a <MOTION_EXT_Disable_Feature+0x5e>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING DOUBLE TAP\n ");
 8003d32:	480d      	ldr	r0, [pc, #52]	; (8003d68 <MOTION_EXT_Disable_Feature+0x14c>)
 8003d34:	f01f f834 	bl	8022da0 <iprintf>
 8003d38:	e79f      	b.n	8003c7a <MOTION_EXT_Disable_Feature+0x5e>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING FREE FALL\n ");
 8003d3a:	480c      	ldr	r0, [pc, #48]	; (8003d6c <MOTION_EXT_Disable_Feature+0x150>)
 8003d3c:	f01f f830 	bl	8022da0 <iprintf>
 8003d40:	e79b      	b.n	8003c7a <MOTION_EXT_Disable_Feature+0x5e>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR DISABLING PEDOMETER\n ");
 8003d42:	480b      	ldr	r0, [pc, #44]	; (8003d70 <MOTION_EXT_Disable_Feature+0x154>)
 8003d44:	f01f f82c 	bl	8022da0 <iprintf>
 8003d48:	e797      	b.n	8003c7a <MOTION_EXT_Disable_Feature+0x5e>
 8003d4a:	bf00      	nop
 8003d4c:	20001394 	.word	0x20001394
 8003d50:	20000528 	.word	0x20000528
 8003d54:	08024ed4 	.word	0x08024ed4
 8003d58:	08025014 	.word	0x08025014
 8003d5c:	08025050 	.word	0x08025050
 8003d60:	08024fd4 	.word	0x08024fd4
 8003d64:	08024f94 	.word	0x08024f94
 8003d68:	08024f54 	.word	0x08024f54
 8003d6c:	08024f14 	.word	0x08024f14
 8003d70:	08024e94 	.word	0x08024e94

08003d74 <MOTION_EXT_ReadCB>:
{
 8003d74:	b530      	push	{r4, r5, lr}
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 8003d76:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <MOTION_EXT_ReadCB+0x70>)
 8003d78:	681c      	ldr	r4, [r3, #0]
{
 8003d7a:	b083      	sub	sp, #12
  uint16_t StepCount = 0;
 8003d7c:	2000      	movs	r0, #0
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 8003d7e:	f014 0401 	ands.w	r4, r4, #1
  uint16_t StepCount = 0;
 8003d82:	f8ad 0002 	strh.w	r0, [sp, #2]
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 8003d86:	d124      	bne.n	8003dd2 <MOTION_EXT_ReadCB+0x5e>
 8003d88:	4625      	mov	r5, r4
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003d8a:	f006 ff47 	bl	800ac1c <HAL_GetTick>
 8003d8e:	08c0      	lsrs	r0, r0, #3
 8003d90:	f88d 0004 	strb.w	r0, [sp, #4]
 8003d94:	f006 ff42 	bl	800ac1c <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003d98:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <MOTION_EXT_ReadCB+0x74>)
    STORE_LE_16(valueSmall+2, Command);
 8003d9a:	f88d 5006 	strb.w	r5, [sp, #6]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall+2, Command);
 8003da0:	f88d 4007 	strb.w	r4, [sp, #7]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003da4:	0ac0      	lsrs	r0, r0, #11
 8003da6:	f88d 0005 	strb.w	r0, [sp, #5]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003daa:	b16b      	cbz	r3, 8003dc8 <MOTION_EXT_ReadCB+0x54>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : NOTIFY CLIENT WITH NEW MOTION PARAMETER VALUE \n ");
 8003dac:	480f      	ldr	r0, [pc, #60]	; (8003dec <MOTION_EXT_ReadCB+0x78>)
 8003dae:	f01e fff7 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 8003db2:	480f      	ldr	r0, [pc, #60]	; (8003df0 <MOTION_EXT_ReadCB+0x7c>)
 8003db4:	f01e fff4 	bl	8022da0 <iprintf>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 8003db8:	2104      	movs	r1, #4
 8003dba:	eb0d 0201 	add.w	r2, sp, r1
 8003dbe:	4608      	mov	r0, r1
 8003dc0:	f00a fea6 	bl	800eb10 <MOTENV_STM_App_Update_Char>
}
 8003dc4:	b003      	add	sp, #12
 8003dc6:	bd30      	pop	{r4, r5, pc}
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 8003dc8:	480a      	ldr	r0, [pc, #40]	; (8003df4 <MOTION_EXT_ReadCB+0x80>)
 8003dca:	f01e ffe9 	bl	8022da0 <iprintf>
}
 8003dce:	b003      	add	sp, #12
 8003dd0:	bd30      	pop	{r4, r5, pc}
    IKS01A3_MOTION_SENSOR_Get_Step_Count(IKS01A3_LSM6DSO_0, &StepCount); 
 8003dd2:	f10d 0102 	add.w	r1, sp, #2
 8003dd6:	f006 fd23 	bl	800a820 <IKS01A3_MOTION_SENSOR_Get_Step_Count>
  AccEvent_Notify(StepCount, 2);
 8003dda:	f8bd 4002 	ldrh.w	r4, [sp, #2]
    STORE_LE_16(valueSmall+2, Command);
 8003dde:	b2e5      	uxtb	r5, r4
 8003de0:	0a24      	lsrs	r4, r4, #8
 8003de2:	e7d2      	b.n	8003d8a <MOTION_EXT_ReadCB+0x16>
 8003de4:	20001394 	.word	0x20001394
 8003de8:	20000528 	.word	0x20000528
 8003dec:	0802528c 	.word	0x0802528c
 8003df0:	080244dc 	.word	0x080244dc
 8003df4:	080252e0 	.word	0x080252e0

08003df8 <MOTION_EXT_Handle_IT>:
{
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	b086      	sub	sp, #24
  if (IKS01A3_MOTION_SENSOR_Get_Event_Status(IKS01A3_LSM6DSO_0, &status) != BSP_ERROR_NONE)
 8003dfc:	a903      	add	r1, sp, #12
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f006 fc94 	bl	800a72c <IKS01A3_MOTION_SENSOR_Get_Event_Status>
 8003e04:	2800      	cmp	r0, #0
 8003e06:	f040 8085 	bne.w	8003f14 <MOTION_EXT_Handle_IT+0x11c>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER)) ||
 8003e0a:	4c8d      	ldr	r4, [pc, #564]	; (8004040 <MOTION_EXT_Handle_IT+0x248>)
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	07dd      	lsls	r5, r3, #31
 8003e10:	d54d      	bpl.n	8003eae <MOTION_EXT_Handle_IT+0xb6>
    if(status.StepStatus != 0)
 8003e12:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003e16:	06d1      	lsls	r1, r2, #27
 8003e18:	f100 80f0 	bmi.w	8003ffc <MOTION_EXT_Handle_IT+0x204>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_FREE_FALL)) ||
 8003e1c:	079e      	lsls	r6, r3, #30
 8003e1e:	d53f      	bpl.n	8003ea0 <MOTION_EXT_Handle_IT+0xa8>
    if(status.FreeFallStatus != 0)
 8003e20:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003e24:	07d0      	lsls	r0, r2, #31
 8003e26:	f100 8196 	bmi.w	8004156 <MOTION_EXT_Handle_IT+0x35e>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_SINGLE_TAP)) ||
 8003e2a:	0719      	lsls	r1, r3, #28
 8003e2c:	d531      	bpl.n	8003e92 <MOTION_EXT_Handle_IT+0x9a>
    if(status.TapStatus != 0)
 8003e2e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003e32:	0796      	lsls	r6, r2, #30
 8003e34:	d473      	bmi.n	8003f1e <MOTION_EXT_Handle_IT+0x126>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_DOUBLE_TAP)) ||
 8003e36:	075d      	lsls	r5, r3, #29
 8003e38:	d524      	bpl.n	8003e84 <MOTION_EXT_Handle_IT+0x8c>
    if(status.DoubleTapStatus != 0)
 8003e3a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003e3e:	0751      	lsls	r1, r2, #29
 8003e40:	f100 8092 	bmi.w	8003f68 <MOTION_EXT_Handle_IT+0x170>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_TILT)) ||
 8003e44:	069a      	lsls	r2, r3, #26
 8003e46:	d516      	bpl.n	8003e76 <MOTION_EXT_Handle_IT+0x7e>
    if(status.TiltStatus != 0)
 8003e48:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003e4c:	0695      	lsls	r5, r2, #26
 8003e4e:	f100 80b0 	bmi.w	8003fb2 <MOTION_EXT_Handle_IT+0x1ba>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_6D_ORIENTATION)) ||
 8003e52:	0658      	lsls	r0, r3, #25
 8003e54:	d532      	bpl.n	8003ebc <MOTION_EXT_Handle_IT+0xc4>
    if(status.D6DOrientationStatus != 0)
 8003e56:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003e5a:	0652      	lsls	r2, r2, #25
 8003e5c:	f100 80fc 	bmi.w	8004058 <MOTION_EXT_Handle_IT+0x260>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_WAKE_UP))
 8003e60:	06de      	lsls	r6, r3, #27
 8003e62:	d504      	bpl.n	8003e6e <MOTION_EXT_Handle_IT+0x76>
    if(status.WakeUpStatus != 0)
 8003e64:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003e68:	0715      	lsls	r5, r2, #28
 8003e6a:	f100 819d 	bmi.w	80041a8 <MOTION_EXT_Handle_IT+0x3b0>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS))
 8003e6e:	0618      	lsls	r0, r3, #24
 8003e70:	d42b      	bmi.n	8003eca <MOTION_EXT_Handle_IT+0xd2>
}
 8003e72:	b006      	add	sp, #24
 8003e74:	bd70      	pop	{r4, r5, r6, pc}
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_TILT)) ||
 8003e76:	061e      	lsls	r6, r3, #24
 8003e78:	d4e6      	bmi.n	8003e48 <MOTION_EXT_Handle_IT+0x50>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_6D_ORIENTATION)) ||
 8003e7a:	065a      	lsls	r2, r3, #25
 8003e7c:	d4eb      	bmi.n	8003e56 <MOTION_EXT_Handle_IT+0x5e>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_WAKE_UP))
 8003e7e:	06d9      	lsls	r1, r3, #27
 8003e80:	d4f0      	bmi.n	8003e64 <MOTION_EXT_Handle_IT+0x6c>
 8003e82:	e7f6      	b.n	8003e72 <MOTION_EXT_Handle_IT+0x7a>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_DOUBLE_TAP)) ||
 8003e84:	0618      	lsls	r0, r3, #24
 8003e86:	d5dd      	bpl.n	8003e44 <MOTION_EXT_Handle_IT+0x4c>
    if(status.DoubleTapStatus != 0)
 8003e88:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003e8c:	0751      	lsls	r1, r2, #29
 8003e8e:	d5d9      	bpl.n	8003e44 <MOTION_EXT_Handle_IT+0x4c>
 8003e90:	e06a      	b.n	8003f68 <MOTION_EXT_Handle_IT+0x170>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_SINGLE_TAP)) ||
 8003e92:	061a      	lsls	r2, r3, #24
 8003e94:	d5cf      	bpl.n	8003e36 <MOTION_EXT_Handle_IT+0x3e>
    if(status.TapStatus != 0)
 8003e96:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003e9a:	0796      	lsls	r6, r2, #30
 8003e9c:	d5cb      	bpl.n	8003e36 <MOTION_EXT_Handle_IT+0x3e>
 8003e9e:	e03e      	b.n	8003f1e <MOTION_EXT_Handle_IT+0x126>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_FREE_FALL)) ||
 8003ea0:	061d      	lsls	r5, r3, #24
 8003ea2:	d5c2      	bpl.n	8003e2a <MOTION_EXT_Handle_IT+0x32>
    if(status.FreeFallStatus != 0)
 8003ea4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003ea8:	07d0      	lsls	r0, r2, #31
 8003eaa:	d5be      	bpl.n	8003e2a <MOTION_EXT_Handle_IT+0x32>
 8003eac:	e153      	b.n	8004156 <MOTION_EXT_Handle_IT+0x35e>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER)) ||
 8003eae:	0618      	lsls	r0, r3, #24
 8003eb0:	d5b4      	bpl.n	8003e1c <MOTION_EXT_Handle_IT+0x24>
    if(status.StepStatus != 0)
 8003eb2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003eb6:	06d1      	lsls	r1, r2, #27
 8003eb8:	d5b0      	bpl.n	8003e1c <MOTION_EXT_Handle_IT+0x24>
 8003eba:	e09f      	b.n	8003ffc <MOTION_EXT_Handle_IT+0x204>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_6D_ORIENTATION)) ||
 8003ebc:	0619      	lsls	r1, r3, #24
 8003ebe:	d5de      	bpl.n	8003e7e <MOTION_EXT_Handle_IT+0x86>
    if(status.D6DOrientationStatus != 0)
 8003ec0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003ec4:	0652      	lsls	r2, r2, #25
 8003ec6:	d5cb      	bpl.n	8003e60 <MOTION_EXT_Handle_IT+0x68>
 8003ec8:	e0c6      	b.n	8004058 <MOTION_EXT_Handle_IT+0x260>
    AccEvent_Notify(MOTION_EXT_Server_App_Context.PedometerStepCount, 3);
 8003eca:	4d5e      	ldr	r5, [pc, #376]	; (8004044 <MOTION_EXT_Handle_IT+0x24c>)
 8003ecc:	886c      	ldrh	r4, [r5, #2]
    STORE_LE_16(valueLarge, (HAL_GetTick()>>3));
 8003ece:	f006 fea5 	bl	800ac1c <HAL_GetTick>
 8003ed2:	08c0      	lsrs	r0, r0, #3
 8003ed4:	f88d 0010 	strb.w	r0, [sp, #16]
 8003ed8:	f006 fea0 	bl	800ac1c <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003edc:	782b      	ldrb	r3, [r5, #0]
    STORE_LE_16(valueLarge+3, Command);
 8003ede:	f88d 4013 	strb.w	r4, [sp, #19]
    STORE_LE_16(valueLarge, (HAL_GetTick()>>3));
 8003ee2:	0ac0      	lsrs	r0, r0, #11
    valueLarge[2] = 0;
 8003ee4:	2100      	movs	r1, #0
    STORE_LE_16(valueLarge+3, Command);
 8003ee6:	0a22      	lsrs	r2, r4, #8
    STORE_LE_16(valueLarge, (HAL_GetTick()>>3));
 8003ee8:	f88d 0011 	strb.w	r0, [sp, #17]
    valueLarge[2] = 0;
 8003eec:	f88d 1012 	strb.w	r1, [sp, #18]
    STORE_LE_16(valueLarge+3, Command);
 8003ef0:	f88d 2014 	strb.w	r2, [sp, #20]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8152 	beq.w	800419e <MOTION_EXT_Handle_IT+0x3a6>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : NOTIFY CLIENT WITH NEW MOTION PARAMETER VALUE \n ");
 8003efa:	4853      	ldr	r0, [pc, #332]	; (8004048 <MOTION_EXT_Handle_IT+0x250>)
 8003efc:	f01e ff50 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 8003f00:	4852      	ldr	r0, [pc, #328]	; (800404c <MOTION_EXT_Handle_IT+0x254>)
 8003f02:	f01e ff4d 	bl	8022da0 <iprintf>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_LARGE, (uint8_t *)&valueLarge);
 8003f06:	aa04      	add	r2, sp, #16
 8003f08:	2105      	movs	r1, #5
 8003f0a:	2004      	movs	r0, #4
 8003f0c:	f00a fe00 	bl	800eb10 <MOTENV_STM_App_Update_Char>
}
 8003f10:	b006      	add	sp, #24
 8003f12:	bd70      	pop	{r4, r5, r6, pc}
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : ERROR GETTING EVENT STATUS\n ");
 8003f14:	484e      	ldr	r0, [pc, #312]	; (8004050 <MOTION_EXT_Handle_IT+0x258>)
 8003f16:	f01e ff43 	bl	8022da0 <iprintf>
}
 8003f1a:	b006      	add	sp, #24
 8003f1c:	bd70      	pop	{r4, r5, r6, pc}
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003f1e:	f006 fe7d 	bl	800ac1c <HAL_GetTick>
 8003f22:	08c0      	lsrs	r0, r0, #3
 8003f24:	f88d 0010 	strb.w	r0, [sp, #16]
 8003f28:	f006 fe78 	bl	800ac1c <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003f2c:	4b45      	ldr	r3, [pc, #276]	; (8004044 <MOTION_EXT_Handle_IT+0x24c>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003f30:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 8003f32:	2120      	movs	r1, #32
 8003f34:	2200      	movs	r2, #0
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003f36:	f88d 0011 	strb.w	r0, [sp, #17]
    STORE_LE_16(valueSmall+2, Command);
 8003f3a:	f88d 1012 	strb.w	r1, [sp, #18]
 8003f3e:	f88d 2013 	strb.w	r2, [sp, #19]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8154 	beq.w	80041f0 <MOTION_EXT_Handle_IT+0x3f8>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : NOTIFY CLIENT WITH NEW MOTION PARAMETER VALUE \n ");
 8003f48:	483f      	ldr	r0, [pc, #252]	; (8004048 <MOTION_EXT_Handle_IT+0x250>)
 8003f4a:	f01e ff29 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 8003f4e:	483f      	ldr	r0, [pc, #252]	; (800404c <MOTION_EXT_Handle_IT+0x254>)
 8003f50:	f01e ff26 	bl	8022da0 <iprintf>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 8003f54:	2104      	movs	r1, #4
 8003f56:	aa04      	add	r2, sp, #16
 8003f58:	4608      	mov	r0, r1
 8003f5a:	f00a fdd9 	bl	800eb10 <MOTENV_STM_App_Update_Char>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_DOUBLE_TAP)) ||
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	075d      	lsls	r5, r3, #29
 8003f62:	f53f af6a 	bmi.w	8003e3a <MOTION_EXT_Handle_IT+0x42>
 8003f66:	e78d      	b.n	8003e84 <MOTION_EXT_Handle_IT+0x8c>
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003f68:	f006 fe58 	bl	800ac1c <HAL_GetTick>
 8003f6c:	08c0      	lsrs	r0, r0, #3
 8003f6e:	f88d 0010 	strb.w	r0, [sp, #16]
 8003f72:	f006 fe53 	bl	800ac1c <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003f76:	4b33      	ldr	r3, [pc, #204]	; (8004044 <MOTION_EXT_Handle_IT+0x24c>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003f7a:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 8003f7c:	2140      	movs	r1, #64	; 0x40
 8003f7e:	2200      	movs	r2, #0
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003f80:	f88d 0011 	strb.w	r0, [sp, #17]
    STORE_LE_16(valueSmall+2, Command);
 8003f84:	f88d 1012 	strb.w	r1, [sp, #18]
 8003f88:	f88d 2013 	strb.w	r2, [sp, #19]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8133 	beq.w	80041f8 <MOTION_EXT_Handle_IT+0x400>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : NOTIFY CLIENT WITH NEW MOTION PARAMETER VALUE \n ");
 8003f92:	482d      	ldr	r0, [pc, #180]	; (8004048 <MOTION_EXT_Handle_IT+0x250>)
 8003f94:	f01e ff04 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 8003f98:	482c      	ldr	r0, [pc, #176]	; (800404c <MOTION_EXT_Handle_IT+0x254>)
 8003f9a:	f01e ff01 	bl	8022da0 <iprintf>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 8003f9e:	2104      	movs	r1, #4
 8003fa0:	aa04      	add	r2, sp, #16
 8003fa2:	4608      	mov	r0, r1
 8003fa4:	f00a fdb4 	bl	800eb10 <MOTENV_STM_App_Update_Char>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_TILT)) ||
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	069a      	lsls	r2, r3, #26
 8003fac:	f53f af4c 	bmi.w	8003e48 <MOTION_EXT_Handle_IT+0x50>
 8003fb0:	e761      	b.n	8003e76 <MOTION_EXT_Handle_IT+0x7e>
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003fb2:	f006 fe33 	bl	800ac1c <HAL_GetTick>
 8003fb6:	08c0      	lsrs	r0, r0, #3
 8003fb8:	f88d 0010 	strb.w	r0, [sp, #16]
 8003fbc:	f006 fe2e 	bl	800ac1c <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003fc0:	4b20      	ldr	r3, [pc, #128]	; (8004044 <MOTION_EXT_Handle_IT+0x24c>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003fc4:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 8003fc6:	2108      	movs	r1, #8
 8003fc8:	2200      	movs	r2, #0
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003fca:	f88d 0011 	strb.w	r0, [sp, #17]
    STORE_LE_16(valueSmall+2, Command);
 8003fce:	f88d 1012 	strb.w	r1, [sp, #18]
 8003fd2:	f88d 2013 	strb.w	r2, [sp, #19]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8116 	beq.w	8004208 <MOTION_EXT_Handle_IT+0x410>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : NOTIFY CLIENT WITH NEW MOTION PARAMETER VALUE \n ");
 8003fdc:	481a      	ldr	r0, [pc, #104]	; (8004048 <MOTION_EXT_Handle_IT+0x250>)
 8003fde:	f01e fedf 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 8003fe2:	481a      	ldr	r0, [pc, #104]	; (800404c <MOTION_EXT_Handle_IT+0x254>)
 8003fe4:	f01e fedc 	bl	8022da0 <iprintf>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 8003fe8:	2104      	movs	r1, #4
 8003fea:	aa04      	add	r2, sp, #16
 8003fec:	4608      	mov	r0, r1
 8003fee:	f00a fd8f 	bl	800eb10 <MOTENV_STM_App_Update_Char>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_6D_ORIENTATION)) ||
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	0658      	lsls	r0, r3, #25
 8003ff6:	f53f af2e 	bmi.w	8003e56 <MOTION_EXT_Handle_IT+0x5e>
 8003ffa:	e75f      	b.n	8003ebc <MOTION_EXT_Handle_IT+0xc4>
      IKS01A3_MOTION_SENSOR_Get_Step_Count(IKS01A3_LSM6DSO_0, &MOTION_EXT_Server_App_Context.PedometerStepCount);
 8003ffc:	4d11      	ldr	r5, [pc, #68]	; (8004044 <MOTION_EXT_Handle_IT+0x24c>)
 8003ffe:	2000      	movs	r0, #0
 8004000:	1ca9      	adds	r1, r5, #2
 8004002:	f006 fc0d 	bl	800a820 <IKS01A3_MOTION_SENSOR_Get_Step_Count>
      if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	07da      	lsls	r2, r3, #31
 800400a:	f57f af07 	bpl.w	8003e1c <MOTION_EXT_Handle_IT+0x24>
        AccEvent_Notify(MOTION_EXT_Server_App_Context.PedometerStepCount, 2);
 800400e:	886e      	ldrh	r6, [r5, #2]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8004010:	f006 fe04 	bl	800ac1c <HAL_GetTick>
 8004014:	08c0      	lsrs	r0, r0, #3
 8004016:	f88d 0010 	strb.w	r0, [sp, #16]
 800401a:	f006 fdff 	bl	800ac1c <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 800401e:	782b      	ldrb	r3, [r5, #0]
    STORE_LE_16(valueSmall+2, Command);
 8004020:	f88d 6012 	strb.w	r6, [sp, #18]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8004024:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 8004026:	0a32      	lsrs	r2, r6, #8
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8004028:	f88d 0011 	strb.w	r0, [sp, #17]
    STORE_LE_16(valueSmall+2, Command);
 800402c:	f88d 2013 	strb.w	r2, [sp, #19]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8004030:	2b00      	cmp	r3, #0
 8004032:	f040 8138 	bne.w	80042a6 <MOTION_EXT_Handle_IT+0x4ae>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 8004036:	4807      	ldr	r0, [pc, #28]	; (8004054 <MOTION_EXT_Handle_IT+0x25c>)
 8004038:	f01e feb2 	bl	8022da0 <iprintf>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_FREE_FALL)) ||
 800403c:	6823      	ldr	r3, [r4, #0]
#endif
  }

  return;
 800403e:	e6ed      	b.n	8003e1c <MOTION_EXT_Handle_IT+0x24>
 8004040:	20001394 	.word	0x20001394
 8004044:	20000528 	.word	0x20000528
 8004048:	0802528c 	.word	0x0802528c
 800404c:	080244dc 	.word	0x080244dc
 8004050:	080253a8 	.word	0x080253a8
 8004054:	080252e0 	.word	0x080252e0
  uint8_t xl = 0;
 8004058:	2000      	movs	r0, #0
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL(IKS01A3_LSM6DSO_0, &xl) != BSP_ERROR_NONE)
 800405a:	f10d 0107 	add.w	r1, sp, #7
  uint8_t xl = 0;
 800405e:	f88d 0007 	strb.w	r0, [sp, #7]
  uint8_t xh = 0;
 8004062:	f88d 0008 	strb.w	r0, [sp, #8]
  uint8_t yl = 0;
 8004066:	f88d 0009 	strb.w	r0, [sp, #9]
  uint8_t yh = 0;
 800406a:	f88d 000a 	strb.w	r0, [sp, #10]
  uint8_t zl = 0;
 800406e:	f88d 000b 	strb.w	r0, [sp, #11]
  uint8_t zh = 0;
 8004072:	f88d 0010 	strb.w	r0, [sp, #16]
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL(IKS01A3_LSM6DSO_0, &xl) != BSP_ERROR_NONE)
 8004076:	f006 fcbb 	bl	800a9f0 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL>
 800407a:	2800      	cmp	r0, #0
 800407c:	f040 80fb 	bne.w	8004276 <MOTION_EXT_Handle_IT+0x47e>
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH(IKS01A3_LSM6DSO_0, &xh) != BSP_ERROR_NONE)
 8004080:	a902      	add	r1, sp, #8
 8004082:	2000      	movs	r0, #0
 8004084:	f006 fcce 	bl	800aa24 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH>
 8004088:	2800      	cmp	r0, #0
 800408a:	f040 80f0 	bne.w	800426e <MOTION_EXT_Handle_IT+0x476>
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL(IKS01A3_LSM6DSO_0, &yl) != BSP_ERROR_NONE)
 800408e:	f10d 0109 	add.w	r1, sp, #9
 8004092:	2000      	movs	r0, #0
 8004094:	f006 fce0 	bl	800aa58 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL>
 8004098:	2800      	cmp	r0, #0
 800409a:	f040 80e4 	bne.w	8004266 <MOTION_EXT_Handle_IT+0x46e>
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH(IKS01A3_LSM6DSO_0, &yh) != BSP_ERROR_NONE)
 800409e:	f10d 010a 	add.w	r1, sp, #10
 80040a2:	2000      	movs	r0, #0
 80040a4:	f006 fcf2 	bl	800aa8c <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	f040 80d8 	bne.w	800425e <MOTION_EXT_Handle_IT+0x466>
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL(IKS01A3_LSM6DSO_0, &zl) != BSP_ERROR_NONE)
 80040ae:	f10d 010b 	add.w	r1, sp, #11
 80040b2:	2000      	movs	r0, #0
 80040b4:	f006 fd04 	bl	800aac0 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	f040 80cc 	bne.w	8004256 <MOTION_EXT_Handle_IT+0x45e>
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH(IKS01A3_LSM6DSO_0, &zh) != BSP_ERROR_NONE)
 80040be:	a904      	add	r1, sp, #16
 80040c0:	2000      	movs	r0, #0
 80040c2:	f006 fd17 	bl	800aaf4 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH>
 80040c6:	2800      	cmp	r0, #0
 80040c8:	f040 80c1 	bne.w	800424e <MOTION_EXT_Handle_IT+0x456>
  if (xl == 0U && yl == 0U && zl == 0U && xh == 0U && yh == 1U && zh == 0U)
 80040cc:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80040d0:	2d00      	cmp	r5, #0
 80040d2:	f040 809d 	bne.w	8004210 <MOTION_EXT_Handle_IT+0x418>
 80040d6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80040da:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80040de:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80040e2:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	f000 80d3 	beq.w	8004292 <MOTION_EXT_Handle_IT+0x49a>
  else if (xl == 0U && yl == 0U && zl == 0U && xh == 1U && yh == 0U && zh == 0U)
 80040ec:	2800      	cmp	r0, #0
 80040ee:	f040 80c6 	bne.w	800427e <MOTION_EXT_Handle_IT+0x486>
 80040f2:	2901      	cmp	r1, #1
 80040f4:	f000 80ee 	beq.w	80042d4 <MOTION_EXT_Handle_IT+0x4dc>
  else if (xl == 0U && yl == 0U && zl == 0U && xh == 0U && yh == 0U && zh == 1U)
 80040f8:	ea42 0001 	orr.w	r0, r2, r1
 80040fc:	4318      	orrs	r0, r3
 80040fe:	f040 80de 	bne.w	80042be <MOTION_EXT_Handle_IT+0x4c6>
 8004102:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004106:	2b01      	cmp	r3, #1
 8004108:	f040 8094 	bne.w	8004234 <MOTION_EXT_Handle_IT+0x43c>
    OrientationResult = ACC_6D_OR_UP;
 800410c:	2505      	movs	r5, #5
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 800410e:	f006 fd85 	bl	800ac1c <HAL_GetTick>
 8004112:	08c0      	lsrs	r0, r0, #3
 8004114:	f88d 0010 	strb.w	r0, [sp, #16]
 8004118:	f006 fd80 	bl	800ac1c <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 800411c:	4b71      	ldr	r3, [pc, #452]	; (80042e4 <MOTION_EXT_Handle_IT+0x4ec>)
    STORE_LE_16(valueSmall+2, Command);
 800411e:	f88d 5012 	strb.w	r5, [sp, #18]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8004122:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8004124:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 8004126:	2200      	movs	r2, #0
 8004128:	f88d 2013 	strb.w	r2, [sp, #19]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 800412c:	f88d 0011 	strb.w	r0, [sp, #17]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8084 	beq.w	800423e <MOTION_EXT_Handle_IT+0x446>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : NOTIFY CLIENT WITH NEW MOTION PARAMETER VALUE \n ");
 8004136:	486c      	ldr	r0, [pc, #432]	; (80042e8 <MOTION_EXT_Handle_IT+0x4f0>)
 8004138:	f01e fe32 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 800413c:	486b      	ldr	r0, [pc, #428]	; (80042ec <MOTION_EXT_Handle_IT+0x4f4>)
 800413e:	f01e fe2f 	bl	8022da0 <iprintf>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 8004142:	2104      	movs	r1, #4
 8004144:	aa04      	add	r2, sp, #16
 8004146:	4608      	mov	r0, r1
 8004148:	f00a fce2 	bl	800eb10 <MOTENV_STM_App_Update_Char>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_WAKE_UP))
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	06de      	lsls	r6, r3, #27
 8004150:	f57f ae8d 	bpl.w	8003e6e <MOTION_EXT_Handle_IT+0x76>
 8004154:	e686      	b.n	8003e64 <MOTION_EXT_Handle_IT+0x6c>
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8004156:	f006 fd61 	bl	800ac1c <HAL_GetTick>
 800415a:	08c0      	lsrs	r0, r0, #3
 800415c:	f88d 0010 	strb.w	r0, [sp, #16]
 8004160:	f006 fd5c 	bl	800ac1c <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8004164:	4b5f      	ldr	r3, [pc, #380]	; (80042e4 <MOTION_EXT_Handle_IT+0x4ec>)
 8004166:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8004168:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 800416a:	2110      	movs	r1, #16
 800416c:	2200      	movs	r2, #0
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 800416e:	f88d 0011 	strb.w	r0, [sp, #17]
    STORE_LE_16(valueSmall+2, Command);
 8004172:	f88d 1012 	strb.w	r1, [sp, #18]
 8004176:	f88d 2013 	strb.w	r2, [sp, #19]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 800417a:	2b00      	cmp	r3, #0
 800417c:	d040      	beq.n	8004200 <MOTION_EXT_Handle_IT+0x408>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : NOTIFY CLIENT WITH NEW MOTION PARAMETER VALUE \n ");
 800417e:	485a      	ldr	r0, [pc, #360]	; (80042e8 <MOTION_EXT_Handle_IT+0x4f0>)
 8004180:	f01e fe0e 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 8004184:	4859      	ldr	r0, [pc, #356]	; (80042ec <MOTION_EXT_Handle_IT+0x4f4>)
 8004186:	f01e fe0b 	bl	8022da0 <iprintf>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 800418a:	2104      	movs	r1, #4
 800418c:	aa04      	add	r2, sp, #16
 800418e:	4608      	mov	r0, r1
 8004190:	f00a fcbe 	bl	800eb10 <MOTENV_STM_App_Update_Char>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_SINGLE_TAP)) ||
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	0719      	lsls	r1, r3, #28
 8004198:	f53f ae49 	bmi.w	8003e2e <MOTION_EXT_Handle_IT+0x36>
 800419c:	e679      	b.n	8003e92 <MOTION_EXT_Handle_IT+0x9a>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 800419e:	4854      	ldr	r0, [pc, #336]	; (80042f0 <MOTION_EXT_Handle_IT+0x4f8>)
 80041a0:	f01e fdfe 	bl	8022da0 <iprintf>
}
 80041a4:	b006      	add	sp, #24
 80041a6:	bd70      	pop	{r4, r5, r6, pc}
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80041a8:	f006 fd38 	bl	800ac1c <HAL_GetTick>
 80041ac:	08c0      	lsrs	r0, r0, #3
 80041ae:	f88d 0010 	strb.w	r0, [sp, #16]
 80041b2:	f006 fd33 	bl	800ac1c <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80041b6:	4b4b      	ldr	r3, [pc, #300]	; (80042e4 <MOTION_EXT_Handle_IT+0x4ec>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80041ba:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 80041bc:	2180      	movs	r1, #128	; 0x80
 80041be:	2200      	movs	r2, #0
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80041c0:	f88d 0011 	strb.w	r0, [sp, #17]
    STORE_LE_16(valueSmall+2, Command);
 80041c4:	f88d 1012 	strb.w	r1, [sp, #18]
 80041c8:	f88d 2013 	strb.w	r2, [sp, #19]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d03a      	beq.n	8004246 <MOTION_EXT_Handle_IT+0x44e>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : NOTIFY CLIENT WITH NEW MOTION PARAMETER VALUE \n ");
 80041d0:	4845      	ldr	r0, [pc, #276]	; (80042e8 <MOTION_EXT_Handle_IT+0x4f0>)
 80041d2:	f01e fde5 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 80041d6:	4845      	ldr	r0, [pc, #276]	; (80042ec <MOTION_EXT_Handle_IT+0x4f4>)
 80041d8:	f01e fde2 	bl	8022da0 <iprintf>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 80041dc:	2104      	movs	r1, #4
 80041de:	aa04      	add	r2, sp, #16
 80041e0:	4608      	mov	r0, r1
 80041e2:	f00a fc95 	bl	800eb10 <MOTENV_STM_App_Update_Char>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS))
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	0618      	lsls	r0, r3, #24
 80041ea:	f57f ae42 	bpl.w	8003e72 <MOTION_EXT_Handle_IT+0x7a>
 80041ee:	e66c      	b.n	8003eca <MOTION_EXT_Handle_IT+0xd2>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 80041f0:	483f      	ldr	r0, [pc, #252]	; (80042f0 <MOTION_EXT_Handle_IT+0x4f8>)
 80041f2:	f01e fdd5 	bl	8022da0 <iprintf>
 80041f6:	e6b2      	b.n	8003f5e <MOTION_EXT_Handle_IT+0x166>
 80041f8:	483d      	ldr	r0, [pc, #244]	; (80042f0 <MOTION_EXT_Handle_IT+0x4f8>)
 80041fa:	f01e fdd1 	bl	8022da0 <iprintf>
 80041fe:	e6d3      	b.n	8003fa8 <MOTION_EXT_Handle_IT+0x1b0>
 8004200:	483b      	ldr	r0, [pc, #236]	; (80042f0 <MOTION_EXT_Handle_IT+0x4f8>)
 8004202:	f01e fdcd 	bl	8022da0 <iprintf>
 8004206:	e7c5      	b.n	8004194 <MOTION_EXT_Handle_IT+0x39c>
 8004208:	4839      	ldr	r0, [pc, #228]	; (80042f0 <MOTION_EXT_Handle_IT+0x4f8>)
 800420a:	f01e fdc9 	bl	8022da0 <iprintf>
 800420e:	e6f0      	b.n	8003ff2 <MOTION_EXT_Handle_IT+0x1fa>
  else if (xl == 1U && yl == 0U && zl == 0U && xh == 0U && yh == 0U && zh == 0U)
 8004210:	2d01      	cmp	r5, #1
 8004212:	d10f      	bne.n	8004234 <MOTION_EXT_Handle_IT+0x43c>
 8004214:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8004218:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800421c:	4313      	orrs	r3, r2
 800421e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8004222:	4313      	orrs	r3, r2
 8004224:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8004228:	4313      	orrs	r3, r2
 800422a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	f43f af6d 	beq.w	800410e <MOTION_EXT_Handle_IT+0x316>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : None of the 6D orientation axes is set in LSM6DSL - accelerometer.\r\n");
 8004234:	482f      	ldr	r0, [pc, #188]	; (80042f4 <MOTION_EXT_Handle_IT+0x4fc>)
 8004236:	f01e fe39 	bl	8022eac <puts>
  MOTION_EXT_Server_App_AccEvent_t OrientationResult = ACC_NOT_USED;
 800423a:	2500      	movs	r5, #0
 800423c:	e767      	b.n	800410e <MOTION_EXT_Handle_IT+0x316>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 800423e:	482c      	ldr	r0, [pc, #176]	; (80042f0 <MOTION_EXT_Handle_IT+0x4f8>)
 8004240:	f01e fdae 	bl	8022da0 <iprintf>
 8004244:	e782      	b.n	800414c <MOTION_EXT_Handle_IT+0x354>
 8004246:	482a      	ldr	r0, [pc, #168]	; (80042f0 <MOTION_EXT_Handle_IT+0x4f8>)
 8004248:	f01e fdaa 	bl	8022da0 <iprintf>
 800424c:	e7cb      	b.n	80041e6 <MOTION_EXT_Handle_IT+0x3ee>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : Error getting 6D orientation ZH axis from LSM6DSL - accelerometer.\r\n");
 800424e:	482a      	ldr	r0, [pc, #168]	; (80042f8 <MOTION_EXT_Handle_IT+0x500>)
 8004250:	f01e fe2c 	bl	8022eac <puts>
 8004254:	e73a      	b.n	80040cc <MOTION_EXT_Handle_IT+0x2d4>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : Error getting 6D orientation ZL axis from LSM6DSL - accelerometer.\r\n");
 8004256:	4829      	ldr	r0, [pc, #164]	; (80042fc <MOTION_EXT_Handle_IT+0x504>)
 8004258:	f01e fe28 	bl	8022eac <puts>
 800425c:	e72f      	b.n	80040be <MOTION_EXT_Handle_IT+0x2c6>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : Error getting 6D orientation YH axis from LSM6DSL - accelerometer.\r\n");
 800425e:	4828      	ldr	r0, [pc, #160]	; (8004300 <MOTION_EXT_Handle_IT+0x508>)
 8004260:	f01e fe24 	bl	8022eac <puts>
 8004264:	e723      	b.n	80040ae <MOTION_EXT_Handle_IT+0x2b6>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : Error getting 6D orientation YL axis from LSM6DSL - accelerometer.\r\n");
 8004266:	4827      	ldr	r0, [pc, #156]	; (8004304 <MOTION_EXT_Handle_IT+0x50c>)
 8004268:	f01e fe20 	bl	8022eac <puts>
 800426c:	e717      	b.n	800409e <MOTION_EXT_Handle_IT+0x2a6>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : Error getting 6D orientation XH axis from LSM6DSL - accelerometer.\r\n");
 800426e:	4826      	ldr	r0, [pc, #152]	; (8004308 <MOTION_EXT_Handle_IT+0x510>)
 8004270:	f01e fe1c 	bl	8022eac <puts>
 8004274:	e70b      	b.n	800408e <MOTION_EXT_Handle_IT+0x296>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : Error getting 6D orientation XL axis from LSM6DSL - accelerometer.\r\n ");
 8004276:	4825      	ldr	r0, [pc, #148]	; (800430c <MOTION_EXT_Handle_IT+0x514>)
 8004278:	f01e fd92 	bl	8022da0 <iprintf>
 800427c:	e700      	b.n	8004080 <MOTION_EXT_Handle_IT+0x288>
  else if (xl == 0U && yl == 1U && zl == 0U && xh == 0U && yh == 0U && zh == 0U)
 800427e:	2801      	cmp	r0, #1
 8004280:	d1d8      	bne.n	8004234 <MOTION_EXT_Handle_IT+0x43c>
 8004282:	430a      	orrs	r2, r1
 8004284:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	430b      	orrs	r3, r1
 800428c:	d1d2      	bne.n	8004234 <MOTION_EXT_Handle_IT+0x43c>
    OrientationResult = ACC_6D_OR_LEFT;
 800428e:	2502      	movs	r5, #2
 8004290:	e73d      	b.n	800410e <MOTION_EXT_Handle_IT+0x316>
  if (xl == 0U && yl == 0U && zl == 0U && xh == 0U && yh == 1U && zh == 0U)
 8004292:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8004296:	ea40 0502 	orr.w	r5, r0, r2
 800429a:	430d      	orrs	r5, r1
 800429c:	4335      	orrs	r5, r6
 800429e:	f47f af25 	bne.w	80040ec <MOTION_EXT_Handle_IT+0x2f4>
    OrientationResult = ACC_6D_OR_RIGTH;
 80042a2:	2504      	movs	r5, #4
 80042a4:	e733      	b.n	800410e <MOTION_EXT_Handle_IT+0x316>
    APP_DBG_MSG("-- MOTION EXT APPLICATION SERVER : NOTIFY CLIENT WITH NEW MOTION PARAMETER VALUE \n ");
 80042a6:	4810      	ldr	r0, [pc, #64]	; (80042e8 <MOTION_EXT_Handle_IT+0x4f0>)
 80042a8:	f01e fd7a 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 80042ac:	480f      	ldr	r0, [pc, #60]	; (80042ec <MOTION_EXT_Handle_IT+0x4f4>)
 80042ae:	f01e fd77 	bl	8022da0 <iprintf>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 80042b2:	2104      	movs	r1, #4
 80042b4:	aa04      	add	r2, sp, #16
 80042b6:	4608      	mov	r0, r1
 80042b8:	f00a fc2a 	bl	800eb10 <MOTENV_STM_App_Update_Char>
      break;
 80042bc:	e6be      	b.n	800403c <MOTION_EXT_Handle_IT+0x244>
  else if (xl == 0U && yl == 0U && zl == 1U && xh == 0U && yh == 0U && zh == 0U)
 80042be:	2a01      	cmp	r2, #1
 80042c0:	d1b8      	bne.n	8004234 <MOTION_EXT_Handle_IT+0x43c>
 80042c2:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80042c6:	ea41 0203 	orr.w	r2, r1, r3
 80042ca:	ea52 0300 	orrs.w	r3, r2, r0
 80042ce:	d1b1      	bne.n	8004234 <MOTION_EXT_Handle_IT+0x43c>
    OrientationResult = ACC_6D_OR_DOWN;
 80042d0:	2506      	movs	r5, #6
 80042d2:	e71c      	b.n	800410e <MOTION_EXT_Handle_IT+0x316>
  else if (xl == 0U && yl == 0U && zl == 0U && xh == 1U && yh == 0U && zh == 0U)
 80042d4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80042d8:	ea42 0503 	orr.w	r5, r2, r3
 80042dc:	4328      	orrs	r0, r5
 80042de:	d1ee      	bne.n	80042be <MOTION_EXT_Handle_IT+0x4c6>
    OrientationResult = ACC_6D_OR_BOTTOM;
 80042e0:	2503      	movs	r5, #3
 80042e2:	e714      	b.n	800410e <MOTION_EXT_Handle_IT+0x316>
 80042e4:	20000528 	.word	0x20000528
 80042e8:	0802528c 	.word	0x0802528c
 80042ec:	080244dc 	.word	0x080244dc
 80042f0:	080252e0 	.word	0x080252e0
 80042f4:	0802565c 	.word	0x0802565c
 80042f8:	080255f4 	.word	0x080255f4
 80042fc:	0802558c 	.word	0x0802558c
 8004300:	08025524 	.word	0x08025524
 8004304:	080254bc 	.word	0x080254bc
 8004308:	08025454 	.word	0x08025454
 800430c:	080253e8 	.word	0x080253e8

08004310 <MOTION_Context_Init>:
 * @brief  Init the HW/Motion Service/Char Context
 * @param  None
 * @retval None
 */
void MOTION_Context_Init(void)
{
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Motion Sensors */
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 8004312:	2103      	movs	r1, #3
 8004314:	2000      	movs	r0, #0
 8004316:	f005 ff81 	bl	800a21c <IKS01A3_MOTION_SENSOR_Init>
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 800431a:	2102      	movs	r1, #2
 800431c:	2001      	movs	r0, #1
 800431e:	f005 ff7d 	bl	800a21c <IKS01A3_MOTION_SENSOR_Init>
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 8004322:	2104      	movs	r1, #4
 8004324:	2002      	movs	r0, #2
 8004326:	f005 ff79 	bl	800a21c <IKS01A3_MOTION_SENSOR_Init>

  MOTION_Server_App_Context.hasAcc = 0;
 800432a:	2400      	movs	r4, #0
 800432c:	4e1e      	ldr	r6, [pc, #120]	; (80043a8 <MOTION_Context_Init+0x98>)
 800432e:	4d1f      	ldr	r5, [pc, #124]	; (80043ac <MOTION_Context_Init+0x9c>)
 8004330:	8534      	strh	r4, [r6, #40]	; 0x28
  * @retval None
  */
void MOTION_Set2G_Accelerometer_FullScale(void)
{
  /* Set Full Scale to +/-2g */
  IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 8004332:	2202      	movs	r2, #2
 8004334:	4611      	mov	r1, r2
 8004336:	4620      	mov	r0, r4
  MOTION_Server_App_Context.hasMag = 0;
 8004338:	f886 402a 	strb.w	r4, [r6, #42]	; 0x2a
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
  {
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
    if(MotionCapabilities[i].Acc)
    {
      MOTION_Server_App_Context.hasAcc = 1;
 800433c:	2701      	movs	r7, #1
  IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 800433e:	f006 f9cb 	bl	800a6d8 <IKS01A3_MOTION_SENSOR_SetFullScale>
  MOTION_Server_App_Context.NotificationStatus = status;
 8004342:	7034      	strb	r4, [r6, #0]
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 8004344:	4620      	mov	r0, r4
 8004346:	4629      	mov	r1, r5
 8004348:	f006 f934 	bl	800a5b4 <IKS01A3_MOTION_SENSOR_GetCapabilities>
    if(MotionCapabilities[i].Acc)
 800434c:	782b      	ldrb	r3, [r5, #0]
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800434e:	3401      	adds	r4, #1
    if(MotionCapabilities[i].Acc)
 8004350:	b10b      	cbz	r3, 8004356 <MOTION_Context_Init+0x46>
      MOTION_Server_App_Context.hasAcc = 1;
 8004352:	f886 7028 	strb.w	r7, [r6, #40]	; 0x28
    }
    if(MotionCapabilities[i].Gyro)
 8004356:	786b      	ldrb	r3, [r5, #1]
 8004358:	b10b      	cbz	r3, 800435e <MOTION_Context_Init+0x4e>
    {
      MOTION_Server_App_Context.hasGyro = 1;
 800435a:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
    }
    if(MotionCapabilities[i].Magneto)
 800435e:	78ab      	ldrb	r3, [r5, #2]
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 8004360:	351c      	adds	r5, #28
    if(MotionCapabilities[i].Magneto)
 8004362:	b10b      	cbz	r3, 8004368 <MOTION_Context_Init+0x58>
    {
      MOTION_Server_App_Context.hasMag = 1;
 8004364:	f886 702a 	strb.w	r7, [r6, #42]	; 0x2a
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 8004368:	2c03      	cmp	r4, #3
 800436a:	d1eb      	bne.n	8004344 <MOTION_Context_Init+0x34>
    }
  }

  /* Update BLE ADV field (Motion) */
  if(MOTION_Server_App_Context.hasAcc)
 800436c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8004370:	b143      	cbz	r3, 8004384 <MOTION_Context_Init+0x74>
  {
    manuf_data[5] |= 0x80; /* Acc value */
 8004372:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <MOTION_Context_Init+0xa0>)
 8004374:	7959      	ldrb	r1, [r3, #5]
    manuf_data[6] |= 0x04; /* Extended Acc events */
 8004376:	799a      	ldrb	r2, [r3, #6]
    manuf_data[5] |= 0x80; /* Acc value */
 8004378:	f061 017f 	orn	r1, r1, #127	; 0x7f
    manuf_data[6] |= 0x04; /* Extended Acc events */
 800437c:	f042 0204 	orr.w	r2, r2, #4
    manuf_data[5] |= 0x80; /* Acc value */
 8004380:	7159      	strb	r1, [r3, #5]
    manuf_data[6] |= 0x04; /* Extended Acc events */
 8004382:	719a      	strb	r2, [r3, #6]
  }
  if(MOTION_Server_App_Context.hasGyro)
 8004384:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8004388:	b123      	cbz	r3, 8004394 <MOTION_Context_Init+0x84>
  {
    manuf_data[5] |= 0x40; /* Gyro value */
 800438a:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <MOTION_Context_Init+0xa0>)
 800438c:	7953      	ldrb	r3, [r2, #5]
 800438e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004392:	7153      	strb	r3, [r2, #5]
  }
  if(MOTION_Server_App_Context.hasMag)
 8004394:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
 8004398:	b123      	cbz	r3, 80043a4 <MOTION_Context_Init+0x94>
  {
    manuf_data[5] |= 0x20; /* Mag value */
 800439a:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <MOTION_Context_Init+0xa0>)
 800439c:	7953      	ldrb	r3, [r2, #5]
 800439e:	f043 0320 	orr.w	r3, r3, #32
 80043a2:	7153      	strb	r3, [r2, #5]
}
 80043a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000530 	.word	0x20000530
 80043ac:	20001398 	.word	0x20001398
 80043b0:	2000000c 	.word	0x2000000c

080043b4 <MOTION_Set_Notification_Status>:
  MOTION_Server_App_Context.NotificationStatus = status;
 80043b4:	4b01      	ldr	r3, [pc, #4]	; (80043bc <MOTION_Set_Notification_Status+0x8>)
 80043b6:	7018      	strb	r0, [r3, #0]
}
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000530 	.word	0x20000530

080043c0 <MOTION_Send_Notification_Task>:
{
 80043c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(MOTION_Server_App_Context.hasAcc == 1)
 80043c2:	4c98      	ldr	r4, [pc, #608]	; (8004624 <MOTION_Send_Notification_Task+0x264>)
 80043c4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80043c8:	2b01      	cmp	r3, #1
{
 80043ca:	b08d      	sub	sp, #52	; 0x34
    if(MOTION_Server_App_Context.hasAcc == 1)
 80043cc:	f000 811a 	beq.w	8004604 <MOTION_Send_Notification_Task+0x244>
    if(MOTION_Server_App_Context.hasGyro == 1)
 80043d0:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 80043d4:	2901      	cmp	r1, #1
 80043d6:	f000 8107 	beq.w	80045e8 <MOTION_Send_Notification_Task+0x228>
    if(MOTION_Server_App_Context.hasMag == 1)
 80043da:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80043de:	2b01      	cmp	r3, #1
 80043e0:	f000 80f3 	beq.w	80045ca <MOTION_Send_Notification_Task+0x20a>
    if(MOTION_Server_App_Context.hasAcc == 1)
 80043e4:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80043e8:	2801      	cmp	r0, #1
 80043ea:	f000 80e0 	beq.w	80045ae <MOTION_Send_Notification_Task+0x1ee>
    if(MOTION_Server_App_Context.hasGyro == 1)
 80043ee:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 80043f2:	2901      	cmp	r1, #1
 80043f4:	f000 80cd 	beq.w	8004592 <MOTION_Send_Notification_Task+0x1d2>
    if(MOTION_Server_App_Context.hasMag == 1)
 80043f8:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80043fc:	2801      	cmp	r0, #1
 80043fe:	f000 80ba 	beq.w	8004576 <MOTION_Send_Notification_Task+0x1b6>
    if(MOTION_Server_App_Context.hasAcc == 1)
 8004402:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004406:	2b01      	cmp	r3, #1
 8004408:	f000 80a6 	beq.w	8004558 <MOTION_Send_Notification_Task+0x198>
    if(MOTION_Server_App_Context.hasGyro == 1)
 800440c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8004410:	2901      	cmp	r1, #1
 8004412:	f000 8093 	beq.w	800453c <MOTION_Send_Notification_Task+0x17c>
    if(MOTION_Server_App_Context.hasMag == 1)
 8004416:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800441a:	2b01      	cmp	r3, #1
 800441c:	d061      	beq.n	80044e2 <MOTION_Send_Notification_Task+0x122>
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800441e:	f006 fbfd 	bl	800ac1c <HAL_GetTick>
 8004422:	08c0      	lsrs	r0, r0, #3
 8004424:	f88d 001c 	strb.w	r0, [sp, #28]
 8004428:	f006 fbf8 	bl	800ac1c <HAL_GetTick>
  if(MOTION_Server_App_Context.hasAcc == 1)
 800442c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004430:	0ac0      	lsrs	r0, r0, #11
  if(MOTION_Server_App_Context.hasAcc == 1)
 8004432:	2b01      	cmp	r3, #1
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004434:	f88d 001d 	strb.w	r0, [sp, #29]
  if(MOTION_Server_App_Context.hasAcc == 1)
 8004438:	d111      	bne.n	800445e <MOTION_Send_Notification_Task+0x9e>
    STORE_LE_16(value+4, MOTION_Server_App_Context.acceleration.y);
 800443a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    STORE_LE_16(value+6, MOTION_Server_App_Context.acceleration.z);
 800443e:	68e3      	ldr	r3, [r4, #12]
    STORE_LE_16(value+2, MOTION_Server_App_Context.acceleration.x);
 8004440:	f88d 101e 	strb.w	r1, [sp, #30]
 8004444:	1208      	asrs	r0, r1, #8
    STORE_LE_16(value+4, MOTION_Server_App_Context.acceleration.y);
 8004446:	f88d 2020 	strb.w	r2, [sp, #32]
 800444a:	1211      	asrs	r1, r2, #8
    STORE_LE_16(value+6, MOTION_Server_App_Context.acceleration.z);
 800444c:	121a      	asrs	r2, r3, #8
    STORE_LE_16(value+2, MOTION_Server_App_Context.acceleration.x);
 800444e:	f88d 001f 	strb.w	r0, [sp, #31]
    STORE_LE_16(value+4, MOTION_Server_App_Context.acceleration.y);
 8004452:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    STORE_LE_16(value+6, MOTION_Server_App_Context.acceleration.z);
 8004456:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800445a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
  if(MOTION_Server_App_Context.hasGyro == 1)
 800445e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004462:	2b01      	cmp	r3, #1
 8004464:	d124      	bne.n	80044b0 <MOTION_Send_Notification_Task+0xf0>
    MOTION_Server_App_Context.angular_velocity.x/=100;
 8004466:	4a70      	ldr	r2, [pc, #448]	; (8004628 <MOTION_Send_Notification_Task+0x268>)
 8004468:	6920      	ldr	r0, [r4, #16]
    MOTION_Server_App_Context.angular_velocity.y/=100;
 800446a:	6961      	ldr	r1, [r4, #20]
    MOTION_Server_App_Context.angular_velocity.x/=100;
 800446c:	17c3      	asrs	r3, r0, #31
 800446e:	fb82 5000 	smull	r5, r0, r2, r0
 8004472:	ebc3 1360 	rsb	r3, r3, r0, asr #5
 8004476:	6123      	str	r3, [r4, #16]
    STORE_LE_16(value+8, MOTION_Server_App_Context.angular_velocity.x);
 8004478:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800447c:	121b      	asrs	r3, r3, #8
 800447e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    MOTION_Server_App_Context.angular_velocity.z/=100;
 8004482:	69a3      	ldr	r3, [r4, #24]
 8004484:	fb82 0503 	smull	r0, r5, r2, r3
    MOTION_Server_App_Context.angular_velocity.y/=100;
 8004488:	fb82 2001 	smull	r2, r0, r2, r1
    MOTION_Server_App_Context.angular_velocity.z/=100;
 800448c:	17db      	asrs	r3, r3, #31
    MOTION_Server_App_Context.angular_velocity.y/=100;
 800448e:	17ca      	asrs	r2, r1, #31
 8004490:	ebc2 1260 	rsb	r2, r2, r0, asr #5
    MOTION_Server_App_Context.angular_velocity.z/=100;
 8004494:	ebc3 1365 	rsb	r3, r3, r5, asr #5
 8004498:	e9c4 2305 	strd	r2, r3, [r4, #20]
    STORE_LE_16(value+10, MOTION_Server_App_Context.angular_velocity.y);
 800449c:	1210      	asrs	r0, r2, #8
    STORE_LE_16(value+12, MOTION_Server_App_Context.angular_velocity.z);
 800449e:	1219      	asrs	r1, r3, #8
    STORE_LE_16(value+10, MOTION_Server_App_Context.angular_velocity.y);
 80044a0:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 80044a4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    STORE_LE_16(value+12, MOTION_Server_App_Context.angular_velocity.z);
 80044a8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80044ac:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
  if(MOTION_Server_App_Context.hasMag == 1)
 80044b0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d022      	beq.n	80044fe <MOTION_Send_Notification_Task+0x13e>
  if(MOTION_Server_App_Context.NotificationStatus)
 80044b8:	7823      	ldrb	r3, [r4, #0]
 80044ba:	b16b      	cbz	r3, 80044d8 <MOTION_Send_Notification_Task+0x118>
    APP_DBG_MSG("-- MOTION APPLICATION SERVER : NOTIFY CLIENT WITH NEW MOTION PARAMETER VALUE \n ");
 80044bc:	485b      	ldr	r0, [pc, #364]	; (800462c <MOTION_Send_Notification_Task+0x26c>)
 80044be:	f01e fc6f 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 80044c2:	485b      	ldr	r0, [pc, #364]	; (8004630 <MOTION_Send_Notification_Task+0x270>)
 80044c4:	f01e fc6c 	bl	8022da0 <iprintf>
    MOTENV_STM_App_Update_Char(MOTION_CHAR_UUID, VALUE_LEN_MOTION, (uint8_t *)&value);
 80044c8:	aa07      	add	r2, sp, #28
 80044ca:	2114      	movs	r1, #20
 80044cc:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 80044d0:	f00a fb1e 	bl	800eb10 <MOTENV_STM_App_Update_Char>
}
 80044d4:	b00d      	add	sp, #52	; 0x34
 80044d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    APP_DBG_MSG("-- MOTION APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 80044d8:	4856      	ldr	r0, [pc, #344]	; (8004634 <MOTION_Send_Notification_Task+0x274>)
 80044da:	f01e fc61 	bl	8022da0 <iprintf>
}
 80044de:	b00d      	add	sp, #52	; 0x34
 80044e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_MAGNETO, &magnetic_field) == 0)
 80044e2:	ad07      	add	r5, sp, #28
 80044e4:	462a      	mov	r2, r5
 80044e6:	2104      	movs	r1, #4
 80044e8:	2002      	movs	r0, #2
 80044ea:	f006 f877 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d195      	bne.n	800441e <MOTION_Send_Notification_Task+0x5e>
        MOTION_Server_App_Context.magnetic_field = magnetic_field;
 80044f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80044f6:	4b50      	ldr	r3, [pc, #320]	; (8004638 <MOTION_Send_Notification_Task+0x278>)
 80044f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80044fc:	e78f      	b.n	800441e <MOTION_Send_Notification_Task+0x5e>
    AXIS.x = MOTION_Server_App_Context.magnetic_field.x - MOTIONFX_Get_MAG_Offset()->x;
 80044fe:	69e5      	ldr	r5, [r4, #28]
 8004500:	f000 fc18 	bl	8004d34 <MOTIONFX_Get_MAG_Offset>
 8004504:	6803      	ldr	r3, [r0, #0]
    AXIS.y = MOTION_Server_App_Context.magnetic_field.y - MOTIONFX_Get_MAG_Offset()->y;
 8004506:	6a27      	ldr	r7, [r4, #32]
    AXIS.x = MOTION_Server_App_Context.magnetic_field.x - MOTIONFX_Get_MAG_Offset()->x;
 8004508:	1aed      	subs	r5, r5, r3
    AXIS.y = MOTION_Server_App_Context.magnetic_field.y - MOTIONFX_Get_MAG_Offset()->y;
 800450a:	f000 fc13 	bl	8004d34 <MOTIONFX_Get_MAG_Offset>
 800450e:	6843      	ldr	r3, [r0, #4]
    AXIS.z = MOTION_Server_App_Context.magnetic_field.z - MOTIONFX_Get_MAG_Offset()->z;
 8004510:	6a66      	ldr	r6, [r4, #36]	; 0x24
    AXIS.y = MOTION_Server_App_Context.magnetic_field.y - MOTIONFX_Get_MAG_Offset()->y;
 8004512:	1aff      	subs	r7, r7, r3
    AXIS.z = MOTION_Server_App_Context.magnetic_field.z - MOTIONFX_Get_MAG_Offset()->z;
 8004514:	f000 fc0e 	bl	8004d34 <MOTIONFX_Get_MAG_Offset>
 8004518:	6883      	ldr	r3, [r0, #8]
    STORE_LE_16(value+14, AXIS.x);
 800451a:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
    AXIS.z = MOTION_Server_App_Context.magnetic_field.z - MOTIONFX_Get_MAG_Offset()->z;
 800451e:	1af3      	subs	r3, r6, r3
    STORE_LE_16(value+14, AXIS.x);
 8004520:	122d      	asrs	r5, r5, #8
    STORE_LE_16(value+16, AXIS.y);
 8004522:	1239      	asrs	r1, r7, #8
    STORE_LE_16(value+18, AXIS.z);
 8004524:	121a      	asrs	r2, r3, #8
    STORE_LE_16(value+14, AXIS.x);
 8004526:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
    STORE_LE_16(value+16, AXIS.y);
 800452a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800452e:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
    STORE_LE_16(value+18, AXIS.z);
 8004532:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8004536:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 800453a:	e7bd      	b.n	80044b8 <MOTION_Send_Notification_Task+0xf8>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_GYRO, &angular_velocity) == 0)
 800453c:	ad04      	add	r5, sp, #16
 800453e:	462a      	mov	r2, r5
 8004540:	2002      	movs	r0, #2
 8004542:	f006 f84b 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>
 8004546:	2800      	cmp	r0, #0
 8004548:	f47f af65 	bne.w	8004416 <MOTION_Send_Notification_Task+0x56>
        MOTION_Server_App_Context.angular_velocity = angular_velocity;
 800454c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004550:	4b3a      	ldr	r3, [pc, #232]	; (800463c <MOTION_Send_Notification_Task+0x27c>)
 8004552:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004556:	e75e      	b.n	8004416 <MOTION_Send_Notification_Task+0x56>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_ACCELERO, &acceleration) == 0)
 8004558:	2102      	movs	r1, #2
 800455a:	ad01      	add	r5, sp, #4
 800455c:	462a      	mov	r2, r5
 800455e:	4608      	mov	r0, r1
 8004560:	f006 f83c 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>
 8004564:	2800      	cmp	r0, #0
 8004566:	f47f af51 	bne.w	800440c <MOTION_Send_Notification_Task+0x4c>
        MOTION_Server_App_Context.acceleration = acceleration;
 800456a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800456e:	4b34      	ldr	r3, [pc, #208]	; (8004640 <MOTION_Send_Notification_Task+0x280>)
 8004570:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004574:	e74a      	b.n	800440c <MOTION_Send_Notification_Task+0x4c>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_MAGNETO, &magnetic_field) == 0)
 8004576:	ad07      	add	r5, sp, #28
 8004578:	462a      	mov	r2, r5
 800457a:	2104      	movs	r1, #4
 800457c:	f006 f82e 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>
 8004580:	2800      	cmp	r0, #0
 8004582:	f47f af3e 	bne.w	8004402 <MOTION_Send_Notification_Task+0x42>
        MOTION_Server_App_Context.magnetic_field = magnetic_field;
 8004586:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800458a:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <MOTION_Send_Notification_Task+0x278>)
 800458c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004590:	e737      	b.n	8004402 <MOTION_Send_Notification_Task+0x42>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_GYRO, &angular_velocity) == 0)
 8004592:	ad04      	add	r5, sp, #16
 8004594:	462a      	mov	r2, r5
 8004596:	4608      	mov	r0, r1
 8004598:	f006 f820 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>
 800459c:	2800      	cmp	r0, #0
 800459e:	f47f af2b 	bne.w	80043f8 <MOTION_Send_Notification_Task+0x38>
        MOTION_Server_App_Context.angular_velocity = angular_velocity;
 80045a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80045a6:	4b25      	ldr	r3, [pc, #148]	; (800463c <MOTION_Send_Notification_Task+0x27c>)
 80045a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80045ac:	e724      	b.n	80043f8 <MOTION_Send_Notification_Task+0x38>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_ACCELERO, &acceleration) == 0)
 80045ae:	ad01      	add	r5, sp, #4
 80045b0:	462a      	mov	r2, r5
 80045b2:	2102      	movs	r1, #2
 80045b4:	f006 f812 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	f47f af18 	bne.w	80043ee <MOTION_Send_Notification_Task+0x2e>
        MOTION_Server_App_Context.acceleration = acceleration;
 80045be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80045c2:	4b1f      	ldr	r3, [pc, #124]	; (8004640 <MOTION_Send_Notification_Task+0x280>)
 80045c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80045c8:	e711      	b.n	80043ee <MOTION_Send_Notification_Task+0x2e>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_MAGNETO, &magnetic_field) == 0)
 80045ca:	ad07      	add	r5, sp, #28
 80045cc:	462a      	mov	r2, r5
 80045ce:	2104      	movs	r1, #4
 80045d0:	2000      	movs	r0, #0
 80045d2:	f006 f803 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	f47f af04 	bne.w	80043e4 <MOTION_Send_Notification_Task+0x24>
        MOTION_Server_App_Context.magnetic_field = magnetic_field;
 80045dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80045e0:	4b15      	ldr	r3, [pc, #84]	; (8004638 <MOTION_Send_Notification_Task+0x278>)
 80045e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80045e6:	e6fd      	b.n	80043e4 <MOTION_Send_Notification_Task+0x24>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_GYRO, &angular_velocity) == 0)
 80045e8:	ad04      	add	r5, sp, #16
 80045ea:	462a      	mov	r2, r5
 80045ec:	2000      	movs	r0, #0
 80045ee:	f005 fff5 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	f47f aef1 	bne.w	80043da <MOTION_Send_Notification_Task+0x1a>
        MOTION_Server_App_Context.angular_velocity = angular_velocity;
 80045f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80045fc:	4b0f      	ldr	r3, [pc, #60]	; (800463c <MOTION_Send_Notification_Task+0x27c>)
 80045fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004602:	e6ea      	b.n	80043da <MOTION_Send_Notification_Task+0x1a>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_ACCELERO, &acceleration) == 0)
 8004604:	ad01      	add	r5, sp, #4
 8004606:	462a      	mov	r2, r5
 8004608:	2102      	movs	r1, #2
 800460a:	2000      	movs	r0, #0
 800460c:	f005 ffe6 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>
 8004610:	2800      	cmp	r0, #0
 8004612:	f47f aedd 	bne.w	80043d0 <MOTION_Send_Notification_Task+0x10>
        MOTION_Server_App_Context.acceleration = acceleration;
 8004616:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800461a:	1d23      	adds	r3, r4, #4
 800461c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004620:	e6d6      	b.n	80043d0 <MOTION_Send_Notification_Task+0x10>
 8004622:	bf00      	nop
 8004624:	20000530 	.word	0x20000530
 8004628:	51eb851f 	.word	0x51eb851f
 800462c:	080256c4 	.word	0x080256c4
 8004630:	080244dc 	.word	0x080244dc
 8004634:	08025714 	.word	0x08025714
 8004638:	2000054c 	.word	0x2000054c
 800463c:	20000540 	.word	0x20000540
 8004640:	20000534 	.word	0x20000534

08004644 <MOTIONAR_Set_Notification_Status>:
 * @param  status The new notification status
 * @retval None
 */
void MOTIONAR_Set_Notification_Status(uint8_t status)
{
  MOTIONAR_Server_App_Context.NotificationStatus = status;
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <MOTIONAR_Set_Notification_Status+0x1c>)
  if(status == 1)
 8004646:	2801      	cmp	r0, #1
  MOTIONAR_Server_App_Context.NotificationStatus = status;
 8004648:	7018      	strb	r0, [r3, #0]
  if(status == 1)
 800464a:	d004      	beq.n	8004656 <MOTIONAR_Set_Notification_Status+0x12>
  else
  {
    /* Set accelerometer:
     *   - FS   = <-2g, 2g>
     */
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 800464c:	2202      	movs	r2, #2
 800464e:	4611      	mov	r1, r2
 8004650:	2000      	movs	r0, #0
 8004652:	f006 b841 	b.w	800a6d8 <IKS01A3_MOTION_SENSOR_SetFullScale>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 4);
 8004656:	2204      	movs	r2, #4
 8004658:	2102      	movs	r1, #2
 800465a:	2000      	movs	r0, #0
 800465c:	f006 b83c 	b.w	800a6d8 <IKS01A3_MOTION_SENSOR_SetFullScale>
 8004660:	2000055c 	.word	0x2000055c

08004664 <MOTIONAR_Send_Notification_Task>:
 * @brief  Send a notification for Activity Recognition events
 * @param  None
 * @retval None
 */
void MOTIONAR_Send_Notification_Task(void)
{
 8004664:	b530      	push	{r4, r5, lr}
 8004666:	b089      	sub	sp, #36	; 0x24
 * @retval None
 */
static void ComputeMotionAR(void)
{
  IKS01A3_MOTION_SENSOR_Axes_t ACC_Value;
  MAR_input_t data_in = {.acc_x = 0.0f, .acc_y = 0.0f, .acc_z = 0.0f};
 8004668:	2300      	movs	r3, #0
  static MAR_output_t ActivityCodePrev = MAR_NOACTIVITY;

  /* Read the Acc values */
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 800466a:	aa02      	add	r2, sp, #8
 800466c:	2102      	movs	r1, #2
 800466e:	2000      	movs	r0, #0
  MAR_input_t data_in = {.acc_x = 0.0f, .acc_y = 0.0f, .acc_z = 0.0f};
 8004670:	9305      	str	r3, [sp, #20]
 8004672:	9306      	str	r3, [sp, #24]
 8004674:	9307      	str	r3, [sp, #28]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 8004676:	f005 ffb1 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>

  /* Convert acceleration from [mg] to [g] */
  data_in.acc_x = (float)ACC_Value.x * FROM_MG_TO_G;
 800467a:	eddd 7a02 	vldr	s15, [sp, #8]
 800467e:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800470c <MOTIONAR_Send_Notification_Task+0xa8>
  data_in.acc_y = (float)ACC_Value.y * FROM_MG_TO_G;
  data_in.acc_z = (float)ACC_Value.z * FROM_MG_TO_G;

  MotionAR_manager_run(&data_in, &MOTIONAR_Server_App_Context.ActivityCode, MOTIONAR_Server_App_Context.TimeStamp);
 8004682:	4c23      	ldr	r4, [pc, #140]	; (8004710 <MOTIONAR_Send_Notification_Task+0xac>)
  data_in.acc_x = (float)ACC_Value.x * FROM_MG_TO_G;
 8004684:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  data_in.acc_y = (float)ACC_Value.y * FROM_MG_TO_G;
 8004688:	eddd 7a03 	vldr	s15, [sp, #12]
  MotionAR_manager_run(&data_in, &MOTIONAR_Server_App_Context.ActivityCode, MOTIONAR_Server_App_Context.TimeStamp);
 800468c:	6862      	ldr	r2, [r4, #4]
  data_in.acc_y = (float)ACC_Value.y * FROM_MG_TO_G;
 800468e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  data_in.acc_z = (float)ACC_Value.z * FROM_MG_TO_G;
 8004692:	eddd 7a04 	vldr	s15, [sp, #16]
 8004696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  data_in.acc_x = (float)ACC_Value.x * FROM_MG_TO_G;
 800469a:	ee66 6a86 	vmul.f32	s13, s13, s12
  data_in.acc_y = (float)ACC_Value.y * FROM_MG_TO_G;
 800469e:	ee27 7a06 	vmul.f32	s14, s14, s12
  data_in.acc_z = (float)ACC_Value.z * FROM_MG_TO_G;
 80046a2:	ee67 7a86 	vmul.f32	s15, s15, s12
  MotionAR_manager_run(&data_in, &MOTIONAR_Server_App_Context.ActivityCode, MOTIONAR_Server_App_Context.TimeStamp);
 80046a6:	f104 0108 	add.w	r1, r4, #8
 80046aa:	a805      	add	r0, sp, #20
  data_in.acc_x = (float)ACC_Value.x * FROM_MG_TO_G;
 80046ac:	edcd 6a05 	vstr	s13, [sp, #20]
  data_in.acc_y = (float)ACC_Value.y * FROM_MG_TO_G;
 80046b0:	ed8d 7a06 	vstr	s14, [sp, #24]
  data_in.acc_z = (float)ACC_Value.z * FROM_MG_TO_G;
 80046b4:	edcd 7a07 	vstr	s15, [sp, #28]
  MotionAR_manager_run(&data_in, &MOTIONAR_Server_App_Context.ActivityCode, MOTIONAR_Server_App_Context.TimeStamp);
 80046b8:	f7fd fdc2 	bl	8002240 <MotionAR_manager_run>

  if(ActivityCodePrev != MOTIONAR_Server_App_Context.ActivityCode)
 80046bc:	4b15      	ldr	r3, [pc, #84]	; (8004714 <MOTIONAR_Send_Notification_Task+0xb0>)
 80046be:	7a25      	ldrb	r5, [r4, #8]
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	42aa      	cmp	r2, r5
 80046c4:	d019      	beq.n	80046fa <MOTIONAR_Send_Notification_Task+0x96>
  {
    ActivityCodePrev = MOTIONAR_Server_App_Context.ActivityCode;
    if(MOTIONAR_Server_App_Context.NotificationStatus)
 80046c6:	7822      	ldrb	r2, [r4, #0]
    ActivityCodePrev = MOTIONAR_Server_App_Context.ActivityCode;
 80046c8:	701d      	strb	r5, [r3, #0]
    if(MOTIONAR_Server_App_Context.NotificationStatus)
 80046ca:	b1da      	cbz	r2, 8004704 <MOTIONAR_Send_Notification_Task+0xa0>
static void ActivityRec_Update(MAR_output_t ActivityCode)
{
  uint8_t value[VALUE_LEN_AR];

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80046cc:	f006 faa6 	bl	800ac1c <HAL_GetTick>
 80046d0:	08c0      	lsrs	r0, r0, #3
 80046d2:	f88d 0004 	strb.w	r0, [sp, #4]
 80046d6:	f006 faa1 	bl	800ac1c <HAL_GetTick>
 80046da:	0ac3      	lsrs	r3, r0, #11
  value[2] = ActivityCode;

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- MOTIONAR APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 80046dc:	480e      	ldr	r0, [pc, #56]	; (8004718 <MOTIONAR_Send_Notification_Task+0xb4>)
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80046de:	f88d 3005 	strb.w	r3, [sp, #5]
  value[2] = ActivityCode;
 80046e2:	f88d 5006 	strb.w	r5, [sp, #6]
  APP_DBG_MSG("-- MOTIONAR APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 80046e6:	f01e fb5b 	bl	8022da0 <iprintf>
  APP_DBG_MSG(" \n\r");
 80046ea:	480c      	ldr	r0, [pc, #48]	; (800471c <MOTIONAR_Send_Notification_Task+0xb8>)
 80046ec:	f01e fb58 	bl	8022da0 <iprintf>
#endif
  MOTENV_STM_App_Update_Char(ACTIVITY_REC_CHAR_UUID, VALUE_LEN_AR, (uint8_t *)&value);
 80046f0:	aa01      	add	r2, sp, #4
 80046f2:	2103      	movs	r1, #3
 80046f4:	2010      	movs	r0, #16
 80046f6:	f00a fa0b 	bl	800eb10 <MOTENV_STM_App_Update_Char>
  MOTIONAR_Server_App_Context.TimeStamp += MOTIONAR_ALGO_PERIOD;
 80046fa:	6863      	ldr	r3, [r4, #4]
 80046fc:	333e      	adds	r3, #62	; 0x3e
 80046fe:	6063      	str	r3, [r4, #4]
}
 8004700:	b009      	add	sp, #36	; 0x24
 8004702:	bd30      	pop	{r4, r5, pc}
      APP_DBG_MSG("-- MOTIONAR APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 8004704:	4806      	ldr	r0, [pc, #24]	; (8004720 <MOTIONAR_Send_Notification_Task+0xbc>)
 8004706:	f01e fb4b 	bl	8022da0 <iprintf>
 800470a:	e7f6      	b.n	80046fa <MOTIONAR_Send_Notification_Task+0x96>
 800470c:	3a83126f 	.word	0x3a83126f
 8004710:	2000055c 	.word	0x2000055c
 8004714:	200013ec 	.word	0x200013ec
 8004718:	08025764 	.word	0x08025764
 800471c:	080244dc 	.word	0x080244dc
 8004720:	080257b0 	.word	0x080257b0

08004724 <MOTIONAR_ActivityRec_Update>:
{
 8004724:	b510      	push	{r4, lr}
  ActivityRec_Update(MOTIONAR_Server_App_Context.ActivityCode);
 8004726:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <MOTIONAR_ActivityRec_Update+0x3c>)
{
 8004728:	b082      	sub	sp, #8
  ActivityRec_Update(MOTIONAR_Server_App_Context.ActivityCode);
 800472a:	7a1c      	ldrb	r4, [r3, #8]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800472c:	f006 fa76 	bl	800ac1c <HAL_GetTick>
 8004730:	08c0      	lsrs	r0, r0, #3
 8004732:	f88d 0004 	strb.w	r0, [sp, #4]
 8004736:	f006 fa71 	bl	800ac1c <HAL_GetTick>
 800473a:	0ac3      	lsrs	r3, r0, #11
  APP_DBG_MSG("-- MOTIONAR APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 800473c:	4809      	ldr	r0, [pc, #36]	; (8004764 <MOTIONAR_ActivityRec_Update+0x40>)
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800473e:	f88d 3005 	strb.w	r3, [sp, #5]
  value[2] = ActivityCode;
 8004742:	f88d 4006 	strb.w	r4, [sp, #6]
  APP_DBG_MSG("-- MOTIONAR APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 8004746:	f01e fb2b 	bl	8022da0 <iprintf>
  APP_DBG_MSG(" \n\r");
 800474a:	4807      	ldr	r0, [pc, #28]	; (8004768 <MOTIONAR_ActivityRec_Update+0x44>)
 800474c:	f01e fb28 	bl	8022da0 <iprintf>
  MOTENV_STM_App_Update_Char(ACTIVITY_REC_CHAR_UUID, VALUE_LEN_AR, (uint8_t *)&value);
 8004750:	aa01      	add	r2, sp, #4
 8004752:	2103      	movs	r1, #3
 8004754:	2010      	movs	r0, #16
 8004756:	f00a f9db 	bl	800eb10 <MOTENV_STM_App_Update_Char>
}
 800475a:	b002      	add	sp, #8
 800475c:	bd10      	pop	{r4, pc}
 800475e:	bf00      	nop
 8004760:	2000055c 	.word	0x2000055c
 8004764:	08025764 	.word	0x08025764
 8004768:	080244dc 	.word	0x080244dc

0800476c <MOTIONCP_Set_Notification_Status>:
 * @param  status The new notification status
 * @retval None
 */
void MOTIONCP_Set_Notification_Status(uint8_t status)
{
  MOTIONCP_Server_App_Context.NotificationStatus = status;
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <MOTIONCP_Set_Notification_Status+0x1c>)
  if(status == 1)
 800476e:	2801      	cmp	r0, #1
  MOTIONCP_Server_App_Context.NotificationStatus = status;
 8004770:	7018      	strb	r0, [r3, #0]
  if(status == 1)
 8004772:	d004      	beq.n	800477e <MOTIONCP_Set_Notification_Status+0x12>
  else
  {
    /* Set accelerometer:
     *   - FS   = <-2g, 2g>
     */
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 8004774:	2202      	movs	r2, #2
 8004776:	4611      	mov	r1, r2
 8004778:	2000      	movs	r0, #0
 800477a:	f005 bfad 	b.w	800a6d8 <IKS01A3_MOTION_SENSOR_SetFullScale>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 4);
 800477e:	2204      	movs	r2, #4
 8004780:	2102      	movs	r1, #2
 8004782:	2000      	movs	r0, #0
 8004784:	f005 bfa8 	b.w	800a6d8 <IKS01A3_MOTION_SENSOR_SetFullScale>
 8004788:	20000568 	.word	0x20000568

0800478c <MOTIONCP_Send_Notification_Task>:
 * @brief  Send a notification for Carry Position events
 * @param  None
 * @retval None
 */
void MOTIONCP_Send_Notification_Task(void)
{
 800478c:	b530      	push	{r4, r5, lr}
 800478e:	b089      	sub	sp, #36	; 0x24
 * @retval None
 */
static void ComputeMotionCP(void)
{
  IKS01A3_MOTION_SENSOR_Axes_t ACC_Value;
  MCP_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 8004790:	2300      	movs	r3, #0
  static MCP_output_t CarryPositionCodePrev = MCP_UNKNOWN;

  /* Read the Acc values */
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 8004792:	aa02      	add	r2, sp, #8
 8004794:	2102      	movs	r1, #2
 8004796:	2000      	movs	r0, #0
  MCP_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 8004798:	9305      	str	r3, [sp, #20]
 800479a:	9306      	str	r3, [sp, #24]
 800479c:	9307      	str	r3, [sp, #28]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 800479e:	f005 ff1d 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>

  /* Convert acceleration from [mg] to [g] */
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 80047a2:	eddd 7a02 	vldr	s15, [sp, #8]
 80047a6:	ed9f 6a21 	vldr	s12, [pc, #132]	; 800482c <MOTIONCP_Send_Notification_Task+0xa0>
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;

  MotionCP_manager_run(&data_in, &MOTIONCP_Server_App_Context.CarryPositionCode);
 80047aa:	4c21      	ldr	r4, [pc, #132]	; (8004830 <MOTIONCP_Send_Notification_Task+0xa4>)
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 80047ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 80047b0:	eddd 7a03 	vldr	s15, [sp, #12]
 80047b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 80047b8:	eddd 7a04 	vldr	s15, [sp, #16]
 80047bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 80047c0:	ee66 6a86 	vmul.f32	s13, s13, s12
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 80047c4:	ee27 7a06 	vmul.f32	s14, s14, s12
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 80047c8:	ee67 7a86 	vmul.f32	s15, s15, s12
  MotionCP_manager_run(&data_in, &MOTIONCP_Server_App_Context.CarryPositionCode);
 80047cc:	1c61      	adds	r1, r4, #1
 80047ce:	a805      	add	r0, sp, #20
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 80047d0:	edcd 6a05 	vstr	s13, [sp, #20]
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 80047d4:	ed8d 7a06 	vstr	s14, [sp, #24]
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 80047d8:	edcd 7a07 	vstr	s15, [sp, #28]
  MotionCP_manager_run(&data_in, &MOTIONCP_Server_App_Context.CarryPositionCode);
 80047dc:	f7fd fd36 	bl	800224c <MotionCP_manager_run>

  if(CarryPositionCodePrev != MOTIONCP_Server_App_Context.CarryPositionCode)
 80047e0:	4b14      	ldr	r3, [pc, #80]	; (8004834 <MOTIONCP_Send_Notification_Task+0xa8>)
 80047e2:	7865      	ldrb	r5, [r4, #1]
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	42aa      	cmp	r2, r5
 80047e8:	d019      	beq.n	800481e <MOTIONCP_Send_Notification_Task+0x92>
  {
    CarryPositionCodePrev = MOTIONCP_Server_App_Context.CarryPositionCode;
    if(MOTIONCP_Server_App_Context.NotificationStatus)
 80047ea:	7822      	ldrb	r2, [r4, #0]
    CarryPositionCodePrev = MOTIONCP_Server_App_Context.CarryPositionCode;
 80047ec:	701d      	strb	r5, [r3, #0]
    if(MOTIONCP_Server_App_Context.NotificationStatus)
 80047ee:	b1c2      	cbz	r2, 8004822 <MOTIONCP_Send_Notification_Task+0x96>
static void CarryPosition_Update(MCP_output_t CarryPositionCode)
{
  uint8_t value[VALUE_LEN_CP];

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80047f0:	f006 fa14 	bl	800ac1c <HAL_GetTick>
 80047f4:	08c0      	lsrs	r0, r0, #3
 80047f6:	f88d 0004 	strb.w	r0, [sp, #4]
 80047fa:	f006 fa0f 	bl	800ac1c <HAL_GetTick>
 80047fe:	0ac3      	lsrs	r3, r0, #11
  value[2] = CarryPositionCode;

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- MOTIONCP APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 8004800:	480d      	ldr	r0, [pc, #52]	; (8004838 <MOTIONCP_Send_Notification_Task+0xac>)
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004802:	f88d 3005 	strb.w	r3, [sp, #5]
  value[2] = CarryPositionCode;
 8004806:	f88d 5006 	strb.w	r5, [sp, #6]
  APP_DBG_MSG("-- MOTIONCP APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 800480a:	f01e fac9 	bl	8022da0 <iprintf>
  APP_DBG_MSG(" \n\r");
 800480e:	480b      	ldr	r0, [pc, #44]	; (800483c <MOTIONCP_Send_Notification_Task+0xb0>)
 8004810:	f01e fac6 	bl	8022da0 <iprintf>
#endif
  MOTENV_STM_App_Update_Char(CARRY_POSITION_CHAR_UUID, VALUE_LEN_CP, (uint8_t *)&value);
 8004814:	aa01      	add	r2, sp, #4
 8004816:	2103      	movs	r1, #3
 8004818:	2008      	movs	r0, #8
 800481a:	f00a f979 	bl	800eb10 <MOTENV_STM_App_Update_Char>
}
 800481e:	b009      	add	sp, #36	; 0x24
 8004820:	bd30      	pop	{r4, r5, pc}
      APP_DBG_MSG("-- MOTIONCP APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 8004822:	4807      	ldr	r0, [pc, #28]	; (8004840 <MOTIONCP_Send_Notification_Task+0xb4>)
 8004824:	f01e fabc 	bl	8022da0 <iprintf>
}
 8004828:	b009      	add	sp, #36	; 0x24
 800482a:	bd30      	pop	{r4, r5, pc}
 800482c:	3a83126f 	.word	0x3a83126f
 8004830:	20000568 	.word	0x20000568
 8004834:	200013ed 	.word	0x200013ed
 8004838:	08025800 	.word	0x08025800
 800483c:	080244dc 	.word	0x080244dc
 8004840:	0802584c 	.word	0x0802584c

08004844 <MOTIONCP_CarryPosition_Update>:
{
 8004844:	b510      	push	{r4, lr}
  CarryPosition_Update(MOTIONCP_Server_App_Context.CarryPositionCode);
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <MOTIONCP_CarryPosition_Update+0x3c>)
{
 8004848:	b082      	sub	sp, #8
  CarryPosition_Update(MOTIONCP_Server_App_Context.CarryPositionCode);
 800484a:	785c      	ldrb	r4, [r3, #1]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800484c:	f006 f9e6 	bl	800ac1c <HAL_GetTick>
 8004850:	08c0      	lsrs	r0, r0, #3
 8004852:	f88d 0004 	strb.w	r0, [sp, #4]
 8004856:	f006 f9e1 	bl	800ac1c <HAL_GetTick>
 800485a:	0ac3      	lsrs	r3, r0, #11
  APP_DBG_MSG("-- MOTIONCP APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 800485c:	4809      	ldr	r0, [pc, #36]	; (8004884 <MOTIONCP_CarryPosition_Update+0x40>)
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800485e:	f88d 3005 	strb.w	r3, [sp, #5]
  value[2] = CarryPositionCode;
 8004862:	f88d 4006 	strb.w	r4, [sp, #6]
  APP_DBG_MSG("-- MOTIONCP APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 8004866:	f01e fa9b 	bl	8022da0 <iprintf>
  APP_DBG_MSG(" \n\r");
 800486a:	4807      	ldr	r0, [pc, #28]	; (8004888 <MOTIONCP_CarryPosition_Update+0x44>)
 800486c:	f01e fa98 	bl	8022da0 <iprintf>
  MOTENV_STM_App_Update_Char(CARRY_POSITION_CHAR_UUID, VALUE_LEN_CP, (uint8_t *)&value);
 8004870:	aa01      	add	r2, sp, #4
 8004872:	2103      	movs	r1, #3
 8004874:	2008      	movs	r0, #8
 8004876:	f00a f94b 	bl	800eb10 <MOTENV_STM_App_Update_Char>
}
 800487a:	b002      	add	sp, #8
 800487c:	bd10      	pop	{r4, pc}
 800487e:	bf00      	nop
 8004880:	20000568 	.word	0x20000568
 8004884:	08025800 	.word	0x08025800
 8004888:	080244dc 	.word	0x080244dc

0800488c <ComputeQuaternions>:
 * @brief  MotionFX Working function
 * @param  None
 * @retval None
 */
static void ComputeQuaternions(void)
{
 800488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  IKS01A3_MOTION_SENSOR_Axes_t ACC_Value;
  IKS01A3_MOTION_SENSOR_Axes_t GYR_Value;
  IKS01A3_MOTION_SENSOR_Axes_t MAG_Value;

   /* Increment the Counter */
  if(MOTIONFX_Server_App_Context.QuatNotificationStatus)
 8004890:	4cd0      	ldr	r4, [pc, #832]	; (8004bd4 <ComputeQuaternions+0x348>)
 8004892:	7823      	ldrb	r3, [r4, #0]
{
 8004894:	b0ae      	sub	sp, #184	; 0xb8
  if(MOTIONFX_Server_App_Context.QuatNotificationStatus)
 8004896:	b1fb      	cbz	r3, 80048d8 <ComputeQuaternions+0x4c>
  {
    CounterFX++;
 8004898:	4dcf      	ldr	r5, [pc, #828]	; (8004bd8 <ComputeQuaternions+0x34c>)
 800489a:	682b      	ldr	r3, [r5, #0]
 800489c:	3301      	adds	r3, #1
 800489e:	602b      	str	r3, [r5, #0]
 * @param  ACC_Value Accelerometer value to be read
 * @retval None
 */
static void Accelero_Sensor_Handler(IKS01A3_MOTION_SENSOR_Axes_t *ACC_Value)
{
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, ACC_Value);
 80048a0:	aa07      	add	r2, sp, #28
 80048a2:	2102      	movs	r1, #2
 80048a4:	2000      	movs	r0, #0
 80048a6:	f005 fe99 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>
 * @param  GYR_Value Gyro value to be read
 * @retval None
 */
static void Gyro_Sensor_Handler(IKS01A3_MOTION_SENSOR_Axes_t *GYR_Value)
{
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, GYR_Value);
 80048aa:	aa0a      	add	r2, sp, #40	; 0x28
 80048ac:	2101      	movs	r1, #1
 80048ae:	2000      	movs	r0, #0
 80048b0:	f005 fe94 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>
  float ans_float;
  MFX_MagCal_input_t mag_data_in;
  MFX_MagCal_output_t mag_data_out;
  static int32_t calibIndex = 0;

  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2MDL_0, MOTION_MAGNETO, MAG_Value);
 80048b4:	aa0d      	add	r2, sp, #52	; 0x34
 80048b6:	2104      	movs	r1, #4
 80048b8:	2002      	movs	r0, #2
 80048ba:	f005 fe8f 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>

  if (MOTIONFX_Server_App_Context.MagCalStatus == 0U)
 80048be:	7d23      	ldrb	r3, [r4, #20]
 80048c0:	b993      	cbnz	r3, 80048e8 <ComputeQuaternions+0x5c>
  {
    /* Run Compass Calibration @ 25Hz */
    calibIndex++;
 80048c2:	68aa      	ldr	r2, [r5, #8]
    if (calibIndex == 4)
 80048c4:	2a03      	cmp	r2, #3
    calibIndex++;
 80048c6:	f102 0101 	add.w	r1, r2, #1
    if (calibIndex == 4)
 80048ca:	f000 80d2 	beq.w	8004a72 <ComputeQuaternions+0x1e6>
    calibIndex++;
 80048ce:	60a9      	str	r1, [r5, #8]
 80048d0:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 80048d4:	af16      	add	r7, sp, #88	; 0x58
 80048d6:	e00c      	b.n	80048f2 <ComputeQuaternions+0x66>
  else if(MOTIONFX_Server_App_Context.ECompassNotificationStatus)
 80048d8:	7863      	ldrb	r3, [r4, #1]
    CounterEC++;
 80048da:	4dbf      	ldr	r5, [pc, #764]	; (8004bd8 <ComputeQuaternions+0x34c>)
  else if(MOTIONFX_Server_App_Context.ECompassNotificationStatus)
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0df      	beq.n	80048a0 <ComputeQuaternions+0x14>
    CounterEC++;
 80048e0:	686b      	ldr	r3, [r5, #4]
 80048e2:	3301      	adds	r3, #1
 80048e4:	606b      	str	r3, [r5, #4]
 80048e6:	e7db      	b.n	80048a0 <ComputeQuaternions+0x14>
      }
    }
  }
  else
  {
    calibIndex = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60ab      	str	r3, [r5, #8]
 80048ec:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 80048f0:	af16      	add	r7, sp, #88	; 0x58
  }

  MAG_Value->x = (int32_t)(MAG_Value->x - MOTIONFX_Server_App_Context.MAG_Offset.x);
 80048f2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  data_in.mag[0] = (float)MAG_Value.x * FROM_MGAUSS_TO_UT50;
 80048f4:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8004bdc <ComputeQuaternions+0x350>
  data_in.gyro[0] = (float)GYR_Value.x * FROM_MDPS_TO_DPS;
 80048f8:	eddf 7ab9 	vldr	s15, [pc, #740]	; 8004be0 <ComputeQuaternions+0x354>
  MotionFX_manager_run(pdata_in, pdata_out, MOTIONFX_ENGINE_DELTATIME);
 80048fc:	4638      	mov	r0, r7
  MAG_Value->x = (int32_t)(MAG_Value->x - MOTIONFX_Server_App_Context.MAG_Offset.x);
 80048fe:	6867      	ldr	r7, [r4, #4]
 8004900:	1bf6      	subs	r6, r6, r7
  data_in.mag[0] = (float)MAG_Value.x * FROM_MGAUSS_TO_UT50;
 8004902:	ee06 6a90 	vmov	s13, r6
  MAG_Value->y = (int32_t)(MAG_Value->y - MOTIONFX_Server_App_Context.MAG_Offset.y);
  MAG_Value->z = (int32_t)(MAG_Value->z - MOTIONFX_Server_App_Context.MAG_Offset.z);
 8004906:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  data_in.mag[0] = (float)MAG_Value.x * FROM_MGAUSS_TO_UT50;
 800490a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  MAG_Value->x = (int32_t)(MAG_Value->x - MOTIONFX_Server_App_Context.MAG_Offset.x);
 800490e:	960d      	str	r6, [sp, #52]	; 0x34
  MAG_Value->y = (int32_t)(MAG_Value->y - MOTIONFX_Server_App_Context.MAG_Offset.y);
 8004910:	68a6      	ldr	r6, [r4, #8]
  data_in.mag[0] = (float)MAG_Value.x * FROM_MGAUSS_TO_UT50;
 8004912:	ee66 6a87 	vmul.f32	s13, s13, s14
  MAG_Value->y = (int32_t)(MAG_Value->y - MOTIONFX_Server_App_Context.MAG_Offset.y);
 8004916:	1b92      	subs	r2, r2, r6
  data_in.mag[0] = (float)MAG_Value.x * FROM_MGAUSS_TO_UT50;
 8004918:	edcd 6a16 	vstr	s13, [sp, #88]	; 0x58
  data_in.mag[1] = (float)MAG_Value.y * FROM_MGAUSS_TO_UT50;
 800491c:	ee06 2a90 	vmov	s13, r2
 8004920:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  MAG_Value->y = (int32_t)(MAG_Value->y - MOTIONFX_Server_App_Context.MAG_Offset.y);
 8004924:	920e      	str	r2, [sp, #56]	; 0x38
  MAG_Value->z = (int32_t)(MAG_Value->z - MOTIONFX_Server_App_Context.MAG_Offset.z);
 8004926:	68e2      	ldr	r2, [r4, #12]
  data_in.mag[1] = (float)MAG_Value.y * FROM_MGAUSS_TO_UT50;
 8004928:	ee66 6a87 	vmul.f32	s13, s13, s14
  MAG_Value->z = (int32_t)(MAG_Value->z - MOTIONFX_Server_App_Context.MAG_Offset.z);
 800492c:	1a9b      	subs	r3, r3, r2
  data_in.mag[1] = (float)MAG_Value.y * FROM_MGAUSS_TO_UT50;
 800492e:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
  data_in.mag[2] = (float)MAG_Value.z * FROM_MGAUSS_TO_UT50;
 8004932:	ee06 3a90 	vmov	s13, r3
 8004936:	eeb8 4ae6 	vcvt.f32.s32	s8, s13
  MotionFX_manager_run(pdata_in, pdata_out, MOTIONFX_ENGINE_DELTATIME);
 800493a:	4aaa      	ldr	r2, [pc, #680]	; (8004be4 <ComputeQuaternions+0x358>)
  MAG_Value->z = (int32_t)(MAG_Value->z - MOTIONFX_Server_App_Context.MAG_Offset.z);
 800493c:	930f      	str	r3, [sp, #60]	; 0x3c
  data_in.mag[2] = (float)MAG_Value.z * FROM_MGAUSS_TO_UT50;
 800493e:	ee24 4a07 	vmul.f32	s8, s8, s14
  data_in.gyro[0] = (float)GYR_Value.x * FROM_MDPS_TO_DPS;
 8004942:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
  data_in.mag[2] = (float)MAG_Value.z * FROM_MGAUSS_TO_UT50;
 8004946:	ed8d 4a18 	vstr	s8, [sp, #96]	; 0x60
  data_in.gyro[0] = (float)GYR_Value.x * FROM_MDPS_TO_DPS;
 800494a:	eef8 4ac7 	vcvt.f32.s32	s9, s14
  data_in.gyro[1] = (float)GYR_Value.y * FROM_MDPS_TO_DPS;
 800494e:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8004952:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
  data_in.gyro[2] = (float)GYR_Value.z * FROM_MDPS_TO_DPS;
 8004956:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 800495a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
  data_in.acc[0] = (float)ACC_Value.x * FROM_MG_TO_G;
 800495e:	ed9d 7a07 	vldr	s14, [sp, #28]
 8004962:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
  data_in.acc[1] = (float)ACC_Value.y * FROM_MG_TO_G;
 8004966:	ed9d 7a08 	vldr	s14, [sp, #32]
 800496a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  data_in.acc[2] = (float)ACC_Value.z * FROM_MG_TO_G;
 800496e:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8004972:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  data_in.gyro[0] = (float)GYR_Value.x * FROM_MDPS_TO_DPS;
 8004976:	ee64 4aa7 	vmul.f32	s9, s9, s15
  data_in.gyro[1] = (float)GYR_Value.y * FROM_MDPS_TO_DPS;
 800497a:	ee25 5a27 	vmul.f32	s10, s10, s15
  data_in.gyro[2] = (float)GYR_Value.z * FROM_MDPS_TO_DPS;
 800497e:	ee65 5aa7 	vmul.f32	s11, s11, s15
  data_in.acc[0] = (float)ACC_Value.x * FROM_MG_TO_G;
 8004982:	ee26 6a27 	vmul.f32	s12, s12, s15
  data_in.acc[1] = (float)ACC_Value.y * FROM_MG_TO_G;
 8004986:	ee66 6aa7 	vmul.f32	s13, s13, s15
  data_in.acc[2] = (float)ACC_Value.z * FROM_MG_TO_G;
 800498a:	ee67 7a27 	vmul.f32	s15, s14, s15
  MotionFX_manager_run(pdata_in, pdata_out, MOTIONFX_ENGINE_DELTATIME);
 800498e:	4641      	mov	r1, r8
  data_in.gyro[0] = (float)GYR_Value.x * FROM_MDPS_TO_DPS;
 8004990:	edcd 4a1c 	vstr	s9, [sp, #112]	; 0x70
  data_in.gyro[1] = (float)GYR_Value.y * FROM_MDPS_TO_DPS;
 8004994:	ed8d 5a1d 	vstr	s10, [sp, #116]	; 0x74
  data_in.gyro[2] = (float)GYR_Value.z * FROM_MDPS_TO_DPS;
 8004998:	edcd 5a1e 	vstr	s11, [sp, #120]	; 0x78
  data_in.acc[0] = (float)ACC_Value.x * FROM_MG_TO_G;
 800499c:	ed8d 6a19 	vstr	s12, [sp, #100]	; 0x64
  data_in.acc[1] = (float)ACC_Value.y * FROM_MG_TO_G;
 80049a0:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
  data_in.acc[2] = (float)ACC_Value.z * FROM_MG_TO_G;
 80049a4:	edcd 7a1b 	vstr	s15, [sp, #108]	; 0x6c
  MotionFX_manager_run(pdata_in, pdata_out, MOTIONFX_ENGINE_DELTATIME);
 80049a8:	f7fd fca2 	bl	80022f0 <MotionFX_manager_run>
  if(MOTIONFX_Server_App_Context.QuatNotificationStatus)
 80049ac:	7823      	ldrb	r3, [r4, #0]
 80049ae:	b38b      	cbz	r3, 8004a14 <ComputeQuaternions+0x188>
    int32_t QuaternionNumber = (CounterFX>SEND_N_QUATERNIONS) ? (SEND_N_QUATERNIONS-1) : (CounterFX-1);
 80049b0:	682a      	ldr	r2, [r5, #0]
    if(pdata_out->quaternion[3] < 0)
 80049b2:	eddd 7a25 	vldr	s15, [sp, #148]	; 0x94
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].x = (int32_t)(pdata_out->quaternion[0] * 10000);
 80049b6:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].y = (int32_t)(pdata_out->quaternion[1] * 10000);
 80049ba:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
    int32_t QuaternionNumber = (CounterFX>SEND_N_QUATERNIONS) ? (SEND_N_QUATERNIONS-1) : (CounterFX-1);
 80049be:	2a03      	cmp	r2, #3
    if(pdata_out->quaternion[3] < 0)
 80049c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    int32_t QuaternionNumber = (CounterFX>SEND_N_QUATERNIONS) ? (SEND_N_QUATERNIONS-1) : (CounterFX-1);
 80049c4:	4613      	mov	r3, r2
 80049c6:	bfa8      	it	ge
 80049c8:	2303      	movge	r3, #3
    if(pdata_out->quaternion[3] < 0)
 80049ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].x = (int32_t)(pdata_out->quaternion[0] * (-10000));
 80049ce:	bf4c      	ite	mi
 80049d0:	ed9f 6a85 	vldrmi	s12, [pc, #532]	; 8004be8 <ComputeQuaternions+0x35c>
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].x = (int32_t)(pdata_out->quaternion[0] * 10000);
 80049d4:	ed9f 6a85 	vldrpl	s12, [pc, #532]	; 8004bec <ComputeQuaternions+0x360>
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].z = (int32_t)(pdata_out->quaternion[2] * 10000);
 80049d8:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].x = (int32_t)(pdata_out->quaternion[0] * 10000);
 80049dc:	ee27 7a06 	vmul.f32	s14, s14, s12
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].y = (int32_t)(pdata_out->quaternion[1] * 10000);
 80049e0:	ee66 6a86 	vmul.f32	s13, s13, s12
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].z = (int32_t)(pdata_out->quaternion[2] * 10000);
 80049e4:	ee67 7a86 	vmul.f32	s15, s15, s12
    int32_t QuaternionNumber = (CounterFX>SEND_N_QUATERNIONS) ? (SEND_N_QUATERNIONS-1) : (CounterFX-1);
 80049e8:	3b01      	subs	r3, #1
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].x = (int32_t)(pdata_out->quaternion[0] * 10000);
 80049ea:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].y = (int32_t)(pdata_out->quaternion[1] * 10000);
 80049ee:	eefd 6ae6 	vcvt.s32.f32	s13, s13
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].z = (int32_t)(pdata_out->quaternion[2] * 10000);
 80049f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].x = (int32_t)(pdata_out->quaternion[0] * 10000);
 80049f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80049fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    if(CounterFX == QUAT_UPDATE_MUL_10MS)
 80049fe:	2a03      	cmp	r2, #3
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].y = (int32_t)(pdata_out->quaternion[1] * 10000);
 8004a00:	edc3 6a07 	vstr	s13, [r3, #28]
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].x = (int32_t)(pdata_out->quaternion[0] * 10000);
 8004a04:	ed83 7a06 	vstr	s14, [r3, #24]
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].z = (int32_t)(pdata_out->quaternion[2] * 10000);
 8004a08:	edc3 7a08 	vstr	s15, [r3, #32]
    if(CounterFX == QUAT_UPDATE_MUL_10MS)
 8004a0c:	d06d      	beq.n	8004aea <ComputeQuaternions+0x25e>
}
 8004a0e:	b02e      	add	sp, #184	; 0xb8
 8004a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(MOTIONFX_Server_App_Context.ECompassNotificationStatus)
 8004a14:	7863      	ldrb	r3, [r4, #1]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f9      	beq.n	8004a0e <ComputeQuaternions+0x182>
    if(CounterEC == 10)
 8004a1a:	686b      	ldr	r3, [r5, #4]
 8004a1c:	2b0a      	cmp	r3, #10
 8004a1e:	d1f6      	bne.n	8004a0e <ComputeQuaternions+0x182>
      MOTIONFX_Server_App_Context.Angle = (uint16_t)trunc(100*pdata_out->heading);
 8004a20:	ed9d 7a2c 	vldr	s14, [sp, #176]	; 0xb0
 8004a24:	eddf 7a72 	vldr	s15, [pc, #456]	; 8004bf0 <ComputeQuaternions+0x364>
 8004a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2c:	ee17 0a90 	vmov	r0, s15
 8004a30:	f7fb fd5a 	bl	80004e8 <__aeabi_f2d>
 8004a34:	f01c fce4 	bl	8021400 <trunc>
 8004a38:	f7fc f886 	bl	8000b48 <__aeabi_d2uiz>
 8004a3c:	b286      	uxth	r6, r0
 8004a3e:	87a6      	strh	r6, [r4, #60]	; 0x3c
static void ECompass_Update(uint16_t Angle)
{
  uint8_t value[VALUE_LEN_ECOMPASS];

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004a40:	f006 f8ec 	bl	800ac1c <HAL_GetTick>
 8004a44:	08c0      	lsrs	r0, r0, #3
 8004a46:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
 8004a4a:	f006 f8e7 	bl	800ac1c <HAL_GetTick>

  STORE_LE_16(value+2, Angle);
  
  if(MOTIONFX_Server_App_Context.ECompassNotificationStatus)
 8004a4e:	7863      	ldrb	r3, [r4, #1]
  STORE_LE_16(value+2, Angle);
 8004a50:	f88d 6042 	strb.w	r6, [sp, #66]	; 0x42
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004a54:	0ac0      	lsrs	r0, r0, #11
  STORE_LE_16(value+2, Angle);
 8004a56:	0a32      	lsrs	r2, r6, #8
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004a58:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
  STORE_LE_16(value+2, Angle);
 8004a5c:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
  if(MOTIONFX_Server_App_Context.ECompassNotificationStatus)
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f040 80d3 	bne.w	8004c0c <ComputeQuaternions+0x380>
    MOTENV_STM_App_Update_Char(ECOMPASS_CHAR_UUID, VALUE_LEN_ECOMPASS, (uint8_t *)&value);
  }
  else
  {
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- MOTIONFX APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 8004a66:	4863      	ldr	r0, [pc, #396]	; (8004bf4 <ComputeQuaternions+0x368>)
 8004a68:	f01e f99a 	bl	8022da0 <iprintf>
      CounterEC = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	606b      	str	r3, [r5, #4]
}
 8004a70:	e7cd      	b.n	8004a0e <ComputeQuaternions+0x182>
      mag_data_in.mag[0] = (float)MAG_Value->x * FROM_MGAUSS_TO_UT50;
 8004a72:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8004a76:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8004bdc <ComputeQuaternions+0x350>
      mag_data_in.time_stamp = (int)MOTIONFX_Server_App_Context.MagTimeStamp;
 8004a7a:	6922      	ldr	r2, [r4, #16]
      calibIndex = 0;
 8004a7c:	60ab      	str	r3, [r5, #8]
      mag_data_in.mag[0] = (float)MAG_Value->x * FROM_MGAUSS_TO_UT50;
 8004a7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      mag_data_in.mag[1] = (float)MAG_Value->y * FROM_MGAUSS_TO_UT50;
 8004a82:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
      mag_data_in.time_stamp = (int)MOTIONFX_Server_App_Context.MagTimeStamp;
 8004a86:	9219      	str	r2, [sp, #100]	; 0x64
      mag_data_in.mag[1] = (float)MAG_Value->y * FROM_MGAUSS_TO_UT50;
 8004a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      mag_data_in.mag[2] = (float)MAG_Value->z * FROM_MGAUSS_TO_UT50;
 8004a8c:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8004a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      MOTIONFX_Server_App_Context.MagTimeStamp += (uint32_t)MOTIONFX_ALGO_PERIOD;
 8004a94:	f102 010a 	add.w	r1, r2, #10
      mag_data_in.mag[0] = (float)MAG_Value->x * FROM_MGAUSS_TO_UT50;
 8004a98:	ee66 6a86 	vmul.f32	s13, s13, s12
      mag_data_in.mag[1] = (float)MAG_Value->y * FROM_MGAUSS_TO_UT50;
 8004a9c:	ee27 7a06 	vmul.f32	s14, s14, s12
      mag_data_in.mag[2] = (float)MAG_Value->z * FROM_MGAUSS_TO_UT50;
 8004aa0:	ee67 7a86 	vmul.f32	s15, s15, s12
      MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 8004aa4:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8004aa8:	af16      	add	r7, sp, #88	; 0x58
      MOTIONFX_Server_App_Context.MagTimeStamp += (uint32_t)MOTIONFX_ALGO_PERIOD;
 8004aaa:	6121      	str	r1, [r4, #16]
      MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 8004aac:	4638      	mov	r0, r7
 8004aae:	4641      	mov	r1, r8
      mag_data_in.mag[0] = (float)MAG_Value->x * FROM_MGAUSS_TO_UT50;
 8004ab0:	edcd 6a16 	vstr	s13, [sp, #88]	; 0x58
      mag_data_in.mag[1] = (float)MAG_Value->y * FROM_MGAUSS_TO_UT50;
 8004ab4:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
      mag_data_in.mag[2] = (float)MAG_Value->z * FROM_MGAUSS_TO_UT50;
 8004ab8:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
      MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 8004abc:	f7fd fc42 	bl	8002344 <MotionFX_manager_MagCal_run>
      if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 8004ac0:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	f000 80a7 	beq.w	8004c18 <ComputeQuaternions+0x38c>
      if(MOTIONFX_Server_App_Context.MagCalStatus == 1)
 8004aca:	7d23      	ldrb	r3, [r4, #20]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	f47f af10 	bne.w	80048f2 <ComputeQuaternions+0x66>
        CONFIG_Send_Notification(FEATURE_MASK_SENSORFUSION_SHORT, W2ST_COMMAND_CAL_STATUS, 100);
 8004ad2:	2264      	movs	r2, #100	; 0x64
 8004ad4:	21ff      	movs	r1, #255	; 0xff
 8004ad6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004ada:	f7fd fe99 	bl	8002810 <CONFIG_Send_Notification>
        CONFIG_Send_Notification(FEATURE_MASK_ECOMPASS, W2ST_COMMAND_CAL_STATUS, 100);
 8004ade:	2264      	movs	r2, #100	; 0x64
 8004ae0:	21ff      	movs	r1, #255	; 0xff
 8004ae2:	2040      	movs	r0, #64	; 0x40
 8004ae4:	f7fd fe94 	bl	8002810 <CONFIG_Send_Notification>
 8004ae8:	e703      	b.n	80048f2 <ComputeQuaternions+0x66>
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004aea:	f006 f897 	bl	800ac1c <HAL_GetTick>
 8004aee:	08c0      	lsrs	r0, r0, #3
 8004af0:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
 8004af4:	f006 f892 	bl	800ac1c <HAL_GetTick>
  STORE_LE_16(value+2,data[0].x);
 8004af8:	69a3      	ldr	r3, [r4, #24]
  STORE_LE_16(value+4,data[0].y);
 8004afa:	69e2      	ldr	r2, [r4, #28]
  STORE_LE_16(value+2,data[0].x);
 8004afc:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 8004b00:	1219      	asrs	r1, r3, #8
  STORE_LE_16(value+6,data[0].z);
 8004b02:	6a23      	ldr	r3, [r4, #32]
  STORE_LE_16(value+2,data[0].x);
 8004b04:	f88d 1043 	strb.w	r1, [sp, #67]	; 0x43
  STORE_LE_16(value+4,data[0].y);
 8004b08:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
 8004b0c:	1211      	asrs	r1, r2, #8
  STORE_LE_16(value+8 ,data[1].x);
 8004b0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
  STORE_LE_16(value+4,data[0].y);
 8004b10:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004b14:	0ac0      	lsrs	r0, r0, #11
  STORE_LE_16(value+6,data[0].z);
 8004b16:	1219      	asrs	r1, r3, #8
 8004b18:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  STORE_LE_16(value+10,data[1].y);
 8004b1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004b1e:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
  STORE_LE_16(value+8 ,data[1].x);
 8004b22:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 8004b26:	1210      	asrs	r0, r2, #8
  STORE_LE_16(value+12,data[1].z);
 8004b28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  STORE_LE_16(value+6,data[0].z);
 8004b2a:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  STORE_LE_16(value+10,data[1].y);
 8004b2e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
 8004b32:	1219      	asrs	r1, r3, #8
  STORE_LE_16(value+14,data[2].x);
 8004b34:	6b23      	ldr	r3, [r4, #48]	; 0x30
  STORE_LE_16(value+10,data[1].y);
 8004b36:	f88d 104b 	strb.w	r1, [sp, #75]	; 0x4b
  STORE_LE_16(value+12,data[1].z);
 8004b3a:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
 8004b3e:	1211      	asrs	r1, r2, #8
  STORE_LE_16(value+16,data[2].y);
 8004b40:	6b62      	ldr	r2, [r4, #52]	; 0x34
  STORE_LE_16(value+8 ,data[1].x);
 8004b42:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
  STORE_LE_16(value+14,data[2].x);
 8004b46:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
 8004b4a:	1218      	asrs	r0, r3, #8
  STORE_LE_16(value+18,data[2].z);
 8004b4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  STORE_LE_16(value+14,data[2].x);
 8004b4e:	f88d 004f 	strb.w	r0, [sp, #79]	; 0x4f
  STORE_LE_16(value+12,data[1].z);
 8004b52:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
  STORE_LE_16(value+16,data[2].y);
 8004b56:	1210      	asrs	r0, r2, #8
  if(MOTIONFX_Server_App_Context.QuatNotificationStatus)
 8004b58:	7821      	ldrb	r1, [r4, #0]
  STORE_LE_16(value+16,data[2].y);
 8004b5a:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
 8004b5e:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
  STORE_LE_16(value+20, SENSOR_ID);
 8004b62:	2201      	movs	r2, #1
  STORE_LE_16(value+18,data[2].z);
 8004b64:	1218      	asrs	r0, r3, #8
 8004b66:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
  STORE_LE_16(value+20, SENSOR_ID);
 8004b6a:	2300      	movs	r3, #0
  STORE_LE_16(value+18,data[2].z);
 8004b6c:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
  STORE_LE_16(value+20, SENSOR_ID);
 8004b70:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
 8004b74:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
  if(MOTIONFX_Server_App_Context.QuatNotificationStatus)
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	d043      	beq.n	8004c04 <ComputeQuaternions+0x378>
    APP_DBG_MSG("-- MOTIONFX APPLICATION SERVER : NOTIFY CLIENT WITH NEW QUAT PARAMETER VALUE \n ");
 8004b7c:	481e      	ldr	r0, [pc, #120]	; (8004bf8 <ComputeQuaternions+0x36c>)
 8004b7e:	f01e f90f 	bl	8022da0 <iprintf>
    APP_DBG_MSG(" \n\r");
 8004b82:	481e      	ldr	r0, [pc, #120]	; (8004bfc <ComputeQuaternions+0x370>)
 8004b84:	f01e f90c 	bl	8022da0 <iprintf>
    APP_DBG_MSG("%d, %d, %d / %d, %d, %d / %d, %d, %d\n\r", *(value+2), *(value+4), *(value+6),
 8004b88:	f89d 0052 	ldrb.w	r0, [sp, #82]	; 0x52
 8004b8c:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8004b90:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
 8004b94:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8004b98:	f89d 404a 	ldrb.w	r4, [sp, #74]	; 0x4a
 8004b9c:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8004ba0:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8004ba4:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
 8004ba8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8004bac:	e9cd 0400 	strd	r0, r4, [sp]
 8004bb0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8004bb4:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8004bb8:	4811      	ldr	r0, [pc, #68]	; (8004c00 <ComputeQuaternions+0x374>)
 8004bba:	f01e f8f1 	bl	8022da0 <iprintf>
    MOTENV_STM_App_Update_Char(MOTION_FX_CHAR_UUID, VALUE_LEN_QUAT, (uint8_t *)&value);
 8004bbe:	aa10      	add	r2, sp, #64	; 0x40
 8004bc0:	2116      	movs	r1, #22
 8004bc2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004bc6:	f009 ffa3 	bl	800eb10 <MOTENV_STM_App_Update_Char>
      CounterFX = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	602b      	str	r3, [r5, #0]
}
 8004bce:	b02e      	add	sp, #184	; 0xb8
 8004bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd4:	2000056c 	.word	0x2000056c
 8004bd8:	200013f0 	.word	0x200013f0
 8004bdc:	3b03126f 	.word	0x3b03126f
 8004be0:	3a83126f 	.word	0x3a83126f
 8004be4:	3c23d70a 	.word	0x3c23d70a
 8004be8:	c61c4000 	.word	0xc61c4000
 8004bec:	461c4000 	.word	0x461c4000
 8004bf0:	42c80000 	.word	0x42c80000
 8004bf4:	08025914 	.word	0x08025914
 8004bf8:	0802589c 	.word	0x0802589c
 8004bfc:	080244dc 	.word	0x080244dc
 8004c00:	080258ec 	.word	0x080258ec
    APP_DBG_MSG("-- MOTIONFX APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 8004c04:	4814      	ldr	r0, [pc, #80]	; (8004c58 <ComputeQuaternions+0x3cc>)
 8004c06:	f01e f8cb 	bl	8022da0 <iprintf>
 8004c0a:	e7de      	b.n	8004bca <ComputeQuaternions+0x33e>
    MOTENV_STM_App_Update_Char(ECOMPASS_CHAR_UUID, VALUE_LEN_ECOMPASS, (uint8_t *)&value);
 8004c0c:	aa10      	add	r2, sp, #64	; 0x40
 8004c0e:	2104      	movs	r1, #4
 8004c10:	2040      	movs	r0, #64	; 0x40
 8004c12:	f009 ff7d 	bl	800eb10 <MOTENV_STM_App_Update_Char>
 8004c16:	e729      	b.n	8004a6c <ComputeQuaternions+0x1e0>
        ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8004c18:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004c5c <ComputeQuaternions+0x3d0>
 8004c1c:	ed9d 7a1f 	vldr	s14, [sp, #124]	; 0x7c
        ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8004c20:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
        ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8004c24:	eddd 7a21 	vldr	s15, [sp, #132]	; 0x84
        ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8004c28:	ee27 7a06 	vmul.f32	s14, s14, s12
        ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8004c2c:	ee66 6a86 	vmul.f32	s13, s13, s12
        ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8004c30:	ee67 7a86 	vmul.f32	s15, s15, s12
        MOTIONFX_Server_App_Context.MAG_Offset.x = (int32_t)ans_float;
 8004c34:	eebd 7ac7 	vcvt.s32.f32	s14, s14
        MOTIONFX_Server_App_Context.MAG_Offset.y = (int32_t)ans_float;
 8004c38:	eefd 6ae6 	vcvt.s32.f32	s13, s13
        MOTIONFX_Server_App_Context.MAG_Offset.z = (int32_t)ans_float;
 8004c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        MOTIONFX_Server_App_Context.MagCalStatus = 1;
 8004c40:	2301      	movs	r3, #1
        MotionFX_manager_MagCal_stop(MOTIONFX_ALGO_PERIOD);
 8004c42:	200a      	movs	r0, #10
        MOTIONFX_Server_App_Context.MAG_Offset.y = (int32_t)ans_float;
 8004c44:	edc4 6a02 	vstr	s13, [r4, #8]
        MOTIONFX_Server_App_Context.MagCalStatus = 1;
 8004c48:	7523      	strb	r3, [r4, #20]
        MOTIONFX_Server_App_Context.MAG_Offset.x = (int32_t)ans_float;
 8004c4a:	ed84 7a01 	vstr	s14, [r4, #4]
        MOTIONFX_Server_App_Context.MAG_Offset.z = (int32_t)ans_float;
 8004c4e:	edc4 7a03 	vstr	s15, [r4, #12]
        MotionFX_manager_MagCal_stop(MOTIONFX_ALGO_PERIOD);
 8004c52:	f7fd fb85 	bl	8002360 <MotionFX_manager_MagCal_stop>
 8004c56:	e738      	b.n	8004aca <ComputeQuaternions+0x23e>
 8004c58:	08025914 	.word	0x08025914
 8004c5c:	43fa0000 	.word	0x43fa0000

08004c60 <MOTIONFX_Context_Init>:
{
 8004c60:	b530      	push	{r4, r5, lr}
  MOTIONFX_Server_App_Context.MagTimeStamp = 0;
 8004c62:	4c24      	ldr	r4, [pc, #144]	; (8004cf4 <MOTIONFX_Context_Init+0x94>)
{
 8004c64:	b085      	sub	sp, #20
  MOTIONFX_Server_App_Context.MagTimeStamp = 0;
 8004c66:	2500      	movs	r5, #0
 8004c68:	6125      	str	r5, [r4, #16]
  MOTIONFX_Server_App_Context.MagCalStatus = 0;
 8004c6a:	7525      	strb	r5, [r4, #20]
  MotionFX_manager_init();
 8004c6c:	f7fd faf0 	bl	8002250 <MotionFX_manager_init>
  MotionFX_manager_start_9X();
 8004c70:	f7fd fb62 	bl	8002338 <MotionFX_manager_start_9X>
static void MagCalibTest(void)
{
  MFX_MagCal_output_t mag_cal_test;
  
  /* Recall the calibration Credential saved */
  MotionFX_manager_MagCal_start(MOTIONFX_ALGO_PERIOD);
 8004c74:	200a      	movs	r0, #10
 8004c76:	f7fd fb6f 	bl	8002358 <MotionFX_manager_MagCal_start>
  MotionFX_MagCal_getParams(&mag_cal_test);
 8004c7a:	4668      	mov	r0, sp
 8004c7c:	f017 fef0 	bl	801ca60 <MotionFX_MagCal_getParams>
    
  if(mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8004c80:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d015      	beq.n	8004cb4 <MOTIONFX_Context_Init+0x54>
  }
  else
  {
    MOTIONFX_Server_App_Context.MagCalStatus = 0;
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- MOTIONFX APPLICATION SERVER : Magneto Calibration quality is not good\r\n");
 8004c88:	481b      	ldr	r0, [pc, #108]	; (8004cf8 <MOTIONFX_Context_Init+0x98>)
    MOTIONFX_Server_App_Context.MagCalStatus = 0;
 8004c8a:	7525      	strb	r5, [r4, #20]
    APP_DBG_MSG("-- MOTIONFX APPLICATION SERVER : Magneto Calibration quality is not good\r\n");
 8004c8c:	f01e f90e 	bl	8022eac <puts>
#endif
  }
  
  if(!MOTIONFX_Server_App_Context.MagCalStatus)
 8004c90:	7d23      	ldrb	r3, [r4, #20]
 8004c92:	b913      	cbnz	r3, 8004c9a <MOTIONFX_Context_Init+0x3a>
  {
    MOTIONFX_Server_App_Context.MAG_Offset.x = 0;
    MOTIONFX_Server_App_Context.MAG_Offset.y = 0;
 8004c94:	e9c4 3301 	strd	r3, r3, [r4, #4]
    MOTIONFX_Server_App_Context.MAG_Offset.z = 0;
 8004c98:	60e3      	str	r3, [r4, #12]
  manuf_data[6] |= 0x01; /* Sensor fusion*/
 8004c9a:	4b18      	ldr	r3, [pc, #96]	; (8004cfc <MOTIONFX_Context_Init+0x9c>)
 8004c9c:	7999      	ldrb	r1, [r3, #6]
  manuf_data[7] |= 0x40; /* ECompass*/
 8004c9e:	79da      	ldrb	r2, [r3, #7]
  MOTIONFX_Server_App_Context.QuatNotificationStatus = status;
 8004ca0:	2000      	movs	r0, #0
  manuf_data[6] |= 0x01; /* Sensor fusion*/
 8004ca2:	f041 0101 	orr.w	r1, r1, #1
  manuf_data[7] |= 0x40; /* ECompass*/
 8004ca6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  manuf_data[6] |= 0x01; /* Sensor fusion*/
 8004caa:	7199      	strb	r1, [r3, #6]
  manuf_data[7] |= 0x40; /* ECompass*/
 8004cac:	71da      	strb	r2, [r3, #7]
  MOTIONFX_Server_App_Context.QuatNotificationStatus = status;
 8004cae:	8020      	strh	r0, [r4, #0]
}
 8004cb0:	b005      	add	sp, #20
 8004cb2:	bd30      	pop	{r4, r5, pc}
    MOTIONFX_Server_App_Context.MAG_Offset.x = (int32_t) (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8004cb4:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8004d00 <MOTIONFX_Context_Init+0xa0>
 8004cb8:	eddd 6a00 	vldr	s13, [sp]
    MOTIONFX_Server_App_Context.MAG_Offset.y = (int32_t) (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8004cbc:	ed9d 7a01 	vldr	s14, [sp, #4]
    MOTIONFX_Server_App_Context.MAG_Offset.z = (int32_t) (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8004cc0:	eddd 7a02 	vldr	s15, [sp, #8]
    APP_DBG_MSG("-- MOTIONFX APPLICATION SERVER : Magneto Calibration Read\r\n");
 8004cc4:	480f      	ldr	r0, [pc, #60]	; (8004d04 <MOTIONFX_Context_Init+0xa4>)
    MOTIONFX_Server_App_Context.MAG_Offset.x = (int32_t) (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8004cc6:	ee66 6a86 	vmul.f32	s13, s13, s12
    MOTIONFX_Server_App_Context.MAG_Offset.y = (int32_t) (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8004cca:	ee27 7a06 	vmul.f32	s14, s14, s12
    MOTIONFX_Server_App_Context.MAG_Offset.z = (int32_t) (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8004cce:	ee67 7a86 	vmul.f32	s15, s15, s12
    MOTIONFX_Server_App_Context.MAG_Offset.x = (int32_t) (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8004cd2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    MOTIONFX_Server_App_Context.MAG_Offset.y = (int32_t) (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8004cd6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    MOTIONFX_Server_App_Context.MAG_Offset.z = (int32_t) (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8004cda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    MOTIONFX_Server_App_Context.MagCalStatus = 1;
 8004cde:	2301      	movs	r3, #1
    MOTIONFX_Server_App_Context.MAG_Offset.x = (int32_t) (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8004ce0:	edc4 6a01 	vstr	s13, [r4, #4]
    MOTIONFX_Server_App_Context.MAG_Offset.y = (int32_t) (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8004ce4:	ed84 7a02 	vstr	s14, [r4, #8]
    MOTIONFX_Server_App_Context.MAG_Offset.z = (int32_t) (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8004ce8:	edc4 7a03 	vstr	s15, [r4, #12]
    MOTIONFX_Server_App_Context.MagCalStatus = 1;
 8004cec:	7523      	strb	r3, [r4, #20]
    APP_DBG_MSG("-- MOTIONFX APPLICATION SERVER : Magneto Calibration Read\r\n");
 8004cee:	f01e f8dd 	bl	8022eac <puts>
 8004cf2:	e7cd      	b.n	8004c90 <MOTIONFX_Context_Init+0x30>
 8004cf4:	2000056c 	.word	0x2000056c
 8004cf8:	080259a0 	.word	0x080259a0
 8004cfc:	2000000c 	.word	0x2000000c
 8004d00:	43fa0000 	.word	0x43fa0000
 8004d04:	08025964 	.word	0x08025964

08004d08 <MOTIONFX_Set_Quat_Notification_Status>:
  MOTIONFX_Server_App_Context.QuatNotificationStatus = status;
 8004d08:	4b01      	ldr	r3, [pc, #4]	; (8004d10 <MOTIONFX_Set_Quat_Notification_Status+0x8>)
 8004d0a:	7018      	strb	r0, [r3, #0]
}
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	2000056c 	.word	0x2000056c

08004d14 <MOTIONFX_Set_ECompass_Notification_Status>:
  MOTIONFX_Server_App_Context.ECompassNotificationStatus = status;
 8004d14:	4b01      	ldr	r3, [pc, #4]	; (8004d1c <MOTIONFX_Set_ECompass_Notification_Status+0x8>)
 8004d16:	7058      	strb	r0, [r3, #1]
}
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	2000056c 	.word	0x2000056c

08004d20 <MOTIONFX_Send_Quat_Notification_Task>:
  ComputeQuaternions();
 8004d20:	f7ff bdb4 	b.w	800488c <ComputeQuaternions>

08004d24 <MOTIONFX_Send_ECompass_Notification_Task>:
 8004d24:	f7ff bdb2 	b.w	800488c <ComputeQuaternions>

08004d28 <MOTIONFX_Get_MagCalStatus>:
  return MOTIONFX_Server_App_Context.MagCalStatus;
 8004d28:	4b01      	ldr	r3, [pc, #4]	; (8004d30 <MOTIONFX_Get_MagCalStatus+0x8>)
}
 8004d2a:	7d18      	ldrb	r0, [r3, #20]
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	2000056c 	.word	0x2000056c

08004d34 <MOTIONFX_Get_MAG_Offset>:
}
 8004d34:	4800      	ldr	r0, [pc, #0]	; (8004d38 <MOTIONFX_Get_MAG_Offset+0x4>)
 8004d36:	4770      	bx	lr
 8004d38:	20000570 	.word	0x20000570

08004d3c <MOTIONFX_ReCalibration>:
{
 8004d3c:	b510      	push	{r4, lr}
  MOTIONFX_Server_App_Context.MagCalStatus = 0;
 8004d3e:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <MOTIONFX_ReCalibration+0x28>)
 8004d40:	2400      	movs	r4, #0
  CONFIG_Send_Notification(FEATURE_MASK_SENSORFUSION_SHORT, W2ST_COMMAND_CAL_STATUS, 0);
 8004d42:	4622      	mov	r2, r4
 8004d44:	21ff      	movs	r1, #255	; 0xff
 8004d46:	f44f 7080 	mov.w	r0, #256	; 0x100
  MOTIONFX_Server_App_Context.MagCalStatus = 0;
 8004d4a:	751c      	strb	r4, [r3, #20]
  CONFIG_Send_Notification(FEATURE_MASK_SENSORFUSION_SHORT, W2ST_COMMAND_CAL_STATUS, 0);
 8004d4c:	f7fd fd60 	bl	8002810 <CONFIG_Send_Notification>
  CONFIG_Send_Notification(FEATURE_MASK_ECOMPASS, W2ST_COMMAND_CAL_STATUS, 0);
 8004d50:	4622      	mov	r2, r4
 8004d52:	2040      	movs	r0, #64	; 0x40
 8004d54:	21ff      	movs	r1, #255	; 0xff
 8004d56:	f7fd fd5b 	bl	8002810 <CONFIG_Send_Notification>
}
 8004d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MotionFX_manager_MagCal_start(MOTIONFX_ALGO_PERIOD);
 8004d5e:	200a      	movs	r0, #10
 8004d60:	f7fd bafa 	b.w	8002358 <MotionFX_manager_MagCal_start>
 8004d64:	2000056c 	.word	0x2000056c

08004d68 <MOTIONGR_Set_Notification_Status>:
 * @param  status The new notification status
 * @retval None
 */
void MOTIONGR_Set_Notification_Status(uint8_t status)
{
  MOTIONGR_Server_App_Context.NotificationStatus = status;
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <MOTIONGR_Set_Notification_Status+0x1c>)
  if(status == 1)
 8004d6a:	2801      	cmp	r0, #1
  MOTIONGR_Server_App_Context.NotificationStatus = status;
 8004d6c:	7018      	strb	r0, [r3, #0]
  if(status == 1)
 8004d6e:	d004      	beq.n	8004d7a <MOTIONGR_Set_Notification_Status+0x12>
  else
  {
    /* Set accelerometer:
     *   - FS   = <-2g, 2g>
     */
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 8004d70:	2202      	movs	r2, #2
 8004d72:	4611      	mov	r1, r2
 8004d74:	2000      	movs	r0, #0
 8004d76:	f005 bcaf 	b.w	800a6d8 <IKS01A3_MOTION_SENSOR_SetFullScale>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 4);
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	2000      	movs	r0, #0
 8004d80:	f005 bcaa 	b.w	800a6d8 <IKS01A3_MOTION_SENSOR_SetFullScale>
 8004d84:	200005ac 	.word	0x200005ac

08004d88 <MOTIONGR_Send_Notification_Task>:
 * @brief  Send a notification for Gesture Recognition events
 * @param  None
 * @retval None
 */
void MOTIONGR_Send_Notification_Task(void)
{
 8004d88:	b530      	push	{r4, r5, lr}
 8004d8a:	b089      	sub	sp, #36	; 0x24
 * @retval None
 */
static void ComputeMotionGR(void)
{
  IKS01A3_MOTION_SENSOR_Axes_t ACC_Value;
  MGR_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 8004d8c:	2300      	movs	r3, #0
  static MGR_output_t GestureRecCodePrev = MGR_NOGESTURE;

  /* Read the Acc values */
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 8004d8e:	aa02      	add	r2, sp, #8
 8004d90:	2102      	movs	r1, #2
 8004d92:	2000      	movs	r0, #0
  MGR_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 8004d94:	9305      	str	r3, [sp, #20]
 8004d96:	9306      	str	r3, [sp, #24]
 8004d98:	9307      	str	r3, [sp, #28]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 8004d9a:	f005 fc1f 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>

  /* Convert acceleration from [mg] to [g] */
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004d9e:	eddd 7a02 	vldr	s15, [sp, #8]
 8004da2:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8004e2c <MOTIONGR_Send_Notification_Task+0xa4>
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;

  MotionGR_manager_run(&data_in, &MOTIONGR_Server_App_Context.GestureRecCode);
 8004da6:	4c22      	ldr	r4, [pc, #136]	; (8004e30 <MOTIONGR_Send_Notification_Task+0xa8>)
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004da8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8004dac:	eddd 7a03 	vldr	s15, [sp, #12]
 8004db0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004db4:	eddd 7a04 	vldr	s15, [sp, #16]
 8004db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004dbc:	ee66 6a86 	vmul.f32	s13, s13, s12
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8004dc0:	ee27 7a06 	vmul.f32	s14, s14, s12
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004dc4:	ee67 7a86 	vmul.f32	s15, s15, s12
  MotionGR_manager_run(&data_in, &MOTIONGR_Server_App_Context.GestureRecCode);
 8004dc8:	1c61      	adds	r1, r4, #1
 8004dca:	a805      	add	r0, sp, #20
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004dcc:	edcd 6a05 	vstr	s13, [sp, #20]
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8004dd0:	ed8d 7a06 	vstr	s14, [sp, #24]
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004dd4:	edcd 7a07 	vstr	s15, [sp, #28]
  MotionGR_manager_run(&data_in, &MOTIONGR_Server_App_Context.GestureRecCode);
 8004dd8:	f7fd fac6 	bl	8002368 <MotionGR_manager_run>

  if(GestureRecCodePrev != MOTIONGR_Server_App_Context.GestureRecCode)
 8004ddc:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <MOTIONGR_Send_Notification_Task+0xac>)
 8004dde:	7865      	ldrb	r5, [r4, #1]
 8004de0:	781a      	ldrb	r2, [r3, #0]
 8004de2:	42aa      	cmp	r2, r5
 8004de4:	d01a      	beq.n	8004e1c <MOTIONGR_Send_Notification_Task+0x94>
  {
    GestureRecCodePrev = MOTIONGR_Server_App_Context.GestureRecCode;
    if(MOTIONGR_Server_App_Context.NotificationStatus)
 8004de6:	7822      	ldrb	r2, [r4, #0]
    GestureRecCodePrev = MOTIONGR_Server_App_Context.GestureRecCode;
 8004de8:	701d      	strb	r5, [r3, #0]
    if(MOTIONGR_Server_App_Context.NotificationStatus)
 8004dea:	b1ca      	cbz	r2, 8004e20 <MOTIONGR_Send_Notification_Task+0x98>
static void GestureRec_Update(MGR_output_t GestureRecCode)
{
  uint8_t value[VALUE_LEN_GR];

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004dec:	f005 ff16 	bl	800ac1c <HAL_GetTick>
 8004df0:	08c0      	lsrs	r0, r0, #3
 8004df2:	f88d 0004 	strb.w	r0, [sp, #4]
 8004df6:	f005 ff11 	bl	800ac1c <HAL_GetTick>
 8004dfa:	0ac3      	lsrs	r3, r0, #11
  value[2] = GestureRecCode;

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- MOTIONGR APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 8004dfc:	480e      	ldr	r0, [pc, #56]	; (8004e38 <MOTIONGR_Send_Notification_Task+0xb0>)
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004dfe:	f88d 3005 	strb.w	r3, [sp, #5]
  value[2] = GestureRecCode;
 8004e02:	f88d 5006 	strb.w	r5, [sp, #6]
  APP_DBG_MSG("-- MOTIONGR APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 8004e06:	f01d ffcb 	bl	8022da0 <iprintf>
  APP_DBG_MSG(" \n\r");
 8004e0a:	480c      	ldr	r0, [pc, #48]	; (8004e3c <MOTIONGR_Send_Notification_Task+0xb4>)
 8004e0c:	f01d ffc8 	bl	8022da0 <iprintf>
#endif
  MOTENV_STM_App_Update_Char(GESTURE_REC_CHAR_UUID, VALUE_LEN_GR, (uint8_t *)&value);
 8004e10:	aa01      	add	r2, sp, #4
 8004e12:	2103      	movs	r1, #3
 8004e14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e18:	f009 fe7a 	bl	800eb10 <MOTENV_STM_App_Update_Char>
}
 8004e1c:	b009      	add	sp, #36	; 0x24
 8004e1e:	bd30      	pop	{r4, r5, pc}
      APP_DBG_MSG("-- MOTIONGR APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 8004e20:	4807      	ldr	r0, [pc, #28]	; (8004e40 <MOTIONGR_Send_Notification_Task+0xb8>)
 8004e22:	f01d ffbd 	bl	8022da0 <iprintf>
}
 8004e26:	b009      	add	sp, #36	; 0x24
 8004e28:	bd30      	pop	{r4, r5, pc}
 8004e2a:	bf00      	nop
 8004e2c:	3a83126f 	.word	0x3a83126f
 8004e30:	200005ac 	.word	0x200005ac
 8004e34:	200013fc 	.word	0x200013fc
 8004e38:	080259ec 	.word	0x080259ec
 8004e3c:	080244dc 	.word	0x080244dc
 8004e40:	08025a38 	.word	0x08025a38

08004e44 <MOTIONGR_GestureRec_Update>:
{
 8004e44:	b510      	push	{r4, lr}
  GestureRec_Update(MOTIONGR_Server_App_Context.GestureRecCode);
 8004e46:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <MOTIONGR_GestureRec_Update+0x3c>)
{
 8004e48:	b082      	sub	sp, #8
  GestureRec_Update(MOTIONGR_Server_App_Context.GestureRecCode);
 8004e4a:	785c      	ldrb	r4, [r3, #1]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004e4c:	f005 fee6 	bl	800ac1c <HAL_GetTick>
 8004e50:	08c0      	lsrs	r0, r0, #3
 8004e52:	f88d 0004 	strb.w	r0, [sp, #4]
 8004e56:	f005 fee1 	bl	800ac1c <HAL_GetTick>
 8004e5a:	0ac3      	lsrs	r3, r0, #11
  APP_DBG_MSG("-- MOTIONGR APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 8004e5c:	4809      	ldr	r0, [pc, #36]	; (8004e84 <MOTIONGR_GestureRec_Update+0x40>)
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004e5e:	f88d 3005 	strb.w	r3, [sp, #5]
  value[2] = GestureRecCode;
 8004e62:	f88d 4006 	strb.w	r4, [sp, #6]
  APP_DBG_MSG("-- MOTIONGR APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 8004e66:	f01d ff9b 	bl	8022da0 <iprintf>
  APP_DBG_MSG(" \n\r");
 8004e6a:	4807      	ldr	r0, [pc, #28]	; (8004e88 <MOTIONGR_GestureRec_Update+0x44>)
 8004e6c:	f01d ff98 	bl	8022da0 <iprintf>
  MOTENV_STM_App_Update_Char(GESTURE_REC_CHAR_UUID, VALUE_LEN_GR, (uint8_t *)&value);
 8004e70:	aa01      	add	r2, sp, #4
 8004e72:	2103      	movs	r1, #3
 8004e74:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004e78:	f009 fe4a 	bl	800eb10 <MOTENV_STM_App_Update_Char>
}
 8004e7c:	b002      	add	sp, #8
 8004e7e:	bd10      	pop	{r4, pc}
 8004e80:	200005ac 	.word	0x200005ac
 8004e84:	080259ec 	.word	0x080259ec
 8004e88:	080244dc 	.word	0x080244dc

08004e8c <MOTIONID_Set_Notification_Status>:
 * @param  status The new notification status
 * @retval None
 */
void MOTIONID_Set_Notification_Status(uint8_t status)
{
  MOTIONID_Server_App_Context.NotificationStatus = status;
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <MOTIONID_Set_Notification_Status+0x1c>)
  if(status == 1)
 8004e8e:	2801      	cmp	r0, #1
  MOTIONID_Server_App_Context.NotificationStatus = status;
 8004e90:	7018      	strb	r0, [r3, #0]
  if(status == 1)
 8004e92:	d004      	beq.n	8004e9e <MOTIONID_Set_Notification_Status+0x12>
  else
  {
    /* Set accelerometer:
     *   - FS   = <-2g, 2g>
     */
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 8004e94:	2202      	movs	r2, #2
 8004e96:	4611      	mov	r1, r2
 8004e98:	2000      	movs	r0, #0
 8004e9a:	f005 bc1d 	b.w	800a6d8 <IKS01A3_MOTION_SENSOR_SetFullScale>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 4);
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	2102      	movs	r1, #2
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f005 bc18 	b.w	800a6d8 <IKS01A3_MOTION_SENSOR_SetFullScale>
 8004ea8:	200005b0 	.word	0x200005b0

08004eac <MOTIONID_Send_Notification_Task>:
 * @brief  Send a notification for Motion Intensity events
 * @param  None
 * @retval None
 */
void MOTIONID_Send_Notification_Task(void)
{
 8004eac:	b530      	push	{r4, r5, lr}
 8004eae:	b089      	sub	sp, #36	; 0x24
 * @retval None
 */
static void ComputeMotionID(void)
{
  IKS01A3_MOTION_SENSOR_Axes_t ACC_Value;
  MID_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 8004eb0:	2300      	movs	r3, #0
  static MID_output_t MIDCodePrev = MID_ON_DESK;

  /* Read the Acc values */
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 8004eb2:	aa02      	add	r2, sp, #8
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	2000      	movs	r0, #0
  MID_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 8004eb8:	9305      	str	r3, [sp, #20]
 8004eba:	9306      	str	r3, [sp, #24]
 8004ebc:	9307      	str	r3, [sp, #28]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 8004ebe:	f005 fb8d 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>

  /* Convert acceleration from [mg] to [g] */
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004ec2:	eddd 7a02 	vldr	s15, [sp, #8]
 8004ec6:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8004f4c <MOTIONID_Send_Notification_Task+0xa0>
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;

  MotionID_manager_run(&data_in, &MOTIONID_Server_App_Context.MIDCode);
 8004eca:	4c21      	ldr	r4, [pc, #132]	; (8004f50 <MOTIONID_Send_Notification_Task+0xa4>)
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004ecc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8004ed0:	eddd 7a03 	vldr	s15, [sp, #12]
 8004ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004ed8:	eddd 7a04 	vldr	s15, [sp, #16]
 8004edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004ee0:	ee66 6a86 	vmul.f32	s13, s13, s12
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8004ee4:	ee27 7a06 	vmul.f32	s14, s14, s12
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004ee8:	ee67 7a86 	vmul.f32	s15, s15, s12
  MotionID_manager_run(&data_in, &MOTIONID_Server_App_Context.MIDCode);
 8004eec:	1c61      	adds	r1, r4, #1
 8004eee:	a805      	add	r0, sp, #20
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004ef0:	edcd 6a05 	vstr	s13, [sp, #20]
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8004ef4:	ed8d 7a06 	vstr	s14, [sp, #24]
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004ef8:	edcd 7a07 	vstr	s15, [sp, #28]
  MotionID_manager_run(&data_in, &MOTIONID_Server_App_Context.MIDCode);
 8004efc:	f7fd fa36 	bl	800236c <MotionID_manager_run>

  if(MIDCodePrev != MOTIONID_Server_App_Context.MIDCode)
 8004f00:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <MOTIONID_Send_Notification_Task+0xa8>)
 8004f02:	7865      	ldrb	r5, [r4, #1]
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	42aa      	cmp	r2, r5
 8004f08:	d019      	beq.n	8004f3e <MOTIONID_Send_Notification_Task+0x92>
  {
    MIDCodePrev = MOTIONID_Server_App_Context.MIDCode;
    if(MOTIONID_Server_App_Context.NotificationStatus)
 8004f0a:	7822      	ldrb	r2, [r4, #0]
    MIDCodePrev = MOTIONID_Server_App_Context.MIDCode;
 8004f0c:	701d      	strb	r5, [r3, #0]
    if(MOTIONID_Server_App_Context.NotificationStatus)
 8004f0e:	b1c2      	cbz	r2, 8004f42 <MOTIONID_Send_Notification_Task+0x96>
static void IntensityDet_Update(MID_output_t MIDCode)
{
  uint8_t value[VALUE_LEN_ID];

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004f10:	f005 fe84 	bl	800ac1c <HAL_GetTick>
 8004f14:	08c0      	lsrs	r0, r0, #3
 8004f16:	f88d 0004 	strb.w	r0, [sp, #4]
 8004f1a:	f005 fe7f 	bl	800ac1c <HAL_GetTick>
 8004f1e:	0ac3      	lsrs	r3, r0, #11
  value[2] = MIDCode;

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- MOTIONID APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 8004f20:	480d      	ldr	r0, [pc, #52]	; (8004f58 <MOTIONID_Send_Notification_Task+0xac>)
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004f22:	f88d 3005 	strb.w	r3, [sp, #5]
  value[2] = MIDCode;
 8004f26:	f88d 5006 	strb.w	r5, [sp, #6]
  APP_DBG_MSG("-- MOTIONID APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 8004f2a:	f01d ff39 	bl	8022da0 <iprintf>
  APP_DBG_MSG(" \n\r");
 8004f2e:	480b      	ldr	r0, [pc, #44]	; (8004f5c <MOTIONID_Send_Notification_Task+0xb0>)
 8004f30:	f01d ff36 	bl	8022da0 <iprintf>
#endif
  MOTENV_STM_App_Update_Char(INTENSITY_DET_CHAR_UUID, VALUE_LEN_ID, (uint8_t *)&value);
 8004f34:	aa01      	add	r2, sp, #4
 8004f36:	2103      	movs	r1, #3
 8004f38:	2020      	movs	r0, #32
 8004f3a:	f009 fde9 	bl	800eb10 <MOTENV_STM_App_Update_Char>
}
 8004f3e:	b009      	add	sp, #36	; 0x24
 8004f40:	bd30      	pop	{r4, r5, pc}
      APP_DBG_MSG("-- MOTIONID APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 8004f42:	4807      	ldr	r0, [pc, #28]	; (8004f60 <MOTIONID_Send_Notification_Task+0xb4>)
 8004f44:	f01d ff2c 	bl	8022da0 <iprintf>
}
 8004f48:	b009      	add	sp, #36	; 0x24
 8004f4a:	bd30      	pop	{r4, r5, pc}
 8004f4c:	3a83126f 	.word	0x3a83126f
 8004f50:	200005b0 	.word	0x200005b0
 8004f54:	200013fd 	.word	0x200013fd
 8004f58:	08025a88 	.word	0x08025a88
 8004f5c:	080244dc 	.word	0x080244dc
 8004f60:	08025ad4 	.word	0x08025ad4

08004f64 <MOTIONPM_Set_Notification_Status>:
 * @param  status The new notification status
 * @retval None
 */
void MOTIONPM_Set_Notification_Status(uint8_t status)
{
  MOTIONPM_Server_App_Context.NotificationStatus = status;
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <MOTIONPM_Set_Notification_Status+0x1c>)
  if(status == 1)
 8004f66:	2801      	cmp	r0, #1
  MOTIONPM_Server_App_Context.NotificationStatus = status;
 8004f68:	7018      	strb	r0, [r3, #0]
  if(status == 1)
 8004f6a:	d004      	beq.n	8004f76 <MOTIONPM_Set_Notification_Status+0x12>
  else
  {
    /* Set accelerometer:
     *   - FS   = <-2g, 2g>
     */
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	4611      	mov	r1, r2
 8004f70:	2000      	movs	r0, #0
 8004f72:	f005 bbb1 	b.w	800a6d8 <IKS01A3_MOTION_SENSOR_SetFullScale>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 4);
 8004f76:	2204      	movs	r2, #4
 8004f78:	2102      	movs	r1, #2
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f005 bbac 	b.w	800a6d8 <IKS01A3_MOTION_SENSOR_SetFullScale>
 8004f80:	200005b4 	.word	0x200005b4

08004f84 <MOTIONPM_Send_Notification_Task>:
 * @brief  Send a notification for Motion Pedometer events
 * @param  None
 * @retval None
 */
void MOTIONPM_Send_Notification_Task(void)
{
 8004f84:	b530      	push	{r4, r5, lr}
 8004f86:	b089      	sub	sp, #36	; 0x24
 * @retval None
 */
static void ComputeMotionPM(void)
{
  IKS01A3_MOTION_SENSOR_Axes_t ACC_Value;
  MPM_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 8004f88:	2300      	movs	r3, #0
  static MPM_output_t PMDataPrev = {.Cadence = 0, .Nsteps = 0};

  /* Read the Acc values */
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 8004f8a:	aa02      	add	r2, sp, #8
 8004f8c:	2102      	movs	r1, #2
 8004f8e:	2000      	movs	r0, #0
  MPM_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 8004f90:	9305      	str	r3, [sp, #20]
 8004f92:	9306      	str	r3, [sp, #24]
 8004f94:	9307      	str	r3, [sp, #28]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 8004f96:	f005 fb21 	bl	800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>

  /* Convert acceleration from [mg] to [g] */
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004f9a:	eddd 7a02 	vldr	s15, [sp, #8]
 8004f9e:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8005058 <MOTIONPM_Send_Notification_Task+0xd4>
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;

  MotionPM_manager_run(&data_in, &MOTIONPM_Server_App_Context.PMData);
 8004fa2:	4c2e      	ldr	r4, [pc, #184]	; (800505c <MOTIONPM_Send_Notification_Task+0xd8>)
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004fa4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8004fa8:	eddd 7a03 	vldr	s15, [sp, #12]
 8004fac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004fb0:	eddd 7a04 	vldr	s15, [sp, #16]
 8004fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004fb8:	ee66 6a86 	vmul.f32	s13, s13, s12
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8004fbc:	ee27 7a06 	vmul.f32	s14, s14, s12
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004fc0:	ee67 7a86 	vmul.f32	s15, s15, s12
  MotionPM_manager_run(&data_in, &MOTIONPM_Server_App_Context.PMData);
 8004fc4:	1d21      	adds	r1, r4, #4
 8004fc6:	a805      	add	r0, sp, #20
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004fc8:	edcd 6a05 	vstr	s13, [sp, #20]
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8004fcc:	ed8d 7a06 	vstr	s14, [sp, #24]
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004fd0:	edcd 7a07 	vstr	s15, [sp, #28]
  MotionPM_manager_run(&data_in, &MOTIONPM_Server_App_Context.PMData);
 8004fd4:	f7fd f9cc 	bl	8002370 <MotionPM_manager_run>

  if((PMDataPrev.Cadence != MOTIONPM_Server_App_Context.PMData.Cadence) ||
 8004fd8:	4b21      	ldr	r3, [pc, #132]	; (8005060 <MOTIONPM_Send_Notification_Task+0xdc>)
 8004fda:	7925      	ldrb	r5, [r4, #4]
 8004fdc:	781a      	ldrb	r2, [r3, #0]
 8004fde:	42aa      	cmp	r2, r5
 8004fe0:	d033      	beq.n	800504a <MOTIONPM_Send_Notification_Task+0xc6>
     (PMDataPrev.Nsteps != MOTIONPM_Server_App_Context.PMData.Nsteps))
  {
    PMDataPrev = MOTIONPM_Server_App_Context.PMData;
 8004fe2:	4a20      	ldr	r2, [pc, #128]	; (8005064 <MOTIONPM_Send_Notification_Task+0xe0>)
 8004fe4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fe8:	e883 0003 	stmia.w	r3, {r0, r1}
    if(MOTIONPM_Server_App_Context.NotificationStatus)
 8004fec:	7823      	ldrb	r3, [r4, #0]
 8004fee:	b923      	cbnz	r3, 8004ffa <MOTIONPM_Send_Notification_Task+0x76>
      Pedometer_Update(&MOTIONPM_Server_App_Context.PMData);
    }
    else
    {
#if(CFG_DEBUG_APP_TRACE != 0)
      APP_DBG_MSG("-- MOTIONPM APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
 8004ff0:	481d      	ldr	r0, [pc, #116]	; (8005068 <MOTIONPM_Send_Notification_Task+0xe4>)
 8004ff2:	f01d fed5 	bl	8022da0 <iprintf>
}
 8004ff6:	b009      	add	sp, #36	; 0x24
 8004ff8:	bd30      	pop	{r4, r5, pc}
{
  uint8_t value[VALUE_LEN_PM];
  uint16_t Cadence = (uint16_t) PMData->Cadence;

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004ffa:	f005 fe0f 	bl	800ac1c <HAL_GetTick>
 8004ffe:	08c0      	lsrs	r0, r0, #3
 8005000:	f88d 0000 	strb.w	r0, [sp]
 8005004:	f005 fe0a 	bl	800ac1c <HAL_GetTick>
  STORE_LE_32(value+2,PMData->Nsteps);
 8005008:	68a3      	ldr	r3, [r4, #8]
 800500a:	f88d 3002 	strb.w	r3, [sp, #2]
 800500e:	0a1a      	lsrs	r2, r3, #8
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8005010:	0ac0      	lsrs	r0, r0, #11
  STORE_LE_32(value+2,PMData->Nsteps);
 8005012:	0c19      	lsrs	r1, r3, #16
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8005014:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_LE_32(value+2,PMData->Nsteps);
 8005018:	0e1b      	lsrs	r3, r3, #24
 800501a:	f88d 2003 	strb.w	r2, [sp, #3]
  STORE_LE_16(value+6,Cadence);

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- MOTIONPM APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 800501e:	4813      	ldr	r0, [pc, #76]	; (800506c <MOTIONPM_Send_Notification_Task+0xe8>)
  STORE_LE_32(value+2,PMData->Nsteps);
 8005020:	f88d 1004 	strb.w	r1, [sp, #4]
  STORE_LE_16(value+6,Cadence);
 8005024:	2200      	movs	r2, #0
  STORE_LE_32(value+2,PMData->Nsteps);
 8005026:	f88d 3005 	strb.w	r3, [sp, #5]
  STORE_LE_16(value+6,Cadence);
 800502a:	f88d 2007 	strb.w	r2, [sp, #7]
 800502e:	f88d 5006 	strb.w	r5, [sp, #6]
  APP_DBG_MSG("-- MOTIONPM APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 8005032:	f01d feb5 	bl	8022da0 <iprintf>
  APP_DBG_MSG(" \n\r");
 8005036:	480e      	ldr	r0, [pc, #56]	; (8005070 <MOTIONPM_Send_Notification_Task+0xec>)
 8005038:	f01d feb2 	bl	8022da0 <iprintf>
#endif
  MOTENV_STM_App_Update_Char(PEDOMETER_CHAR_UUID, VALUE_LEN_PM, (uint8_t *)&value);
 800503c:	466a      	mov	r2, sp
 800503e:	2108      	movs	r1, #8
 8005040:	2001      	movs	r0, #1
 8005042:	f009 fd65 	bl	800eb10 <MOTENV_STM_App_Update_Char>
}
 8005046:	b009      	add	sp, #36	; 0x24
 8005048:	bd30      	pop	{r4, r5, pc}
  if((PMDataPrev.Cadence != MOTIONPM_Server_App_Context.PMData.Cadence) ||
 800504a:	6859      	ldr	r1, [r3, #4]
 800504c:	68a2      	ldr	r2, [r4, #8]
 800504e:	4291      	cmp	r1, r2
 8005050:	d1c7      	bne.n	8004fe2 <MOTIONPM_Send_Notification_Task+0x5e>
}
 8005052:	b009      	add	sp, #36	; 0x24
 8005054:	bd30      	pop	{r4, r5, pc}
 8005056:	bf00      	nop
 8005058:	3a83126f 	.word	0x3a83126f
 800505c:	200005b4 	.word	0x200005b4
 8005060:	20001400 	.word	0x20001400
 8005064:	200005b8 	.word	0x200005b8
 8005068:	08025b70 	.word	0x08025b70
 800506c:	08025b24 	.word	0x08025b24
 8005070:	080244dc 	.word	0x080244dc

08005074 <MOTIONPM_Pedometer_Update>:
{
 8005074:	b530      	push	{r4, r5, lr}
  uint16_t Cadence = (uint16_t) PMData->Cadence;
 8005076:	4c15      	ldr	r4, [pc, #84]	; (80050cc <MOTIONPM_Pedometer_Update+0x58>)
{
 8005078:	b083      	sub	sp, #12
  uint16_t Cadence = (uint16_t) PMData->Cadence;
 800507a:	7925      	ldrb	r5, [r4, #4]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800507c:	f005 fdce 	bl	800ac1c <HAL_GetTick>
 8005080:	08c0      	lsrs	r0, r0, #3
 8005082:	f88d 0000 	strb.w	r0, [sp]
 8005086:	f005 fdc9 	bl	800ac1c <HAL_GetTick>
  STORE_LE_32(value+2,PMData->Nsteps);
 800508a:	68a3      	ldr	r3, [r4, #8]
 800508c:	f88d 3002 	strb.w	r3, [sp, #2]
 8005090:	0a1a      	lsrs	r2, r3, #8
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8005092:	0ac0      	lsrs	r0, r0, #11
  STORE_LE_32(value+2,PMData->Nsteps);
 8005094:	0c19      	lsrs	r1, r3, #16
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8005096:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_LE_32(value+2,PMData->Nsteps);
 800509a:	0e1b      	lsrs	r3, r3, #24
 800509c:	f88d 2003 	strb.w	r2, [sp, #3]
  APP_DBG_MSG("-- MOTIONPM APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 80050a0:	480b      	ldr	r0, [pc, #44]	; (80050d0 <MOTIONPM_Pedometer_Update+0x5c>)
  STORE_LE_32(value+2,PMData->Nsteps);
 80050a2:	f88d 1004 	strb.w	r1, [sp, #4]
  STORE_LE_16(value+6,Cadence);
 80050a6:	2200      	movs	r2, #0
  STORE_LE_32(value+2,PMData->Nsteps);
 80050a8:	f88d 3005 	strb.w	r3, [sp, #5]
  STORE_LE_16(value+6,Cadence);
 80050ac:	f88d 2007 	strb.w	r2, [sp, #7]
 80050b0:	f88d 5006 	strb.w	r5, [sp, #6]
  APP_DBG_MSG("-- MOTIONPM APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
 80050b4:	f01d fe74 	bl	8022da0 <iprintf>
  APP_DBG_MSG(" \n\r");
 80050b8:	4806      	ldr	r0, [pc, #24]	; (80050d4 <MOTIONPM_Pedometer_Update+0x60>)
 80050ba:	f01d fe71 	bl	8022da0 <iprintf>
  MOTENV_STM_App_Update_Char(PEDOMETER_CHAR_UUID, VALUE_LEN_PM, (uint8_t *)&value);
 80050be:	466a      	mov	r2, sp
 80050c0:	2108      	movs	r1, #8
 80050c2:	2001      	movs	r0, #1
 80050c4:	f009 fd24 	bl	800eb10 <MOTENV_STM_App_Update_Char>
}
 80050c8:	b003      	add	sp, #12
 80050ca:	bd30      	pop	{r4, r5, pc}
 80050cc:	200005b4 	.word	0x200005b4
 80050d0:	08025b24 	.word	0x08025b24
 80050d4:	080244dc 	.word	0x080244dc

080050d8 <P2PS_Send_Notification>:
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void P2PS_Send_Notification(void)
{
  /* Update P2P_NOTIFY characteristic */
  P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, 0x00);
 80050d8:	2100      	movs	r1, #0
 80050da:	f64f 6042 	movw	r0, #65090	; 0xfe42
 80050de:	f009 be7f 	b.w	800ede0 <P2PS_STM_App_Update_Char>
 80050e2:	bf00      	nop

080050e4 <P2PS_STM_App_Notification>:
  switch(pNotification->P2P_Evt_Opcode)
 80050e4:	7803      	ldrb	r3, [r0, #0]
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d000      	beq.n	80050ec <P2PS_STM_App_Notification+0x8>
}
 80050ea:	4770      	bx	lr
      if(pNotification->DataTransfered.pPayload[1] == 0x01) {
 80050ec:	6843      	ldr	r3, [r0, #4]
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80050ee:	4804      	ldr	r0, [pc, #16]	; (8005100 <P2PS_STM_App_Notification+0x1c>)
      if(pNotification->DataTransfered.pPayload[1] == 0x01) {
 80050f0:	785a      	ldrb	r2, [r3, #1]
 80050f2:	2a01      	cmp	r2, #1
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80050f4:	bf18      	it	ne
 80050f6:	2200      	movne	r2, #0
 80050f8:	2102      	movs	r1, #2
 80050fa:	f006 b9ed 	b.w	800b4d8 <HAL_GPIO_WritePin>
 80050fe:	bf00      	nop
 8005100:	48000400 	.word	0x48000400

08005104 <P2PS_APP_Notification>:
  switch(pNotification->P2P_Evt_Opcode)
 8005104:	7803      	ldrb	r3, [r0, #0]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d000      	beq.n	800510c <P2PS_APP_Notification+0x8>
}
 800510a:	4770      	bx	lr
      MOTENV_APP_HandleDisconnection();
 800510c:	f7fe b9de 	b.w	80034cc <MOTENV_APP_HandleDisconnection>

08005110 <P2PS_APP_Init>:
  UTIL_SEQ_RegTask( 1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification);
 8005110:	4a02      	ldr	r2, [pc, #8]	; (800511c <P2PS_APP_Init+0xc>)
 8005112:	2100      	movs	r1, #0
 8005114:	2008      	movs	r0, #8
 8005116:	f00a b955 	b.w	800f3c4 <UTIL_SEQ_RegTask>
 800511a:	bf00      	nop
 800511c:	080050d9 	.word	0x080050d9

08005120 <HW_IPCC_Enable>:
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8005120:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8005122:	bf20      	wfe
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8005124:	4a02      	ldr	r2, [pc, #8]	; (8005130 <HW_IPCC_Enable+0x10>)
 8005126:	68d3      	ldr	r3, [r2, #12]
 8005128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512c:	60d3      	str	r3, [r2, #12]
  LL_PWR_EnableBootC2( );

  return;
}
 800512e:	4770      	bx	lr
 8005130:	58000400 	.word	0x58000400

08005134 <HW_IPCC_Init>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000

void HW_IPCC_Init( void )
{
 8005138:	b500      	push	{lr}
 800513a:	6d11      	ldr	r1, [r2, #80]	; 0x50
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800513c:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <HW_IPCC_Init+0x40>)
 800513e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005142:	6511      	str	r1, [r2, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005144:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005146:	b083      	sub	sp, #12
 8005148:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800514c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800514e:	9a01      	ldr	r2, [sp, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );

  LL_C1_IPCC_EnableIT_RXO( IPCC );
  LL_C1_IPCC_EnableIT_TXF( IPCC );

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800515e:	202c      	movs	r0, #44	; 0x2c
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	f005 fdd1 	bl	800ad08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8005166:	202d      	movs	r0, #45	; 0x2d

  return;
}
 8005168:	b003      	add	sp, #12
 800516a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800516e:	f005 bdcb 	b.w	800ad08 <HAL_NVIC_EnableIRQ>
 8005172:	bf00      	nop
 8005174:	58000c00 	.word	0x58000c00

08005178 <HW_IPCC_BLE_Init>:
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8005178:	4a02      	ldr	r2, [pc, #8]	; (8005184 <HW_IPCC_BLE_Init+0xc>)
 800517a:	6853      	ldr	r3, [r2, #4]
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	6053      	str	r3, [r2, #4]
void HW_IPCC_BLE_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );

  return;
}
 8005182:	4770      	bx	lr
 8005184:	58000c00 	.word	0x58000c00

08005188 <HW_IPCC_BLE_SendCmd>:
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8005188:	4b02      	ldr	r3, [pc, #8]	; (8005194 <HW_IPCC_BLE_SendCmd+0xc>)
 800518a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800518e:	609a      	str	r2, [r3, #8]
void HW_IPCC_BLE_SendCmd( void )
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );

  return;
}
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	58000c00 	.word	0x58000c00

08005198 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8005198:	4a02      	ldr	r2, [pc, #8]	; (80051a4 <HW_IPCC_SYS_Init+0xc>)
 800519a:	6853      	ldr	r3, [r2, #4]
 800519c:	f023 0302 	bic.w	r3, r3, #2
 80051a0:	6053      	str	r3, [r2, #4]
void HW_IPCC_SYS_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );

  return;
}
 80051a2:	4770      	bx	lr
 80051a4:	58000c00 	.word	0x58000c00

080051a8 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80051a8:	4b04      	ldr	r3, [pc, #16]	; (80051bc <HW_IPCC_SYS_SendCmd+0x14>)
 80051aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051ae:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80051b6:	605a      	str	r2, [r3, #4]
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  return;
}
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	58000c00 	.word	0x58000c00

080051c0 <HW_IPCC_Tx_Handler>:
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80051c0:	4b1a      	ldr	r3, [pc, #104]	; (800522c <HW_IPCC_Tx_Handler+0x6c>)
 80051c2:	68da      	ldr	r2, [r3, #12]
{
 80051c4:	b510      	push	{r4, lr}
 80051c6:	0794      	lsls	r4, r2, #30
 80051c8:	d402      	bmi.n	80051d0 <HW_IPCC_Tx_Handler+0x10>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	0390      	lsls	r0, r2, #14
 80051ce:	d518      	bpl.n	8005202 <HW_IPCC_Tx_Handler+0x42>
 80051d0:	4b16      	ldr	r3, [pc, #88]	; (800522c <HW_IPCC_Tx_Handler+0x6c>)
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	0791      	lsls	r1, r2, #30
 80051d6:	d402      	bmi.n	80051de <HW_IPCC_Tx_Handler+0x1e>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	0392      	lsls	r2, r2, #14
 80051dc:	d511      	bpl.n	8005202 <HW_IPCC_Tx_Handler+0x42>
 80051de:	4c13      	ldr	r4, [pc, #76]	; (800522c <HW_IPCC_Tx_Handler+0x6c>)
 80051e0:	68e3      	ldr	r3, [r4, #12]
 80051e2:	071b      	lsls	r3, r3, #28
 80051e4:	d414      	bmi.n	8005210 <HW_IPCC_Tx_Handler+0x50>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80051e6:	6863      	ldr	r3, [r4, #4]
 80051e8:	0318      	lsls	r0, r3, #12
 80051ea:	d411      	bmi.n	8005210 <HW_IPCC_Tx_Handler+0x50>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80051ec:	6863      	ldr	r3, [r4, #4]

static void HW_IPCC_MM_FreeBufHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 80051ee:	4a10      	ldr	r2, [pc, #64]	; (8005230 <HW_IPCC_Tx_Handler+0x70>)
 80051f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051f4:	6063      	str	r3, [r4, #4]
 80051f6:	6813      	ldr	r3, [r2, #0]
 80051f8:	4798      	blx	r3
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80051fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80051fe:	60a3      	str	r3, [r4, #8]
}
 8005200:	bd10      	pop	{r4, pc}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005208:	605a      	str	r2, [r3, #4]
  HW_IPCC_SYS_CmdEvtNot();
 800520a:	f00a f841 	bl	800f290 <HW_IPCC_SYS_CmdEvtNot>
}
 800520e:	bd10      	pop	{r4, pc}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <HW_IPCC_Tx_Handler+0x6c>)
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	0691      	lsls	r1, r2, #26
 8005216:	d4f3      	bmi.n	8005200 <HW_IPCC_Tx_Handler+0x40>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	0292      	lsls	r2, r2, #10
 800521c:	d4f0      	bmi.n	8005200 <HW_IPCC_Tx_Handler+0x40>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005224:	605a      	str	r2, [r3, #4]
  HW_IPCC_BLE_AclDataAckNot();
 8005226:	f00a f805 	bl	800f234 <HW_IPCC_BLE_AclDataAckNot>
}
 800522a:	bd10      	pop	{r4, pc}
 800522c:	58000c00 	.word	0x58000c00
 8005230:	20001408 	.word	0x20001408

08005234 <HW_IPCC_MM_SendFreeBuf>:
{
 8005234:	b510      	push	{r4, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8005236:	4c08      	ldr	r4, [pc, #32]	; (8005258 <HW_IPCC_MM_SendFreeBuf+0x24>)
 8005238:	68e3      	ldr	r3, [r4, #12]
 800523a:	071b      	lsls	r3, r3, #28
 800523c:	d404      	bmi.n	8005248 <HW_IPCC_MM_SendFreeBuf+0x14>
    cb();
 800523e:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8005240:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005244:	60a3      	str	r3, [r4, #8]
}
 8005246:	bd10      	pop	{r4, pc}
    FreeBufCb = cb;
 8005248:	4b04      	ldr	r3, [pc, #16]	; (800525c <HW_IPCC_MM_SendFreeBuf+0x28>)
 800524a:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800524c:	6863      	ldr	r3, [r4, #4]
 800524e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005252:	6063      	str	r3, [r4, #4]
}
 8005254:	bd10      	pop	{r4, pc}
 8005256:	bf00      	nop
 8005258:	58000c00 	.word	0x58000c00
 800525c:	20001408 	.word	0x20001408

08005260 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8005260:	4a02      	ldr	r2, [pc, #8]	; (800526c <HW_IPCC_TRACES_Init+0xc>)
 8005262:	6853      	ldr	r3, [r2, #4]
 8005264:	f023 0308 	bic.w	r3, r3, #8
 8005268:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 800526a:	4770      	bx	lr
 800526c:	58000c00 	.word	0x58000c00

08005270 <HW_IPCC_Rx_Handler>:
{
 8005270:	b510      	push	{r4, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8005272:	4c12      	ldr	r4, [pc, #72]	; (80052bc <HW_IPCC_Rx_Handler+0x4c>)
 8005274:	69e3      	ldr	r3, [r4, #28]
 8005276:	079a      	lsls	r2, r3, #30
 8005278:	d410      	bmi.n	800529c <HW_IPCC_Rx_Handler+0x2c>
 800527a:	4c10      	ldr	r4, [pc, #64]	; (80052bc <HW_IPCC_Rx_Handler+0x4c>)
 800527c:	69e3      	ldr	r3, [r4, #28]
 800527e:	07d8      	lsls	r0, r3, #31
 8005280:	d414      	bmi.n	80052ac <HW_IPCC_Rx_Handler+0x3c>
 8005282:	4c0e      	ldr	r4, [pc, #56]	; (80052bc <HW_IPCC_Rx_Handler+0x4c>)
 8005284:	69e3      	ldr	r3, [r4, #28]
 8005286:	071a      	lsls	r2, r3, #28
 8005288:	d400      	bmi.n	800528c <HW_IPCC_Rx_Handler+0x1c>
}
 800528a:	bd10      	pop	{r4, pc}
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800528c:	6863      	ldr	r3, [r4, #4]
 800528e:	071b      	lsls	r3, r3, #28
 8005290:	d4fb      	bmi.n	800528a <HW_IPCC_Rx_Handler+0x1a>

static void HW_IPCC_TRACES_EvtHandler( void )
{
  HW_IPCC_TRACES_EvtNot();
 8005292:	f00a f861 	bl	800f358 <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8005296:	2308      	movs	r3, #8
 8005298:	60a3      	str	r3, [r4, #8]
}
 800529a:	bd10      	pop	{r4, pc}
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800529c:	6863      	ldr	r3, [r4, #4]
 800529e:	079b      	lsls	r3, r3, #30
 80052a0:	d4eb      	bmi.n	800527a <HW_IPCC_Rx_Handler+0xa>
  HW_IPCC_SYS_EvtNot();
 80052a2:	f00a f801 	bl	800f2a8 <HW_IPCC_SYS_EvtNot>
 80052a6:	2302      	movs	r3, #2
 80052a8:	60a3      	str	r3, [r4, #8]
}
 80052aa:	bd10      	pop	{r4, pc}
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80052ac:	6863      	ldr	r3, [r4, #4]
 80052ae:	07d9      	lsls	r1, r3, #31
 80052b0:	d4e7      	bmi.n	8005282 <HW_IPCC_Rx_Handler+0x12>
  HW_IPCC_BLE_RxEvtNot();
 80052b2:	f009 ffa7 	bl	800f204 <HW_IPCC_BLE_RxEvtNot>
 80052b6:	2301      	movs	r3, #1
 80052b8:	60a3      	str	r3, [r4, #8]
}
 80052ba:	bd10      	pop	{r4, pc}
 80052bc:	58000c00 	.word	0x58000c00

080052c0 <LIS2DW12_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2DW12 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80052c0:	b410      	push	{r4}
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80052c2:	2401      	movs	r4, #1
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
 80052c4:	2000      	movs	r0, #0
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 0.0f;
 80052c6:	2300      	movs	r3, #0
  Capabilities->AccMaxOdr    = 1600.0f;
 80052c8:	4a05      	ldr	r2, [pc, #20]	; (80052e0 <LIS2DW12_GetCapabilities+0x20>)
  Capabilities->Acc          = 1;
 80052ca:	600c      	str	r4, [r1, #0]
  Capabilities->AccMaxFS     = 16;
 80052cc:	2410      	movs	r4, #16
 80052ce:	e9c1 0401 	strd	r0, r4, [r1, #4]
  Capabilities->MagMaxOdr    = 0.0f;
  return LIS2DW12_OK;
}
 80052d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxFS     = 0;
 80052d6:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80052d8:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80052da:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80052dc:	618b      	str	r3, [r1, #24]
}
 80052de:	4770      	bx	lr
 80052e0:	44c80000 	.word	0x44c80000

080052e4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80052e4:	b410      	push	{r4}
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80052e6:	6944      	ldr	r4, [r0, #20]
 80052e8:	7b00      	ldrb	r0, [r0, #12]
 80052ea:	46a4      	mov	ip, r4
}
 80052ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80052f0:	4760      	bx	ip
 80052f2:	bf00      	nop

080052f4 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80052f4:	b410      	push	{r4}
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80052f6:	6904      	ldr	r4, [r0, #16]
 80052f8:	7b00      	ldrb	r0, [r0, #12]
 80052fa:	46a4      	mov	ip, r4
}
 80052fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005300:	4760      	bx	ip
 8005302:	bf00      	nop

08005304 <LIS2DW12_Init>:
{
 8005304:	b538      	push	{r3, r4, r5, lr}
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8005306:	f100 051c 	add.w	r5, r0, #28
{
 800530a:	4604      	mov	r4, r0
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 800530c:	2101      	movs	r1, #1
 800530e:	4628      	mov	r0, r5
 8005310:	f001 f8c2 	bl	8006498 <lis2dw12_auto_increment_set>
 8005314:	b9f8      	cbnz	r0, 8005356 <LIS2DW12_Init+0x52>
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8005316:	2101      	movs	r1, #1
 8005318:	4628      	mov	r0, r5
 800531a:	f001 f843 	bl	80063a4 <lis2dw12_block_data_update_set>
 800531e:	4601      	mov	r1, r0
 8005320:	b9c8      	cbnz	r0, 8005356 <LIS2DW12_Init+0x52>
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8005322:	4628      	mov	r0, r5
 8005324:	f001 f966 	bl	80065f4 <lis2dw12_fifo_mode_set>
 8005328:	b9a8      	cbnz	r0, 8005356 <LIS2DW12_Init+0x52>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 800532a:	2104      	movs	r1, #4
 800532c:	4628      	mov	r0, r5
 800532e:	f000 ff13 	bl	8006158 <lis2dw12_power_mode_set>
 8005332:	4601      	mov	r1, r0
 8005334:	b978      	cbnz	r0, 8005356 <LIS2DW12_Init+0x52>
  pObj->acc_odr = 100.0f;
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <LIS2DW12_Init+0x58>)
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8005338:	8620      	strh	r0, [r4, #48]	; 0x30
  pObj->acc_odr = 100.0f;
 800533a:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800533c:	4628      	mov	r0, r5
 800533e:	f000 ffa5 	bl	800628c <lis2dw12_data_rate_set>
 8005342:	4601      	mov	r1, r0
 8005344:	b938      	cbnz	r0, 8005356 <LIS2DW12_Init+0x52>
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8005346:	4628      	mov	r0, r5
 8005348:	f001 f846 	bl	80063d8 <lis2dw12_full_scale_set>
 800534c:	b918      	cbnz	r0, 8005356 <LIS2DW12_Init+0x52>
  pObj->is_initialized = 1;
 800534e:	2301      	movs	r3, #1
 8005350:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8005354:	bd38      	pop	{r3, r4, r5, pc}
    return LIS2DW12_ERROR;
 8005356:	f04f 30ff 	mov.w	r0, #4294967295
}
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	42c80000 	.word	0x42c80000

08005360 <LIS2DW12_ACC_SetFullScale>:
         : (FullScale <= 4) ? LIS2DW12_4g
 8005360:	2902      	cmp	r1, #2
{
 8005362:	b508      	push	{r3, lr}
         : (FullScale <= 4) ? LIS2DW12_4g
 8005364:	dd06      	ble.n	8005374 <LIS2DW12_ACC_SetFullScale+0x14>
 8005366:	2904      	cmp	r1, #4
 8005368:	dd0d      	ble.n	8005386 <LIS2DW12_ACC_SetFullScale+0x26>
 800536a:	2909      	cmp	r1, #9
 800536c:	bfb4      	ite	lt
 800536e:	2102      	movlt	r1, #2
 8005370:	2103      	movge	r1, #3
 8005372:	e000      	b.n	8005376 <LIS2DW12_ACC_SetFullScale+0x16>
 8005374:	2100      	movs	r1, #0
  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8005376:	301c      	adds	r0, #28
 8005378:	f001 f82e 	bl	80063d8 <lis2dw12_full_scale_set>
 800537c:	3800      	subs	r0, #0
 800537e:	bf18      	it	ne
 8005380:	2001      	movne	r0, #1
}
 8005382:	4240      	negs	r0, r0
 8005384:	bd08      	pop	{r3, pc}
         : (FullScale <= 4) ? LIS2DW12_4g
 8005386:	2101      	movs	r1, #1
 8005388:	e7f5      	b.n	8005376 <LIS2DW12_ACC_SetFullScale+0x16>
 800538a:	bf00      	nop

0800538c <LIS2DW12_ReadID>:
{
 800538c:	b508      	push	{r3, lr}
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 800538e:	301c      	adds	r0, #28
 8005390:	f001 f878 	bl	8006484 <lis2dw12_device_id_get>
 8005394:	3800      	subs	r0, #0
 8005396:	bf18      	it	ne
 8005398:	2001      	movne	r0, #1
}
 800539a:	4240      	negs	r0, r0
 800539c:	bd08      	pop	{r3, pc}
 800539e:	bf00      	nop

080053a0 <LIS2DW12_ACC_GetFullScale>:
{
 80053a0:	b510      	push	{r4, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	460c      	mov	r4, r1
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80053a6:	301c      	adds	r0, #28
 80053a8:	f10d 0107 	add.w	r1, sp, #7
 80053ac:	f001 f82e 	bl	800640c <lis2dw12_full_scale_get>
 80053b0:	b9b8      	cbnz	r0, 80053e2 <LIS2DW12_ACC_GetFullScale+0x42>
  switch (fs_low_level)
 80053b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d816      	bhi.n	80053e8 <LIS2DW12_ACC_GetFullScale+0x48>
 80053ba:	e8df f003 	tbb	[pc, r3]
 80053be:	0a06      	.short	0x0a06
 80053c0:	020e      	.short	0x020e
      *FullScale = 16;
 80053c2:	2310      	movs	r3, #16
 80053c4:	6023      	str	r3, [r4, #0]
}
 80053c6:	b002      	add	sp, #8
 80053c8:	bd10      	pop	{r4, pc}
      *FullScale =  2;
 80053ca:	2302      	movs	r3, #2
 80053cc:	6023      	str	r3, [r4, #0]
}
 80053ce:	b002      	add	sp, #8
 80053d0:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 80053d2:	2304      	movs	r3, #4
 80053d4:	6023      	str	r3, [r4, #0]
}
 80053d6:	b002      	add	sp, #8
 80053d8:	bd10      	pop	{r4, pc}
      *FullScale =  8;
 80053da:	2308      	movs	r3, #8
 80053dc:	6023      	str	r3, [r4, #0]
}
 80053de:	b002      	add	sp, #8
 80053e0:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 80053e2:	f04f 30ff 	mov.w	r0, #4294967295
 80053e6:	e7ee      	b.n	80053c6 <LIS2DW12_ACC_GetFullScale+0x26>
      *FullScale = -1;
 80053e8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ec:	6020      	str	r0, [r4, #0]
      break;
 80053ee:	e7ea      	b.n	80053c6 <LIS2DW12_ACC_GetFullScale+0x26>

080053f0 <LIS2DW12_ACC_GetSensitivity>:
{
 80053f0:	b530      	push	{r4, r5, lr}
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80053f2:	f100 041c 	add.w	r4, r0, #28
{
 80053f6:	b083      	sub	sp, #12
 80053f8:	460d      	mov	r5, r1
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80053fa:	4620      	mov	r0, r4
 80053fc:	f10d 0106 	add.w	r1, sp, #6
 8005400:	f001 f804 	bl	800640c <lis2dw12_full_scale_get>
 8005404:	bb18      	cbnz	r0, 800544e <LIS2DW12_ACC_GetSensitivity+0x5e>
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8005406:	f10d 0107 	add.w	r1, sp, #7
 800540a:	4620      	mov	r0, r4
 800540c:	f000 fed6 	bl	80061bc <lis2dw12_power_mode_get>
 8005410:	b9e8      	cbnz	r0, 800544e <LIS2DW12_ACC_GetSensitivity+0x5e>
  switch(mode)
 8005412:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005416:	2b1b      	cmp	r3, #27
 8005418:	d817      	bhi.n	800544a <LIS2DW12_ACC_GetSensitivity+0x5a>
 800541a:	e8df f003 	tbb	[pc, r3]
 800541e:	0e1c      	.short	0x0e1c
 8005420:	160e0e0e 	.word	0x160e0e0e
 8005424:	0e1c1616 	.word	0x0e1c1616
 8005428:	16160e0e 	.word	0x16160e0e
 800542c:	0e1c1616 	.word	0x0e1c1616
 8005430:	160e0e0e 	.word	0x160e0e0e
 8005434:	0e1c1616 	.word	0x0e1c1616
 8005438:	0e0e      	.short	0x0e0e
      switch (full_scale)
 800543a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800543e:	2b03      	cmp	r3, #3
 8005440:	d803      	bhi.n	800544a <LIS2DW12_ACC_GetSensitivity+0x5a>
 8005442:	e8df f003 	tbb	[pc, r3]
 8005446:	181b      	.short	0x181b
 8005448:	1014      	.short	0x1014
          *Sensitivity = -1.0f;
 800544a:	4b11      	ldr	r3, [pc, #68]	; (8005490 <LIS2DW12_ACC_GetSensitivity+0xa0>)
 800544c:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 800544e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005452:	b003      	add	sp, #12
 8005454:	bd30      	pop	{r4, r5, pc}
      switch (full_scale)
 8005456:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800545a:	2b03      	cmp	r3, #3
 800545c:	d8f5      	bhi.n	800544a <LIS2DW12_ACC_GetSensitivity+0x5a>
 800545e:	e8df f003 	tbb	[pc, r3]
 8005462:	0206      	.short	0x0206
 8005464:	1013      	.short	0x1013
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8005466:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <LIS2DW12_ACC_GetSensitivity+0xa4>)
 8005468:	602b      	str	r3, [r5, #0]
}
 800546a:	b003      	add	sp, #12
 800546c:	bd30      	pop	{r4, r5, pc}
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <LIS2DW12_ACC_GetSensitivity+0xa8>)
 8005470:	602b      	str	r3, [r5, #0]
}
 8005472:	b003      	add	sp, #12
 8005474:	bd30      	pop	{r4, r5, pc}
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8005476:	4b09      	ldr	r3, [pc, #36]	; (800549c <LIS2DW12_ACC_GetSensitivity+0xac>)
 8005478:	602b      	str	r3, [r5, #0]
          break;
 800547a:	e7ea      	b.n	8005452 <LIS2DW12_ACC_GetSensitivity+0x62>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <LIS2DW12_ACC_GetSensitivity+0xb0>)
 800547e:	602b      	str	r3, [r5, #0]
           break;
 8005480:	e7e7      	b.n	8005452 <LIS2DW12_ACC_GetSensitivity+0x62>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8005482:	4b08      	ldr	r3, [pc, #32]	; (80054a4 <LIS2DW12_ACC_GetSensitivity+0xb4>)
 8005484:	602b      	str	r3, [r5, #0]
          break;
 8005486:	e7e4      	b.n	8005452 <LIS2DW12_ACC_GetSensitivity+0x62>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8005488:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <LIS2DW12_ACC_GetSensitivity+0xb8>)
 800548a:	602b      	str	r3, [r5, #0]
           break;
 800548c:	e7e1      	b.n	8005452 <LIS2DW12_ACC_GetSensitivity+0x62>
 800548e:	bf00      	nop
 8005490:	bf800000 	.word	0xbf800000
 8005494:	3ff9db23 	.word	0x3ff9db23
 8005498:	3f79db23 	.word	0x3f79db23
 800549c:	3ef9db23 	.word	0x3ef9db23
 80054a0:	3e79db23 	.word	0x3e79db23
 80054a4:	40f9db23 	.word	0x40f9db23
 80054a8:	4079db23 	.word	0x4079db23

080054ac <LIS2DW12_ACC_GetOutputDataRate>:
{
 80054ac:	b530      	push	{r4, r5, lr}
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80054ae:	f100 041c 	add.w	r4, r0, #28
{
 80054b2:	b083      	sub	sp, #12
 80054b4:	460d      	mov	r5, r1
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80054b6:	4620      	mov	r0, r4
 80054b8:	f10d 0106 	add.w	r1, sp, #6
 80054bc:	f000 ff14 	bl	80062e8 <lis2dw12_data_rate_get>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d141      	bne.n	8005548 <LIS2DW12_ACC_GetOutputDataRate+0x9c>
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80054c4:	f10d 0107 	add.w	r1, sp, #7
 80054c8:	4620      	mov	r0, r4
 80054ca:	f000 fe77 	bl	80061bc <lis2dw12_power_mode_get>
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d13a      	bne.n	8005548 <LIS2DW12_ACC_GetOutputDataRate+0x9c>
  switch (odr_low_level)
 80054d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80054d6:	2b32      	cmp	r3, #50	; 0x32
 80054d8:	d834      	bhi.n	8005544 <LIS2DW12_ACC_GetOutputDataRate+0x98>
 80054da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80054de:	0039      	.short	0x0039
 80054e0:	004000cd 	.word	0x004000cd
 80054e4:	00440087 	.word	0x00440087
 80054e8:	003c008a 	.word	0x003c008a
 80054ec:	010d008d 	.word	0x010d008d
 80054f0:	00330047 	.word	0x00330047
 80054f4:	00330033 	.word	0x00330033
 80054f8:	00330033 	.word	0x00330033
 80054fc:	00330033 	.word	0x00330033
 8005500:	00390033 	.word	0x00390033
 8005504:	00330033 	.word	0x00330033
 8005508:	00330033 	.word	0x00330033
 800550c:	00330033 	.word	0x00330033
 8005510:	00330033 	.word	0x00330033
 8005514:	00330033 	.word	0x00330033
 8005518:	00330033 	.word	0x00330033
 800551c:	00330033 	.word	0x00330033
 8005520:	00330033 	.word	0x00330033
 8005524:	00330033 	.word	0x00330033
 8005528:	00330033 	.word	0x00330033
 800552c:	00330033 	.word	0x00330033
 8005530:	00330033 	.word	0x00330033
 8005534:	00330033 	.word	0x00330033
 8005538:	00330033 	.word	0x00330033
 800553c:	00330033 	.word	0x00330033
 8005540:	00390033 	.word	0x00390033
          *Odr = -1.0f;
 8005544:	4b92      	ldr	r3, [pc, #584]	; (8005790 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8005546:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 8005548:	f04f 30ff 	mov.w	r0, #4294967295
}
 800554c:	b003      	add	sp, #12
 800554e:	bd30      	pop	{r4, r5, pc}
      *Odr = 0.0f;
 8005550:	2300      	movs	r3, #0
 8005552:	602b      	str	r3, [r5, #0]
      break;
 8005554:	e7fa      	b.n	800554c <LIS2DW12_ACC_GetOutputDataRate+0xa0>
      *Odr = 200.0f;
 8005556:	4b8f      	ldr	r3, [pc, #572]	; (8005794 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8005558:	602b      	str	r3, [r5, #0]
}
 800555a:	b003      	add	sp, #12
 800555c:	bd30      	pop	{r4, r5, pc}
          *Odr = 12.5f;
 800555e:	4b8e      	ldr	r3, [pc, #568]	; (8005798 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8005560:	602b      	str	r3, [r5, #0]
}
 8005562:	b003      	add	sp, #12
 8005564:	bd30      	pop	{r4, r5, pc}
      *Odr = 50.0f;
 8005566:	4b8d      	ldr	r3, [pc, #564]	; (800579c <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8005568:	602b      	str	r3, [r5, #0]
      break;
 800556a:	e7ef      	b.n	800554c <LIS2DW12_ACC_GetOutputDataRate+0xa0>
      switch (mode)
 800556c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005570:	2b1b      	cmp	r3, #27
 8005572:	d8e7      	bhi.n	8005544 <LIS2DW12_ACC_GetOutputDataRate+0x98>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <LIS2DW12_ACC_GetOutputDataRate+0xd0>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	08005557 	.word	0x08005557
 8005580:	08005557 	.word	0x08005557
 8005584:	08005557 	.word	0x08005557
 8005588:	08005557 	.word	0x08005557
 800558c:	08005785 	.word	0x08005785
 8005590:	08005545 	.word	0x08005545
 8005594:	08005545 	.word	0x08005545
 8005598:	08005545 	.word	0x08005545
 800559c:	08005557 	.word	0x08005557
 80055a0:	08005557 	.word	0x08005557
 80055a4:	08005557 	.word	0x08005557
 80055a8:	08005557 	.word	0x08005557
 80055ac:	08005545 	.word	0x08005545
 80055b0:	08005545 	.word	0x08005545
 80055b4:	08005545 	.word	0x08005545
 80055b8:	08005545 	.word	0x08005545
 80055bc:	08005557 	.word	0x08005557
 80055c0:	08005557 	.word	0x08005557
 80055c4:	08005557 	.word	0x08005557
 80055c8:	08005557 	.word	0x08005557
 80055cc:	08005785 	.word	0x08005785
 80055d0:	08005545 	.word	0x08005545
 80055d4:	08005545 	.word	0x08005545
 80055d8:	08005545 	.word	0x08005545
 80055dc:	08005557 	.word	0x08005557
 80055e0:	08005557 	.word	0x08005557
 80055e4:	08005557 	.word	0x08005557
 80055e8:	08005557 	.word	0x08005557
      *Odr = 25.0f;
 80055ec:	4b6c      	ldr	r3, [pc, #432]	; (80057a0 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 80055ee:	602b      	str	r3, [r5, #0]
      break;
 80055f0:	e7ac      	b.n	800554c <LIS2DW12_ACC_GetOutputDataRate+0xa0>
      *Odr = 100.0f;
 80055f2:	4b6c      	ldr	r3, [pc, #432]	; (80057a4 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 80055f4:	602b      	str	r3, [r5, #0]
      break;
 80055f6:	e7a9      	b.n	800554c <LIS2DW12_ACC_GetOutputDataRate+0xa0>
      switch (mode)
 80055f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80055fc:	2b1b      	cmp	r3, #27
 80055fe:	d8a1      	bhi.n	8005544 <LIS2DW12_ACC_GetOutputDataRate+0x98>
 8005600:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <LIS2DW12_ACC_GetOutputDataRate+0x15c>)
 8005602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005606:	bf00      	nop
 8005608:	08005557 	.word	0x08005557
 800560c:	08005557 	.word	0x08005557
 8005610:	08005557 	.word	0x08005557
 8005614:	08005557 	.word	0x08005557
 8005618:	0800577f 	.word	0x0800577f
 800561c:	08005545 	.word	0x08005545
 8005620:	08005545 	.word	0x08005545
 8005624:	08005545 	.word	0x08005545
 8005628:	08005557 	.word	0x08005557
 800562c:	08005557 	.word	0x08005557
 8005630:	08005557 	.word	0x08005557
 8005634:	08005557 	.word	0x08005557
 8005638:	08005545 	.word	0x08005545
 800563c:	08005545 	.word	0x08005545
 8005640:	08005545 	.word	0x08005545
 8005644:	08005545 	.word	0x08005545
 8005648:	08005557 	.word	0x08005557
 800564c:	08005557 	.word	0x08005557
 8005650:	08005557 	.word	0x08005557
 8005654:	08005557 	.word	0x08005557
 8005658:	0800577f 	.word	0x0800577f
 800565c:	08005545 	.word	0x08005545
 8005660:	08005545 	.word	0x08005545
 8005664:	08005545 	.word	0x08005545
 8005668:	08005557 	.word	0x08005557
 800566c:	08005557 	.word	0x08005557
 8005670:	08005557 	.word	0x08005557
 8005674:	08005557 	.word	0x08005557
      switch (mode)
 8005678:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800567c:	2b1b      	cmp	r3, #27
 800567e:	f63f af61 	bhi.w	8005544 <LIS2DW12_ACC_GetOutputDataRate+0x98>
 8005682:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <LIS2DW12_ACC_GetOutputDataRate+0x1dc>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	08005779 	.word	0x08005779
 800568c:	08005779 	.word	0x08005779
 8005690:	08005779 	.word	0x08005779
 8005694:	08005779 	.word	0x08005779
 8005698:	0800555f 	.word	0x0800555f
 800569c:	08005545 	.word	0x08005545
 80056a0:	08005545 	.word	0x08005545
 80056a4:	08005545 	.word	0x08005545
 80056a8:	08005779 	.word	0x08005779
 80056ac:	08005779 	.word	0x08005779
 80056b0:	08005779 	.word	0x08005779
 80056b4:	08005779 	.word	0x08005779
 80056b8:	08005545 	.word	0x08005545
 80056bc:	08005545 	.word	0x08005545
 80056c0:	08005545 	.word	0x08005545
 80056c4:	08005545 	.word	0x08005545
 80056c8:	08005779 	.word	0x08005779
 80056cc:	08005779 	.word	0x08005779
 80056d0:	08005779 	.word	0x08005779
 80056d4:	08005779 	.word	0x08005779
 80056d8:	0800555f 	.word	0x0800555f
 80056dc:	08005545 	.word	0x08005545
 80056e0:	08005545 	.word	0x08005545
 80056e4:	08005545 	.word	0x08005545
 80056e8:	08005779 	.word	0x08005779
 80056ec:	08005779 	.word	0x08005779
 80056f0:	08005779 	.word	0x08005779
 80056f4:	08005779 	.word	0x08005779
      switch (mode)
 80056f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80056fc:	2b1b      	cmp	r3, #27
 80056fe:	f63f af21 	bhi.w	8005544 <LIS2DW12_ACC_GetOutputDataRate+0x98>
 8005702:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <LIS2DW12_ACC_GetOutputDataRate+0x25c>)
 8005704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005708:	08005557 	.word	0x08005557
 800570c:	08005557 	.word	0x08005557
 8005710:	08005557 	.word	0x08005557
 8005714:	08005557 	.word	0x08005557
 8005718:	0800578b 	.word	0x0800578b
 800571c:	08005545 	.word	0x08005545
 8005720:	08005545 	.word	0x08005545
 8005724:	08005545 	.word	0x08005545
 8005728:	08005557 	.word	0x08005557
 800572c:	08005557 	.word	0x08005557
 8005730:	08005557 	.word	0x08005557
 8005734:	08005557 	.word	0x08005557
 8005738:	08005545 	.word	0x08005545
 800573c:	08005545 	.word	0x08005545
 8005740:	08005545 	.word	0x08005545
 8005744:	08005545 	.word	0x08005545
 8005748:	08005557 	.word	0x08005557
 800574c:	08005557 	.word	0x08005557
 8005750:	08005557 	.word	0x08005557
 8005754:	08005557 	.word	0x08005557
 8005758:	0800578b 	.word	0x0800578b
 800575c:	08005545 	.word	0x08005545
 8005760:	08005545 	.word	0x08005545
 8005764:	08005545 	.word	0x08005545
 8005768:	08005557 	.word	0x08005557
 800576c:	08005557 	.word	0x08005557
 8005770:	08005557 	.word	0x08005557
 8005774:	08005557 	.word	0x08005557
          *Odr = 1.6f;
 8005778:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <LIS2DW12_ACC_GetOutputDataRate+0x2fc>)
 800577a:	602b      	str	r3, [r5, #0]
          break;
 800577c:	e6e6      	b.n	800554c <LIS2DW12_ACC_GetOutputDataRate+0xa0>
          *Odr = 400.0f;
 800577e:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <LIS2DW12_ACC_GetOutputDataRate+0x300>)
 8005780:	602b      	str	r3, [r5, #0]
           break;
 8005782:	e6e3      	b.n	800554c <LIS2DW12_ACC_GetOutputDataRate+0xa0>
          *Odr = 1600.0f;
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <LIS2DW12_ACC_GetOutputDataRate+0x304>)
 8005786:	602b      	str	r3, [r5, #0]
           break;
 8005788:	e6e0      	b.n	800554c <LIS2DW12_ACC_GetOutputDataRate+0xa0>
          *Odr = 800.0f;
 800578a:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <LIS2DW12_ACC_GetOutputDataRate+0x308>)
 800578c:	602b      	str	r3, [r5, #0]
           break;
 800578e:	e6dd      	b.n	800554c <LIS2DW12_ACC_GetOutputDataRate+0xa0>
 8005790:	bf800000 	.word	0xbf800000
 8005794:	43480000 	.word	0x43480000
 8005798:	41480000 	.word	0x41480000
 800579c:	42480000 	.word	0x42480000
 80057a0:	41c80000 	.word	0x41c80000
 80057a4:	42c80000 	.word	0x42c80000
 80057a8:	3fcccccd 	.word	0x3fcccccd
 80057ac:	43c80000 	.word	0x43c80000
 80057b0:	44c80000 	.word	0x44c80000
 80057b4:	44480000 	.word	0x44480000

080057b8 <LIS2DW12_ACC_GetAxesRaw>:
{
 80057b8:	b530      	push	{r4, r5, lr}
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80057ba:	f100 041c 	add.w	r4, r0, #28
{
 80057be:	b085      	sub	sp, #20
 80057c0:	460d      	mov	r5, r1
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80057c2:	4620      	mov	r0, r4
 80057c4:	f10d 0107 	add.w	r1, sp, #7
 80057c8:	f000 fcf8 	bl	80061bc <lis2dw12_power_mode_get>
 80057cc:	bb78      	cbnz	r0, 800582e <LIS2DW12_ACC_GetAxesRaw+0x76>
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80057ce:	a902      	add	r1, sp, #8
 80057d0:	4620      	mov	r0, r4
 80057d2:	f000 fe37 	bl	8006444 <lis2dw12_acceleration_raw_get>
 80057d6:	bb50      	cbnz	r0, 800582e <LIS2DW12_ACC_GetAxesRaw+0x76>
  switch(mode)
 80057d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80057dc:	2b1b      	cmp	r3, #27
 80057de:	d826      	bhi.n	800582e <LIS2DW12_ACC_GetAxesRaw+0x76>
 80057e0:	e8df f003 	tbb	[pc, r3]
 80057e4:	0e0e0e29 	.word	0x0e0e0e29
 80057e8:	2525250e 	.word	0x2525250e
 80057ec:	0e0e0e29 	.word	0x0e0e0e29
 80057f0:	25252525 	.word	0x25252525
 80057f4:	0e0e0e29 	.word	0x0e0e0e29
 80057f8:	2525250e 	.word	0x2525250e
 80057fc:	0e0e0e29 	.word	0x0e0e0e29
      Value->x = (data_raw.i16bit[0] / 4);
 8005800:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
      Value->y = (data_raw.i16bit[1] / 4);
 8005804:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
      Value->x = (data_raw.i16bit[0] / 4);
 8005808:	2b00      	cmp	r3, #0
 800580a:	bfb8      	it	lt
 800580c:	3303      	addlt	r3, #3
 800580e:	109b      	asrs	r3, r3, #2
 8005810:	802b      	strh	r3, [r5, #0]
      Value->z = (data_raw.i16bit[2] / 4);
 8005812:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      Value->y = (data_raw.i16bit[1] / 4);
 8005816:	2a00      	cmp	r2, #0
 8005818:	bfb8      	it	lt
 800581a:	3203      	addlt	r2, #3
      Value->z = (data_raw.i16bit[2] / 4);
 800581c:	2b00      	cmp	r3, #0
 800581e:	bfb8      	it	lt
 8005820:	3303      	addlt	r3, #3
      Value->y = (data_raw.i16bit[1] / 4);
 8005822:	1092      	asrs	r2, r2, #2
      Value->z = (data_raw.i16bit[2] / 4);
 8005824:	109b      	asrs	r3, r3, #2
      Value->y = (data_raw.i16bit[1] / 4);
 8005826:	806a      	strh	r2, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8005828:	80ab      	strh	r3, [r5, #4]
}
 800582a:	b005      	add	sp, #20
 800582c:	bd30      	pop	{r4, r5, pc}
  switch(mode)
 800582e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005832:	b005      	add	sp, #20
 8005834:	bd30      	pop	{r4, r5, pc}
      Value->x = (data_raw.i16bit[0] / 16);
 8005836:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
      Value->y = (data_raw.i16bit[1] / 16);
 800583a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
      Value->x = (data_raw.i16bit[0] / 16);
 800583e:	2b00      	cmp	r3, #0
 8005840:	bfb8      	it	lt
 8005842:	330f      	addlt	r3, #15
 8005844:	111b      	asrs	r3, r3, #4
 8005846:	802b      	strh	r3, [r5, #0]
      Value->z = (data_raw.i16bit[2] / 16);
 8005848:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      Value->y = (data_raw.i16bit[1] / 16);
 800584c:	2a00      	cmp	r2, #0
 800584e:	bfb8      	it	lt
 8005850:	320f      	addlt	r2, #15
      Value->z = (data_raw.i16bit[2] / 16);
 8005852:	2b00      	cmp	r3, #0
 8005854:	bfb8      	it	lt
 8005856:	330f      	addlt	r3, #15
      Value->y = (data_raw.i16bit[1] / 16);
 8005858:	1112      	asrs	r2, r2, #4
      Value->z = (data_raw.i16bit[2] / 16);
 800585a:	111b      	asrs	r3, r3, #4
      Value->y = (data_raw.i16bit[1] / 16);
 800585c:	806a      	strh	r2, [r5, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800585e:	80ab      	strh	r3, [r5, #4]
}
 8005860:	b005      	add	sp, #20
 8005862:	bd30      	pop	{r4, r5, pc}

08005864 <LIS2DW12_DeInit>:
{
 8005864:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 0U)
 8005866:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
{
 800586a:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 800586c:	b933      	cbnz	r3, 800587c <LIS2DW12_DeInit+0x18>
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800586e:	2000      	movs	r0, #0
  pObj->acc_odr = 0.0f;
 8005870:	2300      	movs	r3, #0
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8005872:	8620      	strh	r0, [r4, #48]	; 0x30
  pObj->is_initialized = 0;
 8005874:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  pObj->acc_odr = 0.0f;
 8005878:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800587a:	bd10      	pop	{r4, pc}
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800587c:	2100      	movs	r1, #0
 800587e:	301c      	adds	r0, #28
 8005880:	f000 fd04 	bl	800628c <lis2dw12_data_rate_set>
 8005884:	b910      	cbnz	r0, 800588c <LIS2DW12_DeInit+0x28>
  pObj->acc_is_enabled = 0;
 8005886:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  return LIS2DW12_OK;
 800588a:	e7f0      	b.n	800586e <LIS2DW12_DeInit+0xa>
    return LIS2DW12_ERROR;
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005890:	bd10      	pop	{r4, pc}
 8005892:	bf00      	nop

08005894 <LIS2DW12_ACC_Disable>:
{
 8005894:	b510      	push	{r4, lr}
 8005896:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8005898:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 800589c:	b900      	cbnz	r0, 80058a0 <LIS2DW12_ACC_Disable+0xc>
}
 800589e:	bd10      	pop	{r4, pc}
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80058a0:	2100      	movs	r1, #0
 80058a2:	f104 001c 	add.w	r0, r4, #28
 80058a6:	f000 fcf1 	bl	800628c <lis2dw12_data_rate_set>
 80058aa:	b910      	cbnz	r0, 80058b2 <LIS2DW12_ACC_Disable+0x1e>
  pObj->acc_is_enabled = 0;
 80058ac:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 80058b0:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 80058b2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80058b6:	bd10      	pop	{r4, pc}

080058b8 <LIS2DW12_ACC_GetAxes>:
{
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	ed2d 8b04 	vpush	{d8-d9}
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80058be:	f100 061c 	add.w	r6, r0, #28
{
 80058c2:	b084      	sub	sp, #16
 80058c4:	4605      	mov	r5, r0
  float sensitivity = 0.0f;
 80058c6:	2300      	movs	r3, #0
{
 80058c8:	460c      	mov	r4, r1
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80058ca:	4630      	mov	r0, r6
 80058cc:	f10d 0103 	add.w	r1, sp, #3
  float sensitivity = 0.0f;
 80058d0:	9301      	str	r3, [sp, #4]
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80058d2:	f000 fc73 	bl	80061bc <lis2dw12_power_mode_get>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d154      	bne.n	8005984 <LIS2DW12_ACC_GetAxes+0xcc>
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80058da:	a902      	add	r1, sp, #8
 80058dc:	4630      	mov	r0, r6
 80058de:	f000 fdb1 	bl	8006444 <lis2dw12_acceleration_raw_get>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d14e      	bne.n	8005984 <LIS2DW12_ACC_GetAxes+0xcc>
  switch(mode)
 80058e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80058ea:	2b1b      	cmp	r3, #27
 80058ec:	d84a      	bhi.n	8005984 <LIS2DW12_ACC_GetAxes+0xcc>
 80058ee:	e8df f003 	tbb	[pc, r3]
 80058f2:	0e4f      	.short	0x0e4f
 80058f4:	490e0e0e 	.word	0x490e0e0e
 80058f8:	0e4f4949 	.word	0x0e4f4949
 80058fc:	49490e0e 	.word	0x49490e0e
 8005900:	0e4f4949 	.word	0x0e4f4949
 8005904:	490e0e0e 	.word	0x490e0e0e
 8005908:	0e4f4949 	.word	0x0e4f4949
 800590c:	0e0e      	.short	0x0e0e
      Value->x = (data_raw.i16bit[0] / 4);
 800590e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
      Value->y = (data_raw.i16bit[1] / 4);
 8005912:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
      Value->x = (data_raw.i16bit[0] / 4);
 8005916:	2b00      	cmp	r3, #0
 8005918:	bfb8      	it	lt
 800591a:	3303      	addlt	r3, #3
 800591c:	109b      	asrs	r3, r3, #2
 800591e:	ee09 3a10 	vmov	s18, r3
      Value->z = (data_raw.i16bit[2] / 4);
 8005922:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      Value->y = (data_raw.i16bit[1] / 4);
 8005926:	2a00      	cmp	r2, #0
 8005928:	bfb8      	it	lt
 800592a:	3203      	addlt	r2, #3
      Value->z = (data_raw.i16bit[2] / 4);
 800592c:	2b00      	cmp	r3, #0
 800592e:	bfb8      	it	lt
 8005930:	3303      	addlt	r3, #3
      Value->y = (data_raw.i16bit[1] / 4);
 8005932:	1092      	asrs	r2, r2, #2
      Value->z = (data_raw.i16bit[2] / 4);
 8005934:	109b      	asrs	r3, r3, #2
      Value->y = (data_raw.i16bit[1] / 4);
 8005936:	ee08 2a90 	vmov	s17, r2
      Value->z = (data_raw.i16bit[2] / 4);
 800593a:	ee08 3a10 	vmov	s16, r3
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 800593e:	a901      	add	r1, sp, #4
 8005940:	4628      	mov	r0, r5
 8005942:	f7ff fd55 	bl	80053f0 <LIS2DW12_ACC_GetSensitivity>
 8005946:	b9e8      	cbnz	r0, 8005984 <LIS2DW12_ACC_GetAxes+0xcc>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8005948:	ed9d 6a01 	vldr	s12, [sp, #4]
 800594c:	eef8 6ac9 	vcvt.f32.s32	s13, s18
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8005950:	eeb8 7ae8 	vcvt.f32.s32	s14, s17
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8005954:	eef8 7ac8 	vcvt.f32.s32	s15, s16
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8005958:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800595c:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8005960:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8005964:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8005968:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800596c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8005970:	edc4 6a00 	vstr	s13, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8005974:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8005978:	edc4 7a02 	vstr	s15, [r4, #8]
}
 800597c:	b004      	add	sp, #16
 800597e:	ecbd 8b04 	vpop	{d8-d9}
 8005982:	bd70      	pop	{r4, r5, r6, pc}
    return LIS2DW12_ERROR;
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005988:	b004      	add	sp, #16
 800598a:	ecbd 8b04 	vpop	{d8-d9}
 800598e:	bd70      	pop	{r4, r5, r6, pc}
      Value->x = (data_raw.i16bit[0] / 16);
 8005990:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
      Value->y = (data_raw.i16bit[1] / 16);
 8005994:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
      Value->x = (data_raw.i16bit[0] / 16);
 8005998:	2b00      	cmp	r3, #0
 800599a:	bfb8      	it	lt
 800599c:	330f      	addlt	r3, #15
 800599e:	111b      	asrs	r3, r3, #4
 80059a0:	ee09 3a10 	vmov	s18, r3
      Value->z = (data_raw.i16bit[2] / 16);
 80059a4:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      Value->y = (data_raw.i16bit[1] / 16);
 80059a8:	2a00      	cmp	r2, #0
 80059aa:	bfb8      	it	lt
 80059ac:	320f      	addlt	r2, #15
      Value->z = (data_raw.i16bit[2] / 16);
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bfb8      	it	lt
 80059b2:	330f      	addlt	r3, #15
      Value->y = (data_raw.i16bit[1] / 16);
 80059b4:	1112      	asrs	r2, r2, #4
      Value->z = (data_raw.i16bit[2] / 16);
 80059b6:	111b      	asrs	r3, r3, #4
      Value->y = (data_raw.i16bit[1] / 16);
 80059b8:	ee08 2a90 	vmov	s17, r2
      Value->z = (data_raw.i16bit[2] / 16);
 80059bc:	ee08 3a10 	vmov	s16, r3
      break;
 80059c0:	e7bd      	b.n	800593e <LIS2DW12_ACC_GetAxes+0x86>
 80059c2:	bf00      	nop

080059c4 <LIS2DW12_ACC_SetOutputDataRate>:
{
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	ed2d 8b02 	vpush	{d8}
  if (pObj->acc_is_enabled == 1U)
 80059ca:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80059ce:	2b01      	cmp	r3, #1
{
 80059d0:	ee08 1a10 	vmov	s16, r1
 80059d4:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 1U)
 80059d6:	d044      	beq.n	8005a62 <LIS2DW12_ACC_SetOutputDataRate+0x9e>
                : (Odr <=   12.5f) ?   12.5f
 80059d8:	eddf 7a55 	vldr	s15, [pc, #340]	; 8005b30 <LIS2DW12_ACC_SetOutputDataRate+0x16c>
 80059dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
  pObj->acc_operating_mode = Mode;
 80059e0:	2300      	movs	r3, #0
                : (Odr <=   12.5f) ?   12.5f
 80059e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  pObj->acc_operating_mode = Mode;
 80059e6:	8603      	strh	r3, [r0, #48]	; 0x30
                : (Odr <=   12.5f) ?   12.5f
 80059e8:	d805      	bhi.n	80059f6 <LIS2DW12_ACC_SetOutputDataRate+0x32>
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80059ea:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80059ee:	2000      	movs	r0, #0
}
 80059f0:	ecbd 8b02 	vpop	{d8}
 80059f4:	bd38      	pop	{r3, r4, r5, pc}
                : (Odr <=   25.0f) ?   25.0f
 80059f6:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 80059fa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80059fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a02:	d9f2      	bls.n	80059ea <LIS2DW12_ACC_SetOutputDataRate+0x26>
                : (Odr <=   50.0f) ?   50.0f
 8005a04:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8005a08:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a10:	d9eb      	bls.n	80059ea <LIS2DW12_ACC_SetOutputDataRate+0x26>
                : (Odr <=  100.0f) ?  100.0f
 8005a12:	eddf 7a48 	vldr	s15, [pc, #288]	; 8005b34 <LIS2DW12_ACC_SetOutputDataRate+0x170>
 8005a16:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a1e:	d9e4      	bls.n	80059ea <LIS2DW12_ACC_SetOutputDataRate+0x26>
                : (Odr <=  200.0f) ?  200.0f
 8005a20:	eddf 7a45 	vldr	s15, [pc, #276]	; 8005b38 <LIS2DW12_ACC_SetOutputDataRate+0x174>
 8005a24:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2c:	d9dd      	bls.n	80059ea <LIS2DW12_ACC_SetOutputDataRate+0x26>
                : (Odr <=  400.0f) ?  400.0f
 8005a2e:	eddf 7a43 	vldr	s15, [pc, #268]	; 8005b3c <LIS2DW12_ACC_SetOutputDataRate+0x178>
 8005a32:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3a:	d9d6      	bls.n	80059ea <LIS2DW12_ACC_SetOutputDataRate+0x26>
                : (Odr <=  800.0f) ?  800.0f
 8005a3c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8005b40 <LIS2DW12_ACC_SetOutputDataRate+0x17c>
 8005a40:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a48:	d9cf      	bls.n	80059ea <LIS2DW12_ACC_SetOutputDataRate+0x26>
                :                    1600.0f;
 8005a4a:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8005b44 <LIS2DW12_ACC_SetOutputDataRate+0x180>
 8005a4e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005b48 <LIS2DW12_ACC_SetOutputDataRate+0x184>
 8005a52:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5a:	bf88      	it	hi
 8005a5c:	eef0 7a47 	vmovhi.f32	s15, s14
 8005a60:	e7c3      	b.n	80059ea <LIS2DW12_ACC_SetOutputDataRate+0x26>
      if(Odr < 12.5f)
 8005a62:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8005a66:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6e:	d41a      	bmi.n	8005aa6 <LIS2DW12_ACC_SetOutputDataRate+0xe2>
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8005a70:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005b30 <LIS2DW12_ACC_SetOutputDataRate+0x16c>
 8005a74:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8005a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7c:	d817      	bhi.n	8005aae <LIS2DW12_ACC_SetOutputDataRate+0xea>
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8005a7e:	f104 051c 	add.w	r5, r4, #28
 8005a82:	4619      	mov	r1, r3
 8005a84:	4628      	mov	r0, r5
 8005a86:	f000 fc01 	bl	800628c <lis2dw12_data_rate_set>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	d147      	bne.n	8005b1e <LIS2DW12_ACC_SetOutputDataRate+0x15a>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8005a8e:	2104      	movs	r1, #4
 8005a90:	4628      	mov	r0, r5
 8005a92:	f000 fb61 	bl	8006158 <lis2dw12_power_mode_set>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d141      	bne.n	8005b1e <LIS2DW12_ACC_SetOutputDataRate+0x15a>
  pObj->acc_operating_mode = Mode;
 8005a9a:	8620      	strh	r0, [r4, #48]	; 0x30
  pObj->acc_odr = Odr;
 8005a9c:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
}
 8005aa0:	ecbd 8b02 	vpop	{d8}
 8005aa4:	bd38      	pop	{r3, r4, r5, pc}
        Odr = 12.5f;
 8005aa6:	eeb0 8a67 	vmov.f32	s16, s15
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e7e7      	b.n	8005a7e <LIS2DW12_ACC_SetOutputDataRate+0xba>
 8005aae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab6:	d939      	bls.n	8005b2c <LIS2DW12_ACC_SetOutputDataRate+0x168>
 8005ab8:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8005abc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac4:	d925      	bls.n	8005b12 <LIS2DW12_ACC_SetOutputDataRate+0x14e>
 8005ac6:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8005b34 <LIS2DW12_ACC_SetOutputDataRate+0x170>
 8005aca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad2:	d920      	bls.n	8005b16 <LIS2DW12_ACC_SetOutputDataRate+0x152>
 8005ad4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005b38 <LIS2DW12_ACC_SetOutputDataRate+0x174>
 8005ad8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae0:	d91b      	bls.n	8005b1a <LIS2DW12_ACC_SetOutputDataRate+0x156>
 8005ae2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005b3c <LIS2DW12_ACC_SetOutputDataRate+0x178>
 8005ae6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aee:	d919      	bls.n	8005b24 <LIS2DW12_ACC_SetOutputDataRate+0x160>
 8005af0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8005b40 <LIS2DW12_ACC_SetOutputDataRate+0x17c>
 8005af4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005afc:	d914      	bls.n	8005b28 <LIS2DW12_ACC_SetOutputDataRate+0x164>
 8005afe:	eddf 7a11 	vldr	s15, [pc, #68]	; 8005b44 <LIS2DW12_ACC_SetOutputDataRate+0x180>
 8005b02:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0a:	bf94      	ite	ls
 8005b0c:	2308      	movls	r3, #8
 8005b0e:	2309      	movhi	r3, #9
 8005b10:	e7b5      	b.n	8005a7e <LIS2DW12_ACC_SetOutputDataRate+0xba>
 8005b12:	2303      	movs	r3, #3
 8005b14:	e7b3      	b.n	8005a7e <LIS2DW12_ACC_SetOutputDataRate+0xba>
 8005b16:	2304      	movs	r3, #4
 8005b18:	e7b1      	b.n	8005a7e <LIS2DW12_ACC_SetOutputDataRate+0xba>
 8005b1a:	2305      	movs	r3, #5
 8005b1c:	e7af      	b.n	8005a7e <LIS2DW12_ACC_SetOutputDataRate+0xba>
    return LIS2DW12_ERROR;
 8005b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b22:	e765      	b.n	80059f0 <LIS2DW12_ACC_SetOutputDataRate+0x2c>
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8005b24:	2306      	movs	r3, #6
 8005b26:	e7aa      	b.n	8005a7e <LIS2DW12_ACC_SetOutputDataRate+0xba>
 8005b28:	2307      	movs	r3, #7
 8005b2a:	e7a8      	b.n	8005a7e <LIS2DW12_ACC_SetOutputDataRate+0xba>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e7a6      	b.n	8005a7e <LIS2DW12_ACC_SetOutputDataRate+0xba>
 8005b30:	3fcccccd 	.word	0x3fcccccd
 8005b34:	42480000 	.word	0x42480000
 8005b38:	42c80000 	.word	0x42c80000
 8005b3c:	43480000 	.word	0x43480000
 8005b40:	43c80000 	.word	0x43c80000
 8005b44:	44480000 	.word	0x44480000
 8005b48:	44c80000 	.word	0x44c80000

08005b4c <LIS2DW12_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8005b4c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d012      	beq.n	8005b7a <LIS2DW12_ACC_Enable+0x2e>
{
 8005b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b58:	ed2d 8b02 	vpush	{d8}
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 8005b5c:	f890 5030 	ldrb.w	r5, [r0, #48]	; 0x30
 8005b60:	ed90 8a0b 	vldr	s16, [r0, #44]	; 0x2c
 8005b64:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
  switch (Mode)
 8005b68:	1e6b      	subs	r3, r5, #1
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	f200 80a4 	bhi.w	8005cba <LIS2DW12_ACC_Enable+0x16e>
 8005b72:	e8df f003 	tbb	[pc, r3]
 8005b76:	442e      	.short	0x442e
 8005b78:	0451      	.short	0x0451
    return LIS2DW12_OK;
 8005b7a:	2000      	movs	r0, #0
}
 8005b7c:	4770      	bx	lr
      if(Odr > 200.0f)
 8005b7e:	eddf 7a57 	vldr	s15, [pc, #348]	; 8005cdc <LIS2DW12_ACC_Enable+0x190>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8005b82:	2f01      	cmp	r7, #1
      if(Odr > 200.0f)
 8005b84:	eeb4 8ae7 	vcmpe.f32	s16, s15
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8005b88:	bf14      	ite	ne
 8005b8a:	f04f 0800 	movne.w	r8, #0
 8005b8e:	f04f 0810 	moveq.w	r8, #16
      if(Odr > 200.0f)
 8005b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b96:	dd29      	ble.n	8005bec <LIS2DW12_ACC_Enable+0xa0>
 8005b98:	eeb0 8a67 	vmov.f32	s16, s15
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8005b9c:	2106      	movs	r1, #6
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8005b9e:	f104 061c 	add.w	r6, r4, #28
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f000 fb72 	bl	800628c <lis2dw12_data_rate_set>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d167      	bne.n	8005c7c <LIS2DW12_ACC_Enable+0x130>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8005bac:	4641      	mov	r1, r8
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f000 fad2 	bl	8006158 <lis2dw12_power_mode_set>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d161      	bne.n	8005c7c <LIS2DW12_ACC_Enable+0x130>
  pObj->acc_is_enabled = 1;
 8005bb8:	2301      	movs	r3, #1
  pObj->acc_odr = Odr;
 8005bba:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8005bbe:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8005bc2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  pObj->acc_is_enabled = 1;
 8005bc6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8005bca:	ecbd 8b02 	vpop	{d8}
 8005bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(Odr > 200.0f)
 8005bd2:	eddf 7a42 	vldr	s15, [pc, #264]	; 8005cdc <LIS2DW12_ACC_Enable+0x190>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8005bd6:	2f01      	cmp	r7, #1
      if(Odr > 200.0f)
 8005bd8:	eeb4 8ae7 	vcmpe.f32	s16, s15
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8005bdc:	bf14      	ite	ne
 8005bde:	f04f 0803 	movne.w	r8, #3
 8005be2:	f04f 0813 	moveq.w	r8, #19
      if(Odr > 200.0f)
 8005be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bea:	dcd5      	bgt.n	8005b98 <LIS2DW12_ACC_Enable+0x4c>
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8005bec:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8005ce0 <LIS2DW12_ACC_Enable+0x194>
 8005bf0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf8:	d81c      	bhi.n	8005c34 <LIS2DW12_ACC_Enable+0xe8>
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	e7cf      	b.n	8005b9e <LIS2DW12_ACC_Enable+0x52>
      if(Odr > 200.0f)
 8005bfe:	eddf 7a37 	vldr	s15, [pc, #220]	; 8005cdc <LIS2DW12_ACC_Enable+0x190>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8005c02:	2f01      	cmp	r7, #1
      if(Odr > 200.0f)
 8005c04:	eeb4 8ae7 	vcmpe.f32	s16, s15
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8005c08:	bf14      	ite	ne
 8005c0a:	46a8      	movne	r8, r5
 8005c0c:	f04f 0812 	moveq.w	r8, #18
      if(Odr > 200.0f)
 8005c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c14:	dcc0      	bgt.n	8005b98 <LIS2DW12_ACC_Enable+0x4c>
 8005c16:	e7e9      	b.n	8005bec <LIS2DW12_ACC_Enable+0xa0>
      if(Odr > 200.0f)
 8005c18:	eddf 7a30 	vldr	s15, [pc, #192]	; 8005cdc <LIS2DW12_ACC_Enable+0x190>
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8005c1c:	2f01      	cmp	r7, #1
      if(Odr > 200.0f)
 8005c1e:	eeb4 8ae7 	vcmpe.f32	s16, s15
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8005c22:	bf14      	ite	ne
 8005c24:	f04f 0801 	movne.w	r8, #1
 8005c28:	f04f 0811 	moveq.w	r8, #17
      if(Odr > 200.0f)
 8005c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c30:	dcb2      	bgt.n	8005b98 <LIS2DW12_ACC_Enable+0x4c>
 8005c32:	e7db      	b.n	8005bec <LIS2DW12_ACC_Enable+0xa0>
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8005c34:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8005c38:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c40:	d908      	bls.n	8005c54 <LIS2DW12_ACC_Enable+0x108>
 8005c42:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8005c46:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c4e:	d803      	bhi.n	8005c58 <LIS2DW12_ACC_Enable+0x10c>
 8005c50:	2103      	movs	r1, #3
 8005c52:	e7a4      	b.n	8005b9e <LIS2DW12_ACC_Enable+0x52>
 8005c54:	2102      	movs	r1, #2
 8005c56:	e7a2      	b.n	8005b9e <LIS2DW12_ACC_Enable+0x52>
 8005c58:	eddf 7a22 	vldr	s15, [pc, #136]	; 8005ce4 <LIS2DW12_ACC_Enable+0x198>
 8005c5c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c64:	d801      	bhi.n	8005c6a <LIS2DW12_ACC_Enable+0x11e>
 8005c66:	2104      	movs	r1, #4
 8005c68:	e799      	b.n	8005b9e <LIS2DW12_ACC_Enable+0x52>
 8005c6a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005ce8 <LIS2DW12_ACC_Enable+0x19c>
 8005c6e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c76:	d804      	bhi.n	8005c82 <LIS2DW12_ACC_Enable+0x136>
 8005c78:	2105      	movs	r1, #5
 8005c7a:	e790      	b.n	8005b9e <LIS2DW12_ACC_Enable+0x52>
    return LIS2DW12_ERROR;
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	e7a3      	b.n	8005bca <LIS2DW12_ACC_Enable+0x7e>
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8005c82:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005cdc <LIS2DW12_ACC_Enable+0x190>
 8005c86:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8e:	d912      	bls.n	8005cb6 <LIS2DW12_ACC_Enable+0x16a>
 8005c90:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005cec <LIS2DW12_ACC_Enable+0x1a0>
 8005c94:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9c:	d909      	bls.n	8005cb2 <LIS2DW12_ACC_Enable+0x166>
 8005c9e:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005cf0 <LIS2DW12_ACC_Enable+0x1a4>
 8005ca2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005caa:	bf94      	ite	ls
 8005cac:	2108      	movls	r1, #8
 8005cae:	2109      	movhi	r1, #9
 8005cb0:	e775      	b.n	8005b9e <LIS2DW12_ACC_Enable+0x52>
 8005cb2:	2107      	movs	r1, #7
 8005cb4:	e773      	b.n	8005b9e <LIS2DW12_ACC_Enable+0x52>
 8005cb6:	2106      	movs	r1, #6
 8005cb8:	e771      	b.n	8005b9e <LIS2DW12_ACC_Enable+0x52>
      if(Odr < 12.5f)
 8005cba:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8005cbe:	2f01      	cmp	r7, #1
      if(Odr < 12.5f)
 8005cc0:	eeb4 8ae7 	vcmpe.f32	s16, s15
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8005cc4:	bf14      	ite	ne
 8005cc6:	f04f 0804 	movne.w	r8, #4
 8005cca:	f04f 0814 	moveq.w	r8, #20
      if(Odr < 12.5f)
 8005cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd2:	d58b      	bpl.n	8005bec <LIS2DW12_ACC_Enable+0xa0>
        Odr = 12.5f;
 8005cd4:	eeb0 8a67 	vmov.f32	s16, s15
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8005cd8:	2102      	movs	r1, #2
 8005cda:	e760      	b.n	8005b9e <LIS2DW12_ACC_Enable+0x52>
 8005cdc:	43480000 	.word	0x43480000
 8005ce0:	3fcccccd 	.word	0x3fcccccd
 8005ce4:	42480000 	.word	0x42480000
 8005ce8:	42c80000 	.word	0x42c80000
 8005cec:	43c80000 	.word	0x43c80000
 8005cf0:	44480000 	.word	0x44480000

08005cf4 <LIS2DW12_RegisterBusIO>:
  if (pObj == NULL)
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d035      	beq.n	8005d64 <LIS2DW12_RegisterBusIO+0x70>
{
 8005cf8:	b530      	push	{r4, r5, lr}
 8005cfa:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 8005cfc:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8005d00:	688a      	ldr	r2, [r1, #8]
 8005d02:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8005d04:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 8005d08:	7b0a      	ldrb	r2, [r1, #12]
 8005d0a:	7322      	strb	r2, [r4, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005d0c:	e9d1 5204 	ldrd	r5, r2, [r1, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8005d10:	6988      	ldr	r0, [r1, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8005d12:	4916      	ldr	r1, [pc, #88]	; (8005d6c <LIS2DW12_RegisterBusIO+0x78>)
    pObj->IO.GetTick   = pIO->GetTick;
 8005d14:	61a0      	str	r0, [r4, #24]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005d16:	e9c4 5204 	strd	r5, r2, [r4, #16]
    pObj->Ctx.write_reg = WriteRegWrap;
 8005d1a:	4a15      	ldr	r2, [pc, #84]	; (8005d70 <LIS2DW12_RegisterBusIO+0x7c>)
    pObj->Ctx.handle   = pObj;
 8005d1c:	6264      	str	r4, [r4, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005d1e:	e9c4 2107 	strd	r2, r1, [r4, #28]
{
 8005d22:	b083      	sub	sp, #12
    if (pObj->IO.Init == NULL)
 8005d24:	b1db      	cbz	r3, 8005d5e <LIS2DW12_RegisterBusIO+0x6a>
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8005d26:	4798      	blx	r3
 8005d28:	b9c8      	cbnz	r0, 8005d5e <LIS2DW12_RegisterBusIO+0x6a>
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005d2a:	68a3      	ldr	r3, [r4, #8]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d001      	beq.n	8005d34 <LIS2DW12_RegisterBusIO+0x40>
}
 8005d30:	b003      	add	sp, #12
 8005d32:	bd30      	pop	{r4, r5, pc}
        if (pObj->is_initialized == 0U)
 8005d34:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f9      	bne.n	8005d30 <LIS2DW12_RegisterBusIO+0x3c>
          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8005d3c:	2505      	movs	r5, #5
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f10d 0207 	add.w	r2, sp, #7
 8005d44:	2121      	movs	r1, #33	; 0x21
 8005d46:	f104 001c 	add.w	r0, r4, #28
 8005d4a:	f88d 5007 	strb.w	r5, [sp, #7]
 8005d4e:	f000 f9fb 	bl	8006148 <lis2dw12_write_reg>
            ret = LIS2DW12_ERROR;
 8005d52:	2800      	cmp	r0, #0
 8005d54:	bf18      	it	ne
 8005d56:	f04f 30ff 	movne.w	r0, #4294967295
}
 8005d5a:	b003      	add	sp, #12
 8005d5c:	bd30      	pop	{r4, r5, pc}
    ret = LIS2DW12_ERROR;
 8005d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d62:	e7e5      	b.n	8005d30 <LIS2DW12_RegisterBusIO+0x3c>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	080052e5 	.word	0x080052e5
 8005d70:	080052f5 	.word	0x080052f5

08005d74 <LIS2DW12_ACC_Enable_Wake_Up_Detection>:
{
 8005d74:	b530      	push	{r4, r5, lr}
  if (pObj->acc_is_enabled == 1U)
 8005d76:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005d7a:	2b01      	cmp	r3, #1
{
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 1U)
 8005d80:	d029      	beq.n	8005dd6 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x62>
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8005d82:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x88>)
 8005d84:	62c3      	str	r3, [r0, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8005d86:	2200      	movs	r2, #0
 8005d88:	8602      	strh	r2, [r0, #48]	; 0x30
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8005d8a:	f100 051c 	add.w	r5, r0, #28
  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4628      	mov	r0, r5
 8005d92:	f000 fb21 	bl	80063d8 <lis2dw12_full_scale_set>
 8005d96:	4601      	mov	r1, r0
 8005d98:	bb68      	cbnz	r0, 8005df6 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x82>
  if (lis2dw12_wkup_dur_set(&(pObj->Ctx), 0x00) != LIS2DW12_OK)
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f000 fbf6 	bl	800658c <lis2dw12_wkup_dur_set>
 8005da0:	bb48      	cbnz	r0, 8005df6 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x82>
  if (lis2dw12_wkup_threshold_set(&(pObj->Ctx), 0x02) != LIS2DW12_OK)
 8005da2:	2102      	movs	r1, #2
 8005da4:	4628      	mov	r0, r5
 8005da6:	f000 fbd7 	bl	8006558 <lis2dw12_wkup_threshold_set>
 8005daa:	bb20      	cbnz	r0, 8005df6 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x82>
  if (lis2dw12_pin_int1_route_get(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8005dac:	a901      	add	r1, sp, #4
 8005dae:	4628      	mov	r0, r5
 8005db0:	f000 fbc8 	bl	8006544 <lis2dw12_pin_int1_route_get>
 8005db4:	b9f8      	cbnz	r0, 8005df6 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x82>
  val.int1_wu = PROPERTY_ENABLE;
 8005db6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8005dba:	a901      	add	r1, sp, #4
  val.int1_wu = PROPERTY_ENABLE;
 8005dbc:	f043 0320 	orr.w	r3, r3, #32
  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8005dc0:	4628      	mov	r0, r5
  val.int1_wu = PROPERTY_ENABLE;
 8005dc2:	f88d 3004 	strb.w	r3, [sp, #4]
  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8005dc6:	f000 fb81 	bl	80064cc <lis2dw12_pin_int1_route_set>
 8005dca:	3800      	subs	r0, #0
 8005dcc:	bf18      	it	ne
 8005dce:	2001      	movne	r0, #1
 8005dd0:	4240      	negs	r0, r0
}
 8005dd2:	b003      	add	sp, #12
 8005dd4:	bd30      	pop	{r4, r5, pc}
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8005dd6:	f100 051c 	add.w	r5, r0, #28
 8005dda:	2106      	movs	r1, #6
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f000 fa55 	bl	800628c <lis2dw12_data_rate_set>
 8005de2:	b940      	cbnz	r0, 8005df6 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x82>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8005de4:	2104      	movs	r1, #4
 8005de6:	4628      	mov	r0, r5
 8005de8:	f000 f9b6 	bl	8006158 <lis2dw12_power_mode_set>
 8005dec:	b918      	cbnz	r0, 8005df6 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x82>
  pObj->acc_odr = Odr;
 8005dee:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x88>)
  pObj->acc_operating_mode = Mode;
 8005df0:	8620      	strh	r0, [r4, #48]	; 0x30
  pObj->acc_odr = Odr;
 8005df2:	62e3      	str	r3, [r4, #44]	; 0x2c
  return LIS2DW12_OK;
 8005df4:	e7cb      	b.n	8005d8e <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x1a>
    return LIS2DW12_ERROR;
 8005df6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfa:	e7ea      	b.n	8005dd2 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x5e>
 8005dfc:	43480000 	.word	0x43480000

08005e00 <LIS2DW12_ACC_Disable_Wake_Up_Detection>:
{
 8005e00:	b510      	push	{r4, lr}
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005e02:	f100 041c 	add.w	r4, r0, #28
{
 8005e06:	b084      	sub	sp, #16
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005e08:	2301      	movs	r3, #1
 8005e0a:	aa01      	add	r2, sp, #4
 8005e0c:	2123      	movs	r1, #35	; 0x23
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 f992 	bl	8006138 <lis2dw12_read_reg>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d141      	bne.n	8005e9c <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x9c>
  ctrl4_int1_reg.int1_wu = PROPERTY_DISABLE;
 8005e18:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8005e1c:	f360 1145 	bfi	r1, r0, #5, #1
 8005e20:	f88d 1004 	strb.w	r1, [sp, #4]
  if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005e24:	2301      	movs	r3, #1
 8005e26:	aa01      	add	r2, sp, #4
 8005e28:	2123      	movs	r1, #35	; 0x23
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 f98c 	bl	8006148 <lis2dw12_write_reg>
 8005e30:	bba0      	cbnz	r0, 8005e9c <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x9c>
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL5_INT2_PAD_CTRL, (uint8_t *)&ctrl5_int2_reg, 1) != LIS2DW12_OK)
 8005e32:	2301      	movs	r3, #1
 8005e34:	aa02      	add	r2, sp, #8
 8005e36:	2124      	movs	r1, #36	; 0x24
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 f97d 	bl	8006138 <lis2dw12_read_reg>
 8005e3e:	bb68      	cbnz	r0, 8005e9c <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x9c>
  if(ctrl5_int2_reg.int2_sleep_chg == 0 && ctrl4_int1_reg.int1_wu == 0 && ctrl4_int1_reg.int1_6d == 0)
 8005e40:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8005e44:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005e48:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005e4c:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 8005e50:	4313      	orrs	r3, r2
 8005e52:	d00e      	beq.n	8005e72 <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x72>
  if (lis2dw12_wkup_threshold_set(&(pObj->Ctx), 0x00) != LIS2DW12_OK)
 8005e54:	2100      	movs	r1, #0
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 fb7e 	bl	8006558 <lis2dw12_wkup_threshold_set>
 8005e5c:	4601      	mov	r1, r0
 8005e5e:	b9e8      	cbnz	r0, 8005e9c <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x9c>
  if (lis2dw12_wkup_dur_set(&(pObj->Ctx), 0x00) != LIS2DW12_OK)
 8005e60:	4620      	mov	r0, r4
 8005e62:	f000 fb93 	bl	800658c <lis2dw12_wkup_dur_set>
 8005e66:	3800      	subs	r0, #0
 8005e68:	bf18      	it	ne
 8005e6a:	2001      	movne	r0, #1
 8005e6c:	4240      	negs	r0, r0
}
 8005e6e:	b004      	add	sp, #16
 8005e70:	bd10      	pop	{r4, pc}
    if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL_REG7, (uint8_t *)&ctrl_reg7, 1) != LIS2DW12_OK)
 8005e72:	2301      	movs	r3, #1
 8005e74:	aa03      	add	r2, sp, #12
 8005e76:	213f      	movs	r1, #63	; 0x3f
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f000 f95d 	bl	8006138 <lis2dw12_read_reg>
 8005e7e:	b968      	cbnz	r0, 8005e9c <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x9c>
    ctrl_reg7.interrupts_enable = PROPERTY_DISABLE;
 8005e80:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8005e84:	f360 1145 	bfi	r1, r0, #5, #1
 8005e88:	f88d 100c 	strb.w	r1, [sp, #12]
    if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL_REG7, (uint8_t *)&ctrl_reg7, 1) != LIS2DW12_OK)
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	aa03      	add	r2, sp, #12
 8005e90:	213f      	movs	r1, #63	; 0x3f
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 f958 	bl	8006148 <lis2dw12_write_reg>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d0db      	beq.n	8005e54 <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x54>
    return LIS2DW12_ERROR;
 8005e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea0:	e7e5      	b.n	8005e6e <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x6e>
 8005ea2:	bf00      	nop

08005ea4 <LIS2DW12_ACC_Enable_6D_Orientation>:
{
 8005ea4:	b530      	push	{r4, r5, lr}
  if (pObj->acc_is_enabled == 1U)
 8005ea6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005eaa:	2b01      	cmp	r3, #1
{
 8005eac:	b083      	sub	sp, #12
 8005eae:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 1U)
 8005eb0:	d024      	beq.n	8005efc <LIS2DW12_ACC_Enable_6D_Orientation+0x58>
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8005eb2:	4b1c      	ldr	r3, [pc, #112]	; (8005f24 <LIS2DW12_ACC_Enable_6D_Orientation+0x80>)
 8005eb4:	62c3      	str	r3, [r0, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	8602      	strh	r2, [r0, #48]	; 0x30
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8005eba:	f100 051c 	add.w	r5, r0, #28
  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 fa89 	bl	80063d8 <lis2dw12_full_scale_set>
 8005ec6:	bb48      	cbnz	r0, 8005f1c <LIS2DW12_ACC_Enable_6D_Orientation+0x78>
  if (lis2dw12_6d_threshold_set(&(pObj->Ctx), 2) != LIS2DW12_OK) /* 60 degrees */
 8005ec8:	2102      	movs	r1, #2
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 fb78 	bl	80065c0 <lis2dw12_6d_threshold_set>
 8005ed0:	bb20      	cbnz	r0, 8005f1c <LIS2DW12_ACC_Enable_6D_Orientation+0x78>
  if (lis2dw12_pin_int1_route_get(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8005ed2:	a901      	add	r1, sp, #4
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f000 fb35 	bl	8006544 <lis2dw12_pin_int1_route_get>
 8005eda:	b9f8      	cbnz	r0, 8005f1c <LIS2DW12_ACC_Enable_6D_Orientation+0x78>
  val.int1_6d = PROPERTY_ENABLE;
 8005edc:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8005ee0:	a901      	add	r1, sp, #4
  val.int1_6d = PROPERTY_ENABLE;
 8005ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8005ee6:	4628      	mov	r0, r5
  val.int1_6d = PROPERTY_ENABLE;
 8005ee8:	f88d 3004 	strb.w	r3, [sp, #4]
  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8005eec:	f000 faee 	bl	80064cc <lis2dw12_pin_int1_route_set>
 8005ef0:	3800      	subs	r0, #0
 8005ef2:	bf18      	it	ne
 8005ef4:	2001      	movne	r0, #1
 8005ef6:	4240      	negs	r0, r0
}
 8005ef8:	b003      	add	sp, #12
 8005efa:	bd30      	pop	{r4, r5, pc}
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8005efc:	f100 051c 	add.w	r5, r0, #28
 8005f00:	2106      	movs	r1, #6
 8005f02:	4628      	mov	r0, r5
 8005f04:	f000 f9c2 	bl	800628c <lis2dw12_data_rate_set>
 8005f08:	b940      	cbnz	r0, 8005f1c <LIS2DW12_ACC_Enable_6D_Orientation+0x78>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8005f0a:	2104      	movs	r1, #4
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 f923 	bl	8006158 <lis2dw12_power_mode_set>
 8005f12:	b918      	cbnz	r0, 8005f1c <LIS2DW12_ACC_Enable_6D_Orientation+0x78>
  pObj->acc_odr = Odr;
 8005f14:	4b03      	ldr	r3, [pc, #12]	; (8005f24 <LIS2DW12_ACC_Enable_6D_Orientation+0x80>)
  pObj->acc_operating_mode = Mode;
 8005f16:	8620      	strh	r0, [r4, #48]	; 0x30
  pObj->acc_odr = Odr;
 8005f18:	62e3      	str	r3, [r4, #44]	; 0x2c
  return LIS2DW12_OK;
 8005f1a:	e7d0      	b.n	8005ebe <LIS2DW12_ACC_Enable_6D_Orientation+0x1a>
    return LIS2DW12_ERROR;
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	e7ea      	b.n	8005ef8 <LIS2DW12_ACC_Enable_6D_Orientation+0x54>
 8005f22:	bf00      	nop
 8005f24:	43480000 	.word	0x43480000

08005f28 <LIS2DW12_ACC_Disable_6D_Orientation>:
{
 8005f28:	b510      	push	{r4, lr}
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005f2a:	f100 041c 	add.w	r4, r0, #28
{
 8005f2e:	b084      	sub	sp, #16
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005f30:	2301      	movs	r3, #1
 8005f32:	aa01      	add	r2, sp, #4
 8005f34:	2123      	movs	r1, #35	; 0x23
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 f8fe 	bl	8006138 <lis2dw12_read_reg>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d13c      	bne.n	8005fba <LIS2DW12_ACC_Disable_6D_Orientation+0x92>
  ctrl4_int1_reg.int1_6d = PROPERTY_DISABLE;
 8005f40:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8005f44:	f360 11c7 	bfi	r1, r0, #7, #1
 8005f48:	f88d 1004 	strb.w	r1, [sp, #4]
  if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	aa01      	add	r2, sp, #4
 8005f50:	2123      	movs	r1, #35	; 0x23
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 f8f8 	bl	8006148 <lis2dw12_write_reg>
 8005f58:	bb78      	cbnz	r0, 8005fba <LIS2DW12_ACC_Disable_6D_Orientation+0x92>
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL5_INT2_PAD_CTRL, (uint8_t *)&ctrl5_int2_reg, 1) != LIS2DW12_OK)
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	aa02      	add	r2, sp, #8
 8005f5e:	2124      	movs	r1, #36	; 0x24
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 f8e9 	bl	8006138 <lis2dw12_read_reg>
 8005f66:	bb40      	cbnz	r0, 8005fba <LIS2DW12_ACC_Disable_6D_Orientation+0x92>
  if(ctrl5_int2_reg.int2_sleep_chg == 0 && ctrl4_int1_reg.int1_wu == 0 && ctrl4_int1_reg.int1_6d == 0)
 8005f68:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8005f6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005f70:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005f74:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	d009      	beq.n	8005f90 <LIS2DW12_ACC_Disable_6D_Orientation+0x68>
  if (lis2dw12_6d_threshold_set(&(pObj->Ctx), 0) != LIS2DW12_OK)
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 fb1e 	bl	80065c0 <lis2dw12_6d_threshold_set>
 8005f84:	3800      	subs	r0, #0
 8005f86:	bf18      	it	ne
 8005f88:	2001      	movne	r0, #1
 8005f8a:	4240      	negs	r0, r0
}
 8005f8c:	b004      	add	sp, #16
 8005f8e:	bd10      	pop	{r4, pc}
    if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL_REG7, (uint8_t *)&ctrl_reg7, 1) != LIS2DW12_OK)
 8005f90:	2301      	movs	r3, #1
 8005f92:	aa03      	add	r2, sp, #12
 8005f94:	213f      	movs	r1, #63	; 0x3f
 8005f96:	4620      	mov	r0, r4
 8005f98:	f000 f8ce 	bl	8006138 <lis2dw12_read_reg>
 8005f9c:	b968      	cbnz	r0, 8005fba <LIS2DW12_ACC_Disable_6D_Orientation+0x92>
    ctrl_reg7.interrupts_enable = PROPERTY_DISABLE;
 8005f9e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8005fa2:	f360 1145 	bfi	r1, r0, #5, #1
 8005fa6:	f88d 100c 	strb.w	r1, [sp, #12]
    if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL_REG7, (uint8_t *)&ctrl_reg7, 1) != LIS2DW12_OK)
 8005faa:	2301      	movs	r3, #1
 8005fac:	aa03      	add	r2, sp, #12
 8005fae:	213f      	movs	r1, #63	; 0x3f
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f000 f8c9 	bl	8006148 <lis2dw12_write_reg>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d0e0      	beq.n	8005f7c <LIS2DW12_ACC_Disable_6D_Orientation+0x54>
    return LIS2DW12_ERROR;
 8005fba:	f04f 30ff 	mov.w	r0, #4294967295
 8005fbe:	e7e5      	b.n	8005f8c <LIS2DW12_ACC_Disable_6D_Orientation+0x64>

08005fc0 <LIS2DW12_ACC_Get_6D_Orientation_XL>:
{
 8005fc0:	b510      	push	{r4, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	460c      	mov	r4, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_SIXD_SRC, (uint8_t *)&data, 1) != LIS2DW12_OK)
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	aa01      	add	r2, sp, #4
 8005fca:	213a      	movs	r1, #58	; 0x3a
 8005fcc:	301c      	adds	r0, #28
 8005fce:	f000 f8b3 	bl	8006138 <lis2dw12_read_reg>
 8005fd2:	b930      	cbnz	r0, 8005fe2 <LIS2DW12_ACC_Get_6D_Orientation_XL+0x22>
  *XLow = data.xl;
 8005fd4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005fd8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fdc:	7023      	strb	r3, [r4, #0]
}
 8005fde:	b002      	add	sp, #8
 8005fe0:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8005fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe6:	e7fa      	b.n	8005fde <LIS2DW12_ACC_Get_6D_Orientation_XL+0x1e>

08005fe8 <LIS2DW12_ACC_Get_6D_Orientation_XH>:
{
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	460c      	mov	r4, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_SIXD_SRC, (uint8_t *)&data, 1) != LIS2DW12_OK)
 8005fee:	2301      	movs	r3, #1
 8005ff0:	aa01      	add	r2, sp, #4
 8005ff2:	213a      	movs	r1, #58	; 0x3a
 8005ff4:	301c      	adds	r0, #28
 8005ff6:	f000 f89f 	bl	8006138 <lis2dw12_read_reg>
 8005ffa:	b930      	cbnz	r0, 800600a <LIS2DW12_ACC_Get_6D_Orientation_XH+0x22>
  *XHigh = data.xh;
 8005ffc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006000:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006004:	7023      	strb	r3, [r4, #0]
}
 8006006:	b002      	add	sp, #8
 8006008:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 800600a:	f04f 30ff 	mov.w	r0, #4294967295
 800600e:	e7fa      	b.n	8006006 <LIS2DW12_ACC_Get_6D_Orientation_XH+0x1e>

08006010 <LIS2DW12_ACC_Get_6D_Orientation_YL>:
{
 8006010:	b510      	push	{r4, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	460c      	mov	r4, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_SIXD_SRC, (uint8_t *)&data, 1) != LIS2DW12_OK)
 8006016:	2301      	movs	r3, #1
 8006018:	aa01      	add	r2, sp, #4
 800601a:	213a      	movs	r1, #58	; 0x3a
 800601c:	301c      	adds	r0, #28
 800601e:	f000 f88b 	bl	8006138 <lis2dw12_read_reg>
 8006022:	b930      	cbnz	r0, 8006032 <LIS2DW12_ACC_Get_6D_Orientation_YL+0x22>
  *YLow = data.yl;
 8006024:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006028:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800602c:	7023      	strb	r3, [r4, #0]
}
 800602e:	b002      	add	sp, #8
 8006030:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8006032:	f04f 30ff 	mov.w	r0, #4294967295
 8006036:	e7fa      	b.n	800602e <LIS2DW12_ACC_Get_6D_Orientation_YL+0x1e>

08006038 <LIS2DW12_ACC_Get_6D_Orientation_YH>:
{
 8006038:	b510      	push	{r4, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	460c      	mov	r4, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_SIXD_SRC, (uint8_t *)&data, 1) != LIS2DW12_OK)
 800603e:	2301      	movs	r3, #1
 8006040:	aa01      	add	r2, sp, #4
 8006042:	213a      	movs	r1, #58	; 0x3a
 8006044:	301c      	adds	r0, #28
 8006046:	f000 f877 	bl	8006138 <lis2dw12_read_reg>
 800604a:	b930      	cbnz	r0, 800605a <LIS2DW12_ACC_Get_6D_Orientation_YH+0x22>
  *YHigh = data.yh;
 800604c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006050:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006054:	7023      	strb	r3, [r4, #0]
}
 8006056:	b002      	add	sp, #8
 8006058:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 800605a:	f04f 30ff 	mov.w	r0, #4294967295
 800605e:	e7fa      	b.n	8006056 <LIS2DW12_ACC_Get_6D_Orientation_YH+0x1e>

08006060 <LIS2DW12_ACC_Get_6D_Orientation_ZL>:
{
 8006060:	b510      	push	{r4, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	460c      	mov	r4, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_SIXD_SRC, (uint8_t *)&data, 1) != LIS2DW12_OK)
 8006066:	2301      	movs	r3, #1
 8006068:	aa01      	add	r2, sp, #4
 800606a:	213a      	movs	r1, #58	; 0x3a
 800606c:	301c      	adds	r0, #28
 800606e:	f000 f863 	bl	8006138 <lis2dw12_read_reg>
 8006072:	b930      	cbnz	r0, 8006082 <LIS2DW12_ACC_Get_6D_Orientation_ZL+0x22>
  *ZLow = data.zl;
 8006074:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006078:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800607c:	7023      	strb	r3, [r4, #0]
}
 800607e:	b002      	add	sp, #8
 8006080:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8006082:	f04f 30ff 	mov.w	r0, #4294967295
 8006086:	e7fa      	b.n	800607e <LIS2DW12_ACC_Get_6D_Orientation_ZL+0x1e>

08006088 <LIS2DW12_ACC_Get_6D_Orientation_ZH>:
{
 8006088:	b510      	push	{r4, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	460c      	mov	r4, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_SIXD_SRC, (uint8_t *)&data, 1) != LIS2DW12_OK)
 800608e:	2301      	movs	r3, #1
 8006090:	aa01      	add	r2, sp, #4
 8006092:	213a      	movs	r1, #58	; 0x3a
 8006094:	301c      	adds	r0, #28
 8006096:	f000 f84f 	bl	8006138 <lis2dw12_read_reg>
 800609a:	b930      	cbnz	r0, 80060aa <LIS2DW12_ACC_Get_6D_Orientation_ZH+0x22>
  *ZHigh = data.zh;
 800609c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80060a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80060a4:	7023      	strb	r3, [r4, #0]
}
 80060a6:	b002      	add	sp, #8
 80060a8:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 80060aa:	f04f 30ff 	mov.w	r0, #4294967295
 80060ae:	e7fa      	b.n	80060a6 <LIS2DW12_ACC_Get_6D_Orientation_ZH+0x1e>

080060b0 <LIS2DW12_ACC_Get_Event_Status>:
{
 80060b0:	b530      	push	{r4, r5, lr}
  (void)memset((void *)Status, 0x0, sizeof(LIS2DW12_Event_Status_t));
 80060b2:	2300      	movs	r3, #0
{
 80060b4:	b085      	sub	sp, #20
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_STATUS, (uint8_t *)&status_reg, 1) != LIS2DW12_OK)
 80060b6:	f100 041c 	add.w	r4, r0, #28
  (void)memset((void *)Status, 0x0, sizeof(LIS2DW12_Event_Status_t));
 80060ba:	600b      	str	r3, [r1, #0]
{
 80060bc:	460d      	mov	r5, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_STATUS, (uint8_t *)&status_reg, 1) != LIS2DW12_OK)
 80060be:	2301      	movs	r3, #1
 80060c0:	aa01      	add	r2, sp, #4
 80060c2:	2127      	movs	r1, #39	; 0x27
 80060c4:	4620      	mov	r0, r4
 80060c6:	f000 f837 	bl	8006138 <lis2dw12_read_reg>
 80060ca:	bb90      	cbnz	r0, 8006132 <LIS2DW12_ACC_Get_Event_Status+0x82>
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 80060cc:	2301      	movs	r3, #1
 80060ce:	aa02      	add	r2, sp, #8
 80060d0:	2123      	movs	r1, #35	; 0x23
 80060d2:	4620      	mov	r0, r4
 80060d4:	f000 f830 	bl	8006138 <lis2dw12_read_reg>
 80060d8:	bb58      	cbnz	r0, 8006132 <LIS2DW12_ACC_Get_Event_Status+0x82>
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL5_INT2_PAD_CTRL, (uint8_t *)&ctrl5_int2_reg, 1) != LIS2DW12_OK)
 80060da:	2301      	movs	r3, #1
 80060dc:	aa03      	add	r2, sp, #12
 80060de:	2124      	movs	r1, #36	; 0x24
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 f829 	bl	8006138 <lis2dw12_read_reg>
 80060e6:	bb20      	cbnz	r0, 8006132 <LIS2DW12_ACC_Get_Event_Status+0x82>
  if (ctrl4_int1_reg.int1_wu == 1U)
 80060e8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80060ec:	0699      	lsls	r1, r3, #26
 80060ee:	d507      	bpl.n	8006100 <LIS2DW12_ACC_Get_Event_Status+0x50>
    if (status_reg.wu_ia == 1U)
 80060f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80060f4:	0652      	lsls	r2, r2, #25
 80060f6:	d503      	bpl.n	8006100 <LIS2DW12_ACC_Get_Event_Status+0x50>
      Status->WakeUpStatus = 1;
 80060f8:	782a      	ldrb	r2, [r5, #0]
 80060fa:	f042 0208 	orr.w	r2, r2, #8
 80060fe:	702a      	strb	r2, [r5, #0]
  if (ctrl4_int1_reg.int1_6d == 1U)
 8006100:	061c      	lsls	r4, r3, #24
 8006102:	d40d      	bmi.n	8006120 <LIS2DW12_ACC_Get_Event_Status+0x70>
  if (ctrl5_int2_reg.int2_sleep_chg == 1U)
 8006104:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8006108:	065a      	lsls	r2, r3, #25
 800610a:	d507      	bpl.n	800611c <LIS2DW12_ACC_Get_Event_Status+0x6c>
    if (status_reg.sleep_state == 1U)
 800610c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006110:	069b      	lsls	r3, r3, #26
 8006112:	d503      	bpl.n	800611c <LIS2DW12_ACC_Get_Event_Status+0x6c>
      Status->SleepStatus = 1;
 8006114:	782b      	ldrb	r3, [r5, #0]
 8006116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611a:	702b      	strb	r3, [r5, #0]
}
 800611c:	b005      	add	sp, #20
 800611e:	bd30      	pop	{r4, r5, pc}
    if (status_reg._6d_ia == 1U)
 8006120:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006124:	0759      	lsls	r1, r3, #29
 8006126:	d5ed      	bpl.n	8006104 <LIS2DW12_ACC_Get_Event_Status+0x54>
      Status->D6DOrientationStatus = 1;
 8006128:	782b      	ldrb	r3, [r5, #0]
 800612a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612e:	702b      	strb	r3, [r5, #0]
 8006130:	e7e8      	b.n	8006104 <LIS2DW12_ACC_Get_Event_Status+0x54>
    return LIS2DW12_ERROR;
 8006132:	f04f 30ff 	mov.w	r0, #4294967295
 8006136:	e7f1      	b.n	800611c <LIS2DW12_ACC_Get_Event_Status+0x6c>

08006138 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006138:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800613a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800613e:	46a4      	mov	ip, r4
  return ret;
}
 8006140:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006144:	4760      	bx	ip
 8006146:	bf00      	nop

08006148 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8006148:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800614a:	6804      	ldr	r4, [r0, #0]
 800614c:	6880      	ldr	r0, [r0, #8]
 800614e:	46a4      	mov	ip, r4
  return ret;
}
 8006150:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006154:	4760      	bx	ip
 8006156:	bf00      	nop

08006158 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	4604      	mov	r4, r0
 800615c:	b082      	sub	sp, #8
 800615e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006160:	6880      	ldr	r0, [r0, #8]
 8006162:	6866      	ldr	r6, [r4, #4]
 8006164:	2301      	movs	r3, #1
 8006166:	466a      	mov	r2, sp
 8006168:	2120      	movs	r1, #32
 800616a:	47b0      	blx	r6
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);

  if (ret == 0) {
 800616c:	bb18      	cbnz	r0, 80061b6 <lis2dw12_power_mode_set+0x5e>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 800616e:	f89d 2000 	ldrb.w	r2, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006172:	68a0      	ldr	r0, [r4, #8]
 8006174:	6826      	ldr	r6, [r4, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8006176:	f022 020f 	bic.w	r2, r2, #15
 800617a:	f005 030f 	and.w	r3, r5, #15
 800617e:	4313      	orrs	r3, r2
 8006180:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006184:	466a      	mov	r2, sp
 8006186:	2301      	movs	r3, #1
 8006188:	2120      	movs	r1, #32
 800618a:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
  }

  if (ret == 0) {
 800618c:	b998      	cbnz	r0, 80061b6 <lis2dw12_power_mode_set+0x5e>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800618e:	68a0      	ldr	r0, [r4, #8]
 8006190:	6866      	ldr	r6, [r4, #4]
 8006192:	2301      	movs	r3, #1
 8006194:	aa01      	add	r2, sp, #4
 8006196:	2125      	movs	r1, #37	; 0x25
 8006198:	47b0      	blx	r6
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
  }

  if (ret == 0) {
 800619a:	b960      	cbnz	r0, 80061b6 <lis2dw12_power_mode_set+0x5e>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 800619c:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80061a0:	68a0      	ldr	r0, [r4, #8]
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 80061a2:	092d      	lsrs	r5, r5, #4
 80061a4:	f365 0382 	bfi	r3, r5, #2, #1
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80061a8:	aa01      	add	r2, sp, #4
 80061aa:	6825      	ldr	r5, [r4, #0]
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 80061ac:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80061b0:	2125      	movs	r1, #37	; 0x25
 80061b2:	2301      	movs	r3, #1
 80061b4:	47a8      	blx	r5
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
  }

  return ret;
}
 80061b6:	b002      	add	sp, #8
 80061b8:	bd70      	pop	{r4, r5, r6, pc}
 80061ba:	bf00      	nop

080061bc <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 80061bc:	b570      	push	{r4, r5, r6, lr}
 80061be:	4604      	mov	r4, r0
 80061c0:	b082      	sub	sp, #8
 80061c2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80061c4:	6880      	ldr	r0, [r0, #8]
 80061c6:	6866      	ldr	r6, [r4, #4]
 80061c8:	2301      	movs	r3, #1
 80061ca:	466a      	mov	r2, sp
 80061cc:	2120      	movs	r1, #32
 80061ce:	47b0      	blx	r6
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);

  if (ret == 0) {
 80061d0:	bb30      	cbnz	r0, 8006220 <lis2dw12_power_mode_get+0x64>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80061d2:	2301      	movs	r3, #1
 80061d4:	aa01      	add	r2, sp, #4
 80061d6:	2125      	movs	r1, #37	; 0x25
 80061d8:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80061dc:	47b0      	blx	r6
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80061de:	f89d 2000 	ldrb.w	r2, [sp]
 80061e2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80061e6:	f002 030c 	and.w	r3, r2, #12
 80061ea:	f3c1 0180 	ubfx	r1, r1, #2, #1
 80061ee:	eb03 1301 	add.w	r3, r3, r1, lsl #4
             ctrl1.lp_mode)) {
 80061f2:	f002 0203 	and.w	r2, r2, #3
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80061f6:	4413      	add	r3, r2
 80061f8:	2b1b      	cmp	r3, #27
 80061fa:	d80f      	bhi.n	800621c <lis2dw12_power_mode_get+0x60>
 80061fc:	e8df f003 	tbb	[pc, r3]
 8006200:	3c3f4212 	.word	0x3c3f4212
 8006204:	0e0e0e0e 	.word	0x0e0e0e0e
 8006208:	2d303336 	.word	0x2d303336
 800620c:	0e0e0e0e 	.word	0x0e0e0e0e
 8006210:	2124272a 	.word	0x2124272a
 8006214:	0e0e0e1e 	.word	0x0e0e0e1e
 8006218:	3915181b 	.word	0x3915181b
      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
        break;

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800621c:	2304      	movs	r3, #4
 800621e:	702b      	strb	r3, [r5, #0]
        break;
    }
  }

  return ret;
}
 8006220:	b002      	add	sp, #8
 8006222:	bd70      	pop	{r4, r5, r6, pc}
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8006224:	2300      	movs	r3, #0
 8006226:	702b      	strb	r3, [r5, #0]
        break;
 8006228:	e7fa      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 800622a:	231a      	movs	r3, #26
 800622c:	702b      	strb	r3, [r5, #0]
        break;
 800622e:	e7f7      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8006230:	2319      	movs	r3, #25
 8006232:	702b      	strb	r3, [r5, #0]
        break;
 8006234:	e7f4      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8006236:	2318      	movs	r3, #24
 8006238:	702b      	strb	r3, [r5, #0]
        break;
 800623a:	e7f1      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800623c:	2314      	movs	r3, #20
 800623e:	702b      	strb	r3, [r5, #0]
        break;
 8006240:	e7ee      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8006242:	2313      	movs	r3, #19
 8006244:	702b      	strb	r3, [r5, #0]
        break;
 8006246:	e7eb      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8006248:	2312      	movs	r3, #18
 800624a:	702b      	strb	r3, [r5, #0]
        break;
 800624c:	e7e8      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 800624e:	2311      	movs	r3, #17
 8006250:	702b      	strb	r3, [r5, #0]
        break;
 8006252:	e7e5      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8006254:	2310      	movs	r3, #16
 8006256:	702b      	strb	r3, [r5, #0]
        break;
 8006258:	e7e2      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 800625a:	230b      	movs	r3, #11
 800625c:	702b      	strb	r3, [r5, #0]
        break;
 800625e:	e7df      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8006260:	230a      	movs	r3, #10
 8006262:	702b      	strb	r3, [r5, #0]
        break;
 8006264:	e7dc      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8006266:	2309      	movs	r3, #9
 8006268:	702b      	strb	r3, [r5, #0]
        break;
 800626a:	e7d9      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 800626c:	2308      	movs	r3, #8
 800626e:	702b      	strb	r3, [r5, #0]
        break;
 8006270:	e7d6      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8006272:	231b      	movs	r3, #27
 8006274:	702b      	strb	r3, [r5, #0]
        break;
 8006276:	e7d3      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8006278:	2303      	movs	r3, #3
 800627a:	702b      	strb	r3, [r5, #0]
        break;
 800627c:	e7d0      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_3;
 800627e:	2302      	movs	r3, #2
 8006280:	702b      	strb	r3, [r5, #0]
        break;
 8006282:	e7cd      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8006284:	2301      	movs	r3, #1
 8006286:	702b      	strb	r3, [r5, #0]
        break;
 8006288:	e7ca      	b.n	8006220 <lis2dw12_power_mode_get+0x64>
 800628a:	bf00      	nop

0800628c <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	4604      	mov	r4, r0
 8006290:	b082      	sub	sp, #8
 8006292:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006294:	6880      	ldr	r0, [r0, #8]
 8006296:	6866      	ldr	r6, [r4, #4]
 8006298:	2301      	movs	r3, #1
 800629a:	466a      	mov	r2, sp
 800629c:	2120      	movs	r1, #32
 800629e:	47b0      	blx	r6
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);

  if (ret == 0) {
 80062a0:	bb00      	cbnz	r0, 80062e4 <lis2dw12_data_rate_set+0x58>
    ctrl1.odr = (uint8_t) val;
 80062a2:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80062a6:	6826      	ldr	r6, [r4, #0]
 80062a8:	68a0      	ldr	r0, [r4, #8]
    ctrl1.odr = (uint8_t) val;
 80062aa:	f365 1307 	bfi	r3, r5, #4, #4
 80062ae:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80062b2:	466a      	mov	r2, sp
 80062b4:	2301      	movs	r3, #1
 80062b6:	2120      	movs	r1, #32
 80062b8:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
  }

  if (ret == 0) {
 80062ba:	b998      	cbnz	r0, 80062e4 <lis2dw12_data_rate_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80062bc:	68a0      	ldr	r0, [r4, #8]
 80062be:	6866      	ldr	r6, [r4, #4]
 80062c0:	2301      	movs	r3, #1
 80062c2:	aa01      	add	r2, sp, #4
 80062c4:	2122      	movs	r1, #34	; 0x22
 80062c6:	47b0      	blx	r6
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
  }

  if (ret == 0) {
 80062c8:	b960      	cbnz	r0, 80062e4 <lis2dw12_data_rate_set+0x58>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 80062ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80062ce:	68a0      	ldr	r0, [r4, #8]
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 80062d0:	092d      	lsrs	r5, r5, #4
 80062d2:	f365 0301 	bfi	r3, r5, #0, #2
 80062d6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80062da:	6825      	ldr	r5, [r4, #0]
 80062dc:	2301      	movs	r3, #1
 80062de:	aa01      	add	r2, sp, #4
 80062e0:	2122      	movs	r1, #34	; 0x22
 80062e2:	47a8      	blx	r5
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
  }

  return ret;
}
 80062e4:	b002      	add	sp, #8
 80062e6:	bd70      	pop	{r4, r5, r6, pc}

080062e8 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	4604      	mov	r4, r0
 80062ec:	b082      	sub	sp, #8
 80062ee:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80062f0:	6880      	ldr	r0, [r0, #8]
 80062f2:	6866      	ldr	r6, [r4, #4]
 80062f4:	2301      	movs	r3, #1
 80062f6:	466a      	mov	r2, sp
 80062f8:	2120      	movs	r1, #32
 80062fa:	47b0      	blx	r6
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);

  if (ret == 0) {
 80062fc:	bb70      	cbnz	r0, 800635c <lis2dw12_data_rate_get+0x74>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80062fe:	2301      	movs	r3, #1
 8006300:	aa01      	add	r2, sp, #4
 8006302:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8006306:	2122      	movs	r1, #34	; 0x22
 8006308:	47b0      	blx	r6
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 800630a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800630e:	f89d 3000 	ldrb.w	r3, [sp]
 8006312:	f002 0203 	and.w	r2, r2, #3
 8006316:	091b      	lsrs	r3, r3, #4
 8006318:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800631c:	2b32      	cmp	r3, #50	; 0x32
 800631e:	d81b      	bhi.n	8006358 <lis2dw12_data_rate_get+0x70>
 8006320:	e8df f003 	tbb	[pc, r3]
 8006324:	36393c1a 	.word	0x36393c1a
 8006328:	2a2d3033 	.word	0x2a2d3033
 800632c:	1a1a2427 	.word	0x1a1a2427
 8006330:	1a1a1a1a 	.word	0x1a1a1a1a
 8006334:	1a211a1a 	.word	0x1a211a1a
 8006338:	1a1a1a1a 	.word	0x1a1a1a1a
 800633c:	1a1a1a1a 	.word	0x1a1a1a1a
 8006340:	1a1a1a1a 	.word	0x1a1a1a1a
 8006344:	1a1a1a1a 	.word	0x1a1a1a1a
 8006348:	1a1a1a1a 	.word	0x1a1a1a1a
 800634c:	1a1a1a1a 	.word	0x1a1a1a1a
 8006350:	1a1a1a1a 	.word	0x1a1a1a1a
 8006354:	1a1a      	.short	0x1a1a
 8006356:	1e          	.byte	0x1e
 8006357:	00          	.byte	0x00
      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
        break;

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8006358:	2300      	movs	r3, #0
 800635a:	702b      	strb	r3, [r5, #0]
        break;
    }
  }

  return ret;
}
 800635c:	b002      	add	sp, #8
 800635e:	bd70      	pop	{r4, r5, r6, pc}
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8006360:	2332      	movs	r3, #50	; 0x32
 8006362:	702b      	strb	r3, [r5, #0]
        break;
 8006364:	e7fa      	b.n	800635c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8006366:	2312      	movs	r3, #18
 8006368:	702b      	strb	r3, [r5, #0]
        break;
 800636a:	e7f7      	b.n	800635c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_1k6Hz;
 800636c:	2309      	movs	r3, #9
 800636e:	702b      	strb	r3, [r5, #0]
        break;
 8006370:	e7f4      	b.n	800635c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_800Hz;
 8006372:	2308      	movs	r3, #8
 8006374:	702b      	strb	r3, [r5, #0]
        break;
 8006376:	e7f1      	b.n	800635c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_400Hz;
 8006378:	2307      	movs	r3, #7
 800637a:	702b      	strb	r3, [r5, #0]
        break;
 800637c:	e7ee      	b.n	800635c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_200Hz;
 800637e:	2306      	movs	r3, #6
 8006380:	702b      	strb	r3, [r5, #0]
        break;
 8006382:	e7eb      	b.n	800635c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_100Hz;
 8006384:	2305      	movs	r3, #5
 8006386:	702b      	strb	r3, [r5, #0]
        break;
 8006388:	e7e8      	b.n	800635c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_50Hz;
 800638a:	2304      	movs	r3, #4
 800638c:	702b      	strb	r3, [r5, #0]
        break;
 800638e:	e7e5      	b.n	800635c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_25Hz;
 8006390:	2303      	movs	r3, #3
 8006392:	702b      	strb	r3, [r5, #0]
        break;
 8006394:	e7e2      	b.n	800635c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_12Hz5;
 8006396:	2302      	movs	r3, #2
 8006398:	702b      	strb	r3, [r5, #0]
        break;
 800639a:	e7df      	b.n	800635c <lis2dw12_data_rate_get+0x74>
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 800639c:	2301      	movs	r3, #1
 800639e:	702b      	strb	r3, [r5, #0]
        break;
 80063a0:	e7dc      	b.n	800635c <lis2dw12_data_rate_get+0x74>
 80063a2:	bf00      	nop

080063a4 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	4604      	mov	r4, r0
 80063a8:	b082      	sub	sp, #8
 80063aa:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80063ac:	6880      	ldr	r0, [r0, #8]
 80063ae:	6866      	ldr	r6, [r4, #4]
 80063b0:	2301      	movs	r3, #1
 80063b2:	aa01      	add	r2, sp, #4
 80063b4:	2121      	movs	r1, #33	; 0x21
 80063b6:	47b0      	blx	r6
  lis2dw12_ctrl2_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);

  if (ret == 0) {
 80063b8:	b958      	cbnz	r0, 80063d2 <lis2dw12_block_data_update_set+0x2e>
    reg.bdu = val;
 80063ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80063be:	6826      	ldr	r6, [r4, #0]
 80063c0:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 80063c2:	f365 03c3 	bfi	r3, r5, #3, #1
 80063c6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80063ca:	aa01      	add	r2, sp, #4
 80063cc:	2301      	movs	r3, #1
 80063ce:	2121      	movs	r1, #33	; 0x21
 80063d0:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80063d2:	b002      	add	sp, #8
 80063d4:	bd70      	pop	{r4, r5, r6, pc}
 80063d6:	bf00      	nop

080063d8 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	4604      	mov	r4, r0
 80063dc:	b082      	sub	sp, #8
 80063de:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80063e0:	6880      	ldr	r0, [r0, #8]
 80063e2:	6866      	ldr	r6, [r4, #4]
 80063e4:	2301      	movs	r3, #1
 80063e6:	aa01      	add	r2, sp, #4
 80063e8:	2125      	movs	r1, #37	; 0x25
 80063ea:	47b0      	blx	r6
  lis2dw12_ctrl6_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);

  if (ret == 0) {
 80063ec:	b958      	cbnz	r0, 8006406 <lis2dw12_full_scale_set+0x2e>
    reg.fs = (uint8_t) val;
 80063ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80063f2:	6826      	ldr	r6, [r4, #0]
 80063f4:	68a0      	ldr	r0, [r4, #8]
    reg.fs = (uint8_t) val;
 80063f6:	f365 1305 	bfi	r3, r5, #4, #2
 80063fa:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80063fe:	aa01      	add	r2, sp, #4
 8006400:	2301      	movs	r3, #1
 8006402:	2125      	movs	r1, #37	; 0x25
 8006404:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
  }

  return ret;
}
 8006406:	b002      	add	sp, #8
 8006408:	bd70      	pop	{r4, r5, r6, pc}
 800640a:	bf00      	nop

0800640c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 800640c:	b530      	push	{r4, r5, lr}
 800640e:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006410:	2301      	movs	r3, #1
 8006412:	aa01      	add	r2, sp, #4
 8006414:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
{
 8006418:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800641a:	2125      	movs	r1, #37	; 0x25
 800641c:	47a8      	blx	r5
  lis2dw12_ctrl6_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);

  switch (reg.fs) {
 800641e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006422:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8006426:	2a02      	cmp	r2, #2
 8006428:	4613      	mov	r3, r2
 800642a:	d007      	beq.n	800643c <lis2dw12_full_scale_get+0x30>
 800642c:	2a03      	cmp	r2, #3
 800642e:	d005      	beq.n	800643c <lis2dw12_full_scale_get+0x30>
 8006430:	2a01      	cmp	r2, #1
 8006432:	d003      	beq.n	800643c <lis2dw12_full_scale_get+0x30>
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8006434:	2300      	movs	r3, #0
 8006436:	7023      	strb	r3, [r4, #0]
      *val = LIS2DW12_2g;
      break;
  }

  return ret;
}
 8006438:	b003      	add	sp, #12
 800643a:	bd30      	pop	{r4, r5, pc}
      *val = LIS2DW12_16g;
 800643c:	7023      	strb	r3, [r4, #0]
}
 800643e:	b003      	add	sp, #12
 8006440:	bd30      	pop	{r4, r5, pc}
 8006442:	bf00      	nop

08006444 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006444:	b530      	push	{r4, r5, lr}
 8006446:	b083      	sub	sp, #12
 8006448:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800644a:	466a      	mov	r2, sp
 800644c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8006450:	2306      	movs	r3, #6
 8006452:	2128      	movs	r1, #40	; 0x28
 8006454:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8006456:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800645a:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800645e:	f89d c003 	ldrb.w	ip, [sp, #3]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8006462:	f89d 1005 	ldrb.w	r1, [sp, #5]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8006466:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800646a:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800646c:	f89d 2002 	ldrb.w	r2, [sp, #2]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8006470:	f89d 3004 	ldrb.w	r3, [sp, #4]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8006474:	eb02 220c 	add.w	r2, r2, ip, lsl #8
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8006478:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800647c:	8062      	strh	r2, [r4, #2]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800647e:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 8006480:	b003      	add	sp, #12
 8006482:	bd30      	pop	{r4, r5, pc}

08006484 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006484:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006486:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 800648a:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800648c:	46a4      	mov	ip, r4
 800648e:	2301      	movs	r3, #1
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
  return ret;
}
 8006490:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006494:	210f      	movs	r1, #15
 8006496:	4760      	bx	ip

08006498 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	4604      	mov	r4, r0
 800649c:	b082      	sub	sp, #8
 800649e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80064a0:	6880      	ldr	r0, [r0, #8]
 80064a2:	6866      	ldr	r6, [r4, #4]
 80064a4:	2301      	movs	r3, #1
 80064a6:	aa01      	add	r2, sp, #4
 80064a8:	2121      	movs	r1, #33	; 0x21
 80064aa:	47b0      	blx	r6
  lis2dw12_ctrl2_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);

  if (ret == 0) {
 80064ac:	b958      	cbnz	r0, 80064c6 <lis2dw12_auto_increment_set+0x2e>
    reg.if_add_inc = val;
 80064ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80064b2:	6826      	ldr	r6, [r4, #0]
 80064b4:	68a0      	ldr	r0, [r4, #8]
    reg.if_add_inc = val;
 80064b6:	f365 0382 	bfi	r3, r5, #2, #1
 80064ba:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80064be:	aa01      	add	r2, sp, #4
 80064c0:	2301      	movs	r3, #1
 80064c2:	2121      	movs	r1, #33	; 0x21
 80064c4:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80064c6:	b002      	add	sp, #8
 80064c8:	bd70      	pop	{r4, r5, r6, pc}
 80064ca:	bf00      	nop

080064cc <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	4604      	mov	r4, r0
 80064d0:	b082      	sub	sp, #8
 80064d2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80064d4:	6880      	ldr	r0, [r0, #8]
 80064d6:	6866      	ldr	r6, [r4, #4]
 80064d8:	2301      	movs	r3, #1
 80064da:	466a      	mov	r2, sp
 80064dc:	2124      	movs	r1, #36	; 0x24
 80064de:	47b0      	blx	r6
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0) {
 80064e0:	bb70      	cbnz	r0, 8006540 <lis2dw12_pin_int1_route_set+0x74>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80064e2:	68a0      	ldr	r0, [r4, #8]
 80064e4:	6866      	ldr	r6, [r4, #4]
 80064e6:	2301      	movs	r3, #1
 80064e8:	aa01      	add	r2, sp, #4
 80064ea:	213f      	movs	r1, #63	; 0x3f
 80064ec:	47b0      	blx	r6
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
  }

  if (ret == 0) {
 80064ee:	bb38      	cbnz	r0, 8006540 <lis2dw12_pin_int1_route_set+0x74>
    if ((val->int1_tap |
         val->int1_ff |
         val->int1_wu |
         val->int1_single_tap |
         val->int1_6d |
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80064f0:	f89d 2000 	ldrb.w	r2, [sp]
    if ((val->int1_tap |
 80064f4:	7829      	ldrb	r1, [r5, #0]
         ctrl5_int2_pad_ctrl.int2_sleep_chg ) != PROPERTY_DISABLE) {
 80064f6:	f3c2 1380 	ubfx	r3, r2, #6, #1
    if ((val->int1_tap |
 80064fa:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80064fe:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 8006502:	4303      	orrs	r3, r0
         val->int1_ff |
 8006504:	f3c1 1000 	ubfx	r0, r1, #4, #1
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8006508:	4303      	orrs	r3, r0
         val->int1_wu |
 800650a:	f3c1 1040 	ubfx	r0, r1, #5, #1
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 800650e:	4303      	orrs	r3, r0
         val->int1_single_tap |
 8006510:	f3c1 1080 	ubfx	r0, r1, #6, #1
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8006514:	4303      	orrs	r3, r0
 8006516:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 800651a:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800651e:	68a0      	ldr	r0, [r4, #8]
 8006520:	f363 1145 	bfi	r1, r3, #5, #1
 8006524:	462a      	mov	r2, r5
 8006526:	2301      	movs	r3, #1
 8006528:	6825      	ldr	r5, [r4, #0]
 800652a:	f88d 1004 	strb.w	r1, [sp, #4]
 800652e:	2123      	movs	r1, #35	; 0x23
 8006530:	47a8      	blx	r5

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
                             (uint8_t *) val, 1);
  }

  if (ret == 0) {
 8006532:	b928      	cbnz	r0, 8006540 <lis2dw12_pin_int1_route_set+0x74>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006534:	6825      	ldr	r5, [r4, #0]
 8006536:	68a0      	ldr	r0, [r4, #8]
 8006538:	2301      	movs	r3, #1
 800653a:	aa01      	add	r2, sp, #4
 800653c:	213f      	movs	r1, #63	; 0x3f
 800653e:	47a8      	blx	r5
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg,
                             1);
  }

  return ret;
}
 8006540:	b002      	add	sp, #8
 8006542:	bd70      	pop	{r4, r5, r6, pc}

08006544 <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8006544:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006546:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 800654a:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800654c:	46a4      	mov	ip, r4
 800654e:	2301      	movs	r3, #1
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
                          (uint8_t *) val, 1);
  return ret;
}
 8006550:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006554:	2123      	movs	r1, #35	; 0x23
 8006556:	4760      	bx	ip

08006558 <lis2dw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006558:	b570      	push	{r4, r5, r6, lr}
 800655a:	4604      	mov	r4, r0
 800655c:	b082      	sub	sp, #8
 800655e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006560:	6880      	ldr	r0, [r0, #8]
 8006562:	6866      	ldr	r6, [r4, #4]
 8006564:	2301      	movs	r3, #1
 8006566:	aa01      	add	r2, sp, #4
 8006568:	2134      	movs	r1, #52	; 0x34
 800656a:	47b0      	blx	r6
  lis2dw12_wake_up_ths_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg,
                          1);

  if (ret == 0) {
 800656c:	b958      	cbnz	r0, 8006586 <lis2dw12_wkup_threshold_set+0x2e>
    reg.wk_ths = val;
 800656e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006572:	6826      	ldr	r6, [r4, #0]
 8006574:	68a0      	ldr	r0, [r4, #8]
    reg.wk_ths = val;
 8006576:	f365 0305 	bfi	r3, r5, #0, #6
 800657a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800657e:	aa01      	add	r2, sp, #4
 8006580:	2301      	movs	r3, #1
 8006582:	2134      	movs	r1, #52	; 0x34
 8006584:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg,
                             1);
  }

  return ret;
}
 8006586:	b002      	add	sp, #8
 8006588:	bd70      	pop	{r4, r5, r6, pc}
 800658a:	bf00      	nop

0800658c <lis2dw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	4604      	mov	r4, r0
 8006590:	b082      	sub	sp, #8
 8006592:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006594:	6880      	ldr	r0, [r0, #8]
 8006596:	6866      	ldr	r6, [r4, #4]
 8006598:	2301      	movs	r3, #1
 800659a:	aa01      	add	r2, sp, #4
 800659c:	2135      	movs	r1, #53	; 0x35
 800659e:	47b0      	blx	r6
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg,
                          1);

  if (ret == 0) {
 80065a0:	b958      	cbnz	r0, 80065ba <lis2dw12_wkup_dur_set+0x2e>
    reg.wake_dur = val;
 80065a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80065a6:	6826      	ldr	r6, [r4, #0]
 80065a8:	68a0      	ldr	r0, [r4, #8]
    reg.wake_dur = val;
 80065aa:	f365 1346 	bfi	r3, r5, #5, #2
 80065ae:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80065b2:	aa01      	add	r2, sp, #4
 80065b4:	2301      	movs	r3, #1
 80065b6:	2135      	movs	r1, #53	; 0x35
 80065b8:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg,
                             1);
  }

  return ret;
}
 80065ba:	b002      	add	sp, #8
 80065bc:	bd70      	pop	{r4, r5, r6, pc}
 80065be:	bf00      	nop

080065c0 <lis2dw12_6d_threshold_set>:
  * @param  val      change the values of 6d_ths in reg TAP_THS_X
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_6d_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	4604      	mov	r4, r0
 80065c4:	b082      	sub	sp, #8
 80065c6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80065c8:	6880      	ldr	r0, [r0, #8]
 80065ca:	6866      	ldr	r6, [r4, #4]
 80065cc:	2301      	movs	r3, #1
 80065ce:	aa01      	add	r2, sp, #4
 80065d0:	2130      	movs	r1, #48	; 0x30
 80065d2:	47b0      	blx	r6
  lis2dw12_tap_ths_x_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_TAP_THS_X, (uint8_t *) &reg, 1);

  if (ret == 0) {
 80065d4:	b958      	cbnz	r0, 80065ee <lis2dw12_6d_threshold_set+0x2e>
    reg._6d_ths = val;
 80065d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80065da:	6826      	ldr	r6, [r4, #0]
 80065dc:	68a0      	ldr	r0, [r4, #8]
    reg._6d_ths = val;
 80065de:	f365 1346 	bfi	r3, r5, #5, #2
 80065e2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80065e6:	aa01      	add	r2, sp, #4
 80065e8:	2301      	movs	r3, #1
 80065ea:	2130      	movs	r1, #48	; 0x30
 80065ec:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_TAP_THS_X, (uint8_t *) &reg,
                             1);
  }

  return ret;
}
 80065ee:	b002      	add	sp, #8
 80065f0:	bd70      	pop	{r4, r5, r6, pc}
 80065f2:	bf00      	nop

080065f4 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80065f4:	b570      	push	{r4, r5, r6, lr}
 80065f6:	4604      	mov	r4, r0
 80065f8:	b082      	sub	sp, #8
 80065fa:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80065fc:	6880      	ldr	r0, [r0, #8]
 80065fe:	6866      	ldr	r6, [r4, #4]
 8006600:	2301      	movs	r3, #1
 8006602:	aa01      	add	r2, sp, #4
 8006604:	212e      	movs	r1, #46	; 0x2e
 8006606:	47b0      	blx	r6
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);

  if (ret == 0) {
 8006608:	b958      	cbnz	r0, 8006622 <lis2dw12_fifo_mode_set+0x2e>
    reg.fmode = (uint8_t) val;
 800660a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800660e:	6826      	ldr	r6, [r4, #0]
 8006610:	68a0      	ldr	r0, [r4, #8]
    reg.fmode = (uint8_t) val;
 8006612:	f365 1347 	bfi	r3, r5, #5, #3
 8006616:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800661a:	aa01      	add	r2, sp, #4
 800661c:	2301      	movs	r3, #1
 800661e:	212e      	movs	r1, #46	; 0x2e
 8006620:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg,
                             1);
  }

  return ret;
}
 8006622:	b002      	add	sp, #8
 8006624:	bd70      	pop	{r4, r5, r6, pc}
 8006626:	bf00      	nop

08006628 <LIS2MDL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8006628:	b410      	push	{r4}
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800662a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
  Capabilities->Magneto      = 1;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 0;
  Capabilities->MagMaxFS     = 50;
  Capabilities->GyroMaxOdr   = 0.0f;
 800662e:	2300      	movs	r3, #0
  Capabilities->GyroMaxFS    = 0;
 8006630:	2000      	movs	r0, #0
  Capabilities->AccMaxOdr    = 0.0f;
  Capabilities->MagMaxOdr    = 100.0f;
 8006632:	4a06      	ldr	r2, [pc, #24]	; (800664c <LIS2MDL_GetCapabilities+0x24>)
  Capabilities->Acc          = 0;
 8006634:	600c      	str	r4, [r1, #0]
  Capabilities->MagMaxFS     = 50;
 8006636:	2432      	movs	r4, #50	; 0x32
 8006638:	60cc      	str	r4, [r1, #12]
  Capabilities->AccMaxFS     = 0;
 800663a:	e9c1 0001 	strd	r0, r0, [r1, #4]
  return LIS2MDL_OK;
}
 800663e:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->GyroMaxOdr   = 0.0f;
 8006642:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8006644:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8006646:	618a      	str	r2, [r1, #24]
}
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	42c80000 	.word	0x42c80000

08006650 <LIS2MDL_MAG_GetSensitivity>:
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8006650:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006654:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 8006656:	2000      	movs	r0, #0
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop

0800665c <LIS2MDL_MAG_GetFullScale>:
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
  *FullScale = 50;
 800665c:	2332      	movs	r3, #50	; 0x32
 800665e:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 8006660:	2000      	movs	r0, #0
 8006662:	4770      	bx	lr

08006664 <LIS2MDL_MAG_SetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
  return LIS2MDL_OK;
}
 8006664:	2000      	movs	r0, #0
 8006666:	4770      	bx	lr

08006668 <LIS2MDL_MAG_SetOutputDataRate>:
{
 8006668:	ee07 1a90 	vmov	s15, r1
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 800666c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8006678:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 800667a:	d908      	bls.n	800668e <LIS2MDL_MAG_SetOutputDataRate+0x26>
 800667c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006688:	d80a      	bhi.n	80066a0 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 800668a:	2101      	movs	r1, #1
 800668c:	e000      	b.n	8006690 <LIS2MDL_MAG_SetOutputDataRate+0x28>
 800668e:	2100      	movs	r1, #0
  if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8006690:	301c      	adds	r0, #28
 8006692:	f000 f977 	bl	8006984 <lis2mdl_data_rate_set>
 8006696:	3800      	subs	r0, #0
 8006698:	bf18      	it	ne
 800669a:	2001      	movne	r0, #1
}
 800669c:	4240      	negs	r0, r0
 800669e:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80066a0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80066b4 <LIS2MDL_MAG_SetOutputDataRate+0x4c>
 80066a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ac:	bf94      	ite	ls
 80066ae:	2102      	movls	r1, #2
 80066b0:	2103      	movhi	r1, #3
 80066b2:	e7ed      	b.n	8006690 <LIS2MDL_MAG_SetOutputDataRate+0x28>
 80066b4:	42480000 	.word	0x42480000

080066b8 <LIS2MDL_Init>:
{
 80066b8:	b538      	push	{r3, r4, r5, lr}
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80066ba:	f100 051c 	add.w	r5, r0, #28
{
 80066be:	4604      	mov	r4, r0
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80066c0:	2101      	movs	r1, #1
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 f994 	bl	80069f0 <lis2mdl_block_data_update_set>
 80066c8:	b990      	cbnz	r0, 80066f0 <LIS2MDL_Init+0x38>
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80066ca:	2102      	movs	r1, #2
 80066cc:	4628      	mov	r0, r5
 80066ce:	f000 f93f 	bl	8006950 <lis2mdl_operating_mode_set>
 80066d2:	b968      	cbnz	r0, 80066f0 <LIS2MDL_Init+0x38>
  if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80066d4:	2103      	movs	r1, #3
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 f954 	bl	8006984 <lis2mdl_data_rate_set>
 80066dc:	4601      	mov	r1, r0
 80066de:	b938      	cbnz	r0, 80066f0 <LIS2MDL_Init+0x38>
  if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 f9c9 	bl	8006a78 <lis2mdl_self_test_set>
 80066e6:	b918      	cbnz	r0, 80066f0 <LIS2MDL_Init+0x38>
  pObj->is_initialized = 1;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
    return LIS2MDL_ERROR;
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80066f4:	bd38      	pop	{r3, r4, r5, pc}
 80066f6:	bf00      	nop

080066f8 <LIS2MDL_ReadID>:
{
 80066f8:	b508      	push	{r3, lr}
  if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80066fa:	301c      	adds	r0, #28
 80066fc:	f000 f9b2 	bl	8006a64 <lis2mdl_device_id_get>
 8006700:	3800      	subs	r0, #0
 8006702:	bf18      	it	ne
 8006704:	2001      	movne	r0, #1
}
 8006706:	4240      	negs	r0, r0
 8006708:	bd08      	pop	{r3, pc}
 800670a:	bf00      	nop

0800670c <LIS2MDL_MAG_GetOutputDataRate>:
{
 800670c:	b510      	push	{r4, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	460c      	mov	r4, r1
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8006712:	301c      	adds	r0, #28
 8006714:	f10d 0107 	add.w	r1, sp, #7
 8006718:	f000 f94e 	bl	80069b8 <lis2mdl_data_rate_get>
 800671c:	b9b8      	cbnz	r0, 800674e <LIS2MDL_MAG_GetOutputDataRate+0x42>
  switch (odr_low_level)
 800671e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006722:	2b03      	cmp	r3, #3
 8006724:	d813      	bhi.n	800674e <LIS2MDL_MAG_GetOutputDataRate+0x42>
 8006726:	e8df f003 	tbb	[pc, r3]
 800672a:	0a06      	.short	0x0a06
 800672c:	020e      	.short	0x020e
      *Odr = 100.0f;
 800672e:	4b09      	ldr	r3, [pc, #36]	; (8006754 <LIS2MDL_MAG_GetOutputDataRate+0x48>)
 8006730:	6023      	str	r3, [r4, #0]
}
 8006732:	b002      	add	sp, #8
 8006734:	bd10      	pop	{r4, pc}
      *Odr = 10.0f;
 8006736:	4b08      	ldr	r3, [pc, #32]	; (8006758 <LIS2MDL_MAG_GetOutputDataRate+0x4c>)
 8006738:	6023      	str	r3, [r4, #0]
}
 800673a:	b002      	add	sp, #8
 800673c:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 800673e:	4b07      	ldr	r3, [pc, #28]	; (800675c <LIS2MDL_MAG_GetOutputDataRate+0x50>)
 8006740:	6023      	str	r3, [r4, #0]
}
 8006742:	b002      	add	sp, #8
 8006744:	bd10      	pop	{r4, pc}
      *Odr = 50.0f;
 8006746:	4b06      	ldr	r3, [pc, #24]	; (8006760 <LIS2MDL_MAG_GetOutputDataRate+0x54>)
 8006748:	6023      	str	r3, [r4, #0]
}
 800674a:	b002      	add	sp, #8
 800674c:	bd10      	pop	{r4, pc}
  switch (odr_low_level)
 800674e:	f04f 30ff 	mov.w	r0, #4294967295
 8006752:	e7ee      	b.n	8006732 <LIS2MDL_MAG_GetOutputDataRate+0x26>
 8006754:	42c80000 	.word	0x42c80000
 8006758:	41200000 	.word	0x41200000
 800675c:	41a00000 	.word	0x41a00000
 8006760:	42480000 	.word	0x42480000

08006764 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8006764:	b510      	push	{r4, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	460c      	mov	r4, r1
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 800676a:	301c      	adds	r0, #28
 800676c:	4669      	mov	r1, sp
 800676e:	f000 f959 	bl	8006a24 <lis2mdl_magnetic_raw_get>
 8006772:	b930      	cbnz	r0, 8006782 <LIS2MDL_MAG_GetAxesRaw+0x1e>
  {
    return LIS2MDL_ERROR;
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006774:	9a00      	ldr	r2, [sp, #0]
  Value->y = data_raw.i16bit[1];
  Value->z = data_raw.i16bit[2];
 8006776:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 800677a:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 800677c:	80a3      	strh	r3, [r4, #4]

  return LIS2MDL_OK;
}
 800677e:	b002      	add	sp, #8
 8006780:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 8006782:	f04f 30ff 	mov.w	r0, #4294967295
 8006786:	e7fa      	b.n	800677e <LIS2MDL_MAG_GetAxesRaw+0x1a>

08006788 <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8006788:	b510      	push	{r4, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	460c      	mov	r4, r1
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 800678e:	301c      	adds	r0, #28
 8006790:	4669      	mov	r1, sp
 8006792:	f000 f947 	bl	8006a24 <lis2mdl_magnetic_raw_get>
 8006796:	bb38      	cbnz	r0, 80067e8 <LIS2MDL_MAG_GetAxes+0x60>

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8006798:	f9bd 3000 	ldrsh.w	r3, [sp]
 800679c:	ee06 3a90 	vmov	s13, r3
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80067a0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80067a4:	ee07 3a10 	vmov	s14, r3
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80067a8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80067ac:	ee07 3a90 	vmov	s15, r3
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80067b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80067b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80067b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80067bc:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 80067c0:	ee66 6a86 	vmul.f32	s13, s13, s12
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80067c4:	ee27 7a06 	vmul.f32	s14, s14, s12
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80067c8:	ee67 7a86 	vmul.f32	s15, s15, s12
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80067cc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80067d0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80067d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80067d8:	edc4 6a00 	vstr	s13, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80067dc:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80067e0:	edc4 7a02 	vstr	s15, [r4, #8]

  return LIS2MDL_OK;
}
 80067e4:	b002      	add	sp, #8
 80067e6:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ec:	e7fa      	b.n	80067e4 <LIS2MDL_MAG_GetAxes+0x5c>
 80067ee:	bf00      	nop

080067f0 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80067f0:	b410      	push	{r4}
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80067f2:	6884      	ldr	r4, [r0, #8]
 80067f4:	b93c      	cbnz	r4, 8006806 <ReadMagRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80067f6:	6944      	ldr	r4, [r0, #20]
 80067f8:	7b00      	ldrb	r0, [r0, #12]
 80067fa:	46a4      	mov	ip, r4
 80067fc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8006800:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006804:	4760      	bx	ip
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006806:	6944      	ldr	r4, [r0, #20]
 8006808:	7b00      	ldrb	r0, [r0, #12]
 800680a:	46a4      	mov	ip, r4
 800680c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
}
 8006810:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006814:	4760      	bx	ip
 8006816:	bf00      	nop

08006818 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006818:	b410      	push	{r4}
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800681a:	6884      	ldr	r4, [r0, #8]
 800681c:	b93c      	cbnz	r4, 800682e <WriteMagRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800681e:	6904      	ldr	r4, [r0, #16]
 8006820:	7b00      	ldrb	r0, [r0, #12]
 8006822:	46a4      	mov	ip, r4
 8006824:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8006828:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800682c:	4760      	bx	ip
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800682e:	6904      	ldr	r4, [r0, #16]
 8006830:	7b00      	ldrb	r0, [r0, #12]
 8006832:	46a4      	mov	ip, r4
 8006834:	f041 0140 	orr.w	r1, r1, #64	; 0x40
}
 8006838:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800683c:	4760      	bx	ip
 800683e:	bf00      	nop

08006840 <LIS2MDL_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 8006840:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8006844:	2b01      	cmp	r3, #1
 8006846:	d00a      	beq.n	800685e <LIS2MDL_MAG_Enable+0x1e>
{
 8006848:	b510      	push	{r4, lr}
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 800684a:	2100      	movs	r1, #0
 800684c:	4604      	mov	r4, r0
 800684e:	301c      	adds	r0, #28
 8006850:	f000 f87e 	bl	8006950 <lis2mdl_operating_mode_set>
 8006854:	b928      	cbnz	r0, 8006862 <LIS2MDL_MAG_Enable+0x22>
  pObj->mag_is_enabled = 1;
 8006856:	2301      	movs	r3, #1
 8006858:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 800685c:	bd10      	pop	{r4, pc}
    return LIS2MDL_OK;
 800685e:	2000      	movs	r0, #0
}
 8006860:	4770      	bx	lr
    return LIS2MDL_ERROR;
 8006862:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006866:	bd10      	pop	{r4, pc}

08006868 <LIS2MDL_DeInit>:
{
 8006868:	b510      	push	{r4, lr}
  if (pObj->mag_is_enabled == 0U)
 800686a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
{
 800686e:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 0U)
 8006870:	b91b      	cbnz	r3, 800687a <LIS2MDL_DeInit+0x12>
  pObj->is_initialized = 0;
 8006872:	2000      	movs	r0, #0
 8006874:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8006878:	bd10      	pop	{r4, pc}
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800687a:	2102      	movs	r1, #2
 800687c:	301c      	adds	r0, #28
 800687e:	f000 f867 	bl	8006950 <lis2mdl_operating_mode_set>
 8006882:	b910      	cbnz	r0, 800688a <LIS2MDL_DeInit+0x22>
  pObj->mag_is_enabled = 0;
 8006884:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  return LIS2MDL_OK;
 8006888:	e7f3      	b.n	8006872 <LIS2MDL_DeInit+0xa>
    return LIS2MDL_ERROR;
 800688a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800688e:	bd10      	pop	{r4, pc}

08006890 <LIS2MDL_MAG_Disable>:
{
 8006890:	b510      	push	{r4, lr}
 8006892:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 0U)
 8006894:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8006898:	b900      	cbnz	r0, 800689c <LIS2MDL_MAG_Disable+0xc>
}
 800689a:	bd10      	pop	{r4, pc}
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800689c:	2102      	movs	r1, #2
 800689e:	f104 001c 	add.w	r0, r4, #28
 80068a2:	f000 f855 	bl	8006950 <lis2mdl_operating_mode_set>
 80068a6:	b910      	cbnz	r0, 80068ae <LIS2MDL_MAG_Disable+0x1e>
  pObj->mag_is_enabled = 0;
 80068a8:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 80068ac:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 80068ae:	f04f 30ff 	mov.w	r0, #4294967295
}
 80068b2:	bd10      	pop	{r4, pc}

080068b4 <LIS2MDL_RegisterBusIO>:
  if (pObj == NULL)
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d03c      	beq.n	8006932 <LIS2MDL_RegisterBusIO+0x7e>
{
 80068b8:	b530      	push	{r4, r5, lr}
 80068ba:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 80068bc:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 80068c0:	688a      	ldr	r2, [r1, #8]
 80068c2:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 80068c4:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 80068c8:	7b0a      	ldrb	r2, [r1, #12]
 80068ca:	7322      	strb	r2, [r4, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80068cc:	e9d1 5204 	ldrd	r5, r2, [r1, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80068d0:	6988      	ldr	r0, [r1, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80068d2:	4919      	ldr	r1, [pc, #100]	; (8006938 <LIS2MDL_RegisterBusIO+0x84>)
    pObj->IO.GetTick   = pIO->GetTick;
 80068d4:	61a0      	str	r0, [r4, #24]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80068d6:	e9c4 5204 	strd	r5, r2, [r4, #16]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80068da:	4a18      	ldr	r2, [pc, #96]	; (800693c <LIS2MDL_RegisterBusIO+0x88>)
    pObj->Ctx.handle    = pObj;
 80068dc:	6264      	str	r4, [r4, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80068de:	e9c4 2107 	strd	r2, r1, [r4, #28]
{
 80068e2:	b083      	sub	sp, #12
    if (pObj->IO.Init == NULL)
 80068e4:	b313      	cbz	r3, 800692c <LIS2MDL_RegisterBusIO+0x78>
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80068e6:	4798      	blx	r3
 80068e8:	bb00      	cbnz	r0, 800692c <LIS2MDL_RegisterBusIO+0x78>
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80068ea:	68a3      	ldr	r3, [r4, #8]
 80068ec:	b16b      	cbz	r3, 800690a <LIS2MDL_RegisterBusIO+0x56>
        if (pObj->is_initialized == 0U)
 80068ee:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80068f2:	b952      	cbnz	r2, 800690a <LIS2MDL_RegisterBusIO+0x56>
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d00a      	beq.n	800690e <LIS2MDL_RegisterBusIO+0x5a>
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80068f8:	2101      	movs	r1, #1
 80068fa:	f104 001c 	add.w	r0, r4, #28
 80068fe:	f000 f8d5 	bl	8006aac <lis2mdl_i2c_interface_set>
 8006902:	3800      	subs	r0, #0
 8006904:	bf18      	it	ne
 8006906:	2001      	movne	r0, #1
 8006908:	4240      	negs	r0, r0
}
 800690a:	b003      	add	sp, #12
 800690c:	bd30      	pop	{r4, r5, pc}
            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 800690e:	2534      	movs	r5, #52	; 0x34
  if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8006910:	f10d 0207 	add.w	r2, sp, #7
 8006914:	2162      	movs	r1, #98	; 0x62
 8006916:	f104 001c 	add.w	r0, r4, #28
 800691a:	f88d 5007 	strb.w	r5, [sp, #7]
 800691e:	f000 f80f 	bl	8006940 <lis2mdl_write_reg>
              return LIS2MDL_ERROR;
 8006922:	2800      	cmp	r0, #0
 8006924:	bf18      	it	ne
 8006926:	f04f 30ff 	movne.w	r0, #4294967295
 800692a:	e7ee      	b.n	800690a <LIS2MDL_RegisterBusIO+0x56>
    ret = LIS2MDL_ERROR;
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	e7eb      	b.n	800690a <LIS2MDL_RegisterBusIO+0x56>
 8006932:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006936:	4770      	bx	lr
 8006938:	080067f1 	.word	0x080067f1
 800693c:	08006819 	.word	0x08006819

08006940 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006940:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006942:	6804      	ldr	r4, [r0, #0]
 8006944:	6880      	ldr	r0, [r0, #8]
 8006946:	46a4      	mov	ip, r4
  return ret;
}
 8006948:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800694c:	4760      	bx	ip
 800694e:	bf00      	nop

08006950 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	4604      	mov	r4, r0
 8006954:	b082      	sub	sp, #8
 8006956:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006958:	6880      	ldr	r0, [r0, #8]
 800695a:	6866      	ldr	r6, [r4, #4]
 800695c:	2301      	movs	r3, #1
 800695e:	aa01      	add	r2, sp, #4
 8006960:	2160      	movs	r1, #96	; 0x60
 8006962:	47b0      	blx	r6
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8006964:	b958      	cbnz	r0, 800697e <lis2mdl_operating_mode_set+0x2e>
    reg.md = (uint8_t)val;
 8006966:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800696a:	6826      	ldr	r6, [r4, #0]
 800696c:	68a0      	ldr	r0, [r4, #8]
    reg.md = (uint8_t)val;
 800696e:	f365 0301 	bfi	r3, r5, #0, #2
 8006972:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006976:	aa01      	add	r2, sp, #4
 8006978:	2301      	movs	r3, #1
 800697a:	2160      	movs	r1, #96	; 0x60
 800697c:	47b0      	blx	r6
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
  }

  return ret;
}
 800697e:	b002      	add	sp, #8
 8006980:	bd70      	pop	{r4, r5, r6, pc}
 8006982:	bf00      	nop

08006984 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	4604      	mov	r4, r0
 8006988:	b082      	sub	sp, #8
 800698a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800698c:	6880      	ldr	r0, [r0, #8]
 800698e:	6866      	ldr	r6, [r4, #4]
 8006990:	2301      	movs	r3, #1
 8006992:	aa01      	add	r2, sp, #4
 8006994:	2160      	movs	r1, #96	; 0x60
 8006996:	47b0      	blx	r6
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8006998:	b958      	cbnz	r0, 80069b2 <lis2mdl_data_rate_set+0x2e>
    reg.odr = (uint8_t)val;
 800699a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800699e:	6826      	ldr	r6, [r4, #0]
 80069a0:	68a0      	ldr	r0, [r4, #8]
    reg.odr = (uint8_t)val;
 80069a2:	f365 0383 	bfi	r3, r5, #2, #2
 80069a6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80069aa:	aa01      	add	r2, sp, #4
 80069ac:	2301      	movs	r3, #1
 80069ae:	2160      	movs	r1, #96	; 0x60
 80069b0:	47b0      	blx	r6
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80069b2:	b002      	add	sp, #8
 80069b4:	bd70      	pop	{r4, r5, r6, pc}
 80069b6:	bf00      	nop

080069b8 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80069b8:	b530      	push	{r4, r5, lr}
 80069ba:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80069bc:	2301      	movs	r3, #1
 80069be:	aa01      	add	r2, sp, #4
 80069c0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
{
 80069c4:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80069c6:	2160      	movs	r1, #96	; 0x60
 80069c8:	47a8      	blx	r5
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);

  switch (reg.odr) {
 80069ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80069ce:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80069d2:	2a02      	cmp	r2, #2
 80069d4:	4613      	mov	r3, r2
 80069d6:	d007      	beq.n	80069e8 <lis2mdl_data_rate_get+0x30>
 80069d8:	2a03      	cmp	r2, #3
 80069da:	d005      	beq.n	80069e8 <lis2mdl_data_rate_get+0x30>
 80069dc:	2a01      	cmp	r2, #1
 80069de:	d003      	beq.n	80069e8 <lis2mdl_data_rate_get+0x30>
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80069e0:	2300      	movs	r3, #0
 80069e2:	7023      	strb	r3, [r4, #0]
      *val = LIS2MDL_ODR_10Hz;
      break;
  }

  return ret;
}
 80069e4:	b003      	add	sp, #12
 80069e6:	bd30      	pop	{r4, r5, pc}
      *val = LIS2MDL_ODR_100Hz;
 80069e8:	7023      	strb	r3, [r4, #0]
}
 80069ea:	b003      	add	sp, #12
 80069ec:	bd30      	pop	{r4, r5, pc}
 80069ee:	bf00      	nop

080069f0 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	4604      	mov	r4, r0
 80069f4:	b082      	sub	sp, #8
 80069f6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80069f8:	6880      	ldr	r0, [r0, #8]
 80069fa:	6866      	ldr	r6, [r4, #4]
 80069fc:	2301      	movs	r3, #1
 80069fe:	aa01      	add	r2, sp, #4
 8006a00:	2162      	movs	r1, #98	; 0x62
 8006a02:	47b0      	blx	r6
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8006a04:	b958      	cbnz	r0, 8006a1e <lis2mdl_block_data_update_set+0x2e>
    reg.bdu = val;
 8006a06:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006a0a:	6826      	ldr	r6, [r4, #0]
 8006a0c:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 8006a0e:	f365 1304 	bfi	r3, r5, #4, #1
 8006a12:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006a16:	aa01      	add	r2, sp, #4
 8006a18:	2301      	movs	r3, #1
 8006a1a:	2162      	movs	r1, #98	; 0x62
 8006a1c:	47b0      	blx	r6
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8006a1e:	b002      	add	sp, #8
 8006a20:	bd70      	pop	{r4, r5, r6, pc}
 8006a22:	bf00      	nop

08006a24 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006a24:	b530      	push	{r4, r5, lr}
 8006a26:	b083      	sub	sp, #12
 8006a28:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006a2a:	466a      	mov	r2, sp
 8006a2c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8006a30:	2306      	movs	r3, #6
 8006a32:	2168      	movs	r1, #104	; 0x68
 8006a34:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8006a36:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8006a3a:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8006a3e:	f89d c003 	ldrb.w	ip, [sp, #3]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8006a42:	f89d 1005 	ldrb.w	r1, [sp, #5]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8006a46:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006a4a:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8006a4c:	f89d 2002 	ldrb.w	r2, [sp, #2]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8006a50:	f89d 3004 	ldrb.w	r3, [sp, #4]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8006a54:	eb02 220c 	add.w	r2, r2, ip, lsl #8
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8006a58:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8006a5c:	8062      	strh	r2, [r4, #2]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8006a5e:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 8006a60:	b003      	add	sp, #12
 8006a62:	bd30      	pop	{r4, r5, pc}

08006a64 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006a64:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006a66:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8006a6a:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006a6c:	46a4      	mov	ip, r4
 8006a6e:	2301      	movs	r3, #1
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
  return ret;
}
 8006a70:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006a74:	214f      	movs	r1, #79	; 0x4f
 8006a76:	4760      	bx	ip

08006a78 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006a80:	6880      	ldr	r0, [r0, #8]
 8006a82:	6866      	ldr	r6, [r4, #4]
 8006a84:	2301      	movs	r3, #1
 8006a86:	aa01      	add	r2, sp, #4
 8006a88:	2162      	movs	r1, #98	; 0x62
 8006a8a:	47b0      	blx	r6
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8006a8c:	b958      	cbnz	r0, 8006aa6 <lis2mdl_self_test_set+0x2e>
    reg.self_test = val;
 8006a8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006a92:	6826      	ldr	r6, [r4, #0]
 8006a94:	68a0      	ldr	r0, [r4, #8]
    reg.self_test = val;
 8006a96:	f365 0341 	bfi	r3, r5, #1, #1
 8006a9a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006a9e:	aa01      	add	r2, sp, #4
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	2162      	movs	r1, #98	; 0x62
 8006aa4:	47b0      	blx	r6
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8006aa6:	b002      	add	sp, #8
 8006aa8:	bd70      	pop	{r4, r5, r6, pc}
 8006aaa:	bf00      	nop

08006aac <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4604      	mov	r4, r0
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006ab4:	6880      	ldr	r0, [r0, #8]
 8006ab6:	6866      	ldr	r6, [r4, #4]
 8006ab8:	2301      	movs	r3, #1
 8006aba:	aa01      	add	r2, sp, #4
 8006abc:	2162      	movs	r1, #98	; 0x62
 8006abe:	47b0      	blx	r6
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8006ac0:	b958      	cbnz	r0, 8006ada <lis2mdl_i2c_interface_set+0x2e>
    reg.i2c_dis = (uint8_t)val;
 8006ac2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006ac6:	6826      	ldr	r6, [r4, #0]
 8006ac8:	68a0      	ldr	r0, [r4, #8]
    reg.i2c_dis = (uint8_t)val;
 8006aca:	f365 1345 	bfi	r3, r5, #5, #1
 8006ace:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006ad2:	aa01      	add	r2, sp, #4
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	2162      	movs	r1, #98	; 0x62
 8006ad8:	47b0      	blx	r6
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8006ada:	b002      	add	sp, #8
 8006adc:	bd70      	pop	{r4, r5, r6, pc}
 8006ade:	bf00      	nop

08006ae0 <LSM6DSO_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSO sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8006ae0:	b410      	push	{r4}

  Capabilities->Acc          = 1;
  Capabilities->Gyro         = 1;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 2000;
 8006ae2:	f240 1c01 	movw	ip, #257	; 0x101
 8006ae6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006aea:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <LSM6DSO_GetCapabilities+0x28>)
 8006aec:	610b      	str	r3, [r1, #16]
  Capabilities->MagMaxFS     = 0;
 8006aee:	2000      	movs	r0, #0
  Capabilities->GyroMaxFS    = 2000;
 8006af0:	e9c1 c400 	strd	ip, r4, [r1]
  Capabilities->AccMaxFS     = 16;
 8006af4:	2410      	movs	r4, #16
  Capabilities->AccMaxOdr    = 6660.0f;
  Capabilities->MagMaxOdr    = 0.0f;
 8006af6:	2200      	movs	r2, #0
  Capabilities->MagMaxFS     = 0;
 8006af8:	e9c1 4002 	strd	r4, r0, [r1, #8]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006afc:	614b      	str	r3, [r1, #20]
  return LSM6DSO_OK;
}
 8006afe:	f85d 4b04 	ldr.w	r4, [sp], #4
  Capabilities->MagMaxOdr    = 0.0f;
 8006b02:	618a      	str	r2, [r1, #24]
}
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	45d02000 	.word	0x45d02000

08006b0c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006b0c:	b410      	push	{r4}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006b0e:	6944      	ldr	r4, [r0, #20]
 8006b10:	7b00      	ldrb	r0, [r0, #12]
 8006b12:	46a4      	mov	ip, r4
}
 8006b14:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006b18:	4760      	bx	ip
 8006b1a:	bf00      	nop

08006b1c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006b1c:	b410      	push	{r4}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006b1e:	6904      	ldr	r4, [r0, #16]
 8006b20:	7b00      	ldrb	r0, [r0, #12]
 8006b22:	46a4      	mov	ip, r4
}
 8006b24:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006b28:	4760      	bx	ip
 8006b2a:	bf00      	nop

08006b2c <LSM6DSO_ACC_SetFullScale>:
           : (FullScale <= 4) ? LSM6DSO_4g
 8006b2c:	2902      	cmp	r1, #2
{
 8006b2e:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM6DSO_4g
 8006b30:	dd06      	ble.n	8006b40 <LSM6DSO_ACC_SetFullScale+0x14>
 8006b32:	2904      	cmp	r1, #4
 8006b34:	dd0d      	ble.n	8006b52 <LSM6DSO_ACC_SetFullScale+0x26>
 8006b36:	2909      	cmp	r1, #9
 8006b38:	bfb4      	ite	lt
 8006b3a:	2103      	movlt	r1, #3
 8006b3c:	2101      	movge	r1, #1
 8006b3e:	e000      	b.n	8006b42 <LSM6DSO_ACC_SetFullScale+0x16>
 8006b40:	2100      	movs	r1, #0
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006b42:	301c      	adds	r0, #28
 8006b44:	f001 fd08 	bl	8008558 <lsm6dso_xl_full_scale_set>
 8006b48:	3800      	subs	r0, #0
 8006b4a:	bf18      	it	ne
 8006b4c:	2001      	movne	r0, #1
}
 8006b4e:	4240      	negs	r0, r0
 8006b50:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM6DSO_4g
 8006b52:	2102      	movs	r1, #2
 8006b54:	e7f5      	b.n	8006b42 <LSM6DSO_ACC_SetFullScale+0x16>
 8006b56:	bf00      	nop

08006b58 <LSM6DSO_Init>:
{
 8006b58:	b570      	push	{r4, r5, r6, lr}
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8006b5a:	f100 041c 	add.w	r4, r0, #28
{
 8006b5e:	4605      	mov	r5, r0
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8006b60:	2180      	movs	r1, #128	; 0x80
 8006b62:	4620      	mov	r0, r4
 8006b64:	f002 f804 	bl	8008b70 <lsm6dso_i3c_disable_set>
 8006b68:	bb58      	cbnz	r0, 8006bc2 <LSM6DSO_Init+0x6a>
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f001 ffe5 	bl	8008b3c <lsm6dso_auto_increment_set>
 8006b72:	bb30      	cbnz	r0, 8006bc2 <LSM6DSO_Init+0x6a>
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006b74:	2101      	movs	r1, #1
 8006b76:	4620      	mov	r0, r4
 8006b78:	f001 fddc 	bl	8008734 <lsm6dso_block_data_update_set>
 8006b7c:	4601      	mov	r1, r0
 8006b7e:	bb00      	cbnz	r0, 8006bc2 <LSM6DSO_Init+0x6a>
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8006b80:	4620      	mov	r0, r4
 8006b82:	f002 f9a3 	bl	8008ecc <lsm6dso_fifo_mode_set>
 8006b86:	4601      	mov	r1, r0
 8006b88:	b9d8      	cbnz	r0, 8006bc2 <LSM6DSO_Init+0x6a>
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8006b8a:	2604      	movs	r6, #4
 8006b8c:	f885 602b 	strb.w	r6, [r5, #43]	; 0x2b
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006b90:	4620      	mov	r0, r4
 8006b92:	f002 fa55 	bl	8009040 <lsm6dso_xl_data_rate_set>
 8006b96:	4601      	mov	r1, r0
 8006b98:	b998      	cbnz	r0, 8006bc2 <LSM6DSO_Init+0x6a>
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f001 fcdc 	bl	8008558 <lsm6dso_xl_full_scale_set>
 8006ba0:	4601      	mov	r1, r0
 8006ba2:	b970      	cbnz	r0, 8006bc2 <LSM6DSO_Init+0x6a>
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8006ba4:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f002 fae9 	bl	8009180 <lsm6dso_gy_data_rate_set>
 8006bae:	b940      	cbnz	r0, 8006bc2 <LSM6DSO_Init+0x6a>
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006bb0:	2106      	movs	r1, #6
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f001 fd42 	bl	800863c <lsm6dso_gy_full_scale_set>
 8006bb8:	b918      	cbnz	r0, 8006bc2 <LSM6DSO_Init+0x6a>
  pObj->is_initialized = 1;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
}
 8006bc0:	bd70      	pop	{r4, r5, r6, pc}
    return LSM6DSO_ERROR;
 8006bc2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006bc6:	bd70      	pop	{r4, r5, r6, pc}

08006bc8 <LSM6DSO_GYRO_SetFullScale>:
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006bc8:	297d      	cmp	r1, #125	; 0x7d
{
 8006bca:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006bcc:	dd0a      	ble.n	8006be4 <LSM6DSO_GYRO_SetFullScale+0x1c>
 8006bce:	29fa      	cmp	r1, #250	; 0xfa
 8006bd0:	dd11      	ble.n	8006bf6 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006bd2:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8006bd6:	dd10      	ble.n	8006bfa <LSM6DSO_GYRO_SetFullScale+0x32>
 8006bd8:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8006bdc:	bfd4      	ite	le
 8006bde:	2104      	movle	r1, #4
 8006be0:	2106      	movgt	r1, #6
 8006be2:	e000      	b.n	8006be6 <LSM6DSO_GYRO_SetFullScale+0x1e>
 8006be4:	2101      	movs	r1, #1
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006be6:	301c      	adds	r0, #28
 8006be8:	f001 fd28 	bl	800863c <lsm6dso_gy_full_scale_set>
 8006bec:	3800      	subs	r0, #0
 8006bee:	bf18      	it	ne
 8006bf0:	2001      	movne	r0, #1
}
 8006bf2:	4240      	negs	r0, r0
 8006bf4:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	e7f5      	b.n	8006be6 <LSM6DSO_GYRO_SetFullScale+0x1e>
 8006bfa:	2102      	movs	r1, #2
 8006bfc:	e7f3      	b.n	8006be6 <LSM6DSO_GYRO_SetFullScale+0x1e>
 8006bfe:	bf00      	nop

08006c00 <LSM6DSO_ReadID>:
{
 8006c00:	b508      	push	{r3, lr}
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8006c02:	301c      	adds	r0, #28
 8006c04:	f001 ff90 	bl	8008b28 <lsm6dso_device_id_get>
 8006c08:	3800      	subs	r0, #0
 8006c0a:	bf18      	it	ne
 8006c0c:	2001      	movne	r0, #1
}
 8006c0e:	4240      	negs	r0, r0
 8006c10:	bd08      	pop	{r3, pc}
 8006c12:	bf00      	nop

08006c14 <LSM6DSO_ACC_GetOutputDataRate>:
{
 8006c14:	b510      	push	{r4, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	460c      	mov	r4, r1
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006c1a:	301c      	adds	r0, #28
 8006c1c:	f10d 0107 	add.w	r1, sp, #7
 8006c20:	f001 fcd0 	bl	80085c4 <lsm6dso_xl_data_rate_get>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d130      	bne.n	8006c8a <LSM6DSO_ACC_GetOutputDataRate+0x76>
  switch (odr_low_level)
 8006c28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006c2c:	2b0b      	cmp	r3, #11
 8006c2e:	d82c      	bhi.n	8006c8a <LSM6DSO_ACC_GetOutputDataRate+0x76>
 8006c30:	e8df f003 	tbb	[pc, r3]
 8006c34:	13100d0a 	.word	0x13100d0a
 8006c38:	1f1c1916 	.word	0x1f1c1916
 8006c3c:	06282522 	.word	0x06282522
      *Odr = 1.6f;
 8006c40:	4b13      	ldr	r3, [pc, #76]	; (8006c90 <LSM6DSO_ACC_GetOutputDataRate+0x7c>)
 8006c42:	6023      	str	r3, [r4, #0]
}
 8006c44:	b002      	add	sp, #8
 8006c46:	bd10      	pop	{r4, pc}
      *Odr = 0.0f;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	6023      	str	r3, [r4, #0]
      break;
 8006c4c:	e7fa      	b.n	8006c44 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 12.5f;
 8006c4e:	4b11      	ldr	r3, [pc, #68]	; (8006c94 <LSM6DSO_ACC_GetOutputDataRate+0x80>)
 8006c50:	6023      	str	r3, [r4, #0]
      break;
 8006c52:	e7f7      	b.n	8006c44 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8006c54:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <LSM6DSO_ACC_GetOutputDataRate+0x84>)
 8006c56:	6023      	str	r3, [r4, #0]
      break;
 8006c58:	e7f4      	b.n	8006c44 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 8006c5a:	4b10      	ldr	r3, [pc, #64]	; (8006c9c <LSM6DSO_ACC_GetOutputDataRate+0x88>)
 8006c5c:	6023      	str	r3, [r4, #0]
      break;
 8006c5e:	e7f1      	b.n	8006c44 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 8006c60:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <LSM6DSO_ACC_GetOutputDataRate+0x8c>)
 8006c62:	6023      	str	r3, [r4, #0]
      break;
 8006c64:	e7ee      	b.n	8006c44 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 8006c66:	4b0f      	ldr	r3, [pc, #60]	; (8006ca4 <LSM6DSO_ACC_GetOutputDataRate+0x90>)
 8006c68:	6023      	str	r3, [r4, #0]
      break;
 8006c6a:	e7eb      	b.n	8006c44 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <LSM6DSO_ACC_GetOutputDataRate+0x94>)
 8006c6e:	6023      	str	r3, [r4, #0]
      break;
 8006c70:	e7e8      	b.n	8006c44 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8006c72:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <LSM6DSO_ACC_GetOutputDataRate+0x98>)
 8006c74:	6023      	str	r3, [r4, #0]
      break;
 8006c76:	e7e5      	b.n	8006c44 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 8006c78:	4b0d      	ldr	r3, [pc, #52]	; (8006cb0 <LSM6DSO_ACC_GetOutputDataRate+0x9c>)
 8006c7a:	6023      	str	r3, [r4, #0]
      break;
 8006c7c:	e7e2      	b.n	8006c44 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 8006c7e:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <LSM6DSO_ACC_GetOutputDataRate+0xa0>)
 8006c80:	6023      	str	r3, [r4, #0]
      break;
 8006c82:	e7df      	b.n	8006c44 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 8006c84:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <LSM6DSO_ACC_GetOutputDataRate+0xa4>)
 8006c86:	6023      	str	r3, [r4, #0]
      break;
 8006c88:	e7dc      	b.n	8006c44 <LSM6DSO_ACC_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8006c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8e:	e7d9      	b.n	8006c44 <LSM6DSO_ACC_GetOutputDataRate+0x30>
 8006c90:	3fcccccd 	.word	0x3fcccccd
 8006c94:	41480000 	.word	0x41480000
 8006c98:	41d00000 	.word	0x41d00000
 8006c9c:	42500000 	.word	0x42500000
 8006ca0:	42d00000 	.word	0x42d00000
 8006ca4:	43500000 	.word	0x43500000
 8006ca8:	43d08000 	.word	0x43d08000
 8006cac:	44504000 	.word	0x44504000
 8006cb0:	44d06000 	.word	0x44d06000
 8006cb4:	45505000 	.word	0x45505000
 8006cb8:	45d05800 	.word	0x45d05800

08006cbc <LSM6DSO_ACC_GetSensitivity>:
{
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8006cc2:	301c      	adds	r0, #28
 8006cc4:	f10d 0107 	add.w	r1, sp, #7
 8006cc8:	f001 fc60 	bl	800858c <lsm6dso_xl_full_scale_get>
 8006ccc:	b9b8      	cbnz	r0, 8006cfe <LSM6DSO_ACC_GetSensitivity+0x42>
  switch (full_scale)
 8006cce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d813      	bhi.n	8006cfe <LSM6DSO_ACC_GetSensitivity+0x42>
 8006cd6:	e8df f003 	tbb	[pc, r3]
 8006cda:	0a06      	.short	0x0a06
 8006cdc:	020e      	.short	0x020e
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8006cde:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <LSM6DSO_ACC_GetSensitivity+0x48>)
 8006ce0:	6023      	str	r3, [r4, #0]
}
 8006ce2:	b002      	add	sp, #8
 8006ce4:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8006ce6:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <LSM6DSO_ACC_GetSensitivity+0x4c>)
 8006ce8:	6023      	str	r3, [r4, #0]
}
 8006cea:	b002      	add	sp, #8
 8006cec:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8006cee:	4b07      	ldr	r3, [pc, #28]	; (8006d0c <LSM6DSO_ACC_GetSensitivity+0x50>)
 8006cf0:	6023      	str	r3, [r4, #0]
}
 8006cf2:	b002      	add	sp, #8
 8006cf4:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8006cf6:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <LSM6DSO_ACC_GetSensitivity+0x54>)
 8006cf8:	6023      	str	r3, [r4, #0]
}
 8006cfa:	b002      	add	sp, #8
 8006cfc:	bd10      	pop	{r4, pc}
  switch (full_scale)
 8006cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006d02:	e7ee      	b.n	8006ce2 <LSM6DSO_ACC_GetSensitivity+0x26>
 8006d04:	3e79db23 	.word	0x3e79db23
 8006d08:	3d79db23 	.word	0x3d79db23
 8006d0c:	3ef9db23 	.word	0x3ef9db23
 8006d10:	3df9db23 	.word	0x3df9db23

08006d14 <LSM6DSO_ACC_GetFullScale>:
{
 8006d14:	b510      	push	{r4, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006d1a:	301c      	adds	r0, #28
 8006d1c:	f10d 0107 	add.w	r1, sp, #7
 8006d20:	f001 fc34 	bl	800858c <lsm6dso_xl_full_scale_get>
 8006d24:	b9b8      	cbnz	r0, 8006d56 <LSM6DSO_ACC_GetFullScale+0x42>
  switch (fs_low_level)
 8006d26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d813      	bhi.n	8006d56 <LSM6DSO_ACC_GetFullScale+0x42>
 8006d2e:	e8df f003 	tbb	[pc, r3]
 8006d32:	0a06      	.short	0x0a06
 8006d34:	020e      	.short	0x020e
      *FullScale =  8;
 8006d36:	2308      	movs	r3, #8
 8006d38:	6023      	str	r3, [r4, #0]
}
 8006d3a:	b002      	add	sp, #8
 8006d3c:	bd10      	pop	{r4, pc}
      *FullScale =  2;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	6023      	str	r3, [r4, #0]
}
 8006d42:	b002      	add	sp, #8
 8006d44:	bd10      	pop	{r4, pc}
      *FullScale = 16;
 8006d46:	2310      	movs	r3, #16
 8006d48:	6023      	str	r3, [r4, #0]
}
 8006d4a:	b002      	add	sp, #8
 8006d4c:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8006d4e:	2304      	movs	r3, #4
 8006d50:	6023      	str	r3, [r4, #0]
}
 8006d52:	b002      	add	sp, #8
 8006d54:	bd10      	pop	{r4, pc}
  switch (fs_low_level)
 8006d56:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5a:	e7ee      	b.n	8006d3a <LSM6DSO_ACC_GetFullScale+0x26>

08006d5c <LSM6DSO_ACC_GetAxesRaw>:
{
 8006d5c:	b510      	push	{r4, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	460c      	mov	r4, r1
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006d62:	301c      	adds	r0, #28
 8006d64:	4669      	mov	r1, sp
 8006d66:	f001 fd1f 	bl	80087a8 <lsm6dso_acceleration_raw_get>
 8006d6a:	b930      	cbnz	r0, 8006d7a <LSM6DSO_ACC_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 8006d6c:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 8006d6e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8006d72:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8006d74:	80a3      	strh	r3, [r4, #4]
}
 8006d76:	b002      	add	sp, #8
 8006d78:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8006d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7e:	e7fa      	b.n	8006d76 <LSM6DSO_ACC_GetAxesRaw+0x1a>

08006d80 <LSM6DSO_GYRO_GetOutputDataRate>:
{
 8006d80:	b510      	push	{r4, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	460c      	mov	r4, r1
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006d86:	301c      	adds	r0, #28
 8006d88:	f10d 0107 	add.w	r1, sp, #7
 8006d8c:	f001 fc9a 	bl	80086c4 <lsm6dso_gy_data_rate_get>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d12d      	bne.n	8006df0 <LSM6DSO_GYRO_GetOutputDataRate+0x70>
  switch (odr_low_level)
 8006d94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006d98:	2b0a      	cmp	r3, #10
 8006d9a:	d829      	bhi.n	8006df0 <LSM6DSO_GYRO_GetOutputDataRate+0x70>
 8006d9c:	e8df f003 	tbb	[pc, r3]
 8006da0:	13100d0a 	.word	0x13100d0a
 8006da4:	1f1c1916 	.word	0x1f1c1916
 8006da8:	2522      	.short	0x2522
 8006daa:	06          	.byte	0x06
 8006dab:	00          	.byte	0x00
      *Odr = 6667.0f;
 8006dac:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <LSM6DSO_GYRO_GetOutputDataRate+0x78>)
 8006dae:	6023      	str	r3, [r4, #0]
}
 8006db0:	b002      	add	sp, #8
 8006db2:	bd10      	pop	{r4, pc}
      *Odr = 0.0f;
 8006db4:	2300      	movs	r3, #0
 8006db6:	6023      	str	r3, [r4, #0]
      break;
 8006db8:	e7fa      	b.n	8006db0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 12.5f;
 8006dba:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <LSM6DSO_GYRO_GetOutputDataRate+0x7c>)
 8006dbc:	6023      	str	r3, [r4, #0]
      break;
 8006dbe:	e7f7      	b.n	8006db0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8006dc0:	4b0f      	ldr	r3, [pc, #60]	; (8006e00 <LSM6DSO_GYRO_GetOutputDataRate+0x80>)
 8006dc2:	6023      	str	r3, [r4, #0]
      break;
 8006dc4:	e7f4      	b.n	8006db0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 8006dc6:	4b0f      	ldr	r3, [pc, #60]	; (8006e04 <LSM6DSO_GYRO_GetOutputDataRate+0x84>)
 8006dc8:	6023      	str	r3, [r4, #0]
      break;
 8006dca:	e7f1      	b.n	8006db0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <LSM6DSO_GYRO_GetOutputDataRate+0x88>)
 8006dce:	6023      	str	r3, [r4, #0]
      break;
 8006dd0:	e7ee      	b.n	8006db0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 8006dd2:	4b0e      	ldr	r3, [pc, #56]	; (8006e0c <LSM6DSO_GYRO_GetOutputDataRate+0x8c>)
 8006dd4:	6023      	str	r3, [r4, #0]
      break;
 8006dd6:	e7eb      	b.n	8006db0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 8006dd8:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <LSM6DSO_GYRO_GetOutputDataRate+0x90>)
 8006dda:	6023      	str	r3, [r4, #0]
      break;
 8006ddc:	e7e8      	b.n	8006db0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8006dde:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <LSM6DSO_GYRO_GetOutputDataRate+0x94>)
 8006de0:	6023      	str	r3, [r4, #0]
      break;
 8006de2:	e7e5      	b.n	8006db0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 8006de4:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <LSM6DSO_GYRO_GetOutputDataRate+0x98>)
 8006de6:	6023      	str	r3, [r4, #0]
      break;
 8006de8:	e7e2      	b.n	8006db0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 8006dea:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>)
 8006dec:	6023      	str	r3, [r4, #0]
      break;
 8006dee:	e7df      	b.n	8006db0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	e7dc      	b.n	8006db0 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
 8006df6:	bf00      	nop
 8006df8:	45d05800 	.word	0x45d05800
 8006dfc:	41480000 	.word	0x41480000
 8006e00:	41d00000 	.word	0x41d00000
 8006e04:	42500000 	.word	0x42500000
 8006e08:	42d00000 	.word	0x42d00000
 8006e0c:	43500000 	.word	0x43500000
 8006e10:	43d08000 	.word	0x43d08000
 8006e14:	44504000 	.word	0x44504000
 8006e18:	44d06000 	.word	0x44d06000
 8006e1c:	45505000 	.word	0x45505000

08006e20 <LSM6DSO_GYRO_GetSensitivity>:
{
 8006e20:	b510      	push	{r4, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8006e26:	301c      	adds	r0, #28
 8006e28:	f10d 0107 	add.w	r1, sp, #7
 8006e2c:	f001 fc20 	bl	8008670 <lsm6dso_gy_full_scale_get>
 8006e30:	b948      	cbnz	r0, 8006e46 <LSM6DSO_GYRO_GetSensitivity+0x26>
  switch (full_scale)
 8006e32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006e36:	2b06      	cmp	r3, #6
 8006e38:	d805      	bhi.n	8006e46 <LSM6DSO_GYRO_GetSensitivity+0x26>
 8006e3a:	e8df f003 	tbb	[pc, r3]
 8006e3e:	0c08      	.short	0x0c08
 8006e40:	04140410 	.word	0x04140410
 8006e44:	18          	.byte	0x18
 8006e45:	00          	.byte	0x00
 8006e46:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006e4a:	b002      	add	sp, #8
 8006e4c:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006e4e:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <LSM6DSO_GYRO_GetSensitivity+0x58>)
 8006e50:	6023      	str	r3, [r4, #0]
}
 8006e52:	b002      	add	sp, #8
 8006e54:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8006e56:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <LSM6DSO_GYRO_GetSensitivity+0x5c>)
 8006e58:	6023      	str	r3, [r4, #0]
}
 8006e5a:	b002      	add	sp, #8
 8006e5c:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8006e5e:	4b08      	ldr	r3, [pc, #32]	; (8006e80 <LSM6DSO_GYRO_GetSensitivity+0x60>)
 8006e60:	6023      	str	r3, [r4, #0]
}
 8006e62:	b002      	add	sp, #8
 8006e64:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8006e66:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <LSM6DSO_GYRO_GetSensitivity+0x64>)
 8006e68:	6023      	str	r3, [r4, #0]
}
 8006e6a:	b002      	add	sp, #8
 8006e6c:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8006e6e:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <LSM6DSO_GYRO_GetSensitivity+0x68>)
 8006e70:	6023      	str	r3, [r4, #0]
}
 8006e72:	b002      	add	sp, #8
 8006e74:	bd10      	pop	{r4, pc}
 8006e76:	bf00      	nop
 8006e78:	410c0000 	.word	0x410c0000
 8006e7c:	408c0000 	.word	0x408c0000
 8006e80:	418c0000 	.word	0x418c0000
 8006e84:	420c0000 	.word	0x420c0000
 8006e88:	428c0000 	.word	0x428c0000

08006e8c <LSM6DSO_GYRO_GetFullScale>:
{
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006e92:	301c      	adds	r0, #28
 8006e94:	f10d 0107 	add.w	r1, sp, #7
 8006e98:	f001 fbea 	bl	8008670 <lsm6dso_gy_full_scale_get>
 8006e9c:	b948      	cbnz	r0, 8006eb2 <LSM6DSO_GYRO_GetFullScale+0x26>
  switch (fs_low_level)
 8006e9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006ea2:	2b06      	cmp	r3, #6
 8006ea4:	d805      	bhi.n	8006eb2 <LSM6DSO_GYRO_GetFullScale+0x26>
 8006ea6:	e8df f003 	tbb	[pc, r3]
 8006eaa:	0c08      	.short	0x0c08
 8006eac:	04150410 	.word	0x04150410
 8006eb0:	1a          	.byte	0x1a
 8006eb1:	00          	.byte	0x00
 8006eb2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006eb6:	b002      	add	sp, #8
 8006eb8:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 8006eba:	23fa      	movs	r3, #250	; 0xfa
 8006ebc:	6023      	str	r3, [r4, #0]
}
 8006ebe:	b002      	add	sp, #8
 8006ec0:	bd10      	pop	{r4, pc}
      *FullScale =  125;
 8006ec2:	237d      	movs	r3, #125	; 0x7d
 8006ec4:	6023      	str	r3, [r4, #0]
}
 8006ec6:	b002      	add	sp, #8
 8006ec8:	bd10      	pop	{r4, pc}
      *FullScale =  500;
 8006eca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006ece:	6023      	str	r3, [r4, #0]
}
 8006ed0:	b002      	add	sp, #8
 8006ed2:	bd10      	pop	{r4, pc}
      *FullScale = 1000;
 8006ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ed8:	6023      	str	r3, [r4, #0]
}
 8006eda:	b002      	add	sp, #8
 8006edc:	bd10      	pop	{r4, pc}
      *FullScale = 2000;
 8006ede:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006ee2:	6023      	str	r3, [r4, #0]
}
 8006ee4:	b002      	add	sp, #8
 8006ee6:	bd10      	pop	{r4, pc}

08006ee8 <LSM6DSO_GYRO_GetAxesRaw>:
{
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006eee:	301c      	adds	r0, #28
 8006ef0:	4669      	mov	r1, sp
 8006ef2:	f001 fc39 	bl	8008768 <lsm6dso_angular_rate_raw_get>
 8006ef6:	b930      	cbnz	r0, 8006f06 <LSM6DSO_GYRO_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 8006ef8:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 8006efa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8006efe:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8006f00:	80a3      	strh	r3, [r4, #4]
}
 8006f02:	b002      	add	sp, #8
 8006f04:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8006f06:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0a:	e7fa      	b.n	8006f02 <LSM6DSO_GYRO_GetAxesRaw+0x1a>

08006f0c <LSM6DSO_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8006f0c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d00b      	beq.n	8006f2c <LSM6DSO_ACC_Enable+0x20>
{
 8006f14:	b510      	push	{r4, lr}
 8006f16:	4604      	mov	r4, r0
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8006f18:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8006f1c:	301c      	adds	r0, #28
 8006f1e:	f002 f88f 	bl	8009040 <lsm6dso_xl_data_rate_set>
 8006f22:	b928      	cbnz	r0, 8006f30 <LSM6DSO_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 8006f24:	2301      	movs	r3, #1
 8006f26:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8006f2a:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 8006f2c:	2000      	movs	r0, #0
}
 8006f2e:	4770      	bx	lr
    return LSM6DSO_ERROR;
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	bf00      	nop

08006f38 <LSM6DSO_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 8006f38:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d00b      	beq.n	8006f58 <LSM6DSO_GYRO_Enable+0x20>
{
 8006f40:	b510      	push	{r4, lr}
 8006f42:	4604      	mov	r4, r0
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8006f44:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 8006f48:	301c      	adds	r0, #28
 8006f4a:	f002 f919 	bl	8009180 <lsm6dso_gy_data_rate_set>
 8006f4e:	b928      	cbnz	r0, 8006f5c <LSM6DSO_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 8006f50:	2301      	movs	r3, #1
 8006f52:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 8006f56:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 8006f58:	2000      	movs	r0, #0
}
 8006f5a:	4770      	bx	lr
    return LSM6DSO_ERROR;
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006f60:	bd10      	pop	{r4, pc}
 8006f62:	bf00      	nop

08006f64 <LSM6DSO_ACC_Disable>:
{
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8006f68:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8006f6c:	b900      	cbnz	r0, 8006f70 <LSM6DSO_ACC_Disable+0xc>
}
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8006f70:	f104 051c 	add.w	r5, r4, #28
 8006f74:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8006f78:	4628      	mov	r0, r5
 8006f7a:	f001 fb23 	bl	80085c4 <lsm6dso_xl_data_rate_get>
 8006f7e:	4601      	mov	r1, r0
 8006f80:	b930      	cbnz	r0, 8006f90 <LSM6DSO_ACC_Disable+0x2c>
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006f82:	4628      	mov	r0, r5
 8006f84:	f002 f85c 	bl	8009040 <lsm6dso_xl_data_rate_set>
 8006f88:	b910      	cbnz	r0, 8006f90 <LSM6DSO_ACC_Disable+0x2c>
  pObj->acc_is_enabled = 0;
 8006f8a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8006f8e:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSO_ERROR;
 8006f90:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006f94:	bd38      	pop	{r3, r4, r5, pc}
 8006f96:	bf00      	nop

08006f98 <LSM6DSO_GYRO_Disable>:
{
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4604      	mov	r4, r0
  if (pObj->gyro_is_enabled == 0U)
 8006f9c:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8006fa0:	b900      	cbnz	r0, 8006fa4 <LSM6DSO_GYRO_Disable+0xc>
}
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8006fa4:	f104 051c 	add.w	r5, r4, #28
 8006fa8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8006fac:	4628      	mov	r0, r5
 8006fae:	f001 fb89 	bl	80086c4 <lsm6dso_gy_data_rate_get>
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	b930      	cbnz	r0, 8006fc4 <LSM6DSO_GYRO_Disable+0x2c>
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f002 f8e2 	bl	8009180 <lsm6dso_gy_data_rate_set>
 8006fbc:	b910      	cbnz	r0, 8006fc4 <LSM6DSO_GYRO_Disable+0x2c>
  pObj->gyro_is_enabled = 0;
 8006fbe:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSO_ERROR;
 8006fc4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006fc8:	bd38      	pop	{r3, r4, r5, pc}
 8006fca:	bf00      	nop

08006fcc <LSM6DSO_DeInit>:
{
 8006fcc:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8006fce:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
{
 8006fd2:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 8006fd4:	b943      	cbnz	r3, 8006fe8 <LSM6DSO_DeInit+0x1c>
  if (pObj->gyro_is_enabled == 0U)
 8006fd6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006fda:	b9c3      	cbnz	r3, 800700e <LSM6DSO_DeInit+0x42>
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f8a4 002b 	strh.w	r0, [r4, #43]	; 0x2b
  pObj->is_initialized = 0;
 8006fe2:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8006fe8:	f100 051c 	add.w	r5, r0, #28
 8006fec:	f100 012b 	add.w	r1, r0, #43	; 0x2b
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f001 fae7 	bl	80085c4 <lsm6dso_xl_data_rate_get>
 8006ff6:	4601      	mov	r1, r0
 8006ff8:	b9c8      	cbnz	r0, 800702e <LSM6DSO_DeInit+0x62>
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f002 f820 	bl	8009040 <lsm6dso_xl_data_rate_set>
 8007000:	b9a8      	cbnz	r0, 800702e <LSM6DSO_DeInit+0x62>
  if (pObj->gyro_is_enabled == 0U)
 8007002:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  pObj->acc_is_enabled = 0;
 8007006:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  if (pObj->gyro_is_enabled == 0U)
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0e6      	beq.n	8006fdc <LSM6DSO_DeInit+0x10>
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800700e:	f104 051c 	add.w	r5, r4, #28
 8007012:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8007016:	4628      	mov	r0, r5
 8007018:	f001 fb54 	bl	80086c4 <lsm6dso_gy_data_rate_get>
 800701c:	4601      	mov	r1, r0
 800701e:	b930      	cbnz	r0, 800702e <LSM6DSO_DeInit+0x62>
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8007020:	4628      	mov	r0, r5
 8007022:	f002 f8ad 	bl	8009180 <lsm6dso_gy_data_rate_set>
 8007026:	b910      	cbnz	r0, 800702e <LSM6DSO_DeInit+0x62>
  pObj->gyro_is_enabled = 0;
 8007028:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  return LSM6DSO_OK;
 800702c:	e7d6      	b.n	8006fdc <LSM6DSO_DeInit+0x10>
    return LSM6DSO_ERROR;
 800702e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007032:	bd38      	pop	{r3, r4, r5, pc}

08007034 <LSM6DSO_ACC_GetAxes>:
{
 8007034:	b530      	push	{r4, r5, lr}
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007036:	f100 051c 	add.w	r5, r0, #28
{
 800703a:	b085      	sub	sp, #20
 800703c:	460c      	mov	r4, r1
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800703e:	4628      	mov	r0, r5
 8007040:	a902      	add	r1, sp, #8
 8007042:	f001 fbb1 	bl	80087a8 <lsm6dso_acceleration_raw_get>
 8007046:	2800      	cmp	r0, #0
 8007048:	d13e      	bne.n	80070c8 <LSM6DSO_ACC_GetAxes+0x94>
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800704a:	f10d 0107 	add.w	r1, sp, #7
 800704e:	4628      	mov	r0, r5
 8007050:	f001 fa9c 	bl	800858c <lsm6dso_xl_full_scale_get>
 8007054:	bbc0      	cbnz	r0, 80070c8 <LSM6DSO_ACC_GetAxes+0x94>
  switch (full_scale)
 8007056:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800705a:	2b03      	cmp	r3, #3
 800705c:	d834      	bhi.n	80070c8 <LSM6DSO_ACC_GetAxes+0x94>
 800705e:	e8df f003 	tbb	[pc, r3]
 8007062:	2d2a      	.short	0x2d2a
 8007064:	0230      	.short	0x0230
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8007066:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80070d0 <LSM6DSO_ACC_GetAxes+0x9c>
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800706a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800706e:	ee06 3a90 	vmov	s13, r3
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007072:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8007076:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800707a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800707e:	ee07 3a90 	vmov	s15, r3
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007082:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007086:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800708a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800708e:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007092:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007096:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800709a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800709e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80070a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80070a6:	edc4 6a00 	vstr	s13, [r4]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80070aa:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80070ae:	edc4 7a02 	vstr	s15, [r4, #8]
}
 80070b2:	b005      	add	sp, #20
 80070b4:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80070b6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80070d4 <LSM6DSO_ACC_GetAxes+0xa0>
 80070ba:	e7d6      	b.n	800706a <LSM6DSO_ACC_GetAxes+0x36>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80070bc:	ed9f 6a06 	vldr	s12, [pc, #24]	; 80070d8 <LSM6DSO_ACC_GetAxes+0xa4>
 80070c0:	e7d3      	b.n	800706a <LSM6DSO_ACC_GetAxes+0x36>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80070c2:	ed9f 6a06 	vldr	s12, [pc, #24]	; 80070dc <LSM6DSO_ACC_GetAxes+0xa8>
 80070c6:	e7d0      	b.n	800706a <LSM6DSO_ACC_GetAxes+0x36>
    return LSM6DSO_ERROR;
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	e7f1      	b.n	80070b2 <LSM6DSO_ACC_GetAxes+0x7e>
 80070ce:	bf00      	nop
 80070d0:	3e79db23 	.word	0x3e79db23
 80070d4:	3d79db23 	.word	0x3d79db23
 80070d8:	3ef9db23 	.word	0x3ef9db23
 80070dc:	3df9db23 	.word	0x3df9db23

080070e0 <LSM6DSO_GYRO_GetAxes>:
{
 80070e0:	b530      	push	{r4, r5, lr}
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80070e2:	f100 051c 	add.w	r5, r0, #28
{
 80070e6:	b085      	sub	sp, #20
 80070e8:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80070ea:	4628      	mov	r0, r5
 80070ec:	a902      	add	r1, sp, #8
 80070ee:	f001 fb3b 	bl	8008768 <lsm6dso_angular_rate_raw_get>
 80070f2:	b978      	cbnz	r0, 8007114 <LSM6DSO_GYRO_GetAxes+0x34>
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80070f4:	f10d 0107 	add.w	r1, sp, #7
 80070f8:	4628      	mov	r0, r5
 80070fa:	f001 fab9 	bl	8008670 <lsm6dso_gy_full_scale_get>
 80070fe:	b948      	cbnz	r0, 8007114 <LSM6DSO_GYRO_GetAxes+0x34>
  switch (full_scale)
 8007100:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007104:	2b06      	cmp	r3, #6
 8007106:	d805      	bhi.n	8007114 <LSM6DSO_GYRO_GetAxes+0x34>
 8007108:	e8df f003 	tbb	[pc, r3]
 800710c:	04333008 	.word	0x04333008
 8007110:	0436      	.short	0x0436
 8007112:	39          	.byte	0x39
 8007113:	00          	.byte	0x00
    return LSM6DSO_ERROR;
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007118:	b005      	add	sp, #20
 800711a:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 800711c:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8007184 <LSM6DSO_GYRO_GetAxes+0xa4>
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007120:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8007124:	ee06 3a90 	vmov	s13, r3
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007128:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800712c:	ee07 3a10 	vmov	s14, r3
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007130:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8007134:	ee07 3a90 	vmov	s15, r3
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007138:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800713c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007144:	ee66 6a86 	vmul.f32	s13, s13, s12
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007148:	ee27 7a06 	vmul.f32	s14, s14, s12
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800714c:	ee67 7a86 	vmul.f32	s15, s15, s12
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8007150:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007154:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800715c:	edc4 6a00 	vstr	s13, [r4]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007160:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007164:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8007168:	b005      	add	sp, #20
 800716a:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800716c:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8007188 <LSM6DSO_GYRO_GetAxes+0xa8>
 8007170:	e7d6      	b.n	8007120 <LSM6DSO_GYRO_GetAxes+0x40>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8007172:	ed9f 6a06 	vldr	s12, [pc, #24]	; 800718c <LSM6DSO_GYRO_GetAxes+0xac>
 8007176:	e7d3      	b.n	8007120 <LSM6DSO_GYRO_GetAxes+0x40>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8007178:	ed9f 6a05 	vldr	s12, [pc, #20]	; 8007190 <LSM6DSO_GYRO_GetAxes+0xb0>
 800717c:	e7d0      	b.n	8007120 <LSM6DSO_GYRO_GetAxes+0x40>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800717e:	ed9f 6a05 	vldr	s12, [pc, #20]	; 8007194 <LSM6DSO_GYRO_GetAxes+0xb4>
 8007182:	e7cd      	b.n	8007120 <LSM6DSO_GYRO_GetAxes+0x40>
 8007184:	410c0000 	.word	0x410c0000
 8007188:	408c0000 	.word	0x408c0000
 800718c:	418c0000 	.word	0x418c0000
 8007190:	420c0000 	.word	0x420c0000
 8007194:	428c0000 	.word	0x428c0000

08007198 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0>:
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	ed2d 8b02 	vpush	{d8}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800719e:	f100 061c 	add.w	r6, r0, #28
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
 80071a2:	b082      	sub	sp, #8
 80071a4:	4605      	mov	r5, r0
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80071a6:	2301      	movs	r3, #1
 80071a8:	466a      	mov	r2, sp
 80071aa:	2114      	movs	r1, #20
 80071ac:	4630      	mov	r0, r6
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
 80071ae:	eeb0 8a40 	vmov.f32	s16, s0
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80071b2:	f001 f9c1 	bl	8008538 <lsm6dso_read_reg>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d15f      	bne.n	800727a <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xe2>
      if (val1.xl_ulp_en != 0U)
 80071ba:	f99d 3000 	ldrsb.w	r3, [sp]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	da11      	bge.n	80071e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x4e>
        if (pObj->acc_is_enabled == 1U)
 80071c2:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d05a      	beq.n	8007280 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xe8>
        val1.xl_ulp_en = 0;
 80071ca:	f89d 1000 	ldrb.w	r1, [sp]
 80071ce:	f36f 11c7 	bfc	r1, #7, #1
 80071d2:	f88d 1000 	strb.w	r1, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80071d6:	2301      	movs	r3, #1
 80071d8:	466a      	mov	r2, sp
 80071da:	2114      	movs	r1, #20
 80071dc:	4630      	mov	r0, r6
 80071de:	f001 f9b3 	bl	8008548 <lsm6dso_write_reg>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d149      	bne.n	800727a <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xe2>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80071e6:	2301      	movs	r3, #1
 80071e8:	aa01      	add	r2, sp, #4
 80071ea:	2115      	movs	r1, #21
 80071ec:	4630      	mov	r0, r6
 80071ee:	f001 f9a3 	bl	8008538 <lsm6dso_read_reg>
 80071f2:	4604      	mov	r4, r0
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d140      	bne.n	800727a <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xe2>
      if (val2.xl_hm_mode != 0U)
 80071f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80071fc:	06da      	lsls	r2, r3, #27
 80071fe:	d430      	bmi.n	8007262 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xca>
      if (newOdr < 12.5f)
 8007200:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8007204:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720c:	d50c      	bpl.n	8007228 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x90>
  if (pObj->acc_is_enabled == 1U)
 800720e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8007212:	2b01      	cmp	r3, #1
 8007214:	f000 80bc 	beq.w	8007390 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x1f8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007218:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800721a:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
}
 800721e:	4620      	mov	r0, r4
 8007220:	b002      	add	sp, #8
 8007222:	ecbd 8b02 	vpop	{d8}
 8007226:	bd70      	pop	{r4, r5, r6, pc}
  if (pObj->acc_is_enabled == 1U)
 8007228:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800722c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80073cc <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x234>
  if (pObj->acc_is_enabled == 1U)
 8007230:	2b01      	cmp	r3, #1
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007232:	eeb4 8ac7 	vcmpe.f32	s16, s14
  if (pObj->acc_is_enabled == 1U)
 8007236:	d10f      	bne.n	8007258 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xc0>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723c:	d827      	bhi.n	800728e <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xf6>
 800723e:	210b      	movs	r1, #11
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007240:	4630      	mov	r0, r6
 8007242:	f001 fefd 	bl	8009040 <lsm6dso_xl_data_rate_set>
 8007246:	3800      	subs	r0, #0
 8007248:	bf18      	it	ne
 800724a:	2001      	movne	r0, #1
 800724c:	4244      	negs	r4, r0
}
 800724e:	4620      	mov	r0, r4
 8007250:	b002      	add	sp, #8
 8007252:	ecbd 8b02 	vpop	{d8}
 8007256:	bd70      	pop	{r4, r5, r6, pc}
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725c:	d857      	bhi.n	800730e <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x176>
 800725e:	230b      	movs	r3, #11
 8007260:	e7db      	b.n	800721a <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x82>
        val2.xl_hm_mode = 0U;
 8007262:	f360 1304 	bfi	r3, r0, #4, #1
 8007266:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800726a:	aa01      	add	r2, sp, #4
 800726c:	2301      	movs	r3, #1
 800726e:	2115      	movs	r1, #21
 8007270:	4630      	mov	r0, r6
 8007272:	f001 f969 	bl	8008548 <lsm6dso_write_reg>
 8007276:	2800      	cmp	r0, #0
 8007278:	d0c2      	beq.n	8007200 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x68>
        return LSM6DSO_ERROR;
 800727a:	f04f 34ff 	mov.w	r4, #4294967295
 800727e:	e7ce      	b.n	800721e <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x86>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007280:	4601      	mov	r1, r0
 8007282:	4630      	mov	r0, r6
 8007284:	f001 fedc 	bl	8009040 <lsm6dso_xl_data_rate_set>
 8007288:	2800      	cmp	r0, #0
 800728a:	d09e      	beq.n	80071ca <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x32>
 800728c:	e7f5      	b.n	800727a <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xe2>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800728e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007296:	d97b      	bls.n	8007390 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x1f8>
 8007298:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800729c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80072a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a4:	d978      	bls.n	8007398 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x200>
 80072a6:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80073d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x238>
 80072aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80072ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b2:	d975      	bls.n	80073a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x208>
 80072b4:	eddf 7a47 	vldr	s15, [pc, #284]	; 80073d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x23c>
 80072b8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80072bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c0:	d972      	bls.n	80073a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x210>
 80072c2:	eddf 7a45 	vldr	s15, [pc, #276]	; 80073d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x240>
 80072c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80072ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ce:	d96f      	bls.n	80073b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x218>
 80072d0:	eddf 7a42 	vldr	s15, [pc, #264]	; 80073dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x244>
 80072d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80072d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072dc:	d96c      	bls.n	80073b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x220>
 80072de:	eddf 7a40 	vldr	s15, [pc, #256]	; 80073e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x248>
 80072e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80072e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ea:	d969      	bls.n	80073c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x228>
 80072ec:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80073e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x24c>
 80072f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80072f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f8:	d966      	bls.n	80073c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x230>
 80072fa:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80073e8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x250>
 80072fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007306:	bf94      	ite	ls
 8007308:	2109      	movls	r1, #9
 800730a:	210a      	movhi	r1, #10
 800730c:	e798      	b.n	8007240 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800730e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007316:	f67f af7f 	bls.w	8007218 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x80>
 800731a:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800731e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007326:	d935      	bls.n	8007394 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x1fc>
 8007328:	eddf 7a29 	vldr	s15, [pc, #164]	; 80073d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x238>
 800732c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007334:	d932      	bls.n	800739c <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x204>
 8007336:	eddf 7a27 	vldr	s15, [pc, #156]	; 80073d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x23c>
 800733a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800733e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007342:	d92f      	bls.n	80073a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x20c>
 8007344:	eddf 7a24 	vldr	s15, [pc, #144]	; 80073d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x240>
 8007348:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800734c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007350:	d92c      	bls.n	80073ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x214>
 8007352:	eddf 7a22 	vldr	s15, [pc, #136]	; 80073dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x244>
 8007356:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800735a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735e:	d929      	bls.n	80073b4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x21c>
 8007360:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80073e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x248>
 8007364:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736c:	d926      	bls.n	80073bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x224>
 800736e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80073e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x24c>
 8007372:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737a:	d923      	bls.n	80073c4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x22c>
 800737c:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80073e8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x250>
 8007380:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007388:	bf94      	ite	ls
 800738a:	2309      	movls	r3, #9
 800738c:	230a      	movhi	r3, #10
 800738e:	e744      	b.n	800721a <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007390:	2101      	movs	r1, #1
 8007392:	e755      	b.n	8007240 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007394:	2302      	movs	r3, #2
 8007396:	e740      	b.n	800721a <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007398:	2102      	movs	r1, #2
 800739a:	e751      	b.n	8007240 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800739c:	2303      	movs	r3, #3
 800739e:	e73c      	b.n	800721a <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80073a0:	2103      	movs	r1, #3
 80073a2:	e74d      	b.n	8007240 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80073a4:	2304      	movs	r3, #4
 80073a6:	e738      	b.n	800721a <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80073a8:	2104      	movs	r1, #4
 80073aa:	e749      	b.n	8007240 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80073ac:	2305      	movs	r3, #5
 80073ae:	e734      	b.n	800721a <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80073b0:	2105      	movs	r1, #5
 80073b2:	e745      	b.n	8007240 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80073b4:	2306      	movs	r3, #6
 80073b6:	e730      	b.n	800721a <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80073b8:	2106      	movs	r1, #6
 80073ba:	e741      	b.n	8007240 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80073bc:	2307      	movs	r3, #7
 80073be:	e72c      	b.n	800721a <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80073c0:	2107      	movs	r1, #7
 80073c2:	e73d      	b.n	8007240 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80073c4:	2308      	movs	r3, #8
 80073c6:	e728      	b.n	800721a <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80073c8:	2108      	movs	r1, #8
 80073ca:	e739      	b.n	8007240 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0+0xa8>
 80073cc:	3fcccccd 	.word	0x3fcccccd
 80073d0:	42500000 	.word	0x42500000
 80073d4:	42d00000 	.word	0x42d00000
 80073d8:	43500000 	.word	0x43500000
 80073dc:	43d08000 	.word	0x43d08000
 80073e0:	44504000 	.word	0x44504000
 80073e4:	44d06000 	.word	0x44d06000
 80073e8:	45505000 	.word	0x45505000

080073ec <LSM6DSO_GYRO_SetOutputDataRate>:
{
 80073ec:	b570      	push	{r4, r5, r6, lr}
 80073ee:	ed2d 8b02 	vpush	{d8}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80073f2:	f100 061c 	add.w	r6, r0, #28
{
 80073f6:	b082      	sub	sp, #8
 80073f8:	ee08 1a10 	vmov	s16, r1
 80073fc:	4605      	mov	r5, r0
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80073fe:	2301      	movs	r3, #1
 8007400:	aa01      	add	r2, sp, #4
 8007402:	2116      	movs	r1, #22
 8007404:	4630      	mov	r0, r6
 8007406:	f001 f897 	bl	8008538 <lsm6dso_read_reg>
 800740a:	2800      	cmp	r0, #0
 800740c:	f040 80b1 	bne.w	8007572 <LSM6DSO_GYRO_SetOutputDataRate+0x186>
      if (val1.g_hm_mode != 0U)
 8007410:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	4604      	mov	r4, r0
 8007418:	f2c0 809c 	blt.w	8007554 <LSM6DSO_GYRO_SetOutputDataRate+0x168>
  if (pObj->gyro_is_enabled == 1U)
 800741c:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007420:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
  if (pObj->gyro_is_enabled == 1U)
 8007424:	2901      	cmp	r1, #1
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007426:	eeb4 8ae7 	vcmpe.f32	s16, s15
  if (pObj->gyro_is_enabled == 1U)
 800742a:	d04a      	beq.n	80074c2 <LSM6DSO_GYRO_SetOutputDataRate+0xd6>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800742c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007430:	d807      	bhi.n	8007442 <LSM6DSO_GYRO_SetOutputDataRate+0x56>
 8007432:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007434:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8007438:	4620      	mov	r0, r4
 800743a:	b002      	add	sp, #8
 800743c:	ecbd 8b02 	vpop	{d8}
 8007440:	bd70      	pop	{r4, r5, r6, pc}
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007442:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8007446:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800744a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744e:	f240 8093 	bls.w	8007578 <LSM6DSO_GYRO_SetOutputDataRate+0x18c>
 8007452:	eddf 7a57 	vldr	s15, [pc, #348]	; 80075b0 <LSM6DSO_GYRO_SetOutputDataRate+0x1c4>
 8007456:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800745a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745e:	f240 808f 	bls.w	8007580 <LSM6DSO_GYRO_SetOutputDataRate+0x194>
 8007462:	eddf 7a54 	vldr	s15, [pc, #336]	; 80075b4 <LSM6DSO_GYRO_SetOutputDataRate+0x1c8>
 8007466:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800746a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800746e:	f240 808b 	bls.w	8007588 <LSM6DSO_GYRO_SetOutputDataRate+0x19c>
 8007472:	eddf 7a51 	vldr	s15, [pc, #324]	; 80075b8 <LSM6DSO_GYRO_SetOutputDataRate+0x1cc>
 8007476:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800747a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747e:	f240 8087 	bls.w	8007590 <LSM6DSO_GYRO_SetOutputDataRate+0x1a4>
 8007482:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80075bc <LSM6DSO_GYRO_SetOutputDataRate+0x1d0>
 8007486:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800748a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800748e:	f240 8083 	bls.w	8007598 <LSM6DSO_GYRO_SetOutputDataRate+0x1ac>
 8007492:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80075c0 <LSM6DSO_GYRO_SetOutputDataRate+0x1d4>
 8007496:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800749a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749e:	d97f      	bls.n	80075a0 <LSM6DSO_GYRO_SetOutputDataRate+0x1b4>
 80074a0:	eddf 7a48 	vldr	s15, [pc, #288]	; 80075c4 <LSM6DSO_GYRO_SetOutputDataRate+0x1d8>
 80074a4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80074a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ac:	d97c      	bls.n	80075a8 <LSM6DSO_GYRO_SetOutputDataRate+0x1bc>
 80074ae:	eddf 7a46 	vldr	s15, [pc, #280]	; 80075c8 <LSM6DSO_GYRO_SetOutputDataRate+0x1dc>
 80074b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80074b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ba:	bf94      	ite	ls
 80074bc:	2309      	movls	r3, #9
 80074be:	230a      	movhi	r3, #10
 80074c0:	e7b8      	b.n	8007434 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80074c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c6:	d939      	bls.n	800753c <LSM6DSO_GYRO_SetOutputDataRate+0x150>
 80074c8:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80074cc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80074d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d4:	d952      	bls.n	800757c <LSM6DSO_GYRO_SetOutputDataRate+0x190>
 80074d6:	eddf 7a36 	vldr	s15, [pc, #216]	; 80075b0 <LSM6DSO_GYRO_SetOutputDataRate+0x1c4>
 80074da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80074de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e2:	d94f      	bls.n	8007584 <LSM6DSO_GYRO_SetOutputDataRate+0x198>
 80074e4:	eddf 7a33 	vldr	s15, [pc, #204]	; 80075b4 <LSM6DSO_GYRO_SetOutputDataRate+0x1c8>
 80074e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80074ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f0:	d94c      	bls.n	800758c <LSM6DSO_GYRO_SetOutputDataRate+0x1a0>
 80074f2:	eddf 7a31 	vldr	s15, [pc, #196]	; 80075b8 <LSM6DSO_GYRO_SetOutputDataRate+0x1cc>
 80074f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80074fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fe:	d949      	bls.n	8007594 <LSM6DSO_GYRO_SetOutputDataRate+0x1a8>
 8007500:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80075bc <LSM6DSO_GYRO_SetOutputDataRate+0x1d0>
 8007504:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750c:	d946      	bls.n	800759c <LSM6DSO_GYRO_SetOutputDataRate+0x1b0>
 800750e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80075c0 <LSM6DSO_GYRO_SetOutputDataRate+0x1d4>
 8007512:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751a:	d943      	bls.n	80075a4 <LSM6DSO_GYRO_SetOutputDataRate+0x1b8>
 800751c:	eddf 7a29 	vldr	s15, [pc, #164]	; 80075c4 <LSM6DSO_GYRO_SetOutputDataRate+0x1d8>
 8007520:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007528:	d940      	bls.n	80075ac <LSM6DSO_GYRO_SetOutputDataRate+0x1c0>
 800752a:	eddf 7a27 	vldr	s15, [pc, #156]	; 80075c8 <LSM6DSO_GYRO_SetOutputDataRate+0x1dc>
 800752e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007536:	bf94      	ite	ls
 8007538:	2109      	movls	r1, #9
 800753a:	210a      	movhi	r1, #10
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800753c:	4630      	mov	r0, r6
 800753e:	f001 fe1f 	bl	8009180 <lsm6dso_gy_data_rate_set>
 8007542:	3800      	subs	r0, #0
 8007544:	bf18      	it	ne
 8007546:	2001      	movne	r0, #1
 8007548:	4244      	negs	r4, r0
}
 800754a:	4620      	mov	r0, r4
 800754c:	b002      	add	sp, #8
 800754e:	ecbd 8b02 	vpop	{d8}
 8007552:	bd70      	pop	{r4, r5, r6, pc}
        val1.g_hm_mode = 0U;
 8007554:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007558:	f360 13c7 	bfi	r3, r0, #7, #1
 800755c:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007560:	aa01      	add	r2, sp, #4
 8007562:	2301      	movs	r3, #1
 8007564:	2116      	movs	r1, #22
 8007566:	4630      	mov	r0, r6
 8007568:	f000 ffee 	bl	8008548 <lsm6dso_write_reg>
 800756c:	2800      	cmp	r0, #0
 800756e:	f43f af55 	beq.w	800741c <LSM6DSO_GYRO_SetOutputDataRate+0x30>
        return LSM6DSO_ERROR;
 8007572:	f04f 34ff 	mov.w	r4, #4294967295
 8007576:	e75f      	b.n	8007438 <LSM6DSO_GYRO_SetOutputDataRate+0x4c>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007578:	2302      	movs	r3, #2
 800757a:	e75b      	b.n	8007434 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800757c:	2102      	movs	r1, #2
 800757e:	e7dd      	b.n	800753c <LSM6DSO_GYRO_SetOutputDataRate+0x150>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007580:	2303      	movs	r3, #3
 8007582:	e757      	b.n	8007434 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007584:	2103      	movs	r1, #3
 8007586:	e7d9      	b.n	800753c <LSM6DSO_GYRO_SetOutputDataRate+0x150>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007588:	2304      	movs	r3, #4
 800758a:	e753      	b.n	8007434 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800758c:	2104      	movs	r1, #4
 800758e:	e7d5      	b.n	800753c <LSM6DSO_GYRO_SetOutputDataRate+0x150>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007590:	2305      	movs	r3, #5
 8007592:	e74f      	b.n	8007434 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007594:	2105      	movs	r1, #5
 8007596:	e7d1      	b.n	800753c <LSM6DSO_GYRO_SetOutputDataRate+0x150>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007598:	2306      	movs	r3, #6
 800759a:	e74b      	b.n	8007434 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800759c:	2106      	movs	r1, #6
 800759e:	e7cd      	b.n	800753c <LSM6DSO_GYRO_SetOutputDataRate+0x150>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80075a0:	2307      	movs	r3, #7
 80075a2:	e747      	b.n	8007434 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80075a4:	2107      	movs	r1, #7
 80075a6:	e7c9      	b.n	800753c <LSM6DSO_GYRO_SetOutputDataRate+0x150>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80075a8:	2308      	movs	r3, #8
 80075aa:	e743      	b.n	8007434 <LSM6DSO_GYRO_SetOutputDataRate+0x48>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80075ac:	2108      	movs	r1, #8
 80075ae:	e7c5      	b.n	800753c <LSM6DSO_GYRO_SetOutputDataRate+0x150>
 80075b0:	42500000 	.word	0x42500000
 80075b4:	42d00000 	.word	0x42d00000
 80075b8:	43500000 	.word	0x43500000
 80075bc:	43d08000 	.word	0x43d08000
 80075c0:	44504000 	.word	0x44504000
 80075c4:	44d06000 	.word	0x44d06000
 80075c8:	45505000 	.word	0x45505000

080075cc <LSM6DSO_ACC_SetOutputDataRate>:
{
 80075cc:	b570      	push	{r4, r5, r6, lr}
 80075ce:	ed2d 8b02 	vpush	{d8}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80075d2:	f100 061c 	add.w	r6, r0, #28
{
 80075d6:	b082      	sub	sp, #8
 80075d8:	ee08 1a10 	vmov	s16, r1
 80075dc:	4605      	mov	r5, r0
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80075de:	2301      	movs	r3, #1
 80075e0:	466a      	mov	r2, sp
 80075e2:	2114      	movs	r1, #20
 80075e4:	4630      	mov	r0, r6
 80075e6:	f000 ffa7 	bl	8008538 <lsm6dso_read_reg>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d15f      	bne.n	80076ae <LSM6DSO_ACC_SetOutputDataRate+0xe2>
      if (val1.xl_ulp_en != 0U)
 80075ee:	f99d 3000 	ldrsb.w	r3, [sp]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	da11      	bge.n	800761a <LSM6DSO_ACC_SetOutputDataRate+0x4e>
        if (pObj->acc_is_enabled == 1U)
 80075f6:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d05a      	beq.n	80076b4 <LSM6DSO_ACC_SetOutputDataRate+0xe8>
        val1.xl_ulp_en = 0;
 80075fe:	f89d 1000 	ldrb.w	r1, [sp]
 8007602:	f36f 11c7 	bfc	r1, #7, #1
 8007606:	f88d 1000 	strb.w	r1, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800760a:	2301      	movs	r3, #1
 800760c:	466a      	mov	r2, sp
 800760e:	2114      	movs	r1, #20
 8007610:	4630      	mov	r0, r6
 8007612:	f000 ff99 	bl	8008548 <lsm6dso_write_reg>
 8007616:	2800      	cmp	r0, #0
 8007618:	d149      	bne.n	80076ae <LSM6DSO_ACC_SetOutputDataRate+0xe2>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800761a:	2301      	movs	r3, #1
 800761c:	aa01      	add	r2, sp, #4
 800761e:	2115      	movs	r1, #21
 8007620:	4630      	mov	r0, r6
 8007622:	f000 ff89 	bl	8008538 <lsm6dso_read_reg>
 8007626:	4604      	mov	r4, r0
 8007628:	2800      	cmp	r0, #0
 800762a:	d140      	bne.n	80076ae <LSM6DSO_ACC_SetOutputDataRate+0xe2>
      if (val2.xl_hm_mode != 0U)
 800762c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007630:	06da      	lsls	r2, r3, #27
 8007632:	d430      	bmi.n	8007696 <LSM6DSO_ACC_SetOutputDataRate+0xca>
      if (newOdr < 12.5f)
 8007634:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8007638:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800763c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007640:	d50c      	bpl.n	800765c <LSM6DSO_ACC_SetOutputDataRate+0x90>
  if (pObj->acc_is_enabled == 1U)
 8007642:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8007646:	2b01      	cmp	r3, #1
 8007648:	f000 80bc 	beq.w	80077c4 <LSM6DSO_ACC_SetOutputDataRate+0x1f8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800764c:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800764e:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
}
 8007652:	4620      	mov	r0, r4
 8007654:	b002      	add	sp, #8
 8007656:	ecbd 8b02 	vpop	{d8}
 800765a:	bd70      	pop	{r4, r5, r6, pc}
  if (pObj->acc_is_enabled == 1U)
 800765c:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007660:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007800 <LSM6DSO_ACC_SetOutputDataRate+0x234>
  if (pObj->acc_is_enabled == 1U)
 8007664:	2b01      	cmp	r3, #1
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007666:	eeb4 8ac7 	vcmpe.f32	s16, s14
  if (pObj->acc_is_enabled == 1U)
 800766a:	d10f      	bne.n	800768c <LSM6DSO_ACC_SetOutputDataRate+0xc0>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800766c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007670:	d827      	bhi.n	80076c2 <LSM6DSO_ACC_SetOutputDataRate+0xf6>
 8007672:	210b      	movs	r1, #11
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007674:	4630      	mov	r0, r6
 8007676:	f001 fce3 	bl	8009040 <lsm6dso_xl_data_rate_set>
 800767a:	3800      	subs	r0, #0
 800767c:	bf18      	it	ne
 800767e:	2001      	movne	r0, #1
 8007680:	4244      	negs	r4, r0
}
 8007682:	4620      	mov	r0, r4
 8007684:	b002      	add	sp, #8
 8007686:	ecbd 8b02 	vpop	{d8}
 800768a:	bd70      	pop	{r4, r5, r6, pc}
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800768c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007690:	d857      	bhi.n	8007742 <LSM6DSO_ACC_SetOutputDataRate+0x176>
 8007692:	230b      	movs	r3, #11
 8007694:	e7db      	b.n	800764e <LSM6DSO_ACC_SetOutputDataRate+0x82>
        val2.xl_hm_mode = 0U;
 8007696:	f360 1304 	bfi	r3, r0, #4, #1
 800769a:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800769e:	aa01      	add	r2, sp, #4
 80076a0:	2301      	movs	r3, #1
 80076a2:	2115      	movs	r1, #21
 80076a4:	4630      	mov	r0, r6
 80076a6:	f000 ff4f 	bl	8008548 <lsm6dso_write_reg>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d0c2      	beq.n	8007634 <LSM6DSO_ACC_SetOutputDataRate+0x68>
        return LSM6DSO_ERROR;
 80076ae:	f04f 34ff 	mov.w	r4, #4294967295
 80076b2:	e7ce      	b.n	8007652 <LSM6DSO_ACC_SetOutputDataRate+0x86>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80076b4:	4601      	mov	r1, r0
 80076b6:	4630      	mov	r0, r6
 80076b8:	f001 fcc2 	bl	8009040 <lsm6dso_xl_data_rate_set>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d09e      	beq.n	80075fe <LSM6DSO_ACC_SetOutputDataRate+0x32>
 80076c0:	e7f5      	b.n	80076ae <LSM6DSO_ACC_SetOutputDataRate+0xe2>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80076c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80076c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ca:	d97b      	bls.n	80077c4 <LSM6DSO_ACC_SetOutputDataRate+0x1f8>
 80076cc:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80076d0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80076d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d8:	d978      	bls.n	80077cc <LSM6DSO_ACC_SetOutputDataRate+0x200>
 80076da:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8007804 <LSM6DSO_ACC_SetOutputDataRate+0x238>
 80076de:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80076e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e6:	d975      	bls.n	80077d4 <LSM6DSO_ACC_SetOutputDataRate+0x208>
 80076e8:	eddf 7a47 	vldr	s15, [pc, #284]	; 8007808 <LSM6DSO_ACC_SetOutputDataRate+0x23c>
 80076ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80076f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f4:	d972      	bls.n	80077dc <LSM6DSO_ACC_SetOutputDataRate+0x210>
 80076f6:	eddf 7a45 	vldr	s15, [pc, #276]	; 800780c <LSM6DSO_ACC_SetOutputDataRate+0x240>
 80076fa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80076fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007702:	d96f      	bls.n	80077e4 <LSM6DSO_ACC_SetOutputDataRate+0x218>
 8007704:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007810 <LSM6DSO_ACC_SetOutputDataRate+0x244>
 8007708:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800770c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007710:	d96c      	bls.n	80077ec <LSM6DSO_ACC_SetOutputDataRate+0x220>
 8007712:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007814 <LSM6DSO_ACC_SetOutputDataRate+0x248>
 8007716:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800771a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800771e:	d969      	bls.n	80077f4 <LSM6DSO_ACC_SetOutputDataRate+0x228>
 8007720:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8007818 <LSM6DSO_ACC_SetOutputDataRate+0x24c>
 8007724:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772c:	d966      	bls.n	80077fc <LSM6DSO_ACC_SetOutputDataRate+0x230>
 800772e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800781c <LSM6DSO_ACC_SetOutputDataRate+0x250>
 8007732:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773a:	bf94      	ite	ls
 800773c:	2109      	movls	r1, #9
 800773e:	210a      	movhi	r1, #10
 8007740:	e798      	b.n	8007674 <LSM6DSO_ACC_SetOutputDataRate+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007742:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774a:	f67f af7f 	bls.w	800764c <LSM6DSO_ACC_SetOutputDataRate+0x80>
 800774e:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8007752:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775a:	d935      	bls.n	80077c8 <LSM6DSO_ACC_SetOutputDataRate+0x1fc>
 800775c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8007804 <LSM6DSO_ACC_SetOutputDataRate+0x238>
 8007760:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007768:	d932      	bls.n	80077d0 <LSM6DSO_ACC_SetOutputDataRate+0x204>
 800776a:	eddf 7a27 	vldr	s15, [pc, #156]	; 8007808 <LSM6DSO_ACC_SetOutputDataRate+0x23c>
 800776e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007776:	d92f      	bls.n	80077d8 <LSM6DSO_ACC_SetOutputDataRate+0x20c>
 8007778:	eddf 7a24 	vldr	s15, [pc, #144]	; 800780c <LSM6DSO_ACC_SetOutputDataRate+0x240>
 800777c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007784:	d92c      	bls.n	80077e0 <LSM6DSO_ACC_SetOutputDataRate+0x214>
 8007786:	eddf 7a22 	vldr	s15, [pc, #136]	; 8007810 <LSM6DSO_ACC_SetOutputDataRate+0x244>
 800778a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800778e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007792:	d929      	bls.n	80077e8 <LSM6DSO_ACC_SetOutputDataRate+0x21c>
 8007794:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007814 <LSM6DSO_ACC_SetOutputDataRate+0x248>
 8007798:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800779c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a0:	d926      	bls.n	80077f0 <LSM6DSO_ACC_SetOutputDataRate+0x224>
 80077a2:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8007818 <LSM6DSO_ACC_SetOutputDataRate+0x24c>
 80077a6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80077aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ae:	d923      	bls.n	80077f8 <LSM6DSO_ACC_SetOutputDataRate+0x22c>
 80077b0:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800781c <LSM6DSO_ACC_SetOutputDataRate+0x250>
 80077b4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80077b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077bc:	bf94      	ite	ls
 80077be:	2309      	movls	r3, #9
 80077c0:	230a      	movhi	r3, #10
 80077c2:	e744      	b.n	800764e <LSM6DSO_ACC_SetOutputDataRate+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077c4:	2101      	movs	r1, #1
 80077c6:	e755      	b.n	8007674 <LSM6DSO_ACC_SetOutputDataRate+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077c8:	2302      	movs	r3, #2
 80077ca:	e740      	b.n	800764e <LSM6DSO_ACC_SetOutputDataRate+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077cc:	2102      	movs	r1, #2
 80077ce:	e751      	b.n	8007674 <LSM6DSO_ACC_SetOutputDataRate+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077d0:	2303      	movs	r3, #3
 80077d2:	e73c      	b.n	800764e <LSM6DSO_ACC_SetOutputDataRate+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077d4:	2103      	movs	r1, #3
 80077d6:	e74d      	b.n	8007674 <LSM6DSO_ACC_SetOutputDataRate+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077d8:	2304      	movs	r3, #4
 80077da:	e738      	b.n	800764e <LSM6DSO_ACC_SetOutputDataRate+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077dc:	2104      	movs	r1, #4
 80077de:	e749      	b.n	8007674 <LSM6DSO_ACC_SetOutputDataRate+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077e0:	2305      	movs	r3, #5
 80077e2:	e734      	b.n	800764e <LSM6DSO_ACC_SetOutputDataRate+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077e4:	2105      	movs	r1, #5
 80077e6:	e745      	b.n	8007674 <LSM6DSO_ACC_SetOutputDataRate+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077e8:	2306      	movs	r3, #6
 80077ea:	e730      	b.n	800764e <LSM6DSO_ACC_SetOutputDataRate+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077ec:	2106      	movs	r1, #6
 80077ee:	e741      	b.n	8007674 <LSM6DSO_ACC_SetOutputDataRate+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077f0:	2307      	movs	r3, #7
 80077f2:	e72c      	b.n	800764e <LSM6DSO_ACC_SetOutputDataRate+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077f4:	2107      	movs	r1, #7
 80077f6:	e73d      	b.n	8007674 <LSM6DSO_ACC_SetOutputDataRate+0xa8>
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077f8:	2308      	movs	r3, #8
 80077fa:	e728      	b.n	800764e <LSM6DSO_ACC_SetOutputDataRate+0x82>
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80077fc:	2108      	movs	r1, #8
 80077fe:	e739      	b.n	8007674 <LSM6DSO_ACC_SetOutputDataRate+0xa8>
 8007800:	3fcccccd 	.word	0x3fcccccd
 8007804:	42500000 	.word	0x42500000
 8007808:	42d00000 	.word	0x42d00000
 800780c:	43500000 	.word	0x43500000
 8007810:	43d08000 	.word	0x43d08000
 8007814:	44504000 	.word	0x44504000
 8007818:	44d06000 	.word	0x44d06000
 800781c:	45505000 	.word	0x45505000

08007820 <LSM6DSO_RegisterBusIO>:
  if (pObj == NULL)
 8007820:	2800      	cmp	r0, #0
 8007822:	d035      	beq.n	8007890 <LSM6DSO_RegisterBusIO+0x70>
{
 8007824:	b530      	push	{r4, r5, lr}
 8007826:	4604      	mov	r4, r0
    pObj->IO.DeInit    = pIO->DeInit;
 8007828:	e9d1 3000 	ldrd	r3, r0, [r1]
    pObj->IO.BusType   = pIO->BusType;
 800782c:	688a      	ldr	r2, [r1, #8]
 800782e:	60a2      	str	r2, [r4, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8007830:	e9c4 3000 	strd	r3, r0, [r4]
    pObj->IO.Address   = pIO->Address;
 8007834:	7b0a      	ldrb	r2, [r1, #12]
 8007836:	7322      	strb	r2, [r4, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007838:	e9d1 5204 	ldrd	r5, r2, [r1, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800783c:	6988      	ldr	r0, [r1, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800783e:	4916      	ldr	r1, [pc, #88]	; (8007898 <LSM6DSO_RegisterBusIO+0x78>)
    pObj->IO.GetTick   = pIO->GetTick;
 8007840:	61a0      	str	r0, [r4, #24]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007842:	e9c4 5204 	strd	r5, r2, [r4, #16]
    pObj->Ctx.write_reg = WriteRegWrap;
 8007846:	4a15      	ldr	r2, [pc, #84]	; (800789c <LSM6DSO_RegisterBusIO+0x7c>)
    pObj->Ctx.handle   = pObj;
 8007848:	6264      	str	r4, [r4, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800784a:	e9c4 2107 	strd	r2, r1, [r4, #28]
{
 800784e:	b083      	sub	sp, #12
    if (pObj->IO.Init == NULL)
 8007850:	b1db      	cbz	r3, 800788a <LSM6DSO_RegisterBusIO+0x6a>
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8007852:	4798      	blx	r3
 8007854:	b9c8      	cbnz	r0, 800788a <LSM6DSO_RegisterBusIO+0x6a>
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	2b02      	cmp	r3, #2
 800785a:	d001      	beq.n	8007860 <LSM6DSO_RegisterBusIO+0x40>
}
 800785c:	b003      	add	sp, #12
 800785e:	bd30      	pop	{r4, r5, pc}
        if (pObj->is_initialized == 0U)
 8007860:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1f9      	bne.n	800785c <LSM6DSO_RegisterBusIO+0x3c>
          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8007868:	250c      	movs	r5, #12
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800786a:	2301      	movs	r3, #1
 800786c:	f10d 0207 	add.w	r2, sp, #7
 8007870:	2112      	movs	r1, #18
 8007872:	f104 001c 	add.w	r0, r4, #28
 8007876:	f88d 5007 	strb.w	r5, [sp, #7]
 800787a:	f000 fe65 	bl	8008548 <lsm6dso_write_reg>
            ret = LSM6DSO_ERROR;
 800787e:	2800      	cmp	r0, #0
 8007880:	bf18      	it	ne
 8007882:	f04f 30ff 	movne.w	r0, #4294967295
}
 8007886:	b003      	add	sp, #12
 8007888:	bd30      	pop	{r4, r5, pc}
    ret = LSM6DSO_ERROR;
 800788a:	f04f 30ff 	mov.w	r0, #4294967295
 800788e:	e7e5      	b.n	800785c <LSM6DSO_RegisterBusIO+0x3c>
 8007890:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	08006b0d 	.word	0x08006b0d
 800789c:	08006b1d 	.word	0x08006b1d

080078a0 <LSM6DSO_ACC_Enable_Free_Fall_Detection>:
{
 80078a0:	b530      	push	{r4, r5, lr}
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80078a2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8007958 <LSM6DSO_ACC_Enable_Free_Fall_Detection+0xb8>
{
 80078a6:	b083      	sub	sp, #12
 80078a8:	4604      	mov	r4, r0
 80078aa:	460d      	mov	r5, r1
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80078ac:	f7ff fc74 	bl	8007198 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0>
  if (LSM6DSO_ACC_SetOutputDataRate(pObj, 417.0f) != LSM6DSO_OK)
 80078b0:	b9e0      	cbnz	r0, 80078ec <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x4c>
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80078b2:	341c      	adds	r4, #28
 80078b4:	4601      	mov	r1, r0
 80078b6:	4620      	mov	r0, r4
 80078b8:	f000 fe4e 	bl	8008558 <lsm6dso_xl_full_scale_set>
 80078bc:	b9b0      	cbnz	r0, 80078ec <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x4c>
  if (lsm6dso_ff_dur_set(&(pObj->Ctx), 0x06) != LSM6DSO_OK)
 80078be:	2106      	movs	r1, #6
 80078c0:	4620      	mov	r0, r4
 80078c2:	f001 fad5 	bl	8008e70 <lsm6dso_ff_dur_set>
 80078c6:	4601      	mov	r1, r0
 80078c8:	b980      	cbnz	r0, 80078ec <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x4c>
  if (lsm6dso_wkup_dur_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 80078ca:	4620      	mov	r0, r4
 80078cc:	f001 f998 	bl	8008c00 <lsm6dso_wkup_dur_set>
 80078d0:	4601      	mov	r1, r0
 80078d2:	b958      	cbnz	r0, 80078ec <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x4c>
  if (lsm6dso_act_sleep_dur_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 80078d4:	4620      	mov	r0, r4
 80078d6:	f001 f9ad 	bl	8008c34 <lsm6dso_act_sleep_dur_set>
 80078da:	b938      	cbnz	r0, 80078ec <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x4c>
  if (lsm6dso_ff_threshold_set(&(pObj->Ctx), LSM6DSO_FF_TSH_312mg) != LSM6DSO_OK)
 80078dc:	2103      	movs	r1, #3
 80078de:	4620      	mov	r0, r4
 80078e0:	f001 faac 	bl	8008e3c <lsm6dso_ff_threshold_set>
 80078e4:	b910      	cbnz	r0, 80078ec <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x4c>
  switch (IntPin)
 80078e6:	b1fd      	cbz	r5, 8007928 <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x88>
 80078e8:	2d01      	cmp	r5, #1
 80078ea:	d003      	beq.n	80078f4 <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x54>
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 80078f0:	b003      	add	sp, #12
 80078f2:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 80078f4:	466d      	mov	r5, sp
 80078f6:	4601      	mov	r1, r0
 80078f8:	462a      	mov	r2, r5
 80078fa:	4620      	mov	r0, r4
 80078fc:	f002 f804 	bl	8009908 <lsm6dso_pin_int2_route_get>
 8007900:	4601      	mov	r1, r0
 8007902:	2800      	cmp	r0, #0
 8007904:	d1f2      	bne.n	80078ec <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x4c>
      val2.free_fall = PROPERTY_ENABLE;
 8007906:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800790a:	f043 0308 	orr.w	r3, r3, #8
 800790e:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 8007912:	e895 000c 	ldmia.w	r5, {r2, r3}
 8007916:	4620      	mov	r0, r4
 8007918:	f001 fdec 	bl	80094f4 <lsm6dso_pin_int2_route_set>
 800791c:	3800      	subs	r0, #0
 800791e:	bf18      	it	ne
 8007920:	2001      	movne	r0, #1
 8007922:	4240      	negs	r0, r0
}
 8007924:	b003      	add	sp, #12
 8007926:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007928:	466d      	mov	r5, sp
 800792a:	4629      	mov	r1, r5
 800792c:	4620      	mov	r0, r4
 800792e:	f001 fcc7 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 8007932:	2800      	cmp	r0, #0
 8007934:	d1da      	bne.n	80078ec <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x4c>
      val1.free_fall = PROPERTY_ENABLE;
 8007936:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800793a:	f043 0320 	orr.w	r3, r3, #32
 800793e:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8007942:	e895 0006 	ldmia.w	r5, {r1, r2}
 8007946:	4620      	mov	r0, r4
 8007948:	f002 f90a 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 800794c:	3800      	subs	r0, #0
 800794e:	bf18      	it	ne
 8007950:	2001      	movne	r0, #1
 8007952:	4240      	negs	r0, r0
}
 8007954:	b003      	add	sp, #12
 8007956:	bd30      	pop	{r4, r5, pc}
 8007958:	43d08000 	.word	0x43d08000

0800795c <LSM6DSO_ACC_Disable_Free_Fall_Detection>:
{
 800795c:	b530      	push	{r4, r5, lr}
 800795e:	b085      	sub	sp, #20
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007960:	f100 041c 	add.w	r4, r0, #28
 8007964:	466d      	mov	r5, sp
 8007966:	4629      	mov	r1, r5
 8007968:	4620      	mov	r0, r4
 800796a:	f001 fca9 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 800796e:	bb78      	cbnz	r0, 80079d0 <LSM6DSO_ACC_Disable_Free_Fall_Detection+0x74>
  val1.free_fall = PROPERTY_DISABLE;
 8007970:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8007974:	4603      	mov	r3, r0
 8007976:	f363 1245 	bfi	r2, r3, #5, #1
 800797a:	f88d 2001 	strb.w	r2, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 800797e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8007982:	4620      	mov	r0, r4
 8007984:	f002 f8ec 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 8007988:	4601      	mov	r1, r0
 800798a:	bb08      	cbnz	r0, 80079d0 <LSM6DSO_ACC_Disable_Free_Fall_Detection+0x74>
  if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 800798c:	ad02      	add	r5, sp, #8
 800798e:	462a      	mov	r2, r5
 8007990:	4620      	mov	r0, r4
 8007992:	f001 ffb9 	bl	8009908 <lsm6dso_pin_int2_route_get>
 8007996:	b9d8      	cbnz	r0, 80079d0 <LSM6DSO_ACC_Disable_Free_Fall_Detection+0x74>
  val2.free_fall = PROPERTY_DISABLE;
 8007998:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800799c:	f360 03c3 	bfi	r3, r0, #3, #1
 80079a0:	f88d 3009 	strb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 80079a4:	4601      	mov	r1, r0
 80079a6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80079aa:	4620      	mov	r0, r4
 80079ac:	f001 fda2 	bl	80094f4 <lsm6dso_pin_int2_route_set>
 80079b0:	4601      	mov	r1, r0
 80079b2:	b968      	cbnz	r0, 80079d0 <LSM6DSO_ACC_Disable_Free_Fall_Detection+0x74>
  if (lsm6dso_ff_dur_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 80079b4:	4620      	mov	r0, r4
 80079b6:	f001 fa5b 	bl	8008e70 <lsm6dso_ff_dur_set>
 80079ba:	4601      	mov	r1, r0
 80079bc:	b940      	cbnz	r0, 80079d0 <LSM6DSO_ACC_Disable_Free_Fall_Detection+0x74>
  if (lsm6dso_ff_threshold_set(&(pObj->Ctx), LSM6DSO_FF_TSH_156mg) != LSM6DSO_OK)
 80079be:	4620      	mov	r0, r4
 80079c0:	f001 fa3c 	bl	8008e3c <lsm6dso_ff_threshold_set>
 80079c4:	3800      	subs	r0, #0
 80079c6:	bf18      	it	ne
 80079c8:	2001      	movne	r0, #1
 80079ca:	4240      	negs	r0, r0
}
 80079cc:	b005      	add	sp, #20
 80079ce:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80079d4:	b005      	add	sp, #20
 80079d6:	bd30      	pop	{r4, r5, pc}

080079d8 <LSM6DSO_ACC_Set_Free_Fall_Threshold>:
  switch (Threshold)
 80079d8:	2907      	cmp	r1, #7
 80079da:	d808      	bhi.n	80079ee <LSM6DSO_ACC_Set_Free_Fall_Threshold+0x16>
{
 80079dc:	b508      	push	{r3, lr}
  if (lsm6dso_ff_threshold_set(&(pObj->Ctx), newThreshold) != LSM6DSO_OK)
 80079de:	301c      	adds	r0, #28
 80079e0:	f001 fa2c 	bl	8008e3c <lsm6dso_ff_threshold_set>
 80079e4:	3800      	subs	r0, #0
 80079e6:	bf18      	it	ne
 80079e8:	2001      	movne	r0, #1
 80079ea:	4240      	negs	r0, r0
}
 80079ec:	bd08      	pop	{r3, pc}
    return LSM6DSO_ERROR;
 80079ee:	f04f 30ff 	mov.w	r0, #4294967295
}
 80079f2:	4770      	bx	lr

080079f4 <LSM6DSO_ACC_Enable_Pedometer>:
{
 80079f4:	b570      	push	{r4, r5, r6, lr}
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80079f6:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
{
 80079fa:	b084      	sub	sp, #16
 80079fc:	4604      	mov	r4, r0
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80079fe:	f7ff fbcb 	bl	8007198 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0>
  if (LSM6DSO_ACC_SetOutputDataRate(pObj, 26.0f) != LSM6DSO_OK)
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d13f      	bne.n	8007a86 <LSM6DSO_ACC_Enable_Pedometer+0x92>
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007a06:	f104 061c 	add.w	r6, r4, #28
 8007a0a:	4601      	mov	r1, r0
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f000 fda3 	bl	8008558 <lsm6dso_xl_full_scale_set>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d137      	bne.n	8007a86 <LSM6DSO_ACC_Enable_Pedometer+0x92>
  if (lsm6dso_embedded_sens_get(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007a16:	a901      	add	r1, sp, #4
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f002 fb1f 	bl	800a05c <lsm6dso_embedded_sens_get>
 8007a1e:	bb90      	cbnz	r0, 8007a86 <LSM6DSO_ACC_Enable_Pedometer+0x92>
  if (lsm6dso_embedded_sens_off(&(pObj->Ctx)) != LSM6DSO_OK)
 8007a20:	4630      	mov	r0, r6
 8007a22:	f002 fb79 	bl	800a118 <lsm6dso_embedded_sens_off>
 8007a26:	bb70      	cbnz	r0, 8007a86 <LSM6DSO_ACC_Enable_Pedometer+0x92>
  uint32_t tickstart = pObj->IO.GetTick();
 8007a28:	69a3      	ldr	r3, [r4, #24]
 8007a2a:	4798      	blx	r3
 8007a2c:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < msDelay)
 8007a2e:	69a3      	ldr	r3, [r4, #24]
 8007a30:	4798      	blx	r3
 8007a32:	1b43      	subs	r3, r0, r5
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	d9fa      	bls.n	8007a2e <LSM6DSO_ACC_Enable_Pedometer+0x3a>
  emb_sens.step = PROPERTY_ENABLE;
 8007a38:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (lsm6dso_pedo_sens_set(&(pObj->Ctx), LSM6DSO_PEDO_BASE_MODE) != LSM6DSO_OK)
 8007a3c:	2100      	movs	r1, #0
  emb_sens.step = PROPERTY_ENABLE;
 8007a3e:	f043 0304 	orr.w	r3, r3, #4
  if (lsm6dso_pedo_sens_set(&(pObj->Ctx), LSM6DSO_PEDO_BASE_MODE) != LSM6DSO_OK)
 8007a42:	4630      	mov	r0, r6
  emb_sens.step = PROPERTY_ENABLE;
 8007a44:	f88d 3004 	strb.w	r3, [sp, #4]
  if (lsm6dso_pedo_sens_set(&(pObj->Ctx), LSM6DSO_PEDO_BASE_MODE) != LSM6DSO_OK)
 8007a48:	f001 fa5a 	bl	8008f00 <lsm6dso_pedo_sens_set>
 8007a4c:	b9d8      	cbnz	r0, 8007a86 <LSM6DSO_ACC_Enable_Pedometer+0x92>
  if (lsm6dso_embedded_sens_set(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007a4e:	a901      	add	r1, sp, #4
 8007a50:	4630      	mov	r0, r6
 8007a52:	f002 fa8f 	bl	8009f74 <lsm6dso_embedded_sens_set>
 8007a56:	b9b0      	cbnz	r0, 8007a86 <LSM6DSO_ACC_Enable_Pedometer+0x92>
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val) != LSM6DSO_OK)
 8007a58:	ac02      	add	r4, sp, #8
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f001 fc2f 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 8007a62:	b980      	cbnz	r0, 8007a86 <LSM6DSO_ACC_Enable_Pedometer+0x92>
  val.step_detector = PROPERTY_ENABLE;
 8007a64:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8007a68:	f043 0302 	orr.w	r3, r3, #2
 8007a6c:	f88d 300a 	strb.w	r3, [sp, #10]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val) != LSM6DSO_OK)
 8007a70:	e894 0006 	ldmia.w	r4, {r1, r2}
 8007a74:	4630      	mov	r0, r6
 8007a76:	f002 f873 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 8007a7a:	3800      	subs	r0, #0
 8007a7c:	bf18      	it	ne
 8007a7e:	2001      	movne	r0, #1
 8007a80:	4240      	negs	r0, r0
}
 8007a82:	b004      	add	sp, #16
 8007a84:	bd70      	pop	{r4, r5, r6, pc}
    return LSM6DSO_ERROR;
 8007a86:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007a8a:	b004      	add	sp, #16
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
 8007a8e:	bf00      	nop

08007a90 <LSM6DSO_ACC_Disable_Pedometer>:
{
 8007a90:	b530      	push	{r4, r5, lr}
 8007a92:	b085      	sub	sp, #20
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007a94:	f100 041c 	add.w	r4, r0, #28
 8007a98:	ad02      	add	r5, sp, #8
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f001 fc0f 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 8007aa2:	bb08      	cbnz	r0, 8007ae8 <LSM6DSO_ACC_Disable_Pedometer+0x58>
  val1.step_detector = PROPERTY_DISABLE;
 8007aa4:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f363 0241 	bfi	r2, r3, #1, #1
 8007aae:	f88d 200a 	strb.w	r2, [sp, #10]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8007ab2:	e895 0006 	ldmia.w	r5, {r1, r2}
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f002 f852 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 8007abc:	b9a0      	cbnz	r0, 8007ae8 <LSM6DSO_ACC_Disable_Pedometer+0x58>
  if (lsm6dso_embedded_sens_get(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007abe:	a901      	add	r1, sp, #4
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f002 facb 	bl	800a05c <lsm6dso_embedded_sens_get>
 8007ac6:	b978      	cbnz	r0, 8007ae8 <LSM6DSO_ACC_Disable_Pedometer+0x58>
  emb_sens.step = PROPERTY_DISABLE;
 8007ac8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (lsm6dso_embedded_sens_set(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007acc:	a901      	add	r1, sp, #4
  emb_sens.step = PROPERTY_DISABLE;
 8007ace:	f360 0382 	bfi	r3, r0, #2, #1
  if (lsm6dso_embedded_sens_set(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007ad2:	4620      	mov	r0, r4
  emb_sens.step = PROPERTY_DISABLE;
 8007ad4:	f88d 3004 	strb.w	r3, [sp, #4]
  if (lsm6dso_embedded_sens_set(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007ad8:	f002 fa4c 	bl	8009f74 <lsm6dso_embedded_sens_set>
 8007adc:	3800      	subs	r0, #0
 8007ade:	bf18      	it	ne
 8007ae0:	2001      	movne	r0, #1
 8007ae2:	4240      	negs	r0, r0
}
 8007ae4:	b005      	add	sp, #20
 8007ae6:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aec:	e7fa      	b.n	8007ae4 <LSM6DSO_ACC_Disable_Pedometer+0x54>
 8007aee:	bf00      	nop

08007af0 <LSM6DSO_ACC_Get_Step_Count>:
{
 8007af0:	b508      	push	{r3, lr}
  if (lsm6dso_number_of_steps_get(&(pObj->Ctx), StepCount) != LSM6DSO_OK)
 8007af2:	301c      	adds	r0, #28
 8007af4:	f000 fe78 	bl	80087e8 <lsm6dso_number_of_steps_get>
 8007af8:	3800      	subs	r0, #0
 8007afa:	bf18      	it	ne
 8007afc:	2001      	movne	r0, #1
}
 8007afe:	4240      	negs	r0, r0
 8007b00:	bd08      	pop	{r3, pc}
 8007b02:	bf00      	nop

08007b04 <LSM6DSO_ACC_Step_Counter_Reset>:
{
 8007b04:	b508      	push	{r3, lr}
  if (lsm6dso_steps_reset(&(pObj->Ctx)) != LSM6DSO_OK)
 8007b06:	301c      	adds	r0, #28
 8007b08:	f000 feaa 	bl	8008860 <lsm6dso_steps_reset>
 8007b0c:	3800      	subs	r0, #0
 8007b0e:	bf18      	it	ne
 8007b10:	2001      	movne	r0, #1
}
 8007b12:	4240      	negs	r0, r0
 8007b14:	bd08      	pop	{r3, pc}
 8007b16:	bf00      	nop

08007b18 <LSM6DSO_ACC_Enable_Tilt_Detection>:
{
 8007b18:	b5f0      	push	{r4, r5, r6, r7, lr}
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8007b1a:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
{
 8007b1e:	b085      	sub	sp, #20
 8007b20:	4604      	mov	r4, r0
 8007b22:	460f      	mov	r7, r1
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8007b24:	f7ff fb38 	bl	8007198 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0>
  if (LSM6DSO_ACC_SetOutputDataRate(pObj, 26.0f) != LSM6DSO_OK)
 8007b28:	bb28      	cbnz	r0, 8007b76 <LSM6DSO_ACC_Enable_Tilt_Detection+0x5e>
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007b2a:	f104 061c 	add.w	r6, r4, #28
 8007b2e:	4601      	mov	r1, r0
 8007b30:	4630      	mov	r0, r6
 8007b32:	f000 fd11 	bl	8008558 <lsm6dso_xl_full_scale_set>
 8007b36:	b9f0      	cbnz	r0, 8007b76 <LSM6DSO_ACC_Enable_Tilt_Detection+0x5e>
  if (lsm6dso_embedded_sens_get(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007b38:	a901      	add	r1, sp, #4
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f002 fa8e 	bl	800a05c <lsm6dso_embedded_sens_get>
 8007b40:	b9c8      	cbnz	r0, 8007b76 <LSM6DSO_ACC_Enable_Tilt_Detection+0x5e>
  if (lsm6dso_embedded_sens_off(&(pObj->Ctx)) != LSM6DSO_OK)
 8007b42:	4630      	mov	r0, r6
 8007b44:	f002 fae8 	bl	800a118 <lsm6dso_embedded_sens_off>
 8007b48:	b9a8      	cbnz	r0, 8007b76 <LSM6DSO_ACC_Enable_Tilt_Detection+0x5e>
  uint32_t tickstart = pObj->IO.GetTick();
 8007b4a:	69a3      	ldr	r3, [r4, #24]
 8007b4c:	4798      	blx	r3
 8007b4e:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < msDelay)
 8007b50:	69a3      	ldr	r3, [r4, #24]
 8007b52:	4798      	blx	r3
 8007b54:	1b43      	subs	r3, r0, r5
 8007b56:	2b09      	cmp	r3, #9
 8007b58:	d9fa      	bls.n	8007b50 <LSM6DSO_ACC_Enable_Tilt_Detection+0x38>
  emb_sens.tilt = PROPERTY_ENABLE;
 8007b5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (lsm6dso_embedded_sens_set(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007b5e:	a901      	add	r1, sp, #4
  emb_sens.tilt = PROPERTY_ENABLE;
 8007b60:	f043 0302 	orr.w	r3, r3, #2
  if (lsm6dso_embedded_sens_set(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007b64:	4630      	mov	r0, r6
  emb_sens.tilt = PROPERTY_ENABLE;
 8007b66:	f88d 3004 	strb.w	r3, [sp, #4]
  if (lsm6dso_embedded_sens_set(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007b6a:	f002 fa03 	bl	8009f74 <lsm6dso_embedded_sens_set>
 8007b6e:	b910      	cbnz	r0, 8007b76 <LSM6DSO_ACC_Enable_Tilt_Detection+0x5e>
  switch (IntPin)
 8007b70:	b1ff      	cbz	r7, 8007bb2 <LSM6DSO_ACC_Enable_Tilt_Detection+0x9a>
 8007b72:	2f01      	cmp	r7, #1
 8007b74:	d003      	beq.n	8007b7e <LSM6DSO_ACC_Enable_Tilt_Detection+0x66>
 8007b76:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007b7a:	b005      	add	sp, #20
 8007b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 8007b7e:	ac02      	add	r4, sp, #8
 8007b80:	4601      	mov	r1, r0
 8007b82:	4622      	mov	r2, r4
 8007b84:	4630      	mov	r0, r6
 8007b86:	f001 febf 	bl	8009908 <lsm6dso_pin_int2_route_get>
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d1f2      	bne.n	8007b76 <LSM6DSO_ACC_Enable_Tilt_Detection+0x5e>
      val2.tilt = PROPERTY_ENABLE;
 8007b90:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8007b94:	f043 0301 	orr.w	r3, r3, #1
 8007b98:	f88d 300a 	strb.w	r3, [sp, #10]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 8007b9c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f001 fca7 	bl	80094f4 <lsm6dso_pin_int2_route_set>
 8007ba6:	3800      	subs	r0, #0
 8007ba8:	bf18      	it	ne
 8007baa:	2001      	movne	r0, #1
 8007bac:	4240      	negs	r0, r0
}
 8007bae:	b005      	add	sp, #20
 8007bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007bb2:	ac02      	add	r4, sp, #8
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f001 fb82 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d1da      	bne.n	8007b76 <LSM6DSO_ACC_Enable_Tilt_Detection+0x5e>
      val1.tilt = PROPERTY_ENABLE;
 8007bc0:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8007bc4:	f043 0304 	orr.w	r3, r3, #4
 8007bc8:	f88d 300a 	strb.w	r3, [sp, #10]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8007bcc:	e894 0006 	ldmia.w	r4, {r1, r2}
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f001 ffc5 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 8007bd6:	3800      	subs	r0, #0
 8007bd8:	bf18      	it	ne
 8007bda:	2001      	movne	r0, #1
 8007bdc:	4240      	negs	r0, r0
}
 8007bde:	b005      	add	sp, #20
 8007be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007be2:	bf00      	nop

08007be4 <LSM6DSO_ACC_Disable_Tilt_Detection>:
{
 8007be4:	b530      	push	{r4, r5, lr}
 8007be6:	b087      	sub	sp, #28
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007be8:	f100 041c 	add.w	r4, r0, #28
 8007bec:	ad02      	add	r5, sp, #8
 8007bee:	4629      	mov	r1, r5
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f001 fb65 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 8007bf6:	bba8      	cbnz	r0, 8007c64 <LSM6DSO_ACC_Disable_Tilt_Detection+0x80>
  val1.tilt = PROPERTY_DISABLE;
 8007bf8:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	f363 0282 	bfi	r2, r3, #2, #1
 8007c02:	f88d 200a 	strb.w	r2, [sp, #10]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8007c06:	e895 0006 	ldmia.w	r5, {r1, r2}
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f001 ffa8 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 8007c10:	4601      	mov	r1, r0
 8007c12:	bb38      	cbnz	r0, 8007c64 <LSM6DSO_ACC_Disable_Tilt_Detection+0x80>
  if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 8007c14:	ad04      	add	r5, sp, #16
 8007c16:	462a      	mov	r2, r5
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f001 fe75 	bl	8009908 <lsm6dso_pin_int2_route_get>
 8007c1e:	bb08      	cbnz	r0, 8007c64 <LSM6DSO_ACC_Disable_Tilt_Detection+0x80>
  val2.tilt = PROPERTY_DISABLE;
 8007c20:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8007c24:	f360 0300 	bfi	r3, r0, #0, #1
 8007c28:	f88d 3012 	strb.w	r3, [sp, #18]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 8007c2c:	4601      	mov	r1, r0
 8007c2e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8007c32:	4620      	mov	r0, r4
 8007c34:	f001 fc5e 	bl	80094f4 <lsm6dso_pin_int2_route_set>
 8007c38:	b9a0      	cbnz	r0, 8007c64 <LSM6DSO_ACC_Disable_Tilt_Detection+0x80>
  if (lsm6dso_embedded_sens_get(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007c3a:	a901      	add	r1, sp, #4
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f002 fa0d 	bl	800a05c <lsm6dso_embedded_sens_get>
 8007c42:	b978      	cbnz	r0, 8007c64 <LSM6DSO_ACC_Disable_Tilt_Detection+0x80>
  emb_sens.tilt = PROPERTY_DISABLE;
 8007c44:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (lsm6dso_embedded_sens_set(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007c48:	a901      	add	r1, sp, #4
  emb_sens.tilt = PROPERTY_DISABLE;
 8007c4a:	f360 0341 	bfi	r3, r0, #1, #1
  if (lsm6dso_embedded_sens_set(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007c4e:	4620      	mov	r0, r4
  emb_sens.tilt = PROPERTY_DISABLE;
 8007c50:	f88d 3004 	strb.w	r3, [sp, #4]
  if (lsm6dso_embedded_sens_set(&(pObj->Ctx), &emb_sens) != LSM6DSO_OK)
 8007c54:	f002 f98e 	bl	8009f74 <lsm6dso_embedded_sens_set>
 8007c58:	3800      	subs	r0, #0
 8007c5a:	bf18      	it	ne
 8007c5c:	2001      	movne	r0, #1
 8007c5e:	4240      	negs	r0, r0
}
 8007c60:	b007      	add	sp, #28
 8007c62:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007c68:	b007      	add	sp, #28
 8007c6a:	bd30      	pop	{r4, r5, pc}

08007c6c <LSM6DSO_ACC_Enable_Wake_Up_Detection>:
{
 8007c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007c6e:	f100 041c 	add.w	r4, r0, #28
{
 8007c72:	b085      	sub	sp, #20
 8007c74:	4605      	mov	r5, r0
 8007c76:	460e      	mov	r6, r1
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007c78:	2301      	movs	r3, #1
 8007c7a:	aa01      	add	r2, sp, #4
 8007c7c:	2114      	movs	r1, #20
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 fc5a 	bl	8008538 <lsm6dso_read_reg>
 8007c84:	bbc8      	cbnz	r0, 8007cfa <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x8e>
      if (val1.xl_ulp_en != 0U)
 8007c86:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	da10      	bge.n	8007cb0 <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x44>
        if (pObj->acc_is_enabled == 1U)
 8007c8e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d079      	beq.n	8007d8a <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x11e>
        val1.xl_ulp_en = 0;
 8007c96:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007c9a:	f36f 13c7 	bfc	r3, #7, #1
 8007c9e:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007ca2:	aa01      	add	r2, sp, #4
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	2114      	movs	r1, #20
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f000 fc4d 	bl	8008548 <lsm6dso_write_reg>
 8007cae:	bb20      	cbnz	r0, 8007cfa <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x8e>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007cb0:	af02      	add	r7, sp, #8
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	463a      	mov	r2, r7
 8007cb6:	2115      	movs	r1, #21
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 fc3d 	bl	8008538 <lsm6dso_read_reg>
 8007cbe:	b9e0      	cbnz	r0, 8007cfa <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x8e>
      if (val2.xl_hm_mode != 0U)
 8007cc0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007cc4:	06da      	lsls	r2, r3, #27
 8007cc6:	d43c      	bmi.n	8007d42 <LSM6DSO_ACC_Enable_Wake_Up_Detection+0xd6>
  if (pObj->acc_is_enabled == 1U)
 8007cc8:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d031      	beq.n	8007d34 <LSM6DSO_ACC_Enable_Wake_Up_Detection+0xc8>
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007cd0:	2306      	movs	r3, #6
 8007cd2:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f000 fc3d 	bl	8008558 <lsm6dso_xl_full_scale_set>
 8007cde:	4601      	mov	r1, r0
 8007ce0:	b958      	cbnz	r0, 8007cfa <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x8e>
  if (lsm6dso_wkup_dur_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f000 ff8c 	bl	8008c00 <lsm6dso_wkup_dur_set>
 8007ce8:	b938      	cbnz	r0, 8007cfa <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x8e>
  if (lsm6dso_wkup_threshold_set(&(pObj->Ctx), 0x02) != LSM6DSO_OK)
 8007cea:	2102      	movs	r1, #2
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 ff6d 	bl	8008bcc <lsm6dso_wkup_threshold_set>
 8007cf2:	b910      	cbnz	r0, 8007cfa <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x8e>
  switch (IntPin)
 8007cf4:	b396      	cbz	r6, 8007d5c <LSM6DSO_ACC_Enable_Wake_Up_Detection+0xf0>
 8007cf6:	2e01      	cmp	r6, #1
 8007cf8:	d003      	beq.n	8007d02 <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x96>
 8007cfa:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007cfe:	b005      	add	sp, #20
 8007d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 8007d02:	4601      	mov	r1, r0
 8007d04:	463a      	mov	r2, r7
 8007d06:	4620      	mov	r0, r4
 8007d08:	f001 fdfe 	bl	8009908 <lsm6dso_pin_int2_route_get>
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d1f3      	bne.n	8007cfa <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x8e>
      val2.wake_up = PROPERTY_ENABLE;
 8007d12:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8007d16:	f043 0310 	orr.w	r3, r3, #16
 8007d1a:	f88d 3009 	strb.w	r3, [sp, #9]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 8007d1e:	e897 000c 	ldmia.w	r7, {r2, r3}
 8007d22:	4620      	mov	r0, r4
 8007d24:	f001 fbe6 	bl	80094f4 <lsm6dso_pin_int2_route_set>
 8007d28:	3800      	subs	r0, #0
 8007d2a:	bf18      	it	ne
 8007d2c:	2001      	movne	r0, #1
 8007d2e:	4240      	negs	r0, r0
}
 8007d30:	b005      	add	sp, #20
 8007d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007d34:	2106      	movs	r1, #6
 8007d36:	4620      	mov	r0, r4
 8007d38:	f001 f982 	bl	8009040 <lsm6dso_xl_data_rate_set>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d0ca      	beq.n	8007cd6 <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x6a>
 8007d40:	e7db      	b.n	8007cfa <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x8e>
        val2.xl_hm_mode = 0U;
 8007d42:	f360 1304 	bfi	r3, r0, #4, #1
 8007d46:	f88d 3008 	strb.w	r3, [sp, #8]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8007d4a:	463a      	mov	r2, r7
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	2115      	movs	r1, #21
 8007d50:	4620      	mov	r0, r4
 8007d52:	f000 fbf9 	bl	8008548 <lsm6dso_write_reg>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d0b6      	beq.n	8007cc8 <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x5c>
 8007d5a:	e7ce      	b.n	8007cfa <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x8e>
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007d5c:	4639      	mov	r1, r7
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f001 faae 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d1c8      	bne.n	8007cfa <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x8e>
      val1.wake_up = PROPERTY_ENABLE;
 8007d68:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8007d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d70:	f88d 3009 	strb.w	r3, [sp, #9]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8007d74:	e897 0006 	ldmia.w	r7, {r1, r2}
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f001 fef1 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 8007d7e:	3800      	subs	r0, #0
 8007d80:	bf18      	it	ne
 8007d82:	2001      	movne	r0, #1
 8007d84:	4240      	negs	r0, r0
}
 8007d86:	b005      	add	sp, #20
 8007d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f001 f957 	bl	8009040 <lsm6dso_xl_data_rate_set>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f43f af7f 	beq.w	8007c96 <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x2a>
 8007d98:	e7af      	b.n	8007cfa <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x8e>
 8007d9a:	bf00      	nop

08007d9c <LSM6DSO_ACC_Disable_Wake_Up_Detection>:
{
 8007d9c:	b530      	push	{r4, r5, lr}
 8007d9e:	b085      	sub	sp, #20
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007da0:	f100 041c 	add.w	r4, r0, #28
 8007da4:	466d      	mov	r5, sp
 8007da6:	4629      	mov	r1, r5
 8007da8:	4620      	mov	r0, r4
 8007daa:	f001 fa89 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 8007dae:	bb78      	cbnz	r0, 8007e10 <LSM6DSO_ACC_Disable_Wake_Up_Detection+0x74>
  val1.wake_up = PROPERTY_DISABLE;
 8007db0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8007db4:	4603      	mov	r3, r0
 8007db6:	f363 1286 	bfi	r2, r3, #6, #1
 8007dba:	f88d 2001 	strb.w	r2, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8007dbe:	e895 0006 	ldmia.w	r5, {r1, r2}
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f001 fecc 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 8007dc8:	4601      	mov	r1, r0
 8007dca:	bb08      	cbnz	r0, 8007e10 <LSM6DSO_ACC_Disable_Wake_Up_Detection+0x74>
  if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 8007dcc:	ad02      	add	r5, sp, #8
 8007dce:	462a      	mov	r2, r5
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f001 fd99 	bl	8009908 <lsm6dso_pin_int2_route_get>
 8007dd6:	b9d8      	cbnz	r0, 8007e10 <LSM6DSO_ACC_Disable_Wake_Up_Detection+0x74>
  val2.wake_up = PROPERTY_DISABLE;
 8007dd8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8007ddc:	f360 1304 	bfi	r3, r0, #4, #1
 8007de0:	f88d 3009 	strb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 8007de4:	4601      	mov	r1, r0
 8007de6:	e895 000c 	ldmia.w	r5, {r2, r3}
 8007dea:	4620      	mov	r0, r4
 8007dec:	f001 fb82 	bl	80094f4 <lsm6dso_pin_int2_route_set>
 8007df0:	4601      	mov	r1, r0
 8007df2:	b968      	cbnz	r0, 8007e10 <LSM6DSO_ACC_Disable_Wake_Up_Detection+0x74>
  if (lsm6dso_wkup_threshold_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007df4:	4620      	mov	r0, r4
 8007df6:	f000 fee9 	bl	8008bcc <lsm6dso_wkup_threshold_set>
 8007dfa:	4601      	mov	r1, r0
 8007dfc:	b940      	cbnz	r0, 8007e10 <LSM6DSO_ACC_Disable_Wake_Up_Detection+0x74>
  if (lsm6dso_wkup_dur_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 fefe 	bl	8008c00 <lsm6dso_wkup_dur_set>
 8007e04:	3800      	subs	r0, #0
 8007e06:	bf18      	it	ne
 8007e08:	2001      	movne	r0, #1
 8007e0a:	4240      	negs	r0, r0
}
 8007e0c:	b005      	add	sp, #20
 8007e0e:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 8007e10:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007e14:	b005      	add	sp, #20
 8007e16:	bd30      	pop	{r4, r5, pc}

08007e18 <LSM6DSO_ACC_Enable_Single_Tap_Detection>:
{
 8007e18:	b530      	push	{r4, r5, lr}
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8007e1a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8007ee4 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0xcc>
{
 8007e1e:	b083      	sub	sp, #12
 8007e20:	4604      	mov	r4, r0
 8007e22:	460d      	mov	r5, r1
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8007e24:	f7ff f9b8 	bl	8007198 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0>
  if (LSM6DSO_ACC_SetOutputDataRate(pObj, 417.0f) != LSM6DSO_OK)
 8007e28:	bb30      	cbnz	r0, 8007e78 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x60>
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007e2a:	341c      	adds	r4, #28
 8007e2c:	4601      	mov	r1, r0
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 fb92 	bl	8008558 <lsm6dso_xl_full_scale_set>
 8007e34:	bb00      	cbnz	r0, 8007e78 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x60>
  if (lsm6dso_tap_detection_on_x_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007e36:	2101      	movs	r1, #1
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 ff49 	bl	8008cd0 <lsm6dso_tap_detection_on_x_set>
 8007e3e:	b9d8      	cbnz	r0, 8007e78 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x60>
  if (lsm6dso_tap_detection_on_y_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007e40:	2101      	movs	r1, #1
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 ff2a 	bl	8008c9c <lsm6dso_tap_detection_on_y_set>
 8007e48:	b9b0      	cbnz	r0, 8007e78 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x60>
  if (lsm6dso_tap_detection_on_z_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 ff0b 	bl	8008c68 <lsm6dso_tap_detection_on_z_set>
 8007e52:	b988      	cbnz	r0, 8007e78 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x60>
  if (lsm6dso_tap_threshold_x_set(&(pObj->Ctx), 0x08) != LSM6DSO_OK)
 8007e54:	2108      	movs	r1, #8
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 ff54 	bl	8008d04 <lsm6dso_tap_threshold_x_set>
 8007e5c:	b960      	cbnz	r0, 8007e78 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x60>
  if (lsm6dso_tap_shock_set(&(pObj->Ctx), 0x02) != LSM6DSO_OK)
 8007e5e:	2102      	movs	r1, #2
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 ff69 	bl	8008d38 <lsm6dso_tap_shock_set>
 8007e66:	b938      	cbnz	r0, 8007e78 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x60>
  if (lsm6dso_tap_quiet_set(&(pObj->Ctx), 0x01) != LSM6DSO_OK)
 8007e68:	2101      	movs	r1, #1
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 ff7e 	bl	8008d6c <lsm6dso_tap_quiet_set>
 8007e70:	b910      	cbnz	r0, 8007e78 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x60>
  switch (IntPin)
 8007e72:	b1fd      	cbz	r5, 8007eb4 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x9c>
 8007e74:	2d01      	cmp	r5, #1
 8007e76:	d003      	beq.n	8007e80 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x68>
 8007e78:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007e7c:	b003      	add	sp, #12
 8007e7e:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 8007e80:	466d      	mov	r5, sp
 8007e82:	2100      	movs	r1, #0
 8007e84:	462a      	mov	r2, r5
 8007e86:	4620      	mov	r0, r4
 8007e88:	f001 fd3e 	bl	8009908 <lsm6dso_pin_int2_route_get>
 8007e8c:	4601      	mov	r1, r0
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d1f2      	bne.n	8007e78 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x60>
      val2.single_tap = PROPERTY_ENABLE;
 8007e92:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8007e96:	f043 0320 	orr.w	r3, r3, #32
 8007e9a:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 8007e9e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f001 fb26 	bl	80094f4 <lsm6dso_pin_int2_route_set>
 8007ea8:	3800      	subs	r0, #0
 8007eaa:	bf18      	it	ne
 8007eac:	2001      	movne	r0, #1
 8007eae:	4240      	negs	r0, r0
}
 8007eb0:	b003      	add	sp, #12
 8007eb2:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007eb4:	466d      	mov	r5, sp
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f001 fa01 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d1da      	bne.n	8007e78 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x60>
      val1.single_tap = PROPERTY_ENABLE;
 8007ec2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8007ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eca:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8007ece:	e895 0006 	ldmia.w	r5, {r1, r2}
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f001 fe44 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 8007ed8:	3800      	subs	r0, #0
 8007eda:	bf18      	it	ne
 8007edc:	2001      	movne	r0, #1
 8007ede:	4240      	negs	r0, r0
}
 8007ee0:	b003      	add	sp, #12
 8007ee2:	bd30      	pop	{r4, r5, pc}
 8007ee4:	43d08000 	.word	0x43d08000

08007ee8 <LSM6DSO_ACC_Disable_Single_Tap_Detection>:
{
 8007ee8:	b530      	push	{r4, r5, lr}
 8007eea:	b085      	sub	sp, #20
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007eec:	f100 041c 	add.w	r4, r0, #28
 8007ef0:	466d      	mov	r5, sp
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f001 f9e3 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d143      	bne.n	8007f86 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x9e>
  val1.single_tap = PROPERTY_DISABLE;
 8007efe:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8007f02:	4603      	mov	r3, r0
 8007f04:	f363 12c7 	bfi	r2, r3, #7, #1
 8007f08:	f88d 2001 	strb.w	r2, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8007f0c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8007f10:	4620      	mov	r0, r4
 8007f12:	f001 fe25 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 8007f16:	4601      	mov	r1, r0
 8007f18:	bba8      	cbnz	r0, 8007f86 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x9e>
  if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 8007f1a:	ad02      	add	r5, sp, #8
 8007f1c:	462a      	mov	r2, r5
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f001 fcf2 	bl	8009908 <lsm6dso_pin_int2_route_get>
 8007f24:	bb78      	cbnz	r0, 8007f86 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x9e>
  val2.single_tap = PROPERTY_DISABLE;
 8007f26:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8007f2a:	f360 1345 	bfi	r3, r0, #5, #1
 8007f2e:	f88d 3009 	strb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 8007f32:	4601      	mov	r1, r0
 8007f34:	e895 000c 	ldmia.w	r5, {r2, r3}
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f001 fadb 	bl	80094f4 <lsm6dso_pin_int2_route_set>
 8007f3e:	4601      	mov	r1, r0
 8007f40:	bb08      	cbnz	r0, 8007f86 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x9e>
  if (lsm6dso_tap_quiet_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 ff12 	bl	8008d6c <lsm6dso_tap_quiet_set>
 8007f48:	4601      	mov	r1, r0
 8007f4a:	b9e0      	cbnz	r0, 8007f86 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x9e>
  if (lsm6dso_tap_shock_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f000 fef3 	bl	8008d38 <lsm6dso_tap_shock_set>
 8007f52:	4601      	mov	r1, r0
 8007f54:	b9b8      	cbnz	r0, 8007f86 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x9e>
  if (lsm6dso_tap_threshold_x_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007f56:	4620      	mov	r0, r4
 8007f58:	f000 fed4 	bl	8008d04 <lsm6dso_tap_threshold_x_set>
 8007f5c:	4601      	mov	r1, r0
 8007f5e:	b990      	cbnz	r0, 8007f86 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x9e>
  if (lsm6dso_tap_detection_on_z_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSO_OK)
 8007f60:	4620      	mov	r0, r4
 8007f62:	f000 fe81 	bl	8008c68 <lsm6dso_tap_detection_on_z_set>
 8007f66:	4601      	mov	r1, r0
 8007f68:	b968      	cbnz	r0, 8007f86 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x9e>
  if (lsm6dso_tap_detection_on_y_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSO_OK)
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 fe96 	bl	8008c9c <lsm6dso_tap_detection_on_y_set>
 8007f70:	4601      	mov	r1, r0
 8007f72:	b940      	cbnz	r0, 8007f86 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x9e>
  if (lsm6dso_tap_detection_on_x_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSO_OK)
 8007f74:	4620      	mov	r0, r4
 8007f76:	f000 feab 	bl	8008cd0 <lsm6dso_tap_detection_on_x_set>
 8007f7a:	3800      	subs	r0, #0
 8007f7c:	bf18      	it	ne
 8007f7e:	2001      	movne	r0, #1
 8007f80:	4240      	negs	r0, r0
}
 8007f82:	b005      	add	sp, #20
 8007f84:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 8007f86:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007f8a:	b005      	add	sp, #20
 8007f8c:	bd30      	pop	{r4, r5, pc}
 8007f8e:	bf00      	nop

08007f90 <LSM6DSO_ACC_Enable_Double_Tap_Detection>:
{
 8007f90:	b530      	push	{r4, r5, lr}
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8007f92:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8008070 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xe0>
{
 8007f96:	b083      	sub	sp, #12
 8007f98:	4604      	mov	r4, r0
 8007f9a:	460d      	mov	r5, r1
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8007f9c:	f7ff f8fc 	bl	8007198 <LSM6DSO_ACC_SetOutputDataRate_With_Mode.constprop.0>
  if (LSM6DSO_ACC_SetOutputDataRate(pObj, 417.0f) != LSM6DSO_OK)
 8007fa0:	bb80      	cbnz	r0, 8008004 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x74>
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007fa2:	341c      	adds	r4, #28
 8007fa4:	4601      	mov	r1, r0
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f000 fad6 	bl	8008558 <lsm6dso_xl_full_scale_set>
 8007fac:	bb50      	cbnz	r0, 8008004 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x74>
  if (lsm6dso_tap_detection_on_x_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007fae:	2101      	movs	r1, #1
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 fe8d 	bl	8008cd0 <lsm6dso_tap_detection_on_x_set>
 8007fb6:	bb28      	cbnz	r0, 8008004 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x74>
  if (lsm6dso_tap_detection_on_y_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007fb8:	2101      	movs	r1, #1
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fe6e 	bl	8008c9c <lsm6dso_tap_detection_on_y_set>
 8007fc0:	bb00      	cbnz	r0, 8008004 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x74>
  if (lsm6dso_tap_detection_on_z_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f000 fe4f 	bl	8008c68 <lsm6dso_tap_detection_on_z_set>
 8007fca:	b9d8      	cbnz	r0, 8008004 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x74>
  if (lsm6dso_tap_threshold_x_set(&(pObj->Ctx), 0x08) != LSM6DSO_OK)
 8007fcc:	2108      	movs	r1, #8
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 fe98 	bl	8008d04 <lsm6dso_tap_threshold_x_set>
 8007fd4:	b9b0      	cbnz	r0, 8008004 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x74>
  if (lsm6dso_tap_shock_set(&(pObj->Ctx), 0x03) != LSM6DSO_OK)
 8007fd6:	2103      	movs	r1, #3
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 fead 	bl	8008d38 <lsm6dso_tap_shock_set>
 8007fde:	b988      	cbnz	r0, 8008004 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x74>
  if (lsm6dso_tap_quiet_set(&(pObj->Ctx), 0x03) != LSM6DSO_OK)
 8007fe0:	2103      	movs	r1, #3
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f000 fec2 	bl	8008d6c <lsm6dso_tap_quiet_set>
 8007fe8:	b960      	cbnz	r0, 8008004 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x74>
  if (lsm6dso_tap_dur_set(&(pObj->Ctx), 0x08) != LSM6DSO_OK)
 8007fea:	2108      	movs	r1, #8
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 fed7 	bl	8008da0 <lsm6dso_tap_dur_set>
 8007ff2:	b938      	cbnz	r0, 8008004 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x74>
  if (lsm6dso_tap_mode_set(&(pObj->Ctx), LSM6DSO_BOTH_SINGLE_DOUBLE) != LSM6DSO_OK)
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 feec 	bl	8008dd4 <lsm6dso_tap_mode_set>
 8007ffc:	b910      	cbnz	r0, 8008004 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x74>
  switch (IntPin)
 8007ffe:	b1fd      	cbz	r5, 8008040 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xb0>
 8008000:	2d01      	cmp	r5, #1
 8008002:	d003      	beq.n	800800c <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x7c>
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008008:	b003      	add	sp, #12
 800800a:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 800800c:	466d      	mov	r5, sp
 800800e:	2100      	movs	r1, #0
 8008010:	462a      	mov	r2, r5
 8008012:	4620      	mov	r0, r4
 8008014:	f001 fc78 	bl	8009908 <lsm6dso_pin_int2_route_get>
 8008018:	4601      	mov	r1, r0
 800801a:	2800      	cmp	r0, #0
 800801c:	d1f2      	bne.n	8008004 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x74>
      val2.double_tap = PROPERTY_ENABLE;
 800801e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8008022:	f043 0304 	orr.w	r3, r3, #4
 8008026:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 800802a:	e895 000c 	ldmia.w	r5, {r2, r3}
 800802e:	4620      	mov	r0, r4
 8008030:	f001 fa60 	bl	80094f4 <lsm6dso_pin_int2_route_set>
 8008034:	3800      	subs	r0, #0
 8008036:	bf18      	it	ne
 8008038:	2001      	movne	r0, #1
 800803a:	4240      	negs	r0, r0
}
 800803c:	b003      	add	sp, #12
 800803e:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8008040:	466d      	mov	r5, sp
 8008042:	4629      	mov	r1, r5
 8008044:	4620      	mov	r0, r4
 8008046:	f001 f93b 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 800804a:	2800      	cmp	r0, #0
 800804c:	d1da      	bne.n	8008004 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x74>
      val1.double_tap = PROPERTY_ENABLE;
 800804e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8008052:	f043 0310 	orr.w	r3, r3, #16
 8008056:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 800805a:	e895 0006 	ldmia.w	r5, {r1, r2}
 800805e:	4620      	mov	r0, r4
 8008060:	f001 fd7e 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 8008064:	3800      	subs	r0, #0
 8008066:	bf18      	it	ne
 8008068:	2001      	movne	r0, #1
 800806a:	4240      	negs	r0, r0
}
 800806c:	b003      	add	sp, #12
 800806e:	bd30      	pop	{r4, r5, pc}
 8008070:	43d08000 	.word	0x43d08000

08008074 <LSM6DSO_ACC_Disable_Double_Tap_Detection>:
{
 8008074:	b530      	push	{r4, r5, lr}
 8008076:	b085      	sub	sp, #20
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8008078:	f100 041c 	add.w	r4, r0, #28
 800807c:	466d      	mov	r5, sp
 800807e:	4629      	mov	r1, r5
 8008080:	4620      	mov	r0, r4
 8008082:	f001 f91d 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 8008086:	2800      	cmp	r0, #0
 8008088:	d14e      	bne.n	8008128 <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xb4>
  val1.double_tap = PROPERTY_DISABLE;
 800808a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800808e:	4603      	mov	r3, r0
 8008090:	f363 1204 	bfi	r2, r3, #4, #1
 8008094:	f88d 2001 	strb.w	r2, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8008098:	e895 0006 	ldmia.w	r5, {r1, r2}
 800809c:	4620      	mov	r0, r4
 800809e:	f001 fd5f 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 80080a2:	4601      	mov	r1, r0
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d13f      	bne.n	8008128 <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xb4>
  if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 80080a8:	ad02      	add	r5, sp, #8
 80080aa:	462a      	mov	r2, r5
 80080ac:	4620      	mov	r0, r4
 80080ae:	f001 fc2b 	bl	8009908 <lsm6dso_pin_int2_route_get>
 80080b2:	bbc8      	cbnz	r0, 8008128 <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xb4>
  val2.double_tap = PROPERTY_DISABLE;
 80080b4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80080b8:	f360 0382 	bfi	r3, r0, #2, #1
 80080bc:	f88d 3009 	strb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 80080c0:	4601      	mov	r1, r0
 80080c2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80080c6:	4620      	mov	r0, r4
 80080c8:	f001 fa14 	bl	80094f4 <lsm6dso_pin_int2_route_set>
 80080cc:	4601      	mov	r1, r0
 80080ce:	bb58      	cbnz	r0, 8008128 <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_mode_set(&(pObj->Ctx), LSM6DSO_ONLY_SINGLE) != LSM6DSO_OK)
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 fe7f 	bl	8008dd4 <lsm6dso_tap_mode_set>
 80080d6:	4601      	mov	r1, r0
 80080d8:	bb30      	cbnz	r0, 8008128 <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_dur_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fe60 	bl	8008da0 <lsm6dso_tap_dur_set>
 80080e0:	4601      	mov	r1, r0
 80080e2:	bb08      	cbnz	r0, 8008128 <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_quiet_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 fe41 	bl	8008d6c <lsm6dso_tap_quiet_set>
 80080ea:	4601      	mov	r1, r0
 80080ec:	b9e0      	cbnz	r0, 8008128 <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_shock_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 fe22 	bl	8008d38 <lsm6dso_tap_shock_set>
 80080f4:	4601      	mov	r1, r0
 80080f6:	b9b8      	cbnz	r0, 8008128 <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_threshold_x_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 fe03 	bl	8008d04 <lsm6dso_tap_threshold_x_set>
 80080fe:	4601      	mov	r1, r0
 8008100:	b990      	cbnz	r0, 8008128 <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_detection_on_z_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSO_OK)
 8008102:	4620      	mov	r0, r4
 8008104:	f000 fdb0 	bl	8008c68 <lsm6dso_tap_detection_on_z_set>
 8008108:	b970      	cbnz	r0, 8008128 <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_detection_on_y_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSO_OK)
 800810a:	2100      	movs	r1, #0
 800810c:	4620      	mov	r0, r4
 800810e:	f000 fdc5 	bl	8008c9c <lsm6dso_tap_detection_on_y_set>
 8008112:	4601      	mov	r1, r0
 8008114:	b940      	cbnz	r0, 8008128 <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_detection_on_x_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSO_OK)
 8008116:	4620      	mov	r0, r4
 8008118:	f000 fdda 	bl	8008cd0 <lsm6dso_tap_detection_on_x_set>
 800811c:	3800      	subs	r0, #0
 800811e:	bf18      	it	ne
 8008120:	2001      	movne	r0, #1
 8008122:	4240      	negs	r0, r0
}
 8008124:	b005      	add	sp, #20
 8008126:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 8008128:	f04f 30ff 	mov.w	r0, #4294967295
}
 800812c:	b005      	add	sp, #20
 800812e:	bd30      	pop	{r4, r5, pc}

08008130 <LSM6DSO_ACC_Set_Tap_Threshold>:
{
 8008130:	b508      	push	{r3, lr}
  if (lsm6dso_tap_threshold_x_set(&(pObj->Ctx), Threshold) != LSM6DSO_OK)
 8008132:	301c      	adds	r0, #28
 8008134:	f000 fde6 	bl	8008d04 <lsm6dso_tap_threshold_x_set>
 8008138:	3800      	subs	r0, #0
 800813a:	bf18      	it	ne
 800813c:	2001      	movne	r0, #1
}
 800813e:	4240      	negs	r0, r0
 8008140:	bd08      	pop	{r3, pc}
 8008142:	bf00      	nop

08008144 <LSM6DSO_ACC_Enable_6D_Orientation>:
{
 8008144:	b5f0      	push	{r4, r5, r6, r7, lr}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008146:	f100 041c 	add.w	r4, r0, #28
{
 800814a:	b085      	sub	sp, #20
 800814c:	4605      	mov	r5, r0
 800814e:	460e      	mov	r6, r1
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008150:	2301      	movs	r3, #1
 8008152:	aa01      	add	r2, sp, #4
 8008154:	2114      	movs	r1, #20
 8008156:	4620      	mov	r0, r4
 8008158:	f000 f9ee 	bl	8008538 <lsm6dso_read_reg>
 800815c:	bba0      	cbnz	r0, 80081c8 <LSM6DSO_ACC_Enable_6D_Orientation+0x84>
      if (val1.xl_ulp_en != 0U)
 800815e:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	da10      	bge.n	8008188 <LSM6DSO_ACC_Enable_6D_Orientation+0x44>
        if (pObj->acc_is_enabled == 1U)
 8008166:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800816a:	2b01      	cmp	r3, #1
 800816c:	d074      	beq.n	8008258 <LSM6DSO_ACC_Enable_6D_Orientation+0x114>
        val1.xl_ulp_en = 0;
 800816e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008172:	f36f 13c7 	bfc	r3, #7, #1
 8008176:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800817a:	aa01      	add	r2, sp, #4
 800817c:	2301      	movs	r3, #1
 800817e:	2114      	movs	r1, #20
 8008180:	4620      	mov	r0, r4
 8008182:	f000 f9e1 	bl	8008548 <lsm6dso_write_reg>
 8008186:	b9f8      	cbnz	r0, 80081c8 <LSM6DSO_ACC_Enable_6D_Orientation+0x84>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8008188:	af02      	add	r7, sp, #8
 800818a:	2301      	movs	r3, #1
 800818c:	463a      	mov	r2, r7
 800818e:	2115      	movs	r1, #21
 8008190:	4620      	mov	r0, r4
 8008192:	f000 f9d1 	bl	8008538 <lsm6dso_read_reg>
 8008196:	b9b8      	cbnz	r0, 80081c8 <LSM6DSO_ACC_Enable_6D_Orientation+0x84>
      if (val2.xl_hm_mode != 0U)
 8008198:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800819c:	06da      	lsls	r2, r3, #27
 800819e:	d437      	bmi.n	8008210 <LSM6DSO_ACC_Enable_6D_Orientation+0xcc>
  if (pObj->acc_is_enabled == 1U)
 80081a0:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d02c      	beq.n	8008202 <LSM6DSO_ACC_Enable_6D_Orientation+0xbe>
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80081a8:	2306      	movs	r3, #6
 80081aa:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80081ae:	2100      	movs	r1, #0
 80081b0:	4620      	mov	r0, r4
 80081b2:	f000 f9d1 	bl	8008558 <lsm6dso_xl_full_scale_set>
 80081b6:	b938      	cbnz	r0, 80081c8 <LSM6DSO_ACC_Enable_6D_Orientation+0x84>
  if (lsm6dso_6d_threshold_set(&(pObj->Ctx), LSM6DSO_DEG_60) != LSM6DSO_OK)
 80081b8:	2102      	movs	r1, #2
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 fe24 	bl	8008e08 <lsm6dso_6d_threshold_set>
 80081c0:	b910      	cbnz	r0, 80081c8 <LSM6DSO_ACC_Enable_6D_Orientation+0x84>
  switch (IntPin)
 80081c2:	b396      	cbz	r6, 800822a <LSM6DSO_ACC_Enable_6D_Orientation+0xe6>
 80081c4:	2e01      	cmp	r6, #1
 80081c6:	d003      	beq.n	80081d0 <LSM6DSO_ACC_Enable_6D_Orientation+0x8c>
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80081cc:	b005      	add	sp, #20
 80081ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 80081d0:	4601      	mov	r1, r0
 80081d2:	463a      	mov	r2, r7
 80081d4:	4620      	mov	r0, r4
 80081d6:	f001 fb97 	bl	8009908 <lsm6dso_pin_int2_route_get>
 80081da:	4601      	mov	r1, r0
 80081dc:	2800      	cmp	r0, #0
 80081de:	d1f3      	bne.n	80081c8 <LSM6DSO_ACC_Enable_6D_Orientation+0x84>
      val2.six_d = PROPERTY_ENABLE;
 80081e0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80081e4:	f043 0302 	orr.w	r3, r3, #2
 80081e8:	f88d 3009 	strb.w	r3, [sp, #9]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 80081ec:	e897 000c 	ldmia.w	r7, {r2, r3}
 80081f0:	4620      	mov	r0, r4
 80081f2:	f001 f97f 	bl	80094f4 <lsm6dso_pin_int2_route_set>
 80081f6:	3800      	subs	r0, #0
 80081f8:	bf18      	it	ne
 80081fa:	2001      	movne	r0, #1
 80081fc:	4240      	negs	r0, r0
}
 80081fe:	b005      	add	sp, #20
 8008200:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8008202:	2106      	movs	r1, #6
 8008204:	4620      	mov	r0, r4
 8008206:	f000 ff1b 	bl	8009040 <lsm6dso_xl_data_rate_set>
 800820a:	2800      	cmp	r0, #0
 800820c:	d0cf      	beq.n	80081ae <LSM6DSO_ACC_Enable_6D_Orientation+0x6a>
 800820e:	e7db      	b.n	80081c8 <LSM6DSO_ACC_Enable_6D_Orientation+0x84>
        val2.xl_hm_mode = 0U;
 8008210:	f360 1304 	bfi	r3, r0, #4, #1
 8008214:	f88d 3008 	strb.w	r3, [sp, #8]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8008218:	463a      	mov	r2, r7
 800821a:	2301      	movs	r3, #1
 800821c:	2115      	movs	r1, #21
 800821e:	4620      	mov	r0, r4
 8008220:	f000 f992 	bl	8008548 <lsm6dso_write_reg>
 8008224:	2800      	cmp	r0, #0
 8008226:	d0bb      	beq.n	80081a0 <LSM6DSO_ACC_Enable_6D_Orientation+0x5c>
 8008228:	e7ce      	b.n	80081c8 <LSM6DSO_ACC_Enable_6D_Orientation+0x84>
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 800822a:	4639      	mov	r1, r7
 800822c:	4620      	mov	r0, r4
 800822e:	f001 f847 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 8008232:	2800      	cmp	r0, #0
 8008234:	d1c8      	bne.n	80081c8 <LSM6DSO_ACC_Enable_6D_Orientation+0x84>
      val1.six_d = PROPERTY_ENABLE;
 8008236:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800823a:	f043 0308 	orr.w	r3, r3, #8
 800823e:	f88d 3009 	strb.w	r3, [sp, #9]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 8008242:	e897 0006 	ldmia.w	r7, {r1, r2}
 8008246:	4620      	mov	r0, r4
 8008248:	f001 fc8a 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 800824c:	3800      	subs	r0, #0
 800824e:	bf18      	it	ne
 8008250:	2001      	movne	r0, #1
 8008252:	4240      	negs	r0, r0
}
 8008254:	b005      	add	sp, #20
 8008256:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8008258:	4601      	mov	r1, r0
 800825a:	4620      	mov	r0, r4
 800825c:	f000 fef0 	bl	8009040 <lsm6dso_xl_data_rate_set>
 8008260:	2800      	cmp	r0, #0
 8008262:	d084      	beq.n	800816e <LSM6DSO_ACC_Enable_6D_Orientation+0x2a>
 8008264:	e7b0      	b.n	80081c8 <LSM6DSO_ACC_Enable_6D_Orientation+0x84>
 8008266:	bf00      	nop

08008268 <LSM6DSO_ACC_Disable_6D_Orientation>:
{
 8008268:	b530      	push	{r4, r5, lr}
 800826a:	b085      	sub	sp, #20
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 800826c:	f100 041c 	add.w	r4, r0, #28
 8008270:	466d      	mov	r5, sp
 8008272:	4629      	mov	r1, r5
 8008274:	4620      	mov	r0, r4
 8008276:	f001 f823 	bl	80092c0 <lsm6dso_pin_int1_route_get>
 800827a:	bb50      	cbnz	r0, 80082d2 <LSM6DSO_ACC_Disable_6D_Orientation+0x6a>
  val1.six_d = PROPERTY_DISABLE;
 800827c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008280:	4603      	mov	r3, r0
 8008282:	f363 02c3 	bfi	r2, r3, #3, #1
 8008286:	f88d 2001 	strb.w	r2, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSO_OK)
 800828a:	e895 0006 	ldmia.w	r5, {r1, r2}
 800828e:	4620      	mov	r0, r4
 8008290:	f001 fc66 	bl	8009b60 <lsm6dso_pin_int1_route_set>
 8008294:	4601      	mov	r1, r0
 8008296:	b9e0      	cbnz	r0, 80082d2 <LSM6DSO_ACC_Disable_6D_Orientation+0x6a>
  if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), NULL, &val2) != LSM6DSO_OK)
 8008298:	ad02      	add	r5, sp, #8
 800829a:	462a      	mov	r2, r5
 800829c:	4620      	mov	r0, r4
 800829e:	f001 fb33 	bl	8009908 <lsm6dso_pin_int2_route_get>
 80082a2:	b9b0      	cbnz	r0, 80082d2 <LSM6DSO_ACC_Disable_6D_Orientation+0x6a>
  val2.six_d = PROPERTY_DISABLE;
 80082a4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80082a8:	f360 0341 	bfi	r3, r0, #1, #1
 80082ac:	f88d 3009 	strb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), NULL, val2) != LSM6DSO_OK)
 80082b0:	4601      	mov	r1, r0
 80082b2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80082b6:	4620      	mov	r0, r4
 80082b8:	f001 f91c 	bl	80094f4 <lsm6dso_pin_int2_route_set>
 80082bc:	4601      	mov	r1, r0
 80082be:	b940      	cbnz	r0, 80082d2 <LSM6DSO_ACC_Disable_6D_Orientation+0x6a>
  if (lsm6dso_6d_threshold_set(&(pObj->Ctx), LSM6DSO_DEG_80) != LSM6DSO_OK)
 80082c0:	4620      	mov	r0, r4
 80082c2:	f000 fda1 	bl	8008e08 <lsm6dso_6d_threshold_set>
 80082c6:	3800      	subs	r0, #0
 80082c8:	bf18      	it	ne
 80082ca:	2001      	movne	r0, #1
 80082cc:	4240      	negs	r0, r0
}
 80082ce:	b005      	add	sp, #20
 80082d0:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 80082d2:	f04f 30ff 	mov.w	r0, #4294967295
 80082d6:	e7fa      	b.n	80082ce <LSM6DSO_ACC_Disable_6D_Orientation+0x66>

080082d8 <LSM6DSO_ACC_Get_6D_Orientation_XL>:
{
 80082d8:	b510      	push	{r4, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	460c      	mov	r4, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 80082de:	2301      	movs	r3, #1
 80082e0:	aa01      	add	r2, sp, #4
 80082e2:	211d      	movs	r1, #29
 80082e4:	301c      	adds	r0, #28
 80082e6:	f000 f927 	bl	8008538 <lsm6dso_read_reg>
 80082ea:	b930      	cbnz	r0, 80082fa <LSM6DSO_ACC_Get_6D_Orientation_XL+0x22>
  *XLow = data.xl;
 80082ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80082f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80082f4:	7023      	strb	r3, [r4, #0]
}
 80082f6:	b002      	add	sp, #8
 80082f8:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 80082fa:	f04f 30ff 	mov.w	r0, #4294967295
 80082fe:	e7fa      	b.n	80082f6 <LSM6DSO_ACC_Get_6D_Orientation_XL+0x1e>

08008300 <LSM6DSO_ACC_Get_6D_Orientation_XH>:
{
 8008300:	b510      	push	{r4, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	460c      	mov	r4, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 8008306:	2301      	movs	r3, #1
 8008308:	aa01      	add	r2, sp, #4
 800830a:	211d      	movs	r1, #29
 800830c:	301c      	adds	r0, #28
 800830e:	f000 f913 	bl	8008538 <lsm6dso_read_reg>
 8008312:	b930      	cbnz	r0, 8008322 <LSM6DSO_ACC_Get_6D_Orientation_XH+0x22>
  *XHigh = data.xh;
 8008314:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008318:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800831c:	7023      	strb	r3, [r4, #0]
}
 800831e:	b002      	add	sp, #8
 8008320:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8008322:	f04f 30ff 	mov.w	r0, #4294967295
 8008326:	e7fa      	b.n	800831e <LSM6DSO_ACC_Get_6D_Orientation_XH+0x1e>

08008328 <LSM6DSO_ACC_Get_6D_Orientation_YL>:
{
 8008328:	b510      	push	{r4, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	460c      	mov	r4, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 800832e:	2301      	movs	r3, #1
 8008330:	aa01      	add	r2, sp, #4
 8008332:	211d      	movs	r1, #29
 8008334:	301c      	adds	r0, #28
 8008336:	f000 f8ff 	bl	8008538 <lsm6dso_read_reg>
 800833a:	b930      	cbnz	r0, 800834a <LSM6DSO_ACC_Get_6D_Orientation_YL+0x22>
  *YLow = data.yl;
 800833c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008340:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008344:	7023      	strb	r3, [r4, #0]
}
 8008346:	b002      	add	sp, #8
 8008348:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 800834a:	f04f 30ff 	mov.w	r0, #4294967295
 800834e:	e7fa      	b.n	8008346 <LSM6DSO_ACC_Get_6D_Orientation_YL+0x1e>

08008350 <LSM6DSO_ACC_Get_6D_Orientation_YH>:
{
 8008350:	b510      	push	{r4, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	460c      	mov	r4, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 8008356:	2301      	movs	r3, #1
 8008358:	aa01      	add	r2, sp, #4
 800835a:	211d      	movs	r1, #29
 800835c:	301c      	adds	r0, #28
 800835e:	f000 f8eb 	bl	8008538 <lsm6dso_read_reg>
 8008362:	b930      	cbnz	r0, 8008372 <LSM6DSO_ACC_Get_6D_Orientation_YH+0x22>
  *YHigh = data.yh;
 8008364:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008368:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800836c:	7023      	strb	r3, [r4, #0]
}
 800836e:	b002      	add	sp, #8
 8008370:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8008372:	f04f 30ff 	mov.w	r0, #4294967295
 8008376:	e7fa      	b.n	800836e <LSM6DSO_ACC_Get_6D_Orientation_YH+0x1e>

08008378 <LSM6DSO_ACC_Get_6D_Orientation_ZL>:
{
 8008378:	b510      	push	{r4, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	460c      	mov	r4, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 800837e:	2301      	movs	r3, #1
 8008380:	aa01      	add	r2, sp, #4
 8008382:	211d      	movs	r1, #29
 8008384:	301c      	adds	r0, #28
 8008386:	f000 f8d7 	bl	8008538 <lsm6dso_read_reg>
 800838a:	b930      	cbnz	r0, 800839a <LSM6DSO_ACC_Get_6D_Orientation_ZL+0x22>
  *ZLow = data.zl;
 800838c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008390:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008394:	7023      	strb	r3, [r4, #0]
}
 8008396:	b002      	add	sp, #8
 8008398:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 800839a:	f04f 30ff 	mov.w	r0, #4294967295
 800839e:	e7fa      	b.n	8008396 <LSM6DSO_ACC_Get_6D_Orientation_ZL+0x1e>

080083a0 <LSM6DSO_ACC_Get_6D_Orientation_ZH>:
{
 80083a0:	b510      	push	{r4, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	460c      	mov	r4, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 80083a6:	2301      	movs	r3, #1
 80083a8:	aa01      	add	r2, sp, #4
 80083aa:	211d      	movs	r1, #29
 80083ac:	301c      	adds	r0, #28
 80083ae:	f000 f8c3 	bl	8008538 <lsm6dso_read_reg>
 80083b2:	b930      	cbnz	r0, 80083c2 <LSM6DSO_ACC_Get_6D_Orientation_ZH+0x22>
  *ZHigh = data.zh;
 80083b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80083b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80083bc:	7023      	strb	r3, [r4, #0]
}
 80083be:	b002      	add	sp, #8
 80083c0:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 80083c2:	f04f 30ff 	mov.w	r0, #4294967295
 80083c6:	e7fa      	b.n	80083be <LSM6DSO_ACC_Get_6D_Orientation_ZH+0x1e>

080083c8 <LSM6DSO_ACC_Get_Event_Status>:
{
 80083c8:	b530      	push	{r4, r5, lr}
  (void)memset((void *)Status, 0x0, sizeof(LSM6DSO_Event_Status_t));
 80083ca:	2300      	movs	r3, #0
{
 80083cc:	b089      	sub	sp, #36	; 0x24
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_WAKE_UP_SRC, (uint8_t *)&wake_up_src, 1) != LSM6DSO_OK)
 80083ce:	f100 041c 	add.w	r4, r0, #28
  (void)memset((void *)Status, 0x0, sizeof(LSM6DSO_Event_Status_t));
 80083d2:	600b      	str	r3, [r1, #0]
{
 80083d4:	460d      	mov	r5, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_WAKE_UP_SRC, (uint8_t *)&wake_up_src, 1) != LSM6DSO_OK)
 80083d6:	2301      	movs	r3, #1
 80083d8:	466a      	mov	r2, sp
 80083da:	211b      	movs	r1, #27
 80083dc:	4620      	mov	r0, r4
 80083de:	f000 f8ab 	bl	8008538 <lsm6dso_read_reg>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	f040 80a3 	bne.w	800852e <LSM6DSO_ACC_Get_Event_Status+0x166>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_TAP_SRC, (uint8_t *)&tap_src, 1) != LSM6DSO_OK)
 80083e8:	2301      	movs	r3, #1
 80083ea:	aa01      	add	r2, sp, #4
 80083ec:	211c      	movs	r1, #28
 80083ee:	4620      	mov	r0, r4
 80083f0:	f000 f8a2 	bl	8008538 <lsm6dso_read_reg>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	f040 809a 	bne.w	800852e <LSM6DSO_ACC_Get_Event_Status+0x166>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&d6d_src, 1) != LSM6DSO_OK)
 80083fa:	2301      	movs	r3, #1
 80083fc:	aa02      	add	r2, sp, #8
 80083fe:	211d      	movs	r1, #29
 8008400:	4620      	mov	r0, r4
 8008402:	f000 f899 	bl	8008538 <lsm6dso_read_reg>
 8008406:	2800      	cmp	r0, #0
 8008408:	f040 8091 	bne.w	800852e <LSM6DSO_ACC_Get_Event_Status+0x166>
  if (lsm6dso_mem_bank_set(&(pObj->Ctx), LSM6DSO_EMBEDDED_FUNC_BANK) != LSM6DSO_OK)
 800840c:	2102      	movs	r1, #2
 800840e:	4620      	mov	r0, r4
 8008410:	f000 fa68 	bl	80088e4 <lsm6dso_mem_bank_set>
 8008414:	2800      	cmp	r0, #0
 8008416:	f040 808a 	bne.w	800852e <LSM6DSO_ACC_Get_Event_Status+0x166>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_SRC, (uint8_t *)&func_src, 1) != LSM6DSO_OK)
 800841a:	2301      	movs	r3, #1
 800841c:	aa03      	add	r2, sp, #12
 800841e:	2164      	movs	r1, #100	; 0x64
 8008420:	4620      	mov	r0, r4
 8008422:	f000 f889 	bl	8008538 <lsm6dso_read_reg>
 8008426:	2800      	cmp	r0, #0
 8008428:	f040 8081 	bne.w	800852e <LSM6DSO_ACC_Get_Event_Status+0x166>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&int1_ctrl, 1) != LSM6DSO_OK)
 800842c:	2301      	movs	r3, #1
 800842e:	aa06      	add	r2, sp, #24
 8008430:	210a      	movs	r1, #10
 8008432:	4620      	mov	r0, r4
 8008434:	f000 f880 	bl	8008538 <lsm6dso_read_reg>
 8008438:	2800      	cmp	r0, #0
 800843a:	d178      	bne.n	800852e <LSM6DSO_ACC_Get_Event_Status+0x166>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_INT2, (uint8_t *)&int2_ctrl, 1) != LSM6DSO_OK)
 800843c:	210e      	movs	r1, #14
 800843e:	2301      	movs	r3, #1
 8008440:	aa07      	add	r2, sp, #28
 8008442:	4620      	mov	r0, r4
 8008444:	f000 f878 	bl	8008538 <lsm6dso_read_reg>
 8008448:	4601      	mov	r1, r0
 800844a:	2800      	cmp	r0, #0
 800844c:	d16f      	bne.n	800852e <LSM6DSO_ACC_Get_Event_Status+0x166>
  if (lsm6dso_mem_bank_set(&(pObj->Ctx), LSM6DSO_USER_BANK) != 0)
 800844e:	4620      	mov	r0, r4
 8008450:	f000 fa48 	bl	80088e4 <lsm6dso_mem_bank_set>
 8008454:	2800      	cmp	r0, #0
 8008456:	d16a      	bne.n	800852e <LSM6DSO_ACC_Get_Event_Status+0x166>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1) != LSM6DSO_OK)
 8008458:	2301      	movs	r3, #1
 800845a:	aa04      	add	r2, sp, #16
 800845c:	215e      	movs	r1, #94	; 0x5e
 800845e:	4620      	mov	r0, r4
 8008460:	f000 f86a 	bl	8008538 <lsm6dso_read_reg>
 8008464:	2800      	cmp	r0, #0
 8008466:	d162      	bne.n	800852e <LSM6DSO_ACC_Get_Event_Status+0x166>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1) != LSM6DSO_OK)
 8008468:	2301      	movs	r3, #1
 800846a:	aa05      	add	r2, sp, #20
 800846c:	215f      	movs	r1, #95	; 0x5f
 800846e:	4620      	mov	r0, r4
 8008470:	f000 f862 	bl	8008538 <lsm6dso_read_reg>
 8008474:	2800      	cmp	r0, #0
 8008476:	d15a      	bne.n	800852e <LSM6DSO_ACC_Get_Event_Status+0x166>
  if (lsm6dso_tilt_flag_data_ready_get(&(pObj->Ctx), &tilt_ia) != LSM6DSO_OK)
 8008478:	f10d 011f 	add.w	r1, sp, #31
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fd61 	bl	8008f44 <lsm6dso_tilt_flag_data_ready_get>
 8008482:	2800      	cmp	r0, #0
 8008484:	d153      	bne.n	800852e <LSM6DSO_ACC_Get_Event_Status+0x166>
  if ((md1_cfg.int1_ff == 1U) || (md2_cfg.int2_ff == 1U))
 8008486:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800848a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800848e:	4313      	orrs	r3, r2
 8008490:	06d9      	lsls	r1, r3, #27
 8008492:	d507      	bpl.n	80084a4 <LSM6DSO_ACC_Get_Event_Status+0xdc>
    if (wake_up_src.ff_ia == 1U)
 8008494:	f89d 2000 	ldrb.w	r2, [sp]
 8008498:	0692      	lsls	r2, r2, #26
 800849a:	d503      	bpl.n	80084a4 <LSM6DSO_ACC_Get_Event_Status+0xdc>
      Status->FreeFallStatus = 1;
 800849c:	782a      	ldrb	r2, [r5, #0]
 800849e:	f042 0201 	orr.w	r2, r2, #1
 80084a2:	702a      	strb	r2, [r5, #0]
  if ((md1_cfg.int1_wu == 1U) || (md2_cfg.int2_wu == 1U))
 80084a4:	069c      	lsls	r4, r3, #26
 80084a6:	d507      	bpl.n	80084b8 <LSM6DSO_ACC_Get_Event_Status+0xf0>
    if (wake_up_src.wu_ia == 1U)
 80084a8:	f89d 2000 	ldrb.w	r2, [sp]
 80084ac:	0711      	lsls	r1, r2, #28
 80084ae:	d503      	bpl.n	80084b8 <LSM6DSO_ACC_Get_Event_Status+0xf0>
      Status->WakeUpStatus = 1;
 80084b0:	782a      	ldrb	r2, [r5, #0]
 80084b2:	f042 0208 	orr.w	r2, r2, #8
 80084b6:	702a      	strb	r2, [r5, #0]
  if ((md1_cfg.int1_single_tap == 1U) || (md2_cfg.int2_single_tap == 1U))
 80084b8:	065a      	lsls	r2, r3, #25
 80084ba:	d507      	bpl.n	80084cc <LSM6DSO_ACC_Get_Event_Status+0x104>
    if (tap_src.single_tap == 1U)
 80084bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80084c0:	0694      	lsls	r4, r2, #26
 80084c2:	d503      	bpl.n	80084cc <LSM6DSO_ACC_Get_Event_Status+0x104>
      Status->TapStatus = 1;
 80084c4:	782a      	ldrb	r2, [r5, #0]
 80084c6:	f042 0202 	orr.w	r2, r2, #2
 80084ca:	702a      	strb	r2, [r5, #0]
  if ((md1_cfg.int1_double_tap == 1U) || (md2_cfg.int2_double_tap == 1U))
 80084cc:	0719      	lsls	r1, r3, #28
 80084ce:	d507      	bpl.n	80084e0 <LSM6DSO_ACC_Get_Event_Status+0x118>
    if (tap_src.double_tap == 1U)
 80084d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80084d4:	06d2      	lsls	r2, r2, #27
 80084d6:	d503      	bpl.n	80084e0 <LSM6DSO_ACC_Get_Event_Status+0x118>
      Status->DoubleTapStatus = 1;
 80084d8:	782a      	ldrb	r2, [r5, #0]
 80084da:	f042 0204 	orr.w	r2, r2, #4
 80084de:	702a      	strb	r2, [r5, #0]
  if ((md1_cfg.int1_6d == 1U) || (md2_cfg.int2_6d == 1U))
 80084e0:	075b      	lsls	r3, r3, #29
 80084e2:	d507      	bpl.n	80084f4 <LSM6DSO_ACC_Get_Event_Status+0x12c>
    if (d6d_src.d6d_ia == 1U)
 80084e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80084e8:	065c      	lsls	r4, r3, #25
 80084ea:	d503      	bpl.n	80084f4 <LSM6DSO_ACC_Get_Event_Status+0x12c>
      Status->D6DOrientationStatus = 1;
 80084ec:	782b      	ldrb	r3, [r5, #0]
 80084ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f2:	702b      	strb	r3, [r5, #0]
  if (int1_ctrl.int1_step_detector == 1U)
 80084f4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80084f8:	0719      	lsls	r1, r3, #28
 80084fa:	d507      	bpl.n	800850c <LSM6DSO_ACC_Get_Event_Status+0x144>
    if (func_src.step_detected == 1U)
 80084fc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008500:	0692      	lsls	r2, r2, #26
 8008502:	d503      	bpl.n	800850c <LSM6DSO_ACC_Get_Event_Status+0x144>
      Status->StepStatus = 1;
 8008504:	782a      	ldrb	r2, [r5, #0]
 8008506:	f042 0210 	orr.w	r2, r2, #16
 800850a:	702a      	strb	r2, [r5, #0]
  if ((int1_ctrl.int1_tilt == 1U) || (int2_ctrl.int2_tilt == 1U))
 800850c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8008510:	4313      	orrs	r3, r2
 8008512:	06db      	lsls	r3, r3, #27
 8008514:	d503      	bpl.n	800851e <LSM6DSO_ACC_Get_Event_Status+0x156>
    if (tilt_ia == 1U)
 8008516:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d001      	beq.n	8008522 <LSM6DSO_ACC_Get_Event_Status+0x15a>
}
 800851e:	b009      	add	sp, #36	; 0x24
 8008520:	bd30      	pop	{r4, r5, pc}
      Status->TiltStatus = 1;
 8008522:	782b      	ldrb	r3, [r5, #0]
 8008524:	f043 0320 	orr.w	r3, r3, #32
 8008528:	702b      	strb	r3, [r5, #0]
}
 800852a:	b009      	add	sp, #36	; 0x24
 800852c:	bd30      	pop	{r4, r5, pc}
    return LSM6DSO_ERROR;
 800852e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008532:	b009      	add	sp, #36	; 0x24
 8008534:	bd30      	pop	{r4, r5, pc}
 8008536:	bf00      	nop

08008538 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8008538:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800853a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800853e:	46a4      	mov	ip, r4
  return ret;
}
 8008540:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008544:	4760      	bx	ip
 8008546:	bf00      	nop

08008548 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8008548:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800854a:	6804      	ldr	r4, [r0, #0]
 800854c:	6880      	ldr	r0, [r0, #8]
 800854e:	46a4      	mov	ip, r4
  return ret;
}
 8008550:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008554:	4760      	bx	ip
 8008556:	bf00      	nop

08008558 <lsm6dso_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8008558:	b570      	push	{r4, r5, r6, lr}
 800855a:	4604      	mov	r4, r0
 800855c:	b082      	sub	sp, #8
 800855e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008560:	6880      	ldr	r0, [r0, #8]
 8008562:	6866      	ldr	r6, [r4, #4]
 8008564:	2301      	movs	r3, #1
 8008566:	aa01      	add	r2, sp, #4
 8008568:	2110      	movs	r1, #16
 800856a:	47b0      	blx	r6
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);

  if (ret == 0) {
 800856c:	b958      	cbnz	r0, 8008586 <lsm6dso_xl_full_scale_set+0x2e>
    reg.fs_xl = (uint8_t) val;
 800856e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008572:	6826      	ldr	r6, [r4, #0]
 8008574:	68a0      	ldr	r0, [r4, #8]
    reg.fs_xl = (uint8_t) val;
 8008576:	f365 0383 	bfi	r3, r5, #2, #2
 800857a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800857e:	aa01      	add	r2, sp, #4
 8008580:	2301      	movs	r3, #1
 8008582:	2110      	movs	r1, #16
 8008584:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008586:	b002      	add	sp, #8
 8008588:	bd70      	pop	{r4, r5, r6, pc}
 800858a:	bf00      	nop

0800858c <lsm6dso_xl_full_scale_get>:
  * @param  val      Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 800858c:	b530      	push	{r4, r5, lr}
 800858e:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008590:	2301      	movs	r3, #1
 8008592:	aa01      	add	r2, sp, #4
 8008594:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
{
 8008598:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800859a:	2110      	movs	r1, #16
 800859c:	47a8      	blx	r5
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);

  switch (reg.fs_xl) {
 800859e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80085a2:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80085a6:	2a02      	cmp	r2, #2
 80085a8:	4613      	mov	r3, r2
 80085aa:	d007      	beq.n	80085bc <lsm6dso_xl_full_scale_get+0x30>
 80085ac:	2a03      	cmp	r2, #3
 80085ae:	d005      	beq.n	80085bc <lsm6dso_xl_full_scale_get+0x30>
 80085b0:	2a01      	cmp	r2, #1
 80085b2:	d003      	beq.n	80085bc <lsm6dso_xl_full_scale_get+0x30>
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80085b4:	2300      	movs	r3, #0
 80085b6:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_2g;
      break;
  }

  return ret;
}
 80085b8:	b003      	add	sp, #12
 80085ba:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_8g;
 80085bc:	7023      	strb	r3, [r4, #0]
}
 80085be:	b003      	add	sp, #12
 80085c0:	bd30      	pop	{r4, r5, pc}
 80085c2:	bf00      	nop

080085c4 <lsm6dso_xl_data_rate_get>:
  * @param  val      Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80085c4:	b530      	push	{r4, r5, lr}
 80085c6:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80085c8:	2301      	movs	r3, #1
 80085ca:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80085ce:	aa01      	add	r2, sp, #4
{
 80085d0:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80085d2:	2110      	movs	r1, #16
 80085d4:	47a0      	blx	r4
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);

  switch (reg.odr_xl) {
 80085d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80085da:	091b      	lsrs	r3, r3, #4
 80085dc:	2b0b      	cmp	r3, #11
 80085de:	d80b      	bhi.n	80085f8 <lsm6dso_xl_data_rate_get+0x34>
 80085e0:	e8df f003 	tbb	[pc, r3]
 80085e4:	1613100a 	.word	0x1613100a
 80085e8:	221f1c19 	.word	0x221f1c19
 80085ec:	0d062825 	.word	0x0d062825
    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
      break;

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80085f0:	230a      	movs	r3, #10
 80085f2:	702b      	strb	r3, [r5, #0]
      *val = LSM6DSO_XL_ODR_OFF;
      break;
  }

  return ret;
}
 80085f4:	b003      	add	sp, #12
 80085f6:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_XL_ODR_OFF;
 80085f8:	2300      	movs	r3, #0
 80085fa:	702b      	strb	r3, [r5, #0]
  return ret;
 80085fc:	e7fa      	b.n	80085f4 <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_1Hz6;
 80085fe:	230b      	movs	r3, #11
 8008600:	702b      	strb	r3, [r5, #0]
      break;
 8008602:	e7f7      	b.n	80085f4 <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_12Hz5;
 8008604:	2301      	movs	r3, #1
 8008606:	702b      	strb	r3, [r5, #0]
      break;
 8008608:	e7f4      	b.n	80085f4 <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_26Hz;
 800860a:	2302      	movs	r3, #2
 800860c:	702b      	strb	r3, [r5, #0]
      break;
 800860e:	e7f1      	b.n	80085f4 <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_52Hz;
 8008610:	2303      	movs	r3, #3
 8008612:	702b      	strb	r3, [r5, #0]
      break;
 8008614:	e7ee      	b.n	80085f4 <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_104Hz;
 8008616:	2304      	movs	r3, #4
 8008618:	702b      	strb	r3, [r5, #0]
      break;
 800861a:	e7eb      	b.n	80085f4 <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_208Hz;
 800861c:	2305      	movs	r3, #5
 800861e:	702b      	strb	r3, [r5, #0]
      break;
 8008620:	e7e8      	b.n	80085f4 <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_417Hz;
 8008622:	2306      	movs	r3, #6
 8008624:	702b      	strb	r3, [r5, #0]
      break;
 8008626:	e7e5      	b.n	80085f4 <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_833Hz;
 8008628:	2307      	movs	r3, #7
 800862a:	702b      	strb	r3, [r5, #0]
      break;
 800862c:	e7e2      	b.n	80085f4 <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_1667Hz;
 800862e:	2308      	movs	r3, #8
 8008630:	702b      	strb	r3, [r5, #0]
      break;
 8008632:	e7df      	b.n	80085f4 <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_3333Hz;
 8008634:	2309      	movs	r3, #9
 8008636:	702b      	strb	r3, [r5, #0]
      break;
 8008638:	e7dc      	b.n	80085f4 <lsm6dso_xl_data_rate_get+0x30>
 800863a:	bf00      	nop

0800863c <lsm6dso_gy_full_scale_set>:
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	4604      	mov	r4, r0
 8008640:	b082      	sub	sp, #8
 8008642:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008644:	6880      	ldr	r0, [r0, #8]
 8008646:	6866      	ldr	r6, [r4, #4]
 8008648:	2301      	movs	r3, #1
 800864a:	aa01      	add	r2, sp, #4
 800864c:	2111      	movs	r1, #17
 800864e:	47b0      	blx	r6
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008650:	b958      	cbnz	r0, 800866a <lsm6dso_gy_full_scale_set+0x2e>
    reg.fs_g = (uint8_t) val;
 8008652:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008656:	6826      	ldr	r6, [r4, #0]
 8008658:	68a0      	ldr	r0, [r4, #8]
    reg.fs_g = (uint8_t) val;
 800865a:	f365 0343 	bfi	r3, r5, #1, #3
 800865e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008662:	aa01      	add	r2, sp, #4
 8008664:	2301      	movs	r3, #1
 8008666:	2111      	movs	r1, #17
 8008668:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
  }

  return ret;
}
 800866a:	b002      	add	sp, #8
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	bf00      	nop

08008670 <lsm6dso_gy_full_scale_get>:
  * @param  val      Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8008670:	b530      	push	{r4, r5, lr}
 8008672:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008674:	2301      	movs	r3, #1
 8008676:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800867a:	aa01      	add	r2, sp, #4
{
 800867c:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800867e:	2111      	movs	r1, #17
 8008680:	47a0      	blx	r4
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);

  switch (reg.fs_g) {
 8008682:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008686:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800868a:	3b01      	subs	r3, #1
 800868c:	2b05      	cmp	r3, #5
 800868e:	d804      	bhi.n	800869a <lsm6dso_gy_full_scale_get+0x2a>
 8008690:	e8df f003 	tbb	[pc, r3]
 8008694:	13030f0b 	.word	0x13030f0b
 8008698:	0703      	.short	0x0703
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 800869a:	2300      	movs	r3, #0
 800869c:	702b      	strb	r3, [r5, #0]
      *val = LSM6DSO_250dps;
      break;
  }

  return ret;
}
 800869e:	b003      	add	sp, #12
 80086a0:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_2000dps;
 80086a2:	2306      	movs	r3, #6
 80086a4:	702b      	strb	r3, [r5, #0]
}
 80086a6:	b003      	add	sp, #12
 80086a8:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_125dps;
 80086aa:	2301      	movs	r3, #1
 80086ac:	702b      	strb	r3, [r5, #0]
}
 80086ae:	b003      	add	sp, #12
 80086b0:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_500dps;
 80086b2:	2302      	movs	r3, #2
 80086b4:	702b      	strb	r3, [r5, #0]
}
 80086b6:	b003      	add	sp, #12
 80086b8:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_1000dps;
 80086ba:	2304      	movs	r3, #4
 80086bc:	702b      	strb	r3, [r5, #0]
}
 80086be:	b003      	add	sp, #12
 80086c0:	bd30      	pop	{r4, r5, pc}
 80086c2:	bf00      	nop

080086c4 <lsm6dso_gy_data_rate_get>:
  * @param  val      Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80086c4:	b530      	push	{r4, r5, lr}
 80086c6:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80086c8:	2301      	movs	r3, #1
 80086ca:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80086ce:	aa01      	add	r2, sp, #4
{
 80086d0:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80086d2:	2111      	movs	r1, #17
 80086d4:	47a0      	blx	r4
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);

  switch (reg.odr_g) {
 80086d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80086da:	091b      	lsrs	r3, r3, #4
 80086dc:	2b0a      	cmp	r3, #10
 80086de:	d80b      	bhi.n	80086f8 <lsm6dso_gy_data_rate_get+0x34>
 80086e0:	e8df f003 	tbb	[pc, r3]
 80086e4:	1613100a 	.word	0x1613100a
 80086e8:	221f1c19 	.word	0x221f1c19
 80086ec:	0625      	.short	0x0625
 80086ee:	0d          	.byte	0x0d
 80086ef:	00          	.byte	0x00
    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
      break;

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80086f0:	2309      	movs	r3, #9
 80086f2:	702b      	strb	r3, [r5, #0]
      *val = LSM6DSO_GY_ODR_OFF;
      break;
  }

  return ret;
}
 80086f4:	b003      	add	sp, #12
 80086f6:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_GY_ODR_OFF;
 80086f8:	2300      	movs	r3, #0
 80086fa:	702b      	strb	r3, [r5, #0]
  return ret;
 80086fc:	e7fa      	b.n	80086f4 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_6667Hz;
 80086fe:	230a      	movs	r3, #10
 8008700:	702b      	strb	r3, [r5, #0]
      break;
 8008702:	e7f7      	b.n	80086f4 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_12Hz5;
 8008704:	2301      	movs	r3, #1
 8008706:	702b      	strb	r3, [r5, #0]
      break;
 8008708:	e7f4      	b.n	80086f4 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_26Hz;
 800870a:	2302      	movs	r3, #2
 800870c:	702b      	strb	r3, [r5, #0]
      break;
 800870e:	e7f1      	b.n	80086f4 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_52Hz;
 8008710:	2303      	movs	r3, #3
 8008712:	702b      	strb	r3, [r5, #0]
      break;
 8008714:	e7ee      	b.n	80086f4 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_104Hz;
 8008716:	2304      	movs	r3, #4
 8008718:	702b      	strb	r3, [r5, #0]
      break;
 800871a:	e7eb      	b.n	80086f4 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_208Hz;
 800871c:	2305      	movs	r3, #5
 800871e:	702b      	strb	r3, [r5, #0]
      break;
 8008720:	e7e8      	b.n	80086f4 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_417Hz;
 8008722:	2306      	movs	r3, #6
 8008724:	702b      	strb	r3, [r5, #0]
      break;
 8008726:	e7e5      	b.n	80086f4 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_833Hz;
 8008728:	2307      	movs	r3, #7
 800872a:	702b      	strb	r3, [r5, #0]
      break;
 800872c:	e7e2      	b.n	80086f4 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_1667Hz;
 800872e:	2308      	movs	r3, #8
 8008730:	702b      	strb	r3, [r5, #0]
      break;
 8008732:	e7df      	b.n	80086f4 <lsm6dso_gy_data_rate_get+0x30>

08008734 <lsm6dso_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008734:	b570      	push	{r4, r5, r6, lr}
 8008736:	4604      	mov	r4, r0
 8008738:	b082      	sub	sp, #8
 800873a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800873c:	6880      	ldr	r0, [r0, #8]
 800873e:	6866      	ldr	r6, [r4, #4]
 8008740:	2301      	movs	r3, #1
 8008742:	aa01      	add	r2, sp, #4
 8008744:	2112      	movs	r1, #18
 8008746:	47b0      	blx	r6
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008748:	b958      	cbnz	r0, 8008762 <lsm6dso_block_data_update_set+0x2e>
    reg.bdu = val;
 800874a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800874e:	6826      	ldr	r6, [r4, #0]
 8008750:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 8008752:	f365 1386 	bfi	r3, r5, #6, #1
 8008756:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800875a:	aa01      	add	r2, sp, #4
 800875c:	2301      	movs	r3, #1
 800875e:	2112      	movs	r1, #18
 8008760:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008762:	b002      	add	sp, #8
 8008764:	bd70      	pop	{r4, r5, r6, pc}
 8008766:	bf00      	nop

08008768 <lsm6dso_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008768:	b530      	push	{r4, r5, lr}
 800876a:	b083      	sub	sp, #12
 800876c:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800876e:	466a      	mov	r2, sp
 8008770:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8008774:	2306      	movs	r3, #6
 8008776:	2122      	movs	r1, #34	; 0x22
 8008778:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800877a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800877e:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008782:	f89d c003 	ldrb.w	ip, [sp, #3]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008786:	f89d 1005 	ldrb.w	r1, [sp, #5]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800878a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800878e:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008790:	f89d 2002 	ldrb.w	r2, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008794:	f89d 3004 	ldrb.w	r3, [sp, #4]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008798:	eb02 220c 	add.w	r2, r2, ip, lsl #8
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800879c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80087a0:	8062      	strh	r2, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80087a2:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 80087a4:	b003      	add	sp, #12
 80087a6:	bd30      	pop	{r4, r5, pc}

080087a8 <lsm6dso_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80087a8:	b530      	push	{r4, r5, lr}
 80087aa:	b083      	sub	sp, #12
 80087ac:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80087ae:	466a      	mov	r2, sp
 80087b0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80087b4:	2306      	movs	r3, #6
 80087b6:	2128      	movs	r1, #40	; 0x28
 80087b8:	47a8      	blx	r5
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80087ba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80087be:	f89d 3000 	ldrb.w	r3, [sp]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80087c2:	f89d c003 	ldrb.w	ip, [sp, #3]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80087c6:	f89d 1005 	ldrb.w	r1, [sp, #5]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80087ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80087ce:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80087d0:	f89d 2002 	ldrb.w	r2, [sp, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80087d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80087d8:	eb02 220c 	add.w	r2, r2, ip, lsl #8
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80087dc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80087e0:	8062      	strh	r2, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80087e2:	80a3      	strh	r3, [r4, #4]
  return ret;
}
 80087e4:	b003      	add	sp, #12
 80087e6:	bd30      	pop	{r4, r5, pc}

080087e8 <lsm6dso_number_of_steps_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_number_of_steps_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 80087e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ea:	4604      	mov	r4, r0
 80087ec:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80087ee:	2301      	movs	r3, #1
{
 80087f0:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80087f2:	6880      	ldr	r0, [r0, #8]
 80087f4:	6866      	ldr	r6, [r4, #4]
 80087f6:	aa01      	add	r2, sp, #4
 80087f8:	4619      	mov	r1, r3
 80087fa:	47b0      	blx	r6
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg,
                         1);

  if (ret == 0) {
 80087fc:	bb70      	cbnz	r0, 800885c <lsm6dso_number_of_steps_get+0x74>
    reg.reg_access = (uint8_t)val;
 80087fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008802:	68a0      	ldr	r0, [r4, #8]
 8008804:	6827      	ldr	r7, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8008806:	2602      	movs	r6, #2
 8008808:	f366 1387 	bfi	r3, r6, #6, #2
 800880c:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008810:	2301      	movs	r3, #1
 8008812:	aa01      	add	r2, sp, #4
 8008814:	4619      	mov	r1, r3
 8008816:	47b8      	blx	r7
  if (ret == 0) {
 8008818:	bb00      	cbnz	r0, 800885c <lsm6dso_number_of_steps_get+0x74>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800881a:	4633      	mov	r3, r6
 800881c:	68a0      	ldr	r0, [r4, #8]
 800881e:	6866      	ldr	r6, [r4, #4]
 8008820:	aa01      	add	r2, sp, #4
 8008822:	2162      	movs	r1, #98	; 0x62
 8008824:	47b0      	blx	r6
  if (ret == 0) {
 8008826:	b9c8      	cbnz	r0, 800885c <lsm6dso_number_of_steps_get+0x74>
    *val = buff[1];
 8008828:	f89d 1005 	ldrb.w	r1, [sp, #5]
    *val = (*val * 256U) +  buff[0];
 800882c:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008830:	68a0      	ldr	r0, [r4, #8]
    *val = (*val * 256U) +  buff[0];
 8008832:	eb02 2201 	add.w	r2, r2, r1, lsl #8
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008836:	2301      	movs	r3, #1
    *val = (*val * 256U) +  buff[0];
 8008838:	802a      	strh	r2, [r5, #0]
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800883a:	4619      	mov	r1, r3
 800883c:	6865      	ldr	r5, [r4, #4]
 800883e:	466a      	mov	r2, sp
 8008840:	47a8      	blx	r5
  if (ret == 0) {
 8008842:	b958      	cbnz	r0, 800885c <lsm6dso_number_of_steps_get+0x74>
    reg.reg_access = (uint8_t)val;
 8008844:	f89d 2000 	ldrb.w	r2, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008848:	6825      	ldr	r5, [r4, #0]
    reg.reg_access = (uint8_t)val;
 800884a:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800884e:	2301      	movs	r3, #1
 8008850:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8008852:	f88d 2000 	strb.w	r2, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008856:	4619      	mov	r1, r3
 8008858:	466a      	mov	r2, sp
 800885a:	47a8      	blx	r5
}
 800885c:	b003      	add	sp, #12
 800885e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008860 <lsm6dso_steps_reset>:
{
 8008860:	b530      	push	{r4, r5, lr}
 8008862:	4604      	mov	r4, r0
 8008864:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008866:	2301      	movs	r3, #1
 8008868:	6880      	ldr	r0, [r0, #8]
 800886a:	6865      	ldr	r5, [r4, #4]
 800886c:	aa01      	add	r2, sp, #4
 800886e:	4619      	mov	r1, r3
 8008870:	47a8      	blx	r5
  if (ret == 0) {
 8008872:	2800      	cmp	r0, #0
 8008874:	d134      	bne.n	80088e0 <lsm6dso_steps_reset+0x80>
    reg.reg_access = (uint8_t)val;
 8008876:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800887a:	6825      	ldr	r5, [r4, #0]
 800887c:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 800887e:	2302      	movs	r3, #2
 8008880:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008884:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008886:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800888a:	4619      	mov	r1, r3
 800888c:	aa01      	add	r2, sp, #4
 800888e:	47a8      	blx	r5
  if (ret == 0) {
 8008890:	bb30      	cbnz	r0, 80088e0 <lsm6dso_steps_reset+0x80>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008892:	6865      	ldr	r5, [r4, #4]
 8008894:	68a0      	ldr	r0, [r4, #8]
 8008896:	2301      	movs	r3, #1
 8008898:	466a      	mov	r2, sp
 800889a:	2164      	movs	r1, #100	; 0x64
 800889c:	47a8      	blx	r5
  if (ret == 0) {
 800889e:	b9f8      	cbnz	r0, 80088e0 <lsm6dso_steps_reset+0x80>
    reg.pedo_rst_step = PROPERTY_ENABLE;
 80088a0:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80088a4:	6825      	ldr	r5, [r4, #0]
 80088a6:	68a0      	ldr	r0, [r4, #8]
    reg.pedo_rst_step = PROPERTY_ENABLE;
 80088a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ac:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80088b0:	466a      	mov	r2, sp
 80088b2:	2301      	movs	r3, #1
 80088b4:	2164      	movs	r1, #100	; 0x64
 80088b6:	47a8      	blx	r5
  if (ret == 0) {
 80088b8:	b990      	cbnz	r0, 80088e0 <lsm6dso_steps_reset+0x80>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80088ba:	2301      	movs	r3, #1
 80088bc:	6865      	ldr	r5, [r4, #4]
 80088be:	68a0      	ldr	r0, [r4, #8]
 80088c0:	aa01      	add	r2, sp, #4
 80088c2:	4619      	mov	r1, r3
 80088c4:	47a8      	blx	r5
  if (ret == 0) {
 80088c6:	b958      	cbnz	r0, 80088e0 <lsm6dso_steps_reset+0x80>
    reg.reg_access = (uint8_t)val;
 80088c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80088cc:	6825      	ldr	r5, [r4, #0]
    reg.reg_access = (uint8_t)val;
 80088ce:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80088d2:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 80088d4:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80088d8:	68a0      	ldr	r0, [r4, #8]
 80088da:	aa01      	add	r2, sp, #4
 80088dc:	4619      	mov	r1, r3
 80088de:	47a8      	blx	r5
}
 80088e0:	b003      	add	sp, #12
 80088e2:	bd30      	pop	{r4, r5, pc}

080088e4 <lsm6dso_mem_bank_set>:
{
 80088e4:	b570      	push	{r4, r5, r6, lr}
 80088e6:	4604      	mov	r4, r0
 80088e8:	b082      	sub	sp, #8
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80088ea:	2301      	movs	r3, #1
{
 80088ec:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80088ee:	6880      	ldr	r0, [r0, #8]
 80088f0:	6866      	ldr	r6, [r4, #4]
 80088f2:	aa01      	add	r2, sp, #4
 80088f4:	4619      	mov	r1, r3
 80088f6:	47b0      	blx	r6
  if (ret == 0) {
 80088f8:	b958      	cbnz	r0, 8008912 <lsm6dso_mem_bank_set+0x2e>
    reg.reg_access = (uint8_t)val;
 80088fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80088fe:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8008900:	f365 1287 	bfi	r2, r5, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008904:	2301      	movs	r3, #1
 8008906:	6825      	ldr	r5, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8008908:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800890c:	4619      	mov	r1, r3
 800890e:	aa01      	add	r2, sp, #4
 8008910:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg,
                            1);
  }

  return ret;
}
 8008912:	b002      	add	sp, #8
 8008914:	bd70      	pop	{r4, r5, r6, pc}
 8008916:	bf00      	nop

08008918 <lsm6dso_ln_pg_write_byte>:
  * @param  val      value to write
  *
  */
int32_t lsm6dso_ln_pg_write_byte(stmdev_ctx_t *ctx, uint16_t address,
                                 uint8_t *val)
{
 8008918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800891c:	2301      	movs	r3, #1
{
 800891e:	b084      	sub	sp, #16
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008920:	6847      	ldr	r7, [r0, #4]
{
 8008922:	4604      	mov	r4, r0
 8008924:	460d      	mov	r5, r1
 8008926:	4690      	mov	r8, r2
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008928:	6880      	ldr	r0, [r0, #8]
 800892a:	aa03      	add	r2, sp, #12
 800892c:	4619      	mov	r1, r3
 800892e:	47b8      	blx	r7
  if (ret == 0) {
 8008930:	2800      	cmp	r0, #0
 8008932:	d171      	bne.n	8008a18 <lsm6dso_ln_pg_write_byte+0x100>
    reg.reg_access = (uint8_t)val;
 8008934:	f89d 300c 	ldrb.w	r3, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008938:	68a0      	ldr	r0, [r4, #8]
 800893a:	6826      	ldr	r6, [r4, #0]
    reg.reg_access = (uint8_t)val;
 800893c:	2702      	movs	r7, #2
 800893e:	f367 1387 	bfi	r3, r7, #6, #2
 8008942:	f88d 300c 	strb.w	r3, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008946:	2301      	movs	r3, #1
 8008948:	aa03      	add	r2, sp, #12
 800894a:	4619      	mov	r1, r3
 800894c:	47b0      	blx	r6
  lsm6dso_page_sel_t page_sel;
  lsm6dso_page_address_t page_address;
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 800894e:	2800      	cmp	r0, #0
 8008950:	d162      	bne.n	8008a18 <lsm6dso_ln_pg_write_byte+0x100>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008952:	68a0      	ldr	r0, [r4, #8]
 8008954:	6866      	ldr	r6, [r4, #4]
 8008956:	2301      	movs	r3, #1
 8008958:	466a      	mov	r2, sp
 800895a:	2117      	movs	r1, #23
 800895c:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw, 1);
  }

  if (ret == 0) {
 800895e:	2800      	cmp	r0, #0
 8008960:	d15a      	bne.n	8008a18 <lsm6dso_ln_pg_write_byte+0x100>
    page_rw.page_rw = 0x02; /* page_write enable */
 8008962:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008966:	68a0      	ldr	r0, [r4, #8]
 8008968:	6826      	ldr	r6, [r4, #0]
    page_rw.page_rw = 0x02; /* page_write enable */
 800896a:	f367 1346 	bfi	r3, r7, #5, #2
 800896e:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008972:	466a      	mov	r2, sp
 8008974:	2301      	movs	r3, #1
 8008976:	2117      	movs	r1, #23
 8008978:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw,
                            1);
  }

  if (ret == 0) {
 800897a:	2800      	cmp	r0, #0
 800897c:	d14c      	bne.n	8008a18 <lsm6dso_ln_pg_write_byte+0x100>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800897e:	68a0      	ldr	r0, [r4, #8]
 8008980:	6866      	ldr	r6, [r4, #4]
 8008982:	2301      	movs	r3, #1
 8008984:	aa01      	add	r2, sp, #4
 8008986:	4639      	mov	r1, r7
 8008988:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_SEL, (uint8_t *) &page_sel,
                           1);
  }

  if (ret == 0) {
 800898a:	2800      	cmp	r0, #0
 800898c:	d144      	bne.n	8008a18 <lsm6dso_ln_pg_write_byte+0x100>
    page_sel.page_sel = ((uint8_t)(address >> 8) & 0x0FU);
 800898e:	0a2b      	lsrs	r3, r5, #8
    page_sel.not_used_01 = 1;
 8008990:	011b      	lsls	r3, r3, #4
 8008992:	f043 0301 	orr.w	r3, r3, #1
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008996:	4639      	mov	r1, r7
    page_sel.not_used_01 = 1;
 8008998:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800899c:	6827      	ldr	r7, [r4, #0]
 800899e:	68a0      	ldr	r0, [r4, #8]
 80089a0:	aa01      	add	r2, sp, #4
 80089a2:	2301      	movs	r3, #1
 80089a4:	47b8      	blx	r7
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_SEL, (uint8_t *) &page_sel,
                            1);
  }

  if (ret == 0) {
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d136      	bne.n	8008a18 <lsm6dso_ln_pg_write_byte+0x100>
    page_address.page_addr = (uint8_t)address & 0xFFU;
 80089aa:	f88d 5008 	strb.w	r5, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80089ae:	68a0      	ldr	r0, [r4, #8]
 80089b0:	6825      	ldr	r5, [r4, #0]
 80089b2:	2301      	movs	r3, #1
 80089b4:	aa02      	add	r2, sp, #8
 80089b6:	2108      	movs	r1, #8
 80089b8:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_ADDRESS,
                            (uint8_t *)&page_address, 1);
  }

  if (ret == 0) {
 80089ba:	bb68      	cbnz	r0, 8008a18 <lsm6dso_ln_pg_write_byte+0x100>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80089bc:	6825      	ldr	r5, [r4, #0]
 80089be:	68a0      	ldr	r0, [r4, #8]
 80089c0:	4642      	mov	r2, r8
 80089c2:	2301      	movs	r3, #1
 80089c4:	2109      	movs	r1, #9
 80089c6:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_VALUE, val, 1);
  }

  if (ret == 0) {
 80089c8:	bb30      	cbnz	r0, 8008a18 <lsm6dso_ln_pg_write_byte+0x100>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80089ca:	6865      	ldr	r5, [r4, #4]
 80089cc:	68a0      	ldr	r0, [r4, #8]
 80089ce:	2301      	movs	r3, #1
 80089d0:	466a      	mov	r2, sp
 80089d2:	2117      	movs	r1, #23
 80089d4:	47a8      	blx	r5
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw, 1);
  }

  if (ret == 0) {
 80089d6:	b9f8      	cbnz	r0, 8008a18 <lsm6dso_ln_pg_write_byte+0x100>
    page_rw.page_rw = 0x00; /* page_write disable */
 80089d8:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80089dc:	6825      	ldr	r5, [r4, #0]
    page_rw.page_rw = 0x00; /* page_write disable */
 80089de:	f360 1346 	bfi	r3, r0, #5, #2
 80089e2:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80089e6:	68a0      	ldr	r0, [r4, #8]
 80089e8:	466a      	mov	r2, sp
 80089ea:	2301      	movs	r3, #1
 80089ec:	2117      	movs	r1, #23
 80089ee:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw,
                            1);
  }

  if (ret == 0) {
 80089f0:	b990      	cbnz	r0, 8008a18 <lsm6dso_ln_pg_write_byte+0x100>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80089f2:	2301      	movs	r3, #1
 80089f4:	6865      	ldr	r5, [r4, #4]
 80089f6:	68a0      	ldr	r0, [r4, #8]
 80089f8:	aa03      	add	r2, sp, #12
 80089fa:	4619      	mov	r1, r3
 80089fc:	47a8      	blx	r5
  if (ret == 0) {
 80089fe:	b958      	cbnz	r0, 8008a18 <lsm6dso_ln_pg_write_byte+0x100>
    reg.reg_access = (uint8_t)val;
 8008a00:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008a04:	6825      	ldr	r5, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8008a06:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008a0a:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008a0c:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008a10:	68a0      	ldr	r0, [r4, #8]
 8008a12:	aa03      	add	r2, sp, #12
 8008a14:	4619      	mov	r1, r3
 8008a16:	47a8      	blx	r5
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 8008a18:	b004      	add	sp, #16
 8008a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a1e:	bf00      	nop

08008a20 <lsm6dso_ln_pg_read_byte>:
  * @param  val      read value
  *
  */
int32_t lsm6dso_ln_pg_read_byte(stmdev_ctx_t *ctx, uint16_t address,
                                uint8_t *val)
{
 8008a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008a24:	2301      	movs	r3, #1
{
 8008a26:	b084      	sub	sp, #16
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008a28:	6847      	ldr	r7, [r0, #4]
{
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	460d      	mov	r5, r1
 8008a2e:	4690      	mov	r8, r2
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008a30:	6880      	ldr	r0, [r0, #8]
 8008a32:	aa03      	add	r2, sp, #12
 8008a34:	4619      	mov	r1, r3
 8008a36:	47b8      	blx	r7
  if (ret == 0) {
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d171      	bne.n	8008b20 <lsm6dso_ln_pg_read_byte+0x100>
    reg.reg_access = (uint8_t)val;
 8008a3c:	f89d 300c 	ldrb.w	r3, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008a40:	68a0      	ldr	r0, [r4, #8]
 8008a42:	6826      	ldr	r6, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8008a44:	2702      	movs	r7, #2
 8008a46:	f367 1387 	bfi	r3, r7, #6, #2
 8008a4a:	f88d 300c 	strb.w	r3, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008a4e:	2301      	movs	r3, #1
 8008a50:	aa03      	add	r2, sp, #12
 8008a52:	4619      	mov	r1, r3
 8008a54:	47b0      	blx	r6
  lsm6dso_page_sel_t page_sel;
  lsm6dso_page_address_t  page_address;
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d162      	bne.n	8008b20 <lsm6dso_ln_pg_read_byte+0x100>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008a5a:	68a0      	ldr	r0, [r4, #8]
 8008a5c:	6866      	ldr	r6, [r4, #4]
 8008a5e:	2301      	movs	r3, #1
 8008a60:	466a      	mov	r2, sp
 8008a62:	2117      	movs	r1, #23
 8008a64:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw, 1);
  }

  if (ret == 0) {
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d15a      	bne.n	8008b20 <lsm6dso_ln_pg_read_byte+0x100>
    page_rw.page_rw = 0x01; /* page_read enable*/
 8008a6a:	f89d 2000 	ldrb.w	r2, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008a6e:	68a0      	ldr	r0, [r4, #8]
 8008a70:	6826      	ldr	r6, [r4, #0]
    page_rw.page_rw = 0x01; /* page_read enable*/
 8008a72:	2301      	movs	r3, #1
 8008a74:	f363 1246 	bfi	r2, r3, #5, #2
 8008a78:	f88d 2000 	strb.w	r2, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008a7c:	2117      	movs	r1, #23
 8008a7e:	466a      	mov	r2, sp
 8008a80:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw,
                            1);
  }

  if (ret == 0) {
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d14c      	bne.n	8008b20 <lsm6dso_ln_pg_read_byte+0x100>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008a86:	68a0      	ldr	r0, [r4, #8]
 8008a88:	6866      	ldr	r6, [r4, #4]
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	aa01      	add	r2, sp, #4
 8008a8e:	4639      	mov	r1, r7
 8008a90:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_SEL, (uint8_t *) &page_sel,
                           1);
  }

  if (ret == 0) {
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d144      	bne.n	8008b20 <lsm6dso_ln_pg_read_byte+0x100>
    page_sel.page_sel = ((uint8_t)(address >> 8) & 0x0FU);
 8008a96:	0a28      	lsrs	r0, r5, #8
    page_sel.not_used_01 = 1;
 8008a98:	0100      	lsls	r0, r0, #4
 8008a9a:	f040 0001 	orr.w	r0, r0, #1
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008a9e:	4639      	mov	r1, r7
    page_sel.not_used_01 = 1;
 8008aa0:	f88d 0004 	strb.w	r0, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008aa4:	6827      	ldr	r7, [r4, #0]
 8008aa6:	68a0      	ldr	r0, [r4, #8]
 8008aa8:	aa01      	add	r2, sp, #4
 8008aaa:	2301      	movs	r3, #1
 8008aac:	47b8      	blx	r7
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_SEL, (uint8_t *) &page_sel,
                            1);
  }

  if (ret == 0) {
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d136      	bne.n	8008b20 <lsm6dso_ln_pg_read_byte+0x100>
    page_address.page_addr = (uint8_t)address & 0x00FFU;
 8008ab2:	f88d 5008 	strb.w	r5, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ab6:	68a0      	ldr	r0, [r4, #8]
 8008ab8:	6825      	ldr	r5, [r4, #0]
 8008aba:	2301      	movs	r3, #1
 8008abc:	aa02      	add	r2, sp, #8
 8008abe:	2108      	movs	r1, #8
 8008ac0:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_ADDRESS,
                            (uint8_t *)&page_address, 1);
  }

  if (ret == 0) {
 8008ac2:	bb68      	cbnz	r0, 8008b20 <lsm6dso_ln_pg_read_byte+0x100>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008ac4:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 8008ac8:	4642      	mov	r2, r8
 8008aca:	2301      	movs	r3, #1
 8008acc:	2109      	movs	r1, #9
 8008ace:	47a8      	blx	r5
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_VALUE, val, 1);
  }

  if (ret == 0) {
 8008ad0:	bb30      	cbnz	r0, 8008b20 <lsm6dso_ln_pg_read_byte+0x100>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008ad2:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	466a      	mov	r2, sp
 8008ada:	2117      	movs	r1, #23
 8008adc:	47a8      	blx	r5
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw, 1);
  }

  if (ret == 0) {
 8008ade:	b9f8      	cbnz	r0, 8008b20 <lsm6dso_ln_pg_read_byte+0x100>
    page_rw.page_rw = 0x00; /* page_read disable */
 8008ae0:	f89d 1000 	ldrb.w	r1, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ae4:	6825      	ldr	r5, [r4, #0]
    page_rw.page_rw = 0x00; /* page_read disable */
 8008ae6:	f360 1146 	bfi	r1, r0, #5, #2
 8008aea:	f88d 1000 	strb.w	r1, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008aee:	68a0      	ldr	r0, [r4, #8]
 8008af0:	2301      	movs	r3, #1
 8008af2:	466a      	mov	r2, sp
 8008af4:	2117      	movs	r1, #23
 8008af6:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t *) &page_rw,
                            1);
  }

  if (ret == 0) {
 8008af8:	b990      	cbnz	r0, 8008b20 <lsm6dso_ln_pg_read_byte+0x100>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008afa:	2301      	movs	r3, #1
 8008afc:	6865      	ldr	r5, [r4, #4]
 8008afe:	68a0      	ldr	r0, [r4, #8]
 8008b00:	aa03      	add	r2, sp, #12
 8008b02:	4619      	mov	r1, r3
 8008b04:	47a8      	blx	r5
  if (ret == 0) {
 8008b06:	b958      	cbnz	r0, 8008b20 <lsm6dso_ln_pg_read_byte+0x100>
    reg.reg_access = (uint8_t)val;
 8008b08:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b0c:	6825      	ldr	r5, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8008b0e:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b12:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008b14:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b18:	68a0      	ldr	r0, [r4, #8]
 8008b1a:	aa03      	add	r2, sp, #12
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	47a8      	blx	r5
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 8008b20:	b004      	add	sp, #16
 8008b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b26:	bf00      	nop

08008b28 <lsm6dso_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008b28:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008b2a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
 8008b2e:	460a      	mov	r2, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008b30:	46a4      	mov	ip, r4
 8008b32:	2301      	movs	r3, #1
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
  return ret;
}
 8008b34:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008b38:	210f      	movs	r1, #15
 8008b3a:	4760      	bx	ip

08008b3c <lsm6dso_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	4604      	mov	r4, r0
 8008b40:	b082      	sub	sp, #8
 8008b42:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008b44:	6880      	ldr	r0, [r0, #8]
 8008b46:	6866      	ldr	r6, [r4, #4]
 8008b48:	2301      	movs	r3, #1
 8008b4a:	aa01      	add	r2, sp, #4
 8008b4c:	2112      	movs	r1, #18
 8008b4e:	47b0      	blx	r6
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008b50:	b958      	cbnz	r0, 8008b6a <lsm6dso_auto_increment_set+0x2e>
    reg.if_inc = val;
 8008b52:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b56:	6826      	ldr	r6, [r4, #0]
 8008b58:	68a0      	ldr	r0, [r4, #8]
    reg.if_inc = val;
 8008b5a:	f365 0382 	bfi	r3, r5, #2, #1
 8008b5e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b62:	aa01      	add	r2, sp, #4
 8008b64:	2301      	movs	r3, #1
 8008b66:	2112      	movs	r1, #18
 8008b68:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008b6a:	b002      	add	sp, #8
 8008b6c:	bd70      	pop	{r4, r5, r6, pc}
 8008b6e:	bf00      	nop

08008b70 <lsm6dso_i3c_disable_set>:
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8008b70:	b570      	push	{r4, r5, r6, lr}
 8008b72:	4604      	mov	r4, r0
 8008b74:	b082      	sub	sp, #8
 8008b76:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008b78:	6880      	ldr	r0, [r0, #8]
 8008b7a:	6866      	ldr	r6, [r4, #4]
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	aa01      	add	r2, sp, #4
 8008b80:	2118      	movs	r1, #24
 8008b82:	47b0      	blx	r6
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl,
                         1);

  if (ret == 0) {
 8008b84:	bb00      	cbnz	r0, 8008bc8 <lsm6dso_i3c_disable_set+0x58>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8008b86:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b8a:	6826      	ldr	r6, [r4, #0]
 8008b8c:	68a0      	ldr	r0, [r4, #8]
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8008b8e:	09ea      	lsrs	r2, r5, #7
 8008b90:	f362 0341 	bfi	r3, r2, #1, #1
 8008b94:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b98:	aa01      	add	r2, sp, #4
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	2118      	movs	r1, #24
 8008b9e:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl,
                            1);
  }

  if (ret == 0) {
 8008ba0:	b990      	cbnz	r0, 8008bc8 <lsm6dso_i3c_disable_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008ba2:	6866      	ldr	r6, [r4, #4]
 8008ba4:	68a0      	ldr	r0, [r4, #8]
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	466a      	mov	r2, sp
 8008baa:	2162      	movs	r1, #98	; 0x62
 8008bac:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0) {
 8008bae:	b958      	cbnz	r0, 8008bc8 <lsm6dso_i3c_disable_set+0x58>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8008bb0:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008bb4:	6826      	ldr	r6, [r4, #0]
 8008bb6:	68a0      	ldr	r0, [r4, #8]
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8008bb8:	f365 03c4 	bfi	r3, r5, #3, #2
 8008bbc:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008bc0:	466a      	mov	r2, sp
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	2162      	movs	r1, #98	; 0x62
 8008bc6:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
}
 8008bc8:	b002      	add	sp, #8
 8008bca:	bd70      	pop	{r4, r5, r6, pc}

08008bcc <lsm6dso_wkup_threshold_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  *
  */
int32_t lsm6dso_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	4604      	mov	r4, r0
 8008bd0:	b082      	sub	sp, #8
 8008bd2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008bd4:	6880      	ldr	r0, [r0, #8]
 8008bd6:	6866      	ldr	r6, [r4, #4]
 8008bd8:	2301      	movs	r3, #1
 8008bda:	aa01      	add	r2, sp, #4
 8008bdc:	215b      	movs	r1, #91	; 0x5b
 8008bde:	47b0      	blx	r6
  lsm6dso_wake_up_ths_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WAKE_UP_THS, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008be0:	b958      	cbnz	r0, 8008bfa <lsm6dso_wkup_threshold_set+0x2e>
    reg.wk_ths = val;
 8008be2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008be6:	6826      	ldr	r6, [r4, #0]
 8008be8:	68a0      	ldr	r0, [r4, #8]
    reg.wk_ths = val;
 8008bea:	f365 0305 	bfi	r3, r5, #0, #6
 8008bee:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008bf2:	aa01      	add	r2, sp, #4
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	215b      	movs	r1, #91	; 0x5b
 8008bf8:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_WAKE_UP_THS, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008bfa:	b002      	add	sp, #8
 8008bfc:	bd70      	pop	{r4, r5, r6, pc}
 8008bfe:	bf00      	nop

08008c00 <lsm6dso_wkup_dur_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  *
  */
int32_t lsm6dso_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4604      	mov	r4, r0
 8008c04:	b082      	sub	sp, #8
 8008c06:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008c08:	6880      	ldr	r0, [r0, #8]
 8008c0a:	6866      	ldr	r6, [r4, #4]
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	aa01      	add	r2, sp, #4
 8008c10:	215c      	movs	r1, #92	; 0x5c
 8008c12:	47b0      	blx	r6
  lsm6dso_wake_up_dur_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WAKE_UP_DUR, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008c14:	b958      	cbnz	r0, 8008c2e <lsm6dso_wkup_dur_set+0x2e>
    reg.wake_dur = val;
 8008c16:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008c1a:	6826      	ldr	r6, [r4, #0]
 8008c1c:	68a0      	ldr	r0, [r4, #8]
    reg.wake_dur = val;
 8008c1e:	f365 1346 	bfi	r3, r5, #5, #2
 8008c22:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008c26:	aa01      	add	r2, sp, #4
 8008c28:	2301      	movs	r3, #1
 8008c2a:	215c      	movs	r1, #92	; 0x5c
 8008c2c:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_WAKE_UP_DUR, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008c2e:	b002      	add	sp, #8
 8008c30:	bd70      	pop	{r4, r5, r6, pc}
 8008c32:	bf00      	nop

08008c34 <lsm6dso_act_sleep_dur_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of sleep_dur in reg WAKE_UP_DUR
  *
  */
int32_t lsm6dso_act_sleep_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008c34:	b570      	push	{r4, r5, r6, lr}
 8008c36:	4604      	mov	r4, r0
 8008c38:	b082      	sub	sp, #8
 8008c3a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008c3c:	6880      	ldr	r0, [r0, #8]
 8008c3e:	6866      	ldr	r6, [r4, #4]
 8008c40:	2301      	movs	r3, #1
 8008c42:	aa01      	add	r2, sp, #4
 8008c44:	215c      	movs	r1, #92	; 0x5c
 8008c46:	47b0      	blx	r6
  lsm6dso_wake_up_dur_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WAKE_UP_DUR, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008c48:	b958      	cbnz	r0, 8008c62 <lsm6dso_act_sleep_dur_set+0x2e>
    reg.sleep_dur = val;
 8008c4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008c4e:	6826      	ldr	r6, [r4, #0]
 8008c50:	68a0      	ldr	r0, [r4, #8]
    reg.sleep_dur = val;
 8008c52:	f365 0303 	bfi	r3, r5, #0, #4
 8008c56:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008c5a:	aa01      	add	r2, sp, #4
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	215c      	movs	r1, #92	; 0x5c
 8008c60:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_WAKE_UP_DUR, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008c62:	b002      	add	sp, #8
 8008c64:	bd70      	pop	{r4, r5, r6, pc}
 8008c66:	bf00      	nop

08008c68 <lsm6dso_tap_detection_on_z_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of tap_z_en in reg TAP_CFG0
  *
  */
int32_t lsm6dso_tap_detection_on_z_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008c70:	6880      	ldr	r0, [r0, #8]
 8008c72:	6866      	ldr	r6, [r4, #4]
 8008c74:	2301      	movs	r3, #1
 8008c76:	aa01      	add	r2, sp, #4
 8008c78:	2156      	movs	r1, #86	; 0x56
 8008c7a:	47b0      	blx	r6
  lsm6dso_tap_cfg0_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG0, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008c7c:	b958      	cbnz	r0, 8008c96 <lsm6dso_tap_detection_on_z_set+0x2e>
    reg.tap_z_en = val;
 8008c7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008c82:	6826      	ldr	r6, [r4, #0]
 8008c84:	68a0      	ldr	r0, [r4, #8]
    reg.tap_z_en = val;
 8008c86:	f365 0341 	bfi	r3, r5, #1, #1
 8008c8a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008c8e:	aa01      	add	r2, sp, #4
 8008c90:	2301      	movs	r3, #1
 8008c92:	2156      	movs	r1, #86	; 0x56
 8008c94:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG0, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008c96:	b002      	add	sp, #8
 8008c98:	bd70      	pop	{r4, r5, r6, pc}
 8008c9a:	bf00      	nop

08008c9c <lsm6dso_tap_detection_on_y_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of tap_y_en in reg TAP_CFG0
  *
  */
int32_t lsm6dso_tap_detection_on_y_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008ca4:	6880      	ldr	r0, [r0, #8]
 8008ca6:	6866      	ldr	r6, [r4, #4]
 8008ca8:	2301      	movs	r3, #1
 8008caa:	aa01      	add	r2, sp, #4
 8008cac:	2156      	movs	r1, #86	; 0x56
 8008cae:	47b0      	blx	r6
  lsm6dso_tap_cfg0_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG0, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008cb0:	b958      	cbnz	r0, 8008cca <lsm6dso_tap_detection_on_y_set+0x2e>
    reg.tap_y_en = val;
 8008cb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008cb6:	6826      	ldr	r6, [r4, #0]
 8008cb8:	68a0      	ldr	r0, [r4, #8]
    reg.tap_y_en = val;
 8008cba:	f365 0382 	bfi	r3, r5, #2, #1
 8008cbe:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008cc2:	aa01      	add	r2, sp, #4
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	2156      	movs	r1, #86	; 0x56
 8008cc8:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG0, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008cca:	b002      	add	sp, #8
 8008ccc:	bd70      	pop	{r4, r5, r6, pc}
 8008cce:	bf00      	nop

08008cd0 <lsm6dso_tap_detection_on_x_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of tap_x_en in reg TAP_CFG0
  *
  */
int32_t lsm6dso_tap_detection_on_x_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008cd0:	b570      	push	{r4, r5, r6, lr}
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008cd8:	6880      	ldr	r0, [r0, #8]
 8008cda:	6866      	ldr	r6, [r4, #4]
 8008cdc:	2301      	movs	r3, #1
 8008cde:	aa01      	add	r2, sp, #4
 8008ce0:	2156      	movs	r1, #86	; 0x56
 8008ce2:	47b0      	blx	r6
  lsm6dso_tap_cfg0_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG0, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008ce4:	b958      	cbnz	r0, 8008cfe <lsm6dso_tap_detection_on_x_set+0x2e>
    reg.tap_x_en = val;
 8008ce6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008cea:	6826      	ldr	r6, [r4, #0]
 8008cec:	68a0      	ldr	r0, [r4, #8]
    reg.tap_x_en = val;
 8008cee:	f365 03c3 	bfi	r3, r5, #3, #1
 8008cf2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008cf6:	aa01      	add	r2, sp, #4
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	2156      	movs	r1, #86	; 0x56
 8008cfc:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG0, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008cfe:	b002      	add	sp, #8
 8008d00:	bd70      	pop	{r4, r5, r6, pc}
 8008d02:	bf00      	nop

08008d04 <lsm6dso_tap_threshold_x_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of tap_ths_x in reg TAP_CFG1
  *
  */
int32_t lsm6dso_tap_threshold_x_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008d04:	b570      	push	{r4, r5, r6, lr}
 8008d06:	4604      	mov	r4, r0
 8008d08:	b082      	sub	sp, #8
 8008d0a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008d0c:	6880      	ldr	r0, [r0, #8]
 8008d0e:	6866      	ldr	r6, [r4, #4]
 8008d10:	2301      	movs	r3, #1
 8008d12:	aa01      	add	r2, sp, #4
 8008d14:	2157      	movs	r1, #87	; 0x57
 8008d16:	47b0      	blx	r6
  lsm6dso_tap_cfg1_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG1, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008d18:	b958      	cbnz	r0, 8008d32 <lsm6dso_tap_threshold_x_set+0x2e>
    reg.tap_ths_x = val;
 8008d1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008d1e:	6826      	ldr	r6, [r4, #0]
 8008d20:	68a0      	ldr	r0, [r4, #8]
    reg.tap_ths_x = val;
 8008d22:	f365 0304 	bfi	r3, r5, #0, #5
 8008d26:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008d2a:	aa01      	add	r2, sp, #4
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	2157      	movs	r1, #87	; 0x57
 8008d30:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG1, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008d32:	b002      	add	sp, #8
 8008d34:	bd70      	pop	{r4, r5, r6, pc}
 8008d36:	bf00      	nop

08008d38 <lsm6dso_tap_shock_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of shock in reg INT_DUR2
  *
  */
int32_t lsm6dso_tap_shock_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008d40:	6880      	ldr	r0, [r0, #8]
 8008d42:	6866      	ldr	r6, [r4, #4]
 8008d44:	2301      	movs	r3, #1
 8008d46:	aa01      	add	r2, sp, #4
 8008d48:	215a      	movs	r1, #90	; 0x5a
 8008d4a:	47b0      	blx	r6
  lsm6dso_int_dur2_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT_DUR2, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008d4c:	b958      	cbnz	r0, 8008d66 <lsm6dso_tap_shock_set+0x2e>
    reg.shock = val;
 8008d4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008d52:	6826      	ldr	r6, [r4, #0]
 8008d54:	68a0      	ldr	r0, [r4, #8]
    reg.shock = val;
 8008d56:	f365 0301 	bfi	r3, r5, #0, #2
 8008d5a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008d5e:	aa01      	add	r2, sp, #4
 8008d60:	2301      	movs	r3, #1
 8008d62:	215a      	movs	r1, #90	; 0x5a
 8008d64:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT_DUR2, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008d66:	b002      	add	sp, #8
 8008d68:	bd70      	pop	{r4, r5, r6, pc}
 8008d6a:	bf00      	nop

08008d6c <lsm6dso_tap_quiet_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of quiet in reg INT_DUR2
  *
  */
int32_t lsm6dso_tap_quiet_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008d6c:	b570      	push	{r4, r5, r6, lr}
 8008d6e:	4604      	mov	r4, r0
 8008d70:	b082      	sub	sp, #8
 8008d72:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008d74:	6880      	ldr	r0, [r0, #8]
 8008d76:	6866      	ldr	r6, [r4, #4]
 8008d78:	2301      	movs	r3, #1
 8008d7a:	aa01      	add	r2, sp, #4
 8008d7c:	215a      	movs	r1, #90	; 0x5a
 8008d7e:	47b0      	blx	r6
  lsm6dso_int_dur2_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT_DUR2, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008d80:	b958      	cbnz	r0, 8008d9a <lsm6dso_tap_quiet_set+0x2e>
    reg.quiet = val;
 8008d82:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008d86:	6826      	ldr	r6, [r4, #0]
 8008d88:	68a0      	ldr	r0, [r4, #8]
    reg.quiet = val;
 8008d8a:	f365 0383 	bfi	r3, r5, #2, #2
 8008d8e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008d92:	aa01      	add	r2, sp, #4
 8008d94:	2301      	movs	r3, #1
 8008d96:	215a      	movs	r1, #90	; 0x5a
 8008d98:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT_DUR2, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008d9a:	b002      	add	sp, #8
 8008d9c:	bd70      	pop	{r4, r5, r6, pc}
 8008d9e:	bf00      	nop

08008da0 <lsm6dso_tap_dur_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of dur in reg INT_DUR2
  *
  */
int32_t lsm6dso_tap_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	4604      	mov	r4, r0
 8008da4:	b082      	sub	sp, #8
 8008da6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008da8:	6880      	ldr	r0, [r0, #8]
 8008daa:	6866      	ldr	r6, [r4, #4]
 8008dac:	2301      	movs	r3, #1
 8008dae:	aa01      	add	r2, sp, #4
 8008db0:	215a      	movs	r1, #90	; 0x5a
 8008db2:	47b0      	blx	r6
  lsm6dso_int_dur2_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT_DUR2, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008db4:	b958      	cbnz	r0, 8008dce <lsm6dso_tap_dur_set+0x2e>
    reg.dur = val;
 8008db6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008dba:	6826      	ldr	r6, [r4, #0]
 8008dbc:	68a0      	ldr	r0, [r4, #8]
    reg.dur = val;
 8008dbe:	f365 1307 	bfi	r3, r5, #4, #4
 8008dc2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008dc6:	aa01      	add	r2, sp, #4
 8008dc8:	2301      	movs	r3, #1
 8008dca:	215a      	movs	r1, #90	; 0x5a
 8008dcc:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT_DUR2, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008dce:	b002      	add	sp, #8
 8008dd0:	bd70      	pop	{r4, r5, r6, pc}
 8008dd2:	bf00      	nop

08008dd4 <lsm6dso_tap_mode_set>:
  * @param  val      change the values of single_double_tap in reg WAKE_UP_THS
  *
  */
int32_t lsm6dso_tap_mode_set(stmdev_ctx_t *ctx,
                             lsm6dso_single_double_tap_t val)
{
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	b082      	sub	sp, #8
 8008dda:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008ddc:	6880      	ldr	r0, [r0, #8]
 8008dde:	6866      	ldr	r6, [r4, #4]
 8008de0:	2301      	movs	r3, #1
 8008de2:	aa01      	add	r2, sp, #4
 8008de4:	215b      	movs	r1, #91	; 0x5b
 8008de6:	47b0      	blx	r6
  lsm6dso_wake_up_ths_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WAKE_UP_THS, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008de8:	b958      	cbnz	r0, 8008e02 <lsm6dso_tap_mode_set+0x2e>
    reg.single_double_tap = (uint8_t)val;
 8008dea:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008dee:	6826      	ldr	r6, [r4, #0]
 8008df0:	68a0      	ldr	r0, [r4, #8]
    reg.single_double_tap = (uint8_t)val;
 8008df2:	f365 13c7 	bfi	r3, r5, #7, #1
 8008df6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008dfa:	aa01      	add	r2, sp, #4
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	215b      	movs	r1, #91	; 0x5b
 8008e00:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_WAKE_UP_THS, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008e02:	b002      	add	sp, #8
 8008e04:	bd70      	pop	{r4, r5, r6, pc}
 8008e06:	bf00      	nop

08008e08 <lsm6dso_6d_threshold_set>:
  * @param  val      change the values of sixd_ths in reg TAP_THS_6D
  *
  */
int32_t lsm6dso_6d_threshold_set(stmdev_ctx_t *ctx,
                                 lsm6dso_sixd_ths_t val)
{
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008e10:	6880      	ldr	r0, [r0, #8]
 8008e12:	6866      	ldr	r6, [r4, #4]
 8008e14:	2301      	movs	r3, #1
 8008e16:	aa01      	add	r2, sp, #4
 8008e18:	2159      	movs	r1, #89	; 0x59
 8008e1a:	47b0      	blx	r6
  lsm6dso_tap_ths_6d_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008e1c:	b958      	cbnz	r0, 8008e36 <lsm6dso_6d_threshold_set+0x2e>
    reg.sixd_ths = (uint8_t)val;
 8008e1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008e22:	6826      	ldr	r6, [r4, #0]
 8008e24:	68a0      	ldr	r0, [r4, #8]
    reg.sixd_ths = (uint8_t)val;
 8008e26:	f365 1346 	bfi	r3, r5, #5, #2
 8008e2a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008e2e:	aa01      	add	r2, sp, #4
 8008e30:	2301      	movs	r3, #1
 8008e32:	2159      	movs	r1, #89	; 0x59
 8008e34:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008e36:	b002      	add	sp, #8
 8008e38:	bd70      	pop	{r4, r5, r6, pc}
 8008e3a:	bf00      	nop

08008e3c <lsm6dso_ff_threshold_set>:
  * @param  val      change the values of ff_ths in reg FREE_FALL
  *
  */
int32_t lsm6dso_ff_threshold_set(stmdev_ctx_t *ctx,
                                 lsm6dso_ff_ths_t val)
{
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	4604      	mov	r4, r0
 8008e40:	b082      	sub	sp, #8
 8008e42:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008e44:	6880      	ldr	r0, [r0, #8]
 8008e46:	6866      	ldr	r6, [r4, #4]
 8008e48:	2301      	movs	r3, #1
 8008e4a:	aa01      	add	r2, sp, #4
 8008e4c:	215d      	movs	r1, #93	; 0x5d
 8008e4e:	47b0      	blx	r6
  lsm6dso_free_fall_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FREE_FALL, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008e50:	b958      	cbnz	r0, 8008e6a <lsm6dso_ff_threshold_set+0x2e>
    reg.ff_ths = (uint8_t)val;
 8008e52:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008e56:	6826      	ldr	r6, [r4, #0]
 8008e58:	68a0      	ldr	r0, [r4, #8]
    reg.ff_ths = (uint8_t)val;
 8008e5a:	f365 0302 	bfi	r3, r5, #0, #3
 8008e5e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008e62:	aa01      	add	r2, sp, #4
 8008e64:	2301      	movs	r3, #1
 8008e66:	215d      	movs	r1, #93	; 0x5d
 8008e68:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FREE_FALL, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008e6a:	b002      	add	sp, #8
 8008e6c:	bd70      	pop	{r4, r5, r6, pc}
 8008e6e:	bf00      	nop

08008e70 <lsm6dso_ff_dur_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of ff_dur in reg FREE_FALL
  *
  */
int32_t lsm6dso_ff_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	4604      	mov	r4, r0
 8008e74:	b082      	sub	sp, #8
 8008e76:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008e78:	6880      	ldr	r0, [r0, #8]
 8008e7a:	6866      	ldr	r6, [r4, #4]
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	466a      	mov	r2, sp
 8008e80:	215c      	movs	r1, #92	; 0x5c
 8008e82:	47b0      	blx	r6
  lsm6dso_free_fall_t free_fall;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WAKE_UP_DUR,
                         (uint8_t *)&wake_up_dur, 1);

  if (ret == 0) {
 8008e84:	bb00      	cbnz	r0, 8008ec8 <lsm6dso_ff_dur_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008e86:	68a0      	ldr	r0, [r4, #8]
 8008e88:	6866      	ldr	r6, [r4, #4]
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	aa01      	add	r2, sp, #4
 8008e8e:	215d      	movs	r1, #93	; 0x5d
 8008e90:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FREE_FALL, (uint8_t *)&free_fall,
                           1);
  }

  if (ret == 0) {
 8008e92:	b9c8      	cbnz	r0, 8008ec8 <lsm6dso_ff_dur_set+0x58>
    wake_up_dur.ff_dur = ((uint8_t)val & 0x20U) >> 5;
 8008e94:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008e98:	68a0      	ldr	r0, [r4, #8]
    wake_up_dur.ff_dur = ((uint8_t)val & 0x20U) >> 5;
 8008e9a:	0969      	lsrs	r1, r5, #5
 8008e9c:	f361 13c7 	bfi	r3, r1, #7, #1
 8008ea0:	f88d 3000 	strb.w	r3, [sp]
    free_fall.ff_dur = (uint8_t)val & 0x1FU;
 8008ea4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008ea8:	f365 03c7 	bfi	r3, r5, #3, #5
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008eac:	466a      	mov	r2, sp
 8008eae:	6825      	ldr	r5, [r4, #0]
    free_fall.ff_dur = (uint8_t)val & 0x1FU;
 8008eb0:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008eb4:	215c      	movs	r1, #92	; 0x5c
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_WAKE_UP_DUR,
                            (uint8_t *)&wake_up_dur, 1);
  }

  if (ret == 0) {
 8008eba:	b928      	cbnz	r0, 8008ec8 <lsm6dso_ff_dur_set+0x58>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ebc:	6825      	ldr	r5, [r4, #0]
 8008ebe:	68a0      	ldr	r0, [r4, #8]
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	aa01      	add	r2, sp, #4
 8008ec4:	215d      	movs	r1, #93	; 0x5d
 8008ec6:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FREE_FALL, (uint8_t *)&free_fall,
                            1);
  }

  return ret;
}
 8008ec8:	b002      	add	sp, #8
 8008eca:	bd70      	pop	{r4, r5, r6, pc}

08008ecc <lsm6dso_fifo_mode_set>:
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	4604      	mov	r4, r0
 8008ed0:	b082      	sub	sp, #8
 8008ed2:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008ed4:	6880      	ldr	r0, [r0, #8]
 8008ed6:	6866      	ldr	r6, [r4, #4]
 8008ed8:	2301      	movs	r3, #1
 8008eda:	aa01      	add	r2, sp, #4
 8008edc:	210a      	movs	r1, #10
 8008ede:	47b0      	blx	r6
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);

  if (ret == 0) {
 8008ee0:	b958      	cbnz	r0, 8008efa <lsm6dso_fifo_mode_set+0x2e>
    reg.fifo_mode = (uint8_t)val;
 8008ee2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ee6:	6826      	ldr	r6, [r4, #0]
 8008ee8:	68a0      	ldr	r0, [r4, #8]
    reg.fifo_mode = (uint8_t)val;
 8008eea:	f365 0302 	bfi	r3, r5, #0, #3
 8008eee:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ef2:	aa01      	add	r2, sp, #4
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	210a      	movs	r1, #10
 8008ef8:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8008efa:	b002      	add	sp, #8
 8008efc:	bd70      	pop	{r4, r5, r6, pc}
 8008efe:	bf00      	nop

08008f00 <lsm6dso_pedo_sens_set>:
  * @param  val      turn on and configure pedometer
  *
  */
int32_t lsm6dso_pedo_sens_set(stmdev_ctx_t *ctx,
                              lsm6dso_pedo_md_t val)
{
 8008f00:	b530      	push	{r4, r5, lr}
 8008f02:	b083      	sub	sp, #12
 8008f04:	460c      	mov	r4, r1
  lsm6dso_pedo_cmd_reg_t pedo_cmd_reg;
  int32_t ret;
  ret = lsm6dso_ln_pg_read_byte(ctx, LSM6DSO_PEDO_CMD_REG,
 8008f06:	aa01      	add	r2, sp, #4
 8008f08:	f240 1183 	movw	r1, #387	; 0x183
{
 8008f0c:	4605      	mov	r5, r0
  ret = lsm6dso_ln_pg_read_byte(ctx, LSM6DSO_PEDO_CMD_REG,
 8008f0e:	f7ff fd87 	bl	8008a20 <lsm6dso_ln_pg_read_byte>
                                (uint8_t *)&pedo_cmd_reg);

  if (ret == 0) {
 8008f12:	b108      	cbz	r0, 8008f18 <lsm6dso_pedo_sens_set+0x18>
    ret = lsm6dso_ln_pg_write_byte(ctx, LSM6DSO_PEDO_CMD_REG,
                                   (uint8_t *)&pedo_cmd_reg);
  }

  return ret;
}
 8008f14:	b003      	add	sp, #12
 8008f16:	bd30      	pop	{r4, r5, pc}
    pedo_cmd_reg.ad_det_en = ((uint8_t)val & 0x20U) >> 5;
 8008f18:	f3c4 1100 	ubfx	r1, r4, #4, #1
 8008f1c:	f3c4 1440 	ubfx	r4, r4, #5, #1
 8008f20:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
 8008f24:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8008f28:	f021 0105 	bic.w	r1, r1, #5
 8008f2c:	430c      	orrs	r4, r1
    ret = lsm6dso_ln_pg_write_byte(ctx, LSM6DSO_PEDO_CMD_REG,
 8008f2e:	aa01      	add	r2, sp, #4
 8008f30:	f240 1183 	movw	r1, #387	; 0x183
 8008f34:	4628      	mov	r0, r5
    pedo_cmd_reg.ad_det_en = ((uint8_t)val & 0x20U) >> 5;
 8008f36:	f88d 4004 	strb.w	r4, [sp, #4]
    ret = lsm6dso_ln_pg_write_byte(ctx, LSM6DSO_PEDO_CMD_REG,
 8008f3a:	f7ff fced 	bl	8008918 <lsm6dso_ln_pg_write_byte>
}
 8008f3e:	b003      	add	sp, #12
 8008f40:	bd30      	pop	{r4, r5, pc}
 8008f42:	bf00      	nop

08008f44 <lsm6dso_tilt_flag_data_ready_get>:
  * @param  val      change the values of is_tilt in reg EMB_FUNC_STATUS
  *
  */
int32_t lsm6dso_tilt_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	4604      	mov	r4, r0
 8008f48:	b082      	sub	sp, #8
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008f4a:	2301      	movs	r3, #1
{
 8008f4c:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008f4e:	6880      	ldr	r0, [r0, #8]
 8008f50:	6866      	ldr	r6, [r4, #4]
 8008f52:	aa01      	add	r2, sp, #4
 8008f54:	4619      	mov	r1, r3
 8008f56:	47b0      	blx	r6
  if (ret == 0) {
 8008f58:	bb60      	cbnz	r0, 8008fb4 <lsm6dso_tilt_flag_data_ready_get+0x70>
    reg.reg_access = (uint8_t)val;
 8008f5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008f5e:	68a0      	ldr	r0, [r4, #8]
 8008f60:	6826      	ldr	r6, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8008f62:	2302      	movs	r3, #2
 8008f64:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008f68:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008f6a:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008f6e:	4619      	mov	r1, r3
 8008f70:	aa01      	add	r2, sp, #4
 8008f72:	47b0      	blx	r6
  lsm6dso_emb_func_status_t reg;
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 8008f74:	b9f0      	cbnz	r0, 8008fb4 <lsm6dso_tilt_flag_data_ready_get+0x70>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008f76:	68a0      	ldr	r0, [r4, #8]
 8008f78:	6866      	ldr	r6, [r4, #4]
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	466a      	mov	r2, sp
 8008f7e:	2112      	movs	r1, #18
 8008f80:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_STATUS, (uint8_t *)&reg,
                           1);
  }

  if (ret == 0) {
 8008f82:	b9b8      	cbnz	r0, 8008fb4 <lsm6dso_tilt_flag_data_ready_get+0x70>
    *val = reg.is_tilt;
 8008f84:	f89d 2000 	ldrb.w	r2, [sp]
 8008f88:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8008f8c:	702a      	strb	r2, [r5, #0]
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 8008f94:	aa01      	add	r2, sp, #4
 8008f96:	4619      	mov	r1, r3
 8008f98:	47a8      	blx	r5
  if (ret == 0) {
 8008f9a:	b958      	cbnz	r0, 8008fb4 <lsm6dso_tilt_flag_data_ready_get+0x70>
    reg.reg_access = (uint8_t)val;
 8008f9c:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008fa0:	6825      	ldr	r5, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8008fa2:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008fa6:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008fa8:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008fac:	68a0      	ldr	r0, [r4, #8]
 8008fae:	aa01      	add	r2, sp, #4
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	47a8      	blx	r5
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 8008fb4:	b002      	add	sp, #8
 8008fb6:	bd70      	pop	{r4, r5, r6, pc}

08008fb8 <lsm6dso_fsm_data_rate_get>:
  * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	4604      	mov	r4, r0
 8008fbc:	b082      	sub	sp, #8
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008fbe:	2301      	movs	r3, #1
{
 8008fc0:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008fc2:	6880      	ldr	r0, [r0, #8]
 8008fc4:	6866      	ldr	r6, [r4, #4]
 8008fc6:	aa01      	add	r2, sp, #4
 8008fc8:	4619      	mov	r1, r3
 8008fca:	47b0      	blx	r6
  if (ret == 0) {
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d133      	bne.n	8009038 <lsm6dso_fsm_data_rate_get+0x80>
    reg.reg_access = (uint8_t)val;
 8008fd0:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008fd4:	68a0      	ldr	r0, [r4, #8]
 8008fd6:	6826      	ldr	r6, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8008fd8:	2302      	movs	r3, #2
 8008fda:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008fde:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008fe0:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	aa01      	add	r2, sp, #4
 8008fe8:	47b0      	blx	r6
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 8008fea:	bb28      	cbnz	r0, 8009038 <lsm6dso_fsm_data_rate_get+0x80>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008fec:	68a0      	ldr	r0, [r4, #8]
 8008fee:	6866      	ldr	r6, [r4, #4]
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	466a      	mov	r2, sp
 8008ff4:	215f      	movs	r1, #95	; 0x5f
 8008ff6:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8008ff8:	b9f0      	cbnz	r0, 8009038 <lsm6dso_fsm_data_rate_get+0x80>
    switch (reg.fsm_odr) {
 8008ffa:	f89d 3000 	ldrb.w	r3, [sp]
 8008ffe:	f3c3 02c1 	ubfx	r2, r3, #3, #2
 8009002:	2a02      	cmp	r2, #2
 8009004:	4613      	mov	r3, r2
 8009006:	d019      	beq.n	800903c <lsm6dso_fsm_data_rate_get+0x84>
 8009008:	2a03      	cmp	r2, #3
 800900a:	d017      	beq.n	800903c <lsm6dso_fsm_data_rate_get+0x84>
 800900c:	2a01      	cmp	r2, #1
 800900e:	d015      	beq.n	800903c <lsm6dso_fsm_data_rate_get+0x84>
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8009010:	7028      	strb	r0, [r5, #0]
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009012:	2301      	movs	r3, #1
 8009014:	6865      	ldr	r5, [r4, #4]
 8009016:	68a0      	ldr	r0, [r4, #8]
 8009018:	aa01      	add	r2, sp, #4
 800901a:	4619      	mov	r1, r3
 800901c:	47a8      	blx	r5
  if (ret == 0) {
 800901e:	b958      	cbnz	r0, 8009038 <lsm6dso_fsm_data_rate_get+0x80>
    reg.reg_access = (uint8_t)val;
 8009020:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009024:	6825      	ldr	r5, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8009026:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800902a:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 800902c:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009030:	68a0      	ldr	r0, [r4, #8]
 8009032:	aa01      	add	r2, sp, #4
 8009034:	4619      	mov	r1, r3
 8009036:	47a8      	blx	r5

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 8009038:	b002      	add	sp, #8
 800903a:	bd70      	pop	{r4, r5, r6, pc}
        *val = LSM6DSO_ODR_FSM_104Hz;
 800903c:	702b      	strb	r3, [r5, #0]
        break;
 800903e:	e7e8      	b.n	8009012 <lsm6dso_fsm_data_rate_get+0x5a>

08009040 <lsm6dso_xl_data_rate_set>:
{
 8009040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009042:	4604      	mov	r4, r0
 8009044:	b085      	sub	sp, #20
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009046:	2301      	movs	r3, #1
{
 8009048:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800904a:	6880      	ldr	r0, [r0, #8]
 800904c:	6866      	ldr	r6, [r4, #4]
 800904e:	aa03      	add	r2, sp, #12
 8009050:	4619      	mov	r1, r3
 8009052:	47b0      	blx	r6
  if (ret == 0) {
 8009054:	2800      	cmp	r0, #0
 8009056:	d172      	bne.n	800913e <lsm6dso_xl_data_rate_set+0xfe>
    reg.reg_access = (uint8_t)val;
 8009058:	f89d 300c 	ldrb.w	r3, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800905c:	68a0      	ldr	r0, [r4, #8]
 800905e:	6827      	ldr	r7, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8009060:	2602      	movs	r6, #2
 8009062:	f366 1387 	bfi	r3, r6, #6, #2
 8009066:	f88d 300c 	strb.w	r3, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800906a:	2301      	movs	r3, #1
 800906c:	aa03      	add	r2, sp, #12
 800906e:	4619      	mov	r1, r3
 8009070:	47b8      	blx	r7
  if (ret == 0) {
 8009072:	2800      	cmp	r0, #0
 8009074:	d163      	bne.n	800913e <lsm6dso_xl_data_rate_set+0xfe>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009076:	4633      	mov	r3, r6
 8009078:	68a0      	ldr	r0, [r4, #8]
 800907a:	6866      	ldr	r6, [r4, #4]
 800907c:	aa03      	add	r2, sp, #12
 800907e:	2146      	movs	r1, #70	; 0x46
 8009080:	47b0      	blx	r6
  if (ret == 0) {
 8009082:	2800      	cmp	r0, #0
 8009084:	d15b      	bne.n	800913e <lsm6dso_xl_data_rate_set+0xfe>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009086:	2301      	movs	r3, #1
 8009088:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 800908c:	aa02      	add	r2, sp, #8
 800908e:	4619      	mov	r1, r3
 8009090:	47b0      	blx	r6
  if (ret == 0) {
 8009092:	2800      	cmp	r0, #0
 8009094:	d153      	bne.n	800913e <lsm6dso_xl_data_rate_set+0xfe>
    reg.reg_access = (uint8_t)val;
 8009096:	f89d 2008 	ldrb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800909a:	6826      	ldr	r6, [r4, #0]
    reg.reg_access = (uint8_t)val;
 800909c:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80090a0:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 80090a2:	f88d 2008 	strb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80090a6:	68a0      	ldr	r0, [r4, #8]
 80090a8:	aa02      	add	r2, sp, #8
 80090aa:	4619      	mov	r1, r3
 80090ac:	47b0      	blx	r6
  if (ret == 0) {
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d145      	bne.n	800913e <lsm6dso_xl_data_rate_set+0xfe>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80090b2:	f89d 100c 	ldrb.w	r1, [sp, #12]
          fsm_enable.fsm_enable_a.fsm2_en  |
 80090b6:	f3c1 0240 	ubfx	r2, r1, #1, #1
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80090ba:	f3c1 0300 	ubfx	r3, r1, #0, #1
 80090be:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm3_en  |
 80090c0:	f3c1 0280 	ubfx	r2, r1, #2, #1
          fsm_enable.fsm_enable_a.fsm2_en  |
 80090c4:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm4_en  |
 80090c6:	f3c1 02c0 	ubfx	r2, r1, #3, #1
          fsm_enable.fsm_enable_a.fsm3_en  |
 80090ca:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm5_en  |
 80090cc:	f3c1 1200 	ubfx	r2, r1, #4, #1
          fsm_enable.fsm_enable_a.fsm4_en  |
 80090d0:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm6_en  |
 80090d2:	f3c1 1240 	ubfx	r2, r1, #5, #1
          fsm_enable.fsm_enable_a.fsm5_en  |
 80090d6:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm7_en  |
 80090d8:	f3c1 1080 	ubfx	r0, r1, #6, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 80090dc:	f89d 200d 	ldrb.w	r2, [sp, #13]
          fsm_enable.fsm_enable_a.fsm6_en  |
 80090e0:	4303      	orrs	r3, r0
          fsm_enable.fsm_enable_a.fsm7_en  |
 80090e2:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
          fsm_enable.fsm_enable_b.fsm9_en  |
 80090e6:	f3c2 0100 	ubfx	r1, r2, #0, #1
          fsm_enable.fsm_enable_a.fsm8_en  |
 80090ea:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm10_en |
 80090ec:	f3c2 0140 	ubfx	r1, r2, #1, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 80090f0:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm11_en |
 80090f2:	f3c2 0180 	ubfx	r1, r2, #2, #1
          fsm_enable.fsm_enable_b.fsm10_en |
 80090f6:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm12_en |
 80090f8:	f3c2 01c0 	ubfx	r1, r2, #3, #1
          fsm_enable.fsm_enable_b.fsm11_en |
 80090fc:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm13_en |
 80090fe:	f3c2 1100 	ubfx	r1, r2, #4, #1
          fsm_enable.fsm_enable_b.fsm12_en |
 8009102:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm14_en |
 8009104:	f3c2 1140 	ubfx	r1, r2, #5, #1
          fsm_enable.fsm_enable_b.fsm13_en |
 8009108:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 800910a:	f3c2 1180 	ubfx	r1, r2, #6, #1
          fsm_enable.fsm_enable_b.fsm14_en |
 800910e:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 8009110:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8009114:	07db      	lsls	r3, r3, #31
 8009116:	d414      	bmi.n	8009142 <lsm6dso_xl_data_rate_set+0x102>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009118:	6866      	ldr	r6, [r4, #4]
 800911a:	68a0      	ldr	r0, [r4, #8]
 800911c:	2301      	movs	r3, #1
 800911e:	aa01      	add	r2, sp, #4
 8009120:	2110      	movs	r1, #16
 8009122:	47b0      	blx	r6
  if (ret == 0) {
 8009124:	b958      	cbnz	r0, 800913e <lsm6dso_xl_data_rate_set+0xfe>
    reg.odr_xl = (uint8_t) odr_xl;
 8009126:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800912a:	6826      	ldr	r6, [r4, #0]
 800912c:	68a0      	ldr	r0, [r4, #8]
    reg.odr_xl = (uint8_t) odr_xl;
 800912e:	f365 1307 	bfi	r3, r5, #4, #4
 8009132:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009136:	aa01      	add	r2, sp, #4
 8009138:	2301      	movs	r3, #1
 800913a:	2110      	movs	r1, #16
 800913c:	47b0      	blx	r6
}
 800913e:	b005      	add	sp, #20
 8009140:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8009142:	a902      	add	r1, sp, #8
 8009144:	4620      	mov	r0, r4
 8009146:	f7ff ff37 	bl	8008fb8 <lsm6dso_fsm_data_rate_get>
      if (ret == 0) {
 800914a:	2800      	cmp	r0, #0
 800914c:	d1f7      	bne.n	800913e <lsm6dso_xl_data_rate_set+0xfe>
        switch (fsm_odr) {
 800914e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009152:	2b03      	cmp	r3, #3
 8009154:	d8e0      	bhi.n	8009118 <lsm6dso_xl_data_rate_set+0xd8>
 8009156:	e8df f003 	tbb	[pc, r3]
 800915a:	0a0e      	.short	0x0a0e
 800915c:	0206      	.short	0x0206
            if (val == LSM6DSO_XL_ODR_OFF) {
 800915e:	2d04      	cmp	r5, #4
 8009160:	bf38      	it	cc
 8009162:	2504      	movcc	r5, #4
 8009164:	e7d8      	b.n	8009118 <lsm6dso_xl_data_rate_set+0xd8>
            if (val == LSM6DSO_XL_ODR_OFF) {
 8009166:	2d03      	cmp	r5, #3
 8009168:	bf38      	it	cc
 800916a:	2503      	movcc	r5, #3
 800916c:	e7d4      	b.n	8009118 <lsm6dso_xl_data_rate_set+0xd8>
            if (val == LSM6DSO_XL_ODR_OFF) {
 800916e:	2d02      	cmp	r5, #2
 8009170:	bf38      	it	cc
 8009172:	2502      	movcc	r5, #2
 8009174:	e7d0      	b.n	8009118 <lsm6dso_xl_data_rate_set+0xd8>
            if (val == LSM6DSO_XL_ODR_OFF) {
 8009176:	2d01      	cmp	r5, #1
 8009178:	bf38      	it	cc
 800917a:	2501      	movcc	r5, #1
  if (ret == 0) {
 800917c:	e7cc      	b.n	8009118 <lsm6dso_xl_data_rate_set+0xd8>
 800917e:	bf00      	nop

08009180 <lsm6dso_gy_data_rate_set>:
{
 8009180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009182:	4604      	mov	r4, r0
 8009184:	b085      	sub	sp, #20
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009186:	2301      	movs	r3, #1
{
 8009188:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800918a:	6880      	ldr	r0, [r0, #8]
 800918c:	6866      	ldr	r6, [r4, #4]
 800918e:	aa03      	add	r2, sp, #12
 8009190:	4619      	mov	r1, r3
 8009192:	47b0      	blx	r6
  if (ret == 0) {
 8009194:	2800      	cmp	r0, #0
 8009196:	d172      	bne.n	800927e <lsm6dso_gy_data_rate_set+0xfe>
    reg.reg_access = (uint8_t)val;
 8009198:	f89d 300c 	ldrb.w	r3, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800919c:	68a0      	ldr	r0, [r4, #8]
 800919e:	6827      	ldr	r7, [r4, #0]
    reg.reg_access = (uint8_t)val;
 80091a0:	2602      	movs	r6, #2
 80091a2:	f366 1387 	bfi	r3, r6, #6, #2
 80091a6:	f88d 300c 	strb.w	r3, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80091aa:	2301      	movs	r3, #1
 80091ac:	aa03      	add	r2, sp, #12
 80091ae:	4619      	mov	r1, r3
 80091b0:	47b8      	blx	r7
  if (ret == 0) {
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d163      	bne.n	800927e <lsm6dso_gy_data_rate_set+0xfe>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80091b6:	4633      	mov	r3, r6
 80091b8:	68a0      	ldr	r0, [r4, #8]
 80091ba:	6866      	ldr	r6, [r4, #4]
 80091bc:	aa03      	add	r2, sp, #12
 80091be:	2146      	movs	r1, #70	; 0x46
 80091c0:	47b0      	blx	r6
  if (ret == 0) {
 80091c2:	2800      	cmp	r0, #0
 80091c4:	d15b      	bne.n	800927e <lsm6dso_gy_data_rate_set+0xfe>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80091c6:	2301      	movs	r3, #1
 80091c8:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80091cc:	aa02      	add	r2, sp, #8
 80091ce:	4619      	mov	r1, r3
 80091d0:	47b0      	blx	r6
  if (ret == 0) {
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d153      	bne.n	800927e <lsm6dso_gy_data_rate_set+0xfe>
    reg.reg_access = (uint8_t)val;
 80091d6:	f89d 2008 	ldrb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80091da:	6826      	ldr	r6, [r4, #0]
    reg.reg_access = (uint8_t)val;
 80091dc:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80091e0:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 80091e2:	f88d 2008 	strb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80091e6:	68a0      	ldr	r0, [r4, #8]
 80091e8:	aa02      	add	r2, sp, #8
 80091ea:	4619      	mov	r1, r3
 80091ec:	47b0      	blx	r6
  if (ret == 0) {
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d145      	bne.n	800927e <lsm6dso_gy_data_rate_set+0xfe>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80091f2:	f89d 100c 	ldrb.w	r1, [sp, #12]
          fsm_enable.fsm_enable_a.fsm2_en  |
 80091f6:	f3c1 0240 	ubfx	r2, r1, #1, #1
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80091fa:	f3c1 0300 	ubfx	r3, r1, #0, #1
 80091fe:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm3_en  |
 8009200:	f3c1 0280 	ubfx	r2, r1, #2, #1
          fsm_enable.fsm_enable_a.fsm2_en  |
 8009204:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm4_en  |
 8009206:	f3c1 02c0 	ubfx	r2, r1, #3, #1
          fsm_enable.fsm_enable_a.fsm3_en  |
 800920a:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm5_en  |
 800920c:	f3c1 1200 	ubfx	r2, r1, #4, #1
          fsm_enable.fsm_enable_a.fsm4_en  |
 8009210:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm6_en  |
 8009212:	f3c1 1240 	ubfx	r2, r1, #5, #1
          fsm_enable.fsm_enable_a.fsm5_en  |
 8009216:	4313      	orrs	r3, r2
          fsm_enable.fsm_enable_a.fsm7_en  |
 8009218:	f3c1 1080 	ubfx	r0, r1, #6, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 800921c:	f89d 200d 	ldrb.w	r2, [sp, #13]
          fsm_enable.fsm_enable_a.fsm6_en  |
 8009220:	4303      	orrs	r3, r0
          fsm_enable.fsm_enable_a.fsm7_en  |
 8009222:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
          fsm_enable.fsm_enable_b.fsm9_en  |
 8009226:	f3c2 0100 	ubfx	r1, r2, #0, #1
          fsm_enable.fsm_enable_a.fsm8_en  |
 800922a:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm10_en |
 800922c:	f3c2 0140 	ubfx	r1, r2, #1, #1
          fsm_enable.fsm_enable_b.fsm9_en  |
 8009230:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm11_en |
 8009232:	f3c2 0180 	ubfx	r1, r2, #2, #1
          fsm_enable.fsm_enable_b.fsm10_en |
 8009236:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm12_en |
 8009238:	f3c2 01c0 	ubfx	r1, r2, #3, #1
          fsm_enable.fsm_enable_b.fsm11_en |
 800923c:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm13_en |
 800923e:	f3c2 1100 	ubfx	r1, r2, #4, #1
          fsm_enable.fsm_enable_b.fsm12_en |
 8009242:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm14_en |
 8009244:	f3c2 1140 	ubfx	r1, r2, #5, #1
          fsm_enable.fsm_enable_b.fsm13_en |
 8009248:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 800924a:	f3c2 1180 	ubfx	r1, r2, #6, #1
          fsm_enable.fsm_enable_b.fsm14_en |
 800924e:	430b      	orrs	r3, r1
          fsm_enable.fsm_enable_b.fsm15_en |
 8009250:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8009254:	07db      	lsls	r3, r3, #31
 8009256:	d414      	bmi.n	8009282 <lsm6dso_gy_data_rate_set+0x102>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009258:	6866      	ldr	r6, [r4, #4]
 800925a:	68a0      	ldr	r0, [r4, #8]
 800925c:	2301      	movs	r3, #1
 800925e:	aa01      	add	r2, sp, #4
 8009260:	2111      	movs	r1, #17
 8009262:	47b0      	blx	r6
  if (ret == 0) {
 8009264:	b958      	cbnz	r0, 800927e <lsm6dso_gy_data_rate_set+0xfe>
    reg.odr_g = (uint8_t) odr_gy;
 8009266:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800926a:	6826      	ldr	r6, [r4, #0]
 800926c:	68a0      	ldr	r0, [r4, #8]
    reg.odr_g = (uint8_t) odr_gy;
 800926e:	f365 1307 	bfi	r3, r5, #4, #4
 8009272:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009276:	aa01      	add	r2, sp, #4
 8009278:	2301      	movs	r3, #1
 800927a:	2111      	movs	r1, #17
 800927c:	47b0      	blx	r6
}
 800927e:	b005      	add	sp, #20
 8009280:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8009282:	a902      	add	r1, sp, #8
 8009284:	4620      	mov	r0, r4
 8009286:	f7ff fe97 	bl	8008fb8 <lsm6dso_fsm_data_rate_get>
      if (ret == 0) {
 800928a:	2800      	cmp	r0, #0
 800928c:	d1f7      	bne.n	800927e <lsm6dso_gy_data_rate_set+0xfe>
        switch (fsm_odr) {
 800928e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009292:	2b03      	cmp	r3, #3
 8009294:	d8e0      	bhi.n	8009258 <lsm6dso_gy_data_rate_set+0xd8>
 8009296:	e8df f003 	tbb	[pc, r3]
 800929a:	0a0e      	.short	0x0a0e
 800929c:	0206      	.short	0x0206
            if (val == LSM6DSO_GY_ODR_OFF) {
 800929e:	2d04      	cmp	r5, #4
 80092a0:	bf38      	it	cc
 80092a2:	2504      	movcc	r5, #4
 80092a4:	e7d8      	b.n	8009258 <lsm6dso_gy_data_rate_set+0xd8>
            if (val == LSM6DSO_GY_ODR_OFF) {
 80092a6:	2d03      	cmp	r5, #3
 80092a8:	bf38      	it	cc
 80092aa:	2503      	movcc	r5, #3
 80092ac:	e7d4      	b.n	8009258 <lsm6dso_gy_data_rate_set+0xd8>
            if (val == LSM6DSO_GY_ODR_OFF) {
 80092ae:	2d02      	cmp	r5, #2
 80092b0:	bf38      	it	cc
 80092b2:	2502      	movcc	r5, #2
 80092b4:	e7d0      	b.n	8009258 <lsm6dso_gy_data_rate_set+0xd8>
            if (val == LSM6DSO_GY_ODR_OFF) {
 80092b6:	2d01      	cmp	r5, #1
 80092b8:	bf38      	it	cc
 80092ba:	2501      	movcc	r5, #1
  if (ret == 0) {
 80092bc:	e7cc      	b.n	8009258 <lsm6dso_gy_data_rate_set+0xd8>
 80092be:	bf00      	nop

080092c0 <lsm6dso_pin_int1_route_get>:
  * @param  val          the signals that are routed on int1 pin.(ptr)
  *
  */
int32_t lsm6dso_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t *val)
{
 80092c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80092c4:	2301      	movs	r3, #1
{
 80092c6:	b088      	sub	sp, #32
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80092c8:	6846      	ldr	r6, [r0, #4]
{
 80092ca:	4604      	mov	r4, r0
 80092cc:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80092ce:	6880      	ldr	r0, [r0, #8]
 80092d0:	aa07      	add	r2, sp, #28
 80092d2:	4619      	mov	r1, r3
 80092d4:	47b0      	blx	r6
  if (ret == 0) {
 80092d6:	2800      	cmp	r0, #0
 80092d8:	f040 80fd 	bne.w	80094d6 <lsm6dso_pin_int1_route_get+0x216>
    reg.reg_access = (uint8_t)val;
 80092dc:	f89d 201c 	ldrb.w	r2, [sp, #28]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80092e0:	6826      	ldr	r6, [r4, #0]
 80092e2:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 80092e4:	2302      	movs	r3, #2
 80092e6:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80092ea:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 80092ec:	f88d 201c 	strb.w	r2, [sp, #28]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80092f0:	4619      	mov	r1, r3
 80092f2:	aa07      	add	r2, sp, #28
 80092f4:	47b0      	blx	r6
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f040 80ed 	bne.w	80094d6 <lsm6dso_pin_int1_route_get+0x216>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80092fc:	6866      	ldr	r6, [r4, #4]
 80092fe:	68a0      	ldr	r0, [r4, #8]
 8009300:	2301      	movs	r3, #1
 8009302:	466a      	mov	r2, sp
 8009304:	210a      	movs	r1, #10
 8009306:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT1,
                           (uint8_t *)&emb_func_int1, 1);
  }

  if (ret == 0) {
 8009308:	2800      	cmp	r0, #0
 800930a:	f040 80e4 	bne.w	80094d6 <lsm6dso_pin_int1_route_get+0x216>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800930e:	6866      	ldr	r6, [r4, #4]
 8009310:	68a0      	ldr	r0, [r4, #8]
 8009312:	2301      	movs	r3, #1
 8009314:	aa01      	add	r2, sp, #4
 8009316:	210b      	movs	r1, #11
 8009318:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_A,
                           (uint8_t *)&fsm_int1_a, 1);
  }

  if (ret == 0) {
 800931a:	2800      	cmp	r0, #0
 800931c:	f040 80db 	bne.w	80094d6 <lsm6dso_pin_int1_route_get+0x216>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009320:	6866      	ldr	r6, [r4, #4]
 8009322:	68a0      	ldr	r0, [r4, #8]
 8009324:	2301      	movs	r3, #1
 8009326:	aa02      	add	r2, sp, #8
 8009328:	210c      	movs	r1, #12
 800932a:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_B,
                           (uint8_t *)&fsm_int1_b, 1);
  }

  if (ret == 0) {
 800932c:	2800      	cmp	r0, #0
 800932e:	f040 80d2 	bne.w	80094d6 <lsm6dso_pin_int1_route_get+0x216>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009332:	2301      	movs	r3, #1
 8009334:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8009338:	aa07      	add	r2, sp, #28
 800933a:	4619      	mov	r1, r3
 800933c:	47b0      	blx	r6
  if (ret == 0) {
 800933e:	2800      	cmp	r0, #0
 8009340:	f040 80c9 	bne.w	80094d6 <lsm6dso_pin_int1_route_get+0x216>
    reg.reg_access = (uint8_t)val;
 8009344:	f89d 201c 	ldrb.w	r2, [sp, #28]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009348:	6826      	ldr	r6, [r4, #0]
    reg.reg_access = (uint8_t)val;
 800934a:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800934e:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8009350:	f88d 201c 	strb.w	r2, [sp, #28]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009354:	68a0      	ldr	r0, [r4, #8]
 8009356:	aa07      	add	r2, sp, #28
 8009358:	4619      	mov	r1, r3
 800935a:	47b0      	blx	r6
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  if (ret == 0) {
 800935c:	2800      	cmp	r0, #0
 800935e:	f040 80ba 	bne.w	80094d6 <lsm6dso_pin_int1_route_get+0x216>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009362:	6866      	ldr	r6, [r4, #4]
 8009364:	68a0      	ldr	r0, [r4, #8]
 8009366:	2301      	movs	r3, #1
 8009368:	aa03      	add	r2, sp, #12
 800936a:	210d      	movs	r1, #13
 800936c:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_INT1_CTRL,
                           (uint8_t *)&int1_ctrl, 1);
  }

  if (ret == 0) {
 800936e:	2800      	cmp	r0, #0
 8009370:	f040 80b1 	bne.w	80094d6 <lsm6dso_pin_int1_route_get+0x216>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009374:	6866      	ldr	r6, [r4, #4]
 8009376:	68a0      	ldr	r0, [r4, #8]
 8009378:	2301      	movs	r3, #1
 800937a:	aa06      	add	r2, sp, #24
 800937c:	215e      	movs	r1, #94	; 0x5e
 800937e:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
  }

  if (ret == 0) {
 8009380:	2800      	cmp	r0, #0
 8009382:	f040 80a8 	bne.w	80094d6 <lsm6dso_pin_int1_route_get+0x216>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009386:	2301      	movs	r3, #1
 8009388:	6866      	ldr	r6, [r4, #4]
 800938a:	68a0      	ldr	r0, [r4, #8]
 800938c:	aa07      	add	r2, sp, #28
 800938e:	2113      	movs	r1, #19
 8009390:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  }

  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE) {
 8009392:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8009396:	069b      	lsls	r3, r3, #26
 8009398:	f140 80a2 	bpl.w	80094e0 <lsm6dso_pin_int1_route_get+0x220>
    if (ret == 0) {
 800939c:	b9e0      	cbnz	r0, 80093d8 <lsm6dso_pin_int1_route_get+0x118>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800939e:	2301      	movs	r3, #1
 80093a0:	aa04      	add	r2, sp, #16
 80093a2:	6866      	ldr	r6, [r4, #4]
 80093a4:	68a0      	ldr	r0, [r4, #8]
 80093a6:	210e      	movs	r1, #14
 80093a8:	47b0      	blx	r6
      ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl,
                             1);
      val->drdy_temp = int2_ctrl.int2_drdy_temp;
 80093aa:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80093ae:	782a      	ldrb	r2, [r5, #0]
 80093b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80093b4:	f363 0282 	bfi	r2, r3, #2, #1
 80093b8:	702a      	strb	r2, [r5, #0]
    }

    if (ret == 0) {
 80093ba:	b968      	cbnz	r0, 80093d8 <lsm6dso_pin_int1_route_get+0x118>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80093bc:	2301      	movs	r3, #1
 80093be:	aa05      	add	r2, sp, #20
 80093c0:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80093c4:	215f      	movs	r1, #95	; 0x5f
 80093c6:	47b0      	blx	r6
      ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
      val->timestamp = md2_cfg.int2_timestamp;
 80093c8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80093cc:	786a      	ldrb	r2, [r5, #1]
 80093ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80093d2:	f363 0282 	bfi	r2, r3, #2, #1
 80093d6:	706a      	strb	r2, [r5, #1]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
  val->fifo_full = int1_ctrl.int1_fifo_full;
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
  val->den_flag  = int1_ctrl.den_drdy_flag;
  val->sh_endop     = md1_cfg.int1_shub;
 80093d8:	f89d a018 	ldrb.w	sl, [sp, #24]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 80093dc:	f89d 700c 	ldrb.w	r7, [sp, #12]
  val->double_tap   = md1_cfg.int1_double_tap;
  val->free_fall    = md1_cfg.int1_ff;
  val->wake_up      = md1_cfg.int1_wu;
  val->single_tap   = md1_cfg.int1_single_tap;
  val->sleep_change = md1_cfg.int1_sleep_change;
  val->step_detector = emb_func_int1.int1_step_detector;
 80093e0:	f89d 4000 	ldrb.w	r4, [sp]
  val->fsm4 = fsm_int1_a.int1_fsm4;
  val->fsm5 = fsm_int1_a.int1_fsm5;
  val->fsm6 = fsm_int1_a.int1_fsm6;
  val->fsm7 = fsm_int1_a.int1_fsm7;
  val->fsm8 = fsm_int1_a.int1_fsm8;
  val->fsm9  = fsm_int1_b.int1_fsm9;
 80093e4:	f89d c008 	ldrb.w	ip, [sp, #8]
  val->fsm1 = fsm_int1_a.int1_fsm1;
 80093e8:	f89d e004 	ldrb.w	lr, [sp, #4]
  val->den_flag  = int1_ctrl.den_drdy_flag;
 80093ec:	f895 9001 	ldrb.w	r9, [r5, #1]
  val->sh_endop     = md1_cfg.int1_shub;
 80093f0:	f00a 0101 	and.w	r1, sl, #1
  val->drdy_g    = int1_ctrl.int1_drdy_g;
 80093f4:	f3c7 0240 	ubfx	r2, r7, #1, #1
  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 80093f8:	f3c7 0300 	ubfx	r3, r7, #0, #1
  val->den_flag  = int1_ctrl.den_drdy_flag;
 80093fc:	0049      	lsls	r1, r1, #1
 80093fe:	ea41 11d7 	orr.w	r1, r1, r7, lsr #7
  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8009402:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  val->six_d        = md1_cfg.int1_6d;
 8009406:	f3ca 0280 	ubfx	r2, sl, #2, #1
  val->den_flag  = int1_ctrl.den_drdy_flag;
 800940a:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
  val->boot      = int1_ctrl.int1_boot;
 800940e:	f3c7 0280 	ubfx	r2, r7, #2, #1
  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8009412:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
  val->double_tap   = md1_cfg.int1_double_tap;
 8009416:	f3ca 02c0 	ubfx	r2, sl, #3, #1
  val->den_flag  = int1_ctrl.den_drdy_flag;
 800941a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 800941e:	f3c7 02c0 	ubfx	r2, r7, #3, #1
  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8009422:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  val->free_fall    = md1_cfg.int1_ff;
 8009426:	f3ca 1200 	ubfx	r2, sl, #4, #1
  val->den_flag  = int1_ctrl.den_drdy_flag;
 800942a:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 800942e:	f3c7 1200 	ubfx	r2, r7, #4, #1
  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8009432:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
  val->fsm10 = fsm_int1_b.int1_fsm10;
  val->fsm11 = fsm_int1_b.int1_fsm11;
  val->fsm12 = fsm_int1_b.int1_fsm12;
 8009436:	792a      	ldrb	r2, [r5, #4]
  val->step_detector = emb_func_int1.int1_step_detector;
 8009438:	f3c4 06c0 	ubfx	r6, r4, #3, #1
  val->sleep_change = md1_cfg.int1_sleep_change;
 800943c:	0076      	lsls	r6, r6, #1
  val->fsm12 = fsm_int1_b.int1_fsm12;
 800943e:	f022 021f 	bic.w	r2, r2, #31
  val->tilt          = emb_func_int1.int1_tilt;
 8009442:	f3c4 1800 	ubfx	r8, r4, #4, #1
  val->fsm12 = fsm_int1_b.int1_fsm12;
 8009446:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
  val->sleep_change = md1_cfg.int1_sleep_change;
 800944a:	ea46 16da 	orr.w	r6, r6, sl, lsr #7
 800944e:	ea46 0688 	orr.w	r6, r6, r8, lsl #2
  val->fsm12 = fsm_int1_b.int1_fsm12;
 8009452:	712a      	strb	r2, [r5, #4]
  val->sig_mot       = emb_func_int1.int1_sig_mot;
 8009454:	f3c4 1840 	ubfx	r8, r4, #5, #1
  val->wake_up      = md1_cfg.int1_wu;
 8009458:	f3ca 1240 	ubfx	r2, sl, #5, #1
  val->sleep_change = md1_cfg.int1_sleep_change;
 800945c:	ea46 06c8 	orr.w	r6, r6, r8, lsl #3
  val->fsm_lc        = emb_func_int1.int1_fsm_lc;
 8009460:	09e4      	lsrs	r4, r4, #7
  val->den_flag  = int1_ctrl.den_drdy_flag;
 8009462:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
  val->single_tap   = md1_cfg.int1_single_tap;
 8009466:	f3ca 1280 	ubfx	r2, sl, #6, #1
  val->sleep_change = md1_cfg.int1_sleep_change;
 800946a:	ea46 1804 	orr.w	r8, r6, r4, lsl #4
  val->den_flag  = int1_ctrl.den_drdy_flag;
 800946e:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
  val->fsm1 = fsm_int1_a.int1_fsm1;
 8009472:	f00e 0201 	and.w	r2, lr, #1
  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8009476:	782e      	ldrb	r6, [r5, #0]
  val->sleep_change = md1_cfg.int1_sleep_change;
 8009478:	ea48 1842 	orr.w	r8, r8, r2, lsl #5
  val->fifo_full = int1_ctrl.int1_fifo_full;
 800947c:	f3c7 1240 	ubfx	r2, r7, #5, #1
  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8009480:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 8009484:	f3c7 1380 	ubfx	r3, r7, #6, #1
  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8009488:	f006 0604 	and.w	r6, r6, #4
 800948c:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8009490:	4333      	orrs	r3, r6
  val->fsm9  = fsm_int1_b.int1_fsm9;
 8009492:	f00c 0401 	and.w	r4, ip, #1
  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 8009496:	702b      	strb	r3, [r5, #0]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 8009498:	0164      	lsls	r4, r4, #5
  val->fsm2 = fsm_int1_a.int1_fsm2;
 800949a:	f3ce 0340 	ubfx	r3, lr, #1, #1
  val->sleep_change = md1_cfg.int1_sleep_change;
 800949e:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
  val->fsm4 = fsm_int1_a.int1_fsm4;
 80094a2:	ea44 04de 	orr.w	r4, r4, lr, lsr #3
  val->fsm10 = fsm_int1_b.int1_fsm10;
 80094a6:	f3cc 0340 	ubfx	r3, ip, #1, #1
  val->den_flag  = int1_ctrl.den_drdy_flag;
 80094aa:	f009 0904 	and.w	r9, r9, #4
  val->fsm4 = fsm_int1_a.int1_fsm4;
 80094ae:	ea44 1483 	orr.w	r4, r4, r3, lsl #6
  val->fsm3 = fsm_int1_a.int1_fsm3;
 80094b2:	f3ce 0e80 	ubfx	lr, lr, #2, #1
  val->fsm11 = fsm_int1_b.int1_fsm11;
 80094b6:	f3cc 0c80 	ubfx	ip, ip, #2, #1
  val->den_flag  = int1_ctrl.den_drdy_flag;
 80094ba:	ea41 0109 	orr.w	r1, r1, r9
  val->sleep_change = md1_cfg.int1_sleep_change;
 80094be:	ea48 1ece 	orr.w	lr, r8, lr, lsl #7
  val->fsm4 = fsm_int1_a.int1_fsm4;
 80094c2:	ea44 1ccc 	orr.w	ip, r4, ip, lsl #7
  val->den_flag  = int1_ctrl.den_drdy_flag;
 80094c6:	7069      	strb	r1, [r5, #1]
  val->sleep_change = md1_cfg.int1_sleep_change;
 80094c8:	f885 e002 	strb.w	lr, [r5, #2]
  val->fsm4 = fsm_int1_a.int1_fsm4;
 80094cc:	f885 c003 	strb.w	ip, [r5, #3]
  val->fsm13 = fsm_int1_b.int1_fsm13;
  val->fsm14 = fsm_int1_b.int1_fsm14;
  val->fsm15 = fsm_int1_b.int1_fsm15;
  val->fsm16 = fsm_int1_b.int1_fsm16;
  return ret;
}
 80094d0:	b008      	add	sp, #32
 80094d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (ctrl4_c.int2_on_int1 == PROPERTY_ENABLE) {
 80094d6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80094da:	069a      	lsls	r2, r3, #26
 80094dc:	f53f af7c 	bmi.w	80093d8 <lsm6dso_pin_int1_route_get+0x118>
    val->drdy_temp = PROPERTY_DISABLE;
 80094e0:	782a      	ldrb	r2, [r5, #0]
    val->timestamp = PROPERTY_DISABLE;
 80094e2:	786b      	ldrb	r3, [r5, #1]
    val->drdy_temp = PROPERTY_DISABLE;
 80094e4:	f36f 0282 	bfc	r2, #2, #1
    val->timestamp = PROPERTY_DISABLE;
 80094e8:	f36f 0382 	bfc	r3, #2, #1
    val->drdy_temp = PROPERTY_DISABLE;
 80094ec:	702a      	strb	r2, [r5, #0]
    val->timestamp = PROPERTY_DISABLE;
 80094ee:	706b      	strb	r3, [r5, #1]
 80094f0:	e772      	b.n	80093d8 <lsm6dso_pin_int1_route_get+0x118>
 80094f2:	bf00      	nop

080094f4 <lsm6dso_pin_int2_route_set>:
  *
  */
int32_t lsm6dso_pin_int2_route_set(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t val)
{
 80094f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f8:	b097      	sub	sp, #92	; 0x5c
 80094fa:	ac0a      	add	r4, sp, #40	; 0x28
 80094fc:	e884 000c 	stmia.w	r4, {r2, r3}
 8009500:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8009504:	f3c2 0340 	ubfx	r3, r2, #1, #1
 8009508:	4604      	mov	r4, r0
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	f3c2 1040 	ubfx	r0, r2, #5, #1
 8009510:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8009514:	9001      	str	r0, [sp, #4]
 8009516:	f3c2 0780 	ubfx	r7, r2, #2, #1
 800951a:	f3c2 1080 	ubfx	r0, r2, #6, #1
 800951e:	f3c2 05c0 	ubfx	r5, r2, #3, #1
 8009522:	f3c2 1800 	ubfx	r8, r2, #4, #1
 8009526:	09d2      	lsrs	r2, r2, #7
 8009528:	9202      	str	r2, [sp, #8]
 800952a:	f003 0201 	and.w	r2, r3, #1
 800952e:	9209      	str	r2, [sp, #36]	; 0x24
 8009530:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8009534:	9203      	str	r2, [sp, #12]
 8009536:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800953a:	9207      	str	r2, [sp, #28]
 800953c:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8009540:	9204      	str	r2, [sp, #16]
 8009542:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8009546:	9208      	str	r2, [sp, #32]
 8009548:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800954c:	9006      	str	r0, [sp, #24]
 800954e:	9205      	str	r2, [sp, #20]
 8009550:	f3c3 1980 	ubfx	r9, r3, #6, #1
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                  ret;
  ret = 0;

  if ( aux_ctx != NULL ) {
 8009554:	468a      	mov	sl, r1
 8009556:	2900      	cmp	r1, #0
 8009558:	f000 81d3 	beq.w	8009902 <lsm6dso_pin_int2_route_set+0x40e>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800955c:	6888      	ldr	r0, [r1, #8]
 800955e:	f8da 6004 	ldr.w	r6, [sl, #4]
 8009562:	2301      	movs	r3, #1
 8009564:	aa13      	add	r2, sp, #76	; 0x4c
 8009566:	216f      	movs	r1, #111	; 0x6f
 8009568:	47b0      	blx	r6
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS,
                           (uint8_t *)&int_ois, 1);

    if (ret == 0) {
 800956a:	2800      	cmp	r0, #0
 800956c:	f000 81b6 	beq.w	80098dc <lsm6dso_pin_int2_route_set+0x3e8>
      ret = lsm6dso_write_reg(aux_ctx, LSM6DSO_INT_OIS,
                              (uint8_t *)&int_ois, 1);
    }
  }

  if ( ctx != NULL ) {
 8009570:	2c00      	cmp	r4, #0
 8009572:	f000 81b0 	beq.w	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
    int2_ctrl.int2_drdy_xl   = val.drdy_xl;
 8009576:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800957a:	9a00      	ldr	r2, [sp, #0]
    int2_ctrl.int2_fifo_ovr  = val.fifo_ovr;
    int2_ctrl.int2_fifo_full = val.fifo_full;
    int2_ctrl.int2_cnt_bdr   = val.fifo_bdr;
    int2_ctrl.not_used_01    = 0;
    md2_cfg.int2_timestamp    = val.timestamp;
    md2_cfg.int2_6d           = val.six_d;
 800957c:	9903      	ldr	r1, [sp, #12]
    int2_ctrl.int2_drdy_xl   = val.drdy_xl;
 800957e:	f362 0300 	bfi	r3, r2, #0, #1
    int2_ctrl.int2_drdy_g    = val.drdy_g;
 8009582:	f367 0341 	bfi	r3, r7, #1, #1
    int2_ctrl.int2_fifo_ovr  = val.fifo_ovr;
 8009586:	9a01      	ldr	r2, [sp, #4]
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8009588:	f365 0382 	bfi	r3, r5, #2, #1
    int2_ctrl.int2_fifo_th   = val.fifo_th;
 800958c:	f368 03c3 	bfi	r3, r8, #3, #1
    int2_ctrl.int2_fifo_ovr  = val.fifo_ovr;
 8009590:	f362 1304 	bfi	r3, r2, #4, #1
    int2_ctrl.int2_fifo_full = val.fifo_full;
 8009594:	9a06      	ldr	r2, [sp, #24]
 8009596:	f362 1345 	bfi	r3, r2, #5, #1
    int2_ctrl.int2_cnt_bdr   = val.fifo_bdr;
 800959a:	9a02      	ldr	r2, [sp, #8]
 800959c:	f362 1386 	bfi	r3, r2, #6, #1
    int2_ctrl.not_used_01    = 0;
 80095a0:	f36f 13c7 	bfc	r3, #7, #1
    md2_cfg.int2_timestamp    = val.timestamp;
 80095a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    int2_ctrl.not_used_01    = 0;
 80095a6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    md2_cfg.int2_timestamp    = val.timestamp;
 80095aa:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80095ae:	f362 0300 	bfi	r3, r2, #0, #1
    md2_cfg.int2_6d           = val.six_d;
 80095b2:	f361 0382 	bfi	r3, r1, #2, #1
    md2_cfg.int2_double_tap   = val.double_tap;
 80095b6:	9907      	ldr	r1, [sp, #28]
    fsm_int2_a.int2_fsm1 = val.fsm1;
    fsm_int2_a.int2_fsm2 = val.fsm2;
    fsm_int2_a.int2_fsm3 = val.fsm3;
    fsm_int2_a.int2_fsm4 = val.fsm4;
    fsm_int2_a.int2_fsm5 = val.fsm5;
    fsm_int2_a.int2_fsm6 = val.fsm6;
 80095b8:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    md2_cfg.int2_double_tap   = val.double_tap;
 80095bc:	f361 03c3 	bfi	r3, r1, #3, #1
    md2_cfg.int2_ff           = val.free_fall;
 80095c0:	9904      	ldr	r1, [sp, #16]
 80095c2:	f361 1304 	bfi	r3, r1, #4, #1
    md2_cfg.int2_wu           = val.wake_up;
 80095c6:	9908      	ldr	r1, [sp, #32]
 80095c8:	f361 1345 	bfi	r3, r1, #5, #1
    md2_cfg.int2_single_tap   = val.single_tap;
 80095cc:	9905      	ldr	r1, [sp, #20]
 80095ce:	f361 1386 	bfi	r3, r1, #6, #1
    emb_func_int2.int2_tilt           = val.tilt;
 80095d2:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
    md2_cfg.int2_sleep_change = val.sleep_change;
 80095d6:	f369 13c7 	bfi	r3, r9, #7, #1
    fsm_int2_a.int2_fsm2 = val.fsm2;
 80095da:	f3c1 1c00 	ubfx	ip, r1, #4, #1
    md2_cfg.int2_sleep_change = val.sleep_change;
 80095de:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    fsm_int2_a.int2_fsm1 = val.fsm1;
 80095e2:	f3c1 03c0 	ubfx	r3, r1, #3, #1
    fsm_int2_a.int2_fsm7 = val.fsm7;
    fsm_int2_a.int2_fsm8 = val.fsm8;
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
    fsm_int2_b.int2_fsm10 = val.fsm10;
 80095e6:	f3c2 1e00 	ubfx	lr, r2, #4, #1
    fsm_int2_a.int2_fsm3 = val.fsm3;
 80095ea:	f3c1 1a40 	ubfx	sl, r1, #5, #1
    fsm_int2_a.int2_fsm1 = val.fsm1;
 80095ee:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 80095f2:	f3c2 0cc0 	ubfx	ip, r2, #3, #1
    fsm_int2_a.int2_fsm4 = val.fsm4;
 80095f6:	f3c1 1b80 	ubfx	fp, r1, #6, #1
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 80095fa:	ea4c 0c4e 	orr.w	ip, ip, lr, lsl #1
    fsm_int2_a.int2_fsm1 = val.fsm1;
 80095fe:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
    fsm_int2_b.int2_fsm11 = val.fsm11;
 8009602:	f3c2 1a40 	ubfx	sl, r2, #5, #1
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 8009606:	ea4c 0c8a 	orr.w	ip, ip, sl, lsl #2
    fsm_int2_a.int2_fsm1 = val.fsm1;
 800960a:	ea43 03cb 	orr.w	r3, r3, fp, lsl #3
    emb_func_int2.int2_step_detector = val.step_detector;
 800960e:	f89d e029 	ldrb.w	lr, [sp, #41]	; 0x29
    fsm_int2_b.int2_fsm12 = val.fsm12;
    fsm_int2_b.int2_fsm13 = val.fsm13;
    fsm_int2_b.int2_fsm14 = val.fsm14;
 8009612:	f89d a02c 	ldrb.w	sl, [sp, #44]	; 0x2c
    fsm_int2_b.int2_fsm12 = val.fsm12;
 8009616:	f3c2 1b80 	ubfx	fp, r2, #6, #1
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 800961a:	ea4c 0ccb 	orr.w	ip, ip, fp, lsl #3
    fsm_int2_a.int2_fsm5 = val.fsm5;
 800961e:	f3c1 1bc0 	ubfx	fp, r1, #7, #1
    fsm_int2_a.int2_fsm1 = val.fsm1;
 8009622:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
    emb_func_int2.int2_step_detector = val.step_detector;
 8009626:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
    fsm_int2_b.int2_fsm13 = val.fsm13;
 800962a:	f3c2 1bc0 	ubfx	fp, r2, #7, #1
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 800962e:	ea4c 1c0b 	orr.w	ip, ip, fp, lsl #4
    emb_func_int2.not_used_01 = 0;
 8009632:	ea4f 0ece 	mov.w	lr, lr, lsl #3
    emb_func_int2.int2_tilt           = val.tilt;
 8009636:	f3c1 0b00 	ubfx	fp, r1, #0, #1
    emb_func_int2.not_used_01 = 0;
 800963a:	ea4e 1e0b 	orr.w	lr, lr, fp, lsl #4
    fsm_int2_a.int2_fsm6 = val.fsm6;
 800963e:	f3c2 0b00 	ubfx	fp, r2, #0, #1
    fsm_int2_a.int2_fsm1 = val.fsm1;
 8009642:	ea43 134b 	orr.w	r3, r3, fp, lsl #5
    fsm_int2_b.int2_fsm14 = val.fsm14;
 8009646:	f3ca 0b00 	ubfx	fp, sl, #0, #1
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 800964a:	ea4c 1c4b 	orr.w	ip, ip, fp, lsl #5
    emb_func_int2.int2_sig_mot        = val.sig_mot;
 800964e:	f3c1 0b40 	ubfx	fp, r1, #1, #1
    emb_func_int2.not_used_01 = 0;
 8009652:	ea4e 1e4b 	orr.w	lr, lr, fp, lsl #5
    emb_func_int2.int2_fsm_lc         = val.fsm_lc;
 8009656:	f3c1 0180 	ubfx	r1, r1, #2, #1
    emb_func_int2.not_used_01 = 0;
 800965a:	ea4e 1ec1 	orr.w	lr, lr, r1, lsl #7
    fsm_int2_a.int2_fsm7 = val.fsm7;
 800965e:	f3c2 0140 	ubfx	r1, r2, #1, #1
    fsm_int2_a.int2_fsm1 = val.fsm1;
 8009662:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    fsm_int2_a.int2_fsm8 = val.fsm8;
 8009666:	f3c2 0280 	ubfx	r2, r2, #2, #1
    fsm_int2_a.int2_fsm1 = val.fsm1;
 800966a:	ea43 12c2 	orr.w	r2, r3, r2, lsl #7
    fsm_int2_b.int2_fsm15 = val.fsm15;
 800966e:	f3ca 0340 	ubfx	r3, sl, #1, #1
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 8009672:	ea4c 1c83 	orr.w	ip, ip, r3, lsl #6
    fsm_int2_b.int2_fsm16 = val.fsm16;
 8009676:	f3ca 0a80 	ubfx	sl, sl, #2, #1
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 800967a:	ea4c 1cca 	orr.w	ip, ip, sl, lsl #7
    emb_func_int2.not_used_01 = 0;
 800967e:	f88d e030 	strb.w	lr, [sp, #48]	; 0x30
    fsm_int2_a.int2_fsm1 = val.fsm1;
 8009682:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    fsm_int2_b.int2_fsm9  = val.fsm9 ;
 8009686:	f88d c038 	strb.w	ip, [sp, #56]	; 0x38

    if (ret == 0) {
 800968a:	2800      	cmp	r0, #0
 800968c:	f040 8123 	bne.w	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009690:	a912      	add	r1, sp, #72	; 0x48
 8009692:	460a      	mov	r2, r1
 8009694:	68a0      	ldr	r0, [r4, #8]
 8009696:	6866      	ldr	r6, [r4, #4]
 8009698:	2301      	movs	r3, #1
 800969a:	2113      	movs	r1, #19
 800969c:	47b0      	blx	r6
      ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);

      if (ret == 0) {
 800969e:	2800      	cmp	r0, #0
 80096a0:	f040 8119 	bne.w	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
        if ( ( val.drdy_temp | val.timestamp ) != PROPERTY_DISABLE ) {
 80096a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096a6:	ea55 0302 	orrs.w	r3, r5, r2
 80096aa:	d005      	beq.n	80096b8 <lsm6dso_pin_int2_route_set+0x1c4>
          ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 80096ac:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80096b0:	f360 1345 	bfi	r3, r0, #5, #1
 80096b4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80096b8:	68a0      	ldr	r0, [r4, #8]
 80096ba:	6826      	ldr	r6, [r4, #0]
 80096bc:	aa12      	add	r2, sp, #72	; 0x48
 80096be:	2301      	movs	r3, #1
 80096c0:	2113      	movs	r1, #19
 80096c2:	47b0      	blx	r6

        ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
      }
    }

    if (ret == 0) {
 80096c4:	2800      	cmp	r0, #0
 80096c6:	f040 8106 	bne.w	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80096ca:	2301      	movs	r3, #1
 80096cc:	68a0      	ldr	r0, [r4, #8]
 80096ce:	6866      	ldr	r6, [r4, #4]
 80096d0:	aa14      	add	r2, sp, #80	; 0x50
 80096d2:	4619      	mov	r1, r3
 80096d4:	47b0      	blx	r6
  if (ret == 0) {
 80096d6:	2800      	cmp	r0, #0
 80096d8:	f040 80fd 	bne.w	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
    reg.reg_access = (uint8_t)val;
 80096dc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80096e0:	68a0      	ldr	r0, [r4, #8]
 80096e2:	6826      	ldr	r6, [r4, #0]
    reg.reg_access = (uint8_t)val;
 80096e4:	2202      	movs	r2, #2
 80096e6:	f362 1387 	bfi	r3, r2, #6, #2
 80096ea:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80096ee:	2301      	movs	r3, #1
 80096f0:	aa14      	add	r2, sp, #80	; 0x50
 80096f2:	4619      	mov	r1, r3
 80096f4:	47b0      	blx	r6
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    }

    if (ret == 0) {
 80096f6:	2800      	cmp	r0, #0
 80096f8:	f040 80ed 	bne.w	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80096fc:	68a0      	ldr	r0, [r4, #8]
 80096fe:	6826      	ldr	r6, [r4, #0]
 8009700:	2301      	movs	r3, #1
 8009702:	aa0c      	add	r2, sp, #48	; 0x30
 8009704:	210e      	movs	r1, #14
 8009706:	47b0      	blx	r6
      ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT2,
                              (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0) {
 8009708:	2800      	cmp	r0, #0
 800970a:	f040 80e4 	bne.w	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800970e:	68a0      	ldr	r0, [r4, #8]
 8009710:	6826      	ldr	r6, [r4, #0]
 8009712:	2301      	movs	r3, #1
 8009714:	aa0d      	add	r2, sp, #52	; 0x34
 8009716:	210f      	movs	r1, #15
 8009718:	47b0      	blx	r6
      ret = lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_A,
                              (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0) {
 800971a:	2800      	cmp	r0, #0
 800971c:	f040 80db 	bne.w	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009720:	68a0      	ldr	r0, [r4, #8]
 8009722:	6826      	ldr	r6, [r4, #0]
 8009724:	2301      	movs	r3, #1
 8009726:	aa0e      	add	r2, sp, #56	; 0x38
 8009728:	2110      	movs	r1, #16
 800972a:	47b0      	blx	r6
      ret = lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_B,
                              (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0) {
 800972c:	2800      	cmp	r0, #0
 800972e:	f040 80d2 	bne.w	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009732:	2301      	movs	r3, #1
 8009734:	68a0      	ldr	r0, [r4, #8]
 8009736:	6866      	ldr	r6, [r4, #4]
 8009738:	aa14      	add	r2, sp, #80	; 0x50
 800973a:	4619      	mov	r1, r3
 800973c:	47b0      	blx	r6
  if (ret == 0) {
 800973e:	2800      	cmp	r0, #0
 8009740:	f040 80c9 	bne.w	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
    reg.reg_access = (uint8_t)val;
 8009744:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009748:	6826      	ldr	r6, [r4, #0]
    reg.reg_access = (uint8_t)val;
 800974a:	f360 1387 	bfi	r3, r0, #6, #2
 800974e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009752:	2301      	movs	r3, #1
 8009754:	68a0      	ldr	r0, [r4, #8]
 8009756:	aa14      	add	r2, sp, #80	; 0x50
 8009758:	4619      	mov	r1, r3
 800975a:	47b0      	blx	r6
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    }

    if (ret == 0) {
 800975c:	2800      	cmp	r0, #0
 800975e:	f040 80ba 	bne.w	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
      if (( emb_func_int2.int2_fsm_lc
 8009762:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
            | emb_func_int2.int2_sig_mot
            | emb_func_int2.int2_step_detector
            | emb_func_int2.int2_tilt
            | fsm_int2_a.int2_fsm1
 8009766:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800976a:	6826      	ldr	r6, [r4, #0]
            | emb_func_int2.int2_sig_mot
 800976c:	f3c2 1340 	ubfx	r3, r2, #5, #1
            | emb_func_int2.int2_step_detector
 8009770:	f3c2 00c0 	ubfx	r0, r2, #3, #1
            | emb_func_int2.int2_sig_mot
 8009774:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
            | emb_func_int2.int2_step_detector
 8009778:	4303      	orrs	r3, r0
            | emb_func_int2.int2_tilt
 800977a:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800977e:	4313      	orrs	r3, r2
            | fsm_int2_a.int2_fsm1
 8009780:	f3c1 0200 	ubfx	r2, r1, #0, #1
 8009784:	4313      	orrs	r3, r2
            | fsm_int2_a.int2_fsm2
 8009786:	f3c1 0240 	ubfx	r2, r1, #1, #1
 800978a:	4313      	orrs	r3, r2
            | fsm_int2_a.int2_fsm3
 800978c:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8009790:	4313      	orrs	r3, r2
            | fsm_int2_a.int2_fsm4
 8009792:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 8009796:	4313      	orrs	r3, r2
            | fsm_int2_a.int2_fsm5
 8009798:	f3c1 1200 	ubfx	r2, r1, #4, #1
 800979c:	4313      	orrs	r3, r2
            | fsm_int2_a.int2_fsm6
 800979e:	f3c1 1240 	ubfx	r2, r1, #5, #1
            | fsm_int2_a.int2_fsm7
 80097a2:	f3c1 1080 	ubfx	r0, r1, #6, #1
            | fsm_int2_a.int2_fsm6
 80097a6:	4313      	orrs	r3, r2
            | fsm_int2_a.int2_fsm8
            | fsm_int2_b.int2_fsm9
 80097a8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
            | fsm_int2_a.int2_fsm7
 80097ac:	4303      	orrs	r3, r0
            | fsm_int2_a.int2_fsm8
 80097ae:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
            | fsm_int2_b.int2_fsm9
 80097b2:	f3c2 0100 	ubfx	r1, r2, #0, #1
 80097b6:	430b      	orrs	r3, r1
            | fsm_int2_b.int2_fsm10
 80097b8:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80097bc:	430b      	orrs	r3, r1
            | fsm_int2_b.int2_fsm11
 80097be:	f3c2 0180 	ubfx	r1, r2, #2, #1
 80097c2:	430b      	orrs	r3, r1
            | fsm_int2_b.int2_fsm12
 80097c4:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 80097c8:	430b      	orrs	r3, r1
            | fsm_int2_b.int2_fsm13
 80097ca:	f3c2 1100 	ubfx	r1, r2, #4, #1
 80097ce:	430b      	orrs	r3, r1
            | fsm_int2_b.int2_fsm14
 80097d0:	f3c2 1140 	ubfx	r1, r2, #5, #1
 80097d4:	430b      	orrs	r3, r1
            | fsm_int2_b.int2_fsm15
 80097d6:	f3c2 1180 	ubfx	r1, r2, #6, #1
 80097da:	430b      	orrs	r3, r1
            | fsm_int2_b.int2_fsm16) != PROPERTY_DISABLE ) {
 80097dc:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 80097e0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80097e4:	68a0      	ldr	r0, [r4, #8]
 80097e6:	f363 0241 	bfi	r2, r3, #1, #1
 80097ea:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
 80097ee:	2301      	movs	r3, #1
 80097f0:	aa0f      	add	r2, sp, #60	; 0x3c
 80097f2:	210e      	movs	r1, #14
 80097f4:	47b0      	blx	r6

      ret = lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL,
                              (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0) {
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d16d      	bne.n	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80097fa:	68a0      	ldr	r0, [r4, #8]
 80097fc:	6826      	ldr	r6, [r4, #0]
 80097fe:	2301      	movs	r3, #1
 8009800:	aa11      	add	r2, sp, #68	; 0x44
 8009802:	215f      	movs	r1, #95	; 0x5f
 8009804:	47b0      	blx	r6
      ret = lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0) {
 8009806:	2800      	cmp	r0, #0
 8009808:	d165      	bne.n	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800980a:	68a0      	ldr	r0, [r4, #8]
 800980c:	6866      	ldr	r6, [r4, #4]
 800980e:	2301      	movs	r3, #1
 8009810:	aa10      	add	r2, sp, #64	; 0x40
 8009812:	2158      	movs	r1, #88	; 0x58
 8009814:	47b0      	blx	r6
      ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2,
                             1);
    }

    if (ret == 0) {
 8009816:	2800      	cmp	r0, #0
 8009818:	d15d      	bne.n	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
      ret = lsm6dso_pin_int1_route_get(ctx, &pin_int1_route);
 800981a:	a914      	add	r1, sp, #80	; 0x50
 800981c:	4620      	mov	r0, r4
 800981e:	f7ff fd4f 	bl	80092c0 <lsm6dso_pin_int1_route_get>
    }

    if (ret == 0) {
 8009822:	2800      	cmp	r0, #0
 8009824:	d157      	bne.n	80098d6 <lsm6dso_pin_int2_route_set+0x3e2>
             | val.drdy_g
             | val.drdy_temp
             | val.drdy_xl
             | val.fifo_full
             | val.fifo_ovr
             | val.fifo_th
 8009826:	9e00      	ldr	r6, [sp, #0]
 8009828:	9a01      	ldr	r2, [sp, #4]
             | val.double_tap
             | val.free_fall
             | val.wake_up
             | val.single_tap
             | val.sleep_change
             | pin_int1_route.den_flag
 800982a:	f89d 1051 	ldrb.w	r1, [sp, #81]	; 0x51
             | pin_int1_route.boot
 800982e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
             | val.fifo_th
 8009832:	433e      	orrs	r6, r7
 8009834:	4335      	orrs	r5, r6
 8009836:	ea48 0305 	orr.w	r3, r8, r5
 800983a:	431a      	orrs	r2, r3
 800983c:	4613      	mov	r3, r2
 800983e:	9a06      	ldr	r2, [sp, #24]
 8009840:	431a      	orrs	r2, r3
 8009842:	4613      	mov	r3, r2
 8009844:	9a02      	ldr	r2, [sp, #8]
 8009846:	431a      	orrs	r2, r3
 8009848:	4613      	mov	r3, r2
             | val.six_d
 800984a:	9a03      	ldr	r2, [sp, #12]
 800984c:	431a      	orrs	r2, r3
 800984e:	4613      	mov	r3, r2
             | val.double_tap
 8009850:	9a07      	ldr	r2, [sp, #28]
 8009852:	431a      	orrs	r2, r3
 8009854:	4613      	mov	r3, r2
             | val.free_fall
 8009856:	9a04      	ldr	r2, [sp, #16]
 8009858:	431a      	orrs	r2, r3
 800985a:	4613      	mov	r3, r2
             | val.wake_up
 800985c:	9a08      	ldr	r2, [sp, #32]
 800985e:	431a      	orrs	r2, r3
 8009860:	4613      	mov	r3, r2
             | val.single_tap
 8009862:	9a05      	ldr	r2, [sp, #20]
 8009864:	431a      	orrs	r2, r3
             | pin_int1_route.den_flag
 8009866:	f3c1 0500 	ubfx	r5, r1, #0, #1
             | val.sleep_change
 800986a:	ea49 0302 	orr.w	r3, r9, r2
             | pin_int1_route.den_flag
 800986e:	432b      	orrs	r3, r5
             | pin_int1_route.boot
 8009870:	f3c0 05c0 	ubfx	r5, r0, #3, #1
 8009874:	432b      	orrs	r3, r5
             | pin_int1_route.fifo_bdr
 8009876:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
             | pin_int1_route.drdy_g
 800987a:	f3c0 0540 	ubfx	r5, r0, #1, #1
 800987e:	432b      	orrs	r3, r5
             | pin_int1_route.drdy_xl
 8009880:	f3c0 0500 	ubfx	r5, r0, #0, #1
 8009884:	432b      	orrs	r3, r5
             | pin_int1_route.fifo_full
 8009886:	f3c0 1580 	ubfx	r5, r0, #6, #1
 800988a:	432b      	orrs	r3, r5
             | pin_int1_route.fifo_ovr
 800988c:	f3c0 1540 	ubfx	r5, r0, #5, #1
 8009890:	432b      	orrs	r3, r5
             | pin_int1_route.fifo_th
 8009892:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8009896:	4303      	orrs	r3, r0
             | pin_int1_route.six_d
 8009898:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 800989c:	4303      	orrs	r3, r0
             | pin_int1_route.double_tap
 800989e:	f3c1 1000 	ubfx	r0, r1, #4, #1
 80098a2:	4303      	orrs	r3, r0
             | pin_int1_route.free_fall
 80098a4:	f3c1 1040 	ubfx	r0, r1, #5, #1
 80098a8:	4303      	orrs	r3, r0
             | pin_int1_route.wake_up
 80098aa:	f3c1 1080 	ubfx	r0, r1, #6, #1
 80098ae:	4303      	orrs	r3, r0
             | pin_int1_route.single_tap
             | pin_int1_route.sleep_change ) != PROPERTY_DISABLE) {
 80098b0:	f89d 0052 	ldrb.w	r0, [sp, #82]	; 0x52
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80098b4:	6825      	ldr	r5, [r4, #0]
             | pin_int1_route.single_tap
 80098b6:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
             | pin_int1_route.sleep_change ) != PROPERTY_DISABLE) {
 80098ba:	f3c0 0100 	ubfx	r1, r0, #0, #1
 80098be:	430b      	orrs	r3, r1
 80098c0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80098c4:	68a0      	ldr	r0, [r4, #8]
 80098c6:	f363 11c7 	bfi	r1, r3, #7, #1
 80098ca:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 80098ce:	aa10      	add	r2, sp, #64	; 0x40
 80098d0:	2301      	movs	r3, #1
 80098d2:	2158      	movs	r1, #88	; 0x58
 80098d4:	47a8      	blx	r5
                              1);
    }
  }

  return ret;
}
 80098d6:	b017      	add	sp, #92	; 0x5c
 80098d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int_ois.int2_drdy_ois = val.drdy_ois;
 80098dc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80098e0:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80098e4:	f8da b000 	ldr.w	fp, [sl]
 80098e8:	f8da 0008 	ldr.w	r0, [sl, #8]
      int_ois.int2_drdy_ois = val.drdy_ois;
 80098ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80098f0:	f363 11c7 	bfi	r1, r3, #7, #1
 80098f4:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80098f8:	aa13      	add	r2, sp, #76	; 0x4c
 80098fa:	2301      	movs	r3, #1
 80098fc:	216f      	movs	r1, #111	; 0x6f
 80098fe:	47d8      	blx	fp
  return ret;
 8009900:	e636      	b.n	8009570 <lsm6dso_pin_int2_route_set+0x7c>
  ret = 0;
 8009902:	4608      	mov	r0, r1
 8009904:	e634      	b.n	8009570 <lsm6dso_pin_int2_route_set+0x7c>
 8009906:	bf00      	nop

08009908 <lsm6dso_pin_int2_route_get>:
  *
  */
int32_t lsm6dso_pin_int2_route_get(stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t *val)
{
 8009908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990c:	4604      	mov	r4, r0
 800990e:	b089      	sub	sp, #36	; 0x24
 8009910:	4615      	mov	r5, r2
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                   ret;
  ret = 0;

  if ( aux_ctx != NULL ) {
 8009912:	2900      	cmp	r1, #0
 8009914:	f000 809d 	beq.w	8009a52 <lsm6dso_pin_int2_route_get+0x14a>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009918:	e9d1 6001 	ldrd	r6, r0, [r1, #4]
 800991c:	2301      	movs	r3, #1
 800991e:	aa06      	add	r2, sp, #24
 8009920:	216f      	movs	r1, #111	; 0x6f
 8009922:	47b0      	blx	r6
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS,
                           (uint8_t *)&int_ois, 1);
    val->drdy_ois = int_ois.int2_drdy_ois;
 8009924:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8009928:	782a      	ldrb	r2, [r5, #0]
 800992a:	09db      	lsrs	r3, r3, #7
 800992c:	f363 0200 	bfi	r2, r3, #0, #1
 8009930:	702a      	strb	r2, [r5, #0]
  }

  if ( ctx != NULL ) {
 8009932:	2c00      	cmp	r4, #0
 8009934:	f000 808a 	beq.w	8009a4c <lsm6dso_pin_int2_route_get+0x144>
    if (ret == 0) {
 8009938:	2800      	cmp	r0, #0
 800993a:	f000 808c 	beq.w	8009a56 <lsm6dso_pin_int2_route_get+0x14e>
 800993e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
    val->fifo_th   = int2_ctrl.int2_fifo_th;
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
    val->fifo_full = int2_ctrl.int2_fifo_full;
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
    val->timestamp    = md2_cfg.int2_timestamp;
 8009942:	f89d b014 	ldrb.w	fp, [sp, #20]
    val->double_tap   = md2_cfg.int2_double_tap;
    val->free_fall    = md2_cfg.int2_ff;
    val->wake_up      = md2_cfg.int2_wu;
    val->single_tap   = md2_cfg.int2_single_tap;
    val->sleep_change = md2_cfg.int2_sleep_change;
    val->step_detector = emb_func_int2. int2_step_detector;
 8009946:	f89d a004 	ldrb.w	sl, [sp, #4]
    val->tilt          = emb_func_int2.int2_tilt;
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
    val->fsm1 = fsm_int2_a.int2_fsm1;
 800994a:	f89d 9008 	ldrb.w	r9, [sp, #8]
    val->fsm4 = fsm_int2_a.int2_fsm4;
    val->fsm5 = fsm_int2_a.int2_fsm5;
    val->fsm6 = fsm_int2_a.int2_fsm6;
    val->fsm7 = fsm_int2_a.int2_fsm7;
    val->fsm8 = fsm_int2_a.int2_fsm8;
    val->fsm9  = fsm_int2_b.int2_fsm9;
 800994e:	f89d c00c 	ldrb.w	ip, [sp, #12]
    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8009952:	f895 e000 	ldrb.w	lr, [r5]
 8009956:	f3c3 0400 	ubfx	r4, r3, #0, #1
    val->six_d        = md2_cfg.int2_6d;
 800995a:	f3cb 0280 	ubfx	r2, fp, #2, #1
    val->timestamp    = md2_cfg.int2_timestamp;
 800995e:	f00b 0701 	and.w	r7, fp, #1
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 8009962:	f3c3 0140 	ubfx	r1, r3, #1, #1
    val->timestamp    = md2_cfg.int2_timestamp;
 8009966:	ea47 0742 	orr.w	r7, r7, r2, lsl #1
    val->tilt          = emb_func_int2.int2_tilt;
 800996a:	f3ca 1600 	ubfx	r6, sl, #4, #1
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 800996e:	ea4f 12da 	mov.w	r2, sl, lsr #7
    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8009972:	0064      	lsls	r4, r4, #1
    val->tilt          = emb_func_int2.int2_tilt;
 8009974:	ea46 0682 	orr.w	r6, r6, r2, lsl #2
    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8009978:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
    val->double_tap   = md2_cfg.int2_double_tap;
 800997c:	f3cb 02c0 	ubfx	r2, fp, #3, #1
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8009980:	f3c3 0180 	ubfx	r1, r3, #2, #1
    val->timestamp    = md2_cfg.int2_timestamp;
 8009984:	ea47 0782 	orr.w	r7, r7, r2, lsl #2
    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8009988:	ea44 04c1 	orr.w	r4, r4, r1, lsl #3
    val->fsm1 = fsm_int2_a.int2_fsm1;
 800998c:	f009 0201 	and.w	r2, r9, #1
    val->free_fall    = md2_cfg.int2_ff;
 8009990:	f3cb 1100 	ubfx	r1, fp, #4, #1
    val->tilt          = emb_func_int2.int2_tilt;
 8009994:	ea46 06c2 	orr.w	r6, r6, r2, lsl #3
    val->timestamp    = md2_cfg.int2_timestamp;
 8009998:	ea47 07c1 	orr.w	r7, r7, r1, lsl #3
    val->fsm2 = fsm_int2_a.int2_fsm2;
 800999c:	f3c9 0140 	ubfx	r1, r9, #1, #1
    val->tilt          = emb_func_int2.int2_tilt;
 80099a0:	ea46 1601 	orr.w	r6, r6, r1, lsl #4
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 80099a4:	f3c3 01c0 	ubfx	r1, r3, #3, #1
    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 80099a8:	ea44 1401 	orr.w	r4, r4, r1, lsl #4
    val->fsm9  = fsm_int2_b.int2_fsm9;
 80099ac:	f00c 0201 	and.w	r2, ip, #1
    val->wake_up      = md2_cfg.int2_wu;
 80099b0:	f3cb 1140 	ubfx	r1, fp, #5, #1
    val->timestamp    = md2_cfg.int2_timestamp;
 80099b4:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
    val->fsm6 = fsm_int2_a.int2_fsm6;
 80099b8:	00d2      	lsls	r2, r2, #3
    val->fsm3 = fsm_int2_a.int2_fsm3;
 80099ba:	f3c9 0180 	ubfx	r1, r9, #2, #1
    val->fsm6 = fsm_int2_a.int2_fsm6;
 80099be:	ea42 1259 	orr.w	r2, r2, r9, lsr #5
    val->tilt          = emb_func_int2.int2_tilt;
 80099c2:	ea46 1641 	orr.w	r6, r6, r1, lsl #5
    val->fsm10 = fsm_int2_b.int2_fsm10;
 80099c6:	f3cc 0140 	ubfx	r1, ip, #1, #1
    val->fsm6 = fsm_int2_a.int2_fsm6;
 80099ca:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 80099ce:	f3c3 1200 	ubfx	r2, r3, #4, #1
    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 80099d2:	ea44 1442 	orr.w	r4, r4, r2, lsl #5
    val->tilt          = emb_func_int2.int2_tilt;
 80099d6:	78aa      	ldrb	r2, [r5, #2]
 80099d8:	f002 0802 	and.w	r8, r2, #2
    val->fsm11 = fsm_int2_b.int2_fsm11;
    val->fsm12 = fsm_int2_b.int2_fsm12;
    val->fsm13 = fsm_int2_b.int2_fsm13;
    val->fsm14 = fsm_int2_b.int2_fsm14;
 80099dc:	792a      	ldrb	r2, [r5, #4]
 80099de:	f022 0207 	bic.w	r2, r2, #7
 80099e2:	ea42 125c 	orr.w	r2, r2, ip, lsr #5
 80099e6:	712a      	strb	r2, [r5, #4]
    val->single_tap   = md2_cfg.int2_single_tap;
 80099e8:	f3cb 1280 	ubfx	r2, fp, #6, #1
    val->timestamp    = md2_cfg.int2_timestamp;
 80099ec:	ea47 1742 	orr.w	r7, r7, r2, lsl #5
    val->sleep_change = md2_cfg.int2_sleep_change;
 80099f0:	ea4f 12db 	mov.w	r2, fp, lsr #7
    val->timestamp    = md2_cfg.int2_timestamp;
 80099f4:	ea47 1782 	orr.w	r7, r7, r2, lsl #6
    val->fsm4 = fsm_int2_a.int2_fsm4;
 80099f8:	f3c9 02c0 	ubfx	r2, r9, #3, #1
    val->tilt          = emb_func_int2.int2_tilt;
 80099fc:	ea46 1682 	orr.w	r6, r6, r2, lsl #6
    val->fsm5 = fsm_int2_a.int2_fsm5;
 8009a00:	f3c9 1200 	ubfx	r2, r9, #4, #1
    val->tilt          = emb_func_int2.int2_tilt;
 8009a04:	ea46 12c2 	orr.w	r2, r6, r2, lsl #7
 8009a08:	ea42 0208 	orr.w	r2, r2, r8
 8009a0c:	70aa      	strb	r2, [r5, #2]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 8009a0e:	f3cc 0280 	ubfx	r2, ip, #2, #1
    val->fsm6 = fsm_int2_a.int2_fsm6;
 8009a12:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
    val->fifo_full = int2_ctrl.int2_fifo_full;
 8009a16:	f3c3 1140 	ubfx	r1, r3, #5, #1
    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8009a1a:	ea44 1181 	orr.w	r1, r4, r1, lsl #6
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 8009a1e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8009a22:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    val->fsm12 = fsm_int2_b.int2_fsm12;
 8009a26:	f3cc 03c0 	ubfx	r3, ip, #3, #1
    val->fsm6 = fsm_int2_a.int2_fsm6;
 8009a2a:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
    val->step_detector = emb_func_int2. int2_step_detector;
 8009a2e:	f3ca 0ac0 	ubfx	sl, sl, #3, #1
    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8009a32:	f00e 0e01 	and.w	lr, lr, #1
    val->fsm13 = fsm_int2_b.int2_fsm13;
 8009a36:	f3cc 1300 	ubfx	r3, ip, #4, #1
    val->timestamp    = md2_cfg.int2_timestamp;
 8009a3a:	ea47 17ca 	orr.w	r7, r7, sl, lsl #7
    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8009a3e:	ea41 010e 	orr.w	r1, r1, lr
    val->fsm6 = fsm_int2_a.int2_fsm6;
 8009a42:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
    val->timestamp    = md2_cfg.int2_timestamp;
 8009a46:	706f      	strb	r7, [r5, #1]
    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8009a48:	7029      	strb	r1, [r5, #0]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 8009a4a:	70eb      	strb	r3, [r5, #3]
    val->fsm15 = fsm_int2_b.int2_fsm15;
    val->fsm16 = fsm_int2_b.int2_fsm16;
  }

  return ret;
}
 8009a4c:	b009      	add	sp, #36	; 0x24
 8009a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( ctx != NULL ) {
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d0fa      	beq.n	8009a4c <lsm6dso_pin_int2_route_get+0x144>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009a56:	2301      	movs	r3, #1
 8009a58:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8009a5c:	aa07      	add	r2, sp, #28
 8009a5e:	4619      	mov	r1, r3
 8009a60:	47b0      	blx	r6
  if (ret == 0) {
 8009a62:	2800      	cmp	r0, #0
 8009a64:	f47f af6b 	bne.w	800993e <lsm6dso_pin_int2_route_get+0x36>
    reg.reg_access = (uint8_t)val;
 8009a68:	f89d 201c 	ldrb.w	r2, [sp, #28]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009a6c:	6826      	ldr	r6, [r4, #0]
 8009a6e:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8009a70:	2302      	movs	r3, #2
 8009a72:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009a76:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8009a78:	f88d 201c 	strb.w	r2, [sp, #28]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	aa07      	add	r2, sp, #28
 8009a80:	47b0      	blx	r6
    if (ret == 0) {
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f47f af5b 	bne.w	800993e <lsm6dso_pin_int2_route_get+0x36>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009a88:	6866      	ldr	r6, [r4, #4]
 8009a8a:	68a0      	ldr	r0, [r4, #8]
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	aa01      	add	r2, sp, #4
 8009a90:	210e      	movs	r1, #14
 8009a92:	47b0      	blx	r6
    if (ret == 0) {
 8009a94:	2800      	cmp	r0, #0
 8009a96:	f47f af52 	bne.w	800993e <lsm6dso_pin_int2_route_get+0x36>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009a9a:	6866      	ldr	r6, [r4, #4]
 8009a9c:	68a0      	ldr	r0, [r4, #8]
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	aa02      	add	r2, sp, #8
 8009aa2:	210f      	movs	r1, #15
 8009aa4:	47b0      	blx	r6
    if (ret == 0) {
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	f47f af49 	bne.w	800993e <lsm6dso_pin_int2_route_get+0x36>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009aac:	6866      	ldr	r6, [r4, #4]
 8009aae:	68a0      	ldr	r0, [r4, #8]
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	aa03      	add	r2, sp, #12
 8009ab4:	2110      	movs	r1, #16
 8009ab6:	47b0      	blx	r6
    if (ret == 0) {
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	f47f af40 	bne.w	800993e <lsm6dso_pin_int2_route_get+0x36>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8009ac4:	aa07      	add	r2, sp, #28
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	47b0      	blx	r6
  if (ret == 0) {
 8009aca:	2800      	cmp	r0, #0
 8009acc:	f47f af37 	bne.w	800993e <lsm6dso_pin_int2_route_get+0x36>
    reg.reg_access = (uint8_t)val;
 8009ad0:	f89d 201c 	ldrb.w	r2, [sp, #28]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009ad4:	6826      	ldr	r6, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8009ad6:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009ada:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8009adc:	f88d 201c 	strb.w	r2, [sp, #28]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009ae0:	68a0      	ldr	r0, [r4, #8]
 8009ae2:	aa07      	add	r2, sp, #28
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	47b0      	blx	r6
    if (ret == 0) {
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	f47f af28 	bne.w	800993e <lsm6dso_pin_int2_route_get+0x36>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009aee:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8009af2:	2301      	movs	r3, #1
 8009af4:	aa04      	add	r2, sp, #16
 8009af6:	210e      	movs	r1, #14
 8009af8:	47b0      	blx	r6
    if (ret == 0) {
 8009afa:	2800      	cmp	r0, #0
 8009afc:	f47f af1f 	bne.w	800993e <lsm6dso_pin_int2_route_get+0x36>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009b00:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8009b04:	2301      	movs	r3, #1
 8009b06:	aa05      	add	r2, sp, #20
 8009b08:	215f      	movs	r1, #95	; 0x5f
 8009b0a:	47b0      	blx	r6
    if (ret == 0) {
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	f47f af16 	bne.w	800993e <lsm6dso_pin_int2_route_get+0x36>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009b12:	2301      	movs	r3, #1
 8009b14:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8009b18:	aa07      	add	r2, sp, #28
 8009b1a:	2113      	movs	r1, #19
 8009b1c:	47b0      	blx	r6
    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE) {
 8009b1e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8009b22:	069b      	lsls	r3, r3, #26
 8009b24:	f53f af0b 	bmi.w	800993e <lsm6dso_pin_int2_route_get+0x36>
      if (ret == 0) {
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	f47f af08 	bne.w	800993e <lsm6dso_pin_int2_route_get+0x36>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009b2e:	aa04      	add	r2, sp, #16
 8009b30:	2301      	movs	r3, #1
 8009b32:	210e      	movs	r1, #14
 8009b34:	6866      	ldr	r6, [r4, #4]
 8009b36:	68a0      	ldr	r0, [r4, #8]
 8009b38:	47b0      	blx	r6
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8009b3a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009b3e:	782a      	ldrb	r2, [r5, #0]
 8009b40:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8009b44:	f361 02c3 	bfi	r2, r1, #3, #1
 8009b48:	702a      	strb	r2, [r5, #0]
      if (ret == 0) {
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	f47f aef9 	bne.w	8009942 <lsm6dso_pin_int2_route_get+0x3a>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009b50:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8009b54:	2301      	movs	r3, #1
 8009b56:	aa05      	add	r2, sp, #20
 8009b58:	215f      	movs	r1, #95	; 0x5f
 8009b5a:	47b0      	blx	r6
 8009b5c:	e6ef      	b.n	800993e <lsm6dso_pin_int2_route_get+0x36>
 8009b5e:	bf00      	nop

08009b60 <lsm6dso_pin_int1_route_set>:
{
 8009b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b64:	b08e      	sub	sp, #56	; 0x38
 8009b66:	466b      	mov	r3, sp
 8009b68:	e883 0006 	stmia.w	r3, {r1, r2}
 8009b6c:	f89d 6000 	ldrb.w	r6, [sp]
 8009b70:	f89d 1001 	ldrb.w	r1, [sp, #1]
  md1_cfg.int1_sleep_change = val.sleep_change;
 8009b74:	f89d 9002 	ldrb.w	r9, [sp, #2]
  fsm_int1_a.int1_fsm4 = val.fsm4;
 8009b78:	f89d 7003 	ldrb.w	r7, [sp, #3]
  fsm_int1_b.int1_fsm12 = val.fsm12;
 8009b7c:	f89d e004 	ldrb.w	lr, [sp, #4]
  md1_cfg.int1_shub         = val.sh_endop;
 8009b80:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 8009b84:	f3c6 0240 	ubfx	r2, r6, #1, #1
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8009b88:	f3c6 0300 	ubfx	r3, r6, #0, #1
 8009b8c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  int1_ctrl.int1_boot      = val.boot;
 8009b90:	f3c6 02c0 	ubfx	r2, r6, #3, #1
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8009b94:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 8009b98:	f3c6 1200 	ubfx	r2, r6, #4, #1
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8009b9c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 8009ba0:	f3c6 1240 	ubfx	r2, r6, #5, #1
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8009ba4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  int1_ctrl.int1_fifo_full = val.fifo_full;
 8009ba8:	f3c6 1280 	ubfx	r2, r6, #6, #1
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8009bac:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 8009bb0:	f3c6 12c0 	ubfx	r2, r6, #7, #1
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8009bb4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
  int1_ctrl.den_drdy_flag  = val.den_flag;
 8009bb8:	f3c1 0200 	ubfx	r2, r1, #0, #1
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8009bbc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
  md1_cfg.int1_shub         = val.sh_endop;
 8009bc0:	f3c1 0c40 	ubfx	ip, r1, #1, #1
  md1_cfg.int1_6d           = val.six_d;
 8009bc4:	f3c1 02c0 	ubfx	r2, r1, #3, #1
{
 8009bc8:	4604      	mov	r4, r0
  md1_cfg.int1_shub         = val.sh_endop;
 8009bca:	ea4c 0c82 	orr.w	ip, ip, r2, lsl #2
  md1_cfg.int1_double_tap   = val.double_tap;
 8009bce:	f3c1 1000 	ubfx	r0, r1, #4, #1
  fsm_int1_a.int1_fsm2 = val.fsm2;
 8009bd2:	f3c9 1280 	ubfx	r2, r9, #6, #1
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8009bd6:	f88d 3018 	strb.w	r3, [sp, #24]
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8009bda:	f3c9 1340 	ubfx	r3, r9, #5, #1
 8009bde:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  md1_cfg.int1_shub         = val.sh_endop;
 8009be2:	ea4c 0cc0 	orr.w	ip, ip, r0, lsl #3
  fsm_int1_a.int1_fsm3 = val.fsm3;
 8009be6:	f3c9 10c0 	ubfx	r0, r9, #7, #1
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8009bea:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  md1_cfg.int1_ff           = val.free_fall;
 8009bee:	f3c1 1040 	ubfx	r0, r1, #5, #1
  md1_cfg.int1_shub         = val.sh_endop;
 8009bf2:	ea4c 1c00 	orr.w	ip, ip, r0, lsl #4
  fsm_int1_a.int1_fsm4 = val.fsm4;
 8009bf6:	f3c7 0000 	ubfx	r0, r7, #0, #1
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8009bfa:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
  md1_cfg.int1_wu           = val.wake_up;
 8009bfe:	f3c1 1080 	ubfx	r0, r1, #6, #1
  fsm_int1_b.int1_fsm10 = val.fsm10;
 8009c02:	f3c7 1880 	ubfx	r8, r7, #6, #1
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8009c06:	f3c7 1240 	ubfx	r2, r7, #5, #1
  md1_cfg.int1_shub         = val.sh_endop;
 8009c0a:	ea4c 1c40 	orr.w	ip, ip, r0, lsl #5
 8009c0e:	f3c1 0580 	ubfx	r5, r1, #2, #1
  md1_cfg.int1_single_tap   = val.single_tap;
 8009c12:	f3c1 11c0 	ubfx	r1, r1, #7, #1
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8009c16:	ea42 0248 	orr.w	r2, r2, r8, lsl #1
  md1_cfg.int1_shub         = val.sh_endop;
 8009c1a:	ea4c 1c81 	orr.w	ip, ip, r1, lsl #6
  fsm_int1_b.int1_fsm11 = val.fsm11;
 8009c1e:	f3c7 18c0 	ubfx	r8, r7, #7, #1
  fsm_int1_a.int1_fsm5 = val.fsm5;
 8009c22:	f3c7 0140 	ubfx	r1, r7, #1, #1
  emb_func_int1.int1_step_detector = val.step_detector;
 8009c26:	f3c9 0040 	ubfx	r0, r9, #1, #1
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8009c2a:	ea42 0288 	orr.w	r2, r2, r8, lsl #2
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8009c2e:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
  fsm_int1_b.int1_fsm12 = val.fsm12;
 8009c32:	f3ce 0800 	ubfx	r8, lr, #0, #1
  emb_func_int1.int1_tilt          = val.tilt;
 8009c36:	f3c9 0380 	ubfx	r3, r9, #2, #1
  emb_func_int1.not_used_01 = 0;
 8009c3a:	00c0      	lsls	r0, r0, #3
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8009c3c:	ea42 02c8 	orr.w	r2, r2, r8, lsl #3
  emb_func_int1.not_used_01 = 0;
 8009c40:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
  fsm_int1_b.int1_fsm13 = val.fsm13;
 8009c44:	f3ce 0840 	ubfx	r8, lr, #1, #1
  fsm_int1_a.int1_fsm6 = val.fsm6;
 8009c48:	f3c7 0380 	ubfx	r3, r7, #2, #1
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8009c4c:	ea42 1208 	orr.w	r2, r2, r8, lsl #4
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8009c50:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
  fsm_int1_b.int1_fsm14 = val.fsm14;
 8009c54:	f3ce 0880 	ubfx	r8, lr, #2, #1
  md1_cfg.int1_sleep_change = val.sleep_change;
 8009c58:	f3c9 0300 	ubfx	r3, r9, #0, #1
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8009c5c:	ea42 1848 	orr.w	r8, r2, r8, lsl #5
  md1_cfg.int1_shub         = val.sh_endop;
 8009c60:	ea4c 1cc3 	orr.w	ip, ip, r3, lsl #7
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 8009c64:	f3c9 02c0 	ubfx	r2, r9, #3, #1
  fsm_int1_a.int1_fsm7 = val.fsm7;
 8009c68:	f3c7 03c0 	ubfx	r3, r7, #3, #1
  emb_func_int1.not_used_01 = 0;
 8009c6c:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8009c70:	ea41 1183 	orr.w	r1, r1, r3, lsl #6
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 8009c74:	f3c9 1200 	ubfx	r2, r9, #4, #1
  fsm_int1_a.int1_fsm8 = val.fsm8;
 8009c78:	f3c7 1300 	ubfx	r3, r7, #4, #1
  emb_func_int1.not_used_01 = 0;
 8009c7c:	ea40 12c2 	orr.w	r2, r0, r2, lsl #7
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8009c80:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
  fsm_int1_b.int1_fsm15 = val.fsm15;
 8009c84:	f3ce 03c0 	ubfx	r3, lr, #3, #1
  md1_cfg.int1_shub         = val.sh_endop;
 8009c88:	f00a 0a02 	and.w	sl, sl, #2
  emb_func_int1.not_used_01 = 0;
 8009c8c:	f88d 200c 	strb.w	r2, [sp, #12]
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8009c90:	ea48 1283 	orr.w	r2, r8, r3, lsl #6
  fsm_int1_b.int1_fsm16 = val.fsm16;
 8009c94:	f3ce 1300 	ubfx	r3, lr, #4, #1
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8009c98:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
  md1_cfg.int1_shub         = val.sh_endop;
 8009c9c:	ea4c 0c0a 	orr.w	ip, ip, sl
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8009ca0:	f88d 1010 	strb.w	r1, [sp, #16]
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8009ca4:	f88d 3014 	strb.w	r3, [sp, #20]
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009ca8:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
  md1_cfg.int1_shub         = val.sh_endop;
 8009cac:	f88d c028 	strb.w	ip, [sp, #40]	; 0x28
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009cb4:	2113      	movs	r1, #19
 8009cb6:	f3c6 0680 	ubfx	r6, r6, #2, #1
 8009cba:	47b8      	blx	r7
  if (ret == 0) {
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	f040 8155 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
    if ( ( val.drdy_temp | val.timestamp ) != PROPERTY_DISABLE) {
 8009cc2:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009cc6:	6827      	ldr	r7, [r4, #0]
 8009cc8:	68a0      	ldr	r0, [r4, #8]
    if ( ( val.drdy_temp | val.timestamp ) != PROPERTY_DISABLE) {
 8009cca:	ea45 0306 	orr.w	r3, r5, r6
 8009cce:	f363 1145 	bfi	r1, r3, #5, #1
 8009cd2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009cd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8009cd8:	2301      	movs	r3, #1
 8009cda:	2113      	movs	r1, #19
 8009cdc:	47b8      	blx	r7
  if (ret == 0) {
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f040 8144 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	6867      	ldr	r7, [r4, #4]
 8009ce8:	68a0      	ldr	r0, [r4, #8]
 8009cea:	aa0c      	add	r2, sp, #48	; 0x30
 8009cec:	4619      	mov	r1, r3
 8009cee:	47b8      	blx	r7
  if (ret == 0) {
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	f040 813b 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
    reg.reg_access = (uint8_t)val;
 8009cf6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009cfa:	6827      	ldr	r7, [r4, #0]
 8009cfc:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f362 1387 	bfi	r3, r2, #6, #2
 8009d04:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009d08:	2301      	movs	r3, #1
 8009d0a:	aa0c      	add	r2, sp, #48	; 0x30
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	47b8      	blx	r7
  if (ret == 0) {
 8009d10:	2800      	cmp	r0, #0
 8009d12:	f040 812b 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009d16:	6827      	ldr	r7, [r4, #0]
 8009d18:	68a0      	ldr	r0, [r4, #8]
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	aa03      	add	r2, sp, #12
 8009d1e:	210a      	movs	r1, #10
 8009d20:	47b8      	blx	r7
  if (ret == 0) {
 8009d22:	2800      	cmp	r0, #0
 8009d24:	f040 8122 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009d28:	6827      	ldr	r7, [r4, #0]
 8009d2a:	68a0      	ldr	r0, [r4, #8]
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	aa04      	add	r2, sp, #16
 8009d30:	210b      	movs	r1, #11
 8009d32:	47b8      	blx	r7
  if (ret == 0) {
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f040 8119 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009d3a:	6827      	ldr	r7, [r4, #0]
 8009d3c:	68a0      	ldr	r0, [r4, #8]
 8009d3e:	2301      	movs	r3, #1
 8009d40:	aa05      	add	r2, sp, #20
 8009d42:	210c      	movs	r1, #12
 8009d44:	47b8      	blx	r7
  if (ret == 0) {
 8009d46:	2800      	cmp	r0, #0
 8009d48:	f040 8110 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	6867      	ldr	r7, [r4, #4]
 8009d50:	68a0      	ldr	r0, [r4, #8]
 8009d52:	aa0c      	add	r2, sp, #48	; 0x30
 8009d54:	4619      	mov	r1, r3
 8009d56:	47b8      	blx	r7
  if (ret == 0) {
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	f040 8107 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
    reg.reg_access = (uint8_t)val;
 8009d5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009d62:	6827      	ldr	r7, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8009d64:	f360 1387 	bfi	r3, r0, #6, #2
 8009d68:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	68a0      	ldr	r0, [r4, #8]
 8009d70:	aa0c      	add	r2, sp, #48	; 0x30
 8009d72:	4619      	mov	r1, r3
 8009d74:	47b8      	blx	r7
  if (ret == 0) {
 8009d76:	2800      	cmp	r0, #0
 8009d78:	f040 80f8 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
    if ( ( emb_func_int1.int1_fsm_lc
 8009d7c:	f89d 200c 	ldrb.w	r2, [sp, #12]
           | fsm_int1_a.int1_fsm1
 8009d80:	f89d 1010 	ldrb.w	r1, [sp, #16]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009d84:	6827      	ldr	r7, [r4, #0]
           | emb_func_int1.int1_sig_mot
 8009d86:	f3c2 1340 	ubfx	r3, r2, #5, #1
           | emb_func_int1.int1_step_detector
 8009d8a:	f3c2 00c0 	ubfx	r0, r2, #3, #1
           | emb_func_int1.int1_sig_mot
 8009d8e:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
           | emb_func_int1.int1_step_detector
 8009d92:	4303      	orrs	r3, r0
           | emb_func_int1.int1_tilt
 8009d94:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8009d98:	4313      	orrs	r3, r2
           | fsm_int1_a.int1_fsm1
 8009d9a:	f3c1 0200 	ubfx	r2, r1, #0, #1
 8009d9e:	4313      	orrs	r3, r2
           | fsm_int1_a.int1_fsm2
 8009da0:	f3c1 0240 	ubfx	r2, r1, #1, #1
 8009da4:	4313      	orrs	r3, r2
           | fsm_int1_a.int1_fsm3
 8009da6:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8009daa:	4313      	orrs	r3, r2
           | fsm_int1_a.int1_fsm4
 8009dac:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 8009db0:	4313      	orrs	r3, r2
           | fsm_int1_a.int1_fsm5
 8009db2:	f3c1 1200 	ubfx	r2, r1, #4, #1
 8009db6:	4313      	orrs	r3, r2
           | fsm_int1_a.int1_fsm6
 8009db8:	f3c1 1240 	ubfx	r2, r1, #5, #1
           | fsm_int1_a.int1_fsm7
 8009dbc:	f3c1 1080 	ubfx	r0, r1, #6, #1
           | fsm_int1_a.int1_fsm6
 8009dc0:	4313      	orrs	r3, r2
           | fsm_int1_b.int1_fsm9
 8009dc2:	f89d 2014 	ldrb.w	r2, [sp, #20]
           | fsm_int1_a.int1_fsm7
 8009dc6:	4303      	orrs	r3, r0
           | fsm_int1_a.int1_fsm8
 8009dc8:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
           | fsm_int1_b.int1_fsm9
 8009dcc:	f3c2 0100 	ubfx	r1, r2, #0, #1
 8009dd0:	430b      	orrs	r3, r1
           | fsm_int1_b.int1_fsm10
 8009dd2:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8009dd6:	430b      	orrs	r3, r1
           | fsm_int1_b.int1_fsm11
 8009dd8:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8009ddc:	430b      	orrs	r3, r1
           | fsm_int1_b.int1_fsm12
 8009dde:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 8009de2:	430b      	orrs	r3, r1
           | fsm_int1_b.int1_fsm13
 8009de4:	f3c2 1100 	ubfx	r1, r2, #4, #1
 8009de8:	430b      	orrs	r3, r1
           | fsm_int1_b.int1_fsm14
 8009dea:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8009dee:	430b      	orrs	r3, r1
           | fsm_int1_b.int1_fsm15
 8009df0:	f3c2 1180 	ubfx	r1, r2, #6, #1
 8009df4:	430b      	orrs	r3, r1
           | fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE) {
 8009df6:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 8009dfa:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009dfe:	68a0      	ldr	r0, [r4, #8]
 8009e00:	f363 0241 	bfi	r2, r3, #1, #1
 8009e04:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 8009e08:	2301      	movs	r3, #1
 8009e0a:	aa06      	add	r2, sp, #24
 8009e0c:	210d      	movs	r1, #13
 8009e0e:	47b8      	blx	r7
  if (ret == 0) {
 8009e10:	2800      	cmp	r0, #0
 8009e12:	f040 80ab 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009e16:	6827      	ldr	r7, [r4, #0]
 8009e18:	68a0      	ldr	r0, [r4, #8]
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	aa0a      	add	r2, sp, #40	; 0x28
 8009e1e:	215e      	movs	r1, #94	; 0x5e
 8009e20:	47b8      	blx	r7
  if (ret == 0) {
 8009e22:	2800      	cmp	r0, #0
 8009e24:	f040 80a2 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009e28:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	aa07      	add	r2, sp, #28
 8009e30:	210e      	movs	r1, #14
 8009e32:	47b8      	blx	r7
  if (ret == 0) {
 8009e34:	2800      	cmp	r0, #0
 8009e36:	f040 8099 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8009e3a:	f89d 301c 	ldrb.w	r3, [sp, #28]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009e3e:	68a0      	ldr	r0, [r4, #8]
    int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8009e40:	f366 0382 	bfi	r3, r6, #2, #1
 8009e44:	f88d 301c 	strb.w	r3, [sp, #28]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009e48:	6826      	ldr	r6, [r4, #0]
 8009e4a:	aa07      	add	r2, sp, #28
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	210e      	movs	r1, #14
 8009e50:	47b0      	blx	r6
  if (ret == 0) {
 8009e52:	2800      	cmp	r0, #0
 8009e54:	f040 808a 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009e58:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	aa09      	add	r2, sp, #36	; 0x24
 8009e60:	215f      	movs	r1, #95	; 0x5f
 8009e62:	47b0      	blx	r6
  if (ret == 0) {
 8009e64:	2800      	cmp	r0, #0
 8009e66:	f040 8081 	bne.w	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
    md2_cfg.int2_timestamp = val.timestamp;
 8009e6a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009e6e:	68a0      	ldr	r0, [r4, #8]
    md2_cfg.int2_timestamp = val.timestamp;
 8009e70:	f365 0300 	bfi	r3, r5, #0, #1
 8009e74:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009e78:	6825      	ldr	r5, [r4, #0]
 8009e7a:	aa09      	add	r2, sp, #36	; 0x24
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	215f      	movs	r1, #95	; 0x5f
 8009e80:	47a8      	blx	r5
  if (ret == 0) {
 8009e82:	2800      	cmp	r0, #0
 8009e84:	d172      	bne.n	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009e86:	6865      	ldr	r5, [r4, #4]
 8009e88:	68a0      	ldr	r0, [r4, #8]
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	aa08      	add	r2, sp, #32
 8009e8e:	2158      	movs	r1, #88	; 0x58
 8009e90:	47a8      	blx	r5
  if (ret == 0) {
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d16a      	bne.n	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
    ret = lsm6dso_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 8009e96:	4601      	mov	r1, r0
 8009e98:	aa0c      	add	r2, sp, #48	; 0x30
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f7ff fd34 	bl	8009908 <lsm6dso_pin_int2_route_get>
  if (ret == 0) {
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d163      	bne.n	8009f6c <lsm6dso_pin_int1_route_set+0x40c>
    if ( ( pin_int2_route.fifo_bdr
 8009ea4:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009ea8:	6825      	ldr	r5, [r4, #0]
           | pin_int2_route.drdy_g
 8009eaa:	f3c1 0380 	ubfx	r3, r1, #2, #1
           | pin_int2_route.drdy_temp
 8009eae:	f3c1 00c0 	ubfx	r0, r1, #3, #1
           | pin_int2_route.drdy_g
 8009eb2:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
           | pin_int2_route.drdy_temp
 8009eb6:	4303      	orrs	r3, r0
           | pin_int2_route.drdy_xl
 8009eb8:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8009ebc:	4303      	orrs	r3, r0
           | pin_int2_route.fifo_full
 8009ebe:	f3c1 1080 	ubfx	r0, r1, #6, #1
 8009ec2:	4303      	orrs	r3, r0
           | pin_int2_route.fifo_ovr
 8009ec4:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8009ec8:	4303      	orrs	r3, r0
           | pin_int2_route.six_d
 8009eca:	f89d 0031 	ldrb.w	r0, [sp, #49]	; 0x31
           | pin_int2_route.fifo_th
 8009ece:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8009ed2:	430b      	orrs	r3, r1
           | pin_int2_route.six_d
 8009ed4:	f3c0 0140 	ubfx	r1, r0, #1, #1
 8009ed8:	430b      	orrs	r3, r1
           | pin_int2_route.double_tap
 8009eda:	f3c0 0180 	ubfx	r1, r0, #2, #1
 8009ede:	430b      	orrs	r3, r1
           | pin_int2_route.free_fall
 8009ee0:	f3c0 01c0 	ubfx	r1, r0, #3, #1
 8009ee4:	430b      	orrs	r3, r1
           | pin_int2_route.wake_up
 8009ee6:	f3c0 1100 	ubfx	r1, r0, #4, #1
 8009eea:	430b      	orrs	r3, r1
           | pin_int2_route.single_tap
 8009eec:	f3c0 1140 	ubfx	r1, r0, #5, #1
 8009ef0:	430b      	orrs	r3, r1
           | pin_int2_route.sleep_change
 8009ef2:	f3c0 1080 	ubfx	r0, r0, #6, #1
           | int1_ctrl.den_drdy_flag
 8009ef6:	f89d 1018 	ldrb.w	r1, [sp, #24]
           | pin_int2_route.sleep_change
 8009efa:	4303      	orrs	r3, r0
           | int1_ctrl.den_drdy_flag
 8009efc:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
           | int1_ctrl.int1_boot
 8009f00:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8009f04:	4303      	orrs	r3, r0
           | int1_ctrl.int1_cnt_bdr
 8009f06:	f3c1 1080 	ubfx	r0, r1, #6, #1
 8009f0a:	4303      	orrs	r3, r0
           | int1_ctrl.int1_drdy_g
 8009f0c:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8009f10:	4303      	orrs	r3, r0
           | int1_ctrl.int1_drdy_xl
 8009f12:	f3c1 0000 	ubfx	r0, r1, #0, #1
 8009f16:	4303      	orrs	r3, r0
           | int1_ctrl.int1_fifo_full
 8009f18:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8009f1c:	4303      	orrs	r3, r0
           | int1_ctrl.int1_fifo_ovr
 8009f1e:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8009f22:	4303      	orrs	r3, r0
           | md1_cfg.int1_shub
 8009f24:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
           | int1_ctrl.int1_fifo_th
 8009f28:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8009f2c:	430b      	orrs	r3, r1
           | md1_cfg.int1_shub
 8009f2e:	f3c0 0100 	ubfx	r1, r0, #0, #1
 8009f32:	430b      	orrs	r3, r1
           | md1_cfg.int1_6d
 8009f34:	f3c0 0180 	ubfx	r1, r0, #2, #1
 8009f38:	430b      	orrs	r3, r1
           | md1_cfg.int1_double_tap
 8009f3a:	f3c0 01c0 	ubfx	r1, r0, #3, #1
 8009f3e:	430b      	orrs	r3, r1
           | md1_cfg.int1_ff
 8009f40:	f3c0 1100 	ubfx	r1, r0, #4, #1
 8009f44:	430b      	orrs	r3, r1
           | md1_cfg.int1_wu
 8009f46:	f3c0 1140 	ubfx	r1, r0, #5, #1
 8009f4a:	430b      	orrs	r3, r1
           | md1_cfg.int1_single_tap
 8009f4c:	f3c0 1180 	ubfx	r1, r0, #6, #1
 8009f50:	430b      	orrs	r3, r1
 8009f52:	f89d 1020 	ldrb.w	r1, [sp, #32]
           | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE) {
 8009f56:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8009f5a:	f363 11c7 	bfi	r1, r3, #7, #1
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009f5e:	68a0      	ldr	r0, [r4, #8]
 8009f60:	f88d 1020 	strb.w	r1, [sp, #32]
 8009f64:	aa08      	add	r2, sp, #32
 8009f66:	2301      	movs	r3, #1
 8009f68:	2158      	movs	r1, #88	; 0x58
 8009f6a:	47a8      	blx	r5
}
 8009f6c:	b00e      	add	sp, #56	; 0x38
 8009f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f72:	bf00      	nop

08009f74 <lsm6dso_embedded_sens_set>:
  *                  EMB_FUNC_EN_A e EMB_FUNC_EN_B.
  *
  */
int32_t lsm6dso_embedded_sens_set(stmdev_ctx_t *ctx,
                                  lsm6dso_emb_sens_t *val)
{
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	4604      	mov	r4, r0
 8009f78:	b084      	sub	sp, #16
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009f7a:	2301      	movs	r3, #1
{
 8009f7c:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009f7e:	6880      	ldr	r0, [r0, #8]
 8009f80:	6866      	ldr	r6, [r4, #4]
 8009f82:	aa03      	add	r2, sp, #12
 8009f84:	4619      	mov	r1, r3
 8009f86:	47b0      	blx	r6
  if (ret == 0) {
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d164      	bne.n	800a056 <lsm6dso_embedded_sens_set+0xe2>
    reg.reg_access = (uint8_t)val;
 8009f8c:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009f90:	68a0      	ldr	r0, [r4, #8]
 8009f92:	6826      	ldr	r6, [r4, #0]
    reg.reg_access = (uint8_t)val;
 8009f94:	2302      	movs	r3, #2
 8009f96:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009f9a:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8009f9c:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	aa03      	add	r2, sp, #12
 8009fa4:	47b0      	blx	r6
  lsm6dso_emb_func_en_a_t emb_func_en_a;
  lsm6dso_emb_func_en_b_t emb_func_en_b;
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d155      	bne.n	800a056 <lsm6dso_embedded_sens_set+0xe2>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009faa:	68a0      	ldr	r0, [r4, #8]
 8009fac:	6866      	ldr	r6, [r4, #4]
 8009fae:	2301      	movs	r3, #1
 8009fb0:	aa01      	add	r2, sp, #4
 8009fb2:	2104      	movs	r1, #4
 8009fb4:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_EN_A,
                           (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0) {
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d14d      	bne.n	800a056 <lsm6dso_embedded_sens_set+0xe2>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009fba:	2301      	movs	r3, #1
 8009fbc:	aa02      	add	r2, sp, #8
 8009fbe:	2105      	movs	r1, #5
 8009fc0:	68a0      	ldr	r0, [r4, #8]
 8009fc2:	6866      	ldr	r6, [r4, #4]
 8009fc4:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_EN_B,
                           (uint8_t *)&emb_func_en_b, 1);
    emb_func_en_b.fsm_en = val->fsm;
 8009fc6:	782a      	ldrb	r2, [r5, #0]
    emb_func_en_a.tilt_en = val->tilt;
    emb_func_en_a.pedo_en = val->step;
 8009fc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    emb_func_en_b.fsm_en = val->fsm;
 8009fcc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    emb_func_en_a.pedo_en = val->step;
 8009fd0:	f023 0c38 	bic.w	ip, r3, #56	; 0x38
 8009fd4:	f3c2 0380 	ubfx	r3, r2, #2, #1
    emb_func_en_a.tilt_en = val->tilt;
 8009fd8:	f3c2 0540 	ubfx	r5, r2, #1, #1
    emb_func_en_a.pedo_en = val->step;
 8009fdc:	00db      	lsls	r3, r3, #3
    emb_func_en_b.fsm_en = val->fsm;
 8009fde:	f021 0e19 	bic.w	lr, r1, #25
    emb_func_en_a.pedo_en = val->step;
 8009fe2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    emb_func_en_b.fsm_en = val->fsm;
 8009fe6:	f3c2 1100 	ubfx	r1, r2, #4, #1
    emb_func_en_b.pedo_adv_en = val->step_adv;
    emb_func_en_a.sign_motion_en = val->sig_mot;
    emb_func_en_b.fifo_compr_en = val->fifo_compr;
 8009fea:	f3c2 1540 	ubfx	r5, r2, #5, #1
    emb_func_en_b.fsm_en = val->fsm;
 8009fee:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
    emb_func_en_b.pedo_adv_en = val->step_adv;
 8009ff2:	f3c2 05c0 	ubfx	r5, r2, #3, #1
    emb_func_en_a.sign_motion_en = val->sig_mot;
 8009ff6:	f3c2 0200 	ubfx	r2, r2, #0, #1
    emb_func_en_b.fsm_en = val->fsm;
 8009ffa:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    emb_func_en_a.pedo_en = val->step;
 8009ffe:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    emb_func_en_b.fsm_en = val->fsm;
 800a002:	ea41 010e 	orr.w	r1, r1, lr
    emb_func_en_a.pedo_en = val->step;
 800a006:	ea43 030c 	orr.w	r3, r3, ip
    emb_func_en_b.fsm_en = val->fsm;
 800a00a:	f88d 1008 	strb.w	r1, [sp, #8]
    emb_func_en_a.pedo_en = val->step;
 800a00e:	f88d 3004 	strb.w	r3, [sp, #4]
  }

  if (ret == 0) {
 800a012:	bb00      	cbnz	r0, 800a056 <lsm6dso_embedded_sens_set+0xe2>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a014:	6825      	ldr	r5, [r4, #0]
 800a016:	68a0      	ldr	r0, [r4, #8]
 800a018:	aa01      	add	r2, sp, #4
 800a01a:	2301      	movs	r3, #1
 800a01c:	2104      	movs	r1, #4
 800a01e:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_EN_A,
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0) {
 800a020:	b9c8      	cbnz	r0, 800a056 <lsm6dso_embedded_sens_set+0xe2>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a022:	6825      	ldr	r5, [r4, #0]
 800a024:	68a0      	ldr	r0, [r4, #8]
 800a026:	2301      	movs	r3, #1
 800a028:	aa02      	add	r2, sp, #8
 800a02a:	2105      	movs	r1, #5
 800a02c:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_EN_B,
                            (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0) {
 800a02e:	b990      	cbnz	r0, 800a056 <lsm6dso_embedded_sens_set+0xe2>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a030:	2301      	movs	r3, #1
 800a032:	6865      	ldr	r5, [r4, #4]
 800a034:	68a0      	ldr	r0, [r4, #8]
 800a036:	aa03      	add	r2, sp, #12
 800a038:	4619      	mov	r1, r3
 800a03a:	47a8      	blx	r5
  if (ret == 0) {
 800a03c:	b958      	cbnz	r0, 800a056 <lsm6dso_embedded_sens_set+0xe2>
    reg.reg_access = (uint8_t)val;
 800a03e:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a042:	6825      	ldr	r5, [r4, #0]
    reg.reg_access = (uint8_t)val;
 800a044:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a048:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 800a04a:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a04e:	68a0      	ldr	r0, [r4, #8]
 800a050:	aa03      	add	r2, sp, #12
 800a052:	4619      	mov	r1, r3
 800a054:	47a8      	blx	r5
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 800a056:	b004      	add	sp, #16
 800a058:	bd70      	pop	{r4, r5, r6, pc}
 800a05a:	bf00      	nop

0800a05c <lsm6dso_embedded_sens_get>:
  *                  EMB_FUNC_EN_A e EMB_FUNC_EN_B.
  *
  */
int32_t lsm6dso_embedded_sens_get(stmdev_ctx_t *ctx,
                                  lsm6dso_emb_sens_t *emb_sens)
{
 800a05c:	b570      	push	{r4, r5, r6, lr}
 800a05e:	4604      	mov	r4, r0
 800a060:	b084      	sub	sp, #16
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a062:	2301      	movs	r3, #1
{
 800a064:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a066:	6880      	ldr	r0, [r0, #8]
 800a068:	6866      	ldr	r6, [r4, #4]
 800a06a:	aa03      	add	r2, sp, #12
 800a06c:	4619      	mov	r1, r3
 800a06e:	47b0      	blx	r6
  if (ret == 0) {
 800a070:	2800      	cmp	r0, #0
 800a072:	d14f      	bne.n	800a114 <lsm6dso_embedded_sens_get+0xb8>
    reg.reg_access = (uint8_t)val;
 800a074:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a078:	68a0      	ldr	r0, [r4, #8]
 800a07a:	6826      	ldr	r6, [r4, #0]
    reg.reg_access = (uint8_t)val;
 800a07c:	2302      	movs	r3, #2
 800a07e:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a082:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 800a084:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a088:	4619      	mov	r1, r3
 800a08a:	aa03      	add	r2, sp, #12
 800a08c:	47b0      	blx	r6
  lsm6dso_emb_func_en_a_t emb_func_en_a;
  lsm6dso_emb_func_en_b_t emb_func_en_b;
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 800a08e:	2800      	cmp	r0, #0
 800a090:	d140      	bne.n	800a114 <lsm6dso_embedded_sens_get+0xb8>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a092:	68a0      	ldr	r0, [r4, #8]
 800a094:	6866      	ldr	r6, [r4, #4]
 800a096:	2301      	movs	r3, #1
 800a098:	aa01      	add	r2, sp, #4
 800a09a:	2104      	movs	r1, #4
 800a09c:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_EN_A,
                           (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0) {
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d138      	bne.n	800a114 <lsm6dso_embedded_sens_get+0xb8>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	aa02      	add	r2, sp, #8
 800a0a6:	2105      	movs	r1, #5
 800a0a8:	68a0      	ldr	r0, [r4, #8]
 800a0aa:	6866      	ldr	r6, [r4, #4]
 800a0ac:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_EN_B,
                           (uint8_t *)&emb_func_en_b, 1);
    emb_sens->fsm = emb_func_en_b.fsm_en;
    emb_sens->tilt = emb_func_en_a.tilt_en;
 800a0ae:	f89d 1004 	ldrb.w	r1, [sp, #4]
    emb_sens->step = emb_func_en_a.pedo_en;
    emb_sens->step_adv = emb_func_en_b.pedo_adv_en;
 800a0b2:	f89d 2008 	ldrb.w	r2, [sp, #8]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 800a0b6:	f3c1 1c00 	ubfx	ip, r1, #4, #1
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 800a0ba:	f3c1 1340 	ubfx	r3, r1, #5, #1
 800a0be:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
    emb_sens->step = emb_func_en_a.pedo_en;
 800a0c2:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 800a0c6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    emb_sens->step_adv = emb_func_en_b.pedo_adv_en;
 800a0ca:	f3c2 1100 	ubfx	r1, r2, #4, #1
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 800a0ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    emb_sens->fsm = emb_func_en_b.fsm_en;
 800a0d2:	f3c2 0c00 	ubfx	ip, r2, #0, #1
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 800a0d6:	7829      	ldrb	r1, [r5, #0]
 800a0d8:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 800a0dc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 800a0e0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800a0e4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800a0e8:	430b      	orrs	r3, r1
 800a0ea:	702b      	strb	r3, [r5, #0]
  }

  if (ret == 0) {
 800a0ec:	b990      	cbnz	r0, 800a114 <lsm6dso_embedded_sens_get+0xb8>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	6865      	ldr	r5, [r4, #4]
 800a0f2:	68a0      	ldr	r0, [r4, #8]
 800a0f4:	aa03      	add	r2, sp, #12
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	47a8      	blx	r5
  if (ret == 0) {
 800a0fa:	b958      	cbnz	r0, 800a114 <lsm6dso_embedded_sens_get+0xb8>
    reg.reg_access = (uint8_t)val;
 800a0fc:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a100:	6825      	ldr	r5, [r4, #0]
    reg.reg_access = (uint8_t)val;
 800a102:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a106:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 800a108:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a10c:	68a0      	ldr	r0, [r4, #8]
 800a10e:	aa03      	add	r2, sp, #12
 800a110:	4619      	mov	r1, r3
 800a112:	47a8      	blx	r5
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 800a114:	b004      	add	sp, #16
 800a116:	bd70      	pop	{r4, r5, r6, pc}

0800a118 <lsm6dso_embedded_sens_off>:
  * @param  val      get the values of registers
  *                  EMB_FUNC_EN_A e EMB_FUNC_EN_B.
  *
  */
int32_t lsm6dso_embedded_sens_off(stmdev_ctx_t *ctx)
{
 800a118:	b530      	push	{r4, r5, lr}
 800a11a:	4604      	mov	r4, r0
 800a11c:	b085      	sub	sp, #20
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a11e:	2301      	movs	r3, #1
 800a120:	6880      	ldr	r0, [r0, #8]
 800a122:	6865      	ldr	r5, [r4, #4]
 800a124:	aa03      	add	r2, sp, #12
 800a126:	4619      	mov	r1, r3
 800a128:	47a8      	blx	r5
  if (ret == 0) {
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d14a      	bne.n	800a1c4 <lsm6dso_embedded_sens_off+0xac>
    reg.reg_access = (uint8_t)val;
 800a12e:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a132:	68a0      	ldr	r0, [r4, #8]
 800a134:	6825      	ldr	r5, [r4, #0]
    reg.reg_access = (uint8_t)val;
 800a136:	2302      	movs	r3, #2
 800a138:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a13c:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 800a13e:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a142:	4619      	mov	r1, r3
 800a144:	aa03      	add	r2, sp, #12
 800a146:	47a8      	blx	r5
  lsm6dso_emb_func_en_a_t emb_func_en_a;
  lsm6dso_emb_func_en_b_t emb_func_en_b;
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 800a148:	2800      	cmp	r0, #0
 800a14a:	d13b      	bne.n	800a1c4 <lsm6dso_embedded_sens_off+0xac>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a14c:	68a0      	ldr	r0, [r4, #8]
 800a14e:	6865      	ldr	r5, [r4, #4]
 800a150:	2301      	movs	r3, #1
 800a152:	aa01      	add	r2, sp, #4
 800a154:	2104      	movs	r1, #4
 800a156:	47a8      	blx	r5
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_EN_A,
                           (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0) {
 800a158:	2800      	cmp	r0, #0
 800a15a:	d133      	bne.n	800a1c4 <lsm6dso_embedded_sens_off+0xac>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a15c:	2301      	movs	r3, #1
 800a15e:	68a0      	ldr	r0, [r4, #8]
 800a160:	6865      	ldr	r5, [r4, #4]
 800a162:	aa02      	add	r2, sp, #8
 800a164:	2105      	movs	r1, #5
 800a166:	47a8      	blx	r5
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_EN_B,
                           (uint8_t *)&emb_func_en_b, 1);
    emb_func_en_b.fsm_en = PROPERTY_DISABLE;
    emb_func_en_a.tilt_en = PROPERTY_DISABLE;
    emb_func_en_a.pedo_en = PROPERTY_DISABLE;
 800a168:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a16c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800a170:	f88d 3004 	strb.w	r3, [sp, #4]
    emb_func_en_b.fsm_en = PROPERTY_DISABLE;
 800a174:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a178:	f023 0319 	bic.w	r3, r3, #25
 800a17c:	f88d 3008 	strb.w	r3, [sp, #8]
    emb_func_en_b.pedo_adv_en = PROPERTY_DISABLE;
    emb_func_en_a.sign_motion_en = PROPERTY_DISABLE;
    emb_func_en_b.fifo_compr_en = PROPERTY_DISABLE;
  }

  if (ret == 0) {
 800a180:	bb00      	cbnz	r0, 800a1c4 <lsm6dso_embedded_sens_off+0xac>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a182:	68a0      	ldr	r0, [r4, #8]
 800a184:	6825      	ldr	r5, [r4, #0]
 800a186:	aa01      	add	r2, sp, #4
 800a188:	2301      	movs	r3, #1
 800a18a:	2104      	movs	r1, #4
 800a18c:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_EN_A,
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0) {
 800a18e:	b9c8      	cbnz	r0, 800a1c4 <lsm6dso_embedded_sens_off+0xac>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a190:	68a0      	ldr	r0, [r4, #8]
 800a192:	6825      	ldr	r5, [r4, #0]
 800a194:	2301      	movs	r3, #1
 800a196:	aa02      	add	r2, sp, #8
 800a198:	2105      	movs	r1, #5
 800a19a:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_EN_B,
                            (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0) {
 800a19c:	b990      	cbnz	r0, 800a1c4 <lsm6dso_embedded_sens_off+0xac>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a19e:	2301      	movs	r3, #1
 800a1a0:	68a0      	ldr	r0, [r4, #8]
 800a1a2:	6865      	ldr	r5, [r4, #4]
 800a1a4:	aa03      	add	r2, sp, #12
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	47a8      	blx	r5
  if (ret == 0) {
 800a1aa:	b958      	cbnz	r0, 800a1c4 <lsm6dso_embedded_sens_off+0xac>
    reg.reg_access = (uint8_t)val;
 800a1ac:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a1b0:	6825      	ldr	r5, [r4, #0]
    reg.reg_access = (uint8_t)val;
 800a1b2:	f360 1287 	bfi	r2, r0, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a1b6:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 800a1b8:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a1bc:	68a0      	ldr	r0, [r4, #8]
 800a1be:	aa03      	add	r2, sp, #12
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	47a8      	blx	r5
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 800a1c4:	b005      	add	sp, #20
 800a1c6:	bd30      	pop	{r4, r5, pc}

0800a1c8 <IKS01A3_ENV_SENSOR_GetValue>:
 */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800a1c8:	2801      	cmp	r0, #1
 800a1ca:	d820      	bhi.n	800a20e <IKS01A3_ENV_SENSOR_GetValue+0x46>
{
 800a1cc:	b510      	push	{r4, lr}
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800a1ce:	4c11      	ldr	r4, [pc, #68]	; (800a214 <IKS01A3_ENV_SENSOR_GetValue+0x4c>)
 800a1d0:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800a1d4:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 800a1d8:	ea01 0e03 	and.w	lr, r1, r3
 800a1dc:	ea31 0303 	bics.w	r3, r1, r3
 800a1e0:	d112      	bne.n	800a208 <IKS01A3_ENV_SENSOR_GetValue+0x40>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800a1e2:	4611      	mov	r1, r2
 800a1e4:	4a0c      	ldr	r2, [pc, #48]	; (800a218 <IKS01A3_ENV_SENSOR_GetValue+0x50>)
 800a1e6:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800a1ea:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800a1ee:	4413      	add	r3, r2
 800a1f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1f4:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	4798      	blx	r3
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a1fe:	2800      	cmp	r0, #0
 800a200:	bf18      	it	ne
 800a202:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
    }
  }

  return ret;
}
 800a206:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a208:	f06f 0001 	mvn.w	r0, #1
}
 800a20c:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a20e:	f06f 0001 	mvn.w	r0, #1
}
 800a212:	4770      	bx	lr
 800a214:	2000140c 	.word	0x2000140c
 800a218:	08023e70 	.word	0x08023e70

0800a21c <IKS01A3_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800a21c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t function = MOTION_GYRO;
  uint32_t i;
  uint32_t component_functions = 0;
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800a220:	2801      	cmp	r0, #1
{
 800a222:	b093      	sub	sp, #76	; 0x4c
 800a224:	4604      	mov	r4, r0
 800a226:	460e      	mov	r6, r1
  switch (Instance)
 800a228:	d009      	beq.n	800a23e <IKS01A3_MOTION_SENSOR_Init+0x22>
 800a22a:	2802      	cmp	r0, #2
 800a22c:	f000 80e8 	beq.w	800a400 <IKS01A3_MOTION_SENSOR_Init+0x1e4>
 800a230:	2800      	cmp	r0, #0
 800a232:	d070      	beq.n	800a316 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 800a234:	f06f 0001 	mvn.w	r0, #1
    }
    function = function << 1;
  }

  return ret;
}
 800a238:	b013      	add	sp, #76	; 0x4c
 800a23a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a23e:	4bab      	ldr	r3, [pc, #684]	; (800a4ec <IKS01A3_MOTION_SENSOR_Init+0x2d0>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A3_GetTick;

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800a240:	4dab      	ldr	r5, [pc, #684]	; (800a4f0 <IKS01A3_MOTION_SENSOR_Init+0x2d4>)
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a242:	9304      	str	r3, [sp, #16]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a244:	4bab      	ldr	r3, [pc, #684]	; (800a4f4 <IKS01A3_MOTION_SENSOR_Init+0x2d8>)
 800a246:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a248:	4bab      	ldr	r3, [pc, #684]	; (800a4f8 <IKS01A3_MOTION_SENSOR_Init+0x2dc>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a24a:	4aac      	ldr	r2, [pc, #688]	; (800a4fc <IKS01A3_MOTION_SENSOR_Init+0x2e0>)
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a24c:	9308      	str	r3, [sp, #32]
  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800a24e:	f105 0778 	add.w	r7, r5, #120	; 0x78
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a252:	4bab      	ldr	r3, [pc, #684]	; (800a500 <IKS01A3_MOTION_SENSOR_Init+0x2e4>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a254:	9205      	str	r2, [sp, #20]
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a256:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800a258:	2200      	movs	r2, #0
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800a25a:	2333      	movs	r3, #51	; 0x33
  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800a25c:	a904      	add	r1, sp, #16
 800a25e:	4638      	mov	r0, r7
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800a260:	9206      	str	r2, [sp, #24]
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800a262:	f88d 301c 	strb.w	r3, [sp, #28]
  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800a266:	f7fb fd45 	bl	8005cf4 <LIS2DW12_RegisterBusIO>
 800a26a:	2800      	cmp	r0, #0
 800a26c:	f040 8174 	bne.w	800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800a270:	f10d 010f 	add.w	r1, sp, #15
 800a274:	4638      	mov	r0, r7
 800a276:	f7fb f889 	bl	800538c <LIS2DW12_ReadID>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	f040 816c 	bne.w	800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LIS2DW12_ID)
 800a280:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800a284:	2b44      	cmp	r3, #68	; 0x44
 800a286:	f040 8167 	bne.w	800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800a28a:	a90b      	add	r1, sp, #44	; 0x2c
 800a28c:	4638      	mov	r0, r7
 800a28e:	9101      	str	r1, [sp, #4]
 800a290:	f7fb f816 	bl	80052c0 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a294:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800a298:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 800a29c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a2a0:	9901      	ldr	r1, [sp, #4]
    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800a2a2:	642f      	str	r7, [r5, #64]	; 0x40
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a2a4:	0053      	lsls	r3, r2, #1
 800a2a6:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 800a2aa:	4303      	orrs	r3, r0
 800a2ac:	636b      	str	r3, [r5, #52]	; 0x34
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a2ae:	f016 0902 	ands.w	r9, r6, #2
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800a2b2:	4b94      	ldr	r3, [pc, #592]	; (800a504 <IKS01A3_MOTION_SENSOR_Init+0x2e8>)
 800a2b4:	64eb      	str	r3, [r5, #76]	; 0x4c
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a2b6:	f040 8142 	bne.w	800a53e <IKS01A3_MOTION_SENSOR_Init+0x322>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800a2ba:	f016 0705 	ands.w	r7, r6, #5
 800a2be:	f040 814b 	bne.w	800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a2c2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800a2c4:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	4798      	blx	r3
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	f040 8166 	bne.w	800a59c <IKS01A3_MOTION_SENSOR_Init+0x380>
      if (cap.Acc == 1U)
 800a2d0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
      if (cap.Gyro == 1U)
 800a2d4:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
      if (cap.Acc == 1U)
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	bf01      	itttt	eq
 800a2dc:	2702      	moveq	r7, #2
 800a2de:	2306      	moveq	r3, #6
 800a2e0:	2203      	moveq	r2, #3
 800a2e2:	2107      	moveq	r1, #7
 800a2e4:	bf1e      	ittt	ne
 800a2e6:	2304      	movne	r3, #4
 800a2e8:	2201      	movne	r2, #1
 800a2ea:	2105      	movne	r1, #5
      if (cap.Gyro == 1U)
 800a2ec:	2801      	cmp	r0, #1
 800a2ee:	bf08      	it	eq
 800a2f0:	4617      	moveq	r7, r2
      if (cap.Magneto == 1U)
 800a2f2:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
      if (cap.Gyro == 1U)
 800a2f6:	bf08      	it	eq
 800a2f8:	460b      	moveq	r3, r1
        component_functions |= MOTION_MAGNETO;
 800a2fa:	2a01      	cmp	r2, #1
 800a2fc:	bf08      	it	eq
 800a2fe:	461f      	moveq	r7, r3
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a300:	f1b9 0f00 	cmp.w	r9, #0
 800a304:	f040 80e1 	bne.w	800a4ca <IKS01A3_MOTION_SENSOR_Init+0x2ae>
 800a308:	0773      	lsls	r3, r6, #29
 800a30a:	f100 812a 	bmi.w	800a562 <IKS01A3_MOTION_SENSOR_Init+0x346>
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800a30e:	2000      	movs	r0, #0
}
 800a310:	b013      	add	sp, #76	; 0x4c
 800a312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a316:	4b75      	ldr	r3, [pc, #468]	; (800a4ec <IKS01A3_MOTION_SENSOR_Init+0x2d0>)
  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800a318:	4d75      	ldr	r5, [pc, #468]	; (800a4f0 <IKS01A3_MOTION_SENSOR_Init+0x2d4>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a31a:	4a78      	ldr	r2, [pc, #480]	; (800a4fc <IKS01A3_MOTION_SENSOR_Init+0x2e0>)
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a31c:	9304      	str	r3, [sp, #16]
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800a31e:	21d7      	movs	r1, #215	; 0xd7
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a320:	4b74      	ldr	r3, [pc, #464]	; (800a4f4 <IKS01A3_MOTION_SENSOR_Init+0x2d8>)
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800a322:	f88d 101c 	strb.w	r1, [sp, #28]
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800a326:	9006      	str	r0, [sp, #24]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a328:	9205      	str	r2, [sp, #20]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a32a:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a32c:	4a72      	ldr	r2, [pc, #456]	; (800a4f8 <IKS01A3_MOTION_SENSOR_Init+0x2dc>)
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a32e:	4b74      	ldr	r3, [pc, #464]	; (800a500 <IKS01A3_MOTION_SENSOR_Init+0x2e4>)
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a330:	9208      	str	r2, [sp, #32]
  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800a332:	a904      	add	r1, sp, #16
 800a334:	4628      	mov	r0, r5
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a336:	930a      	str	r3, [sp, #40]	; 0x28
  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800a338:	f7fd fa72 	bl	8007820 <LSM6DSO_RegisterBusIO>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	f040 810b 	bne.w	800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800a342:	f10d 010f 	add.w	r1, sp, #15
 800a346:	4628      	mov	r0, r5
 800a348:	f7fc fc5a 	bl	8006c00 <LSM6DSO_ReadID>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	f040 8103 	bne.w	800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
  else if (id != LSM6DSO_ID)
 800a352:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800a356:	2b6c      	cmp	r3, #108	; 0x6c
 800a358:	f040 80fe 	bne.w	800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800a35c:	a90b      	add	r1, sp, #44	; 0x2c
 800a35e:	4628      	mov	r0, r5
 800a360:	9101      	str	r1, [sp, #4]
 800a362:	f7fc fbbd 	bl	8006ae0 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a366:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800a36a:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 800a36e:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800a372:	9901      	ldr	r1, [sp, #4]
    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800a374:	63ed      	str	r5, [r5, #60]	; 0x3c
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 800a37c:	4313      	orrs	r3, r2
 800a37e:	632b      	str	r3, [r5, #48]	; 0x30
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800a380:	f016 0801 	ands.w	r8, r6, #1
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800a384:	4b60      	ldr	r3, [pc, #384]	; (800a508 <IKS01A3_MOTION_SENSOR_Init+0x2ec>)
 800a386:	64ab      	str	r3, [r5, #72]	; 0x48
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800a388:	f040 80cd 	bne.w	800a526 <IKS01A3_MOTION_SENSOR_Init+0x30a>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a38c:	f016 0902 	ands.w	r9, r6, #2
 800a390:	d004      	beq.n	800a39c <IKS01A3_MOTION_SENSOR_Init+0x180>
 800a392:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800a396:	2b01      	cmp	r3, #1
 800a398:	f000 80f4 	beq.w	800a584 <IKS01A3_MOTION_SENSOR_Init+0x368>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800a39c:	0773      	lsls	r3, r6, #29
 800a39e:	f100 80db 	bmi.w	800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a3a2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800a3a4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	4798      	blx	r3
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	f040 80f6 	bne.w	800a59c <IKS01A3_MOTION_SENSOR_Init+0x380>
      if (cap.Acc == 1U)
 800a3b0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	bf18      	it	ne
 800a3b8:	4607      	movne	r7, r0
      if (cap.Gyro == 1U)
 800a3ba:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
      if (cap.Acc == 1U)
 800a3be:	bf01      	itttt	eq
 800a3c0:	2702      	moveq	r7, #2
 800a3c2:	2306      	moveq	r3, #6
 800a3c4:	2203      	moveq	r2, #3
 800a3c6:	2107      	moveq	r1, #7
 800a3c8:	bf1e      	ittt	ne
 800a3ca:	2304      	movne	r3, #4
 800a3cc:	2201      	movne	r2, #1
 800a3ce:	2105      	movne	r1, #5
      if (cap.Gyro == 1U)
 800a3d0:	2801      	cmp	r0, #1
 800a3d2:	bf08      	it	eq
 800a3d4:	4617      	moveq	r7, r2
      if (cap.Magneto == 1U)
 800a3d6:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
      if (cap.Gyro == 1U)
 800a3da:	bf08      	it	eq
 800a3dc:	460b      	moveq	r3, r1
        component_functions |= MOTION_MAGNETO;
 800a3de:	2a01      	cmp	r2, #1
 800a3e0:	bf08      	it	eq
 800a3e2:	461f      	moveq	r7, r3
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a3e4:	f1b8 0f00 	cmp.w	r8, #0
 800a3e8:	d08a      	beq.n	800a300 <IKS01A3_MOTION_SENSOR_Init+0xe4>
 800a3ea:	07f9      	lsls	r1, r7, #31
 800a3ec:	d588      	bpl.n	800a300 <IKS01A3_MOTION_SENSOR_Init+0xe4>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a3ee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800a3f0:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4798      	blx	r3
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d082      	beq.n	800a300 <IKS01A3_MOTION_SENSOR_Init+0xe4>
        return BSP_ERROR_COMPONENT_FAILURE;
 800a3fa:	f06f 0004 	mvn.w	r0, #4
 800a3fe:	e71b      	b.n	800a238 <IKS01A3_MOTION_SENSOR_Init+0x1c>
  int32_t                 ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
  io_ctx.Address     = LIS2MDL_I2C_ADD;
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a400:	4b3a      	ldr	r3, [pc, #232]	; (800a4ec <IKS01A3_MOTION_SENSOR_Init+0x2d0>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A3_GetTick;

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800a402:	4d3b      	ldr	r5, [pc, #236]	; (800a4f0 <IKS01A3_MOTION_SENSOR_Init+0x2d4>)
  io_ctx.Init        = IKS01A3_I2C_Init;
 800a404:	9304      	str	r3, [sp, #16]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800a406:	4b3b      	ldr	r3, [pc, #236]	; (800a4f4 <IKS01A3_MOTION_SENSOR_Init+0x2d8>)
 800a408:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a40a:	4b3b      	ldr	r3, [pc, #236]	; (800a4f8 <IKS01A3_MOTION_SENSOR_Init+0x2dc>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a40c:	4a3b      	ldr	r2, [pc, #236]	; (800a4fc <IKS01A3_MOTION_SENSOR_Init+0x2e0>)
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800a40e:	9308      	str	r3, [sp, #32]
  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800a410:	f105 07ac 	add.w	r7, r5, #172	; 0xac
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a414:	4b3a      	ldr	r3, [pc, #232]	; (800a500 <IKS01A3_MOTION_SENSOR_Init+0x2e4>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800a416:	9205      	str	r2, [sp, #20]
  io_ctx.GetTick     = IKS01A3_GetTick;
 800a418:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800a41a:	2200      	movs	r2, #0
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800a41c:	233d      	movs	r3, #61	; 0x3d
  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800a41e:	a904      	add	r1, sp, #16
 800a420:	4638      	mov	r0, r7
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800a422:	9206      	str	r2, [sp, #24]
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800a424:	f88d 301c 	strb.w	r3, [sp, #28]
  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800a428:	f7fc fa44 	bl	80068b4 <LIS2MDL_RegisterBusIO>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	f040 8093 	bne.w	800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800a432:	f10d 010f 	add.w	r1, sp, #15
 800a436:	4638      	mov	r0, r7
 800a438:	f7fc f95e 	bl	80066f8 <LIS2MDL_ReadID>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	f040 808b 	bne.w	800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LIS2MDL_ID)
 800a442:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800a446:	2b40      	cmp	r3, #64	; 0x40
 800a448:	f040 8086 	bne.w	800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800a44c:	a90b      	add	r1, sp, #44	; 0x2c
 800a44e:	4638      	mov	r0, r7
 800a450:	9101      	str	r1, [sp, #4]
 800a452:	f7fc f8e9 	bl	8006628 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a456:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800a45a:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
 800a45e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800a462:	9901      	ldr	r1, [sp, #4]
    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800a464:	646f      	str	r7, [r5, #68]	; 0x44
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a466:	0093      	lsls	r3, r2, #2
 800a468:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 800a46c:	4303      	orrs	r3, r0
 800a46e:	63ab      	str	r3, [r5, #56]	; 0x38
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800a470:	f016 0f04 	tst.w	r6, #4
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800a474:	4b25      	ldr	r3, [pc, #148]	; (800a50c <IKS01A3_MOTION_SENSOR_Init+0x2f0>)
 800a476:	652b      	str	r3, [r5, #80]	; 0x50
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800a478:	d14a      	bne.n	800a510 <IKS01A3_MOTION_SENSOR_Init+0x2f4>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800a47a:	f016 0703 	ands.w	r7, r6, #3
 800a47e:	d16b      	bne.n	800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a480:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a482:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	4798      	blx	r3
 800a488:	2800      	cmp	r0, #0
 800a48a:	f040 8087 	bne.w	800a59c <IKS01A3_MOTION_SENSOR_Init+0x380>
      if (cap.Acc == 1U)
 800a48e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
      if (cap.Gyro == 1U)
 800a492:	f89d c02d 	ldrb.w	ip, [sp, #45]	; 0x2d
      if (cap.Magneto == 1U)
 800a496:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
        component_functions |= MOTION_ACCELERO;
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	bf01      	itttt	eq
 800a49e:	2702      	moveq	r7, #2
 800a4a0:	2306      	moveq	r3, #6
 800a4a2:	2007      	moveq	r0, #7
 800a4a4:	2103      	moveq	r1, #3
 800a4a6:	bf1e      	ittt	ne
 800a4a8:	2005      	movne	r0, #5
 800a4aa:	2304      	movne	r3, #4
 800a4ac:	2101      	movne	r1, #1
      if (cap.Gyro == 1U)
 800a4ae:	f1bc 0f01 	cmp.w	ip, #1
 800a4b2:	bf04      	itt	eq
 800a4b4:	4603      	moveq	r3, r0
 800a4b6:	460f      	moveq	r7, r1
      if (cap.Magneto == 1U)
 800a4b8:	f006 0902 	and.w	r9, r6, #2
 800a4bc:	2a01      	cmp	r2, #1
        component_functions |= MOTION_MAGNETO;
 800a4be:	bf08      	it	eq
 800a4c0:	461f      	moveq	r7, r3
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a4c2:	f1b9 0f00 	cmp.w	r9, #0
 800a4c6:	f43f af1f 	beq.w	800a308 <IKS01A3_MOTION_SENSOR_Init+0xec>
 800a4ca:	07ba      	lsls	r2, r7, #30
 800a4cc:	f57f af1c 	bpl.w	800a308 <IKS01A3_MOTION_SENSOR_Init+0xec>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a4d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a4d6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a4da:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a4de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4798      	blx	r3
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f43f af0f 	beq.w	800a308 <IKS01A3_MOTION_SENSOR_Init+0xec>
 800a4ea:	e786      	b.n	800a3fa <IKS01A3_MOTION_SENSOR_Init+0x1de>
 800a4ec:	080021c1 	.word	0x080021c1
 800a4f0:	20001494 	.word	0x20001494
 800a4f4:	0800212d 	.word	0x0800212d
 800a4f8:	080020ed 	.word	0x080020ed
 800a4fc:	080020c5 	.word	0x080020c5
 800a500:	0800216d 	.word	0x0800216d
 800a504:	20000040 	.word	0x20000040
 800a508:	200000cc 	.word	0x200000cc
 800a50c:	20000074 	.word	0x20000074
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800a510:	2a01      	cmp	r2, #1
 800a512:	d1b2      	bne.n	800a47a <IKS01A3_MOTION_SENSOR_Init+0x25e>
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a514:	4a23      	ldr	r2, [pc, #140]	; (800a5a4 <IKS01A3_MOTION_SENSOR_Init+0x388>)
      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	9101      	str	r1, [sp, #4]
 800a51a:	4638      	mov	r0, r7
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a51c:	676a      	str	r2, [r5, #116]	; 0x74
      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800a51e:	4798      	blx	r3
 800a520:	b9d0      	cbnz	r0, 800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
 800a522:	9901      	ldr	r1, [sp, #4]
 800a524:	e7a9      	b.n	800a47a <IKS01A3_MOTION_SENSOR_Init+0x25e>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800a526:	2a01      	cmp	r2, #1
 800a528:	f47f af30 	bne.w	800a38c <IKS01A3_MOTION_SENSOR_Init+0x170>
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800a52c:	4a1e      	ldr	r2, [pc, #120]	; (800a5a8 <IKS01A3_MOTION_SENSOR_Init+0x38c>)
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	9101      	str	r1, [sp, #4]
 800a532:	4628      	mov	r0, r5
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800a534:	656a      	str	r2, [r5, #84]	; 0x54
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800a536:	4798      	blx	r3
 800a538:	b970      	cbnz	r0, 800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
 800a53a:	9901      	ldr	r1, [sp, #4]
 800a53c:	e726      	b.n	800a38c <IKS01A3_MOTION_SENSOR_Init+0x170>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a53e:	2a01      	cmp	r2, #1
 800a540:	f47f aebb 	bne.w	800a2ba <IKS01A3_MOTION_SENSOR_Init+0x9e>
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a544:	4a19      	ldr	r2, [pc, #100]	; (800a5ac <IKS01A3_MOTION_SENSOR_Init+0x390>)
      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	9101      	str	r1, [sp, #4]
 800a54a:	4638      	mov	r0, r7
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a54c:	666a      	str	r2, [r5, #100]	; 0x64
      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800a54e:	4798      	blx	r3
 800a550:	9901      	ldr	r1, [sp, #4]
 800a552:	2800      	cmp	r0, #0
 800a554:	f43f aeb1 	beq.w	800a2ba <IKS01A3_MOTION_SENSOR_Init+0x9e>
        return BSP_ERROR_NO_INIT;
 800a558:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a55c:	b013      	add	sp, #76	; 0x4c
 800a55e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a562:	0778      	lsls	r0, r7, #29
 800a564:	f57f aed3 	bpl.w	800a30e <IKS01A3_MOTION_SENSOR_Init+0xf2>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a568:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a56c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a570:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800a574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a576:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4798      	blx	r3
 800a57c:	2800      	cmp	r0, #0
 800a57e:	f43f aec6 	beq.w	800a30e <IKS01A3_MOTION_SENSOR_Init+0xf2>
 800a582:	e73a      	b.n	800a3fa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800a584:	6cab      	ldr	r3, [r5, #72]	; 0x48
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a586:	4a0a      	ldr	r2, [pc, #40]	; (800a5b0 <IKS01A3_MOTION_SENSOR_Init+0x394>)
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800a58c:	9101      	str	r1, [sp, #4]
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800a58e:	65aa      	str	r2, [r5, #88]	; 0x58
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800a590:	4798      	blx	r3
 800a592:	9901      	ldr	r1, [sp, #4]
 800a594:	2800      	cmp	r0, #0
 800a596:	f43f af01 	beq.w	800a39c <IKS01A3_MOTION_SENSOR_Init+0x180>
 800a59a:	e7dd      	b.n	800a558 <IKS01A3_MOTION_SENSOR_Init+0x33c>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a59c:	f06f 0006 	mvn.w	r0, #6
 800a5a0:	e64a      	b.n	800a238 <IKS01A3_MOTION_SENSOR_Init+0x1c>
 800a5a2:	bf00      	nop
 800a5a4:	20000050 	.word	0x20000050
 800a5a8:	20000084 	.word	0x20000084
 800a5ac:	2000001c 	.word	0x2000001c
 800a5b0:	200000a8 	.word	0x200000a8

0800a5b4 <IKS01A3_MOTION_SENSOR_GetCapabilities>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800a5b4:	2802      	cmp	r0, #2
 800a5b6:	d80c      	bhi.n	800a5d2 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x1e>
{
 800a5b8:	b508      	push	{r3, lr}
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800a5ba:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x24>)
 800a5bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800a5c2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	4798      	blx	r3
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	bf18      	it	ne
 800a5cc:	f06f 0006 	mvnne.w	r0, #6
}
 800a5d0:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a5d2:	f06f 0001 	mvn.w	r0, #1
}
 800a5d6:	4770      	bx	lr
 800a5d8:	20001494 	.word	0x20001494

0800a5dc <IKS01A3_MOTION_SENSOR_GetAxes>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800a5dc:	2802      	cmp	r0, #2
 800a5de:	d81f      	bhi.n	800a620 <IKS01A3_MOTION_SENSOR_GetAxes+0x44>
{
 800a5e0:	b510      	push	{r4, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a5e2:	4c11      	ldr	r4, [pc, #68]	; (800a628 <IKS01A3_MOTION_SENSOR_GetAxes+0x4c>)
 800a5e4:	468c      	mov	ip, r1
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 800a5ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a5ee:	ea0c 0e03 	and.w	lr, ip, r3
 800a5f2:	ea3c 0303 	bics.w	r3, ip, r3
 800a5f6:	d110      	bne.n	800a61a <IKS01A3_MOTION_SENSOR_GetAxes+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800a5f8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800a5fc:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 800a5fe:	4a0b      	ldr	r2, [pc, #44]	; (800a62c <IKS01A3_MOTION_SENSOR_GetAxes+0x50>)
 800a600:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800a604:	4413      	add	r3, r2
 800a606:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60c:	69db      	ldr	r3, [r3, #28]
 800a60e:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a610:	2800      	cmp	r0, #0
 800a612:	bf18      	it	ne
 800a614:	f06f 0004 	mvnne.w	r0, #4
}
 800a618:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a61a:	f06f 0001 	mvn.w	r0, #1
}
 800a61e:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a620:	f06f 0001 	mvn.w	r0, #1
}
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	20001494 	.word	0x20001494
 800a62c:	08023e84 	.word	0x08023e84

0800a630 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800a630:	2802      	cmp	r0, #2
 800a632:	d81f      	bhi.n	800a674 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x44>
{
 800a634:	b510      	push	{r4, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a636:	4c11      	ldr	r4, [pc, #68]	; (800a67c <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x4c>)
 800a638:	468c      	mov	ip, r1
 800a63a:	4611      	mov	r1, r2
 800a63c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 800a640:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a642:	ea0c 0e03 	and.w	lr, ip, r3
 800a646:	ea3c 0303 	bics.w	r3, ip, r3
 800a64a:	d110      	bne.n	800a66e <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800a64c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800a650:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 800a652:	4a0b      	ldr	r2, [pc, #44]	; (800a680 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x50>)
 800a654:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800a658:	4413      	add	r3, r2
 800a65a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a65e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a664:	2800      	cmp	r0, #0
 800a666:	bf18      	it	ne
 800a668:	f06f 0004 	mvnne.w	r0, #4
}
 800a66c:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a66e:	f06f 0001 	mvn.w	r0, #1
}
 800a672:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a674:	f06f 0001 	mvn.w	r0, #1
}
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	20001494 	.word	0x20001494
 800a680:	08023e84 	.word	0x08023e84

0800a684 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800a684:	2802      	cmp	r0, #2
 800a686:	d820      	bhi.n	800a6ca <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x46>
{
 800a688:	b510      	push	{r4, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a68a:	4c11      	ldr	r4, [pc, #68]	; (800a6d0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x4c>)
 800a68c:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800a690:	f8dc 3030 	ldr.w	r3, [ip, #48]	; 0x30
 800a694:	ea01 0e03 	and.w	lr, r1, r3
 800a698:	ea31 0303 	bics.w	r3, r1, r3
 800a69c:	d112      	bne.n	800a6c4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x40>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800a69e:	4611      	mov	r1, r2
 800a6a0:	4a0c      	ldr	r2, [pc, #48]	; (800a6d4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x50>)
 800a6a2:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800a6a6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800a6aa:	4413      	add	r3, r2
 800a6ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6b0:	f8dc 003c 	ldr.w	r0, [ip, #60]	; 0x3c
 800a6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	bf18      	it	ne
 800a6be:	f06f 0004 	mvnne.w	r0, #4
}
 800a6c2:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a6c4:	f06f 0001 	mvn.w	r0, #1
}
 800a6c8:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a6ca:	f06f 0001 	mvn.w	r0, #1
}
 800a6ce:	4770      	bx	lr
 800a6d0:	20001494 	.word	0x20001494
 800a6d4:	08023e84 	.word	0x08023e84

0800a6d8 <IKS01A3_MOTION_SENSOR_SetFullScale>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800a6d8:	2802      	cmp	r0, #2
 800a6da:	d81f      	bhi.n	800a71c <IKS01A3_MOTION_SENSOR_SetFullScale+0x44>
{
 800a6dc:	b510      	push	{r4, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a6de:	4c11      	ldr	r4, [pc, #68]	; (800a724 <IKS01A3_MOTION_SENSOR_SetFullScale+0x4c>)
 800a6e0:	468c      	mov	ip, r1
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 800a6e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a6ea:	ea0c 0e03 	and.w	lr, ip, r3
 800a6ee:	ea3c 0303 	bics.w	r3, ip, r3
 800a6f2:	d110      	bne.n	800a716 <IKS01A3_MOTION_SENSOR_SetFullScale+0x3e>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800a6f4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800a6f8:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 800a6fa:	4a0b      	ldr	r2, [pc, #44]	; (800a728 <IKS01A3_MOTION_SENSOR_SetFullScale+0x50>)
 800a6fc:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800a700:	4413      	add	r3, r2
 800a702:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	4798      	blx	r3
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a70c:	2800      	cmp	r0, #0
 800a70e:	bf18      	it	ne
 800a710:	f06f 0004 	mvnne.w	r0, #4
}
 800a714:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a716:	f06f 0001 	mvn.w	r0, #1
}
 800a71a:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a71c:	f06f 0001 	mvn.w	r0, #1
}
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	20001494 	.word	0x20001494
 800a728:	08023e84 	.word	0x08023e84

0800a72c <IKS01A3_MOTION_SENSOR_Get_Event_Status>:
 * @param  Instance the device instance
 * @param  Status the pointer to the status of all hardware events
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Get_Event_Status(uint32_t Instance, IKS01A3_MOTION_SENSOR_Event_Status_t *Status)
{
 800a72c:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 800a72e:	b158      	cbz	r0, 800a748 <IKS01A3_MOTION_SENSOR_Get_Event_Status+0x1c>
 800a730:	2801      	cmp	r0, #1
 800a732:	d106      	bne.n	800a742 <IKS01A3_MOTION_SENSOR_Get_Event_Status+0x16>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      if (LIS2DW12_ACC_Get_Event_Status(MotionCompObj[Instance], (LIS2DW12_Event_Status_t *)(void *)Status) != BSP_ERROR_NONE)
 800a734:	4b09      	ldr	r3, [pc, #36]	; (800a75c <IKS01A3_MOTION_SENSOR_Get_Event_Status+0x30>)
 800a736:	6858      	ldr	r0, [r3, #4]
 800a738:	f7fb fcba 	bl	80060b0 <LIS2DW12_ACC_Get_Event_Status>
 800a73c:	b950      	cbnz	r0, 800a754 <IKS01A3_MOTION_SENSOR_Get_Event_Status+0x28>
        ret = BSP_ERROR_NONE;
 800a73e:	2000      	movs	r0, #0
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a740:	bd08      	pop	{r3, pc}
  switch (Instance)
 800a742:	f06f 0001 	mvn.w	r0, #1
}
 800a746:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_Event_Status(MotionCompObj[Instance], (LSM6DSO_Event_Status_t *)(void *)Status) != BSP_ERROR_NONE)
 800a748:	4b04      	ldr	r3, [pc, #16]	; (800a75c <IKS01A3_MOTION_SENSOR_Get_Event_Status+0x30>)
 800a74a:	6818      	ldr	r0, [r3, #0]
 800a74c:	f7fd fe3c 	bl	80083c8 <LSM6DSO_ACC_Get_Event_Status>
 800a750:	2800      	cmp	r0, #0
 800a752:	d0f4      	beq.n	800a73e <IKS01A3_MOTION_SENSOR_Get_Event_Status+0x12>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a754:	f06f 0004 	mvn.w	r0, #4
}
 800a758:	bd08      	pop	{r3, pc}
 800a75a:	bf00      	nop
 800a75c:	200014d0 	.word	0x200014d0

0800a760 <IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
  int32_t ret;

  switch (Instance)
 800a760:	b948      	cbnz	r0, 800a776 <IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection+0x16>
{
 800a762:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Enable_Free_Fall_Detection(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 800a764:	4b05      	ldr	r3, [pc, #20]	; (800a77c <IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection+0x1c>)
 800a766:	6818      	ldr	r0, [r3, #0]
 800a768:	f7fd f89a 	bl	80078a0 <LSM6DSO_ACC_Enable_Free_Fall_Detection>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a76c:	2800      	cmp	r0, #0
 800a76e:	bf18      	it	ne
 800a770:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a774:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a776:	f06f 0001 	mvn.w	r0, #1
}
 800a77a:	4770      	bx	lr
 800a77c:	200014d0 	.word	0x200014d0

0800a780 <IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 800a780:	b948      	cbnz	r0, 800a796 <IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection+0x16>
{
 800a782:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Disable_Free_Fall_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a784:	4b05      	ldr	r3, [pc, #20]	; (800a79c <IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection+0x1c>)
 800a786:	6818      	ldr	r0, [r3, #0]
 800a788:	f7fd f8e8 	bl	800795c <LSM6DSO_ACC_Disable_Free_Fall_Detection>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a78c:	2800      	cmp	r0, #0
 800a78e:	bf18      	it	ne
 800a790:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a794:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a796:	f06f 0001 	mvn.w	r0, #1
}
 800a79a:	4770      	bx	lr
 800a79c:	200014d0 	.word	0x200014d0

0800a7a0 <IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold>:
 */
int32_t IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold(uint32_t Instance, uint8_t Threshold)
{
  int32_t ret;

  switch (Instance)
 800a7a0:	b948      	cbnz	r0, 800a7b6 <IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold+0x16>
{
 800a7a2:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Set_Free_Fall_Threshold(MotionCompObj[Instance], Threshold) != BSP_ERROR_NONE)
 800a7a4:	4b05      	ldr	r3, [pc, #20]	; (800a7bc <IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold+0x1c>)
 800a7a6:	6818      	ldr	r0, [r3, #0]
 800a7a8:	f7fd f916 	bl	80079d8 <LSM6DSO_ACC_Set_Free_Fall_Threshold>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	bf18      	it	ne
 800a7b0:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a7b4:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a7b6:	f06f 0001 	mvn.w	r0, #1
}
 800a7ba:	4770      	bx	lr
 800a7bc:	200014d0 	.word	0x200014d0

0800a7c0 <IKS01A3_MOTION_SENSOR_Enable_Pedometer>:
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_Pedometer(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 800a7c0:	b948      	cbnz	r0, 800a7d6 <IKS01A3_MOTION_SENSOR_Enable_Pedometer+0x16>
{
 800a7c2:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Enable_Pedometer(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a7c4:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <IKS01A3_MOTION_SENSOR_Enable_Pedometer+0x1c>)
 800a7c6:	6818      	ldr	r0, [r3, #0]
 800a7c8:	f7fd f914 	bl	80079f4 <LSM6DSO_ACC_Enable_Pedometer>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	bf18      	it	ne
 800a7d0:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a7d4:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a7d6:	f06f 0001 	mvn.w	r0, #1
}
 800a7da:	4770      	bx	lr
 800a7dc:	200014d0 	.word	0x200014d0

0800a7e0 <IKS01A3_MOTION_SENSOR_Disable_Pedometer>:
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_Pedometer(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 800a7e0:	b948      	cbnz	r0, 800a7f6 <IKS01A3_MOTION_SENSOR_Disable_Pedometer+0x16>
{
 800a7e2:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Disable_Pedometer(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a7e4:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <IKS01A3_MOTION_SENSOR_Disable_Pedometer+0x1c>)
 800a7e6:	6818      	ldr	r0, [r3, #0]
 800a7e8:	f7fd f952 	bl	8007a90 <LSM6DSO_ACC_Disable_Pedometer>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	bf18      	it	ne
 800a7f0:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a7f4:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a7f6:	f06f 0001 	mvn.w	r0, #1
}
 800a7fa:	4770      	bx	lr
 800a7fc:	200014d0 	.word	0x200014d0

0800a800 <IKS01A3_MOTION_SENSOR_Reset_Step_Counter>:
 */
int32_t IKS01A3_MOTION_SENSOR_Reset_Step_Counter(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 800a800:	b948      	cbnz	r0, 800a816 <IKS01A3_MOTION_SENSOR_Reset_Step_Counter+0x16>
{
 800a802:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Step_Counter_Reset(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a804:	4b05      	ldr	r3, [pc, #20]	; (800a81c <IKS01A3_MOTION_SENSOR_Reset_Step_Counter+0x1c>)
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	f7fd f97c 	bl	8007b04 <LSM6DSO_ACC_Step_Counter_Reset>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a80c:	2800      	cmp	r0, #0
 800a80e:	bf18      	it	ne
 800a810:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a814:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a816:	f06f 0001 	mvn.w	r0, #1
}
 800a81a:	4770      	bx	lr
 800a81c:	200014d0 	.word	0x200014d0

0800a820 <IKS01A3_MOTION_SENSOR_Get_Step_Count>:
 */
int32_t IKS01A3_MOTION_SENSOR_Get_Step_Count(uint32_t Instance, uint16_t *StepCount)
{
  int32_t ret;

  switch (Instance)
 800a820:	b948      	cbnz	r0, 800a836 <IKS01A3_MOTION_SENSOR_Get_Step_Count+0x16>
{
 800a822:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Get_Step_Count(MotionCompObj[Instance], StepCount) != BSP_ERROR_NONE)
 800a824:	4b05      	ldr	r3, [pc, #20]	; (800a83c <IKS01A3_MOTION_SENSOR_Get_Step_Count+0x1c>)
 800a826:	6818      	ldr	r0, [r3, #0]
 800a828:	f7fd f962 	bl	8007af0 <LSM6DSO_ACC_Get_Step_Count>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a82c:	2800      	cmp	r0, #0
 800a82e:	bf18      	it	ne
 800a830:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a834:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a836:	f06f 0001 	mvn.w	r0, #1
}
 800a83a:	4770      	bx	lr
 800a83c:	200014d0 	.word	0x200014d0

0800a840 <IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
  int32_t ret;

  switch (Instance)
 800a840:	b948      	cbnz	r0, 800a856 <IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection+0x16>
{
 800a842:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Enable_Tilt_Detection(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 800a844:	4b05      	ldr	r3, [pc, #20]	; (800a85c <IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection+0x1c>)
 800a846:	6818      	ldr	r0, [r3, #0]
 800a848:	f7fd f966 	bl	8007b18 <LSM6DSO_ACC_Enable_Tilt_Detection>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a84c:	2800      	cmp	r0, #0
 800a84e:	bf18      	it	ne
 800a850:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a854:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a856:	f06f 0001 	mvn.w	r0, #1
}
 800a85a:	4770      	bx	lr
 800a85c:	200014d0 	.word	0x200014d0

0800a860 <IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 800a860:	b948      	cbnz	r0, 800a876 <IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection+0x16>
{
 800a862:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Disable_Tilt_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a864:	4b05      	ldr	r3, [pc, #20]	; (800a87c <IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection+0x1c>)
 800a866:	6818      	ldr	r0, [r3, #0]
 800a868:	f7fd f9bc 	bl	8007be4 <LSM6DSO_ACC_Disable_Tilt_Detection>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a86c:	2800      	cmp	r0, #0
 800a86e:	bf18      	it	ne
 800a870:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a874:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a876:	f06f 0001 	mvn.w	r0, #1
}
 800a87a:	4770      	bx	lr
 800a87c:	200014d0 	.word	0x200014d0

0800a880 <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection>:
 * @param  IntPin the interrupt pin to be used
 * @note   This function sets the LSM6DSO accelerometer ODR to 416Hz and the LSM6DSO accelerometer full scale to 2g
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
 800a880:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 800a882:	b158      	cbz	r0, 800a89c <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection+0x1c>
 800a884:	2801      	cmp	r0, #1
 800a886:	d106      	bne.n	800a896 <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection+0x16>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      /* For LIS2DW12 the Wake Up event can be routed only on INT1 pin */
      if (LIS2DW12_ACC_Enable_Wake_Up_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a888:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection+0x30>)
 800a88a:	6858      	ldr	r0, [r3, #4]
 800a88c:	f7fb fa72 	bl	8005d74 <LIS2DW12_ACC_Enable_Wake_Up_Detection>
 800a890:	b950      	cbnz	r0, 800a8a8 <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection+0x28>
        ret = BSP_ERROR_NONE;
 800a892:	2000      	movs	r0, #0
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a894:	bd08      	pop	{r3, pc}
  switch (Instance)
 800a896:	f06f 0001 	mvn.w	r0, #1
}
 800a89a:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Enable_Wake_Up_Detection(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 800a89c:	4b04      	ldr	r3, [pc, #16]	; (800a8b0 <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection+0x30>)
 800a89e:	6818      	ldr	r0, [r3, #0]
 800a8a0:	f7fd f9e4 	bl	8007c6c <LSM6DSO_ACC_Enable_Wake_Up_Detection>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d0f4      	beq.n	800a892 <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection+0x12>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a8a8:	f06f 0004 	mvn.w	r0, #4
}
 800a8ac:	bd08      	pop	{r3, pc}
 800a8ae:	bf00      	nop
 800a8b0:	200014d0 	.word	0x200014d0

0800a8b4 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection>:
 * @brief  Disable the wake up detection (available only for LSM6DSO, LIS2DW12, AIS2IH sensors)
 * @param  Instance the device instance
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection(uint32_t Instance)
{
 800a8b4:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 800a8b6:	b158      	cbz	r0, 800a8d0 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection+0x1c>
 800a8b8:	2801      	cmp	r0, #1
 800a8ba:	d106      	bne.n	800a8ca <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection+0x16>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_ACC_Disable_Wake_Up_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a8bc:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection+0x30>)
 800a8be:	6858      	ldr	r0, [r3, #4]
 800a8c0:	f7fb fa9e 	bl	8005e00 <LIS2DW12_ACC_Disable_Wake_Up_Detection>
 800a8c4:	b950      	cbnz	r0, 800a8dc <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection+0x28>
        ret = BSP_ERROR_NONE;
 800a8c6:	2000      	movs	r0, #0
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a8c8:	bd08      	pop	{r3, pc}
  switch (Instance)
 800a8ca:	f06f 0001 	mvn.w	r0, #1
}
 800a8ce:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Disable_Wake_Up_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a8d0:	4b04      	ldr	r3, [pc, #16]	; (800a8e4 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection+0x30>)
 800a8d2:	6818      	ldr	r0, [r3, #0]
 800a8d4:	f7fd fa62 	bl	8007d9c <LSM6DSO_ACC_Disable_Wake_Up_Detection>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d0f4      	beq.n	800a8c6 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection+0x12>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a8dc:	f06f 0004 	mvn.w	r0, #4
}
 800a8e0:	bd08      	pop	{r3, pc}
 800a8e2:	bf00      	nop
 800a8e4:	200014d0 	.word	0x200014d0

0800a8e8 <IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
  int32_t ret;

  switch (Instance)
 800a8e8:	b948      	cbnz	r0, 800a8fe <IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection+0x16>
{
 800a8ea:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Enable_Single_Tap_Detection(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection+0x1c>)
 800a8ee:	6818      	ldr	r0, [r3, #0]
 800a8f0:	f7fd fa92 	bl	8007e18 <LSM6DSO_ACC_Enable_Single_Tap_Detection>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	bf18      	it	ne
 800a8f8:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a8fc:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a8fe:	f06f 0001 	mvn.w	r0, #1
}
 800a902:	4770      	bx	lr
 800a904:	200014d0 	.word	0x200014d0

0800a908 <IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 800a908:	b948      	cbnz	r0, 800a91e <IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection+0x16>
{
 800a90a:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Disable_Single_Tap_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a90c:	4b05      	ldr	r3, [pc, #20]	; (800a924 <IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection+0x1c>)
 800a90e:	6818      	ldr	r0, [r3, #0]
 800a910:	f7fd faea 	bl	8007ee8 <LSM6DSO_ACC_Disable_Single_Tap_Detection>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a914:	2800      	cmp	r0, #0
 800a916:	bf18      	it	ne
 800a918:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a91c:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a91e:	f06f 0001 	mvn.w	r0, #1
}
 800a922:	4770      	bx	lr
 800a924:	200014d0 	.word	0x200014d0

0800a928 <IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
  int32_t ret;

  switch (Instance)
 800a928:	b948      	cbnz	r0, 800a93e <IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection+0x16>
{
 800a92a:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Enable_Double_Tap_Detection(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 800a92c:	4b05      	ldr	r3, [pc, #20]	; (800a944 <IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection+0x1c>)
 800a92e:	6818      	ldr	r0, [r3, #0]
 800a930:	f7fd fb2e 	bl	8007f90 <LSM6DSO_ACC_Enable_Double_Tap_Detection>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a934:	2800      	cmp	r0, #0
 800a936:	bf18      	it	ne
 800a938:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a93c:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a93e:	f06f 0001 	mvn.w	r0, #1
}
 800a942:	4770      	bx	lr
 800a944:	200014d0 	.word	0x200014d0

0800a948 <IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 800a948:	b948      	cbnz	r0, 800a95e <IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection+0x16>
{
 800a94a:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Disable_Double_Tap_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection+0x1c>)
 800a94e:	6818      	ldr	r0, [r3, #0]
 800a950:	f7fd fb90 	bl	8008074 <LSM6DSO_ACC_Disable_Double_Tap_Detection>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a954:	2800      	cmp	r0, #0
 800a956:	bf18      	it	ne
 800a958:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a95c:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a95e:	f06f 0001 	mvn.w	r0, #1
}
 800a962:	4770      	bx	lr
 800a964:	200014d0 	.word	0x200014d0

0800a968 <IKS01A3_MOTION_SENSOR_Set_Tap_Threshold>:
 */
int32_t IKS01A3_MOTION_SENSOR_Set_Tap_Threshold(uint32_t Instance, uint8_t Threshold)
{
  int32_t ret;

  switch (Instance)
 800a968:	b948      	cbnz	r0, 800a97e <IKS01A3_MOTION_SENSOR_Set_Tap_Threshold+0x16>
{
 800a96a:	b508      	push	{r3, lr}
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_ACC_Set_Tap_Threshold(MotionCompObj[Instance], Threshold) != BSP_ERROR_NONE)
 800a96c:	4b05      	ldr	r3, [pc, #20]	; (800a984 <IKS01A3_MOTION_SENSOR_Set_Tap_Threshold+0x1c>)
 800a96e:	6818      	ldr	r0, [r3, #0]
 800a970:	f7fd fbde 	bl	8008130 <LSM6DSO_ACC_Set_Tap_Threshold>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a974:	2800      	cmp	r0, #0
 800a976:	bf18      	it	ne
 800a978:	f06f 0004 	mvnne.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a97c:	bd08      	pop	{r3, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800a97e:	f06f 0001 	mvn.w	r0, #1
}
 800a982:	4770      	bx	lr
 800a984:	200014d0 	.word	0x200014d0

0800a988 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation>:
 * @param  IntPin the interrupt pin to be used
 * @note   This function sets the LSM6DSO accelerometer ODR to 416Hz and the LSM6DSO accelerometer full scale to 2g
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_6D_Orientation(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
 800a988:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 800a98a:	b158      	cbz	r0, 800a9a4 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x1c>
 800a98c:	2801      	cmp	r0, #1
 800a98e:	d106      	bne.n	800a99e <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x16>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      /* For LIS2DW12 the 6D Orientation event can be routed only on INT1 pin */
      if (LIS2DW12_ACC_Enable_6D_Orientation(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a990:	4b09      	ldr	r3, [pc, #36]	; (800a9b8 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x30>)
 800a992:	6858      	ldr	r0, [r3, #4]
 800a994:	f7fb fa86 	bl	8005ea4 <LIS2DW12_ACC_Enable_6D_Orientation>
 800a998:	b950      	cbnz	r0, 800a9b0 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x28>
        ret = BSP_ERROR_NONE;
 800a99a:	2000      	movs	r0, #0
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a99c:	bd08      	pop	{r3, pc}
  switch (Instance)
 800a99e:	f06f 0001 	mvn.w	r0, #1
}
 800a9a2:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Enable_6D_Orientation(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 800a9a4:	4b04      	ldr	r3, [pc, #16]	; (800a9b8 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x30>)
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	f7fd fbcc 	bl	8008144 <LSM6DSO_ACC_Enable_6D_Orientation>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d0f4      	beq.n	800a99a <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x12>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9b0:	f06f 0004 	mvn.w	r0, #4
}
 800a9b4:	bd08      	pop	{r3, pc}
 800a9b6:	bf00      	nop
 800a9b8:	200014d0 	.word	0x200014d0

0800a9bc <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation>:
 * @brief  Disable 6D Orientation (available only for LSM6DSO, LIS2DW12, AIS2IH sensors)
 * @param  Instance the device instance
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_6D_Orientation(uint32_t Instance)
{
 800a9bc:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 800a9be:	b158      	cbz	r0, 800a9d8 <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation+0x1c>
 800a9c0:	2801      	cmp	r0, #1
 800a9c2:	d106      	bne.n	800a9d2 <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation+0x16>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_ACC_Disable_6D_Orientation(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a9c4:	4b09      	ldr	r3, [pc, #36]	; (800a9ec <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation+0x30>)
 800a9c6:	6858      	ldr	r0, [r3, #4]
 800a9c8:	f7fb faae 	bl	8005f28 <LIS2DW12_ACC_Disable_6D_Orientation>
 800a9cc:	b950      	cbnz	r0, 800a9e4 <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation+0x28>
        ret = BSP_ERROR_NONE;
 800a9ce:	2000      	movs	r0, #0
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a9d0:	bd08      	pop	{r3, pc}
  switch (Instance)
 800a9d2:	f06f 0001 	mvn.w	r0, #1
}
 800a9d6:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Disable_6D_Orientation(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a9d8:	4b04      	ldr	r3, [pc, #16]	; (800a9ec <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation+0x30>)
 800a9da:	6818      	ldr	r0, [r3, #0]
 800a9dc:	f7fd fc44 	bl	8008268 <LSM6DSO_ACC_Disable_6D_Orientation>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d0f4      	beq.n	800a9ce <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation+0x12>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9e4:	f06f 0004 	mvn.w	r0, #4
}
 800a9e8:	bd08      	pop	{r3, pc}
 800a9ea:	bf00      	nop
 800a9ec:	200014d0 	.word	0x200014d0

0800a9f0 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL>:
 * @param  Instance the device instance
 * @param  xl the pointer to the 6D orientation XL axis
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL(uint32_t Instance, uint8_t *xl)
{
 800a9f0:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 800a9f2:	b158      	cbz	r0, 800aa0c <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL+0x1c>
 800a9f4:	2801      	cmp	r0, #1
 800a9f6:	d106      	bne.n	800aa06 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL+0x16>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_ACC_Get_6D_Orientation_XL(MotionCompObj[Instance], xl) != BSP_ERROR_NONE)
 800a9f8:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL+0x30>)
 800a9fa:	6858      	ldr	r0, [r3, #4]
 800a9fc:	f7fb fae0 	bl	8005fc0 <LIS2DW12_ACC_Get_6D_Orientation_XL>
 800aa00:	b950      	cbnz	r0, 800aa18 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL+0x28>
        ret = BSP_ERROR_NONE;
 800aa02:	2000      	movs	r0, #0
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800aa04:	bd08      	pop	{r3, pc}
  switch (Instance)
 800aa06:	f06f 0001 	mvn.w	r0, #1
}
 800aa0a:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_6D_Orientation_XL(MotionCompObj[Instance], xl) != BSP_ERROR_NONE)
 800aa0c:	4b04      	ldr	r3, [pc, #16]	; (800aa20 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL+0x30>)
 800aa0e:	6818      	ldr	r0, [r3, #0]
 800aa10:	f7fd fc62 	bl	80082d8 <LSM6DSO_ACC_Get_6D_Orientation_XL>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d0f4      	beq.n	800aa02 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL+0x12>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa18:	f06f 0004 	mvn.w	r0, #4
}
 800aa1c:	bd08      	pop	{r3, pc}
 800aa1e:	bf00      	nop
 800aa20:	200014d0 	.word	0x200014d0

0800aa24 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH>:
 * @param  Instance the device instance
 * @param  xh the pointer to the 6D orientation XH axis
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH(uint32_t Instance, uint8_t *xh)
{
 800aa24:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 800aa26:	b158      	cbz	r0, 800aa40 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH+0x1c>
 800aa28:	2801      	cmp	r0, #1
 800aa2a:	d106      	bne.n	800aa3a <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH+0x16>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_ACC_Get_6D_Orientation_XH(MotionCompObj[Instance], xh) != BSP_ERROR_NONE)
 800aa2c:	4b09      	ldr	r3, [pc, #36]	; (800aa54 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH+0x30>)
 800aa2e:	6858      	ldr	r0, [r3, #4]
 800aa30:	f7fb fada 	bl	8005fe8 <LIS2DW12_ACC_Get_6D_Orientation_XH>
 800aa34:	b950      	cbnz	r0, 800aa4c <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH+0x28>
        ret = BSP_ERROR_NONE;
 800aa36:	2000      	movs	r0, #0
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800aa38:	bd08      	pop	{r3, pc}
  switch (Instance)
 800aa3a:	f06f 0001 	mvn.w	r0, #1
}
 800aa3e:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_6D_Orientation_XH(MotionCompObj[Instance], xh) != BSP_ERROR_NONE)
 800aa40:	4b04      	ldr	r3, [pc, #16]	; (800aa54 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH+0x30>)
 800aa42:	6818      	ldr	r0, [r3, #0]
 800aa44:	f7fd fc5c 	bl	8008300 <LSM6DSO_ACC_Get_6D_Orientation_XH>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d0f4      	beq.n	800aa36 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH+0x12>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa4c:	f06f 0004 	mvn.w	r0, #4
}
 800aa50:	bd08      	pop	{r3, pc}
 800aa52:	bf00      	nop
 800aa54:	200014d0 	.word	0x200014d0

0800aa58 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL>:
 * @param  Instance the device instance
 * @param  yl the pointer to the 6D orientation YL axis
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL(uint32_t Instance, uint8_t *yl)
{
 800aa58:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 800aa5a:	b158      	cbz	r0, 800aa74 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL+0x1c>
 800aa5c:	2801      	cmp	r0, #1
 800aa5e:	d106      	bne.n	800aa6e <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL+0x16>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_ACC_Get_6D_Orientation_YL(MotionCompObj[Instance], yl) != BSP_ERROR_NONE)
 800aa60:	4b09      	ldr	r3, [pc, #36]	; (800aa88 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL+0x30>)
 800aa62:	6858      	ldr	r0, [r3, #4]
 800aa64:	f7fb fad4 	bl	8006010 <LIS2DW12_ACC_Get_6D_Orientation_YL>
 800aa68:	b950      	cbnz	r0, 800aa80 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL+0x28>
        ret = BSP_ERROR_NONE;
 800aa6a:	2000      	movs	r0, #0
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800aa6c:	bd08      	pop	{r3, pc}
  switch (Instance)
 800aa6e:	f06f 0001 	mvn.w	r0, #1
}
 800aa72:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_6D_Orientation_YL(MotionCompObj[Instance], yl) != BSP_ERROR_NONE)
 800aa74:	4b04      	ldr	r3, [pc, #16]	; (800aa88 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL+0x30>)
 800aa76:	6818      	ldr	r0, [r3, #0]
 800aa78:	f7fd fc56 	bl	8008328 <LSM6DSO_ACC_Get_6D_Orientation_YL>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d0f4      	beq.n	800aa6a <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL+0x12>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa80:	f06f 0004 	mvn.w	r0, #4
}
 800aa84:	bd08      	pop	{r3, pc}
 800aa86:	bf00      	nop
 800aa88:	200014d0 	.word	0x200014d0

0800aa8c <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH>:
 * @param  Instance the device instance
 * @param  yh the pointer to the 6D orientation YH axis
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH(uint32_t Instance, uint8_t *yh)
{
 800aa8c:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 800aa8e:	b158      	cbz	r0, 800aaa8 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH+0x1c>
 800aa90:	2801      	cmp	r0, #1
 800aa92:	d106      	bne.n	800aaa2 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH+0x16>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_ACC_Get_6D_Orientation_YH(MotionCompObj[Instance], yh) != BSP_ERROR_NONE)
 800aa94:	4b09      	ldr	r3, [pc, #36]	; (800aabc <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH+0x30>)
 800aa96:	6858      	ldr	r0, [r3, #4]
 800aa98:	f7fb face 	bl	8006038 <LIS2DW12_ACC_Get_6D_Orientation_YH>
 800aa9c:	b950      	cbnz	r0, 800aab4 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH+0x28>
        ret = BSP_ERROR_NONE;
 800aa9e:	2000      	movs	r0, #0
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800aaa0:	bd08      	pop	{r3, pc}
  switch (Instance)
 800aaa2:	f06f 0001 	mvn.w	r0, #1
}
 800aaa6:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_6D_Orientation_YH(MotionCompObj[Instance], yh) != BSP_ERROR_NONE)
 800aaa8:	4b04      	ldr	r3, [pc, #16]	; (800aabc <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH+0x30>)
 800aaaa:	6818      	ldr	r0, [r3, #0]
 800aaac:	f7fd fc50 	bl	8008350 <LSM6DSO_ACC_Get_6D_Orientation_YH>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d0f4      	beq.n	800aa9e <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH+0x12>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aab4:	f06f 0004 	mvn.w	r0, #4
}
 800aab8:	bd08      	pop	{r3, pc}
 800aaba:	bf00      	nop
 800aabc:	200014d0 	.word	0x200014d0

0800aac0 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL>:
 * @param  Instance the device instance
 * @param  zl the pointer to the 6D orientation ZL axis
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL(uint32_t Instance, uint8_t *zl)
{
 800aac0:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 800aac2:	b158      	cbz	r0, 800aadc <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL+0x1c>
 800aac4:	2801      	cmp	r0, #1
 800aac6:	d106      	bne.n	800aad6 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL+0x16>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_ACC_Get_6D_Orientation_ZL(MotionCompObj[Instance], zl) != BSP_ERROR_NONE)
 800aac8:	4b09      	ldr	r3, [pc, #36]	; (800aaf0 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL+0x30>)
 800aaca:	6858      	ldr	r0, [r3, #4]
 800aacc:	f7fb fac8 	bl	8006060 <LIS2DW12_ACC_Get_6D_Orientation_ZL>
 800aad0:	b950      	cbnz	r0, 800aae8 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL+0x28>
        ret = BSP_ERROR_NONE;
 800aad2:	2000      	movs	r0, #0
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800aad4:	bd08      	pop	{r3, pc}
  switch (Instance)
 800aad6:	f06f 0001 	mvn.w	r0, #1
}
 800aada:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_6D_Orientation_ZL(MotionCompObj[Instance], zl) != BSP_ERROR_NONE)
 800aadc:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL+0x30>)
 800aade:	6818      	ldr	r0, [r3, #0]
 800aae0:	f7fd fc4a 	bl	8008378 <LSM6DSO_ACC_Get_6D_Orientation_ZL>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d0f4      	beq.n	800aad2 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL+0x12>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aae8:	f06f 0004 	mvn.w	r0, #4
}
 800aaec:	bd08      	pop	{r3, pc}
 800aaee:	bf00      	nop
 800aaf0:	200014d0 	.word	0x200014d0

0800aaf4 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH>:
 * @param  Instance the device instance
 * @param  zh the pointer to the 6D orientation ZH axis
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH(uint32_t Instance, uint8_t *zh)
{
 800aaf4:	b508      	push	{r3, lr}
  int32_t ret;

  switch (Instance)
 800aaf6:	b158      	cbz	r0, 800ab10 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH+0x1c>
 800aaf8:	2801      	cmp	r0, #1
 800aafa:	d106      	bne.n	800ab0a <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH+0x16>
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_ACC_Get_6D_Orientation_ZH(MotionCompObj[Instance], zh) != BSP_ERROR_NONE)
 800aafc:	4b09      	ldr	r3, [pc, #36]	; (800ab24 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH+0x30>)
 800aafe:	6858      	ldr	r0, [r3, #4]
 800ab00:	f7fb fac2 	bl	8006088 <LIS2DW12_ACC_Get_6D_Orientation_ZH>
 800ab04:	b950      	cbnz	r0, 800ab1c <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH+0x28>
        ret = BSP_ERROR_NONE;
 800ab06:	2000      	movs	r0, #0
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800ab08:	bd08      	pop	{r3, pc}
  switch (Instance)
 800ab0a:	f06f 0001 	mvn.w	r0, #1
}
 800ab0e:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_6D_Orientation_ZH(MotionCompObj[Instance], zh) != BSP_ERROR_NONE)
 800ab10:	4b04      	ldr	r3, [pc, #16]	; (800ab24 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH+0x30>)
 800ab12:	6818      	ldr	r0, [r3, #0]
 800ab14:	f7fd fc44 	bl	80083a0 <LSM6DSO_ACC_Get_6D_Orientation_ZH>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d0f4      	beq.n	800ab06 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH+0x12>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab1c:	f06f 0004 	mvn.w	r0, #4
}
 800ab20:	bd08      	pop	{r3, pc}
 800ab22:	bf00      	nop
 800ab24:	200014d0 	.word	0x200014d0

0800ab28 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800ab28:	4a16      	ldr	r2, [pc, #88]	; (800ab84 <SystemInit+0x5c>)
 800ab2a:	2000      	movs	r0, #0
{
 800ab2c:	b410      	push	{r4}
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800ab2e:	6090      	str	r0, [r2, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800ab30:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800ab34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800ab38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab3c:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 800ab40:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800ab42:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
  RCC->CR |= RCC_CR_MSION;
 800ab46:	f042 0201 	orr.w	r2, r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00070000U;
 800ab4c:	6099      	str	r1, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800ab4e:	681c      	ldr	r4, [r3, #0]
 800ab50:	4a0d      	ldr	r2, [pc, #52]	; (800ab88 <SystemInit+0x60>)
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800ab52:	490e      	ldr	r1, [pc, #56]	; (800ab8c <SystemInit+0x64>)
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800ab54:	4022      	ands	r2, r4
 800ab56:	601a      	str	r2, [r3, #0]
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800ab58:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
}
 800ab5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800ab60:	f022 0205 	bic.w	r2, r2, #5
 800ab64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800ab68:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ab6c:	f022 0201 	bic.w	r2, r2, #1
 800ab70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  RCC->PLLCFGR = 0x22041000U;
 800ab74:	60d9      	str	r1, [r3, #12]
  RCC->PLLSAI1CFGR = 0x22041000U;
 800ab76:	6119      	str	r1, [r3, #16]
  RCC->CR &= 0xFFFBFFFFU;
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ab7e:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000;
 800ab80:	6198      	str	r0, [r3, #24]
}
 800ab82:	4770      	bx	lr
 800ab84:	e000ed00 	.word	0xe000ed00
 800ab88:	faf6fefb 	.word	0xfaf6fefb
 800ab8c:	22041000 	.word	0x22041000

0800ab90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ab90:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 800ab92:	4e0f      	ldr	r6, [pc, #60]	; (800abd0 <HAL_InitTick+0x40>)
 800ab94:	7833      	ldrb	r3, [r6, #0]
 800ab96:	b90b      	cbnz	r3, 800ab9c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800ab98:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800ab9a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800ab9c:	4605      	mov	r5, r0
 800ab9e:	f001 fee9 	bl	800c974 <HAL_RCC_GetHCLKFreq>
 800aba2:	7832      	ldrb	r2, [r6, #0]
 800aba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aba8:	fbb3 f3f2 	udiv	r3, r3, r2
 800abac:	fbb0 f0f3 	udiv	r0, r0, r3
 800abb0:	f000 f8cc 	bl	800ad4c <HAL_SYSTICK_Config>
 800abb4:	4604      	mov	r4, r0
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d1ee      	bne.n	800ab98 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800abba:	2d0f      	cmp	r5, #15
 800abbc:	d8ec      	bhi.n	800ab98 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800abbe:	4602      	mov	r2, r0
 800abc0:	4629      	mov	r1, r5
 800abc2:	f04f 30ff 	mov.w	r0, #4294967295
 800abc6:	f000 f861 	bl	800ac8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800abca:	6075      	str	r5, [r6, #4]
 800abcc:	4620      	mov	r0, r4
}
 800abce:	bd70      	pop	{r4, r5, r6, pc}
 800abd0:	200000e0 	.word	0x200000e0

0800abd4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800abd4:	4a0a      	ldr	r2, [pc, #40]	; (800ac00 <HAL_Init+0x2c>)
 800abd6:	6813      	ldr	r3, [r2, #0]
 800abd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800abdc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800abde:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800abe0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800abe2:	f000 f841 	bl	800ac68 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800abe6:	2000      	movs	r0, #0
 800abe8:	f7ff ffd2 	bl	800ab90 <HAL_InitTick>
 800abec:	b110      	cbz	r0, 800abf4 <HAL_Init+0x20>
    status = HAL_ERROR;
 800abee:	2401      	movs	r4, #1
}
 800abf0:	4620      	mov	r0, r4
 800abf2:	bd10      	pop	{r4, pc}
 800abf4:	4604      	mov	r4, r0
    HAL_MspInit();
 800abf6:	f7f7 f8ff 	bl	8001df8 <HAL_MspInit>
}
 800abfa:	4620      	mov	r0, r4
 800abfc:	bd10      	pop	{r4, pc}
 800abfe:	bf00      	nop
 800ac00:	58004000 	.word	0x58004000

0800ac04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800ac04:	4a03      	ldr	r2, [pc, #12]	; (800ac14 <HAL_IncTick+0x10>)
 800ac06:	4b04      	ldr	r3, [pc, #16]	; (800ac18 <HAL_IncTick+0x14>)
 800ac08:	6811      	ldr	r1, [r2, #0]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	440b      	add	r3, r1
 800ac0e:	6013      	str	r3, [r2, #0]
}
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	2000156c 	.word	0x2000156c
 800ac18:	200000e0 	.word	0x200000e0

0800ac1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800ac1c:	4b01      	ldr	r3, [pc, #4]	; (800ac24 <HAL_GetTick+0x8>)
 800ac1e:	6818      	ldr	r0, [r3, #0]
}
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	2000156c 	.word	0x2000156c

0800ac28 <HAL_GetTickPrio>:
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
 800ac28:	4b01      	ldr	r3, [pc, #4]	; (800ac30 <HAL_GetTickPrio+0x8>)
}
 800ac2a:	6858      	ldr	r0, [r3, #4]
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	200000e0 	.word	0x200000e0

0800ac34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 800ac38:	f7ff fff0 	bl	800ac1c <HAL_GetTick>
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800ac3c:	1c63      	adds	r3, r4, #1
    uint32_t tickstart = HAL_GetTick();
 800ac3e:	4605      	mov	r5, r0
    if (wait < HAL_MAX_DELAY)
 800ac40:	d002      	beq.n	800ac48 <HAL_Delay+0x14>
    {
      wait += (uint32_t)(uwTickFreq);
 800ac42:	4b04      	ldr	r3, [pc, #16]	; (800ac54 <HAL_Delay+0x20>)
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	441c      	add	r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800ac48:	f7ff ffe8 	bl	800ac1c <HAL_GetTick>
 800ac4c:	1b43      	subs	r3, r0, r5
 800ac4e:	42a3      	cmp	r3, r4
 800ac50:	d3fa      	bcc.n	800ac48 <HAL_Delay+0x14>
    {
    }
  }
 800ac52:	bd38      	pop	{r3, r4, r5, pc}
 800ac54:	200000e0 	.word	0x200000e0

0800ac58 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800ac58:	4a02      	ldr	r2, [pc, #8]	; (800ac64 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800ac5a:	6853      	ldr	r3, [r2, #4]
 800ac5c:	f043 0301 	orr.w	r3, r3, #1
 800ac60:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 800ac62:	4770      	bx	lr
 800ac64:	e0042000 	.word	0xe0042000

0800ac68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ac68:	4907      	ldr	r1, [pc, #28]	; (800ac88 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800ac6a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ac6c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ac6e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ac72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ac76:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ac78:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ac7a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ac7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800ac82:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	e000ed00 	.word	0xe000ed00

0800ac8c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ac8c:	4b1c      	ldr	r3, [pc, #112]	; (800ad00 <HAL_NVIC_SetPriority+0x74>)
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ac94:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ac96:	f1c3 0e07 	rsb	lr, r3, #7
 800ac9a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ac9e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800aca2:	bf28      	it	cs
 800aca4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800aca8:	f1bc 0f06 	cmp.w	ip, #6
 800acac:	d91b      	bls.n	800ace6 <HAL_NVIC_SetPriority+0x5a>
 800acae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800acb0:	f04f 3cff 	mov.w	ip, #4294967295
 800acb4:	fa0c fc03 	lsl.w	ip, ip, r3
 800acb8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800acbc:	f04f 3cff 	mov.w	ip, #4294967295
 800acc0:	fa0c fc0e 	lsl.w	ip, ip, lr
 800acc4:	ea21 010c 	bic.w	r1, r1, ip
 800acc8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800acca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800accc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800acd0:	db0c      	blt.n	800acec <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acd2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800acd6:	0109      	lsls	r1, r1, #4
 800acd8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800acdc:	b2c9      	uxtb	r1, r1
 800acde:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800ace2:	f85d fb04 	ldr.w	pc, [sp], #4
 800ace6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ace8:	4613      	mov	r3, r2
 800acea:	e7e7      	b.n	800acbc <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acec:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <HAL_NVIC_SetPriority+0x78>)
 800acee:	f000 000f 	and.w	r0, r0, #15
 800acf2:	0109      	lsls	r1, r1, #4
 800acf4:	4403      	add	r3, r0
 800acf6:	b2c9      	uxtb	r1, r1
 800acf8:	7619      	strb	r1, [r3, #24]
 800acfa:	f85d fb04 	ldr.w	pc, [sp], #4
 800acfe:	bf00      	nop
 800ad00:	e000ed00 	.word	0xe000ed00
 800ad04:	e000ecfc 	.word	0xe000ecfc

0800ad08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	db08      	blt.n	800ad1e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ad0c:	0941      	lsrs	r1, r0, #5
 800ad0e:	4a04      	ldr	r2, [pc, #16]	; (800ad20 <HAL_NVIC_EnableIRQ+0x18>)
 800ad10:	f000 001f 	and.w	r0, r0, #31
 800ad14:	2301      	movs	r3, #1
 800ad16:	fa03 f000 	lsl.w	r0, r3, r0
 800ad1a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800ad1e:	4770      	bx	lr
 800ad20:	e000e100 	.word	0xe000e100

0800ad24 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ad24:	2800      	cmp	r0, #0
 800ad26:	db0d      	blt.n	800ad44 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ad28:	0943      	lsrs	r3, r0, #5
 800ad2a:	4907      	ldr	r1, [pc, #28]	; (800ad48 <HAL_NVIC_DisableIRQ+0x24>)
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	3320      	adds	r3, #32
 800ad30:	f000 001f 	and.w	r0, r0, #31
 800ad34:	fa02 f000 	lsl.w	r0, r2, r0
 800ad38:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ad3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ad40:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	e000e100 	.word	0xe000e100

0800ad4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ad4c:	3801      	subs	r0, #1
 800ad4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800ad52:	d210      	bcs.n	800ad76 <HAL_SYSTICK_Config+0x2a>
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ad54:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ad56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad5a:	4c08      	ldr	r4, [pc, #32]	; (800ad7c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ad5c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad5e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800ad62:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad66:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ad68:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ad6a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad6c:	619a      	str	r2, [r3, #24]
  return SysTick_Config(TicksNumb);
}
 800ad6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ad72:	6119      	str	r1, [r3, #16]
 800ad74:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800ad76:	2001      	movs	r0, #1
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	e000ed00 	.word	0xe000ed00

0800ad80 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ad80:	2800      	cmp	r0, #0
 800ad82:	db09      	blt.n	800ad98 <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ad84:	0943      	lsrs	r3, r0, #5
 800ad86:	4905      	ldr	r1, [pc, #20]	; (800ad9c <HAL_NVIC_SetPendingIRQ+0x1c>)
 800ad88:	f000 001f 	and.w	r0, r0, #31
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	3340      	adds	r3, #64	; 0x40
 800ad90:	fa02 f000 	lsl.w	r0, r2, r0
 800ad94:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	e000e100 	.word	0xe000e100

0800ada0 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ada0:	2800      	cmp	r0, #0
 800ada2:	db09      	blt.n	800adb8 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ada4:	0943      	lsrs	r3, r0, #5
 800ada6:	4905      	ldr	r1, [pc, #20]	; (800adbc <HAL_NVIC_ClearPendingIRQ+0x1c>)
 800ada8:	f000 001f 	and.w	r0, r0, #31
 800adac:	2201      	movs	r2, #1
 800adae:	3360      	adds	r3, #96	; 0x60
 800adb0:	fa02 f000 	lsl.w	r0, r2, r0
 800adb4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	e000e100 	.word	0xe000e100

0800adc0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d036      	beq.n	800ae32 <HAL_CRC_Init+0x72>
{
 800adc4:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800adc6:	7f43      	ldrb	r3, [r0, #29]
 800adc8:	4604      	mov	r4, r0
 800adca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800adce:	b363      	cbz	r3, 800ae2a <HAL_CRC_Init+0x6a>
  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800add0:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800add2:	2202      	movs	r2, #2
 800add4:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800add6:	b9f3      	cbnz	r3, 800ae16 <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800add8:	6823      	ldr	r3, [r4, #0]
 800adda:	4a17      	ldr	r2, [pc, #92]	; (800ae38 <HAL_CRC_Init+0x78>)
 800addc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800adde:	689a      	ldr	r2, [r3, #8]
 800ade0:	f022 0218 	bic.w	r2, r2, #24
 800ade4:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ade6:	7962      	ldrb	r2, [r4, #5]
 800ade8:	b18a      	cbz	r2, 800ae0e <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800adea:	6922      	ldr	r2, [r4, #16]
 800adec:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800adee:	689a      	ldr	r2, [r3, #8]
 800adf0:	6961      	ldr	r1, [r4, #20]
 800adf2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800adf6:	430a      	orrs	r2, r1
 800adf8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800adfa:	689a      	ldr	r2, [r3, #8]
 800adfc:	69a1      	ldr	r1, [r4, #24]
 800adfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae02:	430a      	orrs	r2, r1
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ae04:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ae06:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800ae08:	7761      	strb	r1, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800ae0a:	2000      	movs	r0, #0
}
 800ae0c:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ae0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae12:	611a      	str	r2, [r3, #16]
 800ae14:	e7eb      	b.n	800adee <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ae16:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 f80e 	bl	800ae3c <HAL_CRCEx_Polynomial_Set>
 800ae20:	b908      	cbnz	r0, 800ae26 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	e7df      	b.n	800ade6 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 800ae26:	2001      	movs	r0, #1
}
 800ae28:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800ae2a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800ae2c:	f7f7 f808 	bl	8001e40 <HAL_CRC_MspInit>
 800ae30:	e7ce      	b.n	800add0 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 800ae32:	2001      	movs	r0, #1
}
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	04c11db7 	.word	0x04c11db7

0800ae3c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800ae3c:	b410      	push	{r4}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800ae3e:	231e      	movs	r3, #30
 800ae40:	e001      	b.n	800ae46 <HAL_CRCEx_Polynomial_Set+0xa>
 800ae42:	3b01      	subs	r3, #1
 800ae44:	d315      	bcc.n	800ae72 <HAL_CRCEx_Polynomial_Set+0x36>
 800ae46:	fa21 fc03 	lsr.w	ip, r1, r3
 800ae4a:	f01c 0f01 	tst.w	ip, #1
 800ae4e:	d0f8      	beq.n	800ae42 <HAL_CRCEx_Polynomial_Set+0x6>
  {
  }

  switch (PolyLength)
 800ae50:	2a18      	cmp	r2, #24
 800ae52:	d80f      	bhi.n	800ae74 <HAL_CRCEx_Polynomial_Set+0x38>
 800ae54:	e8df f002 	tbb	[pc, r2]
 800ae58:	0e0e0e14 	.word	0x0e0e0e14
 800ae5c:	0e0e0e0e 	.word	0x0e0e0e0e
 800ae60:	0e0e0e1f 	.word	0x0e0e0e1f
 800ae64:	0e0e0e0e 	.word	0x0e0e0e0e
 800ae68:	0e0e0e22 	.word	0x0e0e0e22
 800ae6c:	0e0e0e0e 	.word	0x0e0e0e0e
 800ae70:	12          	.byte	0x12
 800ae71:	00          	.byte	0x00
 800ae72:	b12a      	cbz	r2, 800ae80 <HAL_CRCEx_Polynomial_Set+0x44>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800ae74:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 800ae76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae7a:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 800ae7c:	2b06      	cmp	r3, #6
 800ae7e:	d8f9      	bhi.n	800ae74 <HAL_CRCEx_Polynomial_Set+0x38>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800ae80:	6804      	ldr	r4, [r0, #0]
 800ae82:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800ae84:	68a3      	ldr	r3, [r4, #8]
 800ae86:	f023 0318 	bic.w	r3, r3, #24
 800ae8a:	431a      	orrs	r2, r3
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	60a2      	str	r2, [r4, #8]
}
 800ae90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae94:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_16B)
 800ae96:	2b0f      	cmp	r3, #15
 800ae98:	d9f2      	bls.n	800ae80 <HAL_CRCEx_Polynomial_Set+0x44>
 800ae9a:	e7eb      	b.n	800ae74 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 800ae9c:	2b07      	cmp	r3, #7
 800ae9e:	d9ef      	bls.n	800ae80 <HAL_CRCEx_Polynomial_Set+0x44>
 800aea0:	e7e8      	b.n	800ae74 <HAL_CRCEx_Polynomial_Set+0x38>
 800aea2:	bf00      	nop

0800aea4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d079      	beq.n	800af9c <HAL_DMA_Init+0xf8>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800aea8:	6803      	ldr	r3, [r0, #0]
 800aeaa:	4a3d      	ldr	r2, [pc, #244]	; (800afa0 <HAL_DMA_Init+0xfc>)
 800aeac:	4293      	cmp	r3, r2
{
 800aeae:	b470      	push	{r4, r5, r6}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800aeb0:	d960      	bls.n	800af74 <HAL_DMA_Init+0xd0>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800aeb2:	4c3c      	ldr	r4, [pc, #240]	; (800afa4 <HAL_DMA_Init+0x100>)
 800aeb4:	4a3c      	ldr	r2, [pc, #240]	; (800afa8 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 800aeb6:	4d3d      	ldr	r5, [pc, #244]	; (800afac <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800aeb8:	441c      	add	r4, r3
 800aeba:	fba2 2404 	umull	r2, r4, r2, r4
 800aebe:	0924      	lsrs	r4, r4, #4
 800aec0:	00a4      	lsls	r4, r4, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aec2:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800aec4:	6881      	ldr	r1, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 800aec6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 800aeca:	68c2      	ldr	r2, [r0, #12]
 800aecc:	e9c0 5410 	strd	r5, r4, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aed0:	6905      	ldr	r5, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 800aed2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aed4:	432a      	orrs	r2, r5
 800aed6:	6945      	ldr	r5, [r0, #20]
 800aed8:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aeda:	6985      	ldr	r5, [r0, #24]
 800aedc:	432a      	orrs	r2, r5
  tmp = hdma->Instance->CCR;
 800aede:	681d      	ldr	r5, [r3, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800aee0:	f425 4cff 	bic.w	ip, r5, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aee4:	69c5      	ldr	r5, [r0, #28]
 800aee6:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800aee8:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800aeea:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800aeee:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 800aef0:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800aef4:	601a      	str	r2, [r3, #0]
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800aef6:	4a2a      	ldr	r2, [pc, #168]	; (800afa0 <HAL_DMA_Init+0xfc>)
 800aef8:	4293      	cmp	r3, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800aefa:	bf8a      	itet	hi
 800aefc:	4a2c      	ldrhi	r2, [pc, #176]	; (800afb0 <HAL_DMA_Init+0x10c>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800aefe:	f104 4280 	addls.w	r2, r4, #1073741824	; 0x40000000
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800af02:	1912      	addhi	r2, r2, r4
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800af04:	4c2b      	ldr	r4, [pc, #172]	; (800afb4 <HAL_DMA_Init+0x110>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800af06:	bf98      	it	ls
 800af08:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800af0c:	e9c0 2412 	strd	r2, r4, [r0, #72]	; 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800af10:	b2db      	uxtb	r3, r3
 800af12:	4c25      	ldr	r4, [pc, #148]	; (800afa8 <HAL_DMA_Init+0x104>)
 800af14:	3b08      	subs	r3, #8
 800af16:	fba4 4303 	umull	r4, r3, r4, r3

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800af1a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800af1e:	2401      	movs	r4, #1
 800af20:	fa04 f303 	lsl.w	r3, r4, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800af24:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800af28:	6503      	str	r3, [r0, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800af2a:	d02c      	beq.n	800af86 <HAL_DMA_Init+0xe2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800af2c:	6845      	ldr	r5, [r0, #4]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af2e:	4e22      	ldr	r6, [pc, #136]	; (800afb8 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800af30:	f005 013f 	and.w	r1, r5, #63	; 0x3f
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800af34:	3d01      	subs	r5, #1
 800af36:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800af38:	6011      	str	r1, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af3a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800af3e:	d828      	bhi.n	800af92 <HAL_DMA_Init+0xee>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800af40:	4b1e      	ldr	r3, [pc, #120]	; (800afbc <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800af42:	4d1f      	ldr	r5, [pc, #124]	; (800afc0 <HAL_DMA_Init+0x11c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800af44:	440b      	add	r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800af46:	3901      	subs	r1, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800af48:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800af4a:	f001 0103 	and.w	r1, r1, #3
 800af4e:	fa04 f101 	lsl.w	r1, r4, r1
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800af52:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800af54:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800af58:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800af5a:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800af5c:	4b19      	ldr	r3, [pc, #100]	; (800afc4 <HAL_DMA_Init+0x120>)
 800af5e:	6459      	str	r1, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800af60:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800af62:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800af64:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 800af66:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800af6a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 800af6e:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800af70:	4618      	mov	r0, r3
}
 800af72:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800af74:	4c14      	ldr	r4, [pc, #80]	; (800afc8 <HAL_DMA_Init+0x124>)
 800af76:	4a0c      	ldr	r2, [pc, #48]	; (800afa8 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 800af78:	4d14      	ldr	r5, [pc, #80]	; (800afcc <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800af7a:	441c      	add	r4, r3
 800af7c:	fba2 2404 	umull	r2, r4, r2, r4
 800af80:	0924      	lsrs	r4, r4, #4
 800af82:	00a4      	lsls	r4, r4, #2
    hdma->DmaBaseAddress = DMA1;
 800af84:	e79d      	b.n	800aec2 <HAL_DMA_Init+0x1e>
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af86:	4c0c      	ldr	r4, [pc, #48]	; (800afb8 <HAL_DMA_Init+0x114>)
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800af88:	2100      	movs	r1, #0
 800af8a:	6041      	str	r1, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800af8c:	6011      	str	r1, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af8e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 800af92:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 800af94:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800af98:	65c3      	str	r3, [r0, #92]	; 0x5c
 800af9a:	e7e1      	b.n	800af60 <HAL_DMA_Init+0xbc>
    return HAL_ERROR;
 800af9c:	2001      	movs	r0, #1
}
 800af9e:	4770      	bx	lr
 800afa0:	40020407 	.word	0x40020407
 800afa4:	bffdfbf8 	.word	0xbffdfbf8
 800afa8:	cccccccd 	.word	0xcccccccd
 800afac:	40020400 	.word	0x40020400
 800afb0:	4002081c 	.word	0x4002081c
 800afb4:	40020880 	.word	0x40020880
 800afb8:	40020800 	.word	0x40020800
 800afbc:	1000823f 	.word	0x1000823f
 800afc0:	40020940 	.word	0x40020940
 800afc4:	40020900 	.word	0x40020900
 800afc8:	bffdfff8 	.word	0xbffdfff8
 800afcc:	40020000 	.word	0x40020000

0800afd0 <HAL_DMA_Start_IT>:
{
 800afd0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800afd2:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800afd6:	2c01      	cmp	r4, #1
 800afd8:	d051      	beq.n	800b07e <HAL_DMA_Start_IT+0xae>
 800afda:	2401      	movs	r4, #1
 800afdc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800afe0:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 800afe4:	2c01      	cmp	r4, #1
 800afe6:	d005      	beq.n	800aff4 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 800afe8:	2300      	movs	r3, #0
 800afea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800afee:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800aff0:	2002      	movs	r0, #2
}
 800aff2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800aff4:	2402      	movs	r4, #2
 800aff6:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800affa:	2400      	movs	r4, #0
 800affc:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800affe:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b000:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 800b002:	6825      	ldr	r5, [r4, #0]
 800b004:	f025 0501 	bic.w	r5, r5, #1
 800b008:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b00a:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 800b00e:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 800b010:	b115      	cbz	r5, 800b018 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b012:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 800b016:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b018:	6c46      	ldr	r6, [r0, #68]	; 0x44
 800b01a:	6c07      	ldr	r7, [r0, #64]	; 0x40
 800b01c:	f006 0c1c 	and.w	ip, r6, #28
 800b020:	2601      	movs	r6, #1
 800b022:	fa06 f60c 	lsl.w	r6, r6, ip
 800b026:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 800b028:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b02a:	6883      	ldr	r3, [r0, #8]
 800b02c:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 800b02e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 800b030:	bf0b      	itete	eq
 800b032:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800b034:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800b036:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800b038:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 800b03a:	b1bb      	cbz	r3, 800b06c <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	f043 030e 	orr.w	r3, r3, #14
 800b042:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b044:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	03d2      	lsls	r2, r2, #15
 800b04a:	d503      	bpl.n	800b054 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b052:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800b054:	b11d      	cbz	r5, 800b05e <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b056:	682b      	ldr	r3, [r5, #0]
 800b058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b05c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800b05e:	6823      	ldr	r3, [r4, #0]
 800b060:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800b064:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800b066:	6023      	str	r3, [r4, #0]
}
 800b068:	bcf0      	pop	{r4, r5, r6, r7}
 800b06a:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b06c:	6823      	ldr	r3, [r4, #0]
 800b06e:	f023 0304 	bic.w	r3, r3, #4
 800b072:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	f043 030a 	orr.w	r3, r3, #10
 800b07a:	6023      	str	r3, [r4, #0]
 800b07c:	e7e2      	b.n	800b044 <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 800b07e:	2002      	movs	r0, #2
}
 800b080:	bcf0      	pop	{r4, r5, r6, r7}
 800b082:	4770      	bx	lr

0800b084 <HAL_DMA_Abort>:
  if (NULL == hdma)
 800b084:	2800      	cmp	r0, #0
 800b086:	d035      	beq.n	800b0f4 <HAL_DMA_Abort+0x70>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b088:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	d12a      	bne.n	800b0e6 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b090:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b092:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b094:	6819      	ldr	r1, [r3, #0]
{
 800b096:	b430      	push	{r4, r5}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b098:	f021 010e 	bic.w	r1, r1, #14
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b09c:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b09e:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b0a0:	6821      	ldr	r1, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b0a2:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b0a4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800b0a8:	6021      	str	r1, [r4, #0]
    __HAL_DMA_DISABLE(hdma);
 800b0aa:	6819      	ldr	r1, [r3, #0]
 800b0ac:	f021 0101 	bic.w	r1, r1, #1
 800b0b0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b0b2:	f002 021c 	and.w	r2, r2, #28
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b0ba:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
 800b0be:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b0c0:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b0c2:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800b0c4:	b132      	cbz	r2, 800b0d4 <HAL_DMA_Abort+0x50>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b0c6:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b0c8:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b0cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0d0:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b0d2:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 800b0d4:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800b0dc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800b0e0:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800b0e2:	4618      	mov	r0, r3
}
 800b0e4:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b0e6:	2204      	movs	r2, #4
    __HAL_UNLOCK(hdma);
 800b0e8:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b0ea:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800b0ec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800b0f0:	2001      	movs	r0, #1
 800b0f2:	4770      	bx	lr
    return HAL_ERROR;
 800b0f4:	2001      	movs	r0, #1
}
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_DMA_Abort_IT>:
{
 800b0f8:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b0fa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d003      	beq.n	800b10a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b102:	2304      	movs	r3, #4
 800b104:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800b106:	2001      	movs	r0, #1
}
 800b108:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b10a:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b10c:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b10e:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b110:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b112:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b114:	f021 010e 	bic.w	r1, r1, #14
 800b118:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800b11a:	6819      	ldr	r1, [r3, #0]
 800b11c:	f021 0101 	bic.w	r1, r1, #1
 800b120:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b122:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b124:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b12a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b12c:	f002 021c 	and.w	r2, r2, #28
 800b130:	2301      	movs	r3, #1
 800b132:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b134:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b138:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b13a:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800b13c:	b132      	cbz	r2, 800b14c <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b13e:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b140:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b148:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b14a:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 800b14c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800b14e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 800b150:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800b152:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800b156:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 800b15a:	b113      	cbz	r3, 800b162 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 800b15c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800b15e:	4620      	mov	r0, r4
}
 800b160:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800b162:	4618      	mov	r0, r3
}
 800b164:	bd38      	pop	{r3, r4, r5, pc}
 800b166:	bf00      	nop

0800b168 <HAL_DMA_IRQHandler>:
{
 800b168:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b16a:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b16c:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800b16e:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b170:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800b172:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b174:	f003 031c 	and.w	r3, r3, #28
 800b178:	2204      	movs	r2, #4
 800b17a:	409a      	lsls	r2, r3
 800b17c:	420a      	tst	r2, r1
 800b17e:	d00e      	beq.n	800b19e <HAL_DMA_IRQHandler+0x36>
 800b180:	f014 0f04 	tst.w	r4, #4
 800b184:	d00b      	beq.n	800b19e <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b186:	682b      	ldr	r3, [r5, #0]
 800b188:	069b      	lsls	r3, r3, #26
 800b18a:	d403      	bmi.n	800b194 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b18c:	682b      	ldr	r3, [r5, #0]
 800b18e:	f023 0304 	bic.w	r3, r3, #4
 800b192:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800b194:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800b196:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800b198:	b1cb      	cbz	r3, 800b1ce <HAL_DMA_IRQHandler+0x66>
}
 800b19a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800b19c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800b19e:	2202      	movs	r2, #2
 800b1a0:	409a      	lsls	r2, r3
 800b1a2:	420a      	tst	r2, r1
 800b1a4:	d015      	beq.n	800b1d2 <HAL_DMA_IRQHandler+0x6a>
 800b1a6:	f014 0f02 	tst.w	r4, #2
 800b1aa:	d012      	beq.n	800b1d2 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b1ac:	682b      	ldr	r3, [r5, #0]
 800b1ae:	0699      	lsls	r1, r3, #26
 800b1b0:	d406      	bmi.n	800b1c0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b1b2:	682b      	ldr	r3, [r5, #0]
 800b1b4:	f023 030a 	bic.w	r3, r3, #10
 800b1b8:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 800b1c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800b1c2:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1e5      	bne.n	800b19a <HAL_DMA_IRQHandler+0x32>
}
 800b1ce:	bc70      	pop	{r4, r5, r6}
 800b1d0:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800b1d2:	2208      	movs	r2, #8
 800b1d4:	409a      	lsls	r2, r3
 800b1d6:	420a      	tst	r2, r1
 800b1d8:	d0f9      	beq.n	800b1ce <HAL_DMA_IRQHandler+0x66>
 800b1da:	0722      	lsls	r2, r4, #28
 800b1dc:	d5f7      	bpl.n	800b1ce <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b1de:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 800b1e0:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b1e2:	f022 020e 	bic.w	r2, r2, #14
 800b1e6:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800b1ee:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b1f0:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b1f2:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800b1f4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800b1f8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 800b1fc:	2900      	cmp	r1, #0
 800b1fe:	d0e6      	beq.n	800b1ce <HAL_DMA_IRQHandler+0x66>
}
 800b200:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800b202:	4708      	bx	r1

0800b204 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b208:	680c      	ldr	r4, [r1, #0]
{
 800b20a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b20c:	2c00      	cmp	r4, #0
 800b20e:	d06e      	beq.n	800b2ee <HAL_GPIO_Init+0xea>
 800b210:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b214:	4e65      	ldr	r6, [pc, #404]	; (800b3ac <HAL_GPIO_Init+0x1a8>)
  uint32_t position = 0x00u;
 800b216:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b218:	f04f 0b01 	mov.w	fp, #1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b21c:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b21e:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 800b222:	ea17 0a04 	ands.w	sl, r7, r4
 800b226:	d05c      	beq.n	800b2e2 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b228:	f8de 1004 	ldr.w	r1, [lr, #4]
 800b22c:	f001 0203 	and.w	r2, r1, #3
 800b230:	1e55      	subs	r5, r2, #1
 800b232:	2d01      	cmp	r5, #1
 800b234:	d95e      	bls.n	800b2f4 <HAL_GPIO_Init+0xf0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b236:	2a03      	cmp	r2, #3
 800b238:	f040 80a2 	bne.w	800b380 <HAL_GPIO_Init+0x17c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b23c:	fa02 f20c 	lsl.w	r2, r2, ip
 800b240:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 800b242:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b244:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b246:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b248:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 800b24c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b24e:	d048      	beq.n	800b2e2 <HAL_GPIO_Init+0xde>
        temp = SYSCFG->EXTICR[position >> 2u];
 800b250:	f023 0203 	bic.w	r2, r3, #3
 800b254:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b258:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b25c:	f003 0503 	and.w	r5, r3, #3
 800b260:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp = SYSCFG->EXTICR[position >> 2u];
 800b264:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b266:	250f      	movs	r5, #15
 800b268:	fa05 f809 	lsl.w	r8, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b26c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b270:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b274:	d012      	beq.n	800b29c <HAL_GPIO_Init+0x98>
 800b276:	4d4e      	ldr	r5, [pc, #312]	; (800b3b0 <HAL_GPIO_Init+0x1ac>)
 800b278:	42a8      	cmp	r0, r5
 800b27a:	f000 808c 	beq.w	800b396 <HAL_GPIO_Init+0x192>
 800b27e:	4d4d      	ldr	r5, [pc, #308]	; (800b3b4 <HAL_GPIO_Init+0x1b0>)
 800b280:	42a8      	cmp	r0, r5
 800b282:	f000 808c 	beq.w	800b39e <HAL_GPIO_Init+0x19a>
 800b286:	4d4c      	ldr	r5, [pc, #304]	; (800b3b8 <HAL_GPIO_Init+0x1b4>)
 800b288:	42a8      	cmp	r0, r5
 800b28a:	d07e      	beq.n	800b38a <HAL_GPIO_Init+0x186>
 800b28c:	4d4b      	ldr	r5, [pc, #300]	; (800b3bc <HAL_GPIO_Init+0x1b8>)
 800b28e:	42a8      	cmp	r0, r5
 800b290:	bf0c      	ite	eq
 800b292:	2504      	moveq	r5, #4
 800b294:	2507      	movne	r5, #7
 800b296:	fa05 f509 	lsl.w	r5, r5, r9
 800b29a:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b29c:	6097      	str	r7, [r2, #8]
        temp = EXTI->IMR1;
 800b29e:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b2a2:	03cd      	lsls	r5, r1, #15
        temp &= ~(iocurrent);
 800b2a4:	ea6f 070a 	mvn.w	r7, sl
 800b2a8:	bf54      	ite	pl
 800b2aa:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800b2ac:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 800b2b0:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80

        temp = EXTI->EMR1;
 800b2b4:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b2b8:	038a      	lsls	r2, r1, #14
        temp &= ~(iocurrent);
 800b2ba:	bf54      	ite	pl
 800b2bc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800b2be:	ea4a 0505 	orrmi.w	r5, sl, r5
        }
        EXTI->EMR1 = temp;
 800b2c2:	f8c6 5084 	str.w	r5, [r6, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b2c6:	6835      	ldr	r5, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b2c8:	02ca      	lsls	r2, r1, #11
        temp &= ~(iocurrent);
 800b2ca:	bf54      	ite	pl
 800b2cc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800b2ce:	ea4a 0505 	orrmi.w	r5, sl, r5
        }
        EXTI->RTSR1 = temp;
 800b2d2:	6035      	str	r5, [r6, #0]

        temp = EXTI->FTSR1;
 800b2d4:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b2d6:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 800b2d8:	bf54      	ite	pl
 800b2da:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800b2dc:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 800b2e0:	6072      	str	r2, [r6, #4]
      }
    }

    position++;
 800b2e2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b2e4:	fa34 f203 	lsrs.w	r2, r4, r3
 800b2e8:	f10c 0c02 	add.w	ip, ip, #2
 800b2ec:	d197      	bne.n	800b21e <HAL_GPIO_Init+0x1a>
  }
}
 800b2ee:	b003      	add	sp, #12
 800b2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800b2f4:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b2f8:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b2fc:	f04f 0803 	mov.w	r8, #3
 800b300:	fa08 f80c 	lsl.w	r8, r8, ip
 800b304:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b308:	fa05 f50c 	lsl.w	r5, r5, ip
 800b30c:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 800b310:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b312:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 800b316:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b31a:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b31e:	f3c1 1700 	ubfx	r7, r1, #4, #1
 800b322:	409f      	lsls	r7, r3
 800b324:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800b328:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800b32a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b32c:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b330:	f8de 7008 	ldr.w	r7, [lr, #8]
 800b334:	fa07 f70c 	lsl.w	r7, r7, ip
 800b338:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b33c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800b33e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b340:	fa02 f20c 	lsl.w	r2, r2, ip
 800b344:	f47f af7d 	bne.w	800b242 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3u];
 800b348:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800b34c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b350:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800b354:	f8d9 7020 	ldr.w	r7, [r9, #32]
 800b358:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b35a:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b35e:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b362:	fa07 f708 	lsl.w	r7, r7, r8
 800b366:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b368:	270f      	movs	r7, #15
 800b36a:	fa07 f808 	lsl.w	r8, r7, r8
 800b36e:	9f00      	ldr	r7, [sp, #0]
 800b370:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b374:	9f01      	ldr	r7, [sp, #4]
 800b376:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 800b37a:	f8c9 7020 	str.w	r7, [r9, #32]
 800b37e:	e760      	b.n	800b242 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b380:	2503      	movs	r5, #3
 800b382:	fa05 f50c 	lsl.w	r5, r5, ip
 800b386:	43ed      	mvns	r5, r5
 800b388:	e7cf      	b.n	800b32a <HAL_GPIO_Init+0x126>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b38a:	f04f 0803 	mov.w	r8, #3
 800b38e:	fa08 f509 	lsl.w	r5, r8, r9
 800b392:	432f      	orrs	r7, r5
 800b394:	e782      	b.n	800b29c <HAL_GPIO_Init+0x98>
 800b396:	fa0b f509 	lsl.w	r5, fp, r9
 800b39a:	432f      	orrs	r7, r5
 800b39c:	e77e      	b.n	800b29c <HAL_GPIO_Init+0x98>
 800b39e:	f04f 0802 	mov.w	r8, #2
 800b3a2:	fa08 f509 	lsl.w	r5, r8, r9
 800b3a6:	432f      	orrs	r7, r5
 800b3a8:	e778      	b.n	800b29c <HAL_GPIO_Init+0x98>
 800b3aa:	bf00      	nop
 800b3ac:	58000800 	.word	0x58000800
 800b3b0:	48000400 	.word	0x48000400
 800b3b4:	48000800 	.word	0x48000800
 800b3b8:	48000c00 	.word	0x48000c00
 800b3bc:	48001000 	.word	0x48001000

0800b3c0 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800b3c0:	2900      	cmp	r1, #0
 800b3c2:	d07e      	beq.n	800b4c2 <HAL_GPIO_DeInit+0x102>
{
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
 800b3c8:	2300      	movs	r3, #0
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800b3ca:	4e3e      	ldr	r6, [pc, #248]	; (800b4c4 <HAL_GPIO_DeInit+0x104>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b3cc:	f8df b104 	ldr.w	fp, [pc, #260]	; 800b4d4 <HAL_GPIO_DeInit+0x114>
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800b3d0:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800b3d4:	f04f 0a03 	mov.w	sl, #3
 800b3d8:	e04d      	b.n	800b476 <HAL_GPIO_DeInit+0xb6>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b3da:	4558      	cmp	r0, fp
 800b3dc:	d066      	beq.n	800b4ac <HAL_GPIO_DeInit+0xec>
 800b3de:	4f3a      	ldr	r7, [pc, #232]	; (800b4c8 <HAL_GPIO_DeInit+0x108>)
 800b3e0:	42b8      	cmp	r0, r7
 800b3e2:	d067      	beq.n	800b4b4 <HAL_GPIO_DeInit+0xf4>
 800b3e4:	4f39      	ldr	r7, [pc, #228]	; (800b4cc <HAL_GPIO_DeInit+0x10c>)
 800b3e6:	42b8      	cmp	r0, r7
 800b3e8:	d068      	beq.n	800b4bc <HAL_GPIO_DeInit+0xfc>
 800b3ea:	4f39      	ldr	r7, [pc, #228]	; (800b4d0 <HAL_GPIO_DeInit+0x110>)
 800b3ec:	42b8      	cmp	r0, r7
 800b3ee:	bf14      	ite	ne
 800b3f0:	2707      	movne	r7, #7
 800b3f2:	2704      	moveq	r7, #4
 800b3f4:	fa07 f404 	lsl.w	r4, r7, r4
 800b3f8:	45a4      	cmp	ip, r4
 800b3fa:	d117      	bne.n	800b42c <HAL_GPIO_DeInit+0x6c>
        EXTI->IMR1 &= ~(iocurrent);
 800b3fc:	f8d6 4080 	ldr.w	r4, [r6, #128]	; 0x80
 800b400:	ea24 040e 	bic.w	r4, r4, lr
 800b404:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800b408:	f8d6 4084 	ldr.w	r4, [r6, #132]	; 0x84
 800b40c:	ea24 040e 	bic.w	r4, r4, lr
 800b410:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800b414:	6834      	ldr	r4, [r6, #0]
 800b416:	ea24 040e 	bic.w	r4, r4, lr
 800b41a:	6034      	str	r4, [r6, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800b41c:	6874      	ldr	r4, [r6, #4]
 800b41e:	ea24 040e 	bic.w	r4, r4, lr
 800b422:	6074      	str	r4, [r6, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800b424:	68ac      	ldr	r4, [r5, #8]
 800b426:	ea24 0408 	bic.w	r4, r4, r8
 800b42a:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800b42c:	6805      	ldr	r5, [r0, #0]
 800b42e:	005c      	lsls	r4, r3, #1
 800b430:	fa0a f404 	lsl.w	r4, sl, r4

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800b434:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800b438:	4325      	orrs	r5, r4
 800b43a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800b43e:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800b440:	f003 0507 	and.w	r5, r3, #7
 800b444:	f8dc e020 	ldr.w	lr, [ip, #32]
 800b448:	00ad      	lsls	r5, r5, #2
 800b44a:	fa09 f505 	lsl.w	r5, r9, r5
 800b44e:	ea2e 0505 	bic.w	r5, lr, r5
 800b452:	f8cc 5020 	str.w	r5, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b456:	68c5      	ldr	r5, [r0, #12]
 800b458:	ea25 0504 	bic.w	r5, r5, r4
 800b45c:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b45e:	6845      	ldr	r5, [r0, #4]
 800b460:	ea25 0202 	bic.w	r2, r5, r2
 800b464:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b466:	6882      	ldr	r2, [r0, #8]
 800b468:	ea22 0404 	bic.w	r4, r2, r4
 800b46c:	6084      	str	r4, [r0, #8]
    }

    position++;
 800b46e:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800b470:	fa31 f203 	lsrs.w	r2, r1, r3
 800b474:	d018      	beq.n	800b4a8 <HAL_GPIO_DeInit+0xe8>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800b476:	2201      	movs	r2, #1
 800b478:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800b47a:	ea12 0e01 	ands.w	lr, r2, r1
 800b47e:	d0f6      	beq.n	800b46e <HAL_GPIO_DeInit+0xae>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800b480:	f023 0503 	bic.w	r5, r3, #3
 800b484:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800b488:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800b48c:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 800b490:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800b494:	00a4      	lsls	r4, r4, #2
 800b496:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b49a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800b49e:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b4a2:	d19a      	bne.n	800b3da <HAL_GPIO_DeInit+0x1a>
 800b4a4:	2400      	movs	r4, #0
 800b4a6:	e7a7      	b.n	800b3f8 <HAL_GPIO_DeInit+0x38>
  }
}
 800b4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b4ac:	2701      	movs	r7, #1
 800b4ae:	fa07 f404 	lsl.w	r4, r7, r4
 800b4b2:	e7a1      	b.n	800b3f8 <HAL_GPIO_DeInit+0x38>
 800b4b4:	2702      	movs	r7, #2
 800b4b6:	fa07 f404 	lsl.w	r4, r7, r4
 800b4ba:	e79d      	b.n	800b3f8 <HAL_GPIO_DeInit+0x38>
 800b4bc:	fa0a f404 	lsl.w	r4, sl, r4
 800b4c0:	e79a      	b.n	800b3f8 <HAL_GPIO_DeInit+0x38>
 800b4c2:	4770      	bx	lr
 800b4c4:	58000800 	.word	0x58000800
 800b4c8:	48000800 	.word	0x48000800
 800b4cc:	48000c00 	.word	0x48000c00
 800b4d0:	48001000 	.word	0x48001000
 800b4d4:	48000400 	.word	0x48000400

0800b4d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b4d8:	b10a      	cbz	r2, 800b4de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b4da:	6181      	str	r1, [r0, #24]
 800b4dc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b4de:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop

0800b4e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800b4e4:	4a04      	ldr	r2, [pc, #16]	; (800b4f8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800b4e6:	68d1      	ldr	r1, [r2, #12]
 800b4e8:	4201      	tst	r1, r0
 800b4ea:	d100      	bne.n	800b4ee <HAL_GPIO_EXTI_IRQHandler+0xa>
 800b4ec:	4770      	bx	lr
{
 800b4ee:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b4f0:	60d0      	str	r0, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b4f2:	f7f5 fef1 	bl	80012d8 <HAL_GPIO_EXTI_Callback>
  }
}
 800b4f6:	bd08      	pop	{r3, pc}
 800b4f8:	58000800 	.word	0x58000800

0800b4fc <HAL_I2C_MspInit>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop

0800b500 <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop

0800b504 <HAL_I2C_AbortCpltCallback>:
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop

0800b508 <HAL_I2C_MspDeInit>:
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop

0800b50c <HAL_I2C_MasterTxCpltCallback>:
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop

0800b510 <HAL_I2C_MasterRxCpltCallback>:
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop

0800b514 <HAL_I2C_SlaveTxCpltCallback>:
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop

0800b518 <HAL_I2C_SlaveRxCpltCallback>:
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop

0800b51c <HAL_I2C_ListenCpltCallback>:
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop

0800b520 <HAL_I2C_MemTxCpltCallback>:
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop

0800b524 <HAL_I2C_MemRxCpltCallback>:
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop

0800b528 <HAL_I2C_ErrorCallback>:
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop

0800b52c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52e:	4605      	mov	r5, r0
 800b530:	460e      	mov	r6, r1
 800b532:	4617      	mov	r7, r2
 800b534:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b536:	682c      	ldr	r4, [r5, #0]
 800b538:	d13e      	bne.n	800b5b8 <I2C_WaitOnTXISFlagUntilTimeout+0x8c>
 800b53a:	69a3      	ldr	r3, [r4, #24]
 800b53c:	0799      	lsls	r1, r3, #30
 800b53e:	d44e      	bmi.n	800b5de <I2C_WaitOnTXISFlagUntilTimeout+0xb2>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b540:	69a3      	ldr	r3, [r4, #24]
 800b542:	06da      	lsls	r2, r3, #27
 800b544:	d5f9      	bpl.n	800b53a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b546:	6863      	ldr	r3, [r4, #4]
 800b548:	0198      	lsls	r0, r3, #6
 800b54a:	d403      	bmi.n	800b554 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b54c:	6863      	ldr	r3, [r4, #4]
 800b54e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b552:	6063      	str	r3, [r4, #4]
 800b554:	1c71      	adds	r1, r6, #1
 800b556:	d124      	bne.n	800b5a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b558:	69a3      	ldr	r3, [r4, #24]
 800b55a:	069a      	lsls	r2, r3, #26
 800b55c:	d5fc      	bpl.n	800b558 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b55e:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b560:	2210      	movs	r2, #16
 800b562:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b564:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b566:	69a3      	ldr	r3, [r4, #24]
 800b568:	079f      	lsls	r7, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 800b56a:	bf44      	itt	mi
 800b56c:	2300      	movmi	r3, #0
 800b56e:	62a3      	strmi	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b570:	69a3      	ldr	r3, [r4, #24]
 800b572:	07de      	lsls	r6, r3, #31
 800b574:	d403      	bmi.n	800b57e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b576:	69a3      	ldr	r3, [r4, #24]
 800b578:	f043 0301 	orr.w	r3, r3, #1
 800b57c:	61a3      	str	r3, [r4, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b57e:	6863      	ldr	r3, [r4, #4]
 800b580:	4918      	ldr	r1, [pc, #96]	; (800b5e4 <I2C_WaitOnTXISFlagUntilTimeout+0xb8>)
 800b582:	400b      	ands	r3, r1
 800b584:	6063      	str	r3, [r4, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b586:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b588:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800b58a:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b58c:	f043 0304 	orr.w	r3, r3, #4
 800b590:	646b      	str	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b592:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800b596:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b59a:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      return HAL_ERROR;
 800b59e:	2001      	movs	r0, #1
}
 800b5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b5a2:	69a3      	ldr	r3, [r4, #24]
 800b5a4:	069b      	lsls	r3, r3, #26
 800b5a6:	d4da      	bmi.n	800b55e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5a8:	f7ff fb38 	bl	800ac1c <HAL_GetTick>
 800b5ac:	1bc0      	subs	r0, r0, r7
 800b5ae:	4286      	cmp	r6, r0
 800b5b0:	d30f      	bcc.n	800b5d2 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
 800b5b2:	b176      	cbz	r6, 800b5d2 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b5b4:	682c      	ldr	r4, [r5, #0]
 800b5b6:	e7cd      	b.n	800b554 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b5b8:	69a3      	ldr	r3, [r4, #24]
 800b5ba:	079b      	lsls	r3, r3, #30
 800b5bc:	d40f      	bmi.n	800b5de <I2C_WaitOnTXISFlagUntilTimeout+0xb2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b5be:	69a3      	ldr	r3, [r4, #24]
 800b5c0:	06db      	lsls	r3, r3, #27
 800b5c2:	d4c0      	bmi.n	800b546 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5c4:	f7ff fb2a 	bl	800ac1c <HAL_GetTick>
 800b5c8:	1bc0      	subs	r0, r0, r7
 800b5ca:	42b0      	cmp	r0, r6
 800b5cc:	d801      	bhi.n	800b5d2 <I2C_WaitOnTXISFlagUntilTimeout+0xa6>
 800b5ce:	2e00      	cmp	r6, #0
 800b5d0:	d1b0      	bne.n	800b534 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5d2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5d4:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5d6:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800b5da:	2120      	movs	r1, #32
 800b5dc:	e7d8      	b.n	800b590 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  return HAL_OK;
 800b5de:	2000      	movs	r0, #0
}
 800b5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	fe00e800 	.word	0xfe00e800

0800b5e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800b5e8:	b570      	push	{r4, r5, r6, lr}
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	4616      	mov	r6, r2
 800b5ee:	460d      	mov	r5, r1
 800b5f0:	2900      	cmp	r1, #0
 800b5f2:	d053      	beq.n	800b69c <I2C_WaitOnSTOPFlagUntilTimeout+0xb4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b5f4:	6823      	ldr	r3, [r4, #0]
 800b5f6:	6999      	ldr	r1, [r3, #24]
 800b5f8:	068a      	lsls	r2, r1, #26
 800b5fa:	d459      	bmi.n	800b6b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xc8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b5fc:	6999      	ldr	r1, [r3, #24]
 800b5fe:	06c8      	lsls	r0, r1, #27
 800b600:	d52d      	bpl.n	800b65e <I2C_WaitOnSTOPFlagUntilTimeout+0x76>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	0192      	lsls	r2, r2, #6
 800b606:	d403      	bmi.n	800b610 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b60e:	605a      	str	r2, [r3, #4]
 800b610:	1c68      	adds	r0, r5, #1
 800b612:	d137      	bne.n	800b684 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b614:	699a      	ldr	r2, [r3, #24]
 800b616:	0691      	lsls	r1, r2, #26
 800b618:	d5fc      	bpl.n	800b614 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b61a:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b61c:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b61e:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b620:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b622:	699a      	ldr	r2, [r3, #24]
 800b624:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800b626:	bf44      	itt	mi
 800b628:	2200      	movmi	r2, #0
 800b62a:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b62c:	699a      	ldr	r2, [r3, #24]
 800b62e:	07d1      	lsls	r1, r2, #31
 800b630:	d403      	bmi.n	800b63a <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b632:	699a      	ldr	r2, [r3, #24]
 800b634:	f042 0201 	orr.w	r2, r2, #1
 800b638:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800b63a:	685a      	ldr	r2, [r3, #4]
 800b63c:	481d      	ldr	r0, [pc, #116]	; (800b6b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>)
 800b63e:	4002      	ands	r2, r0
 800b640:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b642:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b644:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800b646:	2220      	movs	r2, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b648:	f043 0304 	orr.w	r3, r3, #4
 800b64c:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800b64e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800b652:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b656:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      return HAL_ERROR;
 800b65a:	2001      	movs	r0, #1
}
 800b65c:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b65e:	f7ff fadd 	bl	800ac1c <HAL_GetTick>
 800b662:	1b80      	subs	r0, r0, r6
 800b664:	4285      	cmp	r5, r0
 800b666:	d2c5      	bcs.n	800b5f4 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b668:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b66a:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b66c:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800b670:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b672:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b674:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800b678:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b67c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800b680:	2001      	movs	r0, #1
}
 800b682:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b684:	699a      	ldr	r2, [r3, #24]
 800b686:	0692      	lsls	r2, r2, #26
 800b688:	d4c7      	bmi.n	800b61a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b68a:	f7ff fac7 	bl	800ac1c <HAL_GetTick>
 800b68e:	1b80      	subs	r0, r0, r6
 800b690:	4285      	cmp	r5, r0
 800b692:	d3e9      	bcc.n	800b668 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
 800b694:	2d00      	cmp	r5, #0
 800b696:	d0e7      	beq.n	800b668 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	e7b9      	b.n	800b610 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b69c:	6803      	ldr	r3, [r0, #0]
 800b69e:	699a      	ldr	r2, [r3, #24]
 800b6a0:	0692      	lsls	r2, r2, #26
 800b6a2:	d405      	bmi.n	800b6b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xc8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b6a4:	699a      	ldr	r2, [r3, #24]
 800b6a6:	06d1      	lsls	r1, r2, #27
 800b6a8:	d4ab      	bmi.n	800b602 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6aa:	f7ff fab7 	bl	800ac1c <HAL_GetTick>
 800b6ae:	e7db      	b.n	800b668 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  return HAL_OK;
 800b6b0:	2000      	movs	r0, #0
}
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}
 800b6b4:	fe00e800 	.word	0xfe00e800

0800b6b8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d065      	beq.n	800b788 <HAL_I2C_Init+0xd0>
{
 800b6bc:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b6be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d03e      	beq.n	800b74a <HAL_I2C_Init+0x92>
  __HAL_I2C_DISABLE(hi2c);
 800b6cc:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b6ce:	2224      	movs	r2, #36	; 0x24
 800b6d0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b6d4:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b6d6:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 800b6d8:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b6dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800b6e0:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b6e2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b6e4:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b6e6:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b6e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b6ec:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b6ee:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b6f0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b6f2:	d045      	beq.n	800b780 <HAL_I2C_Init+0xc8>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b6f4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b6f8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b6fa:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b6fc:	bf04      	itt	eq
 800b6fe:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800b702:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b704:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b706:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b708:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800b70c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b710:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b712:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b714:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b716:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b718:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b71a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b71e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b722:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b724:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b726:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b728:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b72a:	4301      	orrs	r1, r0
 800b72c:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b72e:	6819      	ldr	r1, [r3, #0]
 800b730:	f041 0101 	orr.w	r1, r1, #1
 800b734:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b736:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800b738:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b73a:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b73c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b740:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b742:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 800b746:	4610      	mov	r0, r2
}
 800b748:	bd10      	pop	{r4, pc}
    if (hi2c->MspInitCallback == NULL)
 800b74a:	6f43      	ldr	r3, [r0, #116]	; 0x74
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 800b74c:	4911      	ldr	r1, [pc, #68]	; (800b794 <HAL_I2C_Init+0xdc>)
    hi2c->Lock = HAL_UNLOCKED;
 800b74e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800b752:	4a11      	ldr	r2, [pc, #68]	; (800b798 <HAL_I2C_Init+0xe0>)
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800b754:	4811      	ldr	r0, [pc, #68]	; (800b79c <HAL_I2C_Init+0xe4>)
 800b756:	64e0      	str	r0, [r4, #76]	; 0x4c
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800b758:	e9c4 1214 	strd	r1, r2, [r4, #80]	; 0x50
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 800b75c:	4810      	ldr	r0, [pc, #64]	; (800b7a0 <HAL_I2C_Init+0xe8>)
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 800b75e:	4a11      	ldr	r2, [pc, #68]	; (800b7a4 <HAL_I2C_Init+0xec>)
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 800b760:	4911      	ldr	r1, [pc, #68]	; (800b7a8 <HAL_I2C_Init+0xf0>)
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 800b762:	e9c4 0216 	strd	r0, r2, [r4, #88]	; 0x58
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 800b766:	4a11      	ldr	r2, [pc, #68]	; (800b7ac <HAL_I2C_Init+0xf4>)
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800b768:	4811      	ldr	r0, [pc, #68]	; (800b7b0 <HAL_I2C_Init+0xf8>)
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 800b76a:	e9c4 1218 	strd	r1, r2, [r4, #96]	; 0x60
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800b76e:	4911      	ldr	r1, [pc, #68]	; (800b7b4 <HAL_I2C_Init+0xfc>)
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 800b770:	4a11      	ldr	r2, [pc, #68]	; (800b7b8 <HAL_I2C_Init+0x100>)
 800b772:	6722      	str	r2, [r4, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800b774:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    if (hi2c->MspInitCallback == NULL)
 800b778:	b143      	cbz	r3, 800b78c <HAL_I2C_Init+0xd4>
    hi2c->MspInitCallback(hi2c);
 800b77a:	4620      	mov	r0, r4
 800b77c:	4798      	blx	r3
 800b77e:	e7a5      	b.n	800b6cc <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b780:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b784:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b786:	e7bd      	b.n	800b704 <HAL_I2C_Init+0x4c>
    return HAL_ERROR;
 800b788:	2001      	movs	r0, #1
}
 800b78a:	4770      	bx	lr
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 800b78c:	4b0b      	ldr	r3, [pc, #44]	; (800b7bc <HAL_I2C_Init+0x104>)
 800b78e:	6763      	str	r3, [r4, #116]	; 0x74
 800b790:	e7f3      	b.n	800b77a <HAL_I2C_Init+0xc2>
 800b792:	bf00      	nop
 800b794:	0800b511 	.word	0x0800b511
 800b798:	0800b515 	.word	0x0800b515
 800b79c:	0800b50d 	.word	0x0800b50d
 800b7a0:	0800b519 	.word	0x0800b519
 800b7a4:	0800b51d 	.word	0x0800b51d
 800b7a8:	0800b521 	.word	0x0800b521
 800b7ac:	0800b525 	.word	0x0800b525
 800b7b0:	0800b529 	.word	0x0800b529
 800b7b4:	0800b505 	.word	0x0800b505
 800b7b8:	0800b501 	.word	0x0800b501
 800b7bc:	0800b4fd 	.word	0x0800b4fd

0800b7c0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800b7c0:	b1d8      	cbz	r0, 800b7fa <HAL_I2C_DeInit+0x3a>
  __HAL_I2C_DISABLE(hi2c);
 800b7c2:	6801      	ldr	r1, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b7c4:	2324      	movs	r3, #36	; 0x24
{
 800b7c6:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b7c8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b7cc:	680a      	ldr	r2, [r1, #0]
  if (hi2c->MspDeInitCallback == NULL)
 800b7ce:	6f83      	ldr	r3, [r0, #120]	; 0x78
  __HAL_I2C_DISABLE(hi2c);
 800b7d0:	f022 0201 	bic.w	r2, r2, #1
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	600a      	str	r2, [r1, #0]
  if (hi2c->MspDeInitCallback == NULL)
 800b7d8:	b163      	cbz	r3, 800b7f4 <HAL_I2C_DeInit+0x34>
  hi2c->MspDeInitCallback(hi2c);
 800b7da:	4620      	mov	r0, r4
 800b7dc:	4798      	blx	r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800b7e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800b7e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b7ea:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  return HAL_OK;
 800b7f0:	4618      	mov	r0, r3
}
 800b7f2:	bd10      	pop	{r4, pc}
    hi2c->MspDeInitCallback = HAL_I2C_MspDeInit; /* Legacy weak MspDeInit  */
 800b7f4:	4b02      	ldr	r3, [pc, #8]	; (800b800 <HAL_I2C_DeInit+0x40>)
 800b7f6:	6783      	str	r3, [r0, #120]	; 0x78
 800b7f8:	e7ef      	b.n	800b7da <HAL_I2C_DeInit+0x1a>
    return HAL_ERROR;
 800b7fa:	2001      	movs	r0, #1
}
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	0800b509 	.word	0x0800b509

0800b804 <HAL_I2C_RegisterCallback>:
{
 800b804:	4603      	mov	r3, r0
  if (pCallback == NULL)
 800b806:	b36a      	cbz	r2, 800b864 <HAL_I2C_RegisterCallback+0x60>
  __HAL_LOCK(hi2c);
 800b808:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800b80c:	2801      	cmp	r0, #1
 800b80e:	d02f      	beq.n	800b870 <HAL_I2C_RegisterCallback+0x6c>
  if (HAL_I2C_STATE_READY == hi2c->State)
 800b810:	f893 c041 	ldrb.w	ip, [r3, #65]	; 0x41
  __HAL_LOCK(hi2c);
 800b814:	2001      	movs	r0, #1
  if (HAL_I2C_STATE_READY == hi2c->State)
 800b816:	f1bc 0f20 	cmp.w	ip, #32
  __HAL_LOCK(hi2c);
 800b81a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
  if (HAL_I2C_STATE_READY == hi2c->State)
 800b81e:	d011      	beq.n	800b844 <HAL_I2C_RegisterCallback+0x40>
{
 800b820:	b410      	push	{r4}
  else if (HAL_I2C_STATE_RESET == hi2c->State)
 800b822:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
 800b826:	b91c      	cbnz	r4, 800b830 <HAL_I2C_RegisterCallback+0x2c>
    switch (CallbackID)
 800b828:	2909      	cmp	r1, #9
 800b82a:	d018      	beq.n	800b85e <HAL_I2C_RegisterCallback+0x5a>
 800b82c:	290a      	cmp	r1, #10
 800b82e:	d013      	beq.n	800b858 <HAL_I2C_RegisterCallback+0x54>
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 800b830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b836:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800b83e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b842:	4770      	bx	lr
    switch (CallbackID)
 800b844:	290a      	cmp	r1, #10
 800b846:	d839      	bhi.n	800b8bc <HAL_I2C_RegisterCallback+0xb8>
 800b848:	e8df f001 	tbb	[pc, r1]
 800b84c:	2f2c201d 	.word	0x2f2c201d
 800b850:	23292635 	.word	0x23292635
 800b854:	1432      	.short	0x1432
 800b856:	1a          	.byte	0x1a
 800b857:	00          	.byte	0x00
        hi2c->MspDeInitCallback = pCallback;
 800b858:	679a      	str	r2, [r3, #120]	; 0x78
  HAL_StatusTypeDef status = HAL_OK;
 800b85a:	2000      	movs	r0, #0
        break;
 800b85c:	e7ec      	b.n	800b838 <HAL_I2C_RegisterCallback+0x34>
        hi2c->MspInitCallback = pCallback;
 800b85e:	675a      	str	r2, [r3, #116]	; 0x74
  HAL_StatusTypeDef status = HAL_OK;
 800b860:	2000      	movs	r0, #0
        break;
 800b862:	e7e9      	b.n	800b838 <HAL_I2C_RegisterCallback+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 800b864:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    return HAL_ERROR;
 800b86a:	2001      	movs	r0, #1
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 800b86c:	645a      	str	r2, [r3, #68]	; 0x44
    return HAL_ERROR;
 800b86e:	4770      	bx	lr
  __HAL_LOCK(hi2c);
 800b870:	2002      	movs	r0, #2
 800b872:	4770      	bx	lr
        hi2c->MspInitCallback = pCallback;
 800b874:	675a      	str	r2, [r3, #116]	; 0x74
  HAL_StatusTypeDef status = HAL_OK;
 800b876:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800b87e:	4770      	bx	lr
        hi2c->MspDeInitCallback = pCallback;
 800b880:	679a      	str	r2, [r3, #120]	; 0x78
  HAL_StatusTypeDef status = HAL_OK;
 800b882:	2000      	movs	r0, #0
 800b884:	e7f8      	b.n	800b878 <HAL_I2C_RegisterCallback+0x74>
        hi2c->MasterTxCpltCallback = pCallback;
 800b886:	64da      	str	r2, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 800b888:	4608      	mov	r0, r1
        break;
 800b88a:	e7f5      	b.n	800b878 <HAL_I2C_RegisterCallback+0x74>
        hi2c->MasterRxCpltCallback = pCallback;
 800b88c:	651a      	str	r2, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800b88e:	2000      	movs	r0, #0
        break;
 800b890:	e7f2      	b.n	800b878 <HAL_I2C_RegisterCallback+0x74>
        hi2c->ErrorCallback = pCallback;
 800b892:	669a      	str	r2, [r3, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 800b894:	2000      	movs	r0, #0
        break;
 800b896:	e7ef      	b.n	800b878 <HAL_I2C_RegisterCallback+0x74>
        hi2c->MemTxCpltCallback = pCallback;
 800b898:	661a      	str	r2, [r3, #96]	; 0x60
  HAL_StatusTypeDef status = HAL_OK;
 800b89a:	2000      	movs	r0, #0
        break;
 800b89c:	e7ec      	b.n	800b878 <HAL_I2C_RegisterCallback+0x74>
        hi2c->MemRxCpltCallback = pCallback;
 800b89e:	665a      	str	r2, [r3, #100]	; 0x64
  HAL_StatusTypeDef status = HAL_OK;
 800b8a0:	2000      	movs	r0, #0
        break;
 800b8a2:	e7e9      	b.n	800b878 <HAL_I2C_RegisterCallback+0x74>
        hi2c->SlaveTxCpltCallback = pCallback;
 800b8a4:	655a      	str	r2, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800b8a6:	2000      	movs	r0, #0
        break;
 800b8a8:	e7e6      	b.n	800b878 <HAL_I2C_RegisterCallback+0x74>
        hi2c->SlaveRxCpltCallback = pCallback;
 800b8aa:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 800b8ac:	2000      	movs	r0, #0
        break;
 800b8ae:	e7e3      	b.n	800b878 <HAL_I2C_RegisterCallback+0x74>
        hi2c->AbortCpltCallback = pCallback;
 800b8b0:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800b8b2:	2000      	movs	r0, #0
        break;
 800b8b4:	e7e0      	b.n	800b878 <HAL_I2C_RegisterCallback+0x74>
        hi2c->ListenCpltCallback = pCallback;
 800b8b6:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 800b8b8:	2000      	movs	r0, #0
        break;
 800b8ba:	e7dd      	b.n	800b878 <HAL_I2C_RegisterCallback+0x74>
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 800b8bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
        status =  HAL_ERROR;
 800b8c2:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 800b8c4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800b8c6:	e7d7      	b.n	800b878 <HAL_I2C_RegisterCallback+0x74>

0800b8c8 <HAL_I2C_Mem_Write>:
{
 800b8c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8cc:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800b8d2:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
 800b8d6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8da:	2b20      	cmp	r3, #32
 800b8dc:	f040 80a4 	bne.w	800ba28 <HAL_I2C_Mem_Write+0x160>
    if ((pData == NULL) || (Size == 0U))
 800b8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f000 8099 	beq.w	800ba1c <HAL_I2C_Mem_Write+0x154>
 800b8ea:	f1bb 0f00 	cmp.w	fp, #0
 800b8ee:	f000 8095 	beq.w	800ba1c <HAL_I2C_Mem_Write+0x154>
    __HAL_LOCK(hi2c);
 800b8f2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	f000 8096 	beq.w	800ba28 <HAL_I2C_Mem_Write+0x160>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800b902:	460f      	mov	r7, r1
 800b904:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800b906:	f7ff f989 	bl	800ac1c <HAL_GetTick>
 800b90a:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 800b90c:	e005      	b.n	800b91a <HAL_I2C_Mem_Write+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b90e:	f7ff f985 	bl	800ac1c <HAL_GetTick>
 800b912:	1b80      	subs	r0, r0, r6
 800b914:	2819      	cmp	r0, #25
 800b916:	f200 808a 	bhi.w	800ba2e <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b91a:	6823      	ldr	r3, [r4, #0]
 800b91c:	699d      	ldr	r5, [r3, #24]
 800b91e:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 800b922:	d1f4      	bne.n	800b90e <HAL_I2C_Mem_Write+0x46>
    hi2c->pBuffPtr  = pData;
 800b924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b926:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b928:	2221      	movs	r2, #33	; 0x21
 800b92a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b92e:	2240      	movs	r2, #64	; 0x40
 800b930:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b934:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800b936:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	4976      	ldr	r1, [pc, #472]	; (800bb18 <HAL_I2C_Mem_Write+0x250>)
    hi2c->XferISR   = NULL;
 800b93e:	6365      	str	r5, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 800b940:	400a      	ands	r2, r1
 800b942:	fa5f f18a 	uxtb.w	r1, sl
 800b946:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b94a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b94e:	433a      	orrs	r2, r7
 800b950:	f042 4201 	orr.w	r2, r2, #2164260864	; 0x81000000
 800b954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b958:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b95a:	4641      	mov	r1, r8
 800b95c:	4632      	mov	r2, r6
 800b95e:	4620      	mov	r0, r4
 800b960:	f7ff fde4 	bl	800b52c <I2C_WaitOnTXISFlagUntilTimeout>
 800b964:	2800      	cmp	r0, #0
 800b966:	f040 8096 	bne.w	800ba96 <HAL_I2C_Mem_Write+0x1ce>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b96a:	f1ba 0f01 	cmp.w	sl, #1
 800b96e:	f040 8086 	bne.w	800ba7e <HAL_I2C_Mem_Write+0x1b6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b972:	6822      	ldr	r2, [r4, #0]
 800b974:	fa5f f389 	uxtb.w	r3, r9
 800b978:	6293      	str	r3, [r2, #40]	; 0x28
 800b97a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b97e:	d165      	bne.n	800ba4c <HAL_I2C_Mem_Write+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b980:	6993      	ldr	r3, [r2, #24]
 800b982:	061d      	lsls	r5, r3, #24
 800b984:	d5fc      	bpl.n	800b980 <HAL_I2C_Mem_Write+0xb8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b986:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b988:	b29b      	uxth	r3, r3
 800b98a:	2bff      	cmp	r3, #255	; 0xff
 800b98c:	d86b      	bhi.n	800ba66 <HAL_I2C_Mem_Write+0x19e>
      hi2c->XferSize = hi2c->XferCount;
 800b98e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800b990:	4862      	ldr	r0, [pc, #392]	; (800bb1c <HAL_I2C_Mem_Write+0x254>)
      hi2c->XferSize = hi2c->XferCount;
 800b992:	b29b      	uxth	r3, r3
 800b994:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800b996:	b2d9      	uxtb	r1, r3
 800b998:	6853      	ldr	r3, [r2, #4]
 800b99a:	4003      	ands	r3, r0
 800b99c:	433b      	orrs	r3, r7
 800b99e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b9a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b9a6:	6053      	str	r3, [r2, #4]
 800b9a8:	4d5c      	ldr	r5, [pc, #368]	; (800bb1c <HAL_I2C_Mem_Write+0x254>)
 800b9aa:	f8df a178 	ldr.w	sl, [pc, #376]	; 800bb24 <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b9ae:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800b9b2:	e004      	b.n	800b9be <HAL_I2C_Mem_Write+0xf6>
    } while (hi2c->XferCount > 0U);
 800b9b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f000 808d 	beq.w	800bad8 <HAL_I2C_Mem_Write+0x210>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9be:	4632      	mov	r2, r6
 800b9c0:	4641      	mov	r1, r8
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f7ff fdb2 	bl	800b52c <I2C_WaitOnTXISFlagUntilTimeout>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	f040 8083 	bne.w	800bad4 <HAL_I2C_Mem_Write+0x20c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b9ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9d0:	6822      	ldr	r2, [r4, #0]
 800b9d2:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b9d6:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b9d8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b9da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b9e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b9e4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b9ea:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800b9ec:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b9ee:	2900      	cmp	r1, #0
 800b9f0:	d0e0      	beq.n	800b9b4 <HAL_I2C_Mem_Write+0xec>
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1de      	bne.n	800b9b4 <HAL_I2C_Mem_Write+0xec>
 800b9f6:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b9fa:	d151      	bne.n	800baa0 <HAL_I2C_Mem_Write+0x1d8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9fc:	6993      	ldr	r3, [r2, #24]
 800b9fe:	0619      	lsls	r1, r3, #24
 800ba00:	d5fc      	bpl.n	800b9fc <HAL_I2C_Mem_Write+0x134>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	2bff      	cmp	r3, #255	; 0xff
 800ba08:	d957      	bls.n	800baba <HAL_I2C_Mem_Write+0x1f2>
  MODIFY_REG(hi2c->Instance->CR2,
 800ba0a:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba0c:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800ba10:	402b      	ands	r3, r5
 800ba12:	433b      	orrs	r3, r7
 800ba14:	ea43 030a 	orr.w	r3, r3, sl
 800ba18:	6053      	str	r3, [r2, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800ba1a:	e7cb      	b.n	800b9b4 <HAL_I2C_Mem_Write+0xec>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ba1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba20:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800ba22:	2001      	movs	r0, #1
}
 800ba24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800ba28:	2002      	movs	r0, #2
}
 800ba2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba30:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba32:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800ba36:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba38:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800ba3a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800ba3e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba42:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 800ba46:	2001      	movs	r0, #1
}
 800ba48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba4c:	6993      	ldr	r3, [r2, #24]
 800ba4e:	0618      	lsls	r0, r3, #24
 800ba50:	d499      	bmi.n	800b986 <HAL_I2C_Mem_Write+0xbe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba52:	f7ff f8e3 	bl	800ac1c <HAL_GetTick>
 800ba56:	1b80      	subs	r0, r0, r6
 800ba58:	4580      	cmp	r8, r0
 800ba5a:	d352      	bcc.n	800bb02 <HAL_I2C_Mem_Write+0x23a>
 800ba5c:	f1b8 0f00 	cmp.w	r8, #0
 800ba60:	d04f      	beq.n	800bb02 <HAL_I2C_Mem_Write+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba62:	6822      	ldr	r2, [r4, #0]
 800ba64:	e789      	b.n	800b97a <HAL_I2C_Mem_Write+0xb2>
  MODIFY_REG(hi2c->Instance->CR2,
 800ba66:	6853      	ldr	r3, [r2, #4]
 800ba68:	492c      	ldr	r1, [pc, #176]	; (800bb1c <HAL_I2C_Mem_Write+0x254>)
 800ba6a:	400b      	ands	r3, r1
 800ba6c:	433b      	orrs	r3, r7
 800ba6e:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 800ba72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba76:	21ff      	movs	r1, #255	; 0xff
 800ba78:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800ba7a:	6053      	str	r3, [r2, #4]
}
 800ba7c:	e794      	b.n	800b9a8 <HAL_I2C_Mem_Write+0xe0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800ba84:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba86:	4641      	mov	r1, r8
 800ba88:	4632      	mov	r2, r6
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f7ff fd4e 	bl	800b52c <I2C_WaitOnTXISFlagUntilTimeout>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	f43f af6e 	beq.w	800b972 <HAL_I2C_Mem_Write+0xaa>
      __HAL_UNLOCK(hi2c);
 800ba96:	2300      	movs	r3, #0
 800ba98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800ba9c:	2001      	movs	r0, #1
 800ba9e:	e7c1      	b.n	800ba24 <HAL_I2C_Mem_Write+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800baa0:	6993      	ldr	r3, [r2, #24]
 800baa2:	061b      	lsls	r3, r3, #24
 800baa4:	d4ad      	bmi.n	800ba02 <HAL_I2C_Mem_Write+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baa6:	f7ff f8b9 	bl	800ac1c <HAL_GetTick>
 800baaa:	1b80      	subs	r0, r0, r6
 800baac:	4580      	cmp	r8, r0
 800baae:	d3be      	bcc.n	800ba2e <HAL_I2C_Mem_Write+0x166>
 800bab0:	f1b8 0f00 	cmp.w	r8, #0
 800bab4:	d0bb      	beq.n	800ba2e <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bab6:	6822      	ldr	r2, [r4, #0]
 800bab8:	e79d      	b.n	800b9f6 <HAL_I2C_Mem_Write+0x12e>
          hi2c->XferSize = hi2c->XferCount;
 800baba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800babc:	b29b      	uxth	r3, r3
 800babe:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800bac0:	b2d9      	uxtb	r1, r3
 800bac2:	6853      	ldr	r3, [r2, #4]
 800bac4:	402b      	ands	r3, r5
 800bac6:	433b      	orrs	r3, r7
 800bac8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bacc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bad0:	6053      	str	r3, [r2, #4]
}
 800bad2:	e76f      	b.n	800b9b4 <HAL_I2C_Mem_Write+0xec>
        return HAL_ERROR;
 800bad4:	2001      	movs	r0, #1
 800bad6:	e7a5      	b.n	800ba24 <HAL_I2C_Mem_Write+0x15c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bad8:	4632      	mov	r2, r6
 800bada:	4641      	mov	r1, r8
 800badc:	4620      	mov	r0, r4
 800bade:	f7ff fd83 	bl	800b5e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d1f6      	bne.n	800bad4 <HAL_I2C_Mem_Write+0x20c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bae6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800bae8:	4d0d      	ldr	r5, [pc, #52]	; (800bb20 <HAL_I2C_Mem_Write+0x258>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800baea:	2120      	movs	r1, #32
 800baec:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800baee:	685a      	ldr	r2, [r3, #4]
 800baf0:	402a      	ands	r2, r5
 800baf2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800baf4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800baf8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bafc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800bb00:	e790      	b.n	800ba24 <HAL_I2C_Mem_Write+0x15c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb02:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb04:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb06:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb08:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb0a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb0c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb10:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    return HAL_ERROR;
 800bb14:	e7bf      	b.n	800ba96 <HAL_I2C_Mem_Write+0x1ce>
 800bb16:	bf00      	nop
 800bb18:	fc009800 	.word	0xfc009800
 800bb1c:	fc009c00 	.word	0xfc009c00
 800bb20:	fe00e800 	.word	0xfe00e800
 800bb24:	01ff0000 	.word	0x01ff0000

0800bb28 <HAL_I2C_Mem_Read>:
{
 800bb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb2c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb2e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800bb32:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 800bb36:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb38:	2b20      	cmp	r3, #32
 800bb3a:	f040 80a8 	bne.w	800bc8e <HAL_I2C_Mem_Read+0x166>
    if ((pData == NULL) || (Size == 0U))
 800bb3e:	9b08      	ldr	r3, [sp, #32]
 800bb40:	4604      	mov	r4, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	f000 809d 	beq.w	800bc82 <HAL_I2C_Mem_Read+0x15a>
 800bb48:	f1ba 0f00 	cmp.w	sl, #0
 800bb4c:	f000 8099 	beq.w	800bc82 <HAL_I2C_Mem_Read+0x15a>
    __HAL_LOCK(hi2c);
 800bb50:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	f000 809a 	beq.w	800bc8e <HAL_I2C_Mem_Read+0x166>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800bb60:	460f      	mov	r7, r1
 800bb62:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800bb64:	f7ff f85a 	bl	800ac1c <HAL_GetTick>
 800bb68:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 800bb6a:	e004      	b.n	800bb76 <HAL_I2C_Mem_Read+0x4e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb6c:	f7ff f856 	bl	800ac1c <HAL_GetTick>
 800bb70:	1b80      	subs	r0, r0, r6
 800bb72:	2819      	cmp	r0, #25
 800bb74:	d876      	bhi.n	800bc64 <HAL_I2C_Mem_Read+0x13c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	6998      	ldr	r0, [r3, #24]
 800bb7a:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800bb7e:	d1f5      	bne.n	800bb6c <HAL_I2C_Mem_Read+0x44>
    hi2c->pBuffPtr  = pData;
 800bb80:	9a08      	ldr	r2, [sp, #32]
 800bb82:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bb84:	2222      	movs	r2, #34	; 0x22
 800bb86:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bb8a:	2240      	movs	r2, #64	; 0x40
 800bb8c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb90:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800bb92:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800bb96:	685a      	ldr	r2, [r3, #4]
 800bb98:	4978      	ldr	r1, [pc, #480]	; (800bd7c <HAL_I2C_Mem_Read+0x254>)
    hi2c->XferISR   = NULL;
 800bb9a:	6360      	str	r0, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 800bb9c:	400a      	ands	r2, r1
 800bb9e:	fa5f f188 	uxtb.w	r1, r8
 800bba2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bba6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bbaa:	433a      	orrs	r2, r7
 800bbac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800bbb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bbb4:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	4632      	mov	r2, r6
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f7ff fcb6 	bl	800b52c <I2C_WaitOnTXISFlagUntilTimeout>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	f040 80a7 	bne.w	800bd14 <HAL_I2C_Mem_Read+0x1ec>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bbc6:	f1b8 0f01 	cmp.w	r8, #1
 800bbca:	f040 8097 	bne.w	800bcfc <HAL_I2C_Mem_Read+0x1d4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bbce:	6822      	ldr	r2, [r4, #0]
 800bbd0:	fa5f f389 	uxtb.w	r3, r9
 800bbd4:	6293      	str	r3, [r2, #40]	; 0x28
 800bbd6:	1c68      	adds	r0, r5, #1
 800bbd8:	d15c      	bne.n	800bc94 <HAL_I2C_Mem_Read+0x16c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bbda:	6993      	ldr	r3, [r2, #24]
 800bbdc:	0659      	lsls	r1, r3, #25
 800bbde:	d5fc      	bpl.n	800bbda <HAL_I2C_Mem_Read+0xb2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbe0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	2bff      	cmp	r3, #255	; 0xff
 800bbe6:	d87f      	bhi.n	800bce8 <HAL_I2C_Mem_Read+0x1c0>
      hi2c->XferSize = hi2c->XferCount;
 800bbe8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800bbea:	4864      	ldr	r0, [pc, #400]	; (800bd7c <HAL_I2C_Mem_Read+0x254>)
      hi2c->XferSize = hi2c->XferCount;
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800bbf0:	b2d9      	uxtb	r1, r3
 800bbf2:	6853      	ldr	r3, [r2, #4]
 800bbf4:	4003      	ands	r3, r0
 800bbf6:	433b      	orrs	r3, r7
 800bbf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bbfc:	f043 4302 	orr.w	r3, r3, #2181038080	; 0x82000000
 800bc00:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 800bc04:	6053      	str	r3, [r2, #4]
 800bc06:	1c68      	adds	r0, r5, #1
 800bc08:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800bd88 <HAL_I2C_Mem_Read+0x260>
 800bc0c:	f8df a17c 	ldr.w	sl, [pc, #380]	; 800bd8c <HAL_I2C_Mem_Read+0x264>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc10:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800bc14:	d11c      	bne.n	800bc50 <HAL_I2C_Mem_Read+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc16:	6993      	ldr	r3, [r2, #24]
 800bc18:	0759      	lsls	r1, r3, #29
 800bc1a:	d5fc      	bpl.n	800bc16 <HAL_I2C_Mem_Read+0xee>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bc1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bc20:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800bc22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800bc24:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800bc26:	3b01      	subs	r3, #1
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800bc2c:	3201      	adds	r2, #1
      hi2c->XferSize--;
 800bc2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800bc30:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800bc34:	3b01      	subs	r3, #1
 800bc36:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc38:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800bc3a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc3c:	b10a      	cbz	r2, 800bc42 <HAL_I2C_Mem_Read+0x11a>
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d03e      	beq.n	800bcc0 <HAL_I2C_Mem_Read+0x198>
    } while (hi2c->XferCount > 0U);
 800bc42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d077      	beq.n	800bd3a <HAL_I2C_Mem_Read+0x212>
 800bc4a:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc4c:	6822      	ldr	r2, [r4, #0]
 800bc4e:	d0e2      	beq.n	800bc16 <HAL_I2C_Mem_Read+0xee>
 800bc50:	6993      	ldr	r3, [r2, #24]
 800bc52:	075b      	lsls	r3, r3, #29
 800bc54:	d4e2      	bmi.n	800bc1c <HAL_I2C_Mem_Read+0xf4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc56:	f7fe ffe1 	bl	800ac1c <HAL_GetTick>
 800bc5a:	1b80      	subs	r0, r0, r6
 800bc5c:	4285      	cmp	r5, r0
 800bc5e:	d301      	bcc.n	800bc64 <HAL_I2C_Mem_Read+0x13c>
 800bc60:	2d00      	cmp	r5, #0
 800bc62:	d1f2      	bne.n	800bc4a <HAL_I2C_Mem_Read+0x122>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc64:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc66:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc68:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800bc6c:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc6e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800bc70:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800bc74:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc78:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 800bc7c:	2001      	movs	r0, #1
}
 800bc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bc82:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc86:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800bc88:	2001      	movs	r0, #1
}
 800bc8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800bc8e:	2002      	movs	r0, #2
}
 800bc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc94:	6993      	ldr	r3, [r2, #24]
 800bc96:	065b      	lsls	r3, r3, #25
 800bc98:	d4a2      	bmi.n	800bbe0 <HAL_I2C_Mem_Read+0xb8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc9a:	f7fe ffbf 	bl	800ac1c <HAL_GetTick>
 800bc9e:	1b80      	subs	r0, r0, r6
 800bca0:	4285      	cmp	r5, r0
 800bca2:	d35e      	bcc.n	800bd62 <HAL_I2C_Mem_Read+0x23a>
 800bca4:	2d00      	cmp	r5, #0
 800bca6:	d05c      	beq.n	800bd62 <HAL_I2C_Mem_Read+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bca8:	6822      	ldr	r2, [r4, #0]
 800bcaa:	e794      	b.n	800bbd6 <HAL_I2C_Mem_Read+0xae>
 800bcac:	6993      	ldr	r3, [r2, #24]
 800bcae:	061b      	lsls	r3, r3, #24
 800bcb0:	d40c      	bmi.n	800bccc <HAL_I2C_Mem_Read+0x1a4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcb2:	f7fe ffb3 	bl	800ac1c <HAL_GetTick>
 800bcb6:	1b80      	subs	r0, r0, r6
 800bcb8:	4285      	cmp	r5, r0
 800bcba:	d3d3      	bcc.n	800bc64 <HAL_I2C_Mem_Read+0x13c>
 800bcbc:	2d00      	cmp	r5, #0
 800bcbe:	d0d1      	beq.n	800bc64 <HAL_I2C_Mem_Read+0x13c>
 800bcc0:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bcc2:	6822      	ldr	r2, [r4, #0]
 800bcc4:	d1f2      	bne.n	800bcac <HAL_I2C_Mem_Read+0x184>
 800bcc6:	6993      	ldr	r3, [r2, #24]
 800bcc8:	0619      	lsls	r1, r3, #24
 800bcca:	d5fc      	bpl.n	800bcc6 <HAL_I2C_Mem_Read+0x19e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bccc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	2bff      	cmp	r3, #255	; 0xff
 800bcd2:	d924      	bls.n	800bd1e <HAL_I2C_Mem_Read+0x1f6>
  MODIFY_REG(hi2c->Instance->CR2,
 800bcd4:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcd6:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800bcda:	ea03 0308 	and.w	r3, r3, r8
 800bcde:	433b      	orrs	r3, r7
 800bce0:	ea43 030a 	orr.w	r3, r3, sl
 800bce4:	6053      	str	r3, [r2, #4]
}
 800bce6:	e7ac      	b.n	800bc42 <HAL_I2C_Mem_Read+0x11a>
  MODIFY_REG(hi2c->Instance->CR2,
 800bce8:	6853      	ldr	r3, [r2, #4]
 800bcea:	4924      	ldr	r1, [pc, #144]	; (800bd7c <HAL_I2C_Mem_Read+0x254>)
 800bcec:	400b      	ands	r3, r1
 800bcee:	4924      	ldr	r1, [pc, #144]	; (800bd80 <HAL_I2C_Mem_Read+0x258>)
 800bcf0:	433b      	orrs	r3, r7
 800bcf2:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcf4:	23ff      	movs	r3, #255	; 0xff
 800bcf6:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800bcf8:	6051      	str	r1, [r2, #4]
}
 800bcfa:	e784      	b.n	800bc06 <HAL_I2C_Mem_Read+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800bd02:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd04:	4629      	mov	r1, r5
 800bd06:	4632      	mov	r2, r6
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f7ff fc0f 	bl	800b52c <I2C_WaitOnTXISFlagUntilTimeout>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	f43f af5d 	beq.w	800bbce <HAL_I2C_Mem_Read+0xa6>
      __HAL_UNLOCK(hi2c);
 800bd14:	2300      	movs	r3, #0
 800bd16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800bd1a:	2001      	movs	r0, #1
 800bd1c:	e7b5      	b.n	800bc8a <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = hi2c->XferCount;
 800bd1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800bd24:	b2d9      	uxtb	r1, r3
 800bd26:	6853      	ldr	r3, [r2, #4]
 800bd28:	ea03 0308 	and.w	r3, r3, r8
 800bd2c:	433b      	orrs	r3, r7
 800bd2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bd32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bd36:	6053      	str	r3, [r2, #4]
}
 800bd38:	e783      	b.n	800bc42 <HAL_I2C_Mem_Read+0x11a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd3a:	4632      	mov	r2, r6
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f7ff fc52 	bl	800b5e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bd44:	b9b8      	cbnz	r0, 800bd76 <HAL_I2C_Mem_Read+0x24e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd46:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800bd48:	4d0e      	ldr	r5, [pc, #56]	; (800bd84 <HAL_I2C_Mem_Read+0x25c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd4a:	2120      	movs	r1, #32
 800bd4c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800bd4e:	685a      	ldr	r2, [r3, #4]
 800bd50:	402a      	ands	r2, r5
 800bd52:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800bd54:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800bd58:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bd5c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800bd60:	e793      	b.n	800bc8a <HAL_I2C_Mem_Read+0x162>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd62:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bd64:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd66:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd68:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd6a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bd6c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd70:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    return HAL_ERROR;
 800bd74:	e7ce      	b.n	800bd14 <HAL_I2C_Mem_Read+0x1ec>
      return HAL_ERROR;
 800bd76:	2001      	movs	r0, #1
 800bd78:	e787      	b.n	800bc8a <HAL_I2C_Mem_Read+0x162>
 800bd7a:	bf00      	nop
 800bd7c:	fc009800 	.word	0xfc009800
 800bd80:	81ff2400 	.word	0x81ff2400
 800bd84:	fe00e800 	.word	0xfe00e800
 800bd88:	fc009c00 	.word	0xfc009c00
 800bd8c:	01ff0000 	.word	0x01ff0000

0800bd90 <HAL_I2C_GetState>:
  return hi2c->State;
 800bd90:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop

0800bd98 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800bd98:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800bd9a:	4770      	bx	lr

0800bd9c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd9c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800bda0:	2a20      	cmp	r2, #32
 800bda2:	d123      	bne.n	800bdec <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800bda4:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bda8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800bdac:	2a01      	cmp	r2, #1
 800bdae:	4603      	mov	r3, r0
 800bdb0:	d01c      	beq.n	800bdec <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bdb2:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800bdb4:	2024      	movs	r0, #36	; 0x24
{
 800bdb6:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 800bdb8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800bdbc:	6810      	ldr	r0, [r2, #0]
 800bdbe:	f020 0001 	bic.w	r0, r0, #1
 800bdc2:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bdc4:	6810      	ldr	r0, [r2, #0]
 800bdc6:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 800bdca:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bdcc:	6810      	ldr	r0, [r2, #0]
 800bdce:	4301      	orrs	r1, r0
 800bdd0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bdd2:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdd4:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 800bdd8:	f041 0101 	orr.w	r1, r1, #1
 800bddc:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800bdde:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800bde2:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 800bde6:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 800bde8:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800bdec:	2002      	movs	r0, #2
}
 800bdee:	4770      	bx	lr

0800bdf0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bdf0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800bdf4:	2a20      	cmp	r2, #32
 800bdf6:	d122      	bne.n	800be3e <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 800bdf8:	b500      	push	{lr}
 800bdfa:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bdfe:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800be02:	2a01      	cmp	r2, #1
 800be04:	4603      	mov	r3, r0
 800be06:	d01c      	beq.n	800be42 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800be08:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800be0a:	2024      	movs	r0, #36	; 0x24
 800be0c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800be10:	6810      	ldr	r0, [r2, #0]
 800be12:	f020 0001 	bic.w	r0, r0, #1
 800be16:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800be18:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800be1a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800be1e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800be22:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800be24:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be26:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 800be2a:	f041 0101 	orr.w	r1, r1, #1
 800be2e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800be30:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800be34:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 800be38:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 800be3a:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800be3e:	2002      	movs	r0, #2
}
 800be40:	4770      	bx	lr
    return HAL_BUSY;
 800be42:	2002      	movs	r0, #2
}
 800be44:	f85d fb04 	ldr.w	pc, [sp], #4

0800be48 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be48:	4a02      	ldr	r2, [pc, #8]	; (800be54 <HAL_PWR_EnableBkUpAccess+0xc>)
 800be4a:	6813      	ldr	r3, [r2, #0]
 800be4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be50:	6013      	str	r3, [r2, #0]
}
 800be52:	4770      	bx	lr
 800be54:	58000400 	.word	0x58000400

0800be58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 800be58:	4b02      	ldr	r3, [pc, #8]	; (800be64 <HAL_PWREx_GetVoltageRange+0xc>)
 800be5a:	6818      	ldr	r0, [r3, #0]
}
 800be5c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	58000400 	.word	0x58000400

0800be68 <RCC_SetFlashLatencyFromMSIRange>:

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800be68:	28b0      	cmp	r0, #176	; 0xb0
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800be6a:	4b31      	ldr	r3, [pc, #196]	; (800bf30 <RCC_SetFlashLatencyFromMSIRange+0xc8>)
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800be6c:	4a31      	ldr	r2, [pc, #196]	; (800bf34 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800be6e:	bf98      	it	ls
 800be70:	0900      	lsrls	r0, r0, #4
{
 800be72:	b570      	push	{r4, r5, r6, lr}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800be74:	bf8c      	ite	hi
 800be76:	6adc      	ldrhi	r4, [r3, #44]	; 0x2c
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800be78:	f853 4020 	ldrls.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800be7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 800be80:	b084      	sub	sp, #16
 800be82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800be86:	f003 030f 	and.w	r3, r3, #15
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800be8a:	ae04      	add	r6, sp, #16
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800be8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be90:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800be94:	f7ff ffe0 	bl	800be58 <HAL_PWREx_GetVoltageRange>
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800be98:	4b27      	ldr	r3, [pc, #156]	; (800bf38 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800be9a:	4605      	mov	r5, r0
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800be9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800be9e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800bea2:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bea6:	d029      	beq.n	800befc <RCC_SetFlashLatencyFromMSIRange+0x94>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800bea8:	4b24      	ldr	r3, [pc, #144]	; (800bf3c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800beaa:	429c      	cmp	r4, r3
 800beac:	d33a      	bcc.n	800bf24 <RCC_SetFlashLatencyFromMSIRange+0xbc>
 800beae:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 800beb2:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 800beb6:	429c      	cmp	r4, r3
 800beb8:	d936      	bls.n	800bf28 <RCC_SetFlashLatencyFromMSIRange+0xc0>
 800beba:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 800bebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec2:	429c      	cmp	r4, r3
 800bec4:	d932      	bls.n	800bf2c <RCC_SetFlashLatencyFromMSIRange+0xc4>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800bec6:	2600      	movs	r6, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800bec8:	4c1d      	ldr	r4, [pc, #116]	; (800bf40 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 800beca:	6823      	ldr	r3, [r4, #0]
 800becc:	f023 0307 	bic.w	r3, r3, #7
 800bed0:	4333      	orrs	r3, r6
 800bed2:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bed4:	f7fe fea2 	bl	800ac1c <HAL_GetTick>
 800bed8:	4605      	mov	r5, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800beda:	e004      	b.n	800bee6 <RCC_SetFlashLatencyFromMSIRange+0x7e>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bedc:	f7fe fe9e 	bl	800ac1c <HAL_GetTick>
 800bee0:	1b40      	subs	r0, r0, r5
 800bee2:	2802      	cmp	r0, #2
 800bee4:	d807      	bhi.n	800bef6 <RCC_SetFlashLatencyFromMSIRange+0x8e>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800bee6:	6823      	ldr	r3, [r4, #0]
 800bee8:	f003 0307 	and.w	r3, r3, #7
 800beec:	429e      	cmp	r6, r3
 800beee:	d1f5      	bne.n	800bedc <RCC_SetFlashLatencyFromMSIRange+0x74>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800bef0:	2000      	movs	r0, #0
}
 800bef2:	b004      	add	sp, #16
 800bef4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800bef6:	2003      	movs	r0, #3
}
 800bef8:	b004      	add	sp, #16
 800befa:	bd70      	pop	{r4, r5, r6, pc}
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800befc:	4b11      	ldr	r3, [pc, #68]	; (800bf44 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 800befe:	429c      	cmp	r4, r3
 800bf00:	d910      	bls.n	800bf24 <RCC_SetFlashLatencyFromMSIRange+0xbc>
 800bf02:	4b11      	ldr	r3, [pc, #68]	; (800bf48 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 800bf04:	429c      	cmp	r4, r3
 800bf06:	d90f      	bls.n	800bf28 <RCC_SetFlashLatencyFromMSIRange+0xc0>
 800bf08:	4b10      	ldr	r3, [pc, #64]	; (800bf4c <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 800bf0a:	429c      	cmp	r4, r3
 800bf0c:	d90e      	bls.n	800bf2c <RCC_SetFlashLatencyFromMSIRange+0xc4>
 800bf0e:	4b10      	ldr	r3, [pc, #64]	; (800bf50 <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 800bf10:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800bf12:	bf38      	it	cc
 800bf14:	2303      	movcc	r3, #3
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800bf16:	d2d6      	bcs.n	800bec6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_RANGE[index];
 800bf18:	aa04      	add	r2, sp, #16
 800bf1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf1e:	f853 6c10 	ldr.w	r6, [r3, #-16]
        break;
 800bf22:	e7d1      	b.n	800bec8 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bf24:	2300      	movs	r3, #0
 800bf26:	e7f7      	b.n	800bf18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e7f5      	b.n	800bf18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	e7f3      	b.n	800bf18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 800bf30:	08023e98 	.word	0x08023e98
 800bf34:	08023ed8 	.word	0x08023ed8
 800bf38:	08023f98 	.word	0x08023f98
 800bf3c:	006acfc0 	.word	0x006acfc0
 800bf40:	58004000 	.word	0x58004000
 800bf44:	0121eabf 	.word	0x0121eabf
 800bf48:	0234933f 	.word	0x0234933f
 800bf4c:	03473bbf 	.word	0x03473bbf
 800bf50:	03dfd240 	.word	0x03dfd240

0800bf54 <HAL_RCC_GetSysClockFreq.part.0>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800bf54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
uint32_t HAL_RCC_GetSysClockFreq(void)
 800bf58:	b410      	push	{r4}
 800bf5a:	68d3      	ldr	r3, [r2, #12]
 800bf5c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d01d      	beq.n	800bfa0 <HAL_RCC_GetSysClockFreq.part.0+0x4c>
 800bf64:	2b03      	cmp	r3, #3
 800bf66:	d11d      	bne.n	800bfa4 <HAL_RCC_GetSysClockFreq.part.0+0x50>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bf68:	6812      	ldr	r2, [r2, #0]
          pllinputfreq = HSE_VALUE / 2U;
 800bf6a:	4b14      	ldr	r3, [pc, #80]	; (800bfbc <HAL_RCC_GetSysClockFreq.part.0+0x68>)
 800bf6c:	4c14      	ldr	r4, [pc, #80]	; (800bfc0 <HAL_RCC_GetSysClockFreq.part.0+0x6c>)
 800bf6e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800bf72:	bf08      	it	eq
 800bf74:	461c      	moveq	r4, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800bf76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bf7a:	68cb      	ldr	r3, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800bf7c:	68ca      	ldr	r2, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800bf7e:	68c8      	ldr	r0, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800bf80:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800bf84:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800bf88:	0f40      	lsrs	r0, r0, #29
 800bf8a:	fb04 f303 	mul.w	r3, r4, r3
 800bf8e:	3201      	adds	r2, #1
 800bf90:	3001      	adds	r0, #1
 800bf92:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800bf96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf9a:	fbb3 f0f0 	udiv	r0, r3, r0
 800bf9e:	4770      	bx	lr
    switch (pllsource)
 800bfa0:	4c07      	ldr	r4, [pc, #28]	; (800bfc0 <HAL_RCC_GetSysClockFreq.part.0+0x6c>)
 800bfa2:	e7e8      	b.n	800bf76 <HAL_RCC_GetSysClockFreq.part.0+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800bfa4:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bfa6:	4a07      	ldr	r2, [pc, #28]	; (800bfc4 <HAL_RCC_GetSysClockFreq.part.0+0x70>)
 800bfa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfac:	2bb0      	cmp	r3, #176	; 0xb0
 800bfae:	bf28      	it	cs
 800bfb0:	23b0      	movcs	r3, #176	; 0xb0
 800bfb2:	091b      	lsrs	r3, r3, #4
 800bfb4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
        break;
 800bfb8:	e7dd      	b.n	800bf76 <HAL_RCC_GetSysClockFreq.part.0+0x22>
 800bfba:	bf00      	nop
 800bfbc:	01e84800 	.word	0x01e84800
 800bfc0:	00f42400 	.word	0x00f42400
 800bfc4:	08023e98 	.word	0x08023e98

0800bfc8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	f000 82e9 	beq.w	800c5a0 <HAL_RCC_OscConfig+0x5d8>
{
 800bfce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bfd0:	6803      	ldr	r3, [r0, #0]
 800bfd2:	069a      	lsls	r2, r3, #26
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	d56d      	bpl.n	800c0b4 <HAL_RCC_OscConfig+0xec>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bfd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bfdc:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800bfde:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800bfe0:	f013 030c 	ands.w	r3, r3, #12
 800bfe4:	d01d      	beq.n	800c022 <HAL_RCC_OscConfig+0x5a>
 800bfe6:	2b0c      	cmp	r3, #12
 800bfe8:	d017      	beq.n	800c01a <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bfea:	69e3      	ldr	r3, [r4, #28]
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800bfec:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f000 82a7 	beq.w	800c544 <HAL_RCC_OscConfig+0x57c>
 800bff6:	682b      	ldr	r3, [r5, #0]
 800bff8:	f043 0301 	orr.w	r3, r3, #1
 800bffc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bffe:	f7fe fe0d 	bl	800ac1c <HAL_GetTick>
 800c002:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	079f      	lsls	r7, r3, #30
 800c008:	f100 82bc 	bmi.w	800c584 <HAL_RCC_OscConfig+0x5bc>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c00c:	f7fe fe06 	bl	800ac1c <HAL_GetTick>
 800c010:	1b80      	subs	r0, r0, r6
 800c012:	2802      	cmp	r0, #2
 800c014:	d9f6      	bls.n	800c004 <HAL_RCC_OscConfig+0x3c>
            return HAL_TIMEOUT;
 800c016:	2003      	movs	r0, #3
}
 800c018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c01a:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c01e:	2a01      	cmp	r2, #1
 800c020:	d1e3      	bne.n	800bfea <HAL_RCC_OscConfig+0x22>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800c022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	079b      	lsls	r3, r3, #30
 800c02a:	f100 8154 	bmi.w	800c2d6 <HAL_RCC_OscConfig+0x30e>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c02e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c032:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c034:	682b      	ldr	r3, [r5, #0]
 800c036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c03a:	2bb0      	cmp	r3, #176	; 0xb0
 800c03c:	bf28      	it	cs
 800c03e:	23b0      	movcs	r3, #176	; 0xb0
 800c040:	4298      	cmp	r0, r3
 800c042:	f240 825b 	bls.w	800c4fc <HAL_RCC_OscConfig+0x534>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c046:	f7ff ff0f 	bl	800be68 <RCC_SetFlashLatencyFromMSIRange>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	f040 8147 	bne.w	800c2de <HAL_RCC_OscConfig+0x316>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800c050:	682b      	ldr	r3, [r5, #0]
 800c052:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c058:	4313      	orrs	r3, r2
 800c05a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c05c:	686b      	ldr	r3, [r5, #4]
 800c05e:	6a22      	ldr	r2, [r4, #32]
 800c060:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c064:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c068:	606b      	str	r3, [r5, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c06a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c06e:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c070:	f013 030c 	ands.w	r3, r3, #12
 800c074:	f040 82a9 	bne.w	800c5ca <HAL_RCC_OscConfig+0x602>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c078:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c07a:	4aac      	ldr	r2, [pc, #688]	; (800c32c <HAL_RCC_OscConfig+0x364>)
 800c07c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c080:	2bb0      	cmp	r3, #176	; 0xb0
 800c082:	bf28      	it	cs
 800c084:	23b0      	movcs	r3, #176	; 0xb0
 800c086:	091b      	lsrs	r3, r3, #4
 800c088:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c08c:	49a8      	ldr	r1, [pc, #672]	; (800c330 <HAL_RCC_OscConfig+0x368>)
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c08e:	4aa9      	ldr	r2, [pc, #676]	; (800c334 <HAL_RCC_OscConfig+0x36c>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c094:	689b      	ldr	r3, [r3, #8]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c096:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c09a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c09e:	49a6      	ldr	r1, [pc, #664]	; (800c338 <HAL_RCC_OscConfig+0x370>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c0a0:	fbb0 f3f3 	udiv	r3, r0, r3
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c0a4:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c0a6:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c0a8:	f7fe fd72 	bl	800ab90 <HAL_InitTick>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	f040 8116 	bne.w	800c2de <HAL_RCC_OscConfig+0x316>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	07d9      	lsls	r1, r3, #31
 800c0b6:	d526      	bpl.n	800c106 <HAL_RCC_OscConfig+0x13e>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c0b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0bc:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c0be:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c0c0:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c0c4:	2a08      	cmp	r2, #8
 800c0c6:	f000 818c 	beq.w	800c3e2 <HAL_RCC_OscConfig+0x41a>
 800c0ca:	2a0c      	cmp	r2, #12
 800c0cc:	f000 8184 	beq.w	800c3d8 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c0d0:	6863      	ldr	r3, [r4, #4]
 800c0d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0d6:	f000 81fc 	beq.w	800c4d2 <HAL_RCC_OscConfig+0x50a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800c0da:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800c0de:	682a      	ldr	r2, [r5, #0]
 800c0e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c0e4:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f040 81f9 	bne.w	800c4de <HAL_RCC_OscConfig+0x516>
        tickstart = HAL_GetTick();
 800c0ec:	f7fe fd96 	bl	800ac1c <HAL_GetTick>
 800c0f0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c0f2:	682b      	ldr	r3, [r5, #0]
 800c0f4:	039f      	lsls	r7, r3, #14
 800c0f6:	d505      	bpl.n	800c104 <HAL_RCC_OscConfig+0x13c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c0f8:	f7fe fd90 	bl	800ac1c <HAL_GetTick>
 800c0fc:	1b80      	subs	r0, r0, r6
 800c0fe:	2864      	cmp	r0, #100	; 0x64
 800c100:	d9f7      	bls.n	800c0f2 <HAL_RCC_OscConfig+0x12a>
 800c102:	e788      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	079e      	lsls	r6, r3, #30
 800c108:	d536      	bpl.n	800c178 <HAL_RCC_OscConfig+0x1b0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c10a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c10e:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c110:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c112:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c116:	2a04      	cmp	r2, #4
 800c118:	d01c      	beq.n	800c154 <HAL_RCC_OscConfig+0x18c>
 800c11a:	2a0c      	cmp	r2, #12
 800c11c:	d016      	beq.n	800c14c <HAL_RCC_OscConfig+0x184>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c11e:	68e3      	ldr	r3, [r4, #12]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800c120:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800c124:	2b00      	cmp	r3, #0
 800c126:	f000 8201 	beq.w	800c52c <HAL_RCC_OscConfig+0x564>
 800c12a:	682b      	ldr	r3, [r5, #0]
 800c12c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c130:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c132:	f7fe fd73 	bl	800ac1c <HAL_GetTick>
 800c136:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c138:	682b      	ldr	r3, [r5, #0]
 800c13a:	0558      	lsls	r0, r3, #21
 800c13c:	f100 8213 	bmi.w	800c566 <HAL_RCC_OscConfig+0x59e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c140:	f7fe fd6c 	bl	800ac1c <HAL_GetTick>
 800c144:	1b80      	subs	r0, r0, r6
 800c146:	2802      	cmp	r0, #2
 800c148:	d9f6      	bls.n	800c138 <HAL_RCC_OscConfig+0x170>
 800c14a:	e764      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c14c:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c150:	2902      	cmp	r1, #2
 800c152:	d1e4      	bne.n	800c11e <HAL_RCC_OscConfig+0x156>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c158:	6812      	ldr	r2, [r2, #0]
 800c15a:	0555      	lsls	r5, r2, #21
 800c15c:	d503      	bpl.n	800c166 <HAL_RCC_OscConfig+0x19e>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c15e:	68e2      	ldr	r2, [r4, #12]
 800c160:	2a00      	cmp	r2, #0
 800c162:	f000 80bc 	beq.w	800c2de <HAL_RCC_OscConfig+0x316>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800c166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c16a:	6920      	ldr	r0, [r4, #16]
 800c16c:	684a      	ldr	r2, [r1, #4]
 800c16e:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800c172:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800c176:	604a      	str	r2, [r1, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c178:	f013 0f18 	tst.w	r3, #24
 800c17c:	d023      	beq.n	800c1c6 <HAL_RCC_OscConfig+0x1fe>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c17e:	6962      	ldr	r2, [r4, #20]
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800c180:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800c184:	2a00      	cmp	r2, #0
 800c186:	f000 8181 	beq.w	800c48c <HAL_RCC_OscConfig+0x4c4>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c18a:	f013 0f10 	tst.w	r3, #16
 800c18e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c192:	f000 8131 	beq.w	800c3f8 <HAL_RCC_OscConfig+0x430>
 800c196:	079a      	lsls	r2, r3, #30
 800c198:	f100 8140 	bmi.w	800c41c <HAL_RCC_OscConfig+0x454>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c19c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c1a0:	f043 0301 	orr.w	r3, r3, #1
 800c1a4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 800c1a8:	f7fe fd38 	bl	800ac1c <HAL_GetTick>
 800c1ac:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800c1ae:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c1b2:	079b      	lsls	r3, r3, #30
 800c1b4:	f100 8132 	bmi.w	800c41c <HAL_RCC_OscConfig+0x454>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c1b8:	f7fe fd30 	bl	800ac1c <HAL_GetTick>
 800c1bc:	1b80      	subs	r0, r0, r6
 800c1be:	2802      	cmp	r0, #2
 800c1c0:	d9f5      	bls.n	800c1ae <HAL_RCC_OscConfig+0x1e6>
 800c1c2:	e728      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	075d      	lsls	r5, r3, #29
 800c1c8:	d530      	bpl.n	800c22c <HAL_RCC_OscConfig+0x264>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1ca:	4d5c      	ldr	r5, [pc, #368]	; (800c33c <HAL_RCC_OscConfig+0x374>)
 800c1cc:	682b      	ldr	r3, [r5, #0]
 800c1ce:	05d8      	lsls	r0, r3, #23
 800c1d0:	f140 8087 	bpl.w	800c2e2 <HAL_RCC_OscConfig+0x31a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1d4:	68a3      	ldr	r3, [r4, #8]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	f000 80e4 	beq.w	800c3a4 <HAL_RCC_OscConfig+0x3dc>
 800c1dc:	2b05      	cmp	r3, #5
 800c1de:	f000 81fb 	beq.w	800c5d8 <HAL_RCC_OscConfig+0x610>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c1e2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800c1e6:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800c1ea:	f022 0201 	bic.w	r2, r2, #1
 800c1ee:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c1f2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800c1f6:	f022 0204 	bic.w	r2, r2, #4
 800c1fa:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f040 80d8 	bne.w	800c3b4 <HAL_RCC_OscConfig+0x3ec>
      tickstart = HAL_GetTick();
 800c204:	f7fe fd0a 	bl	800ac1c <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c208:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800c20c:	079b      	lsls	r3, r3, #30
 800c20e:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c210:	f241 3788 	movw	r7, #5000	; 0x1388
 800c214:	d509      	bpl.n	800c22a <HAL_RCC_OscConfig+0x262>
 800c216:	f7fe fd01 	bl	800ac1c <HAL_GetTick>
 800c21a:	1b80      	subs	r0, r0, r6
 800c21c:	42b8      	cmp	r0, r7
 800c21e:	f63f aefa 	bhi.w	800c016 <HAL_RCC_OscConfig+0x4e>
 800c222:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800c226:	079b      	lsls	r3, r3, #30
 800c228:	d4f5      	bmi.n	800c216 <HAL_RCC_OscConfig+0x24e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	0658      	lsls	r0, r3, #25
 800c22e:	d428      	bmi.n	800c282 <HAL_RCC_OscConfig+0x2ba>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c230:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c232:	b323      	cbz	r3, 800c27e <HAL_RCC_OscConfig+0x2b6>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c234:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c238:	2b02      	cmp	r3, #2
 800c23a:	68aa      	ldr	r2, [r5, #8]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c23c:	68e9      	ldr	r1, [r5, #12]
 800c23e:	f002 020c 	and.w	r2, r2, #12
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c242:	d05e      	beq.n	800c302 <HAL_RCC_OscConfig+0x33a>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c244:	2a0c      	cmp	r2, #12
 800c246:	d04a      	beq.n	800c2de <HAL_RCC_OscConfig+0x316>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c24e:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800c250:	68eb      	ldr	r3, [r5, #12]
 800c252:	f023 0303 	bic.w	r3, r3, #3
 800c256:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800c258:	68eb      	ldr	r3, [r5, #12]
 800c25a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800c25e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c262:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800c264:	f7fe fcda 	bl	800ac1c <HAL_GetTick>
 800c268:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c26a:	e005      	b.n	800c278 <HAL_RCC_OscConfig+0x2b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c26c:	f7fe fcd6 	bl	800ac1c <HAL_GetTick>
 800c270:	1b00      	subs	r0, r0, r4
 800c272:	2802      	cmp	r0, #2
 800c274:	f63f aecf 	bhi.w	800c016 <HAL_RCC_OscConfig+0x4e>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c278:	682b      	ldr	r3, [r5, #0]
 800c27a:	019b      	lsls	r3, r3, #6
 800c27c:	d4f6      	bmi.n	800c26c <HAL_RCC_OscConfig+0x2a4>
  return HAL_OK;
 800c27e:	2000      	movs	r0, #0
}
 800c280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c284:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800c288:	b193      	cbz	r3, 800c2b0 <HAL_RCC_OscConfig+0x2e8>
 800c28a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800c28e:	f043 0301 	orr.w	r3, r3, #1
 800c292:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 800c296:	f7fe fcc1 	bl	800ac1c <HAL_GetTick>
 800c29a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800c29c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800c2a0:	0799      	lsls	r1, r3, #30
 800c2a2:	d4c5      	bmi.n	800c230 <HAL_RCC_OscConfig+0x268>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c2a4:	f7fe fcba 	bl	800ac1c <HAL_GetTick>
 800c2a8:	1b80      	subs	r0, r0, r6
 800c2aa:	2802      	cmp	r0, #2
 800c2ac:	d9f6      	bls.n	800c29c <HAL_RCC_OscConfig+0x2d4>
 800c2ae:	e6b2      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c2b0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800c2b4:	f023 0301 	bic.w	r3, r3, #1
 800c2b8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 800c2bc:	f7fe fcae 	bl	800ac1c <HAL_GetTick>
 800c2c0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800c2c2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800c2c6:	079a      	lsls	r2, r3, #30
 800c2c8:	d5b2      	bpl.n	800c230 <HAL_RCC_OscConfig+0x268>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c2ca:	f7fe fca7 	bl	800ac1c <HAL_GetTick>
 800c2ce:	1b80      	subs	r0, r0, r6
 800c2d0:	2802      	cmp	r0, #2
 800c2d2:	d9f6      	bls.n	800c2c2 <HAL_RCC_OscConfig+0x2fa>
 800c2d4:	e69f      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c2d6:	69e3      	ldr	r3, [r4, #28]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f47f aea8 	bne.w	800c02e <HAL_RCC_OscConfig+0x66>
          return HAL_ERROR;
 800c2de:	2001      	movs	r0, #1
}
 800c2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_PWR_EnableBkUpAccess();
 800c2e2:	f7ff fdb1 	bl	800be48 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800c2e6:	f7fe fc99 	bl	800ac1c <HAL_GetTick>
 800c2ea:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c2ec:	e005      	b.n	800c2fa <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2ee:	f7fe fc95 	bl	800ac1c <HAL_GetTick>
 800c2f2:	1b80      	subs	r0, r0, r6
 800c2f4:	2802      	cmp	r0, #2
 800c2f6:	f63f ae8e 	bhi.w	800c016 <HAL_RCC_OscConfig+0x4e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c2fa:	682b      	ldr	r3, [r5, #0]
 800c2fc:	05d9      	lsls	r1, r3, #23
 800c2fe:	d5f6      	bpl.n	800c2ee <HAL_RCC_OscConfig+0x326>
 800c300:	e768      	b.n	800c1d4 <HAL_RCC_OscConfig+0x20c>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c302:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c304:	f001 0303 	and.w	r3, r1, #3
 800c308:	4283      	cmp	r3, r0
 800c30a:	f000 817b 	beq.w	800c604 <HAL_RCC_OscConfig+0x63c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c30e:	2a0c      	cmp	r2, #12
 800c310:	d0e5      	beq.n	800c2de <HAL_RCC_OscConfig+0x316>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c312:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800c316:	682b      	ldr	r3, [r5, #0]
 800c318:	015b      	lsls	r3, r3, #5
 800c31a:	d4e0      	bmi.n	800c2de <HAL_RCC_OscConfig+0x316>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c322:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800c324:	f7fe fc7a 	bl	800ac1c <HAL_GetTick>
 800c328:	4606      	mov	r6, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c32a:	e00f      	b.n	800c34c <HAL_RCC_OscConfig+0x384>
 800c32c:	08023e98 	.word	0x08023e98
 800c330:	08023ed8 	.word	0x08023ed8
 800c334:	200000dc 	.word	0x200000dc
 800c338:	200000e4 	.word	0x200000e4
 800c33c:	58000400 	.word	0x58000400
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c340:	f7fe fc6c 	bl	800ac1c <HAL_GetTick>
 800c344:	1b80      	subs	r0, r0, r6
 800c346:	2802      	cmp	r0, #2
 800c348:	f63f ae65 	bhi.w	800c016 <HAL_RCC_OscConfig+0x4e>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	019f      	lsls	r7, r3, #6
 800c350:	d4f6      	bmi.n	800c340 <HAL_RCC_OscConfig+0x378>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c352:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 800c356:	68e9      	ldr	r1, [r5, #12]
 800c358:	4313      	orrs	r3, r2
 800c35a:	4aa8      	ldr	r2, [pc, #672]	; (800c5fc <HAL_RCC_OscConfig+0x634>)
 800c35c:	400a      	ands	r2, r1
 800c35e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c360:	4313      	orrs	r3, r2
 800c362:	430b      	orrs	r3, r1
 800c364:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
 800c368:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c36a:	4303      	orrs	r3, r0
 800c36c:	430b      	orrs	r3, r1
 800c36e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c372:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c374:	682b      	ldr	r3, [r5, #0]
 800c376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c37a:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c37c:	68eb      	ldr	r3, [r5, #12]
 800c37e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c382:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 800c384:	f7fe fc4a 	bl	800ac1c <HAL_GetTick>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c388:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
            tickstart = HAL_GetTick();
 800c38c:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c38e:	e005      	b.n	800c39c <HAL_RCC_OscConfig+0x3d4>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c390:	f7fe fc44 	bl	800ac1c <HAL_GetTick>
 800c394:	1b00      	subs	r0, r0, r4
 800c396:	2802      	cmp	r0, #2
 800c398:	f63f ae3d 	bhi.w	800c016 <HAL_RCC_OscConfig+0x4e>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c39c:	6833      	ldr	r3, [r6, #0]
 800c39e:	0198      	lsls	r0, r3, #6
 800c3a0:	d5f6      	bpl.n	800c390 <HAL_RCC_OscConfig+0x3c8>
 800c3a2:	e76c      	b.n	800c27e <HAL_RCC_OscConfig+0x2b6>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c3a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c3a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800c3ac:	f043 0301 	orr.w	r3, r3, #1
 800c3b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800c3b4:	f7fe fc32 	bl	800ac1c <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c3b8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800c3bc:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3be:	f241 3788 	movw	r7, #5000	; 0x1388
 800c3c2:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800c3c6:	079a      	lsls	r2, r3, #30
 800c3c8:	f53f af2f 	bmi.w	800c22a <HAL_RCC_OscConfig+0x262>
 800c3cc:	f7fe fc26 	bl	800ac1c <HAL_GetTick>
 800c3d0:	1b40      	subs	r0, r0, r5
 800c3d2:	42b8      	cmp	r0, r7
 800c3d4:	d9f5      	bls.n	800c3c2 <HAL_RCC_OscConfig+0x3fa>
 800c3d6:	e61e      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c3d8:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c3dc:	2903      	cmp	r1, #3
 800c3de:	f47f ae77 	bne.w	800c0d0 <HAL_RCC_OscConfig+0x108>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c3e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c3e6:	6812      	ldr	r2, [r2, #0]
 800c3e8:	0392      	lsls	r2, r2, #14
 800c3ea:	f57f ae8c 	bpl.w	800c106 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3ee:	6862      	ldr	r2, [r4, #4]
 800c3f0:	2a00      	cmp	r2, #0
 800c3f2:	f47f ae88 	bne.w	800c106 <HAL_RCC_OscConfig+0x13e>
 800c3f6:	e772      	b.n	800c2de <HAL_RCC_OscConfig+0x316>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c3f8:	f043 0301 	orr.w	r3, r3, #1
 800c3fc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800c400:	f7fe fc0c 	bl	800ac1c <HAL_GetTick>
 800c404:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800c406:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c40a:	0799      	lsls	r1, r3, #30
 800c40c:	f100 80ca 	bmi.w	800c5a4 <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c410:	f7fe fc04 	bl	800ac1c <HAL_GetTick>
 800c414:	1b80      	subs	r0, r0, r6
 800c416:	2802      	cmp	r0, #2
 800c418:	d9f5      	bls.n	800c406 <HAL_RCC_OscConfig+0x43e>
 800c41a:	e5fc      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c41c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800c420:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c424:	f043 0304 	orr.w	r3, r3, #4
 800c428:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800c42c:	f7fe fbf6 	bl	800ac1c <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800c430:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c434:	071f      	lsls	r7, r3, #28
 800c436:	4606      	mov	r6, r0
 800c438:	d409      	bmi.n	800c44e <HAL_RCC_OscConfig+0x486>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c43a:	f7fe fbef 	bl	800ac1c <HAL_GetTick>
 800c43e:	1b80      	subs	r0, r0, r6
 800c440:	2803      	cmp	r0, #3
 800c442:	f63f ade8 	bhi.w	800c016 <HAL_RCC_OscConfig+0x4e>
 800c446:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c44a:	071f      	lsls	r7, r3, #28
 800c44c:	d5f5      	bpl.n	800c43a <HAL_RCC_OscConfig+0x472>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800c44e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c452:	69a2      	ldr	r2, [r4, #24]
 800c454:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c458:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c45c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c460:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c464:	f023 0301 	bic.w	r3, r3, #1
 800c468:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800c46c:	f7fe fbd6 	bl	800ac1c <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800c470:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800c474:	4605      	mov	r5, r0
 800c476:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800c47a:	0798      	lsls	r0, r3, #30
 800c47c:	f57f aea2 	bpl.w	800c1c4 <HAL_RCC_OscConfig+0x1fc>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c480:	f7fe fbcc 	bl	800ac1c <HAL_GetTick>
 800c484:	1b40      	subs	r0, r0, r5
 800c486:	2802      	cmp	r0, #2
 800c488:	d9f5      	bls.n	800c476 <HAL_RCC_OscConfig+0x4ae>
 800c48a:	e5c4      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c48c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c490:	f023 0304 	bic.w	r3, r3, #4
 800c494:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800c498:	f7fe fbc0 	bl	800ac1c <HAL_GetTick>
 800c49c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800c49e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c4a2:	071b      	lsls	r3, r3, #28
 800c4a4:	d43c      	bmi.n	800c520 <HAL_RCC_OscConfig+0x558>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c4a6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c4aa:	f023 0301 	bic.w	r3, r3, #1
 800c4ae:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800c4b2:	f7fe fbb3 	bl	800ac1c <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800c4b6:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800c4c0:	079f      	lsls	r7, r3, #30
 800c4c2:	f57f ae7f 	bpl.w	800c1c4 <HAL_RCC_OscConfig+0x1fc>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c4c6:	f7fe fba9 	bl	800ac1c <HAL_GetTick>
 800c4ca:	1b40      	subs	r0, r0, r5
 800c4cc:	2802      	cmp	r0, #2
 800c4ce:	d9f5      	bls.n	800c4bc <HAL_RCC_OscConfig+0x4f4>
 800c4d0:	e5a1      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800c4d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c4d6:	6813      	ldr	r3, [r2, #0]
 800c4d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800c4de:	f7fe fb9d 	bl	800ac1c <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c4e2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	6833      	ldr	r3, [r6, #0]
 800c4ea:	039b      	lsls	r3, r3, #14
 800c4ec:	f53f ae0a 	bmi.w	800c104 <HAL_RCC_OscConfig+0x13c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c4f0:	f7fe fb94 	bl	800ac1c <HAL_GetTick>
 800c4f4:	1b40      	subs	r0, r0, r5
 800c4f6:	2864      	cmp	r0, #100	; 0x64
 800c4f8:	d9f6      	bls.n	800c4e8 <HAL_RCC_OscConfig+0x520>
 800c4fa:	e58c      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800c4fc:	682b      	ldr	r3, [r5, #0]
 800c4fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c502:	4303      	orrs	r3, r0
 800c504:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c506:	686b      	ldr	r3, [r5, #4]
 800c508:	6a22      	ldr	r2, [r4, #32]
 800c50a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c50e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c512:	606b      	str	r3, [r5, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c514:	f7ff fca8 	bl	800be68 <RCC_SetFlashLatencyFromMSIRange>
 800c518:	2800      	cmp	r0, #0
 800c51a:	f43f ada6 	beq.w	800c06a <HAL_RCC_OscConfig+0xa2>
 800c51e:	e6de      	b.n	800c2de <HAL_RCC_OscConfig+0x316>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c520:	f7fe fb7c 	bl	800ac1c <HAL_GetTick>
 800c524:	1b80      	subs	r0, r0, r6
 800c526:	2803      	cmp	r0, #3
 800c528:	d9b9      	bls.n	800c49e <HAL_RCC_OscConfig+0x4d6>
 800c52a:	e574      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800c52c:	682b      	ldr	r3, [r5, #0]
 800c52e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c532:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c534:	f7fe fb72 	bl	800ac1c <HAL_GetTick>
 800c538:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c53a:	682b      	ldr	r3, [r5, #0]
 800c53c:	0559      	lsls	r1, r3, #21
 800c53e:	d41b      	bmi.n	800c578 <HAL_RCC_OscConfig+0x5b0>
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c540:	6823      	ldr	r3, [r4, #0]
 800c542:	e619      	b.n	800c178 <HAL_RCC_OscConfig+0x1b0>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800c544:	682b      	ldr	r3, [r5, #0]
 800c546:	f023 0301 	bic.w	r3, r3, #1
 800c54a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c54c:	f7fe fb66 	bl	800ac1c <HAL_GetTick>
 800c550:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800c552:	682b      	ldr	r3, [r5, #0]
 800c554:	0798      	lsls	r0, r3, #30
 800c556:	f57f adac 	bpl.w	800c0b2 <HAL_RCC_OscConfig+0xea>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c55a:	f7fe fb5f 	bl	800ac1c <HAL_GetTick>
 800c55e:	1b80      	subs	r0, r0, r6
 800c560:	2802      	cmp	r0, #2
 800c562:	d9f6      	bls.n	800c552 <HAL_RCC_OscConfig+0x58a>
 800c564:	e557      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800c566:	686b      	ldr	r3, [r5, #4]
 800c568:	6922      	ldr	r2, [r4, #16]
 800c56a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c56e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c572:	606b      	str	r3, [r5, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c574:	6823      	ldr	r3, [r4, #0]
}
 800c576:	e5ff      	b.n	800c178 <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c578:	f7fe fb50 	bl	800ac1c <HAL_GetTick>
 800c57c:	1b80      	subs	r0, r0, r6
 800c57e:	2802      	cmp	r0, #2
 800c580:	d9db      	bls.n	800c53a <HAL_RCC_OscConfig+0x572>
 800c582:	e548      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c58c:	4313      	orrs	r3, r2
 800c58e:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c590:	686b      	ldr	r3, [r5, #4]
 800c592:	6a22      	ldr	r2, [r4, #32]
 800c594:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c598:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c59c:	606b      	str	r3, [r5, #4]
 800c59e:	e588      	b.n	800c0b2 <HAL_RCC_OscConfig+0xea>
    return HAL_ERROR;
 800c5a0:	2001      	movs	r0, #1
}
 800c5a2:	4770      	bx	lr
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c5a4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c5a8:	f023 0304 	bic.w	r3, r3, #4
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800c5ac:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c5b0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800c5b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c5b8:	071a      	lsls	r2, r3, #28
 800c5ba:	f57f ae03 	bpl.w	800c1c4 <HAL_RCC_OscConfig+0x1fc>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c5be:	f7fe fb2d 	bl	800ac1c <HAL_GetTick>
 800c5c2:	1b80      	subs	r0, r0, r6
 800c5c4:	2803      	cmp	r0, #3
 800c5c6:	d9f5      	bls.n	800c5b4 <HAL_RCC_OscConfig+0x5ec>
 800c5c8:	e525      	b.n	800c016 <HAL_RCC_OscConfig+0x4e>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c5ca:	2b04      	cmp	r3, #4
 800c5cc:	d013      	beq.n	800c5f6 <HAL_RCC_OscConfig+0x62e>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c5ce:	2b08      	cmp	r3, #8
 800c5d0:	d050      	beq.n	800c674 <HAL_RCC_OscConfig+0x6ac>
 800c5d2:	f7ff fcbf 	bl	800bf54 <HAL_RCC_GetSysClockFreq.part.0>
 800c5d6:	e559      	b.n	800c08c <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c5d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c5e0:	f042 0204 	orr.w	r2, r2, #4
 800c5e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c5e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c5ec:	f042 0201 	orr.w	r2, r2, #1
 800c5f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c5f4:	e6de      	b.n	800c3b4 <HAL_RCC_OscConfig+0x3ec>
      sysclockfreq = HSE_VALUE / 2U;
 800c5f6:	4802      	ldr	r0, [pc, #8]	; (800c600 <HAL_RCC_OscConfig+0x638>)
 800c5f8:	e548      	b.n	800c08c <HAL_RCC_OscConfig+0xc4>
 800c5fa:	bf00      	nop
 800c5fc:	11c1808c 	.word	0x11c1808c
 800c600:	00f42400 	.word	0x00f42400
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c604:	6b60      	ldr	r0, [r4, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c606:	f001 0370 	and.w	r3, r1, #112	; 0x70
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c60a:	4283      	cmp	r3, r0
 800c60c:	f47f ae7f 	bne.w	800c30e <HAL_RCC_OscConfig+0x346>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c610:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c612:	f3c1 2306 	ubfx	r3, r1, #8, #7
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c616:	4283      	cmp	r3, r0
 800c618:	f47f ae79 	bne.w	800c30e <HAL_RCC_OscConfig+0x346>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c61c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c61e:	f401 1378 	and.w	r3, r1, #4063232	; 0x3e0000
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c622:	4283      	cmp	r3, r0
 800c624:	f47f ae73 	bne.w	800c30e <HAL_RCC_OscConfig+0x346>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c628:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c62a:	f001 6360 	and.w	r3, r1, #234881024	; 0xe000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c62e:	4283      	cmp	r3, r0
 800c630:	f47f ae6d 	bne.w	800c30e <HAL_RCC_OscConfig+0x346>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c634:	6c63      	ldr	r3, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c636:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c63a:	4299      	cmp	r1, r3
 800c63c:	f47f ae67 	bne.w	800c30e <HAL_RCC_OscConfig+0x346>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c640:	682b      	ldr	r3, [r5, #0]
 800c642:	0199      	lsls	r1, r3, #6
 800c644:	f53f ae1b 	bmi.w	800c27e <HAL_RCC_OscConfig+0x2b6>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c648:	682b      	ldr	r3, [r5, #0]
 800c64a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c64e:	602b      	str	r3, [r5, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c650:	68eb      	ldr	r3, [r5, #12]
 800c652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c656:	60eb      	str	r3, [r5, #12]
          tickstart = HAL_GetTick();
 800c658:	f7fe fae0 	bl	800ac1c <HAL_GetTick>
 800c65c:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c65e:	e005      	b.n	800c66c <HAL_RCC_OscConfig+0x6a4>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c660:	f7fe fadc 	bl	800ac1c <HAL_GetTick>
 800c664:	1b00      	subs	r0, r0, r4
 800c666:	2802      	cmp	r0, #2
 800c668:	f63f acd5 	bhi.w	800c016 <HAL_RCC_OscConfig+0x4e>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c66c:	682b      	ldr	r3, [r5, #0]
 800c66e:	019a      	lsls	r2, r3, #6
 800c670:	d5f6      	bpl.n	800c660 <HAL_RCC_OscConfig+0x698>
 800c672:	e604      	b.n	800c27e <HAL_RCC_OscConfig+0x2b6>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800c674:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 800c676:	4b03      	ldr	r3, [pc, #12]	; (800c684 <HAL_RCC_OscConfig+0x6bc>)
 800c678:	4803      	ldr	r0, [pc, #12]	; (800c688 <HAL_RCC_OscConfig+0x6c0>)
 800c67a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800c67e:	bf18      	it	ne
 800c680:	4618      	movne	r0, r3
 800c682:	e503      	b.n	800c08c <HAL_RCC_OscConfig+0xc4>
 800c684:	00f42400 	.word	0x00f42400
 800c688:	01e84800 	.word	0x01e84800

0800c68c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800c68c:	2800      	cmp	r0, #0
 800c68e:	f000 8130 	beq.w	800c8f2 <HAL_RCC_ClockConfig+0x266>
{
 800c692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c696:	4e9d      	ldr	r6, [pc, #628]	; (800c90c <HAL_RCC_ClockConfig+0x280>)
 800c698:	6833      	ldr	r3, [r6, #0]
 800c69a:	f003 0307 	and.w	r3, r3, #7
 800c69e:	428b      	cmp	r3, r1
 800c6a0:	460c      	mov	r4, r1
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	f0c0 80d9 	bcc.w	800c85a <HAL_RCC_ClockConfig+0x1ce>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c6a8:	682b      	ldr	r3, [r5, #0]
 800c6aa:	079a      	lsls	r2, r3, #30
 800c6ac:	d472      	bmi.n	800c794 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c6ae:	0698      	lsls	r0, r3, #26
 800c6b0:	f100 8082 	bmi.w	800c7b8 <HAL_RCC_ClockConfig+0x12c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c6b4:	065a      	lsls	r2, r3, #25
 800c6b6:	f100 8094 	bmi.w	800c7e2 <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6ba:	0758      	lsls	r0, r3, #29
 800c6bc:	f100 80a7 	bmi.w	800c80e <HAL_RCC_ClockConfig+0x182>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6c0:	071a      	lsls	r2, r3, #28
 800c6c2:	f100 80b6 	bmi.w	800c832 <HAL_RCC_ClockConfig+0x1a6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c6c6:	07df      	lsls	r7, r3, #31
 800c6c8:	d529      	bpl.n	800c71e <HAL_RCC_ClockConfig+0x92>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c6ca:	686b      	ldr	r3, [r5, #4]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c6cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	6812      	ldr	r2, [r2, #0]
 800c6d4:	f000 8106 	beq.w	800c8e4 <HAL_RCC_ClockConfig+0x258>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c6d8:	2b03      	cmp	r3, #3
 800c6da:	f000 80fd 	beq.w	800c8d8 <HAL_RCC_ClockConfig+0x24c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f040 8104 	bne.w	800c8ec <HAL_RCC_ClockConfig+0x260>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800c6e4:	0791      	lsls	r1, r2, #30
 800c6e6:	f140 80fa 	bpl.w	800c8de <HAL_RCC_ClockConfig+0x252>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c6ea:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c6ee:	f241 3888 	movw	r8, #5000	; 0x1388
 800c6f2:	68b2      	ldr	r2, [r6, #8]
 800c6f4:	f022 0203 	bic.w	r2, r2, #3
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800c6fc:	f7fe fa8e 	bl	800ac1c <HAL_GetTick>
 800c700:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c702:	e005      	b.n	800c710 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c704:	f7fe fa8a 	bl	800ac1c <HAL_GetTick>
 800c708:	1bc0      	subs	r0, r0, r7
 800c70a:	4540      	cmp	r0, r8
 800c70c:	f200 80b8 	bhi.w	800c880 <HAL_RCC_ClockConfig+0x1f4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c710:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c712:	686a      	ldr	r2, [r5, #4]
 800c714:	f003 030c 	and.w	r3, r3, #12
 800c718:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800c71c:	d1f2      	bne.n	800c704 <HAL_RCC_ClockConfig+0x78>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c71e:	4d7b      	ldr	r5, [pc, #492]	; (800c90c <HAL_RCC_ClockConfig+0x280>)
 800c720:	682b      	ldr	r3, [r5, #0]
 800c722:	f003 0307 	and.w	r3, r3, #7
 800c726:	42a3      	cmp	r3, r4
 800c728:	d913      	bls.n	800c752 <HAL_RCC_ClockConfig+0xc6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c72a:	682b      	ldr	r3, [r5, #0]
 800c72c:	f023 0307 	bic.w	r3, r3, #7
 800c730:	4323      	orrs	r3, r4
 800c732:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800c734:	f7fe fa72 	bl	800ac1c <HAL_GetTick>
 800c738:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c73a:	e005      	b.n	800c748 <HAL_RCC_ClockConfig+0xbc>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c73c:	f7fe fa6e 	bl	800ac1c <HAL_GetTick>
 800c740:	1b80      	subs	r0, r0, r6
 800c742:	2802      	cmp	r0, #2
 800c744:	f200 809c 	bhi.w	800c880 <HAL_RCC_ClockConfig+0x1f4>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c748:	682b      	ldr	r3, [r5, #0]
 800c74a:	f003 0307 	and.w	r3, r3, #7
 800c74e:	42a3      	cmp	r3, r4
 800c750:	d1f4      	bne.n	800c73c <HAL_RCC_ClockConfig+0xb0>
 800c752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c756:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c758:	f013 030c 	ands.w	r3, r3, #12
 800c75c:	f000 80b1 	beq.w	800c8c2 <HAL_RCC_ClockConfig+0x236>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c760:	2b04      	cmp	r3, #4
 800c762:	f000 80d0 	beq.w	800c906 <HAL_RCC_ClockConfig+0x27a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c766:	2b08      	cmp	r3, #8
 800c768:	f000 80c5 	beq.w	800c8f6 <HAL_RCC_ClockConfig+0x26a>
 800c76c:	f7ff fbf2 	bl	800bf54 <HAL_RCC_GetSysClockFreq.part.0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c774:	4a66      	ldr	r2, [pc, #408]	; (800c910 <HAL_RCC_ClockConfig+0x284>)
 800c776:	689b      	ldr	r3, [r3, #8]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c778:	4966      	ldr	r1, [pc, #408]	; (800c914 <HAL_RCC_ClockConfig+0x288>)
 800c77a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c77e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c782:	fbb0 f0f3 	udiv	r0, r0, r3
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c786:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 800c788:	f7fe fa4e 	bl	800ac28 <HAL_GetTickPrio>
}
 800c78c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 800c790:	f7fe b9fe 	b.w	800ab90 <HAL_InitTick>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c794:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800c798:	68aa      	ldr	r2, [r5, #8]
 800c79a:	68b3      	ldr	r3, [r6, #8]
 800c79c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800c7a4:	f7fe fa3a 	bl	800ac1c <HAL_GetTick>
 800c7a8:	4607      	mov	r7, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c7aa:	68b3      	ldr	r3, [r6, #8]
 800c7ac:	03db      	lsls	r3, r3, #15
 800c7ae:	d56a      	bpl.n	800c886 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c7b0:	682b      	ldr	r3, [r5, #0]
 800c7b2:	0698      	lsls	r0, r3, #26
 800c7b4:	f57f af7e 	bpl.w	800c6b4 <HAL_RCC_ClockConfig+0x28>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c7b8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800c7bc:	696a      	ldr	r2, [r5, #20]
 800c7be:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800c7c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 800c7cc:	f7fe fa26 	bl	800ac1c <HAL_GetTick>
 800c7d0:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c7d2:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800c7d6:	0399      	lsls	r1, r3, #14
 800c7d8:	d55b      	bpl.n	800c892 <HAL_RCC_ClockConfig+0x206>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c7da:	682b      	ldr	r3, [r5, #0]
 800c7dc:	065a      	lsls	r2, r3, #25
 800c7de:	f57f af6c 	bpl.w	800c6ba <HAL_RCC_ClockConfig+0x2e>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c7e2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800c7e6:	69aa      	ldr	r2, [r5, #24]
 800c7e8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800c7ec:	f023 030f 	bic.w	r3, r3, #15
 800c7f0:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 800c7f4:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 800c7f8:	f7fe fa10 	bl	800ac1c <HAL_GetTick>
 800c7fc:	4607      	mov	r7, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c7fe:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800c802:	03db      	lsls	r3, r3, #15
 800c804:	d54b      	bpl.n	800c89e <HAL_RCC_ClockConfig+0x212>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c806:	682b      	ldr	r3, [r5, #0]
 800c808:	0758      	lsls	r0, r3, #29
 800c80a:	f57f af59 	bpl.w	800c6c0 <HAL_RCC_ClockConfig+0x34>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c80e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800c812:	68ea      	ldr	r2, [r5, #12]
 800c814:	68b3      	ldr	r3, [r6, #8]
 800c816:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c81a:	4313      	orrs	r3, r2
 800c81c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800c81e:	f7fe f9fd 	bl	800ac1c <HAL_GetTick>
 800c822:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c824:	68b3      	ldr	r3, [r6, #8]
 800c826:	0399      	lsls	r1, r3, #14
 800c828:	d53f      	bpl.n	800c8aa <HAL_RCC_ClockConfig+0x21e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c82a:	682b      	ldr	r3, [r5, #0]
 800c82c:	071a      	lsls	r2, r3, #28
 800c82e:	f57f af4a 	bpl.w	800c6c6 <HAL_RCC_ClockConfig+0x3a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c832:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800c836:	692a      	ldr	r2, [r5, #16]
 800c838:	68b3      	ldr	r3, [r6, #8]
 800c83a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800c83e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c842:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800c844:	f7fe f9ea 	bl	800ac1c <HAL_GetTick>
 800c848:	4607      	mov	r7, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c84a:	68b3      	ldr	r3, [r6, #8]
 800c84c:	035b      	lsls	r3, r3, #13
 800c84e:	d532      	bpl.n	800c8b6 <HAL_RCC_ClockConfig+0x22a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c850:	682b      	ldr	r3, [r5, #0]
 800c852:	07df      	lsls	r7, r3, #31
 800c854:	f53f af39 	bmi.w	800c6ca <HAL_RCC_ClockConfig+0x3e>
 800c858:	e761      	b.n	800c71e <HAL_RCC_ClockConfig+0x92>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c85a:	6833      	ldr	r3, [r6, #0]
 800c85c:	f023 0307 	bic.w	r3, r3, #7
 800c860:	430b      	orrs	r3, r1
 800c862:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800c864:	f7fe f9da 	bl	800ac1c <HAL_GetTick>
 800c868:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c86a:	6833      	ldr	r3, [r6, #0]
 800c86c:	f003 0307 	and.w	r3, r3, #7
 800c870:	42a3      	cmp	r3, r4
 800c872:	f43f af19 	beq.w	800c6a8 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c876:	f7fe f9d1 	bl	800ac1c <HAL_GetTick>
 800c87a:	1bc3      	subs	r3, r0, r7
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d9f4      	bls.n	800c86a <HAL_RCC_ClockConfig+0x1de>
        return HAL_TIMEOUT;
 800c880:	2003      	movs	r0, #3
}
 800c882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c886:	f7fe f9c9 	bl	800ac1c <HAL_GetTick>
 800c88a:	1bc0      	subs	r0, r0, r7
 800c88c:	2802      	cmp	r0, #2
 800c88e:	d98c      	bls.n	800c7aa <HAL_RCC_ClockConfig+0x11e>
 800c890:	e7f6      	b.n	800c880 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c892:	f7fe f9c3 	bl	800ac1c <HAL_GetTick>
 800c896:	1bc0      	subs	r0, r0, r7
 800c898:	2802      	cmp	r0, #2
 800c89a:	d99a      	bls.n	800c7d2 <HAL_RCC_ClockConfig+0x146>
 800c89c:	e7f0      	b.n	800c880 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c89e:	f7fe f9bd 	bl	800ac1c <HAL_GetTick>
 800c8a2:	1bc0      	subs	r0, r0, r7
 800c8a4:	2802      	cmp	r0, #2
 800c8a6:	d9aa      	bls.n	800c7fe <HAL_RCC_ClockConfig+0x172>
 800c8a8:	e7ea      	b.n	800c880 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c8aa:	f7fe f9b7 	bl	800ac1c <HAL_GetTick>
 800c8ae:	1bc0      	subs	r0, r0, r7
 800c8b0:	2802      	cmp	r0, #2
 800c8b2:	d9b7      	bls.n	800c824 <HAL_RCC_ClockConfig+0x198>
 800c8b4:	e7e4      	b.n	800c880 <HAL_RCC_ClockConfig+0x1f4>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c8b6:	f7fe f9b1 	bl	800ac1c <HAL_GetTick>
 800c8ba:	1bc0      	subs	r0, r0, r7
 800c8bc:	2802      	cmp	r0, #2
 800c8be:	d9c4      	bls.n	800c84a <HAL_RCC_ClockConfig+0x1be>
 800c8c0:	e7de      	b.n	800c880 <HAL_RCC_ClockConfig+0x1f4>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c8c2:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c8c4:	4a14      	ldr	r2, [pc, #80]	; (800c918 <HAL_RCC_ClockConfig+0x28c>)
 800c8c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8ca:	2bb0      	cmp	r3, #176	; 0xb0
 800c8cc:	bf28      	it	cs
 800c8ce:	23b0      	movcs	r3, #176	; 0xb0
 800c8d0:	091b      	lsrs	r3, r3, #4
 800c8d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c8d6:	e74b      	b.n	800c770 <HAL_RCC_ClockConfig+0xe4>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c8d8:	0190      	lsls	r0, r2, #6
 800c8da:	f53f af06 	bmi.w	800c6ea <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 800c8de:	2001      	movs	r0, #1
}
 800c8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c8e4:	0396      	lsls	r6, r2, #14
 800c8e6:	f53f af00 	bmi.w	800c6ea <HAL_RCC_ClockConfig+0x5e>
 800c8ea:	e7f8      	b.n	800c8de <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c8ec:	0552      	lsls	r2, r2, #21
 800c8ee:	d5f6      	bpl.n	800c8de <HAL_RCC_ClockConfig+0x252>
 800c8f0:	e6fb      	b.n	800c6ea <HAL_RCC_ClockConfig+0x5e>
    return HAL_ERROR;
 800c8f2:	2001      	movs	r0, #1
}
 800c8f4:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800c8f6:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 800c8f8:	4b08      	ldr	r3, [pc, #32]	; (800c91c <HAL_RCC_ClockConfig+0x290>)
 800c8fa:	4809      	ldr	r0, [pc, #36]	; (800c920 <HAL_RCC_ClockConfig+0x294>)
 800c8fc:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800c900:	bf08      	it	eq
 800c902:	4618      	moveq	r0, r3
 800c904:	e734      	b.n	800c770 <HAL_RCC_ClockConfig+0xe4>
      sysclockfreq = HSE_VALUE / 2U;
 800c906:	4806      	ldr	r0, [pc, #24]	; (800c920 <HAL_RCC_ClockConfig+0x294>)
 800c908:	e732      	b.n	800c770 <HAL_RCC_ClockConfig+0xe4>
 800c90a:	bf00      	nop
 800c90c:	58004000 	.word	0x58004000
 800c910:	200000dc 	.word	0x200000dc
 800c914:	08023ed8 	.word	0x08023ed8
 800c918:	08023e98 	.word	0x08023e98
 800c91c:	01e84800 	.word	0x01e84800
 800c920:	00f42400 	.word	0x00f42400

0800c924 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c928:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c92a:	f013 030c 	ands.w	r3, r3, #12
 800c92e:	d10a      	bne.n	800c946 <HAL_RCC_GetSysClockFreq+0x22>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c930:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c932:	4a0d      	ldr	r2, [pc, #52]	; (800c968 <HAL_RCC_GetSysClockFreq+0x44>)
 800c934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c938:	2bb0      	cmp	r3, #176	; 0xb0
 800c93a:	bf28      	it	cs
 800c93c:	23b0      	movcs	r3, #176	; 0xb0
 800c93e:	091b      	lsrs	r3, r3, #4
 800c940:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c944:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c946:	2b04      	cmp	r3, #4
 800c948:	d00b      	beq.n	800c962 <HAL_RCC_GetSysClockFreq+0x3e>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c94a:	2b08      	cmp	r3, #8
 800c94c:	d001      	beq.n	800c952 <HAL_RCC_GetSysClockFreq+0x2e>
 800c94e:	f7ff bb01 	b.w	800bf54 <HAL_RCC_GetSysClockFreq.part.0>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800c952:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 800c954:	4b05      	ldr	r3, [pc, #20]	; (800c96c <HAL_RCC_GetSysClockFreq+0x48>)
 800c956:	4806      	ldr	r0, [pc, #24]	; (800c970 <HAL_RCC_GetSysClockFreq+0x4c>)
 800c958:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800c95c:	bf08      	it	eq
 800c95e:	4618      	moveq	r0, r3
 800c960:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800c962:	4803      	ldr	r0, [pc, #12]	; (800c970 <HAL_RCC_GetSysClockFreq+0x4c>)
}
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	08023e98 	.word	0x08023e98
 800c96c:	01e84800 	.word	0x01e84800
 800c970:	00f42400 	.word	0x00f42400

0800c974 <HAL_RCC_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 800c978:	b508      	push	{r3, lr}
 800c97a:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c97c:	f013 030c 	ands.w	r3, r3, #12
 800c980:	d114      	bne.n	800c9ac <HAL_RCC_GetHCLKFreq+0x38>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c982:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c984:	4a12      	ldr	r2, [pc, #72]	; (800c9d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c98a:	2bb0      	cmp	r3, #176	; 0xb0
 800c98c:	bf28      	it	cs
 800c98e:	23b0      	movcs	r3, #176	; 0xb0
 800c990:	091b      	lsrs	r3, r3, #4
 800c992:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c996:	4a0f      	ldr	r2, [pc, #60]	; (800c9d4 <HAL_RCC_GetHCLKFreq+0x60>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800c9a6:	fbb0 f0f3 	udiv	r0, r0, r3
 800c9aa:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c9ac:	2b04      	cmp	r3, #4
 800c9ae:	d004      	beq.n	800c9ba <HAL_RCC_GetHCLKFreq+0x46>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c9b0:	2b08      	cmp	r3, #8
 800c9b2:	d004      	beq.n	800c9be <HAL_RCC_GetHCLKFreq+0x4a>
 800c9b4:	f7ff face 	bl	800bf54 <HAL_RCC_GetSysClockFreq.part.0>
 800c9b8:	e7ed      	b.n	800c996 <HAL_RCC_GetHCLKFreq+0x22>
    sysclockfreq = HSI_VALUE;
 800c9ba:	4807      	ldr	r0, [pc, #28]	; (800c9d8 <HAL_RCC_GetHCLKFreq+0x64>)
 800c9bc:	e7eb      	b.n	800c996 <HAL_RCC_GetHCLKFreq+0x22>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800c9be:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 800c9c0:	4b06      	ldr	r3, [pc, #24]	; (800c9dc <HAL_RCC_GetHCLKFreq+0x68>)
 800c9c2:	4805      	ldr	r0, [pc, #20]	; (800c9d8 <HAL_RCC_GetHCLKFreq+0x64>)
 800c9c4:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800c9c8:	bf08      	it	eq
 800c9ca:	4618      	moveq	r0, r3
 800c9cc:	e7e3      	b.n	800c996 <HAL_RCC_GetHCLKFreq+0x22>
 800c9ce:	bf00      	nop
 800c9d0:	08023e98 	.word	0x08023e98
 800c9d4:	08023ed8 	.word	0x08023ed8
 800c9d8:	00f42400 	.word	0x00f42400
 800c9dc:	01e84800 	.word	0x01e84800

0800c9e0 <HAL_RCC_GetPCLK1Freq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c9e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 800c9e4:	b508      	push	{r3, lr}
 800c9e6:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c9e8:	f013 030c 	ands.w	r3, r3, #12
 800c9ec:	d11d      	bne.n	800ca2a <HAL_RCC_GetPCLK1Freq+0x4a>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c9ee:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c9f0:	4a16      	ldr	r2, [pc, #88]	; (800ca4c <HAL_RCC_GetPCLK1Freq+0x6c>)
 800c9f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9f6:	2bb0      	cmp	r3, #176	; 0xb0
 800c9f8:	bf28      	it	cs
 800c9fa:	23b0      	movcs	r3, #176	; 0xb0
 800c9fc:	091b      	lsrs	r3, r3, #4
 800c9fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ca02:	4913      	ldr	r1, [pc, #76]	; (800ca50 <HAL_RCC_GetPCLK1Freq+0x70>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800ca04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca08:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ca10:	f3c3 2302 	ubfx	r3, r3, #8, #3
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ca14:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ca18:	4a0e      	ldr	r2, [pc, #56]	; (800ca54 <HAL_RCC_GetPCLK1Freq+0x74>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ca1a:	fbb0 f0f1 	udiv	r0, r0, r1
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800ca1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca22:	f003 031f 	and.w	r3, r3, #31
}
 800ca26:	40d8      	lsrs	r0, r3
 800ca28:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ca2a:	2b04      	cmp	r3, #4
 800ca2c:	d004      	beq.n	800ca38 <HAL_RCC_GetPCLK1Freq+0x58>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ca2e:	2b08      	cmp	r3, #8
 800ca30:	d004      	beq.n	800ca3c <HAL_RCC_GetPCLK1Freq+0x5c>
 800ca32:	f7ff fa8f 	bl	800bf54 <HAL_RCC_GetSysClockFreq.part.0>
 800ca36:	e7e4      	b.n	800ca02 <HAL_RCC_GetPCLK1Freq+0x22>
    sysclockfreq = HSI_VALUE;
 800ca38:	4807      	ldr	r0, [pc, #28]	; (800ca58 <HAL_RCC_GetPCLK1Freq+0x78>)
 800ca3a:	e7e2      	b.n	800ca02 <HAL_RCC_GetPCLK1Freq+0x22>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800ca3c:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 800ca3e:	4b07      	ldr	r3, [pc, #28]	; (800ca5c <HAL_RCC_GetPCLK1Freq+0x7c>)
 800ca40:	4805      	ldr	r0, [pc, #20]	; (800ca58 <HAL_RCC_GetPCLK1Freq+0x78>)
 800ca42:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800ca46:	bf08      	it	eq
 800ca48:	4618      	moveq	r0, r3
 800ca4a:	e7da      	b.n	800ca02 <HAL_RCC_GetPCLK1Freq+0x22>
 800ca4c:	08023e98 	.word	0x08023e98
 800ca50:	08023ed8 	.word	0x08023ed8
 800ca54:	08023f78 	.word	0x08023f78
 800ca58:	00f42400 	.word	0x00f42400
 800ca5c:	01e84800 	.word	0x01e84800

0800ca60 <HAL_RCC_GetPCLK2Freq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ca60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
{
 800ca64:	b508      	push	{r3, lr}
 800ca66:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ca68:	f013 030c 	ands.w	r3, r3, #12
 800ca6c:	d11d      	bne.n	800caaa <HAL_RCC_GetPCLK2Freq+0x4a>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800ca6e:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ca70:	4a16      	ldr	r2, [pc, #88]	; (800cacc <HAL_RCC_GetPCLK2Freq+0x6c>)
 800ca72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca76:	2bb0      	cmp	r3, #176	; 0xb0
 800ca78:	bf28      	it	cs
 800ca7a:	23b0      	movcs	r3, #176	; 0xb0
 800ca7c:	091b      	lsrs	r3, r3, #4
 800ca7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ca82:	4913      	ldr	r1, [pc, #76]	; (800cad0 <HAL_RCC_GetPCLK2Freq+0x70>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800ca84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca88:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800ca90:	f3c3 23c2 	ubfx	r3, r3, #11, #3
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ca94:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800ca98:	4a0e      	ldr	r2, [pc, #56]	; (800cad4 <HAL_RCC_GetPCLK2Freq+0x74>)
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ca9a:	fbb0 f0f1 	udiv	r0, r0, r1
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800ca9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caa2:	f003 031f 	and.w	r3, r3, #31
}
 800caa6:	40d8      	lsrs	r0, r3
 800caa8:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800caaa:	2b04      	cmp	r3, #4
 800caac:	d004      	beq.n	800cab8 <HAL_RCC_GetPCLK2Freq+0x58>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800caae:	2b08      	cmp	r3, #8
 800cab0:	d004      	beq.n	800cabc <HAL_RCC_GetPCLK2Freq+0x5c>
 800cab2:	f7ff fa4f 	bl	800bf54 <HAL_RCC_GetSysClockFreq.part.0>
 800cab6:	e7e4      	b.n	800ca82 <HAL_RCC_GetPCLK2Freq+0x22>
    sysclockfreq = HSI_VALUE;
 800cab8:	4807      	ldr	r0, [pc, #28]	; (800cad8 <HAL_RCC_GetPCLK2Freq+0x78>)
 800caba:	e7e2      	b.n	800ca82 <HAL_RCC_GetPCLK2Freq+0x22>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800cabc:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 800cabe:	4b07      	ldr	r3, [pc, #28]	; (800cadc <HAL_RCC_GetPCLK2Freq+0x7c>)
 800cac0:	4805      	ldr	r0, [pc, #20]	; (800cad8 <HAL_RCC_GetPCLK2Freq+0x78>)
 800cac2:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800cac6:	bf08      	it	eq
 800cac8:	4618      	moveq	r0, r3
 800caca:	e7da      	b.n	800ca82 <HAL_RCC_GetPCLK2Freq+0x22>
 800cacc:	08023e98 	.word	0x08023e98
 800cad0:	08023ed8 	.word	0x08023ed8
 800cad4:	08023f78 	.word	0x08023f78
 800cad8:	00f42400 	.word	0x00f42400
 800cadc:	01e84800 	.word	0x01e84800

0800cae0 <HAL_RCCEx_PeriphCLKConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cae0:	6803      	ldr	r3, [r0, #0]
{
 800cae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cae6:	f013 0540 	ands.w	r5, r3, #64	; 0x40
{
 800caea:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800caec:	d040      	beq.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800caee:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800caf0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800caf4:	f000 8134 	beq.w	800cd60 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800caf8:	f200 8119 	bhi.w	800cd2e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800cafc:	2a00      	cmp	r2, #0
 800cafe:	f040 811c 	bne.w	800cd3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cb02:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800cb06:	682b      	ldr	r3, [r5, #0]
 800cb08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cb0c:	602b      	str	r3, [r5, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cb0e:	f7fe f885 	bl	800ac1c <HAL_GetTick>
 800cb12:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800cb14:	682b      	ldr	r3, [r5, #0]
 800cb16:	011f      	lsls	r7, r3, #4
 800cb18:	f100 8131 	bmi.w	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800cb1c:	692b      	ldr	r3, [r5, #16]
 800cb1e:	6862      	ldr	r2, [r4, #4]
 800cb20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cb24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cb28:	612b      	str	r3, [r5, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800cb2a:	692b      	ldr	r3, [r5, #16]
 800cb2c:	68a2      	ldr	r2, [r4, #8]
 800cb2e:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 800cb32:	4313      	orrs	r3, r2
 800cb34:	612b      	str	r3, [r5, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cb36:	682b      	ldr	r3, [r5, #0]
 800cb38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb3c:	602b      	str	r3, [r5, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb3e:	f7fe f86d 	bl	800ac1c <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800cb42:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800cb46:	4605      	mov	r5, r0
 800cb48:	6833      	ldr	r3, [r6, #0]
 800cb4a:	0118      	lsls	r0, r3, #4
 800cb4c:	f140 81b0 	bpl.w	800ceb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800cb50:	6962      	ldr	r2, [r4, #20]
 800cb52:	6933      	ldr	r3, [r6, #16]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	6133      	str	r3, [r6, #16]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cb58:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cb5a:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800cb5c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
}
 800cb60:	2500      	movs	r5, #0
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800cb62:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800cb66:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 800cb6a:	430a      	orrs	r2, r1
 800cb6c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 800cb70:	0519      	lsls	r1, r3, #20
 800cb72:	d509      	bpl.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800cb74:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800cb78:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cb7a:	f8d7 6090 	ldr.w	r6, [r7, #144]	; 0x90
 800cb7e:	f406 7640 	and.w	r6, r6, #768	; 0x300
 800cb82:	42b2      	cmp	r2, r6
 800cb84:	f040 80b4 	bne.w	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cb88:	07d8      	lsls	r0, r3, #31
 800cb8a:	d509      	bpl.n	800cba0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800cb8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cb90:	69a0      	ldr	r0, [r4, #24]
 800cb92:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800cb96:	f022 0203 	bic.w	r2, r2, #3
 800cb9a:	4302      	orrs	r2, r0
 800cb9c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cba0:	0799      	lsls	r1, r3, #30
 800cba2:	d509      	bpl.n	800cbb8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800cba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cba8:	69e0      	ldr	r0, [r4, #28]
 800cbaa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800cbae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800cbb2:	4302      	orrs	r2, r0
 800cbb4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cbb8:	06da      	lsls	r2, r3, #27
 800cbba:	d50c      	bpl.n	800cbd6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cbbc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800cbbe:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800cbc2:	0c31      	lsrs	r1, r6, #16
 800cbc4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800cbc8:	0409      	lsls	r1, r1, #16
 800cbca:	ea22 0201 	bic.w	r2, r2, r1
 800cbce:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800cbd2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cbd6:	069f      	lsls	r7, r3, #26
 800cbd8:	d50c      	bpl.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cbda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbdc:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800cbe0:	0c31      	lsrs	r1, r6, #16
 800cbe2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800cbe6:	0409      	lsls	r1, r1, #16
 800cbe8:	ea22 0201 	bic.w	r2, r2, r1
 800cbec:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800cbf0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cbf4:	075e      	lsls	r6, r3, #29
 800cbf6:	d50f      	bpl.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cbf8:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800cbfa:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800cbfe:	0911      	lsrs	r1, r2, #4
 800cc00:	f401 207f 	and.w	r0, r1, #1044480	; 0xff000
 800cc04:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 800cc08:	0112      	lsls	r2, r2, #4
 800cc0a:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 800cc0e:	ea21 0100 	bic.w	r1, r1, r0
 800cc12:	430a      	orrs	r2, r1
 800cc14:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cc18:	0718      	lsls	r0, r3, #28
 800cc1a:	d50f      	bpl.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cc1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cc1e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800cc22:	0911      	lsrs	r1, r2, #4
 800cc24:	f401 207f 	and.w	r0, r1, #1044480	; 0xff000
 800cc28:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 800cc2c:	0112      	lsls	r2, r2, #4
 800cc2e:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 800cc32:	ea21 0100 	bic.w	r1, r1, r0
 800cc36:	430a      	orrs	r2, r1
 800cc38:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cc3c:	05d9      	lsls	r1, r3, #23
 800cc3e:	d510      	bpl.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x182>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800cc40:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cc44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc46:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 800cc4a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800cc4e:	430a      	orrs	r2, r1
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cc50:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800cc54:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 800cc58:	d07d      	beq.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x276>
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cc5a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800cc5e:	f000 80d2 	beq.w	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x326>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cc62:	059f      	lsls	r7, r3, #22
 800cc64:	d513      	bpl.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cc66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cc68:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800cc6c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800cc70:	d003      	beq.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x19a>
 800cc72:	f031 4280 	bics.w	r2, r1, #1073741824	; 0x40000000
 800cc76:	f040 808b 	bne.w	800cd90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800cc7a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800cc7e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800cc82:	430a      	orrs	r2, r1
 800cc84:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cc88:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 800cc8c:	d057      	beq.n	800cd3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cc8e:	055e      	lsls	r6, r3, #21
 800cc90:	d50f      	bpl.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800cc92:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cc96:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cc98:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 800cc9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800cca0:	430a      	orrs	r2, r1
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800cca2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800cca6:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 800ccaa:	d04f      	beq.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ccac:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800ccb0:	d07e      	beq.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ccb2:	04da      	lsls	r2, r3, #19
 800ccb4:	d509      	bpl.n	800ccca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ccb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ccba:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ccbc:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 800ccc0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ccc4:	4302      	orrs	r2, r0
 800ccc6:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800ccca:	049b      	lsls	r3, r3, #18
 800cccc:	d50d      	bpl.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x20a>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800ccce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ccd2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ccd4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800ccd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ccda:	430b      	orrs	r3, r1
 800ccdc:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800ccde:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cce0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cce2:	f023 0303 	bic.w	r3, r3, #3
 800cce6:	430b      	orrs	r3, r1
 800cce8:	6253      	str	r3, [r2, #36]	; 0x24
}
 800ccea:	4628      	mov	r0, r5
 800ccec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_PWR_EnableBkUpAccess();
 800ccf0:	f7ff f8aa 	bl	800be48 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800ccf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800ccf8:	2e00      	cmp	r6, #0
 800ccfa:	d038      	beq.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ccfc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cd00:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cd04:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cd08:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cd0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cd10:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800cd14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cd16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd1a:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 800cd1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800cd20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800cd24:	07da      	lsls	r2, r3, #31
 800cd26:	f100 80b1 	bmi.w	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cd2a:	6823      	ldr	r3, [r4, #0]
 800cd2c:	e72c      	b.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    switch (PeriphClkInit->Sai1ClockSelection)
 800cd2e:	f422 0180 	bic.w	r1, r2, #4194304	; 0x400000
 800cd32:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800cd36:	f43f af11 	beq.w	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800cd3a:	2501      	movs	r5, #1
 800cd3c:	e718      	b.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x90>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800cd3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cd42:	68ca      	ldr	r2, [r1, #12]
 800cd44:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800cd48:	60ca      	str	r2, [r1, #12]
 800cd4a:	e7a0      	b.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cd4c:	68f2      	ldr	r2, [r6, #12]
 800cd4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cd52:	60f2      	str	r2, [r6, #12]
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cd54:	e7ad      	b.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800cd56:	68f2      	ldr	r2, [r6, #12]
 800cd58:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800cd5c:	60f2      	str	r2, [r6, #12]
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cd5e:	e780      	b.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x182>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800cd60:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800cd64:	68c1      	ldr	r1, [r0, #12]
 800cd66:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800cd6a:	60c1      	str	r1, [r0, #12]
    if (ret == HAL_OK)
 800cd6c:	e6f6      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800cd6e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cd70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd74:	4313      	orrs	r3, r2
 800cd76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cd7a:	6823      	ldr	r3, [r4, #0]
}
 800cd7c:	e704      	b.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cd7e:	f7fd ff4d 	bl	800ac1c <HAL_GetTick>
 800cd82:	1b80      	subs	r0, r0, r6
 800cd84:	2802      	cmp	r0, #2
 800cd86:	f67f aec5 	bls.w	800cb14 <HAL_RCCEx_PeriphCLKConfig+0x34>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	2503      	movs	r5, #3
 800cd8e:	e6ef      	b.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x90>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800cd90:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 800cd94:	f026 4640 	bic.w	r6, r6, #3221225472	; 0xc0000000
 800cd98:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800cd9c:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cda0:	f021 5280 	bic.w	r2, r1, #268435456	; 0x10000000
 800cda4:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 800cda8:	4332      	orrs	r2, r6
 800cdaa:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
}
 800cdae:	e76b      	b.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cdb0:	6833      	ldr	r3, [r6, #0]
 800cdb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cdb6:	6033      	str	r3, [r6, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cdb8:	f7fd ff30 	bl	800ac1c <HAL_GetTick>
 800cdbc:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800cdbe:	6833      	ldr	r3, [r6, #0]
 800cdc0:	0118      	lsls	r0, r3, #4
 800cdc2:	d451      	bmi.n	800ce68 <HAL_RCCEx_PeriphCLKConfig+0x388>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800cdc4:	6933      	ldr	r3, [r6, #16]
 800cdc6:	6862      	ldr	r2, [r4, #4]
 800cdc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cdcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cdd0:	6133      	str	r3, [r6, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800cdd2:	6933      	ldr	r3, [r6, #16]
 800cdd4:	6922      	ldr	r2, [r4, #16]
 800cdd6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800cdda:	4313      	orrs	r3, r2
 800cddc:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cdde:	6833      	ldr	r3, [r6, #0]
 800cde0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cde4:	6033      	str	r3, [r6, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cde6:	f7fd ff19 	bl	800ac1c <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800cdea:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800cdee:	4606      	mov	r6, r0
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	0119      	lsls	r1, r3, #4
 800cdf4:	d444      	bmi.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0x3a0>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cdf6:	f7fd ff11 	bl	800ac1c <HAL_GetTick>
 800cdfa:	1b80      	subs	r0, r0, r6
 800cdfc:	2802      	cmp	r0, #2
 800cdfe:	d9f7      	bls.n	800cdf0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	2503      	movs	r5, #3
 800ce04:	e755      	b.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ce06:	6833      	ldr	r3, [r6, #0]
 800ce08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce0c:	6033      	str	r3, [r6, #0]
  tickstart = HAL_GetTick();
 800ce0e:	f7fd ff05 	bl	800ac1c <HAL_GetTick>
 800ce12:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800ce14:	6833      	ldr	r3, [r6, #0]
 800ce16:	011a      	lsls	r2, r3, #4
 800ce18:	d420      	bmi.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ce1a:	6933      	ldr	r3, [r6, #16]
 800ce1c:	6862      	ldr	r2, [r4, #4]
 800ce1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ce22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ce26:	6133      	str	r3, [r6, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800ce28:	6933      	ldr	r3, [r6, #16]
 800ce2a:	68e2      	ldr	r2, [r4, #12]
 800ce2c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800ce30:	4313      	orrs	r3, r2
 800ce32:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ce34:	6833      	ldr	r3, [r6, #0]
 800ce36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce3a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800ce3c:	f7fd feee 	bl	800ac1c <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800ce40:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800ce44:	4606      	mov	r6, r0
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	011b      	lsls	r3, r3, #4
 800ce4a:	d413      	bmi.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x394>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ce4c:	f7fd fee6 	bl	800ac1c <HAL_GetTick>
 800ce50:	1b80      	subs	r0, r0, r6
 800ce52:	2802      	cmp	r0, #2
 800ce54:	d9f7      	bls.n	800ce46 <HAL_RCCEx_PeriphCLKConfig+0x366>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ce56:	6823      	ldr	r3, [r4, #0]
 800ce58:	2503      	movs	r5, #3
 800ce5a:	e702      	b.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x182>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ce5c:	f7fd fede 	bl	800ac1c <HAL_GetTick>
 800ce60:	1bc0      	subs	r0, r0, r7
 800ce62:	2802      	cmp	r0, #2
 800ce64:	d9d6      	bls.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x334>
 800ce66:	e7f6      	b.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x376>
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ce68:	f7fd fed8 	bl	800ac1c <HAL_GetTick>
 800ce6c:	1bc0      	subs	r0, r0, r7
 800ce6e:	2802      	cmp	r0, #2
 800ce70:	d9a5      	bls.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ce72:	e7c5      	b.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x320>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	6962      	ldr	r2, [r4, #20]
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	613b      	str	r3, [r7, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ce7c:	6823      	ldr	r3, [r4, #0]
 800ce7e:	e6f0      	b.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x182>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	6962      	ldr	r2, [r4, #20]
 800ce84:	4313      	orrs	r3, r2
 800ce86:	613b      	str	r3, [r7, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ce88:	6823      	ldr	r3, [r4, #0]
 800ce8a:	e712      	b.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
          tickstart = HAL_GetTick();
 800ce8c:	f7fd fec6 	bl	800ac1c <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce90:	f241 3888 	movw	r8, #5000	; 0x1388
          tickstart = HAL_GetTick();
 800ce94:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ce96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce9a:	079b      	lsls	r3, r3, #30
 800ce9c:	f53f af45 	bmi.w	800cd2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cea0:	f7fd febc 	bl	800ac1c <HAL_GetTick>
 800cea4:	1b80      	subs	r0, r0, r6
 800cea6:	4540      	cmp	r0, r8
 800cea8:	d9f5      	bls.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ceaa:	6823      	ldr	r3, [r4, #0]
              ret = HAL_TIMEOUT;
 800ceac:	2503      	movs	r5, #3
 800ceae:	e66b      	b.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ceb0:	f7fd feb4 	bl	800ac1c <HAL_GetTick>
 800ceb4:	1b40      	subs	r0, r0, r5
 800ceb6:	2802      	cmp	r0, #2
 800ceb8:	f67f ae46 	bls.w	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800cebc:	e765      	b.n	800cd8a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800cebe:	bf00      	nop

0800cec0 <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800cec0:	2800      	cmp	r0, #0
 800cec2:	d070      	beq.n	800cfa6 <HAL_RTC_Init+0xe6>
{
 800cec4:	b570      	push	{r4, r5, r6, lr}
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800cec6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800ceca:	4604      	mov	r4, r0
 800cecc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d063      	beq.n	800cf9c <HAL_RTC_Init+0xdc>

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ced4:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ced6:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ced8:	2253      	movs	r2, #83	; 0x53
 800ceda:	21ca      	movs	r1, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cedc:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cee0:	6259      	str	r1, [r3, #36]	; 0x24
 800cee2:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cee4:	68da      	ldr	r2, [r3, #12]
 800cee6:	0650      	lsls	r0, r2, #25
 800cee8:	d540      	bpl.n	800cf6c <HAL_RTC_Init+0xac>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ceea:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ceec:	6862      	ldr	r2, [r4, #4]
 800ceee:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cef0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800cef4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800cef8:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cefa:	69a1      	ldr	r1, [r4, #24]
 800cefc:	6898      	ldr	r0, [r3, #8]
 800cefe:	432a      	orrs	r2, r5
 800cf00:	430a      	orrs	r2, r1
 800cf02:	4302      	orrs	r2, r0
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cf04:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cf06:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cf08:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800cf0a:	6919      	ldr	r1, [r3, #16]
 800cf0c:	68a0      	ldr	r0, [r4, #8]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cf0e:	69e2      	ldr	r2, [r4, #28]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800cf10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cf14:	6119      	str	r1, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800cf16:	68d9      	ldr	r1, [r3, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cf18:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800cf1a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cf1e:	60d9      	str	r1, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800cf20:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cf22:	f021 0103 	bic.w	r1, r1, #3
 800cf26:	64d9      	str	r1, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cf28:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cf2a:	4302      	orrs	r2, r0
 800cf2c:	430a      	orrs	r2, r1
 800cf2e:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800cf30:	689a      	ldr	r2, [r3, #8]
 800cf32:	0692      	lsls	r2, r2, #26
 800cf34:	d506      	bpl.n	800cf44 <HAL_RTC_Init+0x84>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf36:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY;
 800cf38:	2201      	movs	r2, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf3a:	6259      	str	r1, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800cf3c:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    return HAL_OK;
 800cf40:	2000      	movs	r0, #0
}
 800cf42:	bd70      	pop	{r4, r5, r6, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cf44:	68da      	ldr	r2, [r3, #12]
 800cf46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cf4a:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 800cf4c:	f7fd fe66 	bl	800ac1c <HAL_GetTick>
 800cf50:	4606      	mov	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cf52:	e005      	b.n	800cf60 <HAL_RTC_Init+0xa0>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cf54:	f7fd fe62 	bl	800ac1c <HAL_GetTick>
 800cf58:	1b80      	subs	r0, r0, r6
 800cf5a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cf5e:	d824      	bhi.n	800cfaa <HAL_RTC_Init+0xea>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cf60:	6823      	ldr	r3, [r4, #0]
 800cf62:	68dd      	ldr	r5, [r3, #12]
 800cf64:	f015 0520 	ands.w	r5, r5, #32
 800cf68:	d0f4      	beq.n	800cf54 <HAL_RTC_Init+0x94>
 800cf6a:	e7e4      	b.n	800cf36 <HAL_RTC_Init+0x76>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cf6c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf70:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cf72:	f7fd fe53 	bl	800ac1c <HAL_GetTick>
 800cf76:	4605      	mov	r5, r0
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cf78:	6823      	ldr	r3, [r4, #0]
 800cf7a:	68da      	ldr	r2, [r3, #12]
 800cf7c:	0651      	lsls	r1, r2, #25
 800cf7e:	d4b4      	bmi.n	800ceea <HAL_RTC_Init+0x2a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cf80:	f7fd fe4c 	bl	800ac1c <HAL_GetTick>
 800cf84:	1b40      	subs	r0, r0, r5
 800cf86:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cf8a:	d9f5      	bls.n	800cf78 <HAL_RTC_Init+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf8c:	6822      	ldr	r2, [r4, #0]
 800cf8e:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cf90:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf92:	6251      	str	r1, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cf94:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 800cf98:	2001      	movs	r0, #1
}
 800cf9a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800cf9c:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 800cfa0:	f7f5 f80a 	bl	8001fb8 <HAL_RTC_MspInit>
 800cfa4:	e796      	b.n	800ced4 <HAL_RTC_Init+0x14>
    return HAL_ERROR;
 800cfa6:	2001      	movs	r0, #1
}
 800cfa8:	4770      	bx	lr
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cfaa:	6822      	ldr	r2, [r4, #0]
 800cfac:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cfae:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cfb0:	6251      	str	r1, [r2, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cfb2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800cfb6:	f884 5020 	strb.w	r5, [r4, #32]
        return HAL_ERROR;
 800cfba:	2001      	movs	r0, #1
}
 800cfbc:	bd70      	pop	{r4, r5, r6, pc}
 800cfbe:	bf00      	nop

0800cfc0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cfc2:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 800cfc6:	2e20      	cmp	r6, #32
 800cfc8:	d141      	bne.n	800d04e <HAL_UART_Transmit_DMA+0x8e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cfca:	2900      	cmp	r1, #0
 800cfcc:	d03d      	beq.n	800d04a <HAL_UART_Transmit_DMA+0x8a>
 800cfce:	2a00      	cmp	r2, #0
 800cfd0:	d03b      	beq.n	800d04a <HAL_UART_Transmit_DMA+0x8a>
 800cfd2:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800cfd4:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 800cfd8:	2801      	cmp	r0, #1
 800cfda:	d038      	beq.n	800d04e <HAL_UART_Transmit_DMA+0x8e>
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 800cfdc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 800cfde:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfe2:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 800cfe4:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cfe6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfe8:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 800cfec:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cfee:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 800cff2:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cff6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 800cffa:	b190      	cbz	r0, 800d022 <HAL_UART_Transmit_DMA+0x62>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cffc:	f8df c064 	ldr.w	ip, [pc, #100]	; 800d064 <HAL_UART_Transmit_DMA+0xa4>

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d000:	6387      	str	r7, [r0, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d002:	4613      	mov	r3, r2
 800d004:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d006:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d00a:	f8df c05c 	ldr.w	ip, [pc, #92]	; 800d068 <HAL_UART_Transmit_DMA+0xa8>
 800d00e:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d012:	f8df c058 	ldr.w	ip, [pc, #88]	; 800d06c <HAL_UART_Transmit_DMA+0xac>
 800d016:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d01a:	3228      	adds	r2, #40	; 0x28
 800d01c:	f7fd ffd8 	bl	800afd0 <HAL_DMA_Start_IT>
 800d020:	b9b8      	cbnz	r0, 800d052 <HAL_UART_Transmit_DMA+0x92>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d022:	6822      	ldr	r2, [r4, #0]
 800d024:	2140      	movs	r1, #64	; 0x40

    __HAL_UNLOCK(huart);
 800d026:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d028:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 800d02a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d02e:	f102 0308 	add.w	r3, r2, #8
 800d032:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d03a:	f102 0008 	add.w	r0, r2, #8
 800d03e:	e840 3100 	strex	r1, r3, [r0]
 800d042:	2900      	cmp	r1, #0
 800d044:	d1f3      	bne.n	800d02e <HAL_UART_Transmit_DMA+0x6e>

    return HAL_OK;
 800d046:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800d048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800d04a:	2001      	movs	r0, #1
}
 800d04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800d04e:	2002      	movs	r0, #2
}
 800d050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d052:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800d054:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d058:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 800d05c:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 800d05e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 800d062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d064:	0800d071 	.word	0x0800d071
 800d068:	0800d0b9 	.word	0x0800d0b9
 800d06c:	0800d0c9 	.word	0x0800d0c9

0800d070 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d070:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d072:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d074:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f013 0320 	ands.w	r3, r3, #32
 800d07c:	d117      	bne.n	800d0ae <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800d07e:	6802      	ldr	r2, [r0, #0]
 800d080:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d084:	f102 0308 	add.w	r3, r2, #8
 800d088:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d08c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d090:	f102 0008 	add.w	r0, r2, #8
 800d094:	e840 3100 	strex	r1, r3, [r0]
 800d098:	2900      	cmp	r1, #0
 800d09a:	d1f3      	bne.n	800d084 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d09c:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d0a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a4:	e842 3100 	strex	r1, r3, [r2]
 800d0a8:	2900      	cmp	r1, #0
 800d0aa:	d1f7      	bne.n	800d09c <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d0ac:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800d0ae:	f7f4 fd41 	bl	8001b34 <HAL_UART_TxCpltCallback>
}
 800d0b2:	bd08      	pop	{r3, pc}

0800d0b4 <HAL_UART_TxHalfCpltCallback>:
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop

0800d0b8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d0b8:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d0ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d0bc:	f7ff fffa 	bl	800d0b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0c0:	bd08      	pop	{r3, pc}
 800d0c2:	bf00      	nop

0800d0c4 <HAL_UART_ErrorCallback>:
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop

0800d0c8 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0c8:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d0ca:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d0cc:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 800d0d0:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d0d2:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d0d6:	689a      	ldr	r2, [r3, #8]
 800d0d8:	0612      	lsls	r2, r2, #24
 800d0da:	d501      	bpl.n	800d0e0 <UART_DMAError+0x18>
 800d0dc:	2921      	cmp	r1, #33	; 0x21
 800d0de:	d00d      	beq.n	800d0fc <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d0e0:	689a      	ldr	r2, [r3, #8]
 800d0e2:	0652      	lsls	r2, r2, #25
 800d0e4:	d501      	bpl.n	800d0ea <UART_DMAError+0x22>
 800d0e6:	2c22      	cmp	r4, #34	; 0x22
 800d0e8:	d023      	beq.n	800d132 <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d0ea:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800d0ee:	f043 0310 	orr.w	r3, r3, #16
 800d0f2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d0f6:	f7ff ffe5 	bl	800d0c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0fa:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d102:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d106:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d10a:	e843 2100 	strex	r1, r2, [r3]
 800d10e:	2900      	cmp	r1, #0
 800d110:	d1f7      	bne.n	800d102 <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d112:	f103 0208 	add.w	r2, r3, #8
 800d116:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d11a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11e:	f103 0c08 	add.w	ip, r3, #8
 800d122:	e84c 2100 	strex	r1, r2, [ip]
 800d126:	2900      	cmp	r1, #0
 800d128:	d1f3      	bne.n	800d112 <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 800d12a:	2220      	movs	r2, #32
 800d12c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 800d130:	e7d6      	b.n	800d0e0 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 800d132:	2200      	movs	r2, #0
 800d134:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d138:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d13c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d140:	e843 2100 	strex	r1, r2, [r3]
 800d144:	2900      	cmp	r1, #0
 800d146:	d1f7      	bne.n	800d138 <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d148:	4c13      	ldr	r4, [pc, #76]	; (800d198 <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14a:	f103 0208 	add.w	r2, r3, #8
 800d14e:	e852 2f00 	ldrex	r2, [r2]
 800d152:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d154:	f103 0c08 	add.w	ip, r3, #8
 800d158:	e84c 2100 	strex	r1, r2, [ip]
 800d15c:	2900      	cmp	r1, #0
 800d15e:	d1f4      	bne.n	800d14a <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d160:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800d162:	2a01      	cmp	r2, #1
 800d164:	d006      	beq.n	800d174 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d166:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800d168:	2220      	movs	r2, #32
 800d16a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 800d16e:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d170:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800d172:	e7ba      	b.n	800d0ea <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d174:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d178:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d17c:	e843 2100 	strex	r1, r2, [r3]
 800d180:	2900      	cmp	r1, #0
 800d182:	d0f0      	beq.n	800d166 <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d184:	e853 2f00 	ldrex	r2, [r3]
 800d188:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d18c:	e843 2100 	strex	r1, r2, [r3]
 800d190:	2900      	cmp	r1, #0
 800d192:	d1ef      	bne.n	800d174 <UART_DMAError+0xac>
 800d194:	e7e7      	b.n	800d166 <UART_DMAError+0x9e>
 800d196:	bf00      	nop
 800d198:	effffffe 	.word	0xeffffffe

0800d19c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d19c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d19e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d1a6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d1aa:	f7ff ff8b 	bl	800d0c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1ae:	bd08      	pop	{r3, pc}

0800d1b0 <HAL_UARTEx_RxEventCallback>:
}
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop

0800d1b4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d1b4:	6803      	ldr	r3, [r0, #0]
 800d1b6:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d1b8:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 800d1bc:	ea12 0f0c 	tst.w	r2, ip
{
 800d1c0:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d1c2:	681d      	ldr	r5, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d1c4:	6899      	ldr	r1, [r3, #8]
{
 800d1c6:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800d1c8:	f000 80ea 	beq.w	800d3a0 <HAL_UART_IRQHandler+0x1ec>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d1cc:	4e9a      	ldr	r6, [pc, #616]	; (800d438 <HAL_UART_IRQHandler+0x284>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d1ce:	489b      	ldr	r0, [pc, #620]	; (800d43c <HAL_UART_IRQHandler+0x288>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d1d0:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d1d4:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d1d6:	ea5c 0600 	orrs.w	r6, ip, r0
 800d1da:	d155      	bne.n	800d288 <HAL_UART_IRQHandler+0xd4>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1dc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800d1de:	2801      	cmp	r0, #1
 800d1e0:	d022      	beq.n	800d228 <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d1e2:	02d0      	lsls	r0, r2, #11
 800d1e4:	d502      	bpl.n	800d1ec <HAL_UART_IRQHandler+0x38>
 800d1e6:	024e      	lsls	r6, r1, #9
 800d1e8:	f100 8103 	bmi.w	800d3f2 <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d1ec:	0610      	lsls	r0, r2, #24
 800d1ee:	d506      	bpl.n	800d1fe <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d1f0:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d1f4:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d1f8:	4301      	orrs	r1, r0
 800d1fa:	f040 80f2 	bne.w	800d3e2 <HAL_UART_IRQHandler+0x22e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d1fe:	0651      	lsls	r1, r2, #25
 800d200:	d534      	bpl.n	800d26c <HAL_UART_IRQHandler+0xb8>
 800d202:	066e      	lsls	r6, r5, #25
 800d204:	d532      	bpl.n	800d26c <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d206:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d20a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d20e:	e843 2100 	strex	r1, r2, [r3]
 800d212:	2900      	cmp	r1, #0
 800d214:	d1f7      	bne.n	800d206 <HAL_UART_IRQHandler+0x52>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d216:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d218:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800d21a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800d21e:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d220:	4620      	mov	r0, r4
 800d222:	f7f4 fc87 	bl	8001b34 <HAL_UART_TxCpltCallback>
}
 800d226:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800d228:	06d6      	lsls	r6, r2, #27
 800d22a:	d5da      	bpl.n	800d1e2 <HAL_UART_IRQHandler+0x2e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800d22c:	06e8      	lsls	r0, r5, #27
 800d22e:	d5d8      	bpl.n	800d1e2 <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d230:	2210      	movs	r2, #16
 800d232:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d234:	689a      	ldr	r2, [r3, #8]
 800d236:	0652      	lsls	r2, r2, #25
 800d238:	f140 8106 	bpl.w	800d448 <HAL_UART_IRQHandler+0x294>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d23c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d23e:	6801      	ldr	r1, [r0, #0]
 800d240:	684a      	ldr	r2, [r1, #4]
 800d242:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800d244:	2a00      	cmp	r2, #0
 800d246:	d0ee      	beq.n	800d226 <HAL_UART_IRQHandler+0x72>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800d248:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 800d24c:	4295      	cmp	r5, r2
 800d24e:	d9ea      	bls.n	800d226 <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 800d250:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d254:	680a      	ldr	r2, [r1, #0]
 800d256:	0696      	lsls	r6, r2, #26
 800d258:	f140 812b 	bpl.w	800d4b2 <HAL_UART_IRQHandler+0x2fe>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d25c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 800d260:	1a69      	subs	r1, r5, r1
 800d262:	4620      	mov	r0, r4
 800d264:	b289      	uxth	r1, r1
 800d266:	f7ff ffa3 	bl	800d1b0 <HAL_UARTEx_RxEventCallback>
}
 800d26a:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d26c:	0210      	lsls	r0, r2, #8
 800d26e:	d502      	bpl.n	800d276 <HAL_UART_IRQHandler+0xc2>
 800d270:	0069      	lsls	r1, r5, #1
 800d272:	f100 80db 	bmi.w	800d42c <HAL_UART_IRQHandler+0x278>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d276:	01d3      	lsls	r3, r2, #7
 800d278:	d5d5      	bpl.n	800d226 <HAL_UART_IRQHandler+0x72>
 800d27a:	2d00      	cmp	r5, #0
 800d27c:	dad3      	bge.n	800d226 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d27e:	4620      	mov	r0, r4
}
 800d280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d284:	f000 bba8 	b.w	800d9d8 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d288:	07d6      	lsls	r6, r2, #31
 800d28a:	d509      	bpl.n	800d2a0 <HAL_UART_IRQHandler+0xec>
 800d28c:	05ee      	lsls	r6, r5, #23
 800d28e:	d507      	bpl.n	800d2a0 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d290:	2601      	movs	r6, #1
 800d292:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d294:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800d298:	f046 0601 	orr.w	r6, r6, #1
 800d29c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2a0:	0796      	lsls	r6, r2, #30
 800d2a2:	f140 808f 	bpl.w	800d3c4 <HAL_UART_IRQHandler+0x210>
 800d2a6:	07ce      	lsls	r6, r1, #31
 800d2a8:	d50a      	bpl.n	800d2c0 <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d2aa:	2602      	movs	r6, #2
 800d2ac:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d2ae:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800d2b2:	f046 0604 	orr.w	r6, r6, #4
 800d2b6:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2ba:	0756      	lsls	r6, r2, #29
 800d2bc:	f100 8088 	bmi.w	800d3d0 <HAL_UART_IRQHandler+0x21c>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d2c0:	0716      	lsls	r6, r2, #28
 800d2c2:	d50b      	bpl.n	800d2dc <HAL_UART_IRQHandler+0x128>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d2c4:	f005 0620 	and.w	r6, r5, #32
 800d2c8:	4330      	orrs	r0, r6
 800d2ca:	d007      	beq.n	800d2dc <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d2cc:	2008      	movs	r0, #8
 800d2ce:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d2d0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800d2d4:	f040 0008 	orr.w	r0, r0, #8
 800d2d8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d2dc:	0510      	lsls	r0, r2, #20
 800d2de:	d50a      	bpl.n	800d2f6 <HAL_UART_IRQHandler+0x142>
 800d2e0:	016e      	lsls	r6, r5, #5
 800d2e2:	d508      	bpl.n	800d2f6 <HAL_UART_IRQHandler+0x142>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d2e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d2e8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d2ea:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800d2ee:	f040 0020 	orr.w	r0, r0, #32
 800d2f2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d2f6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	d093      	beq.n	800d226 <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d2fe:	0690      	lsls	r0, r2, #26
 800d300:	d50b      	bpl.n	800d31a <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d302:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d306:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800d30a:	ea55 0201 	orrs.w	r2, r5, r1
 800d30e:	d004      	beq.n	800d31a <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 800d310:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d312:	b112      	cbz	r2, 800d31a <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 800d314:	4620      	mov	r0, r4
 800d316:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d318:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800d31a:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d31e:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d320:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d324:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800d328:	4315      	orrs	r5, r2
 800d32a:	f000 80f3 	beq.w	800d514 <HAL_UART_IRQHandler+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d32e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d332:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d336:	e843 2100 	strex	r1, r2, [r3]
 800d33a:	2900      	cmp	r1, #0
 800d33c:	d1f7      	bne.n	800d32e <HAL_UART_IRQHandler+0x17a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d33e:	4840      	ldr	r0, [pc, #256]	; (800d440 <HAL_UART_IRQHandler+0x28c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d340:	f103 0208 	add.w	r2, r3, #8
 800d344:	e852 2f00 	ldrex	r2, [r2]
 800d348:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34a:	f103 0508 	add.w	r5, r3, #8
 800d34e:	e845 2100 	strex	r1, r2, [r5]
 800d352:	2900      	cmp	r1, #0
 800d354:	d1f4      	bne.n	800d340 <HAL_UART_IRQHandler+0x18c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d356:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800d358:	2a01      	cmp	r2, #1
 800d35a:	d052      	beq.n	800d402 <HAL_UART_IRQHandler+0x24e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d35c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800d35e:	2120      	movs	r1, #32
 800d360:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d364:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d366:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800d368:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d36a:	064a      	lsls	r2, r1, #25
 800d36c:	d55a      	bpl.n	800d424 <HAL_UART_IRQHandler+0x270>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d36e:	f103 0208 	add.w	r2, r3, #8
 800d372:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d37a:	f103 0008 	add.w	r0, r3, #8
 800d37e:	e840 2100 	strex	r1, r2, [r0]
 800d382:	2900      	cmp	r1, #0
 800d384:	d1f3      	bne.n	800d36e <HAL_UART_IRQHandler+0x1ba>
          if (huart->hdmarx != NULL)
 800d386:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d388:	2800      	cmp	r0, #0
 800d38a:	d04b      	beq.n	800d424 <HAL_UART_IRQHandler+0x270>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d38c:	4b2d      	ldr	r3, [pc, #180]	; (800d444 <HAL_UART_IRQHandler+0x290>)
 800d38e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d390:	f7fd feb2 	bl	800b0f8 <HAL_DMA_Abort_IT>
 800d394:	2800      	cmp	r0, #0
 800d396:	f43f af46 	beq.w	800d226 <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d39a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d39c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d39e:	e00e      	b.n	800d3be <HAL_UART_IRQHandler+0x20a>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d3a0:	0696      	lsls	r6, r2, #26
 800d3a2:	f57f af1b 	bpl.w	800d1dc <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d3a6:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d3aa:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 800d3ae:	ea56 060c 	orrs.w	r6, r6, ip
 800d3b2:	f43f af13 	beq.w	800d1dc <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 800d3b6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f43f af34 	beq.w	800d226 <HAL_UART_IRQHandler+0x72>
}
 800d3be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d3c2:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3c4:	0756      	lsls	r6, r2, #29
 800d3c6:	f57f af7b 	bpl.w	800d2c0 <HAL_UART_IRQHandler+0x10c>
 800d3ca:	07ce      	lsls	r6, r1, #31
 800d3cc:	f57f af78 	bpl.w	800d2c0 <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d3d0:	2604      	movs	r6, #4
 800d3d2:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3d4:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800d3d8:	f046 0602 	orr.w	r6, r6, #2
 800d3dc:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800d3e0:	e76e      	b.n	800d2c0 <HAL_UART_IRQHandler+0x10c>
    if (huart->TxISR != NULL)
 800d3e2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f43f af1e 	beq.w	800d226 <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 800d3ea:	4620      	mov	r0, r4
}
 800d3ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800d3f0:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d3f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800d3f6:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d3f8:	621a      	str	r2, [r3, #32]
}
 800d3fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800d3fe:	f000 bae9 	b.w	800d9d4 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d402:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d406:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d40a:	e843 2100 	strex	r1, r2, [r3]
 800d40e:	2900      	cmp	r1, #0
 800d410:	d0a4      	beq.n	800d35c <HAL_UART_IRQHandler+0x1a8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d412:	e853 2f00 	ldrex	r2, [r3]
 800d416:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41a:	e843 2100 	strex	r1, r2, [r3]
 800d41e:	2900      	cmp	r1, #0
 800d420:	d1ef      	bne.n	800d402 <HAL_UART_IRQHandler+0x24e>
 800d422:	e79b      	b.n	800d35c <HAL_UART_IRQHandler+0x1a8>
            HAL_UART_ErrorCallback(huart);
 800d424:	4620      	mov	r0, r4
 800d426:	f7ff fe4d 	bl	800d0c4 <HAL_UART_ErrorCallback>
}
 800d42a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d42c:	4620      	mov	r0, r4
}
 800d42e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d432:	f000 bad3 	b.w	800d9dc <HAL_UARTEx_TxFifoEmptyCallback>
 800d436:	bf00      	nop
 800d438:	04000120 	.word	0x04000120
 800d43c:	10000001 	.word	0x10000001
 800d440:	effffffe 	.word	0xeffffffe
 800d444:	0800d19d 	.word	0x0800d19d
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d448:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if (  (huart->RxXferCount > 0U)
 800d44c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800d450:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d452:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 800d454:	2a00      	cmp	r2, #0
 800d456:	f43f aee6 	beq.w	800d226 <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d45a:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800d45e:	1a51      	subs	r1, r2, r1
 800d460:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 800d462:	2900      	cmp	r1, #0
 800d464:	f43f aedf 	beq.w	800d226 <HAL_UART_IRQHandler+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d468:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d46c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d470:	e843 2000 	strex	r0, r2, [r3]
 800d474:	2800      	cmp	r0, #0
 800d476:	d1f7      	bne.n	800d468 <HAL_UART_IRQHandler+0x2b4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d478:	4d29      	ldr	r5, [pc, #164]	; (800d520 <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47a:	f103 0208 	add.w	r2, r3, #8
 800d47e:	e852 2f00 	ldrex	r2, [r2]
 800d482:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d484:	f103 0608 	add.w	r6, r3, #8
 800d488:	e846 2000 	strex	r0, r2, [r6]
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d1f4      	bne.n	800d47a <HAL_UART_IRQHandler+0x2c6>
        huart->RxState = HAL_UART_STATE_READY;
 800d490:	2220      	movs	r2, #32
 800d492:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800d496:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d498:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d49a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d49e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a2:	e843 2000 	strex	r0, r2, [r3]
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	d1f7      	bne.n	800d49a <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f7ff fe80 	bl	800d1b0 <HAL_UARTEx_RxEventCallback>
}
 800d4b0:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b2:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ba:	e843 2100 	strex	r1, r2, [r3]
 800d4be:	2900      	cmp	r1, #0
 800d4c0:	d1f7      	bne.n	800d4b2 <HAL_UART_IRQHandler+0x2fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c2:	f103 0208 	add.w	r2, r3, #8
 800d4c6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4ca:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ce:	f103 0508 	add.w	r5, r3, #8
 800d4d2:	e845 2100 	strex	r1, r2, [r5]
 800d4d6:	2900      	cmp	r1, #0
 800d4d8:	d1f3      	bne.n	800d4c2 <HAL_UART_IRQHandler+0x30e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4da:	f103 0208 	add.w	r2, r3, #8
 800d4de:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e6:	f103 0508 	add.w	r5, r3, #8
 800d4ea:	e845 2100 	strex	r1, r2, [r5]
 800d4ee:	2900      	cmp	r1, #0
 800d4f0:	d1f3      	bne.n	800d4da <HAL_UART_IRQHandler+0x326>
          huart->RxState = HAL_UART_STATE_READY;
 800d4f2:	2220      	movs	r2, #32
 800d4f4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4f8:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fa:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4fe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d502:	e843 2100 	strex	r1, r2, [r3]
 800d506:	2900      	cmp	r1, #0
 800d508:	d1f7      	bne.n	800d4fa <HAL_UART_IRQHandler+0x346>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d50a:	f7fd fdbb 	bl	800b084 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d50e:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 800d512:	e6a3      	b.n	800d25c <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 800d514:	4620      	mov	r0, r4
 800d516:	f7ff fdd5 	bl	800d0c4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d51a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 800d51e:	bd70      	pop	{r4, r5, r6, pc}
 800d520:	effffffe 	.word	0xeffffffe

0800d524 <UART_SetConfig>:
{
 800d524:	b538      	push	{r3, r4, r5, lr}
 800d526:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800d528:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d52a:	6882      	ldr	r2, [r0, #8]
 800d52c:	6900      	ldr	r0, [r0, #16]
 800d52e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d530:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d532:	4302      	orrs	r2, r0
 800d534:	430a      	orrs	r2, r1
 800d536:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d538:	4982      	ldr	r1, [pc, #520]	; (800d744 <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d53a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d53c:	4029      	ands	r1, r5
 800d53e:	430a      	orrs	r2, r1
 800d540:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d542:	685a      	ldr	r2, [r3, #4]
 800d544:	68e1      	ldr	r1, [r4, #12]
 800d546:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800d54a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d54c:	497e      	ldr	r1, [pc, #504]	; (800d748 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d54e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d550:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d552:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d554:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d556:	d041      	beq.n	800d5dc <UART_SetConfig+0xb8>
    tmpreg |= huart->Init.OneBitSampling;
 800d558:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d55a:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800d55e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800d562:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d564:	430a      	orrs	r2, r1
 800d566:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d56a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d56c:	f022 020f 	bic.w	r2, r2, #15
 800d570:	430a      	orrs	r2, r1
 800d572:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d574:	4a75      	ldr	r2, [pc, #468]	; (800d74c <UART_SetConfig+0x228>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d007      	beq.n	800d58a <UART_SetConfig+0x66>
        ret = HAL_ERROR;
 800d57a:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800d57c:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800d57e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 800d582:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800d586:	66a2      	str	r2, [r4, #104]	; 0x68
}
 800d588:	bd38      	pop	{r3, r4, r5, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800d58a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d58e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d592:	f003 0303 	and.w	r3, r3, #3
 800d596:	3b01      	subs	r3, #1
 800d598:	2b02      	cmp	r3, #2
 800d59a:	d96b      	bls.n	800d674 <UART_SetConfig+0x150>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d59c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d5a0:	f000 80b3 	beq.w	800d70a <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5a4:	f7ff fa5c 	bl	800ca60 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	f000 80a5 	beq.w	800d6f8 <UART_SetConfig+0x1d4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d5b0:	4a67      	ldr	r2, [pc, #412]	; (800d750 <UART_SetConfig+0x22c>)
 800d5b2:	6865      	ldr	r5, [r4, #4]
 800d5b4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5b8:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5bc:	8893      	ldrh	r3, [r2, #4]
 800d5be:	fbb0 f3f3 	udiv	r3, r0, r3
 800d5c2:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 800d5c6:	fbb3 f3f5 	udiv	r3, r3, r5
 800d5ca:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5cc:	f1a3 0210 	sub.w	r2, r3, #16
 800d5d0:	428a      	cmp	r2, r1
 800d5d2:	d8d2      	bhi.n	800d57a <UART_SetConfig+0x56>
        huart->Instance->BRR = usartdiv;
 800d5d4:	6822      	ldr	r2, [r4, #0]
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	60d3      	str	r3, [r2, #12]
 800d5da:	e7cf      	b.n	800d57c <UART_SetConfig+0x58>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5dc:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800d5e0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800d5e4:	430a      	orrs	r2, r1
 800d5e6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d5ec:	f022 020f 	bic.w	r2, r2, #15
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800d5f0:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800d5f4:	430a      	orrs	r2, r1
 800d5f6:	62da      	str	r2, [r3, #44]	; 0x2c
 800d5f8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800d5fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d604:	d07a      	beq.n	800d6fc <UART_SetConfig+0x1d8>
 800d606:	d80a      	bhi.n	800d61e <UART_SetConfig+0xfa>
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d04f      	beq.n	800d6ac <UART_SetConfig+0x188>
 800d60c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d610:	d1b3      	bne.n	800d57a <UART_SetConfig+0x56>
        pclk = HAL_RCC_GetSysClockFreq();
 800d612:	f7ff f987 	bl	800c924 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800d616:	2800      	cmp	r0, #0
 800d618:	d06e      	beq.n	800d6f8 <UART_SetConfig+0x1d4>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d61a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d61c:	e004      	b.n	800d628 <UART_SetConfig+0x104>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d61e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d622:	d1aa      	bne.n	800d57a <UART_SetConfig+0x56>
        pclk = (uint32_t) LSE_VALUE;
 800d624:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d628:	4b49      	ldr	r3, [pc, #292]	; (800d750 <UART_SetConfig+0x22c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d62a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d62c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800d630:	888a      	ldrh	r2, [r1, #4]
 800d632:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d636:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d63a:	4299      	cmp	r1, r3
 800d63c:	d89d      	bhi.n	800d57a <UART_SetConfig+0x56>
 800d63e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800d642:	d89a      	bhi.n	800d57a <UART_SetConfig+0x56>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d644:	2300      	movs	r3, #0
 800d646:	4619      	mov	r1, r3
 800d648:	f7f3 fbfc 	bl	8000e44 <__aeabi_uldivmod>
 800d64c:	0209      	lsls	r1, r1, #8
 800d64e:	0203      	lsls	r3, r0, #8
 800d650:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800d654:	0868      	lsrs	r0, r5, #1
 800d656:	1818      	adds	r0, r3, r0
 800d658:	462a      	mov	r2, r5
 800d65a:	f04f 0300 	mov.w	r3, #0
 800d65e:	f141 0100 	adc.w	r1, r1, #0
 800d662:	f7f3 fbef 	bl	8000e44 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d666:	4a3b      	ldr	r2, [pc, #236]	; (800d754 <UART_SetConfig+0x230>)
 800d668:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800d66c:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d66e:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d670:	d883      	bhi.n	800d57a <UART_SetConfig+0x56>
 800d672:	e7af      	b.n	800d5d4 <UART_SetConfig+0xb0>
 800d674:	4a36      	ldr	r2, [pc, #216]	; (800d750 <UART_SetConfig+0x22c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d676:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d67a:	5cd3      	ldrb	r3, [r2, r3]
 800d67c:	d048      	beq.n	800d710 <UART_SetConfig+0x1ec>
    switch (clocksource)
 800d67e:	3b01      	subs	r3, #1
 800d680:	2b07      	cmp	r3, #7
 800d682:	f63f af7a 	bhi.w	800d57a <UART_SetConfig+0x56>
 800d686:	a001      	add	r0, pc, #4	; (adr r0, 800d68c <UART_SetConfig+0x168>)
 800d688:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d68c:	0800d5a5 	.word	0x0800d5a5
 800d690:	0800d701 	.word	0x0800d701
 800d694:	0800d57b 	.word	0x0800d57b
 800d698:	0800d6b3 	.word	0x0800d6b3
 800d69c:	0800d57b 	.word	0x0800d57b
 800d6a0:	0800d57b 	.word	0x0800d57b
 800d6a4:	0800d57b 	.word	0x0800d57b
 800d6a8:	0800d705 	.word	0x0800d705
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6ac:	f7ff f998 	bl	800c9e0 <HAL_RCC_GetPCLK1Freq>
        break;
 800d6b0:	e7b1      	b.n	800d616 <UART_SetConfig+0xf2>
        pclk = HAL_RCC_GetSysClockFreq();
 800d6b2:	f7ff f937 	bl	800c924 <HAL_RCC_GetSysClockFreq>
        break;
 800d6b6:	e777      	b.n	800d5a8 <UART_SetConfig+0x84>
        pclk = HAL_RCC_GetSysClockFreq();
 800d6b8:	f7ff f934 	bl	800c924 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800d6bc:	b1e0      	cbz	r0, 800d6f8 <UART_SetConfig+0x1d4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d6c0:	4a23      	ldr	r2, [pc, #140]	; (800d750 <UART_SetConfig+0x22c>)
 800d6c2:	6865      	ldr	r5, [r4, #4]
 800d6c4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800d6c8:	086b      	lsrs	r3, r5, #1
 800d6ca:	8892      	ldrh	r2, [r2, #4]
 800d6cc:	fbb0 f0f2 	udiv	r0, r0, r2
 800d6d0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800d6d4:	fbb0 f0f5 	udiv	r0, r0, r5
 800d6d8:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6da:	f1a3 0110 	sub.w	r1, r3, #16
 800d6de:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800d6e2:	4291      	cmp	r1, r2
 800d6e4:	f63f af49 	bhi.w	800d57a <UART_SetConfig+0x56>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6e8:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 800d6ec:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6ee:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6f0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800d6f4:	4318      	orrs	r0, r3
 800d6f6:	60d0      	str	r0, [r2, #12]
 800d6f8:	2000      	movs	r0, #0
 800d6fa:	e73f      	b.n	800d57c <UART_SetConfig+0x58>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6fc:	4816      	ldr	r0, [pc, #88]	; (800d758 <UART_SetConfig+0x234>)
 800d6fe:	e793      	b.n	800d628 <UART_SetConfig+0x104>
        pclk = (uint32_t) HSI_VALUE;
 800d700:	4815      	ldr	r0, [pc, #84]	; (800d758 <UART_SetConfig+0x234>)
 800d702:	e756      	b.n	800d5b2 <UART_SetConfig+0x8e>
    switch (clocksource)
 800d704:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d708:	e753      	b.n	800d5b2 <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d70a:	f7ff f9a9 	bl	800ca60 <HAL_RCC_GetPCLK2Freq>
        break;
 800d70e:	e7d5      	b.n	800d6bc <UART_SetConfig+0x198>
    switch (clocksource)
 800d710:	3b01      	subs	r3, #1
 800d712:	2b07      	cmp	r3, #7
 800d714:	f63f af31 	bhi.w	800d57a <UART_SetConfig+0x56>
 800d718:	a501      	add	r5, pc, #4	; (adr r5, 800d720 <UART_SetConfig+0x1fc>)
 800d71a:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 800d71e:	bf00      	nop
 800d720:	0800d70b 	.word	0x0800d70b
 800d724:	0800d741 	.word	0x0800d741
 800d728:	0800d57b 	.word	0x0800d57b
 800d72c:	0800d6b9 	.word	0x0800d6b9
 800d730:	0800d57b 	.word	0x0800d57b
 800d734:	0800d57b 	.word	0x0800d57b
 800d738:	0800d57b 	.word	0x0800d57b
 800d73c:	0800d6c3 	.word	0x0800d6c3
        pclk = (uint32_t) HSI_VALUE;
 800d740:	4805      	ldr	r0, [pc, #20]	; (800d758 <UART_SetConfig+0x234>)
 800d742:	e7be      	b.n	800d6c2 <UART_SetConfig+0x19e>
 800d744:	cfff69f3 	.word	0xcfff69f3
 800d748:	40008000 	.word	0x40008000
 800d74c:	40013800 	.word	0x40013800
 800d750:	08023fa8 	.word	0x08023fa8
 800d754:	000ffcff 	.word	0x000ffcff
 800d758:	00f42400 	.word	0x00f42400

0800d75c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d75c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d75e:	07da      	lsls	r2, r3, #31
{
 800d760:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d762:	d506      	bpl.n	800d772 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d764:	6801      	ldr	r1, [r0, #0]
 800d766:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800d768:	684a      	ldr	r2, [r1, #4]
 800d76a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d76e:	4322      	orrs	r2, r4
 800d770:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d772:	079c      	lsls	r4, r3, #30
 800d774:	d506      	bpl.n	800d784 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d776:	6801      	ldr	r1, [r0, #0]
 800d778:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800d77a:	684a      	ldr	r2, [r1, #4]
 800d77c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d780:	4322      	orrs	r2, r4
 800d782:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d784:	0759      	lsls	r1, r3, #29
 800d786:	d506      	bpl.n	800d796 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d788:	6801      	ldr	r1, [r0, #0]
 800d78a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800d78c:	684a      	ldr	r2, [r1, #4]
 800d78e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d792:	4322      	orrs	r2, r4
 800d794:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d796:	071a      	lsls	r2, r3, #28
 800d798:	d506      	bpl.n	800d7a8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d79a:	6801      	ldr	r1, [r0, #0]
 800d79c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800d79e:	684a      	ldr	r2, [r1, #4]
 800d7a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d7a4:	4322      	orrs	r2, r4
 800d7a6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d7a8:	06dc      	lsls	r4, r3, #27
 800d7aa:	d506      	bpl.n	800d7ba <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d7ac:	6801      	ldr	r1, [r0, #0]
 800d7ae:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d7b0:	688a      	ldr	r2, [r1, #8]
 800d7b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d7b6:	4322      	orrs	r2, r4
 800d7b8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d7ba:	0699      	lsls	r1, r3, #26
 800d7bc:	d506      	bpl.n	800d7cc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d7be:	6801      	ldr	r1, [r0, #0]
 800d7c0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800d7c2:	688a      	ldr	r2, [r1, #8]
 800d7c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d7c8:	4322      	orrs	r2, r4
 800d7ca:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d7cc:	065a      	lsls	r2, r3, #25
 800d7ce:	d509      	bpl.n	800d7e4 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d7d0:	6801      	ldr	r1, [r0, #0]
 800d7d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800d7d4:	684a      	ldr	r2, [r1, #4]
 800d7d6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800d7da:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d7dc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d7e0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d7e2:	d00b      	beq.n	800d7fc <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7e4:	061b      	lsls	r3, r3, #24
 800d7e6:	d506      	bpl.n	800d7f6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7e8:	6802      	ldr	r2, [r0, #0]
 800d7ea:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800d7ec:	6853      	ldr	r3, [r2, #4]
 800d7ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800d7f2:	430b      	orrs	r3, r1
 800d7f4:	6053      	str	r3, [r2, #4]
}
 800d7f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7fa:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d7fc:	684a      	ldr	r2, [r1, #4]
 800d7fe:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800d800:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800d804:	4322      	orrs	r2, r4
 800d806:	604a      	str	r2, [r1, #4]
 800d808:	e7ec      	b.n	800d7e4 <UART_AdvFeatureConfig+0x88>
 800d80a:	bf00      	nop

0800d80c <UART_WaitOnFlagUntilTimeout>:
{
 800d80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d810:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d814:	6804      	ldr	r4, [r0, #0]
{
 800d816:	4607      	mov	r7, r0
 800d818:	460e      	mov	r6, r1
 800d81a:	4615      	mov	r5, r2
 800d81c:	4699      	mov	r9, r3
 800d81e:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d822:	d10a      	bne.n	800d83a <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d824:	69e3      	ldr	r3, [r4, #28]
 800d826:	ea36 0303 	bics.w	r3, r6, r3
 800d82a:	bf0c      	ite	eq
 800d82c:	2301      	moveq	r3, #1
 800d82e:	2300      	movne	r3, #0
 800d830:	429d      	cmp	r5, r3
 800d832:	d0f7      	beq.n	800d824 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800d834:	2000      	movs	r0, #0
}
 800d836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d83a:	69e3      	ldr	r3, [r4, #28]
 800d83c:	ea36 0303 	bics.w	r3, r6, r3
 800d840:	bf0c      	ite	eq
 800d842:	2301      	moveq	r3, #1
 800d844:	2300      	movne	r3, #0
 800d846:	42ab      	cmp	r3, r5
 800d848:	d1f4      	bne.n	800d834 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d84a:	f7fd f9e7 	bl	800ac1c <HAL_GetTick>
 800d84e:	eba0 0009 	sub.w	r0, r0, r9
 800d852:	4540      	cmp	r0, r8
 800d854:	d833      	bhi.n	800d8be <UART_WaitOnFlagUntilTimeout+0xb2>
 800d856:	f1b8 0f00 	cmp.w	r8, #0
 800d85a:	d030      	beq.n	800d8be <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d85c:	683c      	ldr	r4, [r7, #0]
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	0759      	lsls	r1, r3, #29
 800d862:	4622      	mov	r2, r4
 800d864:	d5db      	bpl.n	800d81e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d866:	69e3      	ldr	r3, [r4, #28]
 800d868:	051b      	lsls	r3, r3, #20
 800d86a:	d5d8      	bpl.n	800d81e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d86c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d870:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d872:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d876:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87a:	e844 3100 	strex	r1, r3, [r4]
 800d87e:	b139      	cbz	r1, 800d890 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d880:	e852 3f00 	ldrex	r3, [r2]
 800d884:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d888:	e842 3100 	strex	r1, r3, [r2]
 800d88c:	2900      	cmp	r1, #0
 800d88e:	d1f7      	bne.n	800d880 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d890:	f102 0308 	add.w	r3, r2, #8
 800d894:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d898:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89c:	f102 0008 	add.w	r0, r2, #8
 800d8a0:	e840 3100 	strex	r1, r3, [r0]
 800d8a4:	2900      	cmp	r1, #0
 800d8a6:	d1f3      	bne.n	800d890 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800d8a8:	2320      	movs	r3, #32
 800d8aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800d8ae:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800d8b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800d8b6:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d8b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800d8bc:	e7bb      	b.n	800d836 <UART_WaitOnFlagUntilTimeout+0x2a>
 800d8be:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c0:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d8c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c8:	e842 3100 	strex	r1, r3, [r2]
 800d8cc:	2900      	cmp	r1, #0
 800d8ce:	d1f7      	bne.n	800d8c0 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d0:	f102 0308 	add.w	r3, r2, #8
 800d8d4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8dc:	f102 0008 	add.w	r0, r2, #8
 800d8e0:	e840 3100 	strex	r1, r3, [r0]
 800d8e4:	2900      	cmp	r1, #0
 800d8e6:	d1f3      	bne.n	800d8d0 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800d8e8:	2320      	movs	r3, #32
 800d8ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800d8ee:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800d8f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800d8f6:	2003      	movs	r0, #3
 800d8f8:	e79d      	b.n	800d836 <UART_WaitOnFlagUntilTimeout+0x2a>
 800d8fa:	bf00      	nop

0800d8fc <HAL_UART_Init>:
  if (huart == NULL)
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d066      	beq.n	800d9ce <HAL_UART_Init+0xd2>
{
 800d900:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800d902:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800d906:	b082      	sub	sp, #8
 800d908:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d04c      	beq.n	800d9a8 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800d90e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d910:	2324      	movs	r3, #36	; 0x24
 800d912:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800d916:	6813      	ldr	r3, [r2, #0]
 800d918:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d91c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800d91e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d920:	f7ff fe00 	bl	800d524 <UART_SetConfig>
 800d924:	2801      	cmp	r0, #1
 800d926:	d03c      	beq.n	800d9a2 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d928:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d135      	bne.n	800d99a <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d92e:	6823      	ldr	r3, [r4, #0]
 800d930:	6859      	ldr	r1, [r3, #4]
 800d932:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800d936:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d938:	6899      	ldr	r1, [r3, #8]
 800d93a:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800d93e:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800d940:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d942:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 800d944:	f041 0101 	orr.w	r1, r1, #1
 800d948:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d94a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800d94e:	f7fd f965 	bl	800ac1c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d952:	6823      	ldr	r3, [r4, #0]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800d958:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d95a:	d40e      	bmi.n	800d97a <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	075b      	lsls	r3, r3, #29
 800d960:	d427      	bmi.n	800d9b2 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d962:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800d964:	2220      	movs	r2, #32
 800d966:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800d96a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800d96e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 800d972:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d974:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800d976:	b002      	add	sp, #8
 800d978:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d97a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	462a      	mov	r2, r5
 800d982:	4603      	mov	r3, r0
 800d984:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d988:	4620      	mov	r0, r4
 800d98a:	f7ff ff3f 	bl	800d80c <UART_WaitOnFlagUntilTimeout>
 800d98e:	b9e0      	cbnz	r0, 800d9ca <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d990:	6823      	ldr	r3, [r4, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	075b      	lsls	r3, r3, #29
 800d996:	d40c      	bmi.n	800d9b2 <HAL_UART_Init+0xb6>
 800d998:	e7e3      	b.n	800d962 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800d99a:	4620      	mov	r0, r4
 800d99c:	f7ff fede 	bl	800d75c <UART_AdvFeatureConfig>
 800d9a0:	e7c5      	b.n	800d92e <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800d9a2:	2001      	movs	r0, #1
}
 800d9a4:	b002      	add	sp, #8
 800d9a6:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800d9a8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800d9ac:	f7f4 fa5e 	bl	8001e6c <HAL_UART_MspInit>
 800d9b0:	e7ad      	b.n	800d90e <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d9b6:	9300      	str	r3, [sp, #0]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	4633      	mov	r3, r6
 800d9bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	f7ff ff23 	bl	800d80c <UART_WaitOnFlagUntilTimeout>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d0cb      	beq.n	800d962 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800d9ca:	2003      	movs	r0, #3
 800d9cc:	e7d3      	b.n	800d976 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800d9ce:	2001      	movs	r0, #1
}
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop

0800d9d4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d9d4:	4770      	bx	lr
 800d9d6:	bf00      	nop

0800d9d8 <HAL_UARTEx_RxFifoFullCallback>:
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop

0800d9dc <HAL_UARTEx_TxFifoEmptyCallback>:
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop

0800d9e0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9e0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d017      	beq.n	800da18 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9e8:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d9ea:	2324      	movs	r3, #36	; 0x24
{
 800d9ec:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800d9ee:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9f2:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9f4:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d9f6:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800d9f8:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d9fc:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800da00:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800da02:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da04:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da06:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800da0a:	2220      	movs	r2, #32
 800da0c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 800da10:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800da14:	4618      	mov	r0, r3
}
 800da16:	4770      	bx	lr
  __HAL_LOCK(huart);
 800da18:	2002      	movs	r0, #2
}
 800da1a:	4770      	bx	lr

0800da1c <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da1c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800da20:	2a01      	cmp	r2, #1
 800da22:	d035      	beq.n	800da90 <HAL_UARTEx_SetTxFifoThreshold+0x74>

  huart->gState = HAL_UART_STATE_BUSY;
 800da24:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da26:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800da28:	2024      	movs	r0, #36	; 0x24
{
 800da2a:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800da2c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da30:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da32:	6810      	ldr	r0, [r2, #0]
 800da34:	f020 0001 	bic.w	r0, r0, #1
 800da38:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800da3a:	6890      	ldr	r0, [r2, #8]
 800da3c:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800da40:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da42:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800da44:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da46:	b300      	cbz	r0, 800da8a <HAL_UARTEx_SetTxFifoThreshold+0x6e>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da48:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da4a:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da4c:	f3c5 6c42 	ubfx	ip, r5, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da50:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da52:	4d10      	ldr	r5, [pc, #64]	; (800da94 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
 800da54:	5c68      	ldrb	r0, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800da56:	4429      	add	r1, r5
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da58:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800da5a:	7a09      	ldrb	r1, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da5c:	fbb0 f0f1 	udiv	r0, r0, r1
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da60:	f815 100c 	ldrb.w	r1, [r5, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800da64:	4465      	add	r5, ip
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da66:	00c9      	lsls	r1, r1, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800da68:	7a2d      	ldrb	r5, [r5, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da6a:	fbb1 f1f5 	udiv	r1, r1, r5
 800da6e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800da72:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800da74:	2520      	movs	r5, #32
 800da76:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da7a:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800da7c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800da80:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800da82:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800da86:	bc30      	pop	{r4, r5}
 800da88:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800da8a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800da8c:	4608      	mov	r0, r1
 800da8e:	e7ee      	b.n	800da6e <HAL_UARTEx_SetTxFifoThreshold+0x52>
  __HAL_LOCK(huart);
 800da90:	2002      	movs	r0, #2
}
 800da92:	4770      	bx	lr
 800da94:	08023fc4 	.word	0x08023fc4

0800da98 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800da98:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800da9c:	2a01      	cmp	r2, #1
 800da9e:	d035      	beq.n	800db0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
  huart->gState = HAL_UART_STATE_BUSY;
 800daa0:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800daa2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800daa4:	2024      	movs	r0, #36	; 0x24
{
 800daa6:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800daa8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800daac:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800daae:	6810      	ldr	r0, [r2, #0]
 800dab0:	f020 0001 	bic.w	r0, r0, #1
 800dab4:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dab6:	6890      	ldr	r0, [r2, #8]
 800dab8:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800dabc:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dabe:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dac0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dac2:	b300      	cbz	r0, 800db06 <HAL_UARTEx_SetRxFifoThreshold+0x6e>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dac4:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dac6:	6891      	ldr	r1, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dac8:	f3c5 6c42 	ubfx	ip, r5, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dacc:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dace:	4d10      	ldr	r5, [pc, #64]	; (800db10 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
 800dad0:	5c68      	ldrb	r0, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800dad2:	4429      	add	r1, r5
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dad4:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dad6:	7a09      	ldrb	r1, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dad8:	fbb0 f0f1 	udiv	r0, r0, r1
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dadc:	f815 100c 	ldrb.w	r1, [r5, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800dae0:	4465      	add	r5, ip
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dae2:	00c9      	lsls	r1, r1, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dae4:	7a2d      	ldrb	r5, [r5, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dae6:	fbb1 f1f5 	udiv	r1, r1, r5
 800daea:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800daee:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800daf0:	2520      	movs	r5, #32
 800daf2:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800daf6:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800daf8:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800dafc:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800dafe:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800db02:	bc30      	pop	{r4, r5}
 800db04:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800db06:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800db08:	4608      	mov	r0, r1
 800db0a:	e7ee      	b.n	800daea <HAL_UARTEx_SetRxFifoThreshold+0x52>
  __HAL_LOCK(huart);
 800db0c:	2002      	movs	r0, #2
}
 800db0e:	4770      	bx	lr
 800db10:	08023fc4 	.word	0x08023fc4

0800db14 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800db14:	b530      	push	{r4, r5, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 800db16:	2400      	movs	r4, #0
{
 800db18:	b089      	sub	sp, #36	; 0x24
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800db1a:	4621      	mov	r1, r4
 800db1c:	2218      	movs	r2, #24
 800db1e:	a802      	add	r0, sp, #8
  rq.ogf = 0x3f;
 800db20:	4d0a      	ldr	r5, [pc, #40]	; (800db4c <aci_gap_set_non_discoverable+0x38>)
  tBleStatus status = 0;
 800db22:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800db26:	f001 f89b 	bl	800ec60 <Osal_MemSet>
  rq.ocf = 0x081;
  rq.rparam = &status;
 800db2a:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 800db2e:	2301      	movs	r3, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 800db30:	4621      	mov	r1, r4
 800db32:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800db34:	e9cd 2306 	strd	r2, r3, [sp, #24]
  rq.ogf = 0x3f;
 800db38:	9502      	str	r5, [sp, #8]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800db3a:	f000 fbf3 	bl	800e324 <hci_send_req>
 800db3e:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 800db40:	bfac      	ite	ge
 800db42:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800db46:	20ff      	movlt	r0, #255	; 0xff
}
 800db48:	b009      	add	sp, #36	; 0x24
 800db4a:	bd30      	pop	{r4, r5, pc}
 800db4c:	0081003f 	.word	0x0081003f

0800db50 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800db50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db54:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
 800db56:	2700      	movs	r7, #0
{
 800db58:	f89d 4154 	ldrb.w	r4, [sp, #340]	; 0x154
  index_input += 1;
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
  index_input += 2;
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
  index_input += 2;
  cp0->Own_Address_Type = Own_Address_Type;
 800db5c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
{
 800db60:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
 800db64:	f89d 615c 	ldrb.w	r6, [sp, #348]	; 0x15c
  index_input += 1;
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800db68:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
{
 800db6c:	4613      	mov	r3, r2
  index_input += 1;
  cp0->Local_Name_Length = Local_Name_Length;
  index_input += 1;
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800db6e:	4622      	mov	r2, r4
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800db70:	f8ad 302b 	strh.w	r3, [sp, #43]	; 0x2b
    index_input += Local_Name_Length;
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
    }
    index_input += 1;
 800db74:	f102 0309 	add.w	r3, r2, #9
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800db78:	f102 0908 	add.w	r9, r2, #8
  cp0->Local_Name_Length = Local_Name_Length;
 800db7c:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
    index_input += Service_Uuid_length;
 800db80:	4433      	add	r3, r6
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800db82:	ac0a      	add	r4, sp, #40	; 0x28
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800db84:	f8ad 1029 	strh.w	r1, [sp, #41]	; 0x29
  cp0->Advertising_Type = Advertising_Type;
 800db88:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800db8c:	9956      	ldr	r1, [sp, #344]	; 0x158
    index_input += Service_Uuid_length;
 800db8e:	9301      	str	r3, [sp, #4]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800db90:	f106 0509 	add.w	r5, r6, #9
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800db94:	eb04 0309 	add.w	r3, r4, r9
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800db98:	a80c      	add	r0, sp, #48	; 0x30
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800db9a:	4415      	add	r5, r2
{
 800db9c:	f8bd b164 	ldrh.w	fp, [sp, #356]	; 0x164
 800dba0:	f8bd a168 	ldrh.w	sl, [sp, #360]	; 0x168
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800dba4:	9300      	str	r3, [sp, #0]
  tBleStatus status = 0;
 800dba6:	f88d 700f 	strb.w	r7, [sp, #15]
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800dbaa:	f001 f857 	bl	800ec5c <Osal_MemCpy>
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800dbae:	9b00      	ldr	r3, [sp, #0]
 800dbb0:	9958      	ldr	r1, [sp, #352]	; 0x160
      cp1->Service_Uuid_length = Service_Uuid_length;
 800dbb2:	f804 6009 	strb.w	r6, [r4, r9]
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800dbb6:	4632      	mov	r2, r6
 800dbb8:	1c58      	adds	r0, r3, #1
 800dbba:	f001 f84f 	bl	800ec5c <Osal_MemCpy>
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800dbbe:	f824 b005 	strh.w	fp, [r4, r5]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800dbc2:	4425      	add	r5, r4
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
    }
    index_input += 2;
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dbc4:	4639      	mov	r1, r7
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800dbc6:	f8a5 a002 	strh.w	sl, [r5, #2]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dbca:	2218      	movs	r2, #24
 800dbcc:	a804      	add	r0, sp, #16
 800dbce:	f001 f847 	bl	800ec60 <Osal_MemSet>
    index_input += 2;
 800dbd2:	9b01      	ldr	r3, [sp, #4]
  rq.ogf = 0x3f;
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
 800dbd4:	9406      	str	r4, [sp, #24]
  tBleStatus status = 0;
 800dbd6:	f10d 080f 	add.w	r8, sp, #15
    index_input += 2;
 800dbda:	3304      	adds	r3, #4
  rq.clen = index_input;
  rq.rparam = &status;
 800dbdc:	e9cd 3807 	strd	r3, r8, [sp, #28]
  rq.rlen = 1;
 800dbe0:	2201      	movs	r2, #1
  rq.ogf = 0x3f;
 800dbe2:	4b07      	ldr	r3, [pc, #28]	; (800dc00 <aci_gap_set_discoverable+0xb0>)
  rq.rlen = 1;
 800dbe4:	9209      	str	r2, [sp, #36]	; 0x24
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dbe6:	4639      	mov	r1, r7
 800dbe8:	a804      	add	r0, sp, #16
  rq.ogf = 0x3f;
 800dbea:	9304      	str	r3, [sp, #16]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dbec:	f000 fb9a 	bl	800e324 <hci_send_req>
 800dbf0:	42b8      	cmp	r0, r7
    return BLE_STATUS_TIMEOUT;
  return status;
 800dbf2:	bfac      	ite	ge
 800dbf4:	f89d 000f 	ldrbge.w	r0, [sp, #15]
    return BLE_STATUS_TIMEOUT;
 800dbf8:	20ff      	movlt	r0, #255	; 0xff
}
 800dbfa:	b04b      	add	sp, #300	; 0x12c
 800dbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc00:	0083003f 	.word	0x0083003f

0800dc04 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800dc04:	b570      	push	{r4, r5, r6, lr}
 800dc06:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800dc08:	2400      	movs	r4, #0
  int index_input = 0;
  cp0->IO_Capability = IO_Capability;
 800dc0a:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc0e:	2218      	movs	r2, #24
 800dc10:	4621      	mov	r1, r4
 800dc12:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 800dc14:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc18:	f001 f822 	bl	800ec60 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dc1c:	4b0a      	ldr	r3, [pc, #40]	; (800dc48 <aci_gap_set_io_capability+0x44>)
 800dc1e:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 800dc20:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x085;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800dc24:	2301      	movs	r3, #1
  cp0->IO_Capability = IO_Capability;
 800dc26:	ae08      	add	r6, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc28:	4621      	mov	r1, r4
 800dc2a:	a802      	add	r0, sp, #8
  rq.clen = index_input;
 800dc2c:	e9cd 6304 	strd	r6, r3, [sp, #16]
  rq.rlen = 1;
 800dc30:	e9cd 5306 	strd	r5, r3, [sp, #24]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc34:	f000 fb76 	bl	800e324 <hci_send_req>
 800dc38:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 800dc3a:	bfac      	ite	ge
 800dc3c:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800dc40:	20ff      	movlt	r0, #255	; 0xff
}
 800dc42:	b048      	add	sp, #288	; 0x120
 800dc44:	bd70      	pop	{r4, r5, r6, pc}
 800dc46:	bf00      	nop
 800dc48:	0085003f 	.word	0x0085003f

0800dc4c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800dc4c:	b570      	push	{r4, r5, r6, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800dc4e:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->Bonding_Mode = Bonding_Mode;
 800dc50:	4635      	mov	r5, r6
 800dc52:	f360 0507 	bfi	r5, r0, #0, #8
{
 800dc56:	b0c8      	sub	sp, #288	; 0x120
  cp0->Bonding_Mode = Bonding_Mode;
 800dc58:	f361 250f 	bfi	r5, r1, #8, #8
 800dc5c:	f362 4517 	bfi	r5, r2, #16, #8
 800dc60:	f363 651f 	bfi	r5, r3, #24, #8
{
 800dc64:	f89d 3134 	ldrb.w	r3, [sp, #308]	; 0x134
  index_input += 1;
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
  index_input += 1;
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
  index_input += 1;
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800dc68:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
{
 800dc6c:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
  index_input += 1;
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800dc70:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
{
 800dc74:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800dc76:	f89d 4130 	ldrb.w	r4, [sp, #304]	; 0x130
  index_input += 1;
  cp0->Fixed_Pin = Fixed_Pin;
 800dc7a:	f8cd 3027 	str.w	r3, [sp, #39]	; 0x27
  index_input += 4;
  cp0->Identity_Address_Type = Identity_Address_Type;
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc7e:	2218      	movs	r2, #24
{
 800dc80:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800dc84:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc88:	4631      	mov	r1, r6
 800dc8a:	a802      	add	r0, sp, #8
  cp0->Bonding_Mode = Bonding_Mode;
 800dc8c:	9508      	str	r5, [sp, #32]
  cp0->Identity_Address_Type = Identity_Address_Type;
 800dc8e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  tBleStatus status = 0;
 800dc92:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc96:	f000 ffe3 	bl	800ec60 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dc9a:	4b0b      	ldr	r3, [pc, #44]	; (800dcc8 <aci_gap_set_authentication_requirement+0x7c>)
 800dc9c:	9302      	str	r3, [sp, #8]
  cp0->Bonding_Mode = Bonding_Mode;
 800dc9e:	ac08      	add	r4, sp, #32
  rq.ocf = 0x086;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800dca0:	230c      	movs	r3, #12
 800dca2:	e9cd 4304 	strd	r4, r3, [sp, #16]
  tBleStatus status = 0;
 800dca6:	f10d 0507 	add.w	r5, sp, #7
  rq.rparam = &status;
  rq.rlen = 1;
 800dcaa:	2301      	movs	r3, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dcac:	4631      	mov	r1, r6
 800dcae:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800dcb0:	e9cd 5306 	strd	r5, r3, [sp, #24]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dcb4:	f000 fb36 	bl	800e324 <hci_send_req>
 800dcb8:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  return status;
 800dcba:	bfac      	ite	ge
 800dcbc:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800dcc0:	20ff      	movlt	r0, #255	; 0xff
}
 800dcc2:	b048      	add	sp, #288	; 0x120
 800dcc4:	bd70      	pop	{r4, r5, r6, pc}
 800dcc6:	bf00      	nop
 800dcc8:	0086003f 	.word	0x0086003f

0800dccc <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800dccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd0:	b0c8      	sub	sp, #288	; 0x120
 800dcd2:	4607      	mov	r7, r0
 800dcd4:	460e      	mov	r6, r1
 800dcd6:	4615      	mov	r5, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800dcd8:	2100      	movs	r1, #0
 800dcda:	2207      	movs	r2, #7
 800dcdc:	4668      	mov	r0, sp
{
 800dcde:	4698      	mov	r8, r3
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800dce0:	f000 ffbe 	bl	800ec60 <Osal_MemSet>
  index_input += 1;
  cp0->privacy_enabled = privacy_enabled;
  index_input += 1;
  cp0->device_name_char_len = device_name_char_len;
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dce4:	2218      	movs	r2, #24
 800dce6:	2100      	movs	r1, #0
 800dce8:	a802      	add	r0, sp, #8
  cp0->Role = Role;
 800dcea:	f88d 7020 	strb.w	r7, [sp, #32]
  cp0->privacy_enabled = privacy_enabled;
 800dcee:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
  cp0->device_name_char_len = device_name_char_len;
 800dcf2:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dcf6:	f000 ffb3 	bl	800ec60 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dcfa:	4b16      	ldr	r3, [pc, #88]	; (800dd54 <aci_gap_init+0x88>)
 800dcfc:	9302      	str	r3, [sp, #8]
  cp0->Role = Role;
 800dcfe:	ac08      	add	r4, sp, #32
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800dd00:	2303      	movs	r3, #3
 800dd02:	e9cd 4304 	strd	r4, r3, [sp, #16]
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd06:	2100      	movs	r1, #0
  rq.rlen = sizeof(resp);
 800dd08:	2307      	movs	r3, #7
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd0a:	a802      	add	r0, sp, #8
  rq.rparam = &resp;
 800dd0c:	f8cd d018 	str.w	sp, [sp, #24]
  rq.rlen = sizeof(resp);
 800dd10:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd12:	f000 fb07 	bl	800e324 <hci_send_req>
 800dd16:	2800      	cmp	r0, #0
 800dd18:	db17      	blt.n	800dd4a <aci_gap_init+0x7e>
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
 800dd1a:	f89d 0000 	ldrb.w	r0, [sp]
 800dd1e:	b988      	cbnz	r0, 800dd44 <aci_gap_init+0x78>
    return resp.Status;
  *Service_Handle = resp.Service_Handle;
 800dd20:	9b00      	ldr	r3, [sp, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800dd22:	f89d 2003 	ldrb.w	r2, [sp, #3]
  *Service_Handle = resp.Service_Handle;
 800dd26:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800dd2a:	f8a8 3000 	strh.w	r3, [r8]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800dd2e:	f89d 1004 	ldrb.w	r1, [sp, #4]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800dd32:	9b01      	ldr	r3, [sp, #4]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800dd34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800dd38:	994e      	ldr	r1, [sp, #312]	; 0x138
 800dd3a:	800a      	strh	r2, [r1, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800dd3c:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 800dd3e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800dd42:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800dd44:	b048      	add	sp, #288	; 0x120
 800dd46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800dd4a:	20ff      	movs	r0, #255	; 0xff
}
 800dd4c:	b048      	add	sp, #288	; 0x120
 800dd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd52:	bf00      	nop
 800dd54:	008a003f 	.word	0x008a003f

0800dd58 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800dd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd5a:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800dd5c:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->AdvDataLen = AdvDataLen;
 800dd5e:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800dd62:	4602      	mov	r2, r0
{
 800dd64:	4604      	mov	r4, r0
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800dd66:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  tBleStatus status = 0;
 800dd6a:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800dd6e:	f000 ff75 	bl	800ec5c <Osal_MemCpy>
  index_input += AdvDataLen;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dd72:	2218      	movs	r2, #24
 800dd74:	4629      	mov	r1, r5
 800dd76:	a802      	add	r0, sp, #8
 800dd78:	f000 ff72 	bl	800ec60 <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x08e;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	9307      	str	r3, [sp, #28]
  tBleStatus status = 0;
 800dd80:	f10d 0607 	add.w	r6, sp, #7
  rq.ogf = 0x3f;
 800dd84:	4b08      	ldr	r3, [pc, #32]	; (800dda8 <aci_gap_update_adv_data+0x50>)
 800dd86:	9302      	str	r3, [sp, #8]
  cp0->AdvDataLen = AdvDataLen;
 800dd88:	af08      	add	r7, sp, #32
  index_input += AdvDataLen;
 800dd8a:	3401      	adds	r4, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 800dd90:	e9cd 4605 	strd	r4, r6, [sp, #20]
  rq.cparam = cmd_buffer;
 800dd94:	9704      	str	r7, [sp, #16]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd96:	f000 fac5 	bl	800e324 <hci_send_req>
 800dd9a:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 800dd9c:	bfac      	ite	ge
 800dd9e:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800dda2:	20ff      	movlt	r0, #255	; 0xff
}
 800dda4:	b049      	add	sp, #292	; 0x124
 800dda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dda8:	008e003f 	.word	0x008e003f

0800ddac <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800ddac:	b530      	push	{r4, r5, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 800ddae:	2400      	movs	r4, #0
{
 800ddb0:	b089      	sub	sp, #36	; 0x24
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ddb2:	4621      	mov	r1, r4
 800ddb4:	2218      	movs	r2, #24
 800ddb6:	a802      	add	r0, sp, #8
  rq.ogf = 0x3f;
 800ddb8:	4d0a      	ldr	r5, [pc, #40]	; (800dde4 <aci_gap_configure_whitelist+0x38>)
  tBleStatus status = 0;
 800ddba:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ddbe:	f000 ff4f 	bl	800ec60 <Osal_MemSet>
  rq.ocf = 0x092;
  rq.rparam = &status;
 800ddc2:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 800ddc6:	2301      	movs	r3, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ddc8:	4621      	mov	r1, r4
 800ddca:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800ddcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  rq.ogf = 0x3f;
 800ddd0:	9502      	str	r5, [sp, #8]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ddd2:	f000 faa7 	bl	800e324 <hci_send_req>
 800ddd6:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 800ddd8:	bfac      	ite	ge
 800ddda:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800ddde:	20ff      	movlt	r0, #255	; 0xff
}
 800dde0:	b009      	add	sp, #36	; 0x24
 800dde2:	bd30      	pop	{r4, r5, pc}
 800dde4:	0092003f 	.word	0x0092003f

0800dde8 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800dde8:	b530      	push	{r4, r5, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 800ddea:	2400      	movs	r4, #0
{
 800ddec:	b089      	sub	sp, #36	; 0x24
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ddee:	4621      	mov	r1, r4
 800ddf0:	2218      	movs	r2, #24
 800ddf2:	a802      	add	r0, sp, #8
  rq.ogf = 0x3f;
 800ddf4:	4d0a      	ldr	r5, [pc, #40]	; (800de20 <aci_gatt_init+0x38>)
  tBleStatus status = 0;
 800ddf6:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ddfa:	f000 ff31 	bl	800ec60 <Osal_MemSet>
  rq.ocf = 0x101;
  rq.rparam = &status;
 800ddfe:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 800de02:	2301      	movs	r3, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de04:	4621      	mov	r1, r4
 800de06:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800de08:	e9cd 2306 	strd	r2, r3, [sp, #24]
  rq.ogf = 0x3f;
 800de0c:	9502      	str	r5, [sp, #8]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de0e:	f000 fa89 	bl	800e324 <hci_send_req>
 800de12:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 800de14:	bfac      	ite	ge
 800de16:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800de1a:	20ff      	movlt	r0, #255	; 0xff
}
 800de1c:	b009      	add	sp, #36	; 0x24
 800de1e:	bd30      	pop	{r4, r5, pc}
 800de20:	0101003f 	.word	0x0101003f

0800de24 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800de24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800de28:	2801      	cmp	r0, #1
{
 800de2a:	b0c8      	sub	sp, #288	; 0x120
 800de2c:	4604      	mov	r4, r0
 800de2e:	4688      	mov	r8, r1
 800de30:	4617      	mov	r7, r2
 800de32:	461d      	mov	r5, r3
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800de34:	d03d      	beq.n	800deb2 <aci_gatt_add_service+0x8e>
 800de36:	2802      	cmp	r0, #2
 800de38:	d008      	beq.n	800de4c <aci_gatt_add_service+0x28>
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800de3a:	2203      	movs	r2, #3
 800de3c:	2100      	movs	r1, #0
 800de3e:	a801      	add	r0, sp, #4
 800de40:	f000 ff0e 	bl	800ec60 <Osal_MemSet>
 800de44:	2047      	movs	r0, #71	; 0x47
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
    return resp.Status;
  *Service_Handle = resp.Service_Handle;
  return BLE_STATUS_SUCCESS;
}
 800de46:	b048      	add	sp, #288	; 0x120
 800de48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800de4c:	ae01      	add	r6, sp, #4
  cp0->Service_UUID_Type = Service_UUID_Type;
 800de4e:	f10d 0920 	add.w	r9, sp, #32
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800de52:	2203      	movs	r2, #3
 800de54:	2100      	movs	r1, #0
 800de56:	4630      	mov	r0, r6
 800de58:	f000 ff02 	bl	800ec60 <Osal_MemSet>
      case 2: size = 16; break;
 800de5c:	f04f 0a13 	mov.w	sl, #19
  cp0->Service_UUID_Type = Service_UUID_Type;
 800de60:	f889 4000 	strb.w	r4, [r9]
      case 2: size = 16; break;
 800de64:	2210      	movs	r2, #16
 800de66:	f10d 0431 	add.w	r4, sp, #49	; 0x31
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800de6a:	4641      	mov	r1, r8
 800de6c:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800de70:	f000 fef4 	bl	800ec5c <Osal_MemCpy>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800de74:	2218      	movs	r2, #24
 800de76:	2100      	movs	r1, #0
      cp1->Service_Type = Service_Type;
 800de78:	7027      	strb	r7, [r4, #0]
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800de7a:	7065      	strb	r5, [r4, #1]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800de7c:	a802      	add	r0, sp, #8
 800de7e:	f000 feef 	bl	800ec60 <Osal_MemSet>
  rq.ogf = 0x3f;
 800de82:	4b16      	ldr	r3, [pc, #88]	; (800dedc <aci_gatt_add_service+0xb8>)
 800de84:	9302      	str	r3, [sp, #8]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de86:	2100      	movs	r1, #0
  rq.rlen = sizeof(resp);
 800de88:	2303      	movs	r3, #3
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de8a:	a802      	add	r0, sp, #8
  rq.clen = index_input;
 800de8c:	e9cd 9a04 	strd	r9, sl, [sp, #16]
  rq.rlen = sizeof(resp);
 800de90:	e9cd 6306 	strd	r6, r3, [sp, #24]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de94:	f000 fa46 	bl	800e324 <hci_send_req>
 800de98:	2800      	cmp	r0, #0
 800de9a:	db1a      	blt.n	800ded2 <aci_gatt_add_service+0xae>
  if ( resp.Status )
 800de9c:	7830      	ldrb	r0, [r6, #0]
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d1d1      	bne.n	800de46 <aci_gatt_add_service+0x22>
  *Service_Handle = resp.Service_Handle;
 800dea2:	6833      	ldr	r3, [r6, #0]
 800dea4:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800dea6:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800deaa:	8013      	strh	r3, [r2, #0]
}
 800deac:	b048      	add	sp, #288	; 0x120
 800deae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800deb2:	ae01      	add	r6, sp, #4
  cp0->Service_UUID_Type = Service_UUID_Type;
 800deb4:	f10d 0920 	add.w	r9, sp, #32
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800deb8:	2203      	movs	r2, #3
 800deba:	2100      	movs	r1, #0
 800debc:	4630      	mov	r0, r6
 800debe:	f000 fecf 	bl	800ec60 <Osal_MemSet>
  cp0->Service_UUID_Type = Service_UUID_Type;
 800dec2:	f04f 0a05 	mov.w	sl, #5
 800dec6:	f889 4000 	strb.w	r4, [r9]
 800deca:	2202      	movs	r2, #2
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800decc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
 800ded0:	e7cb      	b.n	800de6a <aci_gatt_add_service+0x46>
    return BLE_STATUS_TIMEOUT;
 800ded2:	20ff      	movs	r0, #255	; 0xff
}
 800ded4:	b048      	add	sp, #288	; 0x120
 800ded6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deda:	bf00      	nop
 800dedc:	0102003f 	.word	0x0102003f

0800dee0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	b0cd      	sub	sp, #308	; 0x134
 800dee6:	460e      	mov	r6, r1
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800dee8:	2e01      	cmp	r6, #1
{
 800deea:	f89d 1158 	ldrb.w	r1, [sp, #344]	; 0x158
 800deee:	f89d 815c 	ldrb.w	r8, [sp, #348]	; 0x15c
 800def2:	f89d 9160 	ldrb.w	r9, [sp, #352]	; 0x160
 800def6:	f89d a164 	ldrb.w	sl, [sp, #356]	; 0x164
 800defa:	f89d b168 	ldrb.w	fp, [sp, #360]	; 0x168
 800defe:	9103      	str	r1, [sp, #12]
 800df00:	9001      	str	r0, [sp, #4]
 800df02:	4614      	mov	r4, r2
 800df04:	9302      	str	r3, [sp, #8]
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800df06:	d04d      	beq.n	800dfa4 <aci_gatt_add_char+0xc4>
 800df08:	2e02      	cmp	r6, #2
 800df0a:	d008      	beq.n	800df1e <aci_gatt_add_char+0x3e>
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800df0c:	2203      	movs	r2, #3
 800df0e:	2100      	movs	r1, #0
 800df10:	a805      	add	r0, sp, #20
 800df12:	f000 fea5 	bl	800ec60 <Osal_MemSet>
 800df16:	2047      	movs	r0, #71	; 0x47
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
    return resp.Status;
  *Char_Handle = resp.Char_Handle;
  return BLE_STATUS_SUCCESS;
}
 800df18:	b04d      	add	sp, #308	; 0x134
 800df1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800df1e:	ad05      	add	r5, sp, #20
  cp0->Service_Handle = Service_Handle;
 800df20:	af0c      	add	r7, sp, #48	; 0x30
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800df22:	2203      	movs	r2, #3
 800df24:	2100      	movs	r1, #0
 800df26:	4628      	mov	r0, r5
 800df28:	f000 fe9a 	bl	800ec60 <Osal_MemSet>
  cp0->Service_Handle = Service_Handle;
 800df2c:	9b01      	ldr	r3, [sp, #4]
 800df2e:	803b      	strh	r3, [r7, #0]
  cp0->Char_UUID_Type = Char_UUID_Type;
 800df30:	70be      	strb	r6, [r7, #2]
      case 2: size = 16; break;
 800df32:	231a      	movs	r3, #26
 800df34:	2210      	movs	r2, #16
 800df36:	f10d 0643 	add.w	r6, sp, #67	; 0x43
 800df3a:	9301      	str	r3, [sp, #4]
 800df3c:	9b03      	ldr	r3, [sp, #12]
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800df3e:	4621      	mov	r1, r4
 800df40:	2400      	movs	r4, #0
 800df42:	f363 0407 	bfi	r4, r3, #0, #8
 800df46:	f368 240f 	bfi	r4, r8, #8, #8
 800df4a:	f369 4417 	bfi	r4, r9, #16, #8
 800df4e:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 800df52:	f000 fe83 	bl	800ec5c <Osal_MemCpy>
 800df56:	f36a 641f 	bfi	r4, sl, #24, #8
      cp1->Char_Value_Length = Char_Value_Length;
 800df5a:	9b02      	ldr	r3, [sp, #8]
 800df5c:	8033      	strh	r3, [r6, #0]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800df5e:	2218      	movs	r2, #24
 800df60:	2100      	movs	r1, #0
 800df62:	eb0d 0002 	add.w	r0, sp, r2
      cp1->Char_Properties = Char_Properties;
 800df66:	f8c6 4002 	str.w	r4, [r6, #2]
      cp1->Is_Variable = Is_Variable;
 800df6a:	f886 b006 	strb.w	fp, [r6, #6]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800df6e:	f000 fe77 	bl	800ec60 <Osal_MemSet>
  rq.ogf = 0x3f;
 800df72:	4a16      	ldr	r2, [pc, #88]	; (800dfcc <aci_gatt_add_char+0xec>)
  rq.clen = index_input;
 800df74:	9b01      	ldr	r3, [sp, #4]
  rq.ogf = 0x3f;
 800df76:	9206      	str	r2, [sp, #24]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800df78:	2100      	movs	r1, #0
  rq.rlen = sizeof(resp);
 800df7a:	2203      	movs	r2, #3
  if ( hci_send_req(&rq, FALSE) < 0 )
 800df7c:	a806      	add	r0, sp, #24
  rq.rlen = sizeof(resp);
 800df7e:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  rq.cparam = cmd_buffer;
 800df82:	9708      	str	r7, [sp, #32]
  rq.clen = index_input;
 800df84:	9309      	str	r3, [sp, #36]	; 0x24
  if ( hci_send_req(&rq, FALSE) < 0 )
 800df86:	f000 f9cd 	bl	800e324 <hci_send_req>
 800df8a:	2800      	cmp	r0, #0
 800df8c:	db19      	blt.n	800dfc2 <aci_gatt_add_char+0xe2>
  if ( resp.Status )
 800df8e:	7828      	ldrb	r0, [r5, #0]
 800df90:	2800      	cmp	r0, #0
 800df92:	d1c1      	bne.n	800df18 <aci_gatt_add_char+0x38>
  *Char_Handle = resp.Char_Handle;
 800df94:	682b      	ldr	r3, [r5, #0]
 800df96:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 800df98:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800df9c:	8013      	strh	r3, [r2, #0]
}
 800df9e:	b04d      	add	sp, #308	; 0x134
 800dfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800dfa4:	ad05      	add	r5, sp, #20
  cp0->Service_Handle = Service_Handle;
 800dfa6:	af0c      	add	r7, sp, #48	; 0x30
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800dfa8:	2203      	movs	r2, #3
 800dfaa:	2100      	movs	r1, #0
 800dfac:	4628      	mov	r0, r5
 800dfae:	f000 fe57 	bl	800ec60 <Osal_MemSet>
  cp0->Service_Handle = Service_Handle;
 800dfb2:	9b01      	ldr	r3, [sp, #4]
 800dfb4:	803b      	strh	r3, [r7, #0]
  cp0->Char_UUID_Type = Char_UUID_Type;
 800dfb6:	70be      	strb	r6, [r7, #2]
 800dfb8:	230c      	movs	r3, #12
 800dfba:	2202      	movs	r2, #2
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800dfbc:	f10d 0635 	add.w	r6, sp, #53	; 0x35
 800dfc0:	e7bb      	b.n	800df3a <aci_gatt_add_char+0x5a>
    return BLE_STATUS_TIMEOUT;
 800dfc2:	20ff      	movs	r0, #255	; 0xff
}
 800dfc4:	b04d      	add	sp, #308	; 0x134
 800dfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfca:	bf00      	nop
 800dfcc:	0104003f 	.word	0x0104003f

0800dfd0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800dfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfd2:	b0c9      	sub	sp, #292	; 0x124
 800dfd4:	461c      	mov	r4, r3
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800dfd6:	2500      	movs	r5, #0
{
 800dfd8:	4613      	mov	r3, r2
  int index_input = 0;
  cp0->Service_Handle = Service_Handle;
  index_input += 2;
  cp0->Char_Handle = Char_Handle;
 800dfda:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Val_Offset = Val_Offset;
  index_input += 1;
  cp0->Char_Value_Length = Char_Value_Length;
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800dfde:	4622      	mov	r2, r4
 800dfe0:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Service_Handle = Service_Handle;
 800dfe2:	f8ad 0020 	strh.w	r0, [sp, #32]
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800dfe6:	f10d 0026 	add.w	r0, sp, #38	; 0x26
  cp0->Val_Offset = Val_Offset;
 800dfea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  cp0->Char_Value_Length = Char_Value_Length;
 800dfee:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
  tBleStatus status = 0;
 800dff2:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800dff6:	f000 fe31 	bl	800ec5c <Osal_MemCpy>
  index_input += Char_Value_Length;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dffa:	2218      	movs	r2, #24
 800dffc:	4629      	mov	r1, r5
 800dffe:	a802      	add	r0, sp, #8
 800e000:	f000 fe2e 	bl	800ec60 <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800e004:	2301      	movs	r3, #1
 800e006:	9307      	str	r3, [sp, #28]
  tBleStatus status = 0;
 800e008:	f10d 0607 	add.w	r6, sp, #7
  rq.ogf = 0x3f;
 800e00c:	4b08      	ldr	r3, [pc, #32]	; (800e030 <aci_gatt_update_char_value+0x60>)
 800e00e:	9302      	str	r3, [sp, #8]
  cp0->Service_Handle = Service_Handle;
 800e010:	af08      	add	r7, sp, #32
  index_input += Char_Value_Length;
 800e012:	3406      	adds	r4, #6
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e014:	4629      	mov	r1, r5
 800e016:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 800e018:	e9cd 4605 	strd	r4, r6, [sp, #20]
  rq.cparam = cmd_buffer;
 800e01c:	9704      	str	r7, [sp, #16]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e01e:	f000 f981 	bl	800e324 <hci_send_req>
 800e022:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 800e024:	bfac      	ite	ge
 800e026:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800e02a:	20ff      	movlt	r0, #255	; 0xff
}
 800e02c:	b049      	add	sp, #292	; 0x124
 800e02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e030:	0106003f 	.word	0x0106003f

0800e034 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 800e034:	b570      	push	{r4, r5, r6, lr}
 800e036:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800e038:	2400      	movs	r4, #0
  int index_input = 0;
  cp0->Connection_Handle = Connection_Handle;
 800e03a:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e03e:	2218      	movs	r2, #24
 800e040:	4621      	mov	r1, r4
 800e042:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 800e044:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e048:	f000 fe0a 	bl	800ec60 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e04c:	4b0a      	ldr	r3, [pc, #40]	; (800e078 <aci_gatt_allow_read+0x44>)
 800e04e:	9302      	str	r3, [sp, #8]
  cp0->Connection_Handle = Connection_Handle;
 800e050:	ae08      	add	r6, sp, #32
  rq.ocf = 0x127;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800e052:	2302      	movs	r3, #2
 800e054:	e9cd 6304 	strd	r6, r3, [sp, #16]
  tBleStatus status = 0;
 800e058:	f10d 0507 	add.w	r5, sp, #7
  rq.rparam = &status;
  rq.rlen = 1;
 800e05c:	2301      	movs	r3, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e05e:	4621      	mov	r1, r4
 800e060:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800e062:	e9cd 5306 	strd	r5, r3, [sp, #24]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e066:	f000 f95d 	bl	800e324 <hci_send_req>
 800e06a:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 800e06c:	bfac      	ite	ge
 800e06e:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800e072:	20ff      	movlt	r0, #255	; 0xff
}
 800e074:	b048      	add	sp, #288	; 0x120
 800e076:	bd70      	pop	{r4, r5, r6, pc}
 800e078:	0127003f 	.word	0x0127003f

0800e07c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800e07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e07e:	b0c9      	sub	sp, #292	; 0x124
 800e080:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800e082:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->Offset = Offset;
  index_input += 1;
  cp0->Length = Length;
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800e084:	4611      	mov	r1, r2
  cp0->Offset = Offset;
 800e086:	f88d 0020 	strb.w	r0, [sp, #32]
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800e08a:	4622      	mov	r2, r4
 800e08c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  cp0->Length = Length;
 800e090:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  tBleStatus status = 0;
 800e094:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800e098:	f000 fde0 	bl	800ec5c <Osal_MemCpy>
  index_input += Length;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e09c:	2218      	movs	r2, #24
 800e09e:	4629      	mov	r1, r5
 800e0a0:	a802      	add	r0, sp, #8
 800e0a2:	f000 fddd 	bl	800ec60 <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	9307      	str	r3, [sp, #28]
  tBleStatus status = 0;
 800e0aa:	f10d 0607 	add.w	r6, sp, #7
  rq.ogf = 0x3f;
 800e0ae:	4b09      	ldr	r3, [pc, #36]	; (800e0d4 <aci_hal_write_config_data+0x58>)
 800e0b0:	9302      	str	r3, [sp, #8]
  cp0->Offset = Offset;
 800e0b2:	af08      	add	r7, sp, #32
  index_input += Length;
 800e0b4:	3402      	adds	r4, #2
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e0b6:	4629      	mov	r1, r5
 800e0b8:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 800e0ba:	e9cd 4605 	strd	r4, r6, [sp, #20]
  rq.cparam = cmd_buffer;
 800e0be:	9704      	str	r7, [sp, #16]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e0c0:	f000 f930 	bl	800e324 <hci_send_req>
 800e0c4:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 800e0c6:	bfac      	ite	ge
 800e0c8:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800e0cc:	20ff      	movlt	r0, #255	; 0xff
}
 800e0ce:	b049      	add	sp, #292	; 0x124
 800e0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	000c003f 	.word	0x000c003f

0800e0d8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800e0d8:	b570      	push	{r4, r5, r6, lr}
 800e0da:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800e0dc:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->En_High_Power = En_High_Power;
 800e0de:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->PA_Level = PA_Level;
 800e0e2:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e0e6:	2218      	movs	r2, #24
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 800e0ec:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e0f0:	f000 fdb6 	bl	800ec60 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e0f4:	4b0a      	ldr	r3, [pc, #40]	; (800e120 <aci_hal_set_tx_power_level+0x48>)
 800e0f6:	9302      	str	r3, [sp, #8]
  cp0->En_High_Power = En_High_Power;
 800e0f8:	ac08      	add	r4, sp, #32
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800e0fa:	2302      	movs	r3, #2
 800e0fc:	e9cd 4304 	strd	r4, r3, [sp, #16]
  tBleStatus status = 0;
 800e100:	f10d 0607 	add.w	r6, sp, #7
  rq.rparam = &status;
  rq.rlen = 1;
 800e104:	2301      	movs	r3, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e106:	4629      	mov	r1, r5
 800e108:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800e10a:	e9cd 6306 	strd	r6, r3, [sp, #24]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e10e:	f000 f909 	bl	800e324 <hci_send_req>
 800e112:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 800e114:	bfac      	ite	ge
 800e116:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800e11a:	20ff      	movlt	r0, #255	; 0xff
}
 800e11c:	b048      	add	sp, #288	; 0x120
 800e11e:	bd70      	pop	{r4, r5, r6, pc}
 800e120:	000f003f 	.word	0x000f003f

0800e124 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800e124:	b570      	push	{r4, r5, r6, lr}
 800e126:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800e128:	2400      	movs	r4, #0
  int index_input = 0;
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800e12a:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e12e:	2218      	movs	r2, #24
 800e130:	4621      	mov	r1, r4
 800e132:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 800e134:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e138:	f000 fd92 	bl	800ec60 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e13c:	4b0a      	ldr	r3, [pc, #40]	; (800e168 <aci_hal_set_radio_activity_mask+0x44>)
 800e13e:	9302      	str	r3, [sp, #8]
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800e140:	ae08      	add	r6, sp, #32
  rq.ocf = 0x018;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800e142:	2302      	movs	r3, #2
 800e144:	e9cd 6304 	strd	r6, r3, [sp, #16]
  tBleStatus status = 0;
 800e148:	f10d 0507 	add.w	r5, sp, #7
  rq.rparam = &status;
  rq.rlen = 1;
 800e14c:	2301      	movs	r3, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e14e:	4621      	mov	r1, r4
 800e150:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800e152:	e9cd 5306 	strd	r5, r3, [sp, #24]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e156:	f000 f8e5 	bl	800e324 <hci_send_req>
 800e15a:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 800e15c:	bfac      	ite	ge
 800e15e:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800e162:	20ff      	movlt	r0, #255	; 0xff
}
 800e164:	b048      	add	sp, #288	; 0x120
 800e166:	bd70      	pop	{r4, r5, r6, pc}
 800e168:	0018003f 	.word	0x0018003f

0800e16c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800e16c:	b530      	push	{r4, r5, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 800e16e:	2400      	movs	r4, #0
{
 800e170:	b089      	sub	sp, #36	; 0x24
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e172:	4621      	mov	r1, r4
 800e174:	2218      	movs	r2, #24
 800e176:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 800e178:	f88d 4007 	strb.w	r4, [sp, #7]
  rq.ogf = 0x03;
 800e17c:	f04f 1503 	mov.w	r5, #196611	; 0x30003
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e180:	f000 fd6e 	bl	800ec60 <Osal_MemSet>
  rq.ocf = 0x003;
  rq.rparam = &status;
 800e184:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 800e188:	2301      	movs	r3, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e18a:	4621      	mov	r1, r4
 800e18c:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800e18e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  rq.ogf = 0x03;
 800e192:	9502      	str	r5, [sp, #8]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e194:	f000 f8c6 	bl	800e324 <hci_send_req>
 800e198:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  return status;
 800e19a:	bfac      	ite	ge
 800e19c:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800e1a0:	20ff      	movlt	r0, #255	; 0xff
}
 800e1a2:	b009      	add	sp, #36	; 0x24
 800e1a4:	bd30      	pop	{r4, r5, pc}
 800e1a6:	bf00      	nop

0800e1a8 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800e1a8:	b570      	push	{r4, r5, r6, lr}
 800e1aa:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800e1ac:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->ALL_PHYS = ALL_PHYS;
 800e1ae:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->TX_PHYS = TX_PHYS;
 800e1b2:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  index_input += 1;
  cp0->RX_PHYS = RX_PHYS;
 800e1b6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e1ba:	4629      	mov	r1, r5
 800e1bc:	2218      	movs	r2, #24
 800e1be:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 800e1c0:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e1c4:	f000 fd4c 	bl	800ec60 <Osal_MemSet>
  rq.ogf = 0x08;
 800e1c8:	4b0a      	ldr	r3, [pc, #40]	; (800e1f4 <hci_le_set_default_phy+0x4c>)
 800e1ca:	9302      	str	r3, [sp, #8]
  cp0->ALL_PHYS = ALL_PHYS;
 800e1cc:	ac08      	add	r4, sp, #32
  rq.ocf = 0x031;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800e1ce:	2303      	movs	r3, #3
 800e1d0:	e9cd 4304 	strd	r4, r3, [sp, #16]
  tBleStatus status = 0;
 800e1d4:	f10d 0607 	add.w	r6, sp, #7
  rq.rparam = &status;
  rq.rlen = 1;
 800e1d8:	2301      	movs	r3, #1
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e1da:	4629      	mov	r1, r5
 800e1dc:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800e1de:	e9cd 6306 	strd	r6, r3, [sp, #24]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e1e2:	f000 f89f 	bl	800e324 <hci_send_req>
 800e1e6:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  return status;
 800e1e8:	bfac      	ite	ge
 800e1ea:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800e1ee:	20ff      	movlt	r0, #255	; 0xff
}
 800e1f0:	b048      	add	sp, #288	; 0x120
 800e1f2:	bd70      	pop	{r4, r5, r6, pc}
 800e1f4:	00310008 	.word	0x00310008

0800e1f8 <DbgTrace_TxCpltCallback>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1f8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e1fc:	b672      	cpsid	i
#else
  BACKUP_PRIMASK();

  DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  DbgTracePeripheralReady = SET;
 800e1fe:	4a03      	ldr	r2, [pc, #12]	; (800e20c <DbgTrace_TxCpltCallback+0x14>)
 800e200:	2101      	movs	r1, #1
 800e202:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e204:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK();
#endif
}
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop
 800e20c:	200000e8 	.word	0x200000e8

0800e210 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800e210:	f7f3 b886 	b.w	8001320 <DbgOutputInit>

0800e214 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800e214:	b538      	push	{r3, r4, r5, lr}
 800e216:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e218:	f3ef 8210 	mrs	r2, PRIMASK
//  uint8_t* buffer;

  BACKUP_PRIMASK();

  /* Ignore flushes */
  if ( handle == -1 )
 800e21c:	1c43      	adds	r3, r0, #1
 800e21e:	d008      	beq.n	800e232 <_write+0x1e>
  {
    chars_written = ( size_t ) 0;
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800e220:	1e43      	subs	r3, r0, #1
 800e222:	2b01      	cmp	r3, #1
 800e224:	d802      	bhi.n	800e22c <_write+0x18>
  {
    chars_written = ( size_t ) - 1;
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800e226:	b934      	cbnz	r4, 800e236 <_write+0x22>
    chars_written = ( size_t ) 0;
 800e228:	4620      	mov	r0, r4
}
 800e22a:	bd38      	pop	{r3, r4, r5, pc}
    chars_written = ( size_t ) - 1;
 800e22c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e230:	bd38      	pop	{r3, r4, r5, pc}
    chars_written = ( size_t ) 0;
 800e232:	2000      	movs	r0, #0
}
 800e234:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800e236:	468c      	mov	ip, r1
 800e238:	b672      	cpsid	i
    {
      RESTORE_PRIMASK();
    }
#else
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    DbgTracePeripheralReady = RESET;
 800e23a:	4d07      	ldr	r5, [pc, #28]	; (800e258 <_write+0x44>)
 800e23c:	2300      	movs	r3, #0
 800e23e:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e240:	f382 8810 	msr	PRIMASK, r2
    RESTORE_PRIMASK();

    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800e244:	4a05      	ldr	r2, [pc, #20]	; (800e25c <_write+0x48>)
 800e246:	b2a1      	uxth	r1, r4
 800e248:	4660      	mov	r0, ip
 800e24a:	f7f3 f86b 	bl	8001324 <DbgOutputTraces>
    while (!DbgTracePeripheralReady);
 800e24e:	782b      	ldrb	r3, [r5, #0]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d0fc      	beq.n	800e24e <_write+0x3a>
    chars_written = ( size_t ) 0;
 800e254:	4620      	mov	r0, r4
#endif
    /* CS END */
  }
  return ( chars_written );
 800e256:	e7e8      	b.n	800e22a <_write+0x16>
 800e258:	200000e8 	.word	0x200000e8
 800e25c:	0800e1f9 	.word	0x0800e1f9

0800e260 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e260:	b570      	push	{r4, r5, r6, lr}
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e262:	4c10      	ldr	r4, [pc, #64]	; (800e2a4 <hci_init+0x44>)
 800e264:	684a      	ldr	r2, [r1, #4]
  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);

  pCmdBuffer = p_cmdbuffer;
 800e266:	4e10      	ldr	r6, [pc, #64]	; (800e2a8 <hci_init+0x48>)
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e268:	6022      	str	r2, [r4, #0]
{
 800e26a:	4603      	mov	r3, r0
 800e26c:	460d      	mov	r5, r1
 800e26e:	b084      	sub	sp, #16
  hci_register_io_bus (&hciContext.io);
 800e270:	1d20      	adds	r0, r4, #4
  hciContext.UserEvtRx = UserEvtRx;
 800e272:	6223      	str	r3, [r4, #32]
  hci_register_io_bus (&hciContext.io);
 800e274:	f000 f8e6 	bl	800e444 <hci_register_io_bus>
  LST_init_head (&HciCmdEventQueue);
 800e278:	f104 0024 	add.w	r0, r4, #36	; 0x24
  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e27c:	682d      	ldr	r5, [r5, #0]
  LST_init_head (&HciCmdEventQueue);
 800e27e:	f000 fe8f 	bl	800efa0 <LST_init_head>
  pCmdBuffer = p_cmdbuffer;
 800e282:	4630      	mov	r0, r6
 800e284:	f840 5b04 	str.w	r5, [r0], #4

  LST_init_head (&HciAsynchEventQueue);
 800e288:	f000 fe8a 	bl	800efa0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e28c:	6863      	ldr	r3, [r4, #4]
  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e28e:	2201      	movs	r2, #1
 800e290:	7332      	strb	r2, [r6, #12]
  if (hciContext.io.Init)
 800e292:	b123      	cbz	r3, 800e29e <hci_init+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e294:	4a05      	ldr	r2, [pc, #20]	; (800e2ac <hci_init+0x4c>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e296:	9502      	str	r5, [sp, #8]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e298:	9200      	str	r2, [sp, #0]
    hciContext.io.Init(&Conf);
 800e29a:	4668      	mov	r0, sp
 800e29c:	4798      	blx	r3
}
 800e29e:	b004      	add	sp, #16
 800e2a0:	bd70      	pop	{r4, r5, r6, pc}
 800e2a2:	bf00      	nop
 800e2a4:	20001570 	.word	0x20001570
 800e2a8:	200005c0 	.word	0x200005c0
 800e2ac:	0800e411 	.word	0x0800e411

0800e2b0 <hci_user_evt_proc>:
{
 800e2b0:	b510      	push	{r4, lr}
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e2b2:	4c19      	ldr	r4, [pc, #100]	; (800e318 <hci_user_evt_proc+0x68>)
{
 800e2b4:	b084      	sub	sp, #16
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e2b6:	1d20      	adds	r0, r4, #4
 800e2b8:	f000 fe76 	bl	800efa8 <LST_is_empty>
 800e2bc:	b908      	cbnz	r0, 800e2c2 <hci_user_evt_proc+0x12>
 800e2be:	7b23      	ldrb	r3, [r4, #12]
 800e2c0:	b963      	cbnz	r3, 800e2dc <hci_user_evt_proc+0x2c>
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e2c2:	4816      	ldr	r0, [pc, #88]	; (800e31c <hci_user_evt_proc+0x6c>)
 800e2c4:	f000 fe70 	bl	800efa8 <LST_is_empty>
 800e2c8:	b908      	cbnz	r0, 800e2ce <hci_user_evt_proc+0x1e>
 800e2ca:	7b23      	ldrb	r3, [r4, #12]
 800e2cc:	b90b      	cbnz	r3, 800e2d2 <hci_user_evt_proc+0x22>
}
 800e2ce:	b004      	add	sp, #16
 800e2d0:	bd10      	pop	{r4, pc}
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e2d2:	4812      	ldr	r0, [pc, #72]	; (800e31c <hci_user_evt_proc+0x6c>)
 800e2d4:	f7f4 fa78 	bl	80027c8 <hci_notify_asynch_evt>
}
 800e2d8:	b004      	add	sp, #16
 800e2da:	bd10      	pop	{r4, pc}
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e2dc:	a901      	add	r1, sp, #4
 800e2de:	1d20      	adds	r0, r4, #4
 800e2e0:	f000 fe86 	bl	800eff0 <LST_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800e2e4:	4b0e      	ldr	r3, [pc, #56]	; (800e320 <hci_user_evt_proc+0x70>)
 800e2e6:	6a1b      	ldr	r3, [r3, #32]
 800e2e8:	b17b      	cbz	r3, 800e30a <hci_user_evt_proc+0x5a>
      UserEvtRxParam.pckt = phcievtbuffer;
 800e2ea:	9901      	ldr	r1, [sp, #4]
 800e2ec:	9103      	str	r1, [sp, #12]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	f88d 2008 	strb.w	r2, [sp, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e2f4:	a802      	add	r0, sp, #8
 800e2f6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e2f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e2fc:	7323      	strb	r3, [r4, #12]
    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e2fe:	b933      	cbnz	r3, 800e30e <hci_user_evt_proc+0x5e>
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e300:	9901      	ldr	r1, [sp, #4]
 800e302:	1d20      	adds	r0, r4, #4
 800e304:	f000 fe5c 	bl	800efc0 <LST_insert_head>
 800e308:	e7db      	b.n	800e2c2 <hci_user_evt_proc+0x12>
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e30a:	2301      	movs	r3, #1
 800e30c:	7323      	strb	r3, [r4, #12]
      TL_MM_EvtDone( phcievtbuffer );
 800e30e:	9801      	ldr	r0, [sp, #4]
 800e310:	f001 f802 	bl	800f318 <TL_MM_EvtDone>
 800e314:	e7d5      	b.n	800e2c2 <hci_user_evt_proc+0x12>
 800e316:	bf00      	nop
 800e318:	200005c0 	.word	0x200005c0
 800e31c:	200005c4 	.word	0x200005c4
 800e320:	20001570 	.word	0x20001570

0800e324 <hci_send_req>:
{
 800e324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
  if(hcicmdstatus == HCI_TL_CmdBusy)
  {
    if(StatusNotCallBackFunction != 0)
 800e328:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800e40c <hci_send_req+0xe8>
 800e32c:	f8d9 3000 	ldr.w	r3, [r9]
{
 800e330:	b083      	sub	sp, #12
 800e332:	4680      	mov	r8, r0
    if(StatusNotCallBackFunction != 0)
 800e334:	b10b      	cbz	r3, 800e33a <hci_send_req+0x16>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e336:	2000      	movs	r0, #0
 800e338:	4798      	blx	r3
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e33a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800e33e:	f8b8 1000 	ldrh.w	r1, [r8]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e342:	f8d8 200c 	ldr.w	r2, [r8, #12]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e346:	4d2f      	ldr	r5, [pc, #188]	; (800e404 <hci_send_req+0xe0>)
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e34c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e350:	492d      	ldr	r1, [pc, #180]	; (800e408 <hci_send_req+0xe4>)
 800e352:	6808      	ldr	r0, [r1, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e354:	f8d8 1008 	ldr.w	r1, [r8, #8]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e358:	f8a0 3009 	strh.w	r3, [r0, #9]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e35c:	72c2      	strb	r2, [r0, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e35e:	b2d2      	uxtb	r2, r2
 800e360:	300c      	adds	r0, #12
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e362:	b29e      	uxth	r6, r3
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e364:	f014 fcec 	bl	8022d40 <memcpy>
  hciContext.io.Send(0,0);
 800e368:	2100      	movs	r1, #0
 800e36a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e36e:	4608      	mov	r0, r1
 800e370:	4798      	blx	r3
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e372:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800e376:	f7f4 fa2f 	bl	80027d8 <hci_cmd_resp_wait>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e37a:	2700      	movs	r7, #0
 800e37c:	4628      	mov	r0, r5
 800e37e:	f000 fe13 	bl	800efa8 <LST_is_empty>
 800e382:	4603      	mov	r3, r0
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e384:	a901      	add	r1, sp, #4
 800e386:	4628      	mov	r0, r5
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e388:	b9a3      	cbnz	r3, 800e3b4 <hci_send_req+0x90>
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e38a:	f000 fe31 	bl	800eff0 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e38e:	9c01      	ldr	r4, [sp, #4]
 800e390:	7a63      	ldrb	r3, [r4, #9]
 800e392:	2b0f      	cmp	r3, #15
 800e394:	d019      	beq.n	800e3ca <hci_send_req+0xa6>
        if(pcommand_complete_event->cmdcode == opcode)
 800e396:	89a3      	ldrh	r3, [r4, #12]
 800e398:	42b3      	cmp	r3, r6
 800e39a:	d022      	beq.n	800e3e2 <hci_send_req+0xbe>
        if(pcommand_complete_event->numcmd != 0)
 800e39c:	7ae3      	ldrb	r3, [r4, #11]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d0ec      	beq.n	800e37c <hci_send_req+0x58>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	f000 fe00 	bl	800efa8 <LST_is_empty>
 800e3a8:	4603      	mov	r3, r0
          local_cmd_status = HCI_TL_CmdAvailable;
 800e3aa:	2701      	movs	r7, #1
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e3ac:	a901      	add	r1, sp, #4
 800e3ae:	4628      	mov	r0, r5
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d0ea      	beq.n	800e38a <hci_send_req+0x66>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e3b4:	2f00      	cmp	r7, #0
 800e3b6:	d0dc      	beq.n	800e372 <hci_send_req+0x4e>
    }
  }
  else
  {
    if(StatusNotCallBackFunction != 0)
 800e3b8:	f8d9 3000 	ldr.w	r3, [r9]
 800e3bc:	b10b      	cbz	r3, 800e3c2 <hci_send_req+0x9e>
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e3be:	2001      	movs	r0, #1
 800e3c0:	4798      	blx	r3
}
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	b003      	add	sp, #12
 800e3c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(pcommand_status_event->cmdcode == opcode)
 800e3ca:	f8b4 300d 	ldrh.w	r3, [r4, #13]
 800e3ce:	42b3      	cmp	r3, r6
 800e3d0:	d103      	bne.n	800e3da <hci_send_req+0xb6>
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e3d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e3d6:	7ae2      	ldrb	r2, [r4, #11]
 800e3d8:	701a      	strb	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 800e3da:	7b23      	ldrb	r3, [r4, #12]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d0cd      	beq.n	800e37c <hci_send_req+0x58>
 800e3e0:	e7df      	b.n	800e3a2 <hci_send_req+0x7e>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e3e2:	7aa2      	ldrb	r2, [r4, #10]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e3e4:	f8d8 3014 	ldr.w	r3, [r8, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e3e8:	f8d8 0010 	ldr.w	r0, [r8, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e3ec:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e3ee:	b2d2      	uxtb	r2, r2
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	bfa8      	it	ge
 800e3f4:	461a      	movge	r2, r3
 800e3f6:	f8c8 2014 	str.w	r2, [r8, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e3fa:	f104 010e 	add.w	r1, r4, #14
 800e3fe:	f014 fc9f 	bl	8022d40 <memcpy>
 800e402:	e7cb      	b.n	800e39c <hci_send_req+0x78>
 800e404:	20001594 	.word	0x20001594
 800e408:	200005c0 	.word	0x200005c0
 800e40c:	20001570 	.word	0x20001570

0800e410 <TlEvtReceived>:

  return;
}

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e410:	b508      	push	{r3, lr}
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e412:	7a43      	ldrb	r3, [r0, #9]
 800e414:	3b0e      	subs	r3, #14
 800e416:	2b01      	cmp	r3, #1
{
 800e418:	4601      	mov	r1, r0
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e41a:	d907      	bls.n	800e42c <TlEvtReceived+0x1c>
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e41c:	4807      	ldr	r0, [pc, #28]	; (800e43c <TlEvtReceived+0x2c>)
 800e41e:	f000 fddb 	bl	800efd8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
  }

  return;
}
 800e422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e426:	4805      	ldr	r0, [pc, #20]	; (800e43c <TlEvtReceived+0x2c>)
 800e428:	f7f4 b9ce 	b.w	80027c8 <hci_notify_asynch_evt>
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e42c:	4804      	ldr	r0, [pc, #16]	; (800e440 <TlEvtReceived+0x30>)
 800e42e:	f000 fdd3 	bl	800efd8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e432:	2000      	movs	r0, #0
 800e434:	f7f4 f9cc 	bl	80027d0 <hci_cmd_resp_release>
}
 800e438:	bd08      	pop	{r3, pc}
 800e43a:	bf00      	nop
 800e43c:	200005c4 	.word	0x200005c4
 800e440:	20001594 	.word	0x20001594

0800e444 <hci_register_io_bus>:


void hci_register_io_bus(tHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e444:	4a02      	ldr	r2, [pc, #8]	; (800e450 <hci_register_io_bus+0xc>)
  fops->Send    = TL_BLE_SendCmd;
 800e446:	4b03      	ldr	r3, [pc, #12]	; (800e454 <hci_register_io_bus+0x10>)
  fops->Init    = TL_BLE_Init;
 800e448:	6002      	str	r2, [r0, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e44a:	6103      	str	r3, [r0, #16]

  return;
}
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop
 800e450:	0800f1a9 	.word	0x0800f1a9
 800e454:	0800f1e9 	.word	0x0800f1e9

0800e458 <Motenv_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Motenv_Event_Handler(void *Event)
{
 800e458:	b570      	push	{r4, r5, r6, lr}
  MOTENV_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);

  switch(event_pckt->evt)
 800e45a:	7843      	ldrb	r3, [r0, #1]
 800e45c:	2bff      	cmp	r3, #255	; 0xff
{
 800e45e:	b084      	sub	sp, #16
  switch(event_pckt->evt)
 800e460:	d003      	beq.n	800e46a <Motenv_Event_Handler+0x12>
  return_value = SVCCTL_EvtNotAck;
 800e462:	2500      	movs	r5, #0
    default:
      break;
  }

  return(return_value);
}/* end Motenv_Event_Handler */
 800e464:	4628      	mov	r0, r5
 800e466:	b004      	add	sp, #16
 800e468:	bd70      	pop	{r4, r5, r6, pc}
      switch(blecore_evt->ecode)
 800e46a:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800e46e:	f640 4201 	movw	r2, #3073	; 0xc01
 800e472:	4293      	cmp	r3, r2
 800e474:	4604      	mov	r4, r0
 800e476:	d035      	beq.n	800e4e4 <Motenv_Event_Handler+0x8c>
 800e478:	f640 4214 	movw	r2, #3092	; 0xc14
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d1f0      	bne.n	800e462 <Motenv_Event_Handler+0xa>
          if(read_permit_req->Attribute_Handle == (aMotenvContext.HWEnvCharHdle + 1U))
 800e480:	4ec1      	ldr	r6, [pc, #772]	; (800e788 <Motenv_Event_Handler+0x330>)
 800e482:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800e486:	88b2      	ldrh	r2, [r6, #4]
 800e488:	3201      	adds	r2, #1
 800e48a:	4293      	cmp	r3, r2
 800e48c:	f000 80c1 	beq.w	800e612 <Motenv_Event_Handler+0x1ba>
          if(read_permit_req->Attribute_Handle == (aMotenvContext.HWAccEventCharHdle + 1U))
 800e490:	88f2      	ldrh	r2, [r6, #6]
 800e492:	3201      	adds	r2, #1
 800e494:	429a      	cmp	r2, r3
 800e496:	f000 80b3 	beq.w	800e600 <Motenv_Event_Handler+0x1a8>
          else if(read_permit_req->Attribute_Handle == (aMotenvContext.SWActivityRecCharHdle + 1U))
 800e49a:	89f2      	ldrh	r2, [r6, #14]
 800e49c:	3201      	adds	r2, #1
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	f000 80d2 	beq.w	800e648 <Motenv_Event_Handler+0x1f0>
          else if(read_permit_req->Attribute_Handle == (aMotenvContext.SWCarryPositionCharHdle + 1U))
 800e4a4:	8a32      	ldrh	r2, [r6, #16]
 800e4a6:	3201      	adds	r2, #1
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	f000 80e1 	beq.w	800e670 <Motenv_Event_Handler+0x218>
          else if(read_permit_req->Attribute_Handle == (aMotenvContext.SWGestureRecCharHdle + 1U))
 800e4ae:	8a72      	ldrh	r2, [r6, #18]
 800e4b0:	3201      	adds	r2, #1
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d073      	beq.n	800e59e <Motenv_Event_Handler+0x146>
          else if(read_permit_req->Attribute_Handle == (aMotenvContext.SWPedometerCharHdle + 1U))
 800e4b6:	8ab2      	ldrh	r2, [r6, #20]
 800e4b8:	3201      	adds	r2, #1
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	f000 80f3 	beq.w	800e6a6 <Motenv_Event_Handler+0x24e>
          if(read_permit_req->Attribute_Handle == (aMotenvContext.ConsoleTermCharHdle + 1U))
 800e4c0:	8bf2      	ldrh	r2, [r6, #30]
 800e4c2:	3201      	adds	r2, #1
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	f000 808b 	beq.w	800e5e0 <Motenv_Event_Handler+0x188>
          if(read_permit_req->Attribute_Handle == (aMotenvContext.ConsoleStderrCharHdle + 1U))
 800e4ca:	8c32      	ldrh	r2, [r6, #32]
 800e4cc:	3201      	adds	r2, #1
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	f000 808f 	beq.w	800e5f2 <Motenv_Event_Handler+0x19a>
          (void)aci_gatt_allow_read(read_permit_req->Connection_Handle);
 800e4d4:	f8b4 0005 	ldrh.w	r0, [r4, #5]
 800e4d8:	f7ff fdac 	bl	800e034 <aci_gatt_allow_read>
  return_value = SVCCTL_EvtNotAck;
 800e4dc:	2500      	movs	r5, #0
}/* end Motenv_Event_Handler */
 800e4de:	4628      	mov	r0, r5
 800e4e0:	b004      	add	sp, #16
 800e4e2:	bd70      	pop	{r4, r5, r6, pc}
          if(attribute_modified->Attr_Handle == (aMotenvContext.HWEnvCharHdle + 2U))
 800e4e4:	4ea8      	ldr	r6, [pc, #672]	; (800e788 <Motenv_Event_Handler+0x330>)
 800e4e6:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800e4ea:	88b2      	ldrh	r2, [r6, #4]
 800e4ec:	3202      	adds	r2, #2
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d069      	beq.n	800e5c6 <Motenv_Event_Handler+0x16e>
  return_value = SVCCTL_EvtNotAck;
 800e4f2:	2500      	movs	r5, #0
          if(attribute_modified->Attr_Handle == (aMotenvContext.HWAccEventCharHdle + 2U))
 800e4f4:	88f2      	ldrh	r2, [r6, #6]
 800e4f6:	3202      	adds	r2, #2
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d059      	beq.n	800e5b0 <Motenv_Event_Handler+0x158>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.HWMotionCharHdle + 2U))
 800e4fc:	8872      	ldrh	r2, [r6, #2]
 800e4fe:	3202      	adds	r2, #2
 800e500:	429a      	cmp	r2, r3
 800e502:	d041      	beq.n	800e588 <Motenv_Event_Handler+0x130>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWQuaternionsCharHdle + 2U))
 800e504:	8972      	ldrh	r2, [r6, #10]
 800e506:	3202      	adds	r2, #2
 800e508:	429a      	cmp	r2, r3
 800e50a:	f000 80a6 	beq.w	800e65a <Motenv_Event_Handler+0x202>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWECompassCharHdle + 2U))
 800e50e:	89b2      	ldrh	r2, [r6, #12]
 800e510:	3202      	adds	r2, #2
 800e512:	429a      	cmp	r2, r3
 800e514:	f000 80bc 	beq.w	800e690 <Motenv_Event_Handler+0x238>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWActivityRecCharHdle + 2U))
 800e518:	89f2      	ldrh	r2, [r6, #14]
 800e51a:	3202      	adds	r2, #2
 800e51c:	429a      	cmp	r2, r3
 800e51e:	f000 80d3 	beq.w	800e6c8 <Motenv_Event_Handler+0x270>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWCarryPositionCharHdle + 2U))
 800e522:	8a32      	ldrh	r2, [r6, #16]
 800e524:	3202      	adds	r2, #2
 800e526:	429a      	cmp	r2, r3
 800e528:	f000 80e1 	beq.w	800e6ee <Motenv_Event_Handler+0x296>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWGestureRecCharHdle + 2U))
 800e52c:	8a72      	ldrh	r2, [r6, #18]
 800e52e:	3202      	adds	r2, #2
 800e530:	429a      	cmp	r2, r3
 800e532:	f000 80ef 	beq.w	800e714 <Motenv_Event_Handler+0x2bc>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWPedometerCharHdle + 2U))
 800e536:	8ab2      	ldrh	r2, [r6, #20]
 800e538:	3202      	adds	r2, #2
 800e53a:	429a      	cmp	r2, r3
 800e53c:	f000 80fd 	beq.w	800e73a <Motenv_Event_Handler+0x2e2>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWIntensityDetCharHdle + 2U))
 800e540:	8af2      	ldrh	r2, [r6, #22]
 800e542:	3202      	adds	r2, #2
 800e544:	429a      	cmp	r2, r3
 800e546:	f000 810b 	beq.w	800e760 <Motenv_Event_Handler+0x308>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.ConfigCharHdle + 2U))
 800e54a:	8b72      	ldrh	r2, [r6, #26]
 800e54c:	1c91      	adds	r1, r2, #2
 800e54e:	4299      	cmp	r1, r3
 800e550:	f000 811c 	beq.w	800e78c <Motenv_Event_Handler+0x334>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.ConfigCharHdle + 1U))
 800e554:	3201      	adds	r2, #1
 800e556:	429a      	cmp	r2, r3
 800e558:	f000 813e 	beq.w	800e7d8 <Motenv_Event_Handler+0x380>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.ConsoleTermCharHdle + 2U))
 800e55c:	8bf2      	ldrh	r2, [r6, #30]
 800e55e:	3202      	adds	r2, #2
 800e560:	429a      	cmp	r2, r3
 800e562:	f000 8126 	beq.w	800e7b2 <Motenv_Event_Handler+0x35a>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.ConsoleStderrCharHdle + 2U))
 800e566:	8c32      	ldrh	r2, [r6, #32]
 800e568:	3202      	adds	r2, #2
 800e56a:	429a      	cmp	r2, r3
 800e56c:	f47f af7a 	bne.w	800e464 <Motenv_Event_Handler+0xc>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e570:	7b65      	ldrb	r5, [r4, #13]
 800e572:	f015 0501 	ands.w	r5, r5, #1
 800e576:	f000 813c 	beq.w	800e7f2 <Motenv_Event_Handler+0x39a>
              Notification.Motenv_Evt_Opcode = CONSOLE_STDERR_NOTIFY_ENABLED_EVT;
 800e57a:	231f      	movs	r3, #31
              MOTENV_STM_App_Notification(&Notification);
 800e57c:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = CONSOLE_STDERR_NOTIFY_ENABLED_EVT;
 800e57e:	f88d 3000 	strb.w	r3, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e582:	f7f4 fd65 	bl	8003050 <MOTENV_STM_App_Notification>
 800e586:	e76d      	b.n	800e464 <Motenv_Event_Handler+0xc>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e588:	7b65      	ldrb	r5, [r4, #13]
 800e58a:	f015 0501 	ands.w	r5, r5, #1
 800e58e:	d078      	beq.n	800e682 <Motenv_Event_Handler+0x22a>
              Notification.Motenv_Evt_Opcode = HW_MOTION_NOTIFY_ENABLED_EVT;
 800e590:	2300      	movs	r3, #0
              MOTENV_STM_App_Notification(&Notification);
 800e592:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = HW_MOTION_NOTIFY_ENABLED_EVT;
 800e594:	f88d 3000 	strb.w	r3, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e598:	f7f4 fd5a 	bl	8003050 <MOTENV_STM_App_Notification>
 800e59c:	e762      	b.n	800e464 <Motenv_Event_Handler+0xc>
            Notification.Motenv_Evt_Opcode = SW_GESTURE_REC_READ_EVT;
 800e59e:	2314      	movs	r3, #20
            MOTENV_STM_App_Notification(&Notification);
 800e5a0:	4668      	mov	r0, sp
            Notification.Motenv_Evt_Opcode = SW_GESTURE_REC_READ_EVT;
 800e5a2:	f88d 3000 	strb.w	r3, [sp]
            MOTENV_STM_App_Notification(&Notification);
 800e5a6:	f7f4 fd53 	bl	8003050 <MOTENV_STM_App_Notification>
          if(read_permit_req->Attribute_Handle == (aMotenvContext.ConsoleTermCharHdle + 1U))
 800e5aa:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800e5ae:	e787      	b.n	800e4c0 <Motenv_Event_Handler+0x68>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e5b0:	7b65      	ldrb	r5, [r4, #13]
 800e5b2:	f015 0501 	ands.w	r5, r5, #1
 800e5b6:	d035      	beq.n	800e624 <Motenv_Event_Handler+0x1cc>
              Notification.Motenv_Evt_Opcode = HW_ACC_EVENT_NOTIFY_ENABLED_EVT;
 800e5b8:	2305      	movs	r3, #5
              MOTENV_STM_App_Notification(&Notification);
 800e5ba:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = HW_ACC_EVENT_NOTIFY_ENABLED_EVT;
 800e5bc:	f88d 3000 	strb.w	r3, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e5c0:	f7f4 fd46 	bl	8003050 <MOTENV_STM_App_Notification>
 800e5c4:	e74e      	b.n	800e464 <Motenv_Event_Handler+0xc>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e5c6:	7b45      	ldrb	r5, [r0, #13]
 800e5c8:	f015 0501 	ands.w	r5, r5, #1
 800e5cc:	d032      	beq.n	800e634 <Motenv_Event_Handler+0x1dc>
              Notification.Motenv_Evt_Opcode = HW_ENV_NOTIFY_ENABLED_EVT;
 800e5ce:	2302      	movs	r3, #2
              MOTENV_STM_App_Notification(&Notification);
 800e5d0:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = HW_ENV_NOTIFY_ENABLED_EVT;
 800e5d2:	f88d 3000 	strb.w	r3, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e5d6:	f7f4 fd3b 	bl	8003050 <MOTENV_STM_App_Notification>
          if(attribute_modified->Attr_Handle == (aMotenvContext.HWAccEventCharHdle + 2U))
 800e5da:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800e5de:	e789      	b.n	800e4f4 <Motenv_Event_Handler+0x9c>
            Notification.Motenv_Evt_Opcode = CONSOLE_TERM_READ_EVT;
 800e5e0:	2321      	movs	r3, #33	; 0x21
            MOTENV_STM_App_Notification(&Notification);
 800e5e2:	4668      	mov	r0, sp
            Notification.Motenv_Evt_Opcode = CONSOLE_TERM_READ_EVT;
 800e5e4:	f88d 3000 	strb.w	r3, [sp]
            MOTENV_STM_App_Notification(&Notification);
 800e5e8:	f7f4 fd32 	bl	8003050 <MOTENV_STM_App_Notification>
          if(read_permit_req->Attribute_Handle == (aMotenvContext.ConsoleStderrCharHdle + 1U))
 800e5ec:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800e5f0:	e76b      	b.n	800e4ca <Motenv_Event_Handler+0x72>
            Notification.Motenv_Evt_Opcode = CONSOLE_STDERR_READ_EVT;
 800e5f2:	2322      	movs	r3, #34	; 0x22
            MOTENV_STM_App_Notification(&Notification);
 800e5f4:	4668      	mov	r0, sp
            Notification.Motenv_Evt_Opcode = CONSOLE_STDERR_READ_EVT;
 800e5f6:	f88d 3000 	strb.w	r3, [sp]
            MOTENV_STM_App_Notification(&Notification);
 800e5fa:	f7f4 fd29 	bl	8003050 <MOTENV_STM_App_Notification>
 800e5fe:	e769      	b.n	800e4d4 <Motenv_Event_Handler+0x7c>
            Notification.Motenv_Evt_Opcode = HW_ACC_EVENT_READ_EVT;
 800e600:	2307      	movs	r3, #7
            MOTENV_STM_App_Notification(&Notification);
 800e602:	4668      	mov	r0, sp
            Notification.Motenv_Evt_Opcode = HW_ACC_EVENT_READ_EVT;
 800e604:	f88d 3000 	strb.w	r3, [sp]
            MOTENV_STM_App_Notification(&Notification);
 800e608:	f7f4 fd22 	bl	8003050 <MOTENV_STM_App_Notification>
          if(read_permit_req->Attribute_Handle == (aMotenvContext.ConsoleTermCharHdle + 1U))
 800e60c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800e610:	e756      	b.n	800e4c0 <Motenv_Event_Handler+0x68>
            Notification.Motenv_Evt_Opcode = HW_ENV_READ_EVT;
 800e612:	2304      	movs	r3, #4
            MOTENV_STM_App_Notification(&Notification);
 800e614:	4668      	mov	r0, sp
            Notification.Motenv_Evt_Opcode = HW_ENV_READ_EVT;
 800e616:	f88d 3000 	strb.w	r3, [sp]
            MOTENV_STM_App_Notification(&Notification);
 800e61a:	f7f4 fd19 	bl	8003050 <MOTENV_STM_App_Notification>
          if(read_permit_req->Attribute_Handle == (aMotenvContext.HWAccEventCharHdle + 1U))
 800e61e:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800e622:	e735      	b.n	800e490 <Motenv_Event_Handler+0x38>
              Notification.Motenv_Evt_Opcode = HW_ACC_EVENT_NOTIFY_DISABLED_EVT;
 800e624:	2306      	movs	r3, #6
              MOTENV_STM_App_Notification(&Notification);
 800e626:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = HW_ACC_EVENT_NOTIFY_DISABLED_EVT;
 800e628:	f88d 3000 	strb.w	r3, [sp]
            return_value = SVCCTL_EvtAckFlowEnable;
 800e62c:	2501      	movs	r5, #1
              MOTENV_STM_App_Notification(&Notification);
 800e62e:	f7f4 fd0f 	bl	8003050 <MOTENV_STM_App_Notification>
 800e632:	e717      	b.n	800e464 <Motenv_Event_Handler+0xc>
              Notification.Motenv_Evt_Opcode = HW_ENV_NOTIFY_DISABLED_EVT;
 800e634:	2303      	movs	r3, #3
              MOTENV_STM_App_Notification(&Notification);
 800e636:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = HW_ENV_NOTIFY_DISABLED_EVT;
 800e638:	f88d 3000 	strb.w	r3, [sp]
            return_value = SVCCTL_EvtAckFlowEnable;
 800e63c:	2501      	movs	r5, #1
              MOTENV_STM_App_Notification(&Notification);
 800e63e:	f7f4 fd07 	bl	8003050 <MOTENV_STM_App_Notification>
          if(attribute_modified->Attr_Handle == (aMotenvContext.HWAccEventCharHdle + 2U))
 800e642:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800e646:	e755      	b.n	800e4f4 <Motenv_Event_Handler+0x9c>
            Notification.Motenv_Evt_Opcode = SW_ACTIVITY_REC_READ_EVT;
 800e648:	230e      	movs	r3, #14
            MOTENV_STM_App_Notification(&Notification);
 800e64a:	4668      	mov	r0, sp
            Notification.Motenv_Evt_Opcode = SW_ACTIVITY_REC_READ_EVT;
 800e64c:	f88d 3000 	strb.w	r3, [sp]
            MOTENV_STM_App_Notification(&Notification);
 800e650:	f7f4 fcfe 	bl	8003050 <MOTENV_STM_App_Notification>
          if(read_permit_req->Attribute_Handle == (aMotenvContext.ConsoleTermCharHdle + 1U))
 800e654:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800e658:	e732      	b.n	800e4c0 <Motenv_Event_Handler+0x68>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e65a:	7b65      	ldrb	r5, [r4, #13]
 800e65c:	f015 0501 	ands.w	r5, r5, #1
 800e660:	d02a      	beq.n	800e6b8 <Motenv_Event_Handler+0x260>
              Notification.Motenv_Evt_Opcode = SW_MOTIONFX_NOTIFY_ENABLED_EVT;
 800e662:	2308      	movs	r3, #8
              MOTENV_STM_App_Notification(&Notification);
 800e664:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_MOTIONFX_NOTIFY_ENABLED_EVT;
 800e666:	f88d 3000 	strb.w	r3, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e66a:	f7f4 fcf1 	bl	8003050 <MOTENV_STM_App_Notification>
 800e66e:	e6f9      	b.n	800e464 <Motenv_Event_Handler+0xc>
            Notification.Motenv_Evt_Opcode = SW_CARRY_POSITION_READ_EVT;
 800e670:	2311      	movs	r3, #17
            MOTENV_STM_App_Notification(&Notification);
 800e672:	4668      	mov	r0, sp
            Notification.Motenv_Evt_Opcode = SW_CARRY_POSITION_READ_EVT;
 800e674:	f88d 3000 	strb.w	r3, [sp]
            MOTENV_STM_App_Notification(&Notification);
 800e678:	f7f4 fcea 	bl	8003050 <MOTENV_STM_App_Notification>
          if(read_permit_req->Attribute_Handle == (aMotenvContext.ConsoleTermCharHdle + 1U))
 800e67c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800e680:	e71e      	b.n	800e4c0 <Motenv_Event_Handler+0x68>
              Notification.Motenv_Evt_Opcode = HW_MOTION_NOTIFY_DISABLED_EVT;
 800e682:	2501      	movs	r5, #1
              MOTENV_STM_App_Notification(&Notification);
 800e684:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = HW_MOTION_NOTIFY_DISABLED_EVT;
 800e686:	f88d 5000 	strb.w	r5, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e68a:	f7f4 fce1 	bl	8003050 <MOTENV_STM_App_Notification>
 800e68e:	e6e9      	b.n	800e464 <Motenv_Event_Handler+0xc>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e690:	7b65      	ldrb	r5, [r4, #13]
 800e692:	f015 0501 	ands.w	r5, r5, #1
 800e696:	d022      	beq.n	800e6de <Motenv_Event_Handler+0x286>
              Notification.Motenv_Evt_Opcode = SW_ECOMPASS_NOTIFY_ENABLED_EVT;
 800e698:	230a      	movs	r3, #10
              MOTENV_STM_App_Notification(&Notification);
 800e69a:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_ECOMPASS_NOTIFY_ENABLED_EVT;
 800e69c:	f88d 3000 	strb.w	r3, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e6a0:	f7f4 fcd6 	bl	8003050 <MOTENV_STM_App_Notification>
 800e6a4:	e6de      	b.n	800e464 <Motenv_Event_Handler+0xc>
            Notification.Motenv_Evt_Opcode = SW_PEDOMETER_READ_EVT;
 800e6a6:	2317      	movs	r3, #23
            MOTENV_STM_App_Notification(&Notification);
 800e6a8:	4668      	mov	r0, sp
            Notification.Motenv_Evt_Opcode = SW_PEDOMETER_READ_EVT;
 800e6aa:	f88d 3000 	strb.w	r3, [sp]
            MOTENV_STM_App_Notification(&Notification);
 800e6ae:	f7f4 fccf 	bl	8003050 <MOTENV_STM_App_Notification>
          if(read_permit_req->Attribute_Handle == (aMotenvContext.ConsoleTermCharHdle + 1U))
 800e6b2:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800e6b6:	e703      	b.n	800e4c0 <Motenv_Event_Handler+0x68>
              Notification.Motenv_Evt_Opcode = SW_MOTIONFX_NOTIFY_DISABLED_EVT;
 800e6b8:	2309      	movs	r3, #9
              MOTENV_STM_App_Notification(&Notification);
 800e6ba:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_MOTIONFX_NOTIFY_DISABLED_EVT;
 800e6bc:	f88d 3000 	strb.w	r3, [sp]
            return_value = SVCCTL_EvtAckFlowEnable;
 800e6c0:	2501      	movs	r5, #1
              MOTENV_STM_App_Notification(&Notification);
 800e6c2:	f7f4 fcc5 	bl	8003050 <MOTENV_STM_App_Notification>
 800e6c6:	e6cd      	b.n	800e464 <Motenv_Event_Handler+0xc>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e6c8:	7b65      	ldrb	r5, [r4, #13]
 800e6ca:	f015 0501 	ands.w	r5, r5, #1
 800e6ce:	d019      	beq.n	800e704 <Motenv_Event_Handler+0x2ac>
              Notification.Motenv_Evt_Opcode = SW_ACTIVITY_REC_NOTIFY_ENABLED_EVT;
 800e6d0:	230c      	movs	r3, #12
              MOTENV_STM_App_Notification(&Notification);
 800e6d2:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_ACTIVITY_REC_NOTIFY_ENABLED_EVT;
 800e6d4:	f88d 3000 	strb.w	r3, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e6d8:	f7f4 fcba 	bl	8003050 <MOTENV_STM_App_Notification>
 800e6dc:	e6c2      	b.n	800e464 <Motenv_Event_Handler+0xc>
              Notification.Motenv_Evt_Opcode = SW_ECOMPASS_NOTIFY_DISABLED_EVT;
 800e6de:	230b      	movs	r3, #11
              MOTENV_STM_App_Notification(&Notification);
 800e6e0:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_ECOMPASS_NOTIFY_DISABLED_EVT;
 800e6e2:	f88d 3000 	strb.w	r3, [sp]
            return_value = SVCCTL_EvtAckFlowEnable;
 800e6e6:	2501      	movs	r5, #1
              MOTENV_STM_App_Notification(&Notification);
 800e6e8:	f7f4 fcb2 	bl	8003050 <MOTENV_STM_App_Notification>
 800e6ec:	e6ba      	b.n	800e464 <Motenv_Event_Handler+0xc>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e6ee:	7b65      	ldrb	r5, [r4, #13]
 800e6f0:	f015 0501 	ands.w	r5, r5, #1
 800e6f4:	d019      	beq.n	800e72a <Motenv_Event_Handler+0x2d2>
              Notification.Motenv_Evt_Opcode = SW_CARRY_POSITION_NOTIFY_ENABLED_EVT;
 800e6f6:	230f      	movs	r3, #15
              MOTENV_STM_App_Notification(&Notification);
 800e6f8:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_CARRY_POSITION_NOTIFY_ENABLED_EVT;
 800e6fa:	f88d 3000 	strb.w	r3, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e6fe:	f7f4 fca7 	bl	8003050 <MOTENV_STM_App_Notification>
 800e702:	e6af      	b.n	800e464 <Motenv_Event_Handler+0xc>
              Notification.Motenv_Evt_Opcode = SW_ACTIVITY_REC_NOTIFY_DISABLED_EVT;
 800e704:	230d      	movs	r3, #13
              MOTENV_STM_App_Notification(&Notification);
 800e706:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_ACTIVITY_REC_NOTIFY_DISABLED_EVT;
 800e708:	f88d 3000 	strb.w	r3, [sp]
            return_value = SVCCTL_EvtAckFlowEnable;
 800e70c:	2501      	movs	r5, #1
              MOTENV_STM_App_Notification(&Notification);
 800e70e:	f7f4 fc9f 	bl	8003050 <MOTENV_STM_App_Notification>
 800e712:	e6a7      	b.n	800e464 <Motenv_Event_Handler+0xc>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e714:	7b65      	ldrb	r5, [r4, #13]
 800e716:	f015 0501 	ands.w	r5, r5, #1
 800e71a:	d019      	beq.n	800e750 <Motenv_Event_Handler+0x2f8>
              Notification.Motenv_Evt_Opcode = SW_GESTURE_REC_NOTIFY_ENABLED_EVT;
 800e71c:	2312      	movs	r3, #18
              MOTENV_STM_App_Notification(&Notification);
 800e71e:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_GESTURE_REC_NOTIFY_ENABLED_EVT;
 800e720:	f88d 3000 	strb.w	r3, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e724:	f7f4 fc94 	bl	8003050 <MOTENV_STM_App_Notification>
 800e728:	e69c      	b.n	800e464 <Motenv_Event_Handler+0xc>
              Notification.Motenv_Evt_Opcode = SW_CARRY_POSITION_NOTIFY_DISABLED_EVT;
 800e72a:	2310      	movs	r3, #16
              MOTENV_STM_App_Notification(&Notification);
 800e72c:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_CARRY_POSITION_NOTIFY_DISABLED_EVT;
 800e72e:	f88d 3000 	strb.w	r3, [sp]
            return_value = SVCCTL_EvtAckFlowEnable;
 800e732:	2501      	movs	r5, #1
              MOTENV_STM_App_Notification(&Notification);
 800e734:	f7f4 fc8c 	bl	8003050 <MOTENV_STM_App_Notification>
 800e738:	e694      	b.n	800e464 <Motenv_Event_Handler+0xc>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e73a:	7b65      	ldrb	r5, [r4, #13]
 800e73c:	f015 0501 	ands.w	r5, r5, #1
 800e740:	d019      	beq.n	800e776 <Motenv_Event_Handler+0x31e>
              Notification.Motenv_Evt_Opcode = SW_PEDOMETER_NOTIFY_ENABLED_EVT;
 800e742:	2315      	movs	r3, #21
              MOTENV_STM_App_Notification(&Notification);
 800e744:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_PEDOMETER_NOTIFY_ENABLED_EVT;
 800e746:	f88d 3000 	strb.w	r3, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e74a:	f7f4 fc81 	bl	8003050 <MOTENV_STM_App_Notification>
 800e74e:	e689      	b.n	800e464 <Motenv_Event_Handler+0xc>
              Notification.Motenv_Evt_Opcode = SW_GESTURE_REC_NOTIFY_DISABLED_EVT;
 800e750:	2313      	movs	r3, #19
              MOTENV_STM_App_Notification(&Notification);
 800e752:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_GESTURE_REC_NOTIFY_DISABLED_EVT;
 800e754:	f88d 3000 	strb.w	r3, [sp]
            return_value = SVCCTL_EvtAckFlowEnable;
 800e758:	2501      	movs	r5, #1
              MOTENV_STM_App_Notification(&Notification);
 800e75a:	f7f4 fc79 	bl	8003050 <MOTENV_STM_App_Notification>
 800e75e:	e681      	b.n	800e464 <Motenv_Event_Handler+0xc>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e760:	7b65      	ldrb	r5, [r4, #13]
 800e762:	f015 0501 	ands.w	r5, r5, #1
 800e766:	d01c      	beq.n	800e7a2 <Motenv_Event_Handler+0x34a>
              Notification.Motenv_Evt_Opcode = SW_INTENSITY_DET_NOTIFY_ENABLED_EVT;
 800e768:	2318      	movs	r3, #24
              MOTENV_STM_App_Notification(&Notification);
 800e76a:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_INTENSITY_DET_NOTIFY_ENABLED_EVT;
 800e76c:	f88d 3000 	strb.w	r3, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e770:	f7f4 fc6e 	bl	8003050 <MOTENV_STM_App_Notification>
 800e774:	e676      	b.n	800e464 <Motenv_Event_Handler+0xc>
              Notification.Motenv_Evt_Opcode = SW_PEDOMETER_NOTIFY_DISABLED_EVT;
 800e776:	2316      	movs	r3, #22
              MOTENV_STM_App_Notification(&Notification);
 800e778:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_PEDOMETER_NOTIFY_DISABLED_EVT;
 800e77a:	f88d 3000 	strb.w	r3, [sp]
            return_value = SVCCTL_EvtAckFlowEnable;
 800e77e:	2501      	movs	r5, #1
              MOTENV_STM_App_Notification(&Notification);
 800e780:	f7f4 fc66 	bl	8003050 <MOTENV_STM_App_Notification>
 800e784:	e66e      	b.n	800e464 <Motenv_Event_Handler+0xc>
 800e786:	bf00      	nop
 800e788:	200005d0 	.word	0x200005d0
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e78c:	7b65      	ldrb	r5, [r4, #13]
 800e78e:	f015 0501 	ands.w	r5, r5, #1
 800e792:	d019      	beq.n	800e7c8 <Motenv_Event_Handler+0x370>
              Notification.Motenv_Evt_Opcode = CONFIG_NOTIFY_ENABLED_EVT;
 800e794:	231a      	movs	r3, #26
              MOTENV_STM_App_Notification(&Notification);
 800e796:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = CONFIG_NOTIFY_ENABLED_EVT;
 800e798:	f88d 3000 	strb.w	r3, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e79c:	f7f4 fc58 	bl	8003050 <MOTENV_STM_App_Notification>
 800e7a0:	e660      	b.n	800e464 <Motenv_Event_Handler+0xc>
              Notification.Motenv_Evt_Opcode = SW_INTENSITY_DET_NOTIFY_DISABLED_EVT;
 800e7a2:	2319      	movs	r3, #25
              MOTENV_STM_App_Notification(&Notification);
 800e7a4:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = SW_INTENSITY_DET_NOTIFY_DISABLED_EVT;
 800e7a6:	f88d 3000 	strb.w	r3, [sp]
            return_value = SVCCTL_EvtAckFlowEnable;
 800e7aa:	2501      	movs	r5, #1
              MOTENV_STM_App_Notification(&Notification);
 800e7ac:	f7f4 fc50 	bl	8003050 <MOTENV_STM_App_Notification>
 800e7b0:	e658      	b.n	800e464 <Motenv_Event_Handler+0xc>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800e7b2:	7b65      	ldrb	r5, [r4, #13]
 800e7b4:	f015 0501 	ands.w	r5, r5, #1
 800e7b8:	d023      	beq.n	800e802 <Motenv_Event_Handler+0x3aa>
              Notification.Motenv_Evt_Opcode = CONSOLE_TERM_NOTIFY_ENABLED_EVT;
 800e7ba:	231d      	movs	r3, #29
              MOTENV_STM_App_Notification(&Notification);
 800e7bc:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = CONSOLE_TERM_NOTIFY_ENABLED_EVT;
 800e7be:	f88d 3000 	strb.w	r3, [sp]
              MOTENV_STM_App_Notification(&Notification);
 800e7c2:	f7f4 fc45 	bl	8003050 <MOTENV_STM_App_Notification>
 800e7c6:	e64d      	b.n	800e464 <Motenv_Event_Handler+0xc>
              Notification.Motenv_Evt_Opcode = CONFIG_NOTIFY_DISABLED_EVT;
 800e7c8:	231b      	movs	r3, #27
              MOTENV_STM_App_Notification(&Notification);
 800e7ca:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = CONFIG_NOTIFY_DISABLED_EVT;
 800e7cc:	f88d 3000 	strb.w	r3, [sp]
            return_value = SVCCTL_EvtAckFlowEnable;
 800e7d0:	2501      	movs	r5, #1
              MOTENV_STM_App_Notification(&Notification);
 800e7d2:	f7f4 fc3d 	bl	8003050 <MOTENV_STM_App_Notification>
 800e7d6:	e645      	b.n	800e464 <Motenv_Event_Handler+0xc>
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800e7d8:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 800e7dc:	f88d 3008 	strb.w	r3, [sp, #8]
            Notification.Motenv_Evt_Opcode = CONFIG_WRITE_EVT;
 800e7e0:	221c      	movs	r2, #28
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800e7e2:	340d      	adds	r4, #13
            MOTENV_STM_App_Notification(&Notification);
 800e7e4:	4668      	mov	r0, sp
            Notification.Motenv_Evt_Opcode = CONFIG_WRITE_EVT;
 800e7e6:	f88d 2000 	strb.w	r2, [sp]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800e7ea:	9401      	str	r4, [sp, #4]
            MOTENV_STM_App_Notification(&Notification);
 800e7ec:	f7f4 fc30 	bl	8003050 <MOTENV_STM_App_Notification>
 800e7f0:	e638      	b.n	800e464 <Motenv_Event_Handler+0xc>
              Notification.Motenv_Evt_Opcode = CONSOLE_STDERR_NOTIFY_DISABLED_EVT;
 800e7f2:	2320      	movs	r3, #32
              MOTENV_STM_App_Notification(&Notification);
 800e7f4:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = CONSOLE_STDERR_NOTIFY_DISABLED_EVT;
 800e7f6:	f88d 3000 	strb.w	r3, [sp]
            return_value = SVCCTL_EvtAckFlowEnable;
 800e7fa:	2501      	movs	r5, #1
              MOTENV_STM_App_Notification(&Notification);
 800e7fc:	f7f4 fc28 	bl	8003050 <MOTENV_STM_App_Notification>
 800e800:	e630      	b.n	800e464 <Motenv_Event_Handler+0xc>
              Notification.Motenv_Evt_Opcode = CONSOLE_TERM_NOTIFY_DISABLED_EVT;
 800e802:	231e      	movs	r3, #30
              MOTENV_STM_App_Notification(&Notification);
 800e804:	4668      	mov	r0, sp
              Notification.Motenv_Evt_Opcode = CONSOLE_TERM_NOTIFY_DISABLED_EVT;
 800e806:	f88d 3000 	strb.w	r3, [sp]
            return_value = SVCCTL_EvtAckFlowEnable;
 800e80a:	2501      	movs	r5, #1
              MOTENV_STM_App_Notification(&Notification);
 800e80c:	f7f4 fc20 	bl	8003050 <MOTENV_STM_App_Notification>
 800e810:	e628      	b.n	800e464 <Motenv_Event_Handler+0xc>
 800e812:	bf00      	nop

0800e814 <MOTENV_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void MOTENV_STM_Init(void)
{
 800e814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Char_UUID_t uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Motenv_Event_Handler);
 800e818:	48b5      	ldr	r0, [pc, #724]	; (800eaf0 <MOTENV_STM_Init+0x2dc>)
  
  /**
   *   Add HW Service
   */
  COPY_HW_SERVICE_UUID(uuid16.Char_UUID_128);
 800e81a:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 800eb08 <MOTENV_STM_Init+0x2f4>
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800e81e:	4cb5      	ldr	r4, [pc, #724]	; (800eaf4 <MOTENV_STM_Init+0x2e0>)
  COPY_HW_SERVICE_UUID(uuid16.Char_UUID_128);
 800e820:	4fb5      	ldr	r7, [pc, #724]	; (800eaf8 <MOTENV_STM_Init+0x2e4>)
                             1+(3*HW_CHAR_NUMBER), /*Max_Attribute_Records*/
                             &(aMotenvContext.HWSvcHdle));
  /**
   *   Add Motion Characteristic for HW Service
   */
  COPY_HW_MOTION_CHAR_UUID(uuid16.Char_UUID_128);
 800e822:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 800eb0c <MOTENV_STM_Init+0x2f8>
{
 800e826:	b08b      	sub	sp, #44	; 0x2c
  SVCCTL_RegisterSvcHandler(Motenv_Event_Handler);
 800e828:	f000 fc48 	bl	800f0bc <SVCCTL_RegisterSvcHandler>
  COPY_HW_SERVICE_UUID(uuid16.Char_UUID_128);
 800e82c:	4bb3      	ldr	r3, [pc, #716]	; (800eafc <MOTENV_STM_Init+0x2e8>)
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800e82e:	9400      	str	r4, [sp, #0]
  COPY_HW_SERVICE_UUID(uuid16.Char_UUID_128);
 800e830:	2500      	movs	r5, #0
 800e832:	e9cd 3a07 	strd	r3, sl, [sp, #28]
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800e836:	a906      	add	r1, sp, #24
 800e838:	230a      	movs	r3, #10
 800e83a:	2201      	movs	r2, #1
 800e83c:	2002      	movs	r0, #2
  (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800e83e:	2610      	movs	r6, #16
  COPY_HW_SERVICE_UUID(uuid16.Char_UUID_128);
 800e840:	9706      	str	r7, [sp, #24]
 800e842:	9509      	str	r5, [sp, #36]	; 0x24
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800e844:	f7ff faee 	bl	800de24 <aci_gatt_add_service>
  (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800e848:	4623      	mov	r3, r4
 800e84a:	9504      	str	r5, [sp, #16]
 800e84c:	9501      	str	r5, [sp, #4]
 800e84e:	9603      	str	r6, [sp, #12]
 800e850:	9600      	str	r6, [sp, #0]
 800e852:	f04f 0804 	mov.w	r8, #4
 800e856:	f833 0b02 	ldrh.w	r0, [r3], #2
 800e85a:	9305      	str	r3, [sp, #20]
 800e85c:	aa06      	add	r2, sp, #24
  COPY_HW_MOTION_CHAR_UUID(uuid16.Char_UUID_128);
 800e85e:	f44f 0c60 	mov.w	ip, #14680064	; 0xe00000
  (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800e862:	f8cd 8008 	str.w	r8, [sp, #8]
 800e866:	2314      	movs	r3, #20
 800e868:	2102      	movs	r1, #2
  COPY_HW_MOTION_CHAR_UUID(uuid16.Char_UUID_128);
 800e86a:	f8cd a020 	str.w	sl, [sp, #32]
 800e86e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e872:	9706      	str	r7, [sp, #24]
 800e874:	f8cd b01c 	str.w	fp, [sp, #28]
  (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800e878:	f7ff fb32 	bl	800dee0 <aci_gatt_add_char>

    /**
     *   Add Env Characteristic for HW Service
     */
    COPY_HW_ENV_CHAR_UUID(uuid16.Char_UUID_128);
    (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800e87c:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800e880:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800e884:	4623      	mov	r3, r4
 800e886:	2212      	movs	r2, #18
 800e888:	9200      	str	r2, [sp, #0]
 800e88a:	f833 0b04 	ldrh.w	r0, [r3], #4
 800e88e:	9305      	str	r3, [sp, #20]
 800e890:	aa06      	add	r2, sp, #24
    COPY_HW_ENV_CHAR_UUID(uuid16.Char_UUID_128);
 800e892:	f44f 1ce8 	mov.w	ip, #1900544	; 0x1d0000
    (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800e896:	230c      	movs	r3, #12
 800e898:	2102      	movs	r1, #2
    COPY_HW_ENV_CHAR_UUID(uuid16.Char_UUID_128);
 800e89a:	f8cd a020 	str.w	sl, [sp, #32]
 800e89e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e8a2:	e9cd 7b06 	strd	r7, fp, [sp, #24]
    (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800e8a6:	f7ff fb1b 	bl	800dee0 <aci_gatt_add_char>

    /**
     *   Add Acc Event Characteristic for HW Service
     */
    COPY_HW_ACC_EVENT_CHAR_UUID(uuid16.Char_UUID_128);
    (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800e8aa:	e9cd 8602 	strd	r8, r6, [sp, #8]
 800e8ae:	2212      	movs	r2, #18
 800e8b0:	9200      	str	r2, [sp, #0]
 800e8b2:	4623      	mov	r3, r4
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	9204      	str	r2, [sp, #16]
 800e8b8:	9501      	str	r5, [sp, #4]
 800e8ba:	f833 0b06 	ldrh.w	r0, [r3], #6
 800e8be:	9305      	str	r3, [sp, #20]
    COPY_HW_ACC_EVENT_CHAR_UUID(uuid16.Char_UUID_128);
 800e8c0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800e8c4:	aa06      	add	r2, sp, #24
 800e8c6:	2305      	movs	r3, #5
 800e8c8:	2102      	movs	r1, #2
    COPY_HW_ACC_EVENT_CHAR_UUID(uuid16.Char_UUID_128);
 800e8ca:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e8ce:	f8cd a020 	str.w	sl, [sp, #32]
 800e8d2:	e9cd 7b06 	strd	r7, fp, [sp, #24]
    (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800e8d6:	f7ff fb03 	bl	800dee0 <aci_gatt_add_char>
                            &(aMotenvContext.HWAccEventCharHdle));

  /**
   *   Add SW Service
   */
  COPY_SW_SERVICE_UUID(uuid16.Char_UUID_128);
 800e8da:	4b88      	ldr	r3, [pc, #544]	; (800eafc <MOTENV_STM_Init+0x2e8>)
 800e8dc:	9307      	str	r3, [sp, #28]
 800e8de:	4888      	ldr	r0, [pc, #544]	; (800eb00 <MOTENV_STM_Init+0x2ec>)
 800e8e0:	9008      	str	r0, [sp, #32]
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800e8e2:	f104 0308 	add.w	r3, r4, #8
 800e8e6:	9300      	str	r3, [sp, #0]
 800e8e8:	a906      	add	r1, sp, #24
 800e8ea:	2316      	movs	r3, #22
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	2002      	movs	r0, #2
  COPY_SW_SERVICE_UUID(uuid16.Char_UUID_128);
 800e8f0:	9706      	str	r7, [sp, #24]
 800e8f2:	9509      	str	r5, [sp, #36]	; 0x24
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800e8f4:	f7ff fa96 	bl	800de24 <aci_gatt_add_service>

  /**
   *   Add Quaternions Characteristic for SW Service
   */
  COPY_SW_QUATERNIONS_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e8f8:	f104 030a 	add.w	r3, r4, #10
 800e8fc:	9305      	str	r3, [sp, #20]
 800e8fe:	aa06      	add	r2, sp, #24
  COPY_SW_QUATERNIONS_CHAR_UUID(uuid16.Char_UUID_128);
 800e900:	f44f 7c80 	mov.w	ip, #256	; 0x100
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e904:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800e908:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800e90c:	8920      	ldrh	r0, [r4, #8]
 800e90e:	9600      	str	r6, [sp, #0]
 800e910:	2316      	movs	r3, #22
 800e912:	2102      	movs	r1, #2
  COPY_SW_QUATERNIONS_CHAR_UUID(uuid16.Char_UUID_128);
 800e914:	f8cd a020 	str.w	sl, [sp, #32]
 800e918:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e91c:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e920:	f7ff fade 	bl	800dee0 <aci_gatt_add_char>

  /**
   *   Add ECompass Characteristic for SW Service
   */
  COPY_SW_ECOMPASS_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e924:	f104 030c 	add.w	r3, r4, #12
  COPY_SW_ECOMPASS_CHAR_UUID(uuid16.Char_UUID_128);
 800e928:	f04f 0c40 	mov.w	ip, #64	; 0x40
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e92c:	9305      	str	r3, [sp, #20]
 800e92e:	aa06      	add	r2, sp, #24
 800e930:	4643      	mov	r3, r8
 800e932:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800e936:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800e93a:	8920      	ldrh	r0, [r4, #8]
 800e93c:	9600      	str	r6, [sp, #0]
 800e93e:	2102      	movs	r1, #2
  COPY_SW_ECOMPASS_CHAR_UUID(uuid16.Char_UUID_128);
 800e940:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e944:	f8cd a020 	str.w	sl, [sp, #32]
 800e948:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e94c:	f7ff fac8 	bl	800dee0 <aci_gatt_add_char>

  /**
   *   Add Activity Rec Characteristic for SW Service
   */
  COPY_SW_ACTIVITY_REC_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e950:	f104 030e 	add.w	r3, r4, #14
 800e954:	2212      	movs	r2, #18
 800e956:	9200      	str	r2, [sp, #0]
 800e958:	9305      	str	r3, [sp, #20]
 800e95a:	aa06      	add	r2, sp, #24
 800e95c:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800e960:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800e964:	8920      	ldrh	r0, [r4, #8]
 800e966:	2303      	movs	r3, #3
 800e968:	2102      	movs	r1, #2
  COPY_SW_ACTIVITY_REC_CHAR_UUID(uuid16.Char_UUID_128);
 800e96a:	e9cd a608 	strd	sl, r6, [sp, #32]
 800e96e:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e972:	f7ff fab5 	bl	800dee0 <aci_gatt_add_char>

  /**
   *   Add Carry Position Characteristic for SW Service
   */
  COPY_SW_CARRY_POSITION_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e976:	2212      	movs	r2, #18
 800e978:	9200      	str	r2, [sp, #0]
 800e97a:	19a3      	adds	r3, r4, r6
  COPY_SW_CARRY_POSITION_CHAR_UUID(uuid16.Char_UUID_128);
 800e97c:	2208      	movs	r2, #8
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e97e:	9305      	str	r3, [sp, #20]
  COPY_SW_CARRY_POSITION_CHAR_UUID(uuid16.Char_UUID_128);
 800e980:	9209      	str	r2, [sp, #36]	; 0x24
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e982:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800e986:	aa06      	add	r2, sp, #24
 800e988:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800e98c:	8920      	ldrh	r0, [r4, #8]
  COPY_SW_CARRY_POSITION_CHAR_UUID(uuid16.Char_UUID_128);
 800e98e:	f8cd a020 	str.w	sl, [sp, #32]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e992:	2303      	movs	r3, #3
 800e994:	2102      	movs	r1, #2
  COPY_SW_CARRY_POSITION_CHAR_UUID(uuid16.Char_UUID_128);
 800e996:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e99a:	f7ff faa1 	bl	800dee0 <aci_gatt_add_char>

  /**
   *   Add Gesture Rec Characteristic for SW Service
   */
  COPY_SW_GESTURE_REC_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e99e:	2212      	movs	r2, #18
  COPY_SW_GESTURE_REC_CHAR_UUID(uuid16.Char_UUID_128);
 800e9a0:	f04f 0902 	mov.w	r9, #2
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e9a4:	18a3      	adds	r3, r4, r2
 800e9a6:	9200      	str	r2, [sp, #0]
 800e9a8:	9305      	str	r3, [sp, #20]
 800e9aa:	aa06      	add	r2, sp, #24
 800e9ac:	4649      	mov	r1, r9
 800e9ae:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800e9b2:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800e9b6:	8920      	ldrh	r0, [r4, #8]
  COPY_SW_GESTURE_REC_CHAR_UUID(uuid16.Char_UUID_128);
 800e9b8:	f8cd a020 	str.w	sl, [sp, #32]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e9bc:	2303      	movs	r3, #3
  COPY_SW_GESTURE_REC_CHAR_UUID(uuid16.Char_UUID_128);
 800e9be:	e9cd 7b06 	strd	r7, fp, [sp, #24]
 800e9c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e9c6:	f7ff fa8b 	bl	800dee0 <aci_gatt_add_char>

  /**
   *   Add Pedometer Characteristic for SW Service
   */
  COPY_SW_PEDOMETER_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e9ca:	2212      	movs	r2, #18
 800e9cc:	9200      	str	r2, [sp, #0]
  COPY_SW_PEDOMETER_CHAR_UUID(uuid16.Char_UUID_128);
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	9209      	str	r2, [sp, #36]	; 0x24
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e9d2:	f104 0214 	add.w	r2, r4, #20
 800e9d6:	9205      	str	r2, [sp, #20]
 800e9d8:	4649      	mov	r1, r9
 800e9da:	aa06      	add	r2, sp, #24
 800e9dc:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800e9e0:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800e9e4:	8920      	ldrh	r0, [r4, #8]
  COPY_SW_PEDOMETER_CHAR_UUID(uuid16.Char_UUID_128);
 800e9e6:	f8cd a020 	str.w	sl, [sp, #32]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e9ea:	2308      	movs	r3, #8
  COPY_SW_PEDOMETER_CHAR_UUID(uuid16.Char_UUID_128);
 800e9ec:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e9f0:	f7ff fa76 	bl	800dee0 <aci_gatt_add_char>

  /**
   *   Add IntensityDet Characteristic for SW Service
   */
  COPY_SW_INTENSITY_DET_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e9f4:	f104 0316 	add.w	r3, r4, #22
  COPY_SW_INTENSITY_DET_CHAR_UUID(uuid16.Char_UUID_128);
 800e9f8:	f04f 0c20 	mov.w	ip, #32
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800e9fc:	9305      	str	r3, [sp, #20]
 800e9fe:	aa06      	add	r2, sp, #24
 800ea00:	4649      	mov	r1, r9
 800ea02:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800ea06:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800ea0a:	8920      	ldrh	r0, [r4, #8]
 800ea0c:	9600      	str	r6, [sp, #0]
 800ea0e:	2303      	movs	r3, #3
  COPY_SW_INTENSITY_DET_CHAR_UUID(uuid16.Char_UUID_128);
 800ea10:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800ea14:	f8cd a020 	str.w	sl, [sp, #32]
 800ea18:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800ea1c:	f7ff fa60 	bl	800dee0 <aci_gatt_add_char>
                          &(aMotenvContext.SWIntensityDetCharHdle));

  /**
   *   Add Config Service
   */
  COPY_CONFIG_SERVICE_UUID(uuid16.Char_UUID_128);
 800ea20:	4b36      	ldr	r3, [pc, #216]	; (800eafc <MOTENV_STM_Init+0x2e8>)
 800ea22:	9307      	str	r3, [sp, #28]
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800ea24:	f104 0318 	add.w	r3, r4, #24
 800ea28:	9300      	str	r3, [sp, #0]
  COPY_CONFIG_SERVICE_UUID(uuid16.Char_UUID_128);
 800ea2a:	f50a 2a60 	add.w	sl, sl, #917504	; 0xe0000
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800ea2e:	4643      	mov	r3, r8
 800ea30:	a906      	add	r1, sp, #24
 800ea32:	2201      	movs	r2, #1
 800ea34:	4648      	mov	r0, r9
  COPY_CONFIG_SERVICE_UUID(uuid16.Char_UUID_128);
 800ea36:	f8cd a020 	str.w	sl, [sp, #32]
 800ea3a:	9706      	str	r7, [sp, #24]
 800ea3c:	9509      	str	r5, [sp, #36]	; 0x24
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800ea3e:	f7ff f9f1 	bl	800de24 <aci_gatt_add_service>
                             &(aMotenvContext.ConfigSvcHdle));

  /**
   *   Add Config Characteristic for Config Service
   */
  COPY_CONFIG_CHAR_UUID(uuid16.Char_UUID_128);
 800ea42:	f8cd a020 	str.w	sl, [sp, #32]
  (void)aci_gatt_add_char(aMotenvContext.ConfigSvcHdle,
 800ea46:	f104 031a 	add.w	r3, r4, #26
 800ea4a:	f04f 0a14 	mov.w	sl, #20
 800ea4e:	2205      	movs	r2, #5
 800ea50:	9202      	str	r2, [sp, #8]
 800ea52:	9305      	str	r3, [sp, #20]
 800ea54:	aa06      	add	r2, sp, #24
 800ea56:	4653      	mov	r3, sl
 800ea58:	4649      	mov	r1, r9
 800ea5a:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800ea5e:	8b20      	ldrh	r0, [r4, #24]
 800ea60:	9501      	str	r5, [sp, #4]
 800ea62:	f8cd a000 	str.w	sl, [sp]
  COPY_CONFIG_CHAR_UUID(uuid16.Char_UUID_128);
 800ea66:	e9cd 7b06 	strd	r7, fp, [sp, #24]
 800ea6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  (void)aci_gatt_add_char(aMotenvContext.ConfigSvcHdle,
 800ea6e:	f7ff fa37 	bl	800dee0 <aci_gatt_add_char>
                          &(aMotenvContext.ConfigCharHdle));

  /**
   *   Add Console Service
   */
  COPY_CONSOLE_SERVICE_UUID(uuid16.Char_UUID_128);
 800ea72:	4b22      	ldr	r3, [pc, #136]	; (800eafc <MOTENV_STM_Init+0x2e8>)
 800ea74:	9509      	str	r5, [sp, #36]	; 0x24
 800ea76:	e9cd 7306 	strd	r7, r3, [sp, #24]
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800ea7a:	f104 031c 	add.w	r3, r4, #28
 800ea7e:	9300      	str	r3, [sp, #0]
  COPY_CONSOLE_SERVICE_UUID(uuid16.Char_UUID_128);
 800ea80:	4b20      	ldr	r3, [pc, #128]	; (800eb04 <MOTENV_STM_Init+0x2f0>)
 800ea82:	9308      	str	r3, [sp, #32]
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800ea84:	a906      	add	r1, sp, #24
 800ea86:	2307      	movs	r3, #7
 800ea88:	2201      	movs	r2, #1
 800ea8a:	4648      	mov	r0, r9
 800ea8c:	f7ff f9ca 	bl	800de24 <aci_gatt_add_service>
                             1+(3*CONSOLE_CHAR_NUMBER), /*Max_Attribute_Records*/
                             &(aMotenvContext.ConsoleSvcHdle));
  /**
   *   Add Cosole Term Characteristic for Config Service
   */
  COPY_TERM_CHAR_UUID(uuid16.Char_UUID_128);
 800ea90:	4b1c      	ldr	r3, [pc, #112]	; (800eb04 <MOTENV_STM_Init+0x2f0>)
  (void)aci_gatt_add_char(aMotenvContext.ConsoleSvcHdle,
 800ea92:	8ba0      	ldrh	r0, [r4, #28]
 800ea94:	9501      	str	r5, [sp, #4]
 800ea96:	2205      	movs	r2, #5
 800ea98:	9202      	str	r2, [sp, #8]
 800ea9a:	2201      	movs	r2, #1
  COPY_TERM_CHAR_UUID(uuid16.Char_UUID_128);
 800ea9c:	e9cd 3208 	strd	r3, r2, [sp, #32]
  (void)aci_gatt_add_char(aMotenvContext.ConsoleSvcHdle,
 800eaa0:	f104 031e 	add.w	r3, r4, #30
 800eaa4:	9305      	str	r3, [sp, #20]
 800eaa6:	231e      	movs	r3, #30
 800eaa8:	e9cd 6203 	strd	r6, r2, [sp, #12]
 800eaac:	9300      	str	r3, [sp, #0]
 800eaae:	aa06      	add	r2, sp, #24
 800eab0:	4653      	mov	r3, sl
 800eab2:	4649      	mov	r1, r9
  COPY_TERM_CHAR_UUID(uuid16.Char_UUID_128);
 800eab4:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.ConsoleSvcHdle,
 800eab8:	f7ff fa12 	bl	800dee0 <aci_gatt_add_char>
                          1, /* isVariable: 1 */
                          &(aMotenvContext.ConsoleTermCharHdle));
  /**
   *   Add Console Stderr Characteristic for Config Service
   */
  COPY_STDERR_CHAR_UUID(uuid16.Char_UUID_128);
 800eabc:	4911      	ldr	r1, [pc, #68]	; (800eb04 <MOTENV_STM_Init+0x2f0>)
 800eabe:	9108      	str	r1, [sp, #32]
  (void)aci_gatt_add_char(aMotenvContext.ConsoleSvcHdle,
 800eac0:	2201      	movs	r2, #1
 800eac2:	e9cd 6203 	strd	r6, r2, [sp, #12]
 800eac6:	f104 0120 	add.w	r1, r4, #32
 800eaca:	2212      	movs	r2, #18
 800eacc:	9200      	str	r2, [sp, #0]
 800eace:	9105      	str	r1, [sp, #20]
 800ead0:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800ead4:	8ba0      	ldrh	r0, [r4, #28]
  COPY_STDERR_CHAR_UUID(uuid16.Char_UUID_128);
 800ead6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  (void)aci_gatt_add_char(aMotenvContext.ConsoleSvcHdle,
 800eada:	4653      	mov	r3, sl
 800eadc:	aa06      	add	r2, sp, #24
 800eade:	4649      	mov	r1, r9
  COPY_STDERR_CHAR_UUID(uuid16.Char_UUID_128);
 800eae0:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.ConsoleSvcHdle,
 800eae4:	f7ff f9fc 	bl	800dee0 <aci_gatt_add_char>
                          16, /* encryKeySize */
                          1, /* isVariable: 1 */
                          &(aMotenvContext.ConsoleStderrCharHdle));

  return;
} /* end MOTENV_STM_Init */
 800eae8:	b00b      	add	sp, #44	; 0x2c
 800eaea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaee:	bf00      	nop
 800eaf0:	0800e459 	.word	0x0800e459
 800eaf4:	200005d0 	.word	0x200005d0
 800eaf8:	a5d5c51b 	.word	0xa5d5c51b
 800eafc:	9ab40002 	.word	0x9ab40002
 800eb00:	000211e1 	.word	0x000211e1
 800eb04:	000e11e1 	.word	0x000e11e1
 800eb08:	000111e1 	.word	0x000111e1
 800eb0c:	ac360002 	.word	0xac360002

0800eb10 <MOTENV_STM_App_Update_Char>:
 * @param  payloadLen: Length of the char value to be notified
 * @param  pPayload: Char value to be notified
 * @retval BLE status
 */
tBleStatus MOTENV_STM_App_Update_Char(uint16_t UUID, uint8_t payloadLen, uint8_t *pPayload) 
{
 800eb10:	b500      	push	{lr}
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
  switch(UUID)
 800eb12:	2840      	cmp	r0, #64	; 0x40
{
 800eb14:	b083      	sub	sp, #12
 800eb16:	460b      	mov	r3, r1
  switch(UUID)
 800eb18:	f000 808e 	beq.w	800ec38 <MOTENV_STM_App_Update_Char+0x128>
 800eb1c:	d915      	bls.n	800eb4a <MOTENV_STM_App_Update_Char+0x3a>
 800eb1e:	f240 2c0e 	movw	ip, #526	; 0x20e
 800eb22:	4560      	cmp	r0, ip
 800eb24:	f000 8090 	beq.w	800ec48 <MOTENV_STM_App_Update_Char+0x138>
 800eb28:	d92d      	bls.n	800eb86 <MOTENV_STM_App_Update_Char+0x76>
 800eb2a:	f5b0 5fe8 	cmp.w	r0, #7424	; 0x1d00
 800eb2e:	d07b      	beq.n	800ec28 <MOTENV_STM_App_Update_Char+0x118>
 800eb30:	f5b0 4f60 	cmp.w	r0, #57344	; 0xe000
 800eb34:	d123      	bne.n	800eb7e <MOTENV_STM_App_Update_Char+0x6e>
    
      break;

    case MOTION_CHAR_UUID:

     result = aci_gatt_update_char_value(aMotenvContext.HWSvcHdle,
 800eb36:	4848      	ldr	r0, [pc, #288]	; (800ec58 <MOTENV_STM_App_Update_Char+0x148>)
 800eb38:	9200      	str	r2, [sp, #0]
 800eb3a:	8841      	ldrh	r1, [r0, #2]
 800eb3c:	8800      	ldrh	r0, [r0, #0]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f7ff fa46 	bl	800dfd0 <aci_gatt_update_char_value>
    default:
      break;
  }

  return result;
}
 800eb44:	b003      	add	sp, #12
 800eb46:	f85d fb04 	ldr.w	pc, [sp], #4
  switch(UUID)
 800eb4a:	3801      	subs	r0, #1
 800eb4c:	fa1f fc80 	uxth.w	ip, r0
 800eb50:	f1bc 0f1f 	cmp.w	ip, #31
 800eb54:	d813      	bhi.n	800eb7e <MOTENV_STM_App_Update_Char+0x6e>
 800eb56:	281f      	cmp	r0, #31
 800eb58:	d811      	bhi.n	800eb7e <MOTENV_STM_App_Update_Char+0x6e>
 800eb5a:	e8df f000 	tbb	[pc, r0]
 800eb5e:	3d35      	.short	0x3d35
 800eb60:	10104510 	.word	0x10104510
 800eb64:	10104d10 	.word	0x10104d10
 800eb68:	10101010 	.word	0x10101010
 800eb6c:	10105510 	.word	0x10105510
 800eb70:	10101010 	.word	0x10101010
 800eb74:	10101010 	.word	0x10101010
 800eb78:	10101010 	.word	0x10101010
 800eb7c:	2d10      	.short	0x2d10
 800eb7e:	2042      	movs	r0, #66	; 0x42
}
 800eb80:	b003      	add	sp, #12
 800eb82:	f85d fb04 	ldr.w	pc, [sp], #4
  switch(UUID)
 800eb86:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 800eb8a:	d045      	beq.n	800ec18 <MOTENV_STM_App_Update_Char+0x108>
 800eb8c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800eb90:	d107      	bne.n	800eba2 <MOTENV_STM_App_Update_Char+0x92>
     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800eb92:	4831      	ldr	r0, [pc, #196]	; (800ec58 <MOTENV_STM_App_Update_Char+0x148>)
 800eb94:	9200      	str	r2, [sp, #0]
 800eb96:	8a41      	ldrh	r1, [r0, #18]
 800eb98:	8900      	ldrh	r0, [r0, #8]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f7ff fa18 	bl	800dfd0 <aci_gatt_update_char_value>
     break;
 800eba0:	e7d0      	b.n	800eb44 <MOTENV_STM_App_Update_Char+0x34>
  switch(UUID)
 800eba2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800eba6:	d1ea      	bne.n	800eb7e <MOTENV_STM_App_Update_Char+0x6e>
     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800eba8:	482b      	ldr	r0, [pc, #172]	; (800ec58 <MOTENV_STM_App_Update_Char+0x148>)
 800ebaa:	9200      	str	r2, [sp, #0]
 800ebac:	8941      	ldrh	r1, [r0, #10]
 800ebae:	8900      	ldrh	r0, [r0, #8]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f7ff fa0d 	bl	800dfd0 <aci_gatt_update_char_value>
     break;
 800ebb6:	e7c5      	b.n	800eb44 <MOTENV_STM_App_Update_Char+0x34>
     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800ebb8:	4827      	ldr	r0, [pc, #156]	; (800ec58 <MOTENV_STM_App_Update_Char+0x148>)
 800ebba:	9200      	str	r2, [sp, #0]
 800ebbc:	8ac1      	ldrh	r1, [r0, #22]
 800ebbe:	8900      	ldrh	r0, [r0, #8]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f7ff fa05 	bl	800dfd0 <aci_gatt_update_char_value>
     break;
 800ebc6:	e7bd      	b.n	800eb44 <MOTENV_STM_App_Update_Char+0x34>
     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800ebc8:	4823      	ldr	r0, [pc, #140]	; (800ec58 <MOTENV_STM_App_Update_Char+0x148>)
 800ebca:	9200      	str	r2, [sp, #0]
 800ebcc:	8a81      	ldrh	r1, [r0, #20]
 800ebce:	8900      	ldrh	r0, [r0, #8]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	f7ff f9fd 	bl	800dfd0 <aci_gatt_update_char_value>
     break;
 800ebd6:	e7b5      	b.n	800eb44 <MOTENV_STM_App_Update_Char+0x34>
     result = aci_gatt_update_char_value(aMotenvContext.ConfigSvcHdle,
 800ebd8:	481f      	ldr	r0, [pc, #124]	; (800ec58 <MOTENV_STM_App_Update_Char+0x148>)
 800ebda:	9200      	str	r2, [sp, #0]
 800ebdc:	8b41      	ldrh	r1, [r0, #26]
 800ebde:	8b00      	ldrh	r0, [r0, #24]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f7ff f9f5 	bl	800dfd0 <aci_gatt_update_char_value>
     break;
 800ebe6:	e7ad      	b.n	800eb44 <MOTENV_STM_App_Update_Char+0x34>
     result = aci_gatt_update_char_value(aMotenvContext.HWSvcHdle,
 800ebe8:	481b      	ldr	r0, [pc, #108]	; (800ec58 <MOTENV_STM_App_Update_Char+0x148>)
 800ebea:	9200      	str	r2, [sp, #0]
 800ebec:	88c1      	ldrh	r1, [r0, #6]
 800ebee:	8800      	ldrh	r0, [r0, #0]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f7ff f9ed 	bl	800dfd0 <aci_gatt_update_char_value>
      break;
 800ebf6:	e7a5      	b.n	800eb44 <MOTENV_STM_App_Update_Char+0x34>
     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800ebf8:	4817      	ldr	r0, [pc, #92]	; (800ec58 <MOTENV_STM_App_Update_Char+0x148>)
 800ebfa:	9200      	str	r2, [sp, #0]
 800ebfc:	8a01      	ldrh	r1, [r0, #16]
 800ebfe:	8900      	ldrh	r0, [r0, #8]
 800ec00:	2200      	movs	r2, #0
 800ec02:	f7ff f9e5 	bl	800dfd0 <aci_gatt_update_char_value>
     break;
 800ec06:	e79d      	b.n	800eb44 <MOTENV_STM_App_Update_Char+0x34>
     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800ec08:	4813      	ldr	r0, [pc, #76]	; (800ec58 <MOTENV_STM_App_Update_Char+0x148>)
 800ec0a:	9200      	str	r2, [sp, #0]
 800ec0c:	89c1      	ldrh	r1, [r0, #14]
 800ec0e:	8900      	ldrh	r0, [r0, #8]
 800ec10:	2200      	movs	r2, #0
 800ec12:	f7ff f9dd 	bl	800dfd0 <aci_gatt_update_char_value>
     break;
 800ec16:	e795      	b.n	800eb44 <MOTENV_STM_App_Update_Char+0x34>
     result = aci_gatt_update_char_value(aMotenvContext.ConsoleSvcHdle,
 800ec18:	480f      	ldr	r0, [pc, #60]	; (800ec58 <MOTENV_STM_App_Update_Char+0x148>)
 800ec1a:	9200      	str	r2, [sp, #0]
 800ec1c:	8bc1      	ldrh	r1, [r0, #30]
 800ec1e:	8b80      	ldrh	r0, [r0, #28]
 800ec20:	2200      	movs	r2, #0
 800ec22:	f7ff f9d5 	bl	800dfd0 <aci_gatt_update_char_value>
     break;
 800ec26:	e78d      	b.n	800eb44 <MOTENV_STM_App_Update_Char+0x34>
     result = aci_gatt_update_char_value(aMotenvContext.HWSvcHdle,
 800ec28:	480b      	ldr	r0, [pc, #44]	; (800ec58 <MOTENV_STM_App_Update_Char+0x148>)
 800ec2a:	9200      	str	r2, [sp, #0]
 800ec2c:	8881      	ldrh	r1, [r0, #4]
 800ec2e:	8800      	ldrh	r0, [r0, #0]
 800ec30:	2200      	movs	r2, #0
 800ec32:	f7ff f9cd 	bl	800dfd0 <aci_gatt_update_char_value>
      break;
 800ec36:	e785      	b.n	800eb44 <MOTENV_STM_App_Update_Char+0x34>
     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800ec38:	4807      	ldr	r0, [pc, #28]	; (800ec58 <MOTENV_STM_App_Update_Char+0x148>)
 800ec3a:	9200      	str	r2, [sp, #0]
 800ec3c:	8981      	ldrh	r1, [r0, #12]
 800ec3e:	8900      	ldrh	r0, [r0, #8]
 800ec40:	2200      	movs	r2, #0
 800ec42:	f7ff f9c5 	bl	800dfd0 <aci_gatt_update_char_value>
     break;
 800ec46:	e77d      	b.n	800eb44 <MOTENV_STM_App_Update_Char+0x34>
     result = aci_gatt_update_char_value(aMotenvContext.ConsoleSvcHdle,
 800ec48:	4803      	ldr	r0, [pc, #12]	; (800ec58 <MOTENV_STM_App_Update_Char+0x148>)
 800ec4a:	9200      	str	r2, [sp, #0]
 800ec4c:	8c01      	ldrh	r1, [r0, #32]
 800ec4e:	8b80      	ldrh	r0, [r0, #28]
 800ec50:	2200      	movs	r2, #0
 800ec52:	f7ff f9bd 	bl	800dfd0 <aci_gatt_update_char_value>
     break;
 800ec56:	e775      	b.n	800eb44 <MOTENV_STM_App_Update_Char+0x34>
 800ec58:	200005d0 	.word	0x200005d0

0800ec5c <Osal_MemCpy>:
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
  return memcpy( dest, src, size ); 
 800ec5c:	f014 b870 	b.w	8022d40 <memcpy>

0800ec60 <Osal_MemSet>:
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
  return memset( ptr, value, size );
 800ec60:	f014 b896 	b.w	8022d90 <memset>

0800ec64 <OTP_Read>:
{
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ec64:	4b09      	ldr	r3, [pc, #36]	; (800ec8c <OTP_Read+0x28>)
 800ec66:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
{
 800ec6a:	4602      	mov	r2, r0
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ec6c:	4293      	cmp	r3, r2
  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ec6e:	4808      	ldr	r0, [pc, #32]	; (800ec90 <OTP_Read+0x2c>)
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ec70:	d009      	beq.n	800ec86 <OTP_Read+0x22>
 800ec72:	4908      	ldr	r1, [pc, #32]	; (800ec94 <OTP_Read+0x30>)
 800ec74:	e001      	b.n	800ec7a <OTP_Read+0x16>
 800ec76:	4288      	cmp	r0, r1
 800ec78:	d006      	beq.n	800ec88 <OTP_Read+0x24>
 800ec7a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800ec7e:	4293      	cmp	r3, r2
  {
    p_id -= 8 ;
 800ec80:	f1a0 0008 	sub.w	r0, r0, #8
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ec84:	d1f7      	bne.n	800ec76 <OTP_Read+0x12>
  {
    p_id = 0 ;
  }

  return p_id ;
}
 800ec86:	4770      	bx	lr
    p_id = 0 ;
 800ec88:	2000      	movs	r0, #0
 800ec8a:	4770      	bx	lr
 800ec8c:	1fff7300 	.word	0x1fff7300
 800ec90:	1fff73f8 	.word	0x1fff73f8
 800ec94:	1fff7000 	.word	0x1fff7000

0800ec98 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800ec98:	b510      	push	{r4, lr}
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);

  switch(event_pckt->evt)
 800ec9a:	7843      	ldrb	r3, [r0, #1]
 800ec9c:	2bff      	cmp	r3, #255	; 0xff
{
 800ec9e:	b084      	sub	sp, #16
  switch(event_pckt->evt)
 800eca0:	d003      	beq.n	800ecaa <PeerToPeer_Event_Handler+0x12>
  return_value = SVCCTL_EvtNotAck;
 800eca2:	2400      	movs	r4, #0
    default:
      break;
  }

  return(return_value);
}/* end SVCCTL_EvtAckStatus_t */
 800eca4:	4620      	mov	r0, r4
 800eca6:	b004      	add	sp, #16
 800eca8:	bd10      	pop	{r4, pc}
      switch(blecore_evt->ecode)
 800ecaa:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800ecae:	f640 4301 	movw	r3, #3073	; 0xc01
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	d1f4      	bne.n	800eca2 <PeerToPeer_Event_Handler+0xa>
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800ecb8:	4916      	ldr	r1, [pc, #88]	; (800ed14 <PeerToPeer_Event_Handler+0x7c>)
 800ecba:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 800ecbe:	888b      	ldrh	r3, [r1, #4]
 800ecc0:	3302      	adds	r3, #2
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d014      	beq.n	800ecf0 <PeerToPeer_Event_Handler+0x58>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800ecc6:	884b      	ldrh	r3, [r1, #2]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d1e9      	bne.n	800eca2 <PeerToPeer_Event_Handler+0xa>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 800ecce:	4812      	ldr	r0, [pc, #72]	; (800ed18 <PeerToPeer_Event_Handler+0x80>)
 800ecd0:	f014 f8ec 	bl	8022eac <puts>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800ecd4:	340d      	adds	r4, #13
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800ecd6:	f834 3c02 	ldrh.w	r3, [r4, #-2]
 800ecda:	f88d 3008 	strb.w	r3, [sp, #8]
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800ecde:	2203      	movs	r2, #3
              P2PS_STM_App_Notification(&Notification);  
 800ece0:	4668      	mov	r0, sp
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800ece2:	9401      	str	r4, [sp, #4]
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800ece4:	f88d 2000 	strb.w	r2, [sp]
              P2PS_STM_App_Notification(&Notification);  
 800ece8:	2400      	movs	r4, #0
 800ecea:	f7f6 f9fb 	bl	80050e4 <P2PS_STM_App_Notification>
  return(return_value);
 800ecee:	e7d9      	b.n	800eca4 <PeerToPeer_Event_Handler+0xc>
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ecf0:	7b44      	ldrb	r4, [r0, #13]
 800ecf2:	f014 0401 	ands.w	r4, r4, #1
 800ecf6:	d006      	beq.n	800ed06 <PeerToPeer_Event_Handler+0x6e>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800ecf8:	2300      	movs	r3, #0
                P2PS_STM_App_Notification(&Notification);
 800ecfa:	4668      	mov	r0, sp
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800ecfc:	f88d 3000 	strb.w	r3, [sp]
                P2PS_STM_App_Notification(&Notification);
 800ed00:	f7f6 f9f0 	bl	80050e4 <P2PS_STM_App_Notification>
 800ed04:	e7ce      	b.n	800eca4 <PeerToPeer_Event_Handler+0xc>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800ed06:	2401      	movs	r4, #1
                P2PS_STM_App_Notification(&Notification);
 800ed08:	4668      	mov	r0, sp
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800ed0a:	f88d 4000 	strb.w	r4, [sp]
                P2PS_STM_App_Notification(&Notification);
 800ed0e:	f7f6 f9e9 	bl	80050e4 <P2PS_STM_App_Notification>
 800ed12:	e7c7      	b.n	800eca4 <PeerToPeer_Event_Handler+0xc>
 800ed14:	200005f4 	.word	0x200005f4
 800ed18:	08025bc0 	.word	0x08025bc0

0800ed1c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800ed1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800ed20:	4827      	ldr	r0, [pc, #156]	; (800edc0 <P2PS_STM_Init+0xa4>)
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800ed22:	4d28      	ldr	r5, [pc, #160]	; (800edc4 <P2PS_STM_Init+0xa8>)
    aci_gatt_add_service(UUID_TYPE_128,
 800ed24:	4c28      	ldr	r4, [pc, #160]	; (800edc8 <P2PS_STM_Init+0xac>)
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800ed26:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800eddc <P2PS_STM_Init+0xc0>
 800ed2a:	4f28      	ldr	r7, [pc, #160]	; (800edcc <P2PS_STM_Init+0xb0>)
 800ed2c:	4e28      	ldr	r6, [pc, #160]	; (800edd0 <P2PS_STM_Init+0xb4>)
{
 800ed2e:	b08a      	sub	sp, #40	; 0x28
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800ed30:	f000 f9c4 	bl	800f0bc <SVCCTL_RegisterSvcHandler>
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800ed34:	4827      	ldr	r0, [pc, #156]	; (800edd4 <P2PS_STM_Init+0xb8>)
 800ed36:	9006      	str	r0, [sp, #24]
 800ed38:	4827      	ldr	r0, [pc, #156]	; (800edd8 <P2PS_STM_Init+0xbc>)
    aci_gatt_add_service(UUID_TYPE_128,
 800ed3a:	9400      	str	r4, [sp, #0]
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800ed3c:	e9cd 5007 	strd	r5, r0, [sp, #28]
 800ed40:	f64f 6040 	movw	r0, #65088	; 0xfe40
    aci_gatt_add_service(UUID_TYPE_128,
 800ed44:	a906      	add	r1, sp, #24
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800ed46:	9009      	str	r0, [sp, #36]	; 0x24
    aci_gatt_add_service(UUID_TYPE_128,
 800ed48:	2308      	movs	r3, #8
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	2002      	movs	r0, #2
 800ed4e:	f7ff f869 	bl	800de24 <aci_gatt_add_service>
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ed52:	2501      	movs	r5, #1
 800ed54:	4623      	mov	r3, r4
 800ed56:	9504      	str	r5, [sp, #16]
 800ed58:	9502      	str	r5, [sp, #8]
 800ed5a:	f833 0b02 	ldrh.w	r0, [r3], #2
 800ed5e:	9305      	str	r3, [sp, #20]
 800ed60:	f04f 0a0a 	mov.w	sl, #10
 800ed64:	2302      	movs	r3, #2
 800ed66:	f04f 0900 	mov.w	r9, #0
 800ed6a:	2206      	movs	r2, #6
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800ed6c:	f64f 6c41 	movw	ip, #65089	; 0xfe41
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ed70:	e9cd 2900 	strd	r2, r9, [sp]
 800ed74:	4619      	mov	r1, r3
 800ed76:	aa06      	add	r2, sp, #24
 800ed78:	f8cd a00c 	str.w	sl, [sp, #12]
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800ed7c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800ed80:	e9cd 8706 	strd	r8, r7, [sp, #24]
 800ed84:	9608      	str	r6, [sp, #32]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ed86:	f7ff f8ab 	bl	800dee0 <aci_gatt_add_char>

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ed8a:	2310      	movs	r3, #16
 800ed8c:	f834 0b04 	ldrh.w	r0, [r4], #4
 800ed90:	9300      	str	r3, [sp, #0]
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800ed92:	f64f 6142 	movw	r1, #65090	; 0xfe42
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ed96:	2302      	movs	r3, #2
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800ed98:	e9cd 6108 	strd	r6, r1, [sp, #32]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ed9c:	f8cd a00c 	str.w	sl, [sp, #12]
 800eda0:	f8cd 9004 	str.w	r9, [sp, #4]
 800eda4:	9504      	str	r5, [sp, #16]
 800eda6:	9502      	str	r5, [sp, #8]
 800eda8:	aa06      	add	r2, sp, #24
 800edaa:	9405      	str	r4, [sp, #20]
 800edac:	4619      	mov	r1, r3
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800edae:	f8cd 8018 	str.w	r8, [sp, #24]
 800edb2:	9707      	str	r7, [sp, #28]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800edb4:	f7ff f894 	bl	800dee0 <aci_gatt_add_char>
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
}
 800edb8:	b00a      	add	sp, #40	; 0x28
 800edba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edbe:	bf00      	nop
 800edc0:	0800ec99 	.word	0x0800ec99
 800edc4:	984a7f2e 	.word	0x984a7f2e
 800edc8:	200005f4 	.word	0x200005f4
 800edcc:	9d4c21ed 	.word	0x9d4c21ed
 800edd0:	8e224541 	.word	0x8e224541
 800edd4:	d5b3e58f 	.word	0xd5b3e58f
 800edd8:	cc7a482a 	.word	0xcc7a482a
 800eddc:	ae82ed19 	.word	0xae82ed19

0800ede0 <P2PS_STM_App_Update_Char>:
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
  switch(UUID)
 800ede0:	f64f 6342 	movw	r3, #65090	; 0xfe42
 800ede4:	4298      	cmp	r0, r3
 800ede6:	d001      	beq.n	800edec <P2PS_STM_App_Update_Char+0xc>
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800ede8:	2042      	movs	r0, #66	; 0x42
    default:
      break;
  }

  return result;
}/* end P2PS_STM_Init() */
 800edea:	4770      	bx	lr
{
 800edec:	b500      	push	{lr}
 800edee:	b083      	sub	sp, #12
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800edf0:	4b05      	ldr	r3, [pc, #20]	; (800ee08 <P2PS_STM_App_Update_Char+0x28>)
 800edf2:	9100      	str	r1, [sp, #0]
 800edf4:	8899      	ldrh	r1, [r3, #4]
 800edf6:	8818      	ldrh	r0, [r3, #0]
 800edf8:	2200      	movs	r2, #0
 800edfa:	2302      	movs	r3, #2
 800edfc:	f7ff f8e8 	bl	800dfd0 <aci_gatt_update_char_value>
}/* end P2PS_STM_Init() */
 800ee00:	b003      	add	sp, #12
 800ee02:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee06:	bf00      	nop
 800ee08:	200005f4 	.word	0x200005f4

0800ee0c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800ee0c:	b500      	push	{lr}
 800ee0e:	4602      	mov	r2, r0
 800ee10:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800ee12:	466b      	mov	r3, sp
 800ee14:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800ee18:	320c      	adds	r2, #12
 800ee1a:	2124      	movs	r1, #36	; 0x24
 800ee1c:	f000 f878 	bl	800ef10 <shci_send>
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 800ee20:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800ee24:	b005      	add	sp, #20
 800ee26:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee2a:	bf00      	nop

0800ee2c <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ee2c:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800ee2e:	4c05      	ldr	r4, [pc, #20]	; (800ee44 <TlUserEvtReceived+0x18>)
{
 800ee30:	4601      	mov	r1, r0
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800ee32:	4620      	mov	r0, r4
 800ee34:	f000 f8d0 	bl	800efd8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ee38:	4620      	mov	r0, r4

  return;
}
 800ee3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ee3e:	f7f2 ba61 	b.w	8001304 <shci_notify_asynch_evt>
 800ee42:	bf00      	nop
 800ee44:	20000620 	.word	0x20000620

0800ee48 <shci_init>:
{
 800ee48:	b570      	push	{r4, r5, r6, lr}
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ee4a:	4c11      	ldr	r4, [pc, #68]	; (800ee90 <shci_init+0x48>)
  pCmdBuffer = p_cmdbuffer;
 800ee4c:	4d11      	ldr	r5, [pc, #68]	; (800ee94 <shci_init+0x4c>)
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ee4e:	684a      	ldr	r2, [r1, #4]
 800ee50:	6022      	str	r2, [r4, #0]
{
 800ee52:	460e      	mov	r6, r1
 800ee54:	4603      	mov	r3, r0
 800ee56:	b084      	sub	sp, #16
  shci_register_io_bus (&shciContext.io);
 800ee58:	1d20      	adds	r0, r4, #4
  shciContext.UserEvtRx = UserEvtRx;
 800ee5a:	6223      	str	r3, [r4, #32]
  shci_register_io_bus (&shciContext.io);
 800ee5c:	f000 f896 	bl	800ef8c <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ee60:	6836      	ldr	r6, [r6, #0]
  pCmdBuffer = p_cmdbuffer;
 800ee62:	60ae      	str	r6, [r5, #8]
  LST_init_head (&SHciAsynchEventQueue);
 800ee64:	4628      	mov	r0, r5
 800ee66:	f000 f89b 	bl	800efa0 <LST_init_head>
    if(StatusNotCallBackFunction != 0)
 800ee6a:	6823      	ldr	r3, [r4, #0]
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800ee6c:	2001      	movs	r0, #1
 800ee6e:	7328      	strb	r0, [r5, #12]
    if(StatusNotCallBackFunction != 0)
 800ee70:	b103      	cbz	r3, 800ee74 <shci_init+0x2c>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800ee72:	4798      	blx	r3
  if (shciContext.io.Init)
 800ee74:	6863      	ldr	r3, [r4, #4]
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ee76:	2201      	movs	r2, #1
 800ee78:	736a      	strb	r2, [r5, #13]
  if (shciContext.io.Init)
 800ee7a:	b133      	cbz	r3, 800ee8a <shci_init+0x42>
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800ee7c:	4906      	ldr	r1, [pc, #24]	; (800ee98 <shci_init+0x50>)
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800ee7e:	4a07      	ldr	r2, [pc, #28]	; (800ee9c <shci_init+0x54>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ee80:	9603      	str	r6, [sp, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800ee82:	e9cd 1201 	strd	r1, r2, [sp, #4]
    shciContext.io.Init(&Conf);
 800ee86:	a801      	add	r0, sp, #4
 800ee88:	4798      	blx	r3
}
 800ee8a:	b004      	add	sp, #16
 800ee8c:	bd70      	pop	{r4, r5, r6, pc}
 800ee8e:	bf00      	nop
 800ee90:	200015a0 	.word	0x200015a0
 800ee94:	20000620 	.word	0x20000620
 800ee98:	0800ef81 	.word	0x0800ef81
 800ee9c:	0800ee2d 	.word	0x0800ee2d

0800eea0 <shci_user_evt_proc>:
{
 800eea0:	b510      	push	{r4, lr}
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800eea2:	4c19      	ldr	r4, [pc, #100]	; (800ef08 <shci_user_evt_proc+0x68>)
{
 800eea4:	b084      	sub	sp, #16
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800eea6:	4620      	mov	r0, r4
 800eea8:	f000 f87e 	bl	800efa8 <LST_is_empty>
 800eeac:	b908      	cbnz	r0, 800eeb2 <shci_user_evt_proc+0x12>
 800eeae:	7b63      	ldrb	r3, [r4, #13]
 800eeb0:	b963      	cbnz	r3, 800eecc <shci_user_evt_proc+0x2c>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800eeb2:	4815      	ldr	r0, [pc, #84]	; (800ef08 <shci_user_evt_proc+0x68>)
 800eeb4:	f000 f878 	bl	800efa8 <LST_is_empty>
 800eeb8:	b908      	cbnz	r0, 800eebe <shci_user_evt_proc+0x1e>
 800eeba:	7b63      	ldrb	r3, [r4, #13]
 800eebc:	b90b      	cbnz	r3, 800eec2 <shci_user_evt_proc+0x22>
}
 800eebe:	b004      	add	sp, #16
 800eec0:	bd10      	pop	{r4, pc}
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800eec2:	4811      	ldr	r0, [pc, #68]	; (800ef08 <shci_user_evt_proc+0x68>)
 800eec4:	f7f2 fa1e 	bl	8001304 <shci_notify_asynch_evt>
}
 800eec8:	b004      	add	sp, #16
 800eeca:	bd10      	pop	{r4, pc}
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800eecc:	a901      	add	r1, sp, #4
 800eece:	4620      	mov	r0, r4
 800eed0:	f000 f88e 	bl	800eff0 <LST_remove_head>
    if (shciContext.UserEvtRx != NULL)
 800eed4:	4b0d      	ldr	r3, [pc, #52]	; (800ef0c <shci_user_evt_proc+0x6c>)
 800eed6:	6a1b      	ldr	r3, [r3, #32]
 800eed8:	b17b      	cbz	r3, 800eefa <shci_user_evt_proc+0x5a>
      UserEvtRxParam.pckt = phcievtbuffer;
 800eeda:	9901      	ldr	r1, [sp, #4]
 800eedc:	9103      	str	r1, [sp, #12]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800eede:	2201      	movs	r2, #1
 800eee0:	f88d 2008 	strb.w	r2, [sp, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800eee4:	a802      	add	r0, sp, #8
 800eee6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800eee8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800eeec:	7363      	strb	r3, [r4, #13]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800eeee:	b933      	cbnz	r3, 800eefe <shci_user_evt_proc+0x5e>
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800eef0:	9901      	ldr	r1, [sp, #4]
 800eef2:	4620      	mov	r0, r4
 800eef4:	f000 f864 	bl	800efc0 <LST_insert_head>
 800eef8:	e7db      	b.n	800eeb2 <shci_user_evt_proc+0x12>
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800eefa:	2301      	movs	r3, #1
 800eefc:	7363      	strb	r3, [r4, #13]
      TL_MM_EvtDone( phcievtbuffer );
 800eefe:	9801      	ldr	r0, [sp, #4]
 800ef00:	f000 fa0a 	bl	800f318 <TL_MM_EvtDone>
 800ef04:	e7d5      	b.n	800eeb2 <shci_user_evt_proc+0x12>
 800ef06:	bf00      	nop
 800ef08:	20000620 	.word	0x20000620
 800ef0c:	200015a0 	.word	0x200015a0

0800ef10 <shci_send>:
{
 800ef10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(StatusNotCallBackFunction != 0)
 800ef14:	4e18      	ldr	r6, [pc, #96]	; (800ef78 <shci_send+0x68>)
{
 800ef16:	461f      	mov	r7, r3
    if(StatusNotCallBackFunction != 0)
 800ef18:	6833      	ldr	r3, [r6, #0]
{
 800ef1a:	460d      	mov	r5, r1
 800ef1c:	b082      	sub	sp, #8
 800ef1e:	4680      	mov	r8, r0
 800ef20:	4611      	mov	r1, r2
    if(StatusNotCallBackFunction != 0)
 800ef22:	b11b      	cbz	r3, 800ef2c <shci_send+0x1c>
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800ef24:	2000      	movs	r0, #0
 800ef26:	9201      	str	r2, [sp, #4]
 800ef28:	4798      	blx	r3
 800ef2a:	9901      	ldr	r1, [sp, #4]
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800ef2c:	4c13      	ldr	r4, [pc, #76]	; (800ef7c <shci_send+0x6c>)
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800ef2e:	68a0      	ldr	r0, [r4, #8]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800ef30:	462a      	mov	r2, r5
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800ef32:	72c5      	strb	r5, [r0, #11]
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800ef34:	f8a0 8009 	strh.w	r8, [r0, #9]
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800ef38:	2500      	movs	r5, #0
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800ef3a:	300c      	adds	r0, #12
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800ef3c:	7325      	strb	r5, [r4, #12]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800ef3e:	f013 feff 	bl	8022d40 <memcpy>
  shciContext.io.Send(0,0);
 800ef42:	6973      	ldr	r3, [r6, #20]
 800ef44:	4629      	mov	r1, r5
 800ef46:	4628      	mov	r0, r5
 800ef48:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800ef4a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800ef4e:	f7f2 f9e3 	bl	8001318 <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800ef52:	68a1      	ldr	r1, [r4, #8]
 800ef54:	788a      	ldrb	r2, [r1, #2]
 800ef56:	f107 0008 	add.w	r0, r7, #8
 800ef5a:	3203      	adds	r2, #3
 800ef5c:	f013 fef0 	bl	8022d40 <memcpy>
    if(StatusNotCallBackFunction != 0)
 800ef60:	6833      	ldr	r3, [r6, #0]
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800ef62:	2001      	movs	r0, #1
 800ef64:	7320      	strb	r0, [r4, #12]
    if(StatusNotCallBackFunction != 0)
 800ef66:	b11b      	cbz	r3, 800ef70 <shci_send+0x60>
}
 800ef68:	b002      	add	sp, #8
 800ef6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800ef6e:	4718      	bx	r3
}
 800ef70:	b002      	add	sp, #8
 800ef72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef76:	bf00      	nop
 800ef78:	200015a0 	.word	0x200015a0
 800ef7c:	20000620 	.word	0x20000620

0800ef80 <TlCmdEvtReceived>:
{
 800ef80:	b508      	push	{r3, lr}
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800ef82:	2000      	movs	r0, #0
 800ef84:	f7f2 f9c4 	bl	8001310 <shci_cmd_resp_release>
}
 800ef88:	bd08      	pop	{r3, pc}
 800ef8a:	bf00      	nop

0800ef8c <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800ef8c:	4a02      	ldr	r2, [pc, #8]	; (800ef98 <shci_register_io_bus+0xc>)
  fops->Send    = TL_SYS_SendCmd;
 800ef8e:	4b03      	ldr	r3, [pc, #12]	; (800ef9c <shci_register_io_bus+0x10>)
  fops->Init    = TL_SYS_Init;
 800ef90:	6002      	str	r2, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 800ef92:	6103      	str	r3, [r0, #16]

  return;
}
 800ef94:	4770      	bx	lr
 800ef96:	bf00      	nop
 800ef98:	0800f241 	.word	0x0800f241
 800ef9c:	0800f275 	.word	0x0800f275

0800efa0 <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800efa0:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 800efa2:	6040      	str	r0, [r0, #4]
}
 800efa4:	4770      	bx	lr
 800efa6:	bf00      	nop

0800efa8 <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efa8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800efac:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800efae:	6802      	ldr	r2, [r0, #0]
  {
    return_value = TRUE;
 800efb0:	1a80      	subs	r0, r0, r2
 800efb2:	fab0 f080 	clz	r0, r0
 800efb6:	0940      	lsrs	r0, r0, #5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efb8:	f383 8810 	msr	PRIMASK, r3
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop

0800efc0 <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efc0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800efc4:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800efc6:	6802      	ldr	r2, [r0, #0]
 800efc8:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 800efca:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800efcc:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800efce:	680a      	ldr	r2, [r1, #0]
 800efd0:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efd2:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800efd6:	4770      	bx	lr

0800efd8 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efd8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800efdc:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800efde:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 800efe0:	6842      	ldr	r2, [r0, #4]
 800efe2:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 800efe4:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800efe6:	684a      	ldr	r2, [r1, #4]
 800efe8:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efea:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800efee:	4770      	bx	lr

0800eff0 <LST_remove_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eff0:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800eff4:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800eff6:	6803      	ldr	r3, [r0, #0]
 800eff8:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 800effa:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800effc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f000:	b672      	cpsid	i
  (node->prev)->next = node->next;
 800f002:	685a      	ldr	r2, [r3, #4]
 800f004:	6818      	ldr	r0, [r3, #0]
 800f006:	6010      	str	r0, [r2, #0]
  (node->next)->prev = node->prev;
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f00c:	f381 8810 	msr	PRIMASK, r1
 800f010:	f38c 8810 	msr	PRIMASK, ip

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f014:	4770      	bx	lr
 800f016:	bf00      	nop

0800f018 <BAS_Init>:
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
  return;
}
 800f018:	4770      	bx	lr
 800f01a:	bf00      	nop

0800f01c <BLS_Init>:
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop

0800f020 <CRS_STM_Init>:
 800f020:	4770      	bx	lr
 800f022:	bf00      	nop

0800f024 <DIS_Init>:
 800f024:	4770      	bx	lr
 800f026:	bf00      	nop

0800f028 <EDS_STM_Init>:
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop

0800f02c <HIDS_Init>:
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop

0800f030 <HRS_Init>:
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop

0800f034 <HTS_Init>:
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop

0800f038 <IAS_Init>:
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop

0800f03c <LLS_Init>:
 800f03c:	4770      	bx	lr
 800f03e:	bf00      	nop

0800f040 <TPS_Init>:
 800f040:	4770      	bx	lr
 800f042:	bf00      	nop

0800f044 <ZDD_STM_Init>:
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop

0800f048 <OTAS_STM_Init>:
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop

0800f04c <MESH_Init>:
 800f04c:	4770      	bx	lr
 800f04e:	bf00      	nop

0800f050 <BVOPUS_STM_Init>:
 800f050:	4770      	bx	lr
 800f052:	bf00      	nop

0800f054 <SVCCTL_InitCustomSvc>:
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop

0800f058 <SVCCTL_SvcInit>:

  return;
}

__weak void SVCCTL_SvcInit(void)
{
 800f058:	b508      	push	{r3, lr}
  BAS_Init();
 800f05a:	f7ff ffdd 	bl	800f018 <BAS_Init>

  BLS_Init();
 800f05e:	f7ff ffdd 	bl	800f01c <BLS_Init>

  CRS_STM_Init();
 800f062:	f7ff ffdd 	bl	800f020 <CRS_STM_Init>

  DIS_Init();
 800f066:	f7ff ffdd 	bl	800f024 <DIS_Init>

  EDS_STM_Init();
 800f06a:	f7ff ffdd 	bl	800f028 <EDS_STM_Init>

  HIDS_Init();
 800f06e:	f7ff ffdd 	bl	800f02c <HIDS_Init>

  HRS_Init();
 800f072:	f7ff ffdd 	bl	800f030 <HRS_Init>

  HTS_Init();
 800f076:	f7ff ffdd 	bl	800f034 <HTS_Init>

  IAS_Init();
 800f07a:	f7ff ffdd 	bl	800f038 <IAS_Init>

  LLS_Init();
 800f07e:	f7ff ffdd 	bl	800f03c <LLS_Init>

  TPS_Init();
 800f082:	f7ff ffdd 	bl	800f040 <TPS_Init>

  MOTENV_STM_Init();
 800f086:	f7ff fbc5 	bl	800e814 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800f08a:	f7ff fe47 	bl	800ed1c <P2PS_STM_Init>

  ZDD_STM_Init();
 800f08e:	f7ff ffd9 	bl	800f044 <ZDD_STM_Init>

  OTAS_STM_Init();
 800f092:	f7ff ffd9 	bl	800f048 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800f096:	f7ff ffdb 	bl	800f050 <BVOPUS_STM_Init>

  MESH_Init();
 800f09a:	f7ff ffd7 	bl	800f04c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800f09e:	f7ff ffd9 	bl	800f054 <SVCCTL_InitCustomSvc>
  
  return;
}
 800f0a2:	bd08      	pop	{r3, pc}

0800f0a4 <SVCCTL_Init>:
{
 800f0a4:	b508      	push	{r3, lr}
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800f0a6:	4b04      	ldr	r3, [pc, #16]	; (800f0b8 <SVCCTL_Init+0x14>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800f0ac:	f883 2020 	strb.w	r2, [r3, #32]
  SVCCTL_SvcInit();
 800f0b0:	f7ff ffd2 	bl	800f058 <SVCCTL_SvcInit>
}
 800f0b4:	bd08      	pop	{r3, pc}
 800f0b6:	bf00      	nop
 800f0b8:	200005fc 	.word	0x200005fc

0800f0bc <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800f0bc:	4b03      	ldr	r3, [pc, #12]	; (800f0cc <SVCCTL_RegisterSvcHandler+0x10>)
 800f0be:	7f1a      	ldrb	r2, [r3, #28]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800f0c0:	1c51      	adds	r1, r2, #1
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800f0c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800f0c6:	7719      	strb	r1, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
}
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop
 800f0cc:	200005fc 	.word	0x200005fc

0800f0d0 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800f0d0:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch (event_pckt->evt)
 800f0d2:	7843      	ldrb	r3, [r0, #1]
 800f0d4:	2bff      	cmp	r3, #255	; 0xff
{
 800f0d6:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 800f0d8:	d106      	bne.n	800f0e8 <SVCCTL_UserEvtRx+0x18>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800f0da:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800f0de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f0e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f0e6:	d004      	beq.n	800f0f2 <SVCCTL_UserEvtRx+0x22>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800f0e8:	4620      	mov	r0, r4
      return_status = SVCCTL_UserEvtFlowEnable;
      break;
  }

  return (return_status);
}
 800f0ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return_status = SVCCTL_App_Notification(pckt);
 800f0ee:	f7f3 baf7 	b.w	80026e0 <SVCCTL_App_Notification>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f0f2:	4e0b      	ldr	r6, [pc, #44]	; (800f120 <SVCCTL_UserEvtRx+0x50>)
 800f0f4:	7f33      	ldrb	r3, [r6, #28]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d0f6      	beq.n	800f0e8 <SVCCTL_UserEvtRx+0x18>
 800f0fa:	2500      	movs	r5, #0
 800f0fc:	462b      	mov	r3, r5
 800f0fe:	e002      	b.n	800f106 <SVCCTL_UserEvtRx+0x36>
 800f100:	7f32      	ldrb	r2, [r6, #28]
 800f102:	429a      	cmp	r2, r3
 800f104:	d9f0      	bls.n	800f0e8 <SVCCTL_UserEvtRx+0x18>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800f106:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800f10a:	4620      	mov	r0, r4
 800f10c:	4798      	blx	r3
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f10e:	3501      	adds	r5, #1
 800f110:	b2eb      	uxtb	r3, r5
            if (event_notification_status != SVCCTL_EvtNotAck)
 800f112:	2800      	cmp	r0, #0
 800f114:	d0f4      	beq.n	800f100 <SVCCTL_UserEvtRx+0x30>
}
 800f116:	3802      	subs	r0, #2
 800f118:	bf18      	it	ne
 800f11a:	2001      	movne	r0, #1
 800f11c:	bd70      	pop	{r4, r5, r6, pc}
 800f11e:	bf00      	nop
 800f120:	200005fc 	.word	0x200005fc

0800f124 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 800f124:	b530      	push	{r4, r5, lr}
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800f126:	4c0a      	ldr	r4, [pc, #40]	; (800f150 <SendFreeBuf+0x2c>)
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800f128:	4d0a      	ldr	r5, [pc, #40]	; (800f154 <SendFreeBuf+0x30>)
{
 800f12a:	b083      	sub	sp, #12
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800f12c:	e006      	b.n	800f13c <SendFreeBuf+0x18>
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800f12e:	f7ff ff5f 	bl	800eff0 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800f132:	692b      	ldr	r3, [r5, #16]
 800f134:	9901      	ldr	r1, [sp, #4]
 800f136:	6918      	ldr	r0, [r3, #16]
 800f138:	f7ff ff4e 	bl	800efd8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800f13c:	4620      	mov	r0, r4
 800f13e:	f7ff ff33 	bl	800efa8 <LST_is_empty>
 800f142:	4603      	mov	r3, r0
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800f144:	a901      	add	r1, sp, #4
 800f146:	4620      	mov	r0, r4
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d0f0      	beq.n	800f12e <SendFreeBuf+0xa>
  }

  return;
}
 800f14c:	b003      	add	sp, #12
 800f14e:	bd30      	pop	{r4, r5, pc}
 800f150:	200015c8 	.word	0x200015c8
 800f154:	20030000 	.word	0x20030000

0800f158 <TL_Enable>:
  HW_IPCC_Enable();
 800f158:	f7f5 bfe2 	b.w	8005120 <HW_IPCC_Enable>

0800f15c <TL_Init>:
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800f15c:	4b10      	ldr	r3, [pc, #64]	; (800f1a0 <TL_Init+0x44>)
 800f15e:	4a11      	ldr	r2, [pc, #68]	; (800f1a4 <TL_Init+0x48>)
{
 800f160:	b410      	push	{r4}
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800f162:	f103 0130 	add.w	r1, r3, #48	; 0x30
  TL_RefTable.p_ble_table = &TL_BleTable;
 800f166:	f103 0420 	add.w	r4, r3, #32
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800f16a:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800f16c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
  TL_RefTable.p_ble_table = &TL_BleTable;
 800f170:	6054      	str	r4, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800f172:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800f174:	f103 0144 	add.w	r1, r3, #68	; 0x44
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800f178:	6210      	str	r0, [r2, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800f17a:	f103 044c 	add.w	r4, r3, #76	; 0x4c
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800f17e:	6251      	str	r1, [r2, #36]	; 0x24
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800f180:	f103 0154 	add.w	r1, r3, #84	; 0x54
  TL_RefTable.p_sys_table = &TL_SysTable;
 800f184:	60d4      	str	r4, [r2, #12]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800f186:	f103 0070 	add.w	r0, r3, #112	; 0x70
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800f18a:	6111      	str	r1, [r2, #16]
}
 800f18c:	f85d 4b04 	ldr.w	r4, [sp], #4
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800f190:	6150      	str	r0, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800f192:	f103 0174 	add.w	r1, r3, #116	; 0x74
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800f196:	3380      	adds	r3, #128	; 0x80
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800f198:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800f19a:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 800f19c:	f7f5 bfca 	b.w	8005134 <HW_IPCC_Init>
 800f1a0:	20030134 	.word	0x20030134
 800f1a4:	20030000 	.word	0x20030000

0800f1a8 <TL_BLE_Init>:
{
 800f1a8:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&EvtQueue);
 800f1aa:	4d0b      	ldr	r5, [pc, #44]	; (800f1d8 <TL_BLE_Init+0x30>)
{
 800f1ac:	4604      	mov	r4, r0
  LST_init_head (&EvtQueue);
 800f1ae:	4628      	mov	r0, r5
 800f1b0:	f7ff fef6 	bl	800efa0 <LST_init_head>
  p_bletable = TL_RefTable.p_ble_table;
 800f1b4:	4b09      	ldr	r3, [pc, #36]	; (800f1dc <TL_BLE_Init+0x34>)
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800f1b6:	68e2      	ldr	r2, [r4, #12]
  p_bletable = TL_RefTable.p_ble_table;
 800f1b8:	685b      	ldr	r3, [r3, #4]
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800f1ba:	68a1      	ldr	r1, [r4, #8]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800f1bc:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800f1be:	4a08      	ldr	r2, [pc, #32]	; (800f1e0 <TL_BLE_Init+0x38>)
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800f1c0:	6019      	str	r1, [r3, #0]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800f1c2:	e9c3 2501 	strd	r2, r5, [r3, #4]
  HW_IPCC_BLE_Init();
 800f1c6:	f7f5 ffd7 	bl	8005178 <HW_IPCC_BLE_Init>
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800f1ca:	e9d4 1200 	ldrd	r1, r2, [r4]
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800f1ce:	4b05      	ldr	r3, [pc, #20]	; (800f1e4 <TL_BLE_Init+0x3c>)
}
 800f1d0:	2000      	movs	r0, #0
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800f1d2:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 800f1d6:	bd38      	pop	{r3, r4, r5, pc}
 800f1d8:	200301c0 	.word	0x200301c0
 800f1dc:	20030000 	.word	0x20030000
 800f1e0:	20030a40 	.word	0x20030a40
 800f1e4:	200015c8 	.word	0x200015c8

0800f1e8 <TL_BLE_SendCmd>:
{
 800f1e8:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800f1ea:	4b05      	ldr	r3, [pc, #20]	; (800f200 <TL_BLE_SendCmd+0x18>)
 800f1ec:	6859      	ldr	r1, [r3, #4]
  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800f1ee:	685b      	ldr	r3, [r3, #4]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800f1f0:	680b      	ldr	r3, [r1, #0]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	721a      	strb	r2, [r3, #8]
  HW_IPCC_BLE_SendCmd();
 800f1f6:	f7f5 ffc7 	bl	8005188 <HW_IPCC_BLE_SendCmd>
}
 800f1fa:	2000      	movs	r0, #0
 800f1fc:	bd08      	pop	{r3, pc}
 800f1fe:	bf00      	nop
 800f200:	20030000 	.word	0x20030000

0800f204 <HW_IPCC_BLE_RxEvtNot>:
{
 800f204:	b530      	push	{r4, r5, lr}
  while(LST_is_empty(&EvtQueue) == FALSE)
 800f206:	4c09      	ldr	r4, [pc, #36]	; (800f22c <HW_IPCC_BLE_RxEvtNot+0x28>)
    BLE_IoBusEvtCallBackFunction(phcievt);
 800f208:	4d09      	ldr	r5, [pc, #36]	; (800f230 <HW_IPCC_BLE_RxEvtNot+0x2c>)
{
 800f20a:	b083      	sub	sp, #12
  while(LST_is_empty(&EvtQueue) == FALSE)
 800f20c:	e004      	b.n	800f218 <HW_IPCC_BLE_RxEvtNot+0x14>
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800f20e:	f7ff feef 	bl	800eff0 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 800f212:	68ab      	ldr	r3, [r5, #8]
 800f214:	9801      	ldr	r0, [sp, #4]
 800f216:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800f218:	4620      	mov	r0, r4
 800f21a:	f7ff fec5 	bl	800efa8 <LST_is_empty>
 800f21e:	4603      	mov	r3, r0
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800f220:	a901      	add	r1, sp, #4
 800f222:	4620      	mov	r0, r4
  while(LST_is_empty(&EvtQueue) == FALSE)
 800f224:	2b00      	cmp	r3, #0
 800f226:	d0f2      	beq.n	800f20e <HW_IPCC_BLE_RxEvtNot+0xa>
}
 800f228:	b003      	add	sp, #12
 800f22a:	bd30      	pop	{r4, r5, pc}
 800f22c:	200301c0 	.word	0x200301c0
 800f230:	200015c8 	.word	0x200015c8

0800f234 <HW_IPCC_BLE_AclDataAckNot>:
  BLE_IoBusAclDataTxAck( );
 800f234:	4b01      	ldr	r3, [pc, #4]	; (800f23c <HW_IPCC_BLE_AclDataAckNot+0x8>)
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	4718      	bx	r3
 800f23a:	bf00      	nop
 800f23c:	200015c8 	.word	0x200015c8

0800f240 <TL_SYS_Init>:
{
 800f240:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&SystemEvtQueue);
 800f242:	4d09      	ldr	r5, [pc, #36]	; (800f268 <TL_SYS_Init+0x28>)
{
 800f244:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 800f246:	4628      	mov	r0, r5
 800f248:	f7ff feaa 	bl	800efa0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800f24c:	4b07      	ldr	r3, [pc, #28]	; (800f26c <TL_SYS_Init+0x2c>)
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800f24e:	68a2      	ldr	r2, [r4, #8]
  p_systable = TL_RefTable.p_sys_table;
 800f250:	68db      	ldr	r3, [r3, #12]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800f252:	e9c3 2500 	strd	r2, r5, [r3]
  HW_IPCC_SYS_Init();
 800f256:	f7f5 ff9f 	bl	8005198 <HW_IPCC_SYS_Init>
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800f25a:	e9d4 1200 	ldrd	r1, r2, [r4]
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800f25e:	4b04      	ldr	r3, [pc, #16]	; (800f270 <TL_SYS_Init+0x30>)
}
 800f260:	2000      	movs	r0, #0
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800f262:	e9c3 1204 	strd	r1, r2, [r3, #16]
}
 800f266:	bd38      	pop	{r3, r4, r5, pc}
 800f268:	200301c8 	.word	0x200301c8
 800f26c:	20030000 	.word	0x20030000
 800f270:	200015c8 	.word	0x200015c8

0800f274 <TL_SYS_SendCmd>:
{
 800f274:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800f276:	4b05      	ldr	r3, [pc, #20]	; (800f28c <TL_SYS_SendCmd+0x18>)
 800f278:	68d9      	ldr	r1, [r3, #12]
  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800f27a:	68db      	ldr	r3, [r3, #12]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800f27c:	680b      	ldr	r3, [r1, #0]
 800f27e:	2210      	movs	r2, #16
 800f280:	721a      	strb	r2, [r3, #8]
  HW_IPCC_SYS_SendCmd();
 800f282:	f7f5 ff91 	bl	80051a8 <HW_IPCC_SYS_SendCmd>
}
 800f286:	2000      	movs	r0, #0
 800f288:	bd08      	pop	{r3, pc}
 800f28a:	bf00      	nop
 800f28c:	20030000 	.word	0x20030000

0800f290 <HW_IPCC_SYS_CmdEvtNot>:
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800f290:	4b03      	ldr	r3, [pc, #12]	; (800f2a0 <HW_IPCC_SYS_CmdEvtNot+0x10>)
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800f292:	4904      	ldr	r1, [pc, #16]	; (800f2a4 <HW_IPCC_SYS_CmdEvtNot+0x14>)
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800f294:	68da      	ldr	r2, [r3, #12]
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800f296:	68da      	ldr	r2, [r3, #12]
 800f298:	690b      	ldr	r3, [r1, #16]
 800f29a:	6810      	ldr	r0, [r2, #0]
 800f29c:	4718      	bx	r3
 800f29e:	bf00      	nop
 800f2a0:	20030000 	.word	0x20030000
 800f2a4:	200015c8 	.word	0x200015c8

0800f2a8 <HW_IPCC_SYS_EvtNot>:
{
 800f2a8:	b530      	push	{r4, r5, lr}
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800f2aa:	4c09      	ldr	r4, [pc, #36]	; (800f2d0 <HW_IPCC_SYS_EvtNot+0x28>)
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800f2ac:	4d09      	ldr	r5, [pc, #36]	; (800f2d4 <HW_IPCC_SYS_EvtNot+0x2c>)
{
 800f2ae:	b083      	sub	sp, #12
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800f2b0:	e004      	b.n	800f2bc <HW_IPCC_SYS_EvtNot+0x14>
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800f2b2:	f7ff fe9d 	bl	800eff0 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800f2b6:	696b      	ldr	r3, [r5, #20]
 800f2b8:	9801      	ldr	r0, [sp, #4]
 800f2ba:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f7ff fe73 	bl	800efa8 <LST_is_empty>
 800f2c2:	4603      	mov	r3, r0
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800f2c4:	a901      	add	r1, sp, #4
 800f2c6:	4620      	mov	r0, r4
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d0f2      	beq.n	800f2b2 <HW_IPCC_SYS_EvtNot+0xa>
}
 800f2cc:	b003      	add	sp, #12
 800f2ce:	bd30      	pop	{r4, r5, pc}
 800f2d0:	200301c8 	.word	0x200301c8
 800f2d4:	200015c8 	.word	0x200015c8

0800f2d8 <TL_MM_Init>:
{
 800f2d8:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&FreeBufQueue);
 800f2da:	4d0c      	ldr	r5, [pc, #48]	; (800f30c <TL_MM_Init+0x34>)
{
 800f2dc:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 800f2de:	4628      	mov	r0, r5
 800f2e0:	f7ff fe5e 	bl	800efa0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800f2e4:	480a      	ldr	r0, [pc, #40]	; (800f310 <TL_MM_Init+0x38>)
 800f2e6:	f7ff fe5b 	bl	800efa0 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800f2ea:	4b0a      	ldr	r3, [pc, #40]	; (800f314 <TL_MM_Init+0x3c>)
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800f2ec:	68a1      	ldr	r1, [r4, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800f2ee:	68e2      	ldr	r2, [r4, #12]
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800f2f0:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800f2f2:	e9c3 1202 	strd	r1, r2, [r3, #8]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800f2f6:	e9d4 2000 	ldrd	r2, r0, [r4]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800f2fa:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800f2fc:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800f300:	611d      	str	r5, [r3, #16]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800f302:	e9c3 1205 	strd	r1, r2, [r3, #20]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800f306:	6058      	str	r0, [r3, #4]
}
 800f308:	bd38      	pop	{r3, r4, r5, pc}
 800f30a:	bf00      	nop
 800f30c:	200301d0 	.word	0x200301d0
 800f310:	200015c8 	.word	0x200015c8
 800f314:	20030000 	.word	0x20030000

0800f318 <TL_MM_EvtDone>:
{
 800f318:	b508      	push	{r3, lr}
 800f31a:	4601      	mov	r1, r0
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800f31c:	4803      	ldr	r0, [pc, #12]	; (800f32c <TL_MM_EvtDone+0x14>)
 800f31e:	f7ff fe5b 	bl	800efd8 <LST_insert_tail>
}
 800f322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800f326:	4802      	ldr	r0, [pc, #8]	; (800f330 <TL_MM_EvtDone+0x18>)
 800f328:	f7f5 bf84 	b.w	8005234 <HW_IPCC_MM_SendFreeBuf>
 800f32c:	200015c8 	.word	0x200015c8
 800f330:	0800f125 	.word	0x0800f125

0800f334 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800f334:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 800f336:	4c05      	ldr	r4, [pc, #20]	; (800f34c <TL_TRACES_Init+0x18>)
 800f338:	4620      	mov	r0, r4
 800f33a:	f7ff fe31 	bl	800efa0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800f33e:	4b04      	ldr	r3, [pc, #16]	; (800f350 <TL_TRACES_Init+0x1c>)
 800f340:	695b      	ldr	r3, [r3, #20]
 800f342:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();

  return;
}
 800f344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_IPCC_TRACES_Init();
 800f348:	f7f5 bf8a 	b.w	8005260 <HW_IPCC_TRACES_Init>
 800f34c:	200301d8 	.word	0x200301d8
 800f350:	20030000 	.word	0x20030000

0800f354 <TL_TRACES_EvtReceived>:
}

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
  (void)(hcievt);
}
 800f354:	4770      	bx	lr
 800f356:	bf00      	nop

0800f358 <HW_IPCC_TRACES_EvtNot>:
{
 800f358:	b510      	push	{r4, lr}
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800f35a:	4c09      	ldr	r4, [pc, #36]	; (800f380 <HW_IPCC_TRACES_EvtNot+0x28>)
{
 800f35c:	b082      	sub	sp, #8
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800f35e:	e004      	b.n	800f36a <HW_IPCC_TRACES_EvtNot+0x12>
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800f360:	f7ff fe46 	bl	800eff0 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800f364:	9801      	ldr	r0, [sp, #4]
 800f366:	f7ff fff5 	bl	800f354 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800f36a:	4620      	mov	r0, r4
 800f36c:	f7ff fe1c 	bl	800efa8 <LST_is_empty>
 800f370:	4603      	mov	r3, r0
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800f372:	a901      	add	r1, sp, #4
 800f374:	4620      	mov	r0, r4
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800f376:	2b00      	cmp	r3, #0
 800f378:	d0f2      	beq.n	800f360 <HW_IPCC_TRACES_EvtNot+0x8>
}
 800f37a:	b002      	add	sp, #8
 800f37c:	bd10      	pop	{r4, pc}
 800f37e:	bf00      	nop
 800f380:	200301d8 	.word	0x200301d8

0800f384 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800f384:	4b02      	ldr	r3, [pc, #8]	; (800f390 <UTIL_LPM_Init+0xc>)
 800f386:	2200      	movs	r2, #0
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800f388:	e9c3 2200 	strd	r2, r2, [r3]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop
 800f390:	200015e0 	.word	0x200015e0

0800f394 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f394:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f398:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800f39a:	b141      	cbz	r1, 800f3ae <UTIL_LPM_SetOffMode+0x1a>
 800f39c:	2901      	cmp	r1, #1
 800f39e:	d103      	bne.n	800f3a8 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800f3a0:	4907      	ldr	r1, [pc, #28]	; (800f3c0 <UTIL_LPM_SetOffMode+0x2c>)
 800f3a2:	684a      	ldr	r2, [r1, #4]
 800f3a4:	4310      	orrs	r0, r2
 800f3a6:	6048      	str	r0, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3a8:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800f3ac:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800f3ae:	4904      	ldr	r1, [pc, #16]	; (800f3c0 <UTIL_LPM_SetOffMode+0x2c>)
 800f3b0:	684a      	ldr	r2, [r1, #4]
 800f3b2:	ea22 0000 	bic.w	r0, r2, r0
 800f3b6:	6048      	str	r0, [r1, #4]
 800f3b8:	f383 8810 	msr	PRIMASK, r3
}
 800f3bc:	4770      	bx	lr
 800f3be:	bf00      	nop
 800f3c0:	200015e0 	.word	0x200015e0

0800f3c4 <UTIL_SEQ_RegTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f3c8:	b672      	cpsid	i
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  return (uint8_t)(31 -__CLZ( Value ));
 800f3ca:	fab0 f080 	clz	r0, r0
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800f3ce:	4b05      	ldr	r3, [pc, #20]	; (800f3e4 <UTIL_SEQ_RegTask+0x20>)
  return (uint8_t)(31 -__CLZ( Value ));
 800f3d0:	f1c0 001f 	rsb	r0, r0, #31
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800f3d4:	b2c0      	uxtb	r0, r0
 800f3d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f3da:	6102      	str	r2, [r0, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3dc:	f381 8810 	msr	PRIMASK, r1
}
 800f3e0:	4770      	bx	lr
 800f3e2:	bf00      	nop
 800f3e4:	200015e8 	.word	0x200015e8

0800f3e8 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3e8:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f3ec:	b672      	cpsid	i
  TaskSet |= TaskId_bm;
 800f3ee:	4b06      	ldr	r3, [pc, #24]	; (800f408 <UTIL_SEQ_SetTask+0x20>)
 800f3f0:	681a      	ldr	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800f3f2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  TaskSet |= TaskId_bm;
 800f3f6:	4302      	orrs	r2, r0
 800f3f8:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800f3fa:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800f3fc:	4318      	orrs	r0, r3
 800f3fe:	64c8      	str	r0, [r1, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f400:	f38c 8810 	msr	PRIMASK, ip
}
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop
 800f408:	200015e8 	.word	0x200015e8

0800f40c <UTIL_SEQ_PauseTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f40c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f410:	b672      	cpsid	i
  TaskMask &= (~TaskId_bm);
 800f412:	4a04      	ldr	r2, [pc, #16]	; (800f424 <UTIL_SEQ_PauseTask+0x18>)
 800f414:	6813      	ldr	r3, [r2, #0]
 800f416:	ea23 0000 	bic.w	r0, r3, r0
 800f41a:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f41c:	f381 8810 	msr	PRIMASK, r1
}
 800f420:	4770      	bx	lr
 800f422:	bf00      	nop
 800f424:	200000ec 	.word	0x200000ec

0800f428 <UTIL_SEQ_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f428:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f42c:	b672      	cpsid	i
  TaskMask |= TaskId_bm;
 800f42e:	4a03      	ldr	r2, [pc, #12]	; (800f43c <UTIL_SEQ_ResumeTask+0x14>)
 800f430:	6813      	ldr	r3, [r2, #0]
 800f432:	4318      	orrs	r0, r3
 800f434:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f436:	f381 8810 	msr	PRIMASK, r1
}
 800f43a:	4770      	bx	lr
 800f43c:	200000ec 	.word	0x200000ec

0800f440 <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f440:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f444:	b672      	cpsid	i
  EvtSet |= EvtId_bm;
 800f446:	4a03      	ldr	r2, [pc, #12]	; (800f454 <UTIL_SEQ_SetEvt+0x14>)
 800f448:	6853      	ldr	r3, [r2, #4]
 800f44a:	4318      	orrs	r0, r3
 800f44c:	6050      	str	r0, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f44e:	f381 8810 	msr	PRIMASK, r1
}
 800f452:	4770      	bx	lr
 800f454:	200015e8 	.word	0x200015e8

0800f458 <UTIL_SEQ_PreIdle>:
 800f458:	4770      	bx	lr
 800f45a:	bf00      	nop

0800f45c <UTIL_SEQ_PostIdle>:
 800f45c:	4770      	bx	lr
 800f45e:	bf00      	nop

0800f460 <UTIL_SEQ_Run>:
{
 800f460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 800f462:	4d32      	ldr	r5, [pc, #200]	; (800f52c <UTIL_SEQ_Run+0xcc>)
  local_taskset = TaskSet;
 800f464:	4c32      	ldr	r4, [pc, #200]	; (800f530 <UTIL_SEQ_Run+0xd0>)
  super_mask_backup = SuperMask;
 800f466:	686e      	ldr	r6, [r5, #4]
  local_taskset = TaskSet;
 800f468:	6822      	ldr	r2, [r4, #0]
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800f46a:	682b      	ldr	r3, [r5, #0]
  SuperMask &= Mask_bm;
 800f46c:	4030      	ands	r0, r6
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800f46e:	4013      	ands	r3, r2
 800f470:	4203      	tst	r3, r0
  SuperMask &= Mask_bm;
 800f472:	6068      	str	r0, [r5, #4]
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800f474:	d004      	beq.n	800f480 <UTIL_SEQ_Run+0x20>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f476:	2701      	movs	r7, #1
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800f478:	6862      	ldr	r2, [r4, #4]
 800f47a:	68a3      	ldr	r3, [r4, #8]
 800f47c:	421a      	tst	r2, r3
 800f47e:	d017      	beq.n	800f4b0 <UTIL_SEQ_Run+0x50>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800f480:	f04f 33ff 	mov.w	r3, #4294967295
 800f484:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 800f486:	f7ff ffe7 	bl	800f458 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f48a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f48e:	b672      	cpsid	i
  local_taskset = TaskSet;
 800f490:	6822      	ldr	r2, [r4, #0]
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800f492:	682b      	ldr	r3, [r5, #0]
 800f494:	4013      	ands	r3, r2
 800f496:	686a      	ldr	r2, [r5, #4]
 800f498:	4213      	tst	r3, r2
 800f49a:	d103      	bne.n	800f4a4 <UTIL_SEQ_Run+0x44>
 800f49c:	6862      	ldr	r2, [r4, #4]
 800f49e:	68a3      	ldr	r3, [r4, #8]
 800f4a0:	421a      	tst	r2, r3
 800f4a2:	d03a      	beq.n	800f51a <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4a4:	f387 8810 	msr	PRIMASK, r7
  UTIL_SEQ_PostIdle( );
 800f4a8:	f7ff ffd8 	bl	800f45c <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800f4ac:	606e      	str	r6, [r5, #4]
}
 800f4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800f4b0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800f4b2:	682b      	ldr	r3, [r5, #0]
    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	4013      	ands	r3, r2
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800f4b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800f4ba:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800f4bc:	ea02 0300 	and.w	r3, r2, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	bf18      	it	ne
 800f4c4:	4618      	movne	r0, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800f4c6:	fab0 f080 	clz	r0, r0
 800f4ca:	f1c0 001f 	rsb	r0, r0, #31
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f4ce:	b2c0      	uxtb	r0, r0
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800f4d0:	bf08      	it	eq
 800f4d2:	f04f 32ff 	moveq.w	r2, #4294967295
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f4d6:	fa07 f300 	lsl.w	r3, r7, r0
 800f4da:	ea22 0203 	bic.w	r2, r2, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f4de:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f4e0:	6522      	str	r2, [r4, #80]	; 0x50
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4e2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f4e6:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800f4e8:	68e3      	ldr	r3, [r4, #12]
 800f4ea:	6822      	ldr	r2, [r4, #0]
 800f4ec:	fa07 f303 	lsl.w	r3, r7, r3
 800f4f0:	ea22 0203 	bic.w	r2, r2, r3
 800f4f4:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800f4f6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800f4f8:	ea22 0303 	bic.w	r3, r2, r3
 800f4fc:	64e3      	str	r3, [r4, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4fe:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800f502:	68e3      	ldr	r3, [r4, #12]
 800f504:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f508:	691b      	ldr	r3, [r3, #16]
 800f50a:	4798      	blx	r3
    local_taskset = TaskSet;
 800f50c:	6822      	ldr	r2, [r4, #0]
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800f50e:	682b      	ldr	r3, [r5, #0]
 800f510:	6868      	ldr	r0, [r5, #4]
 800f512:	4013      	ands	r3, r2
 800f514:	4203      	tst	r3, r0
 800f516:	d1af      	bne.n	800f478 <UTIL_SEQ_Run+0x18>
 800f518:	e7b2      	b.n	800f480 <UTIL_SEQ_Run+0x20>
	UTIL_SEQ_Idle( );
 800f51a:	f7f1 feed 	bl	80012f8 <UTIL_SEQ_Idle>
 800f51e:	f387 8810 	msr	PRIMASK, r7
  UTIL_SEQ_PostIdle( );
 800f522:	f7ff ff9b 	bl	800f45c <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800f526:	606e      	str	r6, [r5, #4]
}
 800f528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f52a:	bf00      	nop
 800f52c:	200000ec 	.word	0x200000ec
 800f530:	200015e8 	.word	0x200015e8

0800f534 <UTIL_SEQ_WaitEvt>:
{
 800f534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  current_task_idx = CurrentTaskIdx;
 800f536:	4c10      	ldr	r4, [pc, #64]	; (800f578 <UTIL_SEQ_WaitEvt+0x44>)
 800f538:	68e6      	ldr	r6, [r4, #12]
  event_waited_id_backup = EvtWaited;
 800f53a:	68a7      	ldr	r7, [r4, #8]
  EvtWaited = EvtId_bm;
 800f53c:	60a0      	str	r0, [r4, #8]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800f53e:	1c73      	adds	r3, r6, #1
  while ((EvtSet & EvtWaited) == 0U)
 800f540:	6863      	ldr	r3, [r4, #4]
    wait_task_idx = 1 << CurrentTaskIdx;
 800f542:	bf1a      	itte	ne
 800f544:	2501      	movne	r5, #1
 800f546:	40b5      	lslne	r5, r6
    wait_task_idx = 0;
 800f548:	2500      	moveq	r5, #0
  while ((EvtSet & EvtWaited) == 0U)
 800f54a:	4218      	tst	r0, r3
{
 800f54c:	4601      	mov	r1, r0
  while ((EvtSet & EvtWaited) == 0U)
 800f54e:	d106      	bne.n	800f55e <UTIL_SEQ_WaitEvt+0x2a>
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800f550:	4628      	mov	r0, r5
 800f552:	f7f1 fed3 	bl	80012fc <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800f556:	6863      	ldr	r3, [r4, #4]
 800f558:	68a1      	ldr	r1, [r4, #8]
 800f55a:	420b      	tst	r3, r1
 800f55c:	d0f8      	beq.n	800f550 <UTIL_SEQ_WaitEvt+0x1c>
  CurrentTaskIdx = current_task_idx;
 800f55e:	60e6      	str	r6, [r4, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f560:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f564:	b672      	cpsid	i
  EvtSet &= (~EvtWaited);
 800f566:	6863      	ldr	r3, [r4, #4]
 800f568:	68a1      	ldr	r1, [r4, #8]
 800f56a:	ea23 0301 	bic.w	r3, r3, r1
 800f56e:	6063      	str	r3, [r4, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f570:	f382 8810 	msr	PRIMASK, r2
  EvtWaited = event_waited_id_backup;
 800f574:	60a7      	str	r7, [r4, #8]
}
 800f576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f578:	200015e8 	.word	0x200015e8
 800f57c:	00000000 	.word	0x00000000

0800f580 <MotionAR_Update>:
 800f580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f584:	f8df a41c 	ldr.w	sl, [pc, #1052]	; 800f9a4 <MotionAR_Update+0x424>
 800f588:	ed2d 8b10 	vpush	{d8-d15}
 800f58c:	f89a c000 	ldrb.w	ip, [sl]
 800f590:	b097      	sub	sp, #92	; 0x5c
 800f592:	f1bc 0f00 	cmp.w	ip, #0
 800f596:	d104      	bne.n	800f5a2 <MotionAR_Update+0x22>
 800f598:	b017      	add	sp, #92	; 0x5c
 800f59a:	ecbd 8b10 	vpop	{d8-d15}
 800f59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5a2:	eddf 7af1 	vldr	s15, [pc, #964]	; 800f968 <MotionAR_Update+0x3e8>
 800f5a6:	edd0 8a00 	vldr	s17, [r0]
 800f5aa:	ed90 9a01 	vldr	s18, [r0, #4]
 800f5ae:	ed90 8a02 	vldr	s16, [r0, #8]
 800f5b2:	468b      	mov	fp, r1
 800f5b4:	f8da 1038 	ldr.w	r1, [sl, #56]	; 0x38
 800f5b8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f5bc:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f5c0:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f5c4:	4614      	mov	r4, r2
 800f5c6:	461d      	mov	r5, r3
 800f5c8:	2900      	cmp	r1, #0
 800f5ca:	f000 81fa 	beq.w	800f9c2 <MotionAR_Update+0x442>
 800f5ce:	e9da 980a 	ldrd	r9, r8, [sl, #40]	; 0x28
 800f5d2:	edda aa04 	vldr	s21, [sl, #16]
 800f5d6:	ed9a aa05 	vldr	s20, [sl, #20]
 800f5da:	edda 9a06 	vldr	s19, [sl, #24]
 800f5de:	edca aa07 	vstr	s21, [sl, #28]
 800f5e2:	3101      	adds	r1, #1
 800f5e4:	2905      	cmp	r1, #5
 800f5e6:	e9ca 980c 	strd	r9, r8, [sl, #48]	; 0x30
 800f5ea:	e9ca 450a 	strd	r4, r5, [sl, #40]	; 0x28
 800f5ee:	edca 8a04 	vstr	s17, [sl, #16]
 800f5f2:	ed8a aa08 	vstr	s20, [sl, #32]
 800f5f6:	ed8a 9a05 	vstr	s18, [sl, #20]
 800f5fa:	edca 9a09 	vstr	s19, [sl, #36]	; 0x24
 800f5fe:	ed8a 8a06 	vstr	s16, [sl, #24]
 800f602:	f300 81dc 	bgt.w	800f9be <MotionAR_Update+0x43e>
 800f606:	f8da 003c 	ldr.w	r0, [sl, #60]	; 0x3c
 800f60a:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
 800f60e:	f7f1 fc31 	bl	8000e74 <__aeabi_f2lz>
 800f612:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f616:	18c6      	adds	r6, r0, r3
 800f618:	f8da 300c 	ldr.w	r3, [sl, #12]
 800f61c:	eb41 0703 	adc.w	r7, r1, r3
 800f620:	42b4      	cmp	r4, r6
 800f622:	eb75 0307 	sbcs.w	r3, r5, r7
 800f626:	f2c0 81c1 	blt.w	800f9ac <MotionAR_Update+0x42c>
 800f62a:	ebb4 0309 	subs.w	r3, r4, r9
 800f62e:	9300      	str	r3, [sp, #0]
 800f630:	eb65 0308 	sbc.w	r3, r5, r8
 800f634:	9301      	str	r3, [sp, #4]
 800f636:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f63a:	2d00      	cmp	r5, #0
 800f63c:	bf08      	it	eq
 800f63e:	2c65      	cmpeq	r4, #101	; 0x65
 800f640:	f080 81b4 	bcs.w	800f9ac <MotionAR_Update+0x42c>
 800f644:	ebb6 0009 	subs.w	r0, r6, r9
 800f648:	eb67 0108 	sbc.w	r1, r7, r8
 800f64c:	f7f1 fbbc 	bl	8000dc8 <__aeabi_l2f>
 800f650:	ee07 4a90 	vmov	s15, r4
 800f654:	ee07 0a10 	vmov	s14, r0
 800f658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f65c:	ee87 7a27 	vdiv.f32	s14, s14, s15
 800f660:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f668:	f100 81f8 	bmi.w	800fa5c <MotionAR_Update+0x4dc>
 800f66c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f670:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f674:	46b1      	mov	r9, r6
 800f676:	46b8      	mov	r8, r7
 800f678:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800f67c:	ee2a aa27 	vmul.f32	s20, s20, s15
 800f680:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800f684:	eee8 aa87 	vfma.f32	s21, s17, s14
 800f688:	e9ca 9802 	strd	r9, r8, [sl, #8]
 800f68c:	eea9 aa07 	vfma.f32	s20, s18, s14
 800f690:	eee8 9a07 	vfma.f32	s19, s16, s14
 800f694:	eef0 8a6a 	vmov.f32	s17, s21
 800f698:	eeb0 9a4a 	vmov.f32	s18, s20
 800f69c:	eeb0 8a69 	vmov.f32	s16, s19
 800f6a0:	4cb2      	ldr	r4, [pc, #712]	; (800f96c <MotionAR_Update+0x3ec>)
 800f6a2:	f89a 5041 	ldrb.w	r5, [sl, #65]	; 0x41
 800f6a6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800f6aa:	ee06 3a90 	vmov	s13, r3
 800f6ae:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800f6b2:	ee07 3a10 	vmov	s14, r3
 800f6b6:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800f6ba:	ee07 3a90 	vmov	s15, r3
 800f6be:	f994 3000 	ldrsb.w	r3, [r4]
 800f6c2:	ee06 3a10 	vmov	s12, r3
 800f6c6:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800f6ca:	ee04 3a10 	vmov	s8, r3
 800f6ce:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800f6d2:	ee04 3a90 	vmov	s9, r3
 800f6d6:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800f6da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f6de:	ee05 3a10 	vmov	s10, r3
 800f6e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f6e6:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800f6ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6ee:	ee66 6a89 	vmul.f32	s13, s13, s18
 800f6f2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800f6f6:	ee27 7a09 	vmul.f32	s14, s14, s18
 800f6fa:	ee67 7a89 	vmul.f32	s15, s15, s18
 800f6fe:	ee05 3a90 	vmov	s11, r3
 800f702:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 800f706:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800f70a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800f70e:	eee8 6a86 	vfma.f32	s13, s17, s12
 800f712:	eea8 7a84 	vfma.f32	s14, s17, s8
 800f716:	eee8 7aa4 	vfma.f32	s15, s17, s9
 800f71a:	ee06 3a10 	vmov	s12, r3
 800f71e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800f722:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800f726:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800f72a:	eee5 6a08 	vfma.f32	s13, s10, s16
 800f72e:	eea5 7a88 	vfma.f32	s14, s11, s16
 800f732:	eee6 7a08 	vfma.f32	s15, s12, s16
 800f736:	eef0 9a66 	vmov.f32	s19, s13
 800f73a:	eef0 8a47 	vmov.f32	s17, s14
 800f73e:	eeb0 9a67 	vmov.f32	s18, s15
 800f742:	2d00      	cmp	r5, #0
 800f744:	f000 814b 	beq.w	800f9de <MotionAR_Update+0x45e>
 800f748:	f89a 0060 	ldrb.w	r0, [sl, #96]	; 0x60
 800f74c:	4b88      	ldr	r3, [pc, #544]	; (800f970 <MotionAR_Update+0x3f0>)
 800f74e:	f89a 1063 	ldrb.w	r1, [sl, #99]	; 0x63
 800f752:	4a88      	ldr	r2, [pc, #544]	; (800f974 <MotionAR_Update+0x3f4>)
 800f754:	eddf 7a88 	vldr	s15, [pc, #544]	; 800f978 <MotionAR_Update+0x3f8>
 800f758:	f89a 5061 	ldrb.w	r5, [sl, #97]	; 0x61
 800f75c:	f89a 6062 	ldrb.w	r6, [sl, #98]	; 0x62
 800f760:	3001      	adds	r0, #1
 800f762:	fba3 7300 	umull	r7, r3, r3, r0
 800f766:	f101 0c01 	add.w	ip, r1, #1
 800f76a:	095b      	lsrs	r3, r3, #5
 800f76c:	fba2 720c 	umull	r7, r2, r2, ip
 800f770:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f774:	eba0 1303 	sub.w	r3, r0, r3, lsl #4
 800f778:	f402 70fe 	and.w	r0, r2, #508	; 0x1fc
 800f77c:	eb00 0292 	add.w	r2, r0, r2, lsr #2
 800f780:	ebac 0c02 	sub.w	ip, ip, r2
 800f784:	2201      	movs	r2, #1
 800f786:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f78a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f78e:	f88a 3060 	strb.w	r3, [sl, #96]	; 0x60
 800f792:	ee69 7a27 	vmul.f32	s15, s18, s15
 800f796:	fa5f fc8c 	uxtb.w	ip, ip
 800f79a:	1d4f      	adds	r7, r1, #5
 800f79c:	f88a 2041 	strb.w	r2, [sl, #65]	; 0x41
 800f7a0:	b125      	cbz	r5, 800f7ac <MotionAR_Update+0x22c>
 800f7a2:	f006 060f 	and.w	r6, r6, #15
 800f7a6:	3601      	adds	r6, #1
 800f7a8:	f88a 6062 	strb.w	r6, [sl, #98]	; 0x62
 800f7ac:	ee27 6a07 	vmul.f32	s12, s14, s14
 800f7b0:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
 800f7b4:	eea6 6aa6 	vfma.f32	s12, s13, s13
 800f7b8:	2b2f      	cmp	r3, #47	; 0x2f
 800f7ba:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800f7be:	edc2 6a3b 	vstr	s13, [r2, #236]	; 0xec
 800f7c2:	eef0 6a46 	vmov.f32	s13, s12
 800f7c6:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800f7ca:	4b6a      	ldr	r3, [pc, #424]	; (800f974 <MotionAR_Update+0x3f4>)
 800f7cc:	f88a c063 	strb.w	ip, [sl, #99]	; 0x63
 800f7d0:	ed82 7a6b 	vstr	s14, [r2, #428]	; 0x1ac
 800f7d4:	fba3 ec07 	umull	lr, ip, r3, r7
 800f7d8:	edc2 6acb 	vstr	s13, [r2, #812]	; 0x32c
 800f7dc:	edc2 7a9b 	vstr	s15, [r2, #620]	; 0x26c
 800f7e0:	f107 32ff 	add.w	r2, r7, #4294967295
 800f7e4:	fba3 e802 	umull	lr, r8, r3, r2
 800f7e8:	f40c 79fe 	and.w	r9, ip, #508	; 0x1fc
 800f7ec:	f028 0e03 	bic.w	lr, r8, #3
 800f7f0:	eb09 0c9c 	add.w	ip, r9, ip, lsr #2
 800f7f4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f7f8:	eb0e 0e98 	add.w	lr, lr, r8, lsr #2
 800f7fc:	eba7 0c0c 	sub.w	ip, r7, ip
 800f800:	edc1 6a03 	vstr	s13, [r1, #12]
 800f804:	eba2 020e 	sub.w	r2, r2, lr
 800f808:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 800f80c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f810:	ed9c 7a03 	vldr	s14, [ip, #12]
 800f814:	edd2 7a03 	vldr	s15, [r2, #12]
 800f818:	ed81 7a08 	vstr	s14, [r1, #32]
 800f81c:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 800f820:	eef0 6a47 	vmov.f32	s13, s14
 800f824:	eee7 6aa5 	vfma.f32	s13, s15, s11
 800f828:	f1a7 0c02 	sub.w	ip, r7, #2
 800f82c:	fba3 e90c 	umull	lr, r9, r3, ip
 800f830:	f029 0e03 	bic.w	lr, r9, #3
 800f834:	edc1 6a0d 	vstr	s13, [r1, #52]	; 0x34
 800f838:	ed9f 5a50 	vldr	s10, [pc, #320]	; 800f97c <MotionAR_Update+0x3fc>
 800f83c:	edd2 0a08 	vldr	s1, [r2, #32]
 800f840:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 800f980 <MotionAR_Update+0x400>
 800f844:	eddf 1a4f 	vldr	s3, [pc, #316]	; 800f984 <MotionAR_Update+0x404>
 800f848:	ed9f 2a4f 	vldr	s4, [pc, #316]	; 800f988 <MotionAR_Update+0x408>
 800f84c:	eddf 2a4f 	vldr	s5, [pc, #316]	; 800f98c <MotionAR_Update+0x40c>
 800f850:	ed9f 3a4f 	vldr	s6, [pc, #316]	; 800f990 <MotionAR_Update+0x410>
 800f854:	eddf 3a4f 	vldr	s7, [pc, #316]	; 800f994 <MotionAR_Update+0x414>
 800f858:	ed9f 4a4f 	vldr	s8, [pc, #316]	; 800f998 <MotionAR_Update+0x418>
 800f85c:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 800f99c <MotionAR_Update+0x41c>
 800f860:	eddf 4a4f 	vldr	s9, [pc, #316]	; 800f9a0 <MotionAR_Update+0x420>
 800f864:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800f9a8 <MotionAR_Update+0x428>
 800f868:	eef0 7a66 	vmov.f32	s15, s13
 800f86c:	edd2 6a0d 	vldr	s13, [r2, #52]	; 0x34
 800f870:	eb0e 0299 	add.w	r2, lr, r9, lsr #2
 800f874:	eee6 7ac5 	vfms.f32	s15, s13, s10
 800f878:	ebac 0c02 	sub.w	ip, ip, r2
 800f87c:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 800f880:	ed9c 5a03 	vldr	s10, [ip, #12]
 800f884:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800f888:	eee5 7a26 	vfma.f32	s15, s10, s13
 800f88c:	f1a7 0203 	sub.w	r2, r7, #3
 800f890:	fba3 e902 	umull	lr, r9, r3, r2
 800f894:	eea0 7ac1 	vfms.f32	s14, s1, s2
 800f898:	f029 0e03 	bic.w	lr, r9, #3
 800f89c:	eb0e 0e99 	add.w	lr, lr, r9, lsr #2
 800f8a0:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 800f8a4:	edc1 7a0d 	vstr	s15, [r1, #52]	; 0x34
 800f8a8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f8ac:	eba2 020e 	sub.w	r2, r2, lr
 800f8b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f8b4:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800f8b8:	ed81 7a08 	vstr	s14, [r1, #32]
 800f8bc:	eee6 7ae1 	vfms.f32	s15, s13, s3
 800f8c0:	f1a7 0704 	sub.w	r7, r7, #4
 800f8c4:	fba3 e307 	umull	lr, r3, r3, r7
 800f8c8:	eddc 6a08 	vldr	s13, [ip, #32]
 800f8cc:	ed92 5a03 	vldr	s10, [r2, #12]
 800f8d0:	eea6 7ac2 	vfms.f32	s14, s13, s4
 800f8d4:	f023 0e03 	bic.w	lr, r3, #3
 800f8d8:	eb0e 0393 	add.w	r3, lr, r3, lsr #2
 800f8dc:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f8e0:	eba7 0703 	sub.w	r7, r7, r3
 800f8e4:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800f8e8:	ed81 7a08 	vstr	s14, [r1, #32]
 800f8ec:	edc1 7a0d 	vstr	s15, [r1, #52]	; 0x34
 800f8f0:	edd2 5a08 	vldr	s11, [r2, #32]
 800f8f4:	ed92 5a0d 	vldr	s10, [r2, #52]	; 0x34
 800f8f8:	edd4 6a03 	vldr	s13, [r4, #12]
 800f8fc:	eea5 7ac3 	vfms.f32	s14, s11, s6
 800f900:	bf08      	it	eq
 800f902:	2501      	moveq	r5, #1
 800f904:	eb08 0300 	add.w	r3, r8, r0
 800f908:	eee5 7a62 	vfms.f32	s15, s10, s5
 800f90c:	bf08      	it	eq
 800f90e:	f88a 5061 	strbeq.w	r5, [sl, #97]	; 0x61
 800f912:	4450      	add	r0, sl
 800f914:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f91c:	ed81 7a08 	vstr	s14, [r1, #32]
 800f920:	edc1 7a0d 	vstr	s15, [r1, #52]	; 0x34
 800f924:	edd4 6a08 	vldr	s13, [r4, #32]
 800f928:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 800f92c:	eea6 7ac4 	vfms.f32	s14, s13, s8
 800f930:	2e10      	cmp	r6, #16
 800f932:	eee5 7ae3 	vfms.f32	s15, s11, s7
 800f936:	ee67 6a24 	vmul.f32	s13, s14, s9
 800f93a:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f93e:	edc1 7a0d 	vstr	s15, [r1, #52]	; 0x34
 800f942:	ed83 6a00 	vstr	s12, [r3]
 800f946:	ed81 7a08 	vstr	s14, [r1, #32]
 800f94a:	edc0 6afb 	vstr	s13, [r0, #1004]	; 0x3ec
 800f94e:	f000 8093 	beq.w	800fa78 <MotionAR_Update+0x4f8>
 800f952:	f89a 3064 	ldrb.w	r3, [sl, #100]	; 0x64
 800f956:	f88b 3000 	strb.w	r3, [fp]
 800f95a:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
 800f95e:	b017      	add	sp, #92	; 0x5c
 800f960:	ecbd 8b10 	vpop	{d8-d15}
 800f964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f968:	411cf5c3 	.word	0x411cf5c3
 800f96c:	200000f4 	.word	0x200000f4
 800f970:	aaaaaaab 	.word	0xaaaaaaab
 800f974:	cccccccd 	.word	0xcccccccd
 800f978:	bdd0fac6 	.word	0xbdd0fac6
 800f97c:	c03e849e 	.word	0xc03e849e
 800f980:	c01f623c 	.word	0xc01f623c
 800f984:	405b071f 	.word	0x405b071f
 800f988:	4041cfc2 	.word	0x4041cfc2
 800f98c:	bfe49f24 	.word	0xbfe49f24
 800f990:	bff02766 	.word	0xbff02766
 800f994:	3eb60e3d 	.word	0x3eb60e3d
 800f998:	3f12f5b9 	.word	0x3f12f5b9
 800f99c:	3a74b608 	.word	0x3a74b608
 800f9a0:	3cf5c28f 	.word	0x3cf5c28f
 800f9a4:	20001640 	.word	0x20001640
 800f9a8:	20001aec 	.word	0x20001aec
 800f9ac:	f89a 3040 	ldrb.w	r3, [sl, #64]	; 0x40
 800f9b0:	f88b 3000 	strb.w	r3, [fp]
 800f9b4:	b017      	add	sp, #92	; 0x5c
 800f9b6:	ecbd 8b10 	vpop	{d8-d15}
 800f9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9be:	2105      	movs	r1, #5
 800f9c0:	e621      	b.n	800f606 <MotionAR_Update+0x86>
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	e9ca 450a 	strd	r4, r5, [sl, #40]	; 0x28
 800f9c8:	e9ca 4502 	strd	r4, r5, [sl, #8]
 800f9cc:	edca 8a04 	vstr	s17, [sl, #16]
 800f9d0:	ed8a 9a05 	vstr	s18, [sl, #20]
 800f9d4:	ed8a 8a06 	vstr	s16, [sl, #24]
 800f9d8:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
 800f9dc:	e660      	b.n	800f6a0 <MotionAR_Update+0x120>
 800f9de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f9e2:	2280      	movs	r2, #128	; 0x80
 800f9e4:	4629      	mov	r1, r5
 800f9e6:	4820      	ldr	r0, [pc, #128]	; (800fa68 <MotionAR_Update+0x4e8>)
 800f9e8:	60e3      	str	r3, [r4, #12]
 800f9ea:	6223      	str	r3, [r4, #32]
 800f9ec:	6363      	str	r3, [r4, #52]	; 0x34
 800f9ee:	6123      	str	r3, [r4, #16]
 800f9f0:	6263      	str	r3, [r4, #36]	; 0x24
 800f9f2:	63a3      	str	r3, [r4, #56]	; 0x38
 800f9f4:	6163      	str	r3, [r4, #20]
 800f9f6:	62a3      	str	r3, [r4, #40]	; 0x28
 800f9f8:	63e3      	str	r3, [r4, #60]	; 0x3c
 800f9fa:	61a3      	str	r3, [r4, #24]
 800f9fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f9fe:	6423      	str	r3, [r4, #64]	; 0x40
 800fa00:	61e3      	str	r3, [r4, #28]
 800fa02:	6323      	str	r3, [r4, #48]	; 0x30
 800fa04:	6463      	str	r3, [r4, #68]	; 0x44
 800fa06:	f88a 5062 	strb.w	r5, [sl, #98]	; 0x62
 800fa0a:	f88a 5061 	strb.w	r5, [sl, #97]	; 0x61
 800fa0e:	f88a 5064 	strb.w	r5, [sl, #100]	; 0x64
 800fa12:	f013 f9bd 	bl	8022d90 <memset>
 800fa16:	eddf 7a15 	vldr	s15, [pc, #84]	; 800fa6c <MotionAR_Update+0x4ec>
 800fa1a:	f8ca 50e8 	str.w	r5, [sl, #232]	; 0xe8
 800fa1e:	2301      	movs	r3, #1
 800fa20:	2203      	movs	r2, #3
 800fa22:	ee69 6aa7 	vmul.f32	s13, s19, s15
 800fa26:	ee28 7aa7 	vmul.f32	s14, s17, s15
 800fa2a:	e9ca 5511 	strd	r5, r5, [sl, #68]	; 0x44
 800fa2e:	e9ca 5513 	strd	r5, r5, [sl, #76]	; 0x4c
 800fa32:	e9ca 5515 	strd	r5, r5, [sl, #84]	; 0x54
 800fa36:	ee69 7a27 	vmul.f32	s15, s18, s15
 800fa3a:	469c      	mov	ip, r3
 800fa3c:	f88a 505e 	strb.w	r5, [sl, #94]	; 0x5e
 800fa40:	f88a 305c 	strb.w	r3, [sl, #92]	; 0x5c
 800fa44:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
 800fa48:	f88a 3041 	strb.w	r3, [sl, #65]	; 0x41
 800fa4c:	f88a 3060 	strb.w	r3, [sl, #96]	; 0x60
 800fa50:	f88a 205f 	strb.w	r2, [sl, #95]	; 0x5f
 800fa54:	462e      	mov	r6, r5
 800fa56:	2705      	movs	r7, #5
 800fa58:	4629      	mov	r1, r5
 800fa5a:	e6a7      	b.n	800f7ac <MotionAR_Update+0x22c>
 800fa5c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800fa70 <MotionAR_Update+0x4f0>
 800fa60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fa64:	e608      	b.n	800f678 <MotionAR_Update+0xf8>
 800fa66:	bf00      	nop
 800fa68:	200016a8 	.word	0x200016a8
 800fa6c:	bdd0fac6 	.word	0xbdd0fac6
 800fa70:	00000000 	.word	0x00000000
 800fa74:	3caaaaab 	.word	0x3caaaaab
 800fa78:	2d00      	cmp	r5, #0
 800fa7a:	f43f af6a 	beq.w	800f952 <MotionAR_Update+0x3d2>
 800fa7e:	ed1f 8a04 	vldr	s16, [pc, #-16]	; 800fa70 <MotionAR_Update+0x4f0>
 800fa82:	f5a8 7470 	sub.w	r4, r8, #960	; 0x3c0
 800fa86:	f5a8 7540 	sub.w	r5, r8, #768	; 0x300
 800fa8a:	f5a8 7610 	sub.w	r6, r8, #576	; 0x240
 800fa8e:	eef0 9a48 	vmov.f32	s19, s16
 800fa92:	eeb0 7a48 	vmov.f32	s14, s16
 800fa96:	eef0 7a48 	vmov.f32	s15, s16
 800fa9a:	eeb0 ea48 	vmov.f32	s28, s16
 800fa9e:	eeb0 9a48 	vmov.f32	s18, s16
 800faa2:	eeb0 aa48 	vmov.f32	s20, s16
 800faa6:	eeb0 ba48 	vmov.f32	s22, s16
 800faaa:	eef0 aa48 	vmov.f32	s21, s16
 800faae:	eef0 8a48 	vmov.f32	s17, s16
 800fab2:	eeb0 6a48 	vmov.f32	s12, s16
 800fab6:	eef0 5a48 	vmov.f32	s11, s16
 800faba:	eef0 6a48 	vmov.f32	s13, s16
 800fabe:	46c1      	mov	r9, r8
 800fac0:	4623      	mov	r3, r4
 800fac2:	462f      	mov	r7, r5
 800fac4:	46ae      	mov	lr, r5
 800fac6:	46b4      	mov	ip, r6
 800fac8:	f504 7040 	add.w	r0, r4, #768	; 0x300
 800facc:	4641      	mov	r1, r8
 800face:	f5a8 72c0 	sub.w	r2, r8, #384	; 0x180
 800fad2:	eeb2 5a04 	vmov.f32	s10, #36	; 0x41200000  10.0
 800fad6:	ecf2 4a01 	vldmia	r2!, {s9}
 800fada:	ecb3 2a01 	vldmia	r3!, {s4}
 800fade:	ecfe 2a01 	vldmia	lr!, {s5}
 800fae2:	ecbc 3a01 	vldmia	ip!, {s6}
 800fae6:	ecf0 3a01 	vldmia	r0!, {s7}
 800faea:	ecb1 4a01 	vldmia	r1!, {s8}
 800faee:	eeb4 eae4 	vcmpe.f32	s28, s9
 800faf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf6:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800fafa:	bfb8      	it	lt
 800fafc:	eeb0 ea64 	vmovlt.f32	s28, s9
 800fb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb04:	bf88      	it	hi
 800fb06:	eeb0 5a64 	vmovhi.f32	s10, s9
 800fb0a:	429f      	cmp	r7, r3
 800fb0c:	eea4 9aa4 	vfma.f32	s18, s9, s9
 800fb10:	eee2 aa02 	vfma.f32	s21, s4, s4
 800fb14:	eea2 baa2 	vfma.f32	s22, s5, s5
 800fb18:	eea3 aa03 	vfma.f32	s20, s6, s6
 800fb1c:	eee3 9aa3 	vfma.f32	s19, s7, s7
 800fb20:	eea4 8a04 	vfma.f32	s16, s8, s8
 800fb24:	ee78 8aa4 	vadd.f32	s17, s17, s9
 800fb28:	ee76 6a82 	vadd.f32	s13, s13, s4
 800fb2c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800fb30:	ee36 6a03 	vadd.f32	s12, s12, s6
 800fb34:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800fb38:	ee37 7a04 	vadd.f32	s14, s14, s8
 800fb3c:	d1cb      	bne.n	800fad6 <MotionAR_Update+0x556>
 800fb3e:	ed1f fa33 	vldr	s30, [pc, #-204]	; 800fa74 <MotionAR_Update+0x4f4>
 800fb42:	edcd 7a03 	vstr	s15, [sp, #12]
 800fb46:	ee66 ba8f 	vmul.f32	s23, s13, s30
 800fb4a:	ee66 da0f 	vmul.f32	s27, s12, s30
 800fb4e:	ee6b caab 	vmul.f32	s25, s23, s23
 800fb52:	ee2d daad 	vmul.f32	s26, s27, s27
 800fb56:	ee65 fa8f 	vmul.f32	s31, s11, s30
 800fb5a:	ee7c ea8d 	vadd.f32	s29, s25, s26
 800fb5e:	ed8d 5a04 	vstr	s10, [sp, #16]
 800fb62:	eeb1 6aee 	vsqrt.f32	s12, s29
 800fb66:	ed8d 7a00 	vstr	s14, [sp]
 800fb6a:	eecf 7a86 	vdiv.f32	s15, s31, s12
 800fb6e:	eeb0 caeb 	vabs.f32	s24, s23
 800fb72:	ee17 0a90 	vmov	r0, s15
 800fb76:	f7f0 fcb7 	bl	80004e8 <__aeabi_f2d>
 800fb7a:	f011 f9ad 	bl	8020ed8 <atan>
 800fb7e:	f7f1 f803 	bl	8000b88 <__aeabi_d2f>
 800fb82:	eecc 7a2d 	vdiv.f32	s15, s24, s27
 800fb86:	4603      	mov	r3, r0
 800fb88:	9305      	str	r3, [sp, #20]
 800fb8a:	ee17 0a90 	vmov	r0, s15
 800fb8e:	f7f0 fcab 	bl	80004e8 <__aeabi_f2d>
 800fb92:	f011 f9a1 	bl	8020ed8 <atan>
 800fb96:	f7f0 fff7 	bl	8000b88 <__aeabi_d2f>
 800fb9a:	f8da 20e8 	ldr.w	r2, [sl, #232]	; 0xe8
 800fb9e:	4bcb      	ldr	r3, [pc, #812]	; (800fecc <MotionAR_Update+0x94c>)
 800fba0:	ed9d 5a04 	vldr	s10, [sp, #16]
 800fba4:	eddd 7a03 	vldr	s15, [sp, #12]
 800fba8:	ed9d 7a00 	vldr	s14, [sp]
 800fbac:	9006      	str	r0, [sp, #24]
 800fbae:	1c51      	adds	r1, r2, #1
 800fbb0:	f1d1 0c00 	rsbs	ip, r1, #0
 800fbb4:	ee28 4a8f 	vmul.f32	s8, s17, s30
 800fbb8:	f00c 0c07 	and.w	ip, ip, #7
 800fbbc:	eb0a 0e82 	add.w	lr, sl, r2, lsl #2
 800fbc0:	f001 0107 	and.w	r1, r1, #7
 800fbc4:	bf58      	it	pl
 800fbc6:	f1cc 0100 	rsbpl	r1, ip, #0
 800fbca:	f8ca 10e8 	str.w	r1, [sl, #232]	; 0xe8
 800fbce:	edce ba1a 	vstr	s23, [lr, #104]	; 0x68
 800fbd2:	edce fa22 	vstr	s31, [lr, #136]	; 0x88
 800fbd6:	edce da2a 	vstr	s27, [lr, #168]	; 0xa8
 800fbda:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800fbde:	ed8e 4a32 	vstr	s8, [lr, #200]	; 0xc8
 800fbe2:	a90e      	add	r1, sp, #56	; 0x38
 800fbe4:	aa12      	add	r2, sp, #72	; 0x48
 800fbe6:	edd3 6a00 	vldr	s13, [r3]
 800fbea:	edd3 5a01 	vldr	s11, [r3, #4]
 800fbee:	ece1 6a01 	vstmia	r1!, {s13}
 800fbf2:	eef4 5ae6 	vcmpe.f32	s11, s13
 800fbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbfa:	eef4 5ae6 	vcmpe.f32	s11, s13
 800fbfe:	ece2 6a01 	vstmia	r2!, {s13}
 800fc02:	bfca      	itet	gt
 800fc04:	eeb0 6a65 	vmovgt.f32	s12, s11
 800fc08:	eeb0 6a66 	vmovle.f32	s12, s13
 800fc0c:	ed41 5a01 	vstrgt	s11, [r1, #-4]
 800fc10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc14:	bf44      	itt	mi
 800fc16:	eef0 6a65 	vmovmi.f32	s13, s11
 800fc1a:	ed42 5a01 	vstrmi	s11, [r2, #-4]
 800fc1e:	edd3 5a02 	vldr	s11, [r3, #8]
 800fc22:	eef4 5ac6 	vcmpe.f32	s11, s12
 800fc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2a:	eef4 5ae6 	vcmpe.f32	s11, s13
 800fc2e:	bfc4      	itt	gt
 800fc30:	eeb0 6a65 	vmovgt.f32	s12, s11
 800fc34:	ed41 5a01 	vstrgt	s11, [r1, #-4]
 800fc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc3c:	bf44      	itt	mi
 800fc3e:	eef0 6a65 	vmovmi.f32	s13, s11
 800fc42:	ed42 5a01 	vstrmi	s11, [r2, #-4]
 800fc46:	edd3 5a03 	vldr	s11, [r3, #12]
 800fc4a:	eef4 5ac6 	vcmpe.f32	s11, s12
 800fc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc52:	eef4 5ae6 	vcmpe.f32	s11, s13
 800fc56:	bfc4      	itt	gt
 800fc58:	eeb0 6a65 	vmovgt.f32	s12, s11
 800fc5c:	ed41 5a01 	vstrgt	s11, [r1, #-4]
 800fc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc64:	bf44      	itt	mi
 800fc66:	eef0 6a65 	vmovmi.f32	s13, s11
 800fc6a:	ed42 5a01 	vstrmi	s11, [r2, #-4]
 800fc6e:	edd3 5a04 	vldr	s11, [r3, #16]
 800fc72:	eef4 5ac6 	vcmpe.f32	s11, s12
 800fc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc7a:	eef4 5ae6 	vcmpe.f32	s11, s13
 800fc7e:	bfc4      	itt	gt
 800fc80:	eeb0 6a65 	vmovgt.f32	s12, s11
 800fc84:	ed41 5a01 	vstrgt	s11, [r1, #-4]
 800fc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc8c:	bf44      	itt	mi
 800fc8e:	eef0 6a65 	vmovmi.f32	s13, s11
 800fc92:	ed42 5a01 	vstrmi	s11, [r2, #-4]
 800fc96:	edd3 5a05 	vldr	s11, [r3, #20]
 800fc9a:	eef4 5ac6 	vcmpe.f32	s11, s12
 800fc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca2:	eef4 5ae6 	vcmpe.f32	s11, s13
 800fca6:	bfc4      	itt	gt
 800fca8:	eeb0 6a65 	vmovgt.f32	s12, s11
 800fcac:	ed41 5a01 	vstrgt	s11, [r1, #-4]
 800fcb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb4:	bf44      	itt	mi
 800fcb6:	eef0 6a65 	vmovmi.f32	s13, s11
 800fcba:	ed42 5a01 	vstrmi	s11, [r2, #-4]
 800fcbe:	edd3 5a06 	vldr	s11, [r3, #24]
 800fcc2:	eef4 5ac6 	vcmpe.f32	s11, s12
 800fcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcca:	eef4 5ae6 	vcmpe.f32	s11, s13
 800fcce:	bfc4      	itt	gt
 800fcd0:	eeb0 6a65 	vmovgt.f32	s12, s11
 800fcd4:	ed41 5a01 	vstrgt	s11, [r1, #-4]
 800fcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcdc:	bf44      	itt	mi
 800fcde:	eef0 6a65 	vmovmi.f32	s13, s11
 800fce2:	ed42 5a01 	vstrmi	s11, [r2, #-4]
 800fce6:	edd3 5a07 	vldr	s11, [r3, #28]
 800fcea:	eef4 5ac6 	vcmpe.f32	s11, s12
 800fcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf2:	eef4 5ae6 	vcmpe.f32	s11, s13
 800fcf6:	bfc8      	it	gt
 800fcf8:	ed41 5a01 	vstrgt	s11, [r1, #-4]
 800fcfc:	3320      	adds	r3, #32
 800fcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd02:	bf48      	it	mi
 800fd04:	ed42 5a01 	vstrmi	s11, [r2, #-4]
 800fd08:	4298      	cmp	r0, r3
 800fd0a:	f47f af6c 	bne.w	800fbe6 <MotionAR_Update+0x666>
 800fd0e:	ee6f 0aaf 	vmul.f32	s1, s31, s31
 800fd12:	eef1 4ace 	vsqrt.f32	s9, s28
 800fd16:	2300      	movs	r3, #0
 800fd18:	486d      	ldr	r0, [pc, #436]	; (800fed0 <MotionAR_Update+0x950>)
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	ee3e 6aa0 	vadd.f32	s12, s29, s1
 800fd22:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800fd26:	eef1 3ac6 	vsqrt.f32	s7, s12
 800fd2a:	eeb1 6ac5 	vsqrt.f32	s12, s10
 800fd2e:	ee83 5a23 	vdiv.f32	s10, s6, s7
 800fd32:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 800fd36:	eddf 2a6e 	vldr	s5, [pc, #440]	; 800fef0 <MotionAR_Update+0x970>
 800fd3a:	edcd 6a08 	vstr	s13, [sp, #32]
 800fd3e:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
 800fd42:	ed9a 3afb 	vldr	s6, [sl, #1004]	; 0x3ec
 800fd46:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 800fd4a:	eddd 6a0f 	vldr	s13, [sp, #60]	; 0x3c
 800fd4e:	edd8 3a00 	vldr	s7, [r8]
 800fd52:	edcd 6a00 	vstr	s13, [sp]
 800fd56:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 800fd5a:	eddd ea13 	vldr	s29, [sp, #76]	; 0x4c
 800fd5e:	edcd 6a03 	vstr	s13, [sp, #12]
 800fd62:	ee24 4a44 	vnmul.f32	s8, s8, s8
 800fd66:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 800fd6a:	ed9d fa10 	vldr	s30, [sp, #64]	; 0x40
 800fd6e:	edcd 6a04 	vstr	s13, [sp, #16]
 800fd72:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800fd76:	ee74 6ac6 	vsub.f32	s13, s9, s12
 800fd7a:	ee27 7a22 	vmul.f32	s14, s14, s5
 800fd7e:	eea9 4a22 	vfma.f32	s8, s18, s5
 800fd82:	ee6f 4a85 	vmul.f32	s9, s31, s10
 800fd86:	edcd 6a07 	vstr	s13, [sp, #28]
 800fd8a:	ed9d ea14 	vldr	s28, [sp, #80]	; 0x50
 800fd8e:	eddf 1a51 	vldr	s3, [pc, #324]	; 800fed4 <MotionAR_Update+0x954>
 800fd92:	ed9f 2a51 	vldr	s4, [pc, #324]	; 800fed8 <MotionAR_Update+0x958>
 800fd96:	ee6b 6a85 	vmul.f32	s13, s23, s10
 800fd9a:	ee33 3a67 	vsub.f32	s6, s6, s15
 800fd9e:	ee2d 5a85 	vmul.f32	s10, s27, s10
 800fda2:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800fda6:	eef0 5aef 	vabs.f32	s11, s31
 800fdaa:	eeb0 6aed 	vabs.f32	s12, s27
 800fdae:	edd0 2a01 	vldr	s5, [r0, #4]
 800fdb2:	ee72 2ae7 	vsub.f32	s5, s5, s15
 800fdb6:	ee33 1a61 	vsub.f32	s2, s6, s3
 800fdba:	ee32 0ae1 	vsub.f32	s0, s5, s3
 800fdbe:	ee72 baa1 	vadd.f32	s23, s5, s3
 800fdc2:	ee21 1a00 	vmul.f32	s2, s2, s0
 800fdc6:	ee33 3a21 	vadd.f32	s6, s6, s3
 800fdca:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800fdce:	ed99 1a01 	vldr	s2, [r9, #4]
 800fdd2:	ee23 3a2b 	vmul.f32	s6, s6, s23
 800fdd6:	ee31 1a47 	vsub.f32	s2, s2, s14
 800fdda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdde:	ee31 0a42 	vsub.f32	s0, s2, s4
 800fde2:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 800fde6:	ee33 3ac2 	vsub.f32	s6, s7, s4
 800fdea:	bf48      	it	mi
 800fdec:	3101      	addmi	r1, #1
 800fdee:	ee23 3a00 	vmul.f32	s6, s6, s0
 800fdf2:	bf48      	it	mi
 800fdf4:	b2c9      	uxtbmi	r1, r1
 800fdf6:	ee31 0a02 	vadd.f32	s0, s2, s4
 800fdfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdfe:	ee73 3a82 	vadd.f32	s7, s7, s4
 800fe02:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 800fe06:	ed90 3a02 	vldr	s6, [r0, #8]
 800fe0a:	ee63 3a80 	vmul.f32	s7, s7, s0
 800fe0e:	ee33 3a67 	vsub.f32	s6, s6, s15
 800fe12:	bf44      	itt	mi
 800fe14:	3101      	addmi	r1, #1
 800fe16:	b2c9      	uxtbmi	r1, r1
 800fe18:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800fe1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe20:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 800fe24:	ee73 3a61 	vsub.f32	s7, s6, s3
 800fe28:	bf48      	it	mi
 800fe2a:	3301      	addmi	r3, #1
 800fe2c:	ee62 2aa3 	vmul.f32	s5, s5, s7
 800fe30:	ee73 3a21 	vadd.f32	s7, s6, s3
 800fe34:	bf48      	it	mi
 800fe36:	b2db      	uxtbmi	r3, r3
 800fe38:	ee63 baab 	vmul.f32	s23, s7, s23
 800fe3c:	edd9 3a02 	vldr	s7, [r9, #8]
 800fe40:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800fe44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe48:	bf48      	it	mi
 800fe4a:	3301      	addmi	r3, #1
 800fe4c:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 800fe50:	ee31 1a42 	vsub.f32	s2, s2, s4
 800fe54:	ee73 2ac2 	vsub.f32	s5, s7, s4
 800fe58:	bf48      	it	mi
 800fe5a:	b2db      	uxtbmi	r3, r3
 800fe5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe60:	bf48      	it	mi
 800fe62:	3101      	addmi	r1, #1
 800fe64:	ee22 1a81 	vmul.f32	s2, s5, s2
 800fe68:	eef5 bac0 	vcmpe.f32	s23, #0.0
 800fe6c:	ee73 2a82 	vadd.f32	s5, s7, s4
 800fe70:	bf48      	it	mi
 800fe72:	b2c9      	uxtbmi	r1, r1
 800fe74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe78:	bf48      	it	mi
 800fe7a:	3101      	addmi	r1, #1
 800fe7c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800fe80:	ee22 0a80 	vmul.f32	s0, s5, s0
 800fe84:	bf48      	it	mi
 800fe86:	b2c9      	uxtbmi	r1, r1
 800fe88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe8c:	bf48      	it	mi
 800fe8e:	3301      	addmi	r3, #1
 800fe90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fe94:	bf48      	it	mi
 800fe96:	b2db      	uxtbmi	r3, r3
 800fe98:	3202      	adds	r2, #2
 800fe9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe9e:	bf48      	it	mi
 800fea0:	3301      	addmi	r3, #1
 800fea2:	b2d2      	uxtb	r2, r2
 800fea4:	bf48      	it	mi
 800fea6:	b2db      	uxtbmi	r3, r3
 800fea8:	2a2f      	cmp	r2, #47	; 0x2f
 800feaa:	f100 0008 	add.w	r0, r0, #8
 800feae:	f109 0908 	add.w	r9, r9, #8
 800feb2:	f47f af7c 	bne.w	800fdae <MotionAR_Update+0x82e>
 800feb6:	4809      	ldr	r0, [pc, #36]	; (800fedc <MotionAR_Update+0x95c>)
 800feb8:	ed9f 2a06 	vldr	s4, [pc, #24]	; 800fed4 <MotionAR_Update+0x954>
 800febc:	eddf 2a06 	vldr	s5, [pc, #24]	; 800fed8 <MotionAR_Update+0x958>
 800fec0:	f100 0c04 	add.w	ip, r0, #4
 800fec4:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
 800fec8:	e030      	b.n	800ff2c <MotionAR_Update+0x9ac>
 800feca:	bf00      	nop
 800fecc:	200016a8 	.word	0x200016a8
 800fed0:	20001a2c 	.word	0x20001a2c
 800fed4:	3ecccccd 	.word	0x3ecccccd
 800fed8:	3d0f5c29 	.word	0x3d0f5c29
 800fedc:	20001ae8 	.word	0x20001ae8
 800fee0:	00000000 	.word	0x00000000
 800fee4:	3a46cbce 	.word	0x3a46cbce
 800fee8:	3bb4b72c 	.word	0x3bb4b72c
 800feec:	40f28f7d 	.word	0x40f28f7d
 800fef0:	3caaaaab 	.word	0x3caaaaab
 800fef4:	3b66d032 	.word	0x3b66d032
 800fef8:	3e8f3d9f 	.word	0x3e8f3d9f
 800fefc:	3f8c5a3e 	.word	0x3f8c5a3e
 800ff00:	423e5c56 	.word	0x423e5c56
 800ff04:	bf5bfe6d 	.word	0xbf5bfe6d
 800ff08:	405907d9 	.word	0x405907d9
 800ff0c:	3f717215 	.word	0x3f717215
 800ff10:	3f2c47d4 	.word	0x3f2c47d4
 800ff14:	3f79dd3c 	.word	0x3f79dd3c
 800ff18:	3f1ba344 	.word	0x3f1ba344
 800ff1c:	4244530d 	.word	0x4244530d
 800ff20:	4234e469 	.word	0x4234e469
 800ff24:	3b83126f 	.word	0x3b83126f
 800ff28:	3e4ccccd 	.word	0x3e4ccccd
 800ff2c:	ecb0 3a01 	vldmia	r0!, {s6}
 800ff30:	ed50 3a02 	vldr	s7, [r0, #-8]
 800ff34:	ee33 3a67 	vsub.f32	s6, s6, s15
 800ff38:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800ff3c:	ee73 1a42 	vsub.f32	s3, s6, s4
 800ff40:	ee33 1ac2 	vsub.f32	s2, s7, s4
 800ff44:	ee33 3a02 	vadd.f32	s6, s6, s4
 800ff48:	ee73 3a82 	vadd.f32	s7, s7, s4
 800ff4c:	ee61 1a81 	vmul.f32	s3, s3, s2
 800ff50:	ee63 3a83 	vmul.f32	s7, s7, s6
 800ff54:	eef5 1ac0 	vcmpe.f32	s3, #0.0
 800ff58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff5c:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 800ff60:	ecf2 3a01 	vldmia	r2!, {s7}
 800ff64:	ed12 3a02 	vldr	s6, [r2, #-8]
 800ff68:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800ff6c:	ee33 3a47 	vsub.f32	s6, s6, s14
 800ff70:	ee33 1ae2 	vsub.f32	s2, s7, s5
 800ff74:	ee73 1a62 	vsub.f32	s3, s6, s5
 800ff78:	bf48      	it	mi
 800ff7a:	3101      	addmi	r1, #1
 800ff7c:	ee73 3aa2 	vadd.f32	s7, s7, s5
 800ff80:	ee33 3a22 	vadd.f32	s6, s6, s5
 800ff84:	ee61 1a81 	vmul.f32	s3, s3, s2
 800ff88:	bf48      	it	mi
 800ff8a:	b2c9      	uxtbmi	r1, r1
 800ff8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff90:	bf48      	it	mi
 800ff92:	3101      	addmi	r1, #1
 800ff94:	eef5 1ac0 	vcmpe.f32	s3, #0.0
 800ff98:	ee63 3a83 	vmul.f32	s7, s7, s6
 800ff9c:	bf48      	it	mi
 800ff9e:	b2c9      	uxtbmi	r1, r1
 800ffa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa4:	bf48      	it	mi
 800ffa6:	3301      	addmi	r3, #1
 800ffa8:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 800ffac:	bf48      	it	mi
 800ffae:	b2db      	uxtbmi	r3, r3
 800ffb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb4:	bf44      	itt	mi
 800ffb6:	3301      	addmi	r3, #1
 800ffb8:	b2db      	uxtbmi	r3, r3
 800ffba:	4560      	cmp	r0, ip
 800ffbc:	d1b6      	bne.n	800ff2c <MotionAR_Update+0x9ac>
 800ffbe:	ed5f 2a38 	vldr	s5, [pc, #-224]	; 800fee0 <MotionAR_Update+0x960>
 800ffc2:	eeb0 2a62 	vmov.f32	s4, s5
 800ffc6:	eef0 1a62 	vmov.f32	s3, s5
 800ffca:	eeb0 1a62 	vmov.f32	s2, s5
 800ffce:	ecf5 7a01 	vldmia	r5!, {s15}
 800ffd2:	ecb4 3a01 	vldmia	r4!, {s6}
 800ffd6:	ecf6 3a01 	vldmia	r6!, {s7}
 800ffda:	ee24 7aa7 	vmul.f32	s14, s9, s15
 800ffde:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ffe2:	eea6 7a83 	vfma.f32	s14, s13, s6
 800ffe6:	42a7      	cmp	r7, r4
 800ffe8:	eee3 7a03 	vfma.f32	s15, s6, s6
 800ffec:	eea5 7a23 	vfma.f32	s14, s10, s7
 800fff0:	eee3 7aa3 	vfma.f32	s15, s7, s7
 800fff4:	eea7 2a07 	vfma.f32	s4, s14, s14
 800fff8:	eee7 7a47 	vfms.f32	s15, s14, s14
 800fffc:	eef0 3ac7 	vabs.f32	s7, s14
 8010000:	eef0 7ae7 	vabs.f32	s15, s15
 8010004:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8010008:	ee72 2aa7 	vadd.f32	s5, s5, s15
 801000c:	ee71 1a87 	vadd.f32	s3, s3, s14
 8010010:	ee31 1a23 	vadd.f32	s2, s2, s7
 8010014:	d1db      	bne.n	800ffce <MotionAR_Update+0xa4e>
 8010016:	ed5f 7a4d 	vldr	s15, [pc, #-308]	; 800fee4 <MotionAR_Update+0x964>
 801001a:	eeb4 4ae7 	vcmpe.f32	s8, s15
 801001e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010022:	f240 8181 	bls.w	8010328 <MotionAR_Update+0xda8>
 8010026:	2b02      	cmp	r3, #2
 8010028:	d812      	bhi.n	8010050 <MotionAR_Update+0xad0>
 801002a:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800fee8 <MotionAR_Update+0x968>
 801002e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8010032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010036:	f200 83e2 	bhi.w	80107fe <MotionAR_Update+0x127e>
 801003a:	2b00      	cmp	r3, #0
 801003c:	f000 8174 	beq.w	8010328 <MotionAR_Update+0xda8>
 8010040:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 800feec <MotionAR_Update+0x96c>
 8010044:	eef4 1ae7 	vcmpe.f32	s3, s15
 8010048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801004c:	f200 816c 	bhi.w	8010328 <MotionAR_Update+0xda8>
 8010050:	ed5f 7a59 	vldr	s15, [pc, #-356]	; 800fef0 <MotionAR_Update+0x970>
 8010054:	ed9d 7a00 	vldr	s14, [sp]
 8010058:	ed1f 5a5a 	vldr	s10, [pc, #-360]	; 800fef4 <MotionAR_Update+0x974>
 801005c:	eddd 4a03 	vldr	s9, [sp, #12]
 8010060:	eddd 3a04 	vldr	s7, [sp, #16]
 8010064:	eedb 0a27 	vfnms.f32	s1, s22, s15
 8010068:	ee22 2a27 	vmul.f32	s4, s4, s15
 801006c:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8010070:	ee61 6a27 	vmul.f32	s13, s2, s15
 8010074:	ee77 ea6e 	vsub.f32	s29, s14, s29
 8010078:	eef4 0ac5 	vcmpe.f32	s1, s10
 801007c:	ee21 7aa7 	vmul.f32	s14, s3, s15
 8010080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010084:	eeda caa7 	vfnms.f32	s25, s21, s15
 8010088:	ee9a da27 	vfnms.f32	s26, s20, s15
 801008c:	eea6 2ae6 	vfms.f32	s4, s13, s13
 8010090:	eee7 2a47 	vfms.f32	s5, s14, s14
 8010094:	ee3f ea4e 	vsub.f32	s28, s30, s28
 8010098:	ee74 4ae3 	vsub.f32	s9, s9, s7
 801009c:	f200 832f 	bhi.w	80106fe <MotionAR_Update+0x117e>
 80100a0:	ed5f 7a6b 	vldr	s15, [pc, #-428]	; 800fef8 <MotionAR_Update+0x978>
 80100a4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80100a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ac:	f200 843c 	bhi.w	8010928 <MotionAR_Update+0x13a8>
 80100b0:	ed5f 7a6e 	vldr	s15, [pc, #-440]	; 800fefc <MotionAR_Update+0x97c>
 80100b4:	ed9d 7a05 	vldr	s14, [sp, #20]
 80100b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c0:	f200 84e7 	bhi.w	8010a92 <MotionAR_Update+0x1512>
 80100c4:	ed5f 7a72 	vldr	s15, [pc, #-456]	; 800ff00 <MotionAR_Update+0x980>
 80100c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80100cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d0:	f200 85a9 	bhi.w	8010c26 <MotionAR_Update+0x16a6>
 80100d4:	ed5f 7a75 	vldr	s15, [pc, #-468]	; 800ff04 <MotionAR_Update+0x984>
 80100d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e0:	d907      	bls.n	80100f2 <MotionAR_Update+0xb72>
 80100e2:	ed5f 7a77 	vldr	s15, [pc, #-476]	; 800ff08 <MotionAR_Update+0x988>
 80100e6:	eef4 1ae7 	vcmpe.f32	s3, s15
 80100ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ee:	f200 819e 	bhi.w	801042e <MotionAR_Update+0xeae>
 80100f2:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 800ff0c <MotionAR_Update+0x98c>
 80100f6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80100fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100fe:	f200 8478 	bhi.w	80109f2 <MotionAR_Update+0x1472>
 8010102:	ed5f 7a7d 	vldr	s15, [pc, #-500]	; 800ff10 <MotionAR_Update+0x990>
 8010106:	eeb4 cae7 	vcmpe.f32	s24, s15
 801010a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801010e:	f200 82b1 	bhi.w	8010674 <MotionAR_Update+0x10f4>
 8010112:	ed5f 7a80 	vldr	s15, [pc, #-512]	; 800ff14 <MotionAR_Update+0x994>
 8010116:	eef4 5ae7 	vcmpe.f32	s11, s15
 801011a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801011e:	f200 85d4 	bhi.w	8010cca <MotionAR_Update+0x174a>
 8010122:	ed5f 7a83 	vldr	s15, [pc, #-524]	; 800ff18 <MotionAR_Update+0x998>
 8010126:	eeb4 cae7 	vcmpe.f32	s24, s15
 801012a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801012e:	d90e      	bls.n	801014e <MotionAR_Update+0xbce>
 8010130:	ed5f 7a86 	vldr	s15, [pc, #-536]	; 800ff1c <MotionAR_Update+0x99c>
 8010134:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8010138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801013c:	d807      	bhi.n	801014e <MotionAR_Update+0xbce>
 801013e:	ed5f 7a88 	vldr	s15, [pc, #-544]	; 800ff20 <MotionAR_Update+0x9a0>
 8010142:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801014a:	f200 82b2 	bhi.w	80106b2 <MotionAR_Update+0x1132>
 801014e:	2300      	movs	r3, #0
 8010150:	2405      	movs	r4, #5
 8010152:	ed5f 7a8c 	vldr	s15, [pc, #-560]	; 800ff24 <MotionAR_Update+0x9a4>
 8010156:	eeb4 4ae7 	vcmpe.f32	s8, s15
 801015a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801015e:	d507      	bpl.n	8010170 <MotionAR_Update+0xbf0>
 8010160:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 800ff28 <MotionAR_Update+0x9a8>
 8010164:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016c:	f100 80ee 	bmi.w	801034c <MotionAR_Update+0xdcc>
 8010170:	ed9d 8a05 	vldr	s16, [sp, #20]
 8010174:	ee18 0a10 	vmov	r0, s16
 8010178:	f7f0 f9b6 	bl	80004e8 <__aeabi_f2d>
 801017c:	f20f 4330 	addw	r3, pc, #1072	; 0x430
 8010180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010184:	f7f0 fc98 	bl	8000ab8 <__aeabi_dcmpgt>
 8010188:	b128      	cbz	r0, 8010196 <MotionAR_Update+0xc16>
 801018a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801018e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010192:	f100 8443 	bmi.w	8010a1c <MotionAR_Update+0x149c>
 8010196:	e9da 2311 	ldrd	r2, r3, [sl, #68]	; 0x44
 801019a:	e9da 0113 	ldrd	r0, r1, [sl, #76]	; 0x4c
 801019e:	0052      	lsls	r2, r2, #1
 80101a0:	005b      	lsls	r3, r3, #1
 80101a2:	0040      	lsls	r0, r0, #1
 80101a4:	0049      	lsls	r1, r1, #1
 80101a6:	f002 0202 	and.w	r2, r2, #2
 80101aa:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80101ae:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 80101b2:	f001 017e 	and.w	r1, r1, #126	; 0x7e
 80101b6:	2c01      	cmp	r4, #1
 80101b8:	e9ca 2311 	strd	r2, r3, [sl, #68]	; 0x44
 80101bc:	e9ca 0113 	strd	r0, r1, [sl, #76]	; 0x4c
 80101c0:	f000 81a2 	beq.w	8010508 <MotionAR_Update+0xf88>
 80101c4:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 80101c8:	4edd      	ldr	r6, [pc, #884]	; (8010540 <MotionAR_Update+0xfc0>)
 80101ca:	f8da 5058 	ldr.w	r5, [sl, #88]	; 0x58
 80101ce:	ea06 0242 	and.w	r2, r6, r2, lsl #1
 80101d2:	ea06 0545 	and.w	r5, r6, r5, lsl #1
 80101d6:	3c03      	subs	r4, #3
 80101d8:	e9ca 2515 	strd	r2, r5, [sl, #84]	; 0x54
 80101dc:	2c03      	cmp	r4, #3
 80101de:	f201 8001 	bhi.w	80111e4 <MotionAR_Update+0x1c64>
 80101e2:	e8df f004 	tbb	[pc, r4]
 80101e6:	026c      	.short	0x026c
 80101e8:	7470      	.short	0x7470
 80101ea:	3101      	adds	r1, #1
 80101ec:	f8ca 1050 	str.w	r1, [sl, #80]	; 0x50
 80101f0:	f89a 405f 	ldrb.w	r4, [sl, #95]	; 0x5f
 80101f4:	2c00      	cmp	r4, #0
 80101f6:	f000 826e 	beq.w	80106d6 <MotionAR_Update+0x1156>
 80101fa:	2200      	movs	r2, #0
 80101fc:	4615      	mov	r5, r2
 80101fe:	f013 0f01 	tst.w	r3, #1
 8010202:	f102 0201 	add.w	r2, r2, #1
 8010206:	bf18      	it	ne
 8010208:	3501      	addne	r5, #1
 801020a:	b2d6      	uxtb	r6, r2
 801020c:	bf18      	it	ne
 801020e:	b2ed      	uxtbne	r5, r5
 8010210:	42b4      	cmp	r4, r6
 8010212:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8010216:	d8f2      	bhi.n	80101fe <MotionAR_Update+0xc7e>
 8010218:	42ac      	cmp	r4, r5
 801021a:	f000 825c 	beq.w	80106d6 <MotionAR_Update+0x1156>
 801021e:	2300      	movs	r3, #0
 8010220:	461a      	mov	r2, r3
 8010222:	f010 0f01 	tst.w	r0, #1
 8010226:	f103 0301 	add.w	r3, r3, #1
 801022a:	bf18      	it	ne
 801022c:	3201      	addne	r2, #1
 801022e:	b2dd      	uxtb	r5, r3
 8010230:	bf18      	it	ne
 8010232:	b2d2      	uxtbne	r2, r2
 8010234:	42ac      	cmp	r4, r5
 8010236:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801023a:	d8f2      	bhi.n	8010222 <MotionAR_Update+0xca2>
 801023c:	4294      	cmp	r4, r2
 801023e:	f000 82d6 	beq.w	80107ee <MotionAR_Update+0x126e>
 8010242:	2300      	movs	r3, #0
 8010244:	461a      	mov	r2, r3
 8010246:	f011 0f01 	tst.w	r1, #1
 801024a:	f103 0301 	add.w	r3, r3, #1
 801024e:	bf18      	it	ne
 8010250:	3201      	addne	r2, #1
 8010252:	b2d8      	uxtb	r0, r3
 8010254:	bf18      	it	ne
 8010256:	b2d2      	uxtbne	r2, r2
 8010258:	4284      	cmp	r4, r0
 801025a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801025e:	d8f2      	bhi.n	8010246 <MotionAR_Update+0xcc6>
 8010260:	4294      	cmp	r4, r2
 8010262:	f000 82bc 	beq.w	80107de <MotionAR_Update+0x125e>
 8010266:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 801026a:	231e      	movs	r3, #30
 801026c:	2100      	movs	r1, #0
 801026e:	f012 0f01 	tst.w	r2, #1
 8010272:	bf18      	it	ne
 8010274:	3101      	addne	r1, #1
 8010276:	f103 33ff 	add.w	r3, r3, #4294967295
 801027a:	bf18      	it	ne
 801027c:	b2c9      	uxtbne	r1, r1
 801027e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8010282:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010286:	d1f2      	bne.n	801026e <MotionAR_Update+0xcee>
 8010288:	2917      	cmp	r1, #23
 801028a:	d971      	bls.n	8010370 <MotionAR_Update+0xdf0>
 801028c:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
 8010290:	f88a 205c 	strb.w	r2, [sl, #92]	; 0x5c
 8010294:	2305      	movs	r3, #5
 8010296:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
 801029a:	3a01      	subs	r2, #1
 801029c:	2a03      	cmp	r2, #3
 801029e:	d807      	bhi.n	80102b0 <MotionAR_Update+0xd30>
 80102a0:	2200      	movs	r2, #0
 80102a2:	e9ca 2212 	strd	r2, r2, [sl, #72]	; 0x48
 80102a6:	2105      	movs	r1, #5
 80102a8:	f88a 105f 	strb.w	r1, [sl, #95]	; 0x5f
 80102ac:	f8ca 2050 	str.w	r2, [sl, #80]	; 0x50
 80102b0:	2200      	movs	r2, #0
 80102b2:	f88a 205e 	strb.w	r2, [sl, #94]	; 0x5e
 80102b6:	f88a 3064 	strb.w	r3, [sl, #100]	; 0x64
 80102ba:	f7ff bb4c 	b.w	800f956 <MotionAR_Update+0x3d6>
 80102be:	3001      	adds	r0, #1
 80102c0:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
 80102c4:	e794      	b.n	80101f0 <MotionAR_Update+0xc70>
 80102c6:	3201      	adds	r2, #1
 80102c8:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
 80102cc:	e790      	b.n	80101f0 <MotionAR_Update+0xc70>
 80102ce:	3501      	adds	r5, #1
 80102d0:	f8ca 5058 	str.w	r5, [sl, #88]	; 0x58
 80102d4:	e78c      	b.n	80101f0 <MotionAR_Update+0xc70>
 80102d6:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8010544 <MotionAR_Update+0xfc4>
 80102da:	eef4 8ae7 	vcmpe.f32	s17, s15
 80102de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e2:	f200 8263 	bhi.w	80107ac <MotionAR_Update+0x122c>
 80102e6:	eddf 7a98 	vldr	s15, [pc, #608]	; 8010548 <MotionAR_Update+0xfc8>
 80102ea:	eeb4 cae7 	vcmpe.f32	s24, s15
 80102ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f2:	f200 841b 	bhi.w	8010b2c <MotionAR_Update+0x15ac>
 80102f6:	eddf 7a95 	vldr	s15, [pc, #596]	; 801054c <MotionAR_Update+0xfcc>
 80102fa:	eef4 0ae7 	vcmpe.f32	s1, s15
 80102fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010302:	f200 84f4 	bhi.w	8010cee <MotionAR_Update+0x176e>
 8010306:	2b02      	cmp	r3, #2
 8010308:	d90e      	bls.n	8010328 <MotionAR_Update+0xda8>
 801030a:	eddf 7a91 	vldr	s15, [pc, #580]	; 8010550 <MotionAR_Update+0xfd0>
 801030e:	eef4 5ae7 	vcmpe.f32	s11, s15
 8010312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010316:	d907      	bls.n	8010328 <MotionAR_Update+0xda8>
 8010318:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8010554 <MotionAR_Update+0xfd4>
 801031c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010324:	f240 8242 	bls.w	80107ac <MotionAR_Update+0x122c>
 8010328:	23fc      	movs	r3, #252	; 0xfc
 801032a:	2401      	movs	r4, #1
 801032c:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8010558 <MotionAR_Update+0xfd8>
 8010330:	eeb4 4ae7 	vcmpe.f32	s8, s15
 8010334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010338:	f57f af2d 	bpl.w	8010196 <MotionAR_Update+0xc16>
 801033c:	eddf 7a87 	vldr	s15, [pc, #540]	; 801055c <MotionAR_Update+0xfdc>
 8010340:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010348:	f57f af25 	bpl.w	8010196 <MotionAR_Update+0xc16>
 801034c:	eddf 7a84 	vldr	s15, [pc, #528]	; 8010560 <MotionAR_Update+0xfe0>
 8010350:	eef4 5ae7 	vcmpe.f32	s11, s15
 8010354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010358:	f140 823d 	bpl.w	80107d6 <MotionAR_Update+0x1256>
 801035c:	eddf 7a81 	vldr	s15, [pc, #516]	; 8010564 <MotionAR_Update+0xfe4>
 8010360:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010368:	f340 8235 	ble.w	80107d6 <MotionAR_Update+0x1256>
 801036c:	2401      	movs	r4, #1
 801036e:	e712      	b.n	8010196 <MotionAR_Update+0xc16>
 8010370:	f8da 1058 	ldr.w	r1, [sl, #88]	; 0x58
 8010374:	221e      	movs	r2, #30
 8010376:	f011 0f01 	tst.w	r1, #1
 801037a:	bf18      	it	ne
 801037c:	3301      	addne	r3, #1
 801037e:	f102 32ff 	add.w	r2, r2, #4294967295
 8010382:	bf18      	it	ne
 8010384:	b2db      	uxtbne	r3, r3
 8010386:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801038a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801038e:	d1f2      	bne.n	8010376 <MotionAR_Update+0xdf6>
 8010390:	2b17      	cmp	r3, #23
 8010392:	d907      	bls.n	80103a4 <MotionAR_Update+0xe24>
 8010394:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
 8010398:	f88a 205c 	strb.w	r2, [sl, #92]	; 0x5c
 801039c:	2306      	movs	r3, #6
 801039e:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
 80103a2:	e77a      	b.n	801029a <MotionAR_Update+0xd1a>
 80103a4:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d181      	bne.n	80102b0 <MotionAR_Update+0xd30>
 80103ac:	f89a 305e 	ldrb.w	r3, [sl, #94]	; 0x5e
 80103b0:	3301      	adds	r3, #1
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	2b78      	cmp	r3, #120	; 0x78
 80103b6:	f88a 305e 	strb.w	r3, [sl, #94]	; 0x5e
 80103ba:	f000 829b 	beq.w	80108f4 <MotionAR_Update+0x1374>
 80103be:	f240 8366 	bls.w	8010a8e <MotionAR_Update+0x150e>
 80103c2:	2378      	movs	r3, #120	; 0x78
 80103c4:	f88a 305e 	strb.w	r3, [sl, #94]	; 0x5e
 80103c8:	2301      	movs	r3, #1
 80103ca:	e774      	b.n	80102b6 <MotionAR_Update+0xd36>
 80103cc:	eddf 7a66 	vldr	s15, [pc, #408]	; 8010568 <MotionAR_Update+0xfe8>
 80103d0:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80103d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103d8:	f200 85d6 	bhi.w	8010f88 <MotionAR_Update+0x1a08>
 80103dc:	eddf 7a63 	vldr	s15, [pc, #396]	; 801056c <MotionAR_Update+0xfec>
 80103e0:	eef4 5ae7 	vcmpe.f32	s11, s15
 80103e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e8:	d921      	bls.n	801042e <MotionAR_Update+0xeae>
 80103ea:	eddf 7a61 	vldr	s15, [pc, #388]	; 8010570 <MotionAR_Update+0xff0>
 80103ee:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80103f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f6:	f63f ae7c 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 80103fa:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8010574 <MotionAR_Update+0xff4>
 80103fe:	eeb4 eae7 	vcmpe.f32	s28, s15
 8010402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010406:	f67f ae74 	bls.w	80100f2 <MotionAR_Update+0xb72>
 801040a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8010578 <MotionAR_Update+0xff8>
 801040e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010416:	f63f ae6c 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 801041a:	eddf 7a58 	vldr	s15, [pc, #352]	; 801057c <MotionAR_Update+0xffc>
 801041e:	ed9d 7a06 	vldr	s14, [sp, #24]
 8010422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801042a:	f67f ae62 	bls.w	80100f2 <MotionAR_Update+0xb72>
 801042e:	eddf 7a54 	vldr	s15, [pc, #336]	; 8010580 <MotionAR_Update+0x1000>
 8010432:	eeb4 2ae7 	vcmpe.f32	s4, s15
 8010436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043a:	f200 81ba 	bhi.w	80107b2 <MotionAR_Update+0x1232>
 801043e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8010584 <MotionAR_Update+0x1004>
 8010442:	eef4 9ae7 	vcmpe.f32	s19, s15
 8010446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801044a:	f200 82a9 	bhi.w	80109a0 <MotionAR_Update+0x1420>
 801044e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8010588 <MotionAR_Update+0x1008>
 8010452:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801045a:	f200 8355 	bhi.w	8010b08 <MotionAR_Update+0x1588>
 801045e:	eddf 7a4b 	vldr	s15, [pc, #300]	; 801058c <MotionAR_Update+0x100c>
 8010462:	eeb4 dae7 	vcmpe.f32	s26, s15
 8010466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046a:	d816      	bhi.n	801049a <MotionAR_Update+0xf1a>
 801046c:	eddf 7a48 	vldr	s15, [pc, #288]	; 8010590 <MotionAR_Update+0x1010>
 8010470:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010478:	d80f      	bhi.n	801049a <MotionAR_Update+0xf1a>
 801047a:	eddf 7a46 	vldr	s15, [pc, #280]	; 8010594 <MotionAR_Update+0x1014>
 801047e:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010486:	f63f ae34 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 801048a:	eddf 7a43 	vldr	s15, [pc, #268]	; 8010598 <MotionAR_Update+0x1018>
 801048e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010496:	f63f ae2c 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 801049a:	eddf 7a61 	vldr	s15, [pc, #388]	; 8010620 <MotionAR_Update+0x10a0>
 801049e:	eeb4 2ae7 	vcmpe.f32	s4, s15
 80104a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a6:	f200 8107 	bhi.w	80106b8 <MotionAR_Update+0x1138>
 80104aa:	eddf 7a3c 	vldr	s15, [pc, #240]	; 801059c <MotionAR_Update+0x101c>
 80104ae:	eef4 cae7 	vcmpe.f32	s25, s15
 80104b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b6:	f200 81fa 	bhi.w	80108ae <MotionAR_Update+0x132e>
 80104ba:	eddf 7a39 	vldr	s15, [pc, #228]	; 80105a0 <MotionAR_Update+0x1020>
 80104be:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80104c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104c6:	f200 82ca 	bhi.w	8010a5e <MotionAR_Update+0x14de>
 80104ca:	eddf 7a36 	vldr	s15, [pc, #216]	; 80105a4 <MotionAR_Update+0x1024>
 80104ce:	eef4 9ae7 	vcmpe.f32	s19, s15
 80104d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d6:	f200 8332 	bhi.w	8010b3e <MotionAR_Update+0x15be>
 80104da:	2b11      	cmp	r3, #17
 80104dc:	f240 80e9 	bls.w	80106b2 <MotionAR_Update+0x1132>
 80104e0:	eddf 7a31 	vldr	s15, [pc, #196]	; 80105a8 <MotionAR_Update+0x1028>
 80104e4:	eef4 9ae7 	vcmpe.f32	s19, s15
 80104e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ec:	f240 80e1 	bls.w	80106b2 <MotionAR_Update+0x1132>
 80104f0:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80105ac <MotionAR_Update+0x102c>
 80104f4:	eeb4 cae7 	vcmpe.f32	s24, s15
 80104f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104fc:	bf95      	itete	ls
 80104fe:	23fd      	movls	r3, #253	; 0xfd
 8010500:	23fe      	movhi	r3, #254	; 0xfe
 8010502:	2402      	movls	r4, #2
 8010504:	2403      	movhi	r4, #3
 8010506:	e711      	b.n	801032c <MotionAR_Update+0xdac>
 8010508:	3201      	adds	r2, #1
 801050a:	07d5      	lsls	r5, r2, #31
 801050c:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 8010510:	f57f ae6e 	bpl.w	80101f0 <MotionAR_Update+0xc70>
 8010514:	0852      	lsrs	r2, r2, #1
 8010516:	f43f ae6b 	beq.w	80101f0 <MotionAR_Update+0xc70>
 801051a:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
 801051e:	f88a 305c 	strb.w	r3, [sl, #92]	; 0x5c
 8010522:	1e9a      	subs	r2, r3, #2
 8010524:	2a02      	cmp	r2, #2
 8010526:	f88a 405d 	strb.w	r4, [sl, #93]	; 0x5d
 801052a:	f200 81f2 	bhi.w	8010912 <MotionAR_Update+0x1392>
 801052e:	2300      	movs	r3, #0
 8010530:	e9ca 3312 	strd	r3, r3, [sl, #72]	; 0x48
 8010534:	f8ca 3050 	str.w	r3, [sl, #80]	; 0x50
 8010538:	e738      	b.n	80103ac <MotionAR_Update+0xe2c>
 801053a:	bf00      	nop
 801053c:	f3af 8000 	nop.w
 8010540:	3ffffffe 	.word	0x3ffffffe
 8010544:	424b600e 	.word	0x424b600e
 8010548:	3e1687f4 	.word	0x3e1687f4
 801054c:	3a274348 	.word	0x3a274348
 8010550:	3eb72629 	.word	0x3eb72629
 8010554:	3f7357e6 	.word	0x3f7357e6
 8010558:	3b83126f 	.word	0x3b83126f
 801055c:	3e4ccccd 	.word	0x3e4ccccd
 8010560:	3eb33333 	.word	0x3eb33333
 8010564:	3f6b851f 	.word	0x3f6b851f
 8010568:	4238f58c 	.word	0x4238f58c
 801056c:	3eec853c 	.word	0x3eec853c
 8010570:	3ef8f649 	.word	0x3ef8f649
 8010574:	3d944f5d 	.word	0x3d944f5d
 8010578:	42c349cd 	.word	0x42c349cd
 801057c:	bf83bc34 	.word	0xbf83bc34
 8010580:	3f6c5202 	.word	0x3f6c5202
 8010584:	401bd38d 	.word	0x401bd38d
 8010588:	3e1f9054 	.word	0x3e1f9054
 801058c:	3c3f50a4 	.word	0x3c3f50a4
 8010590:	3f48522f 	.word	0x3f48522f
 8010594:	423b116f 	.word	0x423b116f
 8010598:	42369e86 	.word	0x42369e86
 801059c:	3eda22cf 	.word	0x3eda22cf
 80105a0:	426f8b12 	.word	0x426f8b12
 80105a4:	41c1fda4 	.word	0x41c1fda4
 80105a8:	41a16439 	.word	0x41a16439
 80105ac:	3f3065c7 	.word	0x3f3065c7
 80105b0:	c985f06f 	.word	0xc985f06f
 80105b4:	bfe0c154 	.word	0xbfe0c154
 80105b8:	3ec0d152 	.word	0x3ec0d152
 80105bc:	3e8d27e5 	.word	0x3e8d27e5
 80105c0:	4100868b 	.word	0x4100868b
 80105c4:	424f5a8a 	.word	0x424f5a8a
 80105c8:	3e60917d 	.word	0x3e60917d
 80105cc:	3e32fbbd 	.word	0x3e32fbbd
 80105d0:	401c3c97 	.word	0x401c3c97
 80105d4:	3b2b35c6 	.word	0x3b2b35c6
 80105d8:	3e687d2c 	.word	0x3e687d2c
 80105dc:	3c002d17 	.word	0x3c002d17
 80105e0:	3f1bd45a 	.word	0x3f1bd45a
 80105e4:	bf7beea2 	.word	0xbf7beea2
 80105e8:	3ca1ad64 	.word	0x3ca1ad64
 80105ec:	3f706ad3 	.word	0x3f706ad3
 80105f0:	3b23f898 	.word	0x3b23f898
 80105f4:	423e299b 	.word	0x423e299b
 80105f8:	39385c52 	.word	0x39385c52
 80105fc:	3f829519 	.word	0x3f829519
 8010600:	3f198eeb 	.word	0x3f198eeb
 8010604:	3e582adc 	.word	0x3e582adc
 8010608:	3c90745c 	.word	0x3c90745c
 801060c:	3f2731a1 	.word	0x3f2731a1
 8010610:	3df92002 	.word	0x3df92002
 8010614:	4130d467 	.word	0x4130d467
 8010618:	3e87bbd8 	.word	0x3e87bbd8
 801061c:	406b4b73 	.word	0x406b4b73
 8010620:	3ef395c3 	.word	0x3ef395c3
 8010624:	3e5c0a31 	.word	0x3e5c0a31
 8010628:	3e88ddc6 	.word	0x3e88ddc6
 801062c:	3e3492a2 	.word	0x3e3492a2
 8010630:	43924eca 	.word	0x43924eca
 8010634:	4051d24a 	.word	0x4051d24a
 8010638:	3ea407c9 	.word	0x3ea407c9
 801063c:	3e378573 	.word	0x3e378573
 8010640:	42328bd2 	.word	0x42328bd2
 8010644:	3c5d78e4 	.word	0x3c5d78e4
 8010648:	bb6e06d9 	.word	0xbb6e06d9
 801064c:	3f5dc0db 	.word	0x3f5dc0db
 8010650:	3b7cae04 	.word	0x3b7cae04
 8010654:	3e9bdc05 	.word	0x3e9bdc05
 8010658:	3ed10a37 	.word	0x3ed10a37
 801065c:	3e8d4196 	.word	0x3e8d4196
 8010660:	3c70fa45 	.word	0x3c70fa45
 8010664:	3e2ffa3c 	.word	0x3e2ffa3c
 8010668:	3c77d4da 	.word	0x3c77d4da
 801066c:	424535b0 	.word	0x424535b0
 8010670:	3e20d307 	.word	0x3e20d307
 8010674:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 80105b8 <MotionAR_Update+0x1038>
 8010678:	eef4 5ae7 	vcmpe.f32	s11, s15
 801067c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010680:	f67f ad65 	bls.w	801014e <MotionAR_Update+0xbce>
 8010684:	ed5f 7a33 	vldr	s15, [pc, #-204]	; 80105bc <MotionAR_Update+0x103c>
 8010688:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801068c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010690:	f200 8346 	bhi.w	8010d20 <MotionAR_Update+0x17a0>
 8010694:	ed5f 7a36 	vldr	s15, [pc, #-216]	; 80105c0 <MotionAR_Update+0x1040>
 8010698:	eef4 1ae7 	vcmpe.f32	s3, s15
 801069c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106a0:	d907      	bls.n	80106b2 <MotionAR_Update+0x1132>
 80106a2:	ed5f 7a38 	vldr	s15, [pc, #-224]	; 80105c4 <MotionAR_Update+0x1044>
 80106a6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80106aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ae:	f63f ad4e 	bhi.w	801014e <MotionAR_Update+0xbce>
 80106b2:	23fd      	movs	r3, #253	; 0xfd
 80106b4:	2402      	movs	r4, #2
 80106b6:	e639      	b.n	801032c <MotionAR_Update+0xdac>
 80106b8:	2916      	cmp	r1, #22
 80106ba:	f200 80e6 	bhi.w	801088a <MotionAR_Update+0x130a>
 80106be:	ed5f 7a3e 	vldr	s15, [pc, #-248]	; 80105c8 <MotionAR_Update+0x1048>
 80106c2:	eef4 5ae7 	vcmpe.f32	s11, s15
 80106c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ca:	d8f2      	bhi.n	80106b2 <MotionAR_Update+0x1132>
 80106cc:	ed5f 7a41 	vldr	s15, [pc, #-260]	; 80105cc <MotionAR_Update+0x104c>
 80106d0:	eef4 0ae7 	vcmpe.f32	s1, s15
 80106d4:	e710      	b.n	80104f8 <MotionAR_Update+0xf78>
 80106d6:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
 80106da:	f88a 205c 	strb.w	r2, [sl, #92]	; 0x5c
 80106de:	2302      	movs	r3, #2
 80106e0:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
 80106e4:	2a01      	cmp	r2, #1
 80106e6:	d003      	beq.n	80106f0 <MotionAR_Update+0x1170>
 80106e8:	3a05      	subs	r2, #5
 80106ea:	2a01      	cmp	r2, #1
 80106ec:	f63f ade0 	bhi.w	80102b0 <MotionAR_Update+0xd30>
 80106f0:	2200      	movs	r2, #0
 80106f2:	2103      	movs	r1, #3
 80106f4:	e9ca 2215 	strd	r2, r2, [sl, #84]	; 0x54
 80106f8:	f88a 105f 	strb.w	r1, [sl, #95]	; 0x5f
 80106fc:	e5d8      	b.n	80102b0 <MotionAR_Update+0xd30>
 80106fe:	ed5f 7a4c 	vldr	s15, [pc, #-304]	; 80105d0 <MotionAR_Update+0x1050>
 8010702:	eef4 9ae7 	vcmpe.f32	s19, s15
 8010706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801070a:	f200 8130 	bhi.w	801096e <MotionAR_Update+0x13ee>
 801070e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80105d4 <MotionAR_Update+0x1054>
 8010712:	eeb4 2ae7 	vcmpe.f32	s4, s15
 8010716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801071a:	d929      	bls.n	8010770 <MotionAR_Update+0x11f0>
 801071c:	ed5f 7a52 	vldr	s15, [pc, #-328]	; 80105d8 <MotionAR_Update+0x1058>
 8010720:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010728:	f200 82a9 	bhi.w	8010c7e <MotionAR_Update+0x16fe>
 801072c:	ed5f 7a55 	vldr	s15, [pc, #-340]	; 80105dc <MotionAR_Update+0x105c>
 8010730:	eeb4 dae7 	vcmpe.f32	s26, s15
 8010734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010738:	f200 8339 	bhi.w	8010dae <MotionAR_Update+0x182e>
 801073c:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 80105e0 <MotionAR_Update+0x1060>
 8010740:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010748:	f63f ae71 	bhi.w	801042e <MotionAR_Update+0xeae>
 801074c:	ed5f 7a5b 	vldr	s15, [pc, #-364]	; 80105e4 <MotionAR_Update+0x1064>
 8010750:	ed9d 7a05 	vldr	s14, [sp, #20]
 8010754:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801075c:	f63f acc9 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 8010760:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 80105e8 <MotionAR_Update+0x1068>
 8010764:	eef4 4ae7 	vcmpe.f32	s9, s15
 8010768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801076c:	f67f ae5f 	bls.w	801042e <MotionAR_Update+0xeae>
 8010770:	ed5f 7a62 	vldr	s15, [pc, #-392]	; 80105ec <MotionAR_Update+0x106c>
 8010774:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801077c:	f63f adab 	bhi.w	80102d6 <MotionAR_Update+0xd56>
 8010780:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 80105f0 <MotionAR_Update+0x1070>
 8010784:	eef4 9ae7 	vcmpe.f32	s19, s15
 8010788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801078c:	d80e      	bhi.n	80107ac <MotionAR_Update+0x122c>
 801078e:	ed5f 7a67 	vldr	s15, [pc, #-412]	; 80105f4 <MotionAR_Update+0x1074>
 8010792:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801079a:	d807      	bhi.n	80107ac <MotionAR_Update+0x122c>
 801079c:	ed5f 7a6a 	vldr	s15, [pc, #-424]	; 80105f8 <MotionAR_Update+0x1078>
 80107a0:	eef4 0ae7 	vcmpe.f32	s1, s15
 80107a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107a8:	f67f adbe 	bls.w	8010328 <MotionAR_Update+0xda8>
 80107ac:	2301      	movs	r3, #1
 80107ae:	2406      	movs	r4, #6
 80107b0:	e4cf      	b.n	8010152 <MotionAR_Update+0xbd2>
 80107b2:	ed5f 7a6e 	vldr	s15, [pc, #-440]	; 80105fc <MotionAR_Update+0x107c>
 80107b6:	eeb4 2ae7 	vcmpe.f32	s4, s15
 80107ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107be:	d807      	bhi.n	80107d0 <MotionAR_Update+0x1250>
 80107c0:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 8010600 <MotionAR_Update+0x1080>
 80107c4:	eeb4 cae7 	vcmpe.f32	s24, s15
 80107c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107cc:	f67f ae65 	bls.w	801049a <MotionAR_Update+0xf1a>
 80107d0:	23ff      	movs	r3, #255	; 0xff
 80107d2:	2404      	movs	r4, #4
 80107d4:	e5aa      	b.n	801032c <MotionAR_Update+0xdac>
 80107d6:	2b01      	cmp	r3, #1
 80107d8:	f67f acca 	bls.w	8010170 <MotionAR_Update+0xbf0>
 80107dc:	e4db      	b.n	8010196 <MotionAR_Update+0xc16>
 80107de:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
 80107e2:	f88a 205c 	strb.w	r2, [sl, #92]	; 0x5c
 80107e6:	2304      	movs	r3, #4
 80107e8:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
 80107ec:	e77a      	b.n	80106e4 <MotionAR_Update+0x1164>
 80107ee:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
 80107f2:	f88a 205c 	strb.w	r2, [sl, #92]	; 0x5c
 80107f6:	2303      	movs	r3, #3
 80107f8:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
 80107fc:	e772      	b.n	80106e4 <MotionAR_Update+0x1164>
 80107fe:	ed5f 7a7f 	vldr	s15, [pc, #-508]	; 8010604 <MotionAR_Update+0x1084>
 8010802:	eef4 9ae7 	vcmpe.f32	s19, s15
 8010806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801080a:	f67f ac21 	bls.w	8010050 <MotionAR_Update+0xad0>
 801080e:	ed5f 7a82 	vldr	s15, [pc, #-520]	; 8010608 <MotionAR_Update+0x1088>
 8010812:	eeb4 4ae7 	vcmpe.f32	s8, s15
 8010816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801081a:	f63f ac19 	bhi.w	8010050 <MotionAR_Update+0xad0>
 801081e:	ed5f 7a85 	vldr	s15, [pc, #-532]	; 801060c <MotionAR_Update+0x108c>
 8010822:	ed9d 7a07 	vldr	s14, [sp, #28]
 8010826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801082a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801082e:	f63f ad7b 	bhi.w	8010328 <MotionAR_Update+0xda8>
 8010832:	e40d      	b.n	8010050 <MotionAR_Update+0xad0>
 8010834:	ed5f 7a8a 	vldr	s15, [pc, #-552]	; 8010610 <MotionAR_Update+0x1090>
 8010838:	eef4 0ae7 	vcmpe.f32	s1, s15
 801083c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010840:	f200 83e4 	bhi.w	801100c <MotionAR_Update+0x1a8c>
 8010844:	291b      	cmp	r1, #27
 8010846:	f67f ae28 	bls.w	801049a <MotionAR_Update+0xf1a>
 801084a:	ed5f 7a8e 	vldr	s15, [pc, #-568]	; 8010614 <MotionAR_Update+0x1094>
 801084e:	eef4 1ae7 	vcmpe.f32	s3, s15
 8010852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010856:	f200 84b1 	bhi.w	80111bc <MotionAR_Update+0x1c3c>
 801085a:	ed5f 7a91 	vldr	s15, [pc, #-580]	; 8010618 <MotionAR_Update+0x1098>
 801085e:	eef4 5ae7 	vcmpe.f32	s11, s15
 8010862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010866:	d908      	bls.n	801087a <MotionAR_Update+0x12fa>
 8010868:	ed5f 7a94 	vldr	s15, [pc, #-592]	; 801061c <MotionAR_Update+0x109c>
 801086c:	ed9d 7a07 	vldr	s14, [sp, #28]
 8010870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010878:	d8aa      	bhi.n	80107d0 <MotionAR_Update+0x1250>
 801087a:	ed5f 7a97 	vldr	s15, [pc, #-604]	; 8010620 <MotionAR_Update+0x10a0>
 801087e:	eeb4 2ae7 	vcmpe.f32	s4, s15
 8010882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010886:	f67f ae10 	bls.w	80104aa <MotionAR_Update+0xf2a>
 801088a:	ed5f 7a9a 	vldr	s15, [pc, #-616]	; 8010624 <MotionAR_Update+0x10a4>
 801088e:	eef4 2ae7 	vcmpe.f32	s5, s15
 8010892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010896:	d939      	bls.n	801090c <MotionAR_Update+0x138c>
 8010898:	ed5f 7a9d 	vldr	s15, [pc, #-628]	; 8010628 <MotionAR_Update+0x10a8>
 801089c:	eef4 5ae7 	vcmpe.f32	s11, s15
 80108a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a4:	f63f af05 	bhi.w	80106b2 <MotionAR_Update+0x1132>
 80108a8:	ed5f 7aa0 	vldr	s15, [pc, #-640]	; 801062c <MotionAR_Update+0x10ac>
 80108ac:	e710      	b.n	80106d0 <MotionAR_Update+0x1150>
 80108ae:	ed5f 7aa0 	vldr	s15, [pc, #-640]	; 8010630 <MotionAR_Update+0x10b0>
 80108b2:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80108b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ba:	f67f aefa 	bls.w	80106b2 <MotionAR_Update+0x1132>
 80108be:	ed5f 7aa3 	vldr	s15, [pc, #-652]	; 8010634 <MotionAR_Update+0x10b4>
 80108c2:	eeb4 4ae7 	vcmpe.f32	s8, s15
 80108c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ca:	f200 8168 	bhi.w	8010b9e <MotionAR_Update+0x161e>
 80108ce:	ed5f 7aa6 	vldr	s15, [pc, #-664]	; 8010638 <MotionAR_Update+0x10b8>
 80108d2:	eeb4 dae7 	vcmpe.f32	s26, s15
 80108d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108da:	d917      	bls.n	801090c <MotionAR_Update+0x138c>
 80108dc:	ed5f 7aa9 	vldr	s15, [pc, #-676]	; 801063c <MotionAR_Update+0x10bc>
 80108e0:	eef4 5ae7 	vcmpe.f32	s11, s15
 80108e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108e8:	bf95      	itete	ls
 80108ea:	23fe      	movls	r3, #254	; 0xfe
 80108ec:	23fd      	movhi	r3, #253	; 0xfd
 80108ee:	2403      	movls	r4, #3
 80108f0:	2402      	movhi	r4, #2
 80108f2:	e51b      	b.n	801032c <MotionAR_Update+0xdac>
 80108f4:	2300      	movs	r3, #0
 80108f6:	2205      	movs	r2, #5
 80108f8:	e9ca 3312 	strd	r3, r3, [sl, #72]	; 0x48
 80108fc:	e9ca 3315 	strd	r3, r3, [sl, #84]	; 0x54
 8010900:	f8ca 3050 	str.w	r3, [sl, #80]	; 0x50
 8010904:	f88a 205f 	strb.w	r2, [sl, #95]	; 0x5f
 8010908:	2301      	movs	r3, #1
 801090a:	e4d4      	b.n	80102b6 <MotionAR_Update+0xd36>
 801090c:	23fe      	movs	r3, #254	; 0xfe
 801090e:	2403      	movs	r4, #3
 8010910:	e50c      	b.n	801032c <MotionAR_Update+0xdac>
 8010912:	3b05      	subs	r3, #5
 8010914:	2b01      	cmp	r3, #1
 8010916:	f63f ad49 	bhi.w	80103ac <MotionAR_Update+0xe2c>
 801091a:	e9da 3215 	ldrd	r3, r2, [sl, #84]	; 0x54
 801091e:	0e92      	lsrs	r2, r2, #26
 8010920:	0e9b      	lsrs	r3, r3, #26
 8010922:	e9ca 3215 	strd	r3, r2, [sl, #84]	; 0x54
 8010926:	e541      	b.n	80103ac <MotionAR_Update+0xe2c>
 8010928:	ed5f 7abb 	vldr	s15, [pc, #-748]	; 8010640 <MotionAR_Update+0x10c0>
 801092c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010934:	f67f abdd 	bls.w	80100f2 <MotionAR_Update+0xb72>
 8010938:	ed5f 7abe 	vldr	s15, [pc, #-760]	; 8010644 <MotionAR_Update+0x10c4>
 801093c:	eeb4 dae7 	vcmpe.f32	s26, s15
 8010940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010944:	f67f af14 	bls.w	8010770 <MotionAR_Update+0x11f0>
 8010948:	ed5f 7ac1 	vldr	s15, [pc, #-772]	; 8010648 <MotionAR_Update+0x10c8>
 801094c:	ed9d 7a06 	vldr	s14, [sp, #24]
 8010950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010958:	f63f af0a 	bhi.w	8010770 <MotionAR_Update+0x11f0>
 801095c:	ed5f 7ac5 	vldr	s15, [pc, #-788]	; 801064c <MotionAR_Update+0x10cc>
 8010960:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010968:	f67f af02 	bls.w	8010770 <MotionAR_Update+0x11f0>
 801096c:	e55f      	b.n	801042e <MotionAR_Update+0xeae>
 801096e:	ed5f 7ac5 	vldr	s15, [pc, #-788]	; 801065c <MotionAR_Update+0x10dc>
 8010972:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801097a:	f200 80a4 	bhi.w	8010ac6 <MotionAR_Update+0x1546>
 801097e:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 8010650 <MotionAR_Update+0x10d0>
 8010982:	eeb4 dae7 	vcmpe.f32	s26, s15
 8010986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801098a:	f200 8156 	bhi.w	8010c3a <MotionAR_Update+0x16ba>
 801098e:	ed5f 7acf 	vldr	s15, [pc, #-828]	; 8010654 <MotionAR_Update+0x10d4>
 8010992:	eef4 4ae7 	vcmpe.f32	s9, s15
 8010996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801099a:	f67f abaa 	bls.w	80100f2 <MotionAR_Update+0xb72>
 801099e:	e546      	b.n	801042e <MotionAR_Update+0xeae>
 80109a0:	ed5f 7ad3 	vldr	s15, [pc, #-844]	; 8010658 <MotionAR_Update+0x10d8>
 80109a4:	eef4 cae7 	vcmpe.f32	s25, s15
 80109a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ac:	f200 80b5 	bhi.w	8010b1a <MotionAR_Update+0x159a>
 80109b0:	ed5f 7ad6 	vldr	s15, [pc, #-856]	; 801065c <MotionAR_Update+0x10dc>
 80109b4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80109b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109bc:	f200 80ff 	bhi.w	8010bbe <MotionAR_Update+0x163e>
 80109c0:	ed5f 7ad9 	vldr	s15, [pc, #-868]	; 8010660 <MotionAR_Update+0x10e0>
 80109c4:	eef4 cae7 	vcmpe.f32	s25, s15
 80109c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109cc:	f63f ad65 	bhi.w	801049a <MotionAR_Update+0xf1a>
 80109d0:	ed5f 7adc 	vldr	s15, [pc, #-880]	; 8010664 <MotionAR_Update+0x10e4>
 80109d4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80109d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109dc:	f63f ab89 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 80109e0:	ed5f 7adf 	vldr	s15, [pc, #-892]	; 8010668 <MotionAR_Update+0x10e8>
 80109e4:	eeb4 dae7 	vcmpe.f32	s26, s15
 80109e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ec:	f67f ab81 	bls.w	80100f2 <MotionAR_Update+0xb72>
 80109f0:	e553      	b.n	801049a <MotionAR_Update+0xf1a>
 80109f2:	2b09      	cmp	r3, #9
 80109f4:	f63f ae5d 	bhi.w	80106b2 <MotionAR_Update+0x1132>
 80109f8:	ed5f 7ae4 	vldr	s15, [pc, #-912]	; 801066c <MotionAR_Update+0x10ec>
 80109fc:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a04:	f63f aba3 	bhi.w	801014e <MotionAR_Update+0xbce>
 8010a08:	ed5f 7ae7 	vldr	s15, [pc, #-924]	; 8010670 <MotionAR_Update+0x10f0>
 8010a0c:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a14:	f67f ae4d 	bls.w	80106b2 <MotionAR_Update+0x1132>
 8010a18:	f7ff bb99 	b.w	801014e <MotionAR_Update+0xbce>
 8010a1c:	ed9d 8a06 	vldr	s16, [sp, #24]
 8010a20:	ee18 0a10 	vmov	r0, s16
 8010a24:	f7ef fd60 	bl	80004e8 <__aeabi_f2d>
 8010a28:	f20f 43cc 	addw	r3, pc, #1228	; 0x4cc
 8010a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a30:	f7f0 f842 	bl	8000ab8 <__aeabi_dcmpgt>
 8010a34:	2800      	cmp	r0, #0
 8010a36:	f43f abae 	beq.w	8010196 <MotionAR_Update+0xc16>
 8010a3a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a42:	f57f aba8 	bpl.w	8010196 <MotionAR_Update+0xc16>
 8010a46:	ed9d 7a07 	vldr	s14, [sp, #28]
 8010a4a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010a4e:	eeb4 7a67 	vcmp.f32	s14, s15
 8010a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a56:	bfc8      	it	gt
 8010a58:	2402      	movgt	r4, #2
 8010a5a:	f7ff bb9c 	b.w	8010196 <MotionAR_Update+0xc16>
 8010a5e:	eddf 7aee 	vldr	s15, [pc, #952]	; 8010e18 <MotionAR_Update+0x1898>
 8010a62:	eef4 5ae7 	vcmpe.f32	s11, s15
 8010a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a6a:	f200 809b 	bhi.w	8010ba4 <MotionAR_Update+0x1624>
 8010a6e:	2917      	cmp	r1, #23
 8010a70:	f63f af4c 	bhi.w	801090c <MotionAR_Update+0x138c>
 8010a74:	eddf 7ae9 	vldr	s15, [pc, #932]	; 8010e1c <MotionAR_Update+0x189c>
 8010a78:	eef4 5ae7 	vcmpe.f32	s11, s15
 8010a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a80:	f63f ae17 	bhi.w	80106b2 <MotionAR_Update+0x1132>
 8010a84:	eddf 7ae6 	vldr	s15, [pc, #920]	; 8010e20 <MotionAR_Update+0x18a0>
 8010a88:	eef4 cae7 	vcmpe.f32	s25, s15
 8010a8c:	e534      	b.n	80104f8 <MotionAR_Update+0xf78>
 8010a8e:	2301      	movs	r3, #1
 8010a90:	e411      	b.n	80102b6 <MotionAR_Update+0xd36>
 8010a92:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8010e24 <MotionAR_Update+0x18a4>
 8010a96:	eeb4 eae7 	vcmpe.f32	s28, s15
 8010a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a9e:	f67f ab28 	bls.w	80100f2 <MotionAR_Update+0xb72>
 8010aa2:	eddf 7ae1 	vldr	s15, [pc, #900]	; 8010e28 <MotionAR_Update+0x18a8>
 8010aa6:	eef4 4ae7 	vcmpe.f32	s9, s15
 8010aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aae:	f63f ab20 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 8010ab2:	eddf 7ade 	vldr	s15, [pc, #888]	; 8010e2c <MotionAR_Update+0x18ac>
 8010ab6:	eeb4 eae7 	vcmpe.f32	s28, s15
 8010aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010abe:	f67f ae57 	bls.w	8010770 <MotionAR_Update+0x11f0>
 8010ac2:	f7ff bb16 	b.w	80100f2 <MotionAR_Update+0xb72>
 8010ac6:	eddf 7ada 	vldr	s15, [pc, #872]	; 8010e30 <MotionAR_Update+0x18b0>
 8010aca:	eeb4 dae7 	vcmpe.f32	s26, s15
 8010ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad2:	f63f ac7b 	bhi.w	80103cc <MotionAR_Update+0xe4c>
 8010ad6:	eddf 7ad7 	vldr	s15, [pc, #860]	; 8010e34 <MotionAR_Update+0x18b4>
 8010ada:	eef4 0ae7 	vcmpe.f32	s1, s15
 8010ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae2:	f200 8150 	bhi.w	8010d86 <MotionAR_Update+0x1806>
 8010ae6:	eddf 7ad4 	vldr	s15, [pc, #848]	; 8010e38 <MotionAR_Update+0x18b8>
 8010aea:	eef4 5ae7 	vcmpe.f32	s11, s15
 8010aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af2:	f63f aafe 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 8010af6:	eddf 7ad1 	vldr	s15, [pc, #836]	; 8010e3c <MotionAR_Update+0x18bc>
 8010afa:	eef4 1ae7 	vcmpe.f32	s3, s15
 8010afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b02:	f67f ae35 	bls.w	8010770 <MotionAR_Update+0x11f0>
 8010b06:	e492      	b.n	801042e <MotionAR_Update+0xeae>
 8010b08:	eddf 7acd 	vldr	s15, [pc, #820]	; 8010e40 <MotionAR_Update+0x18c0>
 8010b0c:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b14:	f67f aaed 	bls.w	80100f2 <MotionAR_Update+0xb72>
 8010b18:	e4bf      	b.n	801049a <MotionAR_Update+0xf1a>
 8010b1a:	eddf 7aca 	vldr	s15, [pc, #808]	; 8010e44 <MotionAR_Update+0x18c4>
 8010b1e:	eef4 1ae7 	vcmpe.f32	s3, s15
 8010b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b26:	f67f ae53 	bls.w	80107d0 <MotionAR_Update+0x1250>
 8010b2a:	e4b6      	b.n	801049a <MotionAR_Update+0xf1a>
 8010b2c:	eddf 7ac6 	vldr	s15, [pc, #792]	; 8010e48 <MotionAR_Update+0x18c8>
 8010b30:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b38:	f67f abf6 	bls.w	8010328 <MotionAR_Update+0xda8>
 8010b3c:	e636      	b.n	80107ac <MotionAR_Update+0x122c>
 8010b3e:	eddf 7ac3 	vldr	s15, [pc, #780]	; 8010e4c <MotionAR_Update+0x18cc>
 8010b42:	eef4 1ae7 	vcmpe.f32	s3, s15
 8010b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b4a:	f200 80f3 	bhi.w	8010d34 <MotionAR_Update+0x17b4>
 8010b4e:	eddf 7ac0 	vldr	s15, [pc, #768]	; 8010e50 <MotionAR_Update+0x18d0>
 8010b52:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5a:	f63f adaa 	bhi.w	80106b2 <MotionAR_Update+0x1132>
 8010b5e:	2916      	cmp	r1, #22
 8010b60:	f200 82bc 	bhi.w	80110dc <MotionAR_Update+0x1b5c>
 8010b64:	eddf 7abb 	vldr	s15, [pc, #748]	; 8010e54 <MotionAR_Update+0x18d4>
 8010b68:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b70:	f200 82b1 	bhi.w	80110d6 <MotionAR_Update+0x1b56>
 8010b74:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8010e58 <MotionAR_Update+0x18d8>
 8010b78:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b80:	f67f ad97 	bls.w	80106b2 <MotionAR_Update+0x1132>
 8010b84:	eddf 7ab5 	vldr	s15, [pc, #724]	; 8010e5c <MotionAR_Update+0x18dc>
 8010b88:	eef4 9ae7 	vcmpe.f32	s19, s15
 8010b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b90:	f63f ad8f 	bhi.w	80106b2 <MotionAR_Update+0x1132>
 8010b94:	eddf 7ab2 	vldr	s15, [pc, #712]	; 8010e60 <MotionAR_Update+0x18e0>
 8010b98:	eef4 1ae7 	vcmpe.f32	s3, s15
 8010b9c:	e4ac      	b.n	80104f8 <MotionAR_Update+0xf78>
 8010b9e:	eddf 7ab1 	vldr	s15, [pc, #708]	; 8010e64 <MotionAR_Update+0x18e4>
 8010ba2:	e595      	b.n	80106d0 <MotionAR_Update+0x1150>
 8010ba4:	eddf 7ab0 	vldr	s15, [pc, #704]	; 8010e68 <MotionAR_Update+0x18e8>
 8010ba8:	eef4 0ae7 	vcmpe.f32	s1, s15
 8010bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb0:	f67f aeac 	bls.w	801090c <MotionAR_Update+0x138c>
 8010bb4:	eddf 7aad 	vldr	s15, [pc, #692]	; 8010e6c <MotionAR_Update+0x18ec>
 8010bb8:	eeb4 4ae7 	vcmpe.f32	s8, s15
 8010bbc:	e49c      	b.n	80104f8 <MotionAR_Update+0xf78>
 8010bbe:	2911      	cmp	r1, #17
 8010bc0:	f63f ae38 	bhi.w	8010834 <MotionAR_Update+0x12b4>
 8010bc4:	eddf 7aaa 	vldr	s15, [pc, #680]	; 8010e70 <MotionAR_Update+0x18f0>
 8010bc8:	eef4 5ae7 	vcmpe.f32	s11, s15
 8010bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd0:	d920      	bls.n	8010c14 <MotionAR_Update+0x1694>
 8010bd2:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8010e74 <MotionAR_Update+0x18f4>
 8010bd6:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bde:	d819      	bhi.n	8010c14 <MotionAR_Update+0x1694>
 8010be0:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8010e78 <MotionAR_Update+0x18f8>
 8010be4:	eef4 1ae7 	vcmpe.f32	s3, s15
 8010be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bec:	f67f aa81 	bls.w	80100f2 <MotionAR_Update+0xb72>
 8010bf0:	eddf 7aa2 	vldr	s15, [pc, #648]	; 8010e7c <MotionAR_Update+0x18fc>
 8010bf4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfc:	f200 82d4 	bhi.w	80111a8 <MotionAR_Update+0x1c28>
 8010c00:	eddf 7a9f 	vldr	s15, [pc, #636]	; 8010e80 <MotionAR_Update+0x1900>
 8010c04:	ed9d 7a07 	vldr	s14, [sp, #28]
 8010c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c10:	f63f aa6f 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 8010c14:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8010e84 <MotionAR_Update+0x1904>
 8010c18:	eeb4 2ae7 	vcmpe.f32	s4, s15
 8010c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c20:	f67f ac43 	bls.w	80104aa <MotionAR_Update+0xf2a>
 8010c24:	e54b      	b.n	80106be <MotionAR_Update+0x113e>
 8010c26:	eddf 7a98 	vldr	s15, [pc, #608]	; 8010e88 <MotionAR_Update+0x1908>
 8010c2a:	eef4 eae7 	vcmpe.f32	s29, s15
 8010c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c32:	f67f ad9d 	bls.w	8010770 <MotionAR_Update+0x11f0>
 8010c36:	f7ff ba5c 	b.w	80100f2 <MotionAR_Update+0xb72>
 8010c3a:	eddf 7a94 	vldr	s15, [pc, #592]	; 8010e8c <MotionAR_Update+0x190c>
 8010c3e:	eef4 cae7 	vcmpe.f32	s25, s15
 8010c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c46:	f63f abf2 	bhi.w	801042e <MotionAR_Update+0xeae>
 8010c4a:	eddf 7a91 	vldr	s15, [pc, #580]	; 8010e90 <MotionAR_Update+0x1910>
 8010c4e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c56:	f63f aa4c 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 8010c5a:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8010e94 <MotionAR_Update+0x1914>
 8010c5e:	eeb4 dae7 	vcmpe.f32	s26, s15
 8010c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c66:	f67f aa44 	bls.w	80100f2 <MotionAR_Update+0xb72>
 8010c6a:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8010e98 <MotionAR_Update+0x1918>
 8010c6e:	eef4 eae7 	vcmpe.f32	s29, s15
 8010c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c76:	f67f abda 	bls.w	801042e <MotionAR_Update+0xeae>
 8010c7a:	f7ff ba3a 	b.w	80100f2 <MotionAR_Update+0xb72>
 8010c7e:	eddf 7a87 	vldr	s15, [pc, #540]	; 8010e9c <MotionAR_Update+0x191c>
 8010c82:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c8a:	d860      	bhi.n	8010d4e <MotionAR_Update+0x17ce>
 8010c8c:	eddf 7a84 	vldr	s15, [pc, #528]	; 8010ea0 <MotionAR_Update+0x1920>
 8010c90:	eef4 4ae7 	vcmpe.f32	s9, s15
 8010c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c98:	f200 81d4 	bhi.w	8011044 <MotionAR_Update+0x1ac4>
 8010c9c:	eddf 7a81 	vldr	s15, [pc, #516]	; 8010ea4 <MotionAR_Update+0x1924>
 8010ca0:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca8:	f63f abc1 	bhi.w	801042e <MotionAR_Update+0xeae>
 8010cac:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8010cb0:	eddd 7a08 	vldr	s15, [sp, #32]
 8010cb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010cb8:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8010ea8 <MotionAR_Update+0x1928>
 8010cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc4:	f67f aa15 	bls.w	80100f2 <MotionAR_Update+0xb72>
 8010cc8:	e552      	b.n	8010770 <MotionAR_Update+0x11f0>
 8010cca:	eddf 7a78 	vldr	s15, [pc, #480]	; 8010eac <MotionAR_Update+0x192c>
 8010cce:	eef4 1ae7 	vcmpe.f32	s3, s15
 8010cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cd6:	f67f aa3a 	bls.w	801014e <MotionAR_Update+0xbce>
 8010cda:	eddf 7a75 	vldr	s15, [pc, #468]	; 8010eb0 <MotionAR_Update+0x1930>
 8010cde:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce6:	f67f ace4 	bls.w	80106b2 <MotionAR_Update+0x1132>
 8010cea:	f7ff ba30 	b.w	801014e <MotionAR_Update+0xbce>
 8010cee:	eddf 7a71 	vldr	s15, [pc, #452]	; 8010eb4 <MotionAR_Update+0x1934>
 8010cf2:	eef4 5ae7 	vcmpe.f32	s11, s15
 8010cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfa:	f200 816b 	bhi.w	8010fd4 <MotionAR_Update+0x1a54>
 8010cfe:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8010eb8 <MotionAR_Update+0x1938>
 8010d02:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d0a:	f67f ab0d 	bls.w	8010328 <MotionAR_Update+0xda8>
 8010d0e:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8010ebc <MotionAR_Update+0x193c>
 8010d12:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d1a:	f63f ab05 	bhi.w	8010328 <MotionAR_Update+0xda8>
 8010d1e:	e545      	b.n	80107ac <MotionAR_Update+0x122c>
 8010d20:	eddf 7a67 	vldr	s15, [pc, #412]	; 8010ec0 <MotionAR_Update+0x1940>
 8010d24:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d2c:	f67f acc1 	bls.w	80106b2 <MotionAR_Update+0x1132>
 8010d30:	f7ff ba0d 	b.w	801014e <MotionAR_Update+0xbce>
 8010d34:	eddf 7a63 	vldr	s15, [pc, #396]	; 8010ec4 <MotionAR_Update+0x1944>
 8010d38:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d40:	f67f acb7 	bls.w	80106b2 <MotionAR_Update+0x1132>
 8010d44:	eddf 7a60 	vldr	s15, [pc, #384]	; 8010ec8 <MotionAR_Update+0x1948>
 8010d48:	eef4 0ae7 	vcmpe.f32	s1, s15
 8010d4c:	e5ca      	b.n	80108e4 <MotionAR_Update+0x1364>
 8010d4e:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8010ecc <MotionAR_Update+0x194c>
 8010d52:	ed9d 7a06 	vldr	s14, [sp, #24]
 8010d56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d5e:	f200 818a 	bhi.w	8011076 <MotionAR_Update+0x1af6>
 8010d62:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8010ed0 <MotionAR_Update+0x1950>
 8010d66:	eeb4 eae7 	vcmpe.f32	s28, s15
 8010d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d6e:	f67f ab5e 	bls.w	801042e <MotionAR_Update+0xeae>
 8010d72:	eddf 7a58 	vldr	s15, [pc, #352]	; 8010ed4 <MotionAR_Update+0x1954>
 8010d76:	eef4 5ae7 	vcmpe.f32	s11, s15
 8010d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d7e:	f67f ab56 	bls.w	801042e <MotionAR_Update+0xeae>
 8010d82:	f7ff b9b6 	b.w	80100f2 <MotionAR_Update+0xb72>
 8010d86:	eddf 7a54 	vldr	s15, [pc, #336]	; 8010ed8 <MotionAR_Update+0x1958>
 8010d8a:	ed9d 7a06 	vldr	s14, [sp, #24]
 8010d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d96:	f63f a9ac 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 8010d9a:	eddf 7a50 	vldr	s15, [pc, #320]	; 8010edc <MotionAR_Update+0x195c>
 8010d9e:	eef4 eae7 	vcmpe.f32	s29, s15
 8010da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da6:	f67f ab42 	bls.w	801042e <MotionAR_Update+0xeae>
 8010daa:	f7ff b9a2 	b.w	80100f2 <MotionAR_Update+0xb72>
 8010dae:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8010ee0 <MotionAR_Update+0x1960>
 8010db2:	eeb4 eae7 	vcmpe.f32	s28, s15
 8010db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dba:	f200 811d 	bhi.w	8010ff8 <MotionAR_Update+0x1a78>
 8010dbe:	eddf 7a49 	vldr	s15, [pc, #292]	; 8010ee4 <MotionAR_Update+0x1964>
 8010dc2:	eeb4 dae7 	vcmpe.f32	s26, s15
 8010dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dca:	f63f ab30 	bhi.w	801042e <MotionAR_Update+0xeae>
 8010dce:	eddf 7a46 	vldr	s15, [pc, #280]	; 8010ee8 <MotionAR_Update+0x1968>
 8010dd2:	ed9d 7a06 	vldr	s14, [sp, #24]
 8010dd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dde:	f63f ab26 	bhi.w	801042e <MotionAR_Update+0xeae>
 8010de2:	eddf 7a42 	vldr	s15, [pc, #264]	; 8010eec <MotionAR_Update+0x196c>
 8010de6:	eef4 5ae7 	vcmpe.f32	s11, s15
 8010dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dee:	f67f ab1e 	bls.w	801042e <MotionAR_Update+0xeae>
 8010df2:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8010ef0 <MotionAR_Update+0x1970>
 8010df6:	eef4 2ae7 	vcmpe.f32	s5, s15
 8010dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dfe:	f63f ab16 	bhi.w	801042e <MotionAR_Update+0xeae>
 8010e02:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8010ef4 <MotionAR_Update+0x1974>
 8010e06:	eef4 eae7 	vcmpe.f32	s29, s15
 8010e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e0e:	f67f ab0e 	bls.w	801042e <MotionAR_Update+0xeae>
 8010e12:	f7ff b96e 	b.w	80100f2 <MotionAR_Update+0xb72>
 8010e16:	bf00      	nop
 8010e18:	3f70cf3a 	.word	0x3f70cf3a
 8010e1c:	3edc42ea 	.word	0x3edc42ea
 8010e20:	3e3d0a76 	.word	0x3e3d0a76
 8010e24:	3e4b5287 	.word	0x3e4b5287
 8010e28:	3dca979e 	.word	0x3dca979e
 8010e2c:	3f08b7d4 	.word	0x3f08b7d4
 8010e30:	3ceac351 	.word	0x3ceac351
 8010e34:	3cec7bb5 	.word	0x3cec7bb5
 8010e38:	3f3136a4 	.word	0x3f3136a4
 8010e3c:	40493a71 	.word	0x40493a71
 8010e40:	3f711c7e 	.word	0x3f711c7e
 8010e44:	41c22329 	.word	0x41c22329
 8010e48:	423f0e6b 	.word	0x423f0e6b
 8010e4c:	418779f2 	.word	0x418779f2
 8010e50:	3f6d89ad 	.word	0x3f6d89ad
 8010e54:	3ec71cda 	.word	0x3ec71cda
 8010e58:	3f3a045c 	.word	0x3f3a045c
 8010e5c:	421a344a 	.word	0x421a344a
 8010e60:	40fd2e94 	.word	0x40fd2e94
 8010e64:	3e60d4f1 	.word	0x3e60d4f1
 8010e68:	3de7159b 	.word	0x3de7159b
 8010e6c:	3fb52f44 	.word	0x3fb52f44
 8010e70:	3e905f29 	.word	0x3e905f29
 8010e74:	3f2f3a47 	.word	0x3f2f3a47
 8010e78:	4156dcd3 	.word	0x4156dcd3
 8010e7c:	3efb749b 	.word	0x3efb749b
 8010e80:	40bd4e27 	.word	0x40bd4e27
 8010e84:	3ef395c3 	.word	0x3ef395c3
 8010e88:	3ebca44c 	.word	0x3ebca44c
 8010e8c:	3c70fa45 	.word	0x3c70fa45
 8010e90:	3e2ffa3c 	.word	0x3e2ffa3c
 8010e94:	3c77d9dd 	.word	0x3c77d9dd
 8010e98:	3ee9ad86 	.word	0x3ee9ad86
 8010e9c:	3f6f9431 	.word	0x3f6f9431
 8010ea0:	3ca832ba 	.word	0x3ca832ba
 8010ea4:	3f1bf3bf 	.word	0x3f1bf3bf
 8010ea8:	3da87ebf 	.word	0x3da87ebf
 8010eac:	40c57c91 	.word	0x40c57c91
 8010eb0:	42449d1f 	.word	0x42449d1f
 8010eb4:	3e8e2e2c 	.word	0x3e8e2e2c
 8010eb8:	424044a4 	.word	0x424044a4
 8010ebc:	3f7eb8fa 	.word	0x3f7eb8fa
 8010ec0:	423d6b26 	.word	0x423d6b26
 8010ec4:	3e5a1405 	.word	0x3e5a1405
 8010ec8:	3e90f903 	.word	0x3e90f903
 8010ecc:	ba03126f 	.word	0xba03126f
 8010ed0:	3dc68c26 	.word	0x3dc68c26
 8010ed4:	3ec53fc0 	.word	0x3ec53fc0
 8010ed8:	bf3b27ee 	.word	0xbf3b27ee
 8010edc:	3dd13059 	.word	0x3dd13059
 8010ee0:	3efe4580 	.word	0x3efe4580
 8010ee4:	3c59f326 	.word	0x3c59f326
 8010ee8:	bece6128 	.word	0xbece6128
 8010eec:	3f0bae79 	.word	0x3f0bae79
 8010ef0:	3c18c06c 	.word	0x3c18c06c
 8010ef4:	3c797edc 	.word	0x3c797edc
 8010ef8:	c985f06f 	.word	0xc985f06f
 8010efc:	bfd0c154 	.word	0xbfd0c154
 8010f00:	3c861c7a 	.word	0x3c861c7a
 8010f04:	3f97cd70 	.word	0x3f97cd70
 8010f08:	3e495810 	.word	0x3e495810
 8010f0c:	3e7f27fe 	.word	0x3e7f27fe
 8010f10:	424a37c5 	.word	0x424a37c5
 8010f14:	3cd145d8 	.word	0x3cd145d8
 8010f18:	3da46bf0 	.word	0x3da46bf0
 8010f1c:	3d032e51 	.word	0x3d032e51
 8010f20:	3ed5f267 	.word	0x3ed5f267
 8010f24:	40e360fc 	.word	0x40e360fc
 8010f28:	3de56ef0 	.word	0x3de56ef0
 8010f2c:	3f145bc0 	.word	0x3f145bc0
 8010f30:	423d7dbb 	.word	0x423d7dbb
 8010f34:	3edcd91f 	.word	0x3edcd91f
 8010f38:	beb1a7a0 	.word	0xbeb1a7a0
 8010f3c:	3f1a9692 	.word	0x3f1a9692
 8010f40:	3e5c46d8 	.word	0x3e5c46d8
 8010f44:	3ee5d420 	.word	0x3ee5d420
 8010f48:	3f42d289 	.word	0x3f42d289
 8010f4c:	41f40da3 	.word	0x41f40da3
 8010f50:	3e9668e4 	.word	0x3e9668e4
 8010f54:	404ea194 	.word	0x404ea194
 8010f58:	3d6095c6 	.word	0x3d6095c6
 8010f5c:	3f098f3f 	.word	0x3f098f3f
 8010f60:	3f20dbbe 	.word	0x3f20dbbe
 8010f64:	3ecc2e12 	.word	0x3ecc2e12
 8010f68:	3ed15e39 	.word	0x3ed15e39
 8010f6c:	3c16e3b6 	.word	0x3c16e3b6
 8010f70:	3e6863bf 	.word	0x3e6863bf
 8010f74:	3e43bea9 	.word	0x3e43bea9
 8010f78:	3f0ebda1 	.word	0x3f0ebda1
 8010f7c:	42122520 	.word	0x42122520
 8010f80:	3e56e936 	.word	0x3e56e936
 8010f84:	3f13dec6 	.word	0x3f13dec6
 8010f88:	ed5f 7a23 	vldr	s15, [pc, #-140]	; 8010f00 <MotionAR_Update+0x1980>
 8010f8c:	ed9d 7a06 	vldr	s14, [sp, #24]
 8010f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f98:	f200 8081 	bhi.w	801109e <MotionAR_Update+0x1b1e>
 8010f9c:	ed5f 7a27 	vldr	s15, [pc, #-156]	; 8010f04 <MotionAR_Update+0x1984>
 8010fa0:	ed9d 7a05 	vldr	s14, [sp, #20]
 8010fa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fac:	f67f aa3f 	bls.w	801042e <MotionAR_Update+0xeae>
 8010fb0:	ed5f 7a2b 	vldr	s15, [pc, #-172]	; 8010f08 <MotionAR_Update+0x1988>
 8010fb4:	eef4 4ae7 	vcmpe.f32	s9, s15
 8010fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fbc:	f67f aa37 	bls.w	801042e <MotionAR_Update+0xeae>
 8010fc0:	ed5f 7a2e 	vldr	s15, [pc, #-184]	; 8010f0c <MotionAR_Update+0x198c>
 8010fc4:	eeb4 eae7 	vcmpe.f32	s28, s15
 8010fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fcc:	f67f a891 	bls.w	80100f2 <MotionAR_Update+0xb72>
 8010fd0:	f7ff ba2d 	b.w	801042e <MotionAR_Update+0xeae>
 8010fd4:	ed5f 7a32 	vldr	s15, [pc, #-200]	; 8010f10 <MotionAR_Update+0x1990>
 8010fd8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe0:	f67f abe4 	bls.w	80107ac <MotionAR_Update+0x122c>
 8010fe4:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8010f14 <MotionAR_Update+0x1994>
 8010fe8:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff0:	f67f a99a 	bls.w	8010328 <MotionAR_Update+0xda8>
 8010ff4:	f7ff bbda 	b.w	80107ac <MotionAR_Update+0x122c>
 8010ff8:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 8010f18 <MotionAR_Update+0x1998>
 8010ffc:	eef4 4ae7 	vcmpe.f32	s9, s15
 8011000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011004:	f67f aa13 	bls.w	801042e <MotionAR_Update+0xeae>
 8011008:	f7ff b873 	b.w	80100f2 <MotionAR_Update+0xb72>
 801100c:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8010f1c <MotionAR_Update+0x199c>
 8011010:	eef4 cae7 	vcmpe.f32	s25, s15
 8011014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011018:	f67f a86b 	bls.w	80100f2 <MotionAR_Update+0xb72>
 801101c:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 8010f20 <MotionAR_Update+0x19a0>
 8011020:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011028:	f200 80d2 	bhi.w	80111d0 <MotionAR_Update+0x1c50>
 801102c:	ed5f 7a43 	vldr	s15, [pc, #-268]	; 8010f24 <MotionAR_Update+0x19a4>
 8011030:	ed9d 7a07 	vldr	s14, [sp, #28]
 8011034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801103c:	f67f aa2d 	bls.w	801049a <MotionAR_Update+0xf1a>
 8011040:	f7ff b857 	b.w	80100f2 <MotionAR_Update+0xb72>
 8011044:	ed5f 7a48 	vldr	s15, [pc, #-288]	; 8010f28 <MotionAR_Update+0x19a8>
 8011048:	eef4 5ae7 	vcmpe.f32	s11, s15
 801104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011050:	d864      	bhi.n	801111c <MotionAR_Update+0x1b9c>
 8011052:	ed5f 7a4a 	vldr	s15, [pc, #-296]	; 8010f2c <MotionAR_Update+0x19ac>
 8011056:	eef4 9ae7 	vcmpe.f32	s19, s15
 801105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801105e:	f200 8091 	bhi.w	8011184 <MotionAR_Update+0x1c04>
 8011062:	ed5f 7a4d 	vldr	s15, [pc, #-308]	; 8010f30 <MotionAR_Update+0x19b0>
 8011066:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801106e:	f67f a840 	bls.w	80100f2 <MotionAR_Update+0xb72>
 8011072:	f7ff bb7d 	b.w	8010770 <MotionAR_Update+0x11f0>
 8011076:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8010f34 <MotionAR_Update+0x19b4>
 801107a:	eef4 eae7 	vcmpe.f32	s29, s15
 801107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011082:	f63f a836 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 8011086:	ed5f 7a54 	vldr	s15, [pc, #-336]	; 8010f38 <MotionAR_Update+0x19b8>
 801108a:	ed9d 7a05 	vldr	s14, [sp, #20]
 801108e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011096:	f67f a82c 	bls.w	80100f2 <MotionAR_Update+0xb72>
 801109a:	f7ff bb69 	b.w	8010770 <MotionAR_Update+0x11f0>
 801109e:	ed5f 7a59 	vldr	s15, [pc, #-356]	; 8010f3c <MotionAR_Update+0x19bc>
 80110a2:	ed9d 7a06 	vldr	s14, [sp, #24]
 80110a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ae:	f67f a820 	bls.w	80100f2 <MotionAR_Update+0xb72>
 80110b2:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 8010f40 <MotionAR_Update+0x19c0>
 80110b6:	eeb4 eae7 	vcmpe.f32	s28, s15
 80110ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110be:	f67f a9b6 	bls.w	801042e <MotionAR_Update+0xeae>
 80110c2:	ed5f 7a60 	vldr	s15, [pc, #-384]	; 8010f44 <MotionAR_Update+0x19c4>
 80110c6:	eeb4 eae7 	vcmpe.f32	s28, s15
 80110ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ce:	f63f a810 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 80110d2:	f7ff b9ac 	b.w	801042e <MotionAR_Update+0xeae>
 80110d6:	ed5f 7a64 	vldr	s15, [pc, #-400]	; 8010f48 <MotionAR_Update+0x19c8>
 80110da:	e401      	b.n	80108e0 <MotionAR_Update+0x1360>
 80110dc:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 8010f4c <MotionAR_Update+0x19cc>
 80110e0:	eef4 9ae7 	vcmpe.f32	s19, s15
 80110e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e8:	f63f ac10 	bhi.w	801090c <MotionAR_Update+0x138c>
 80110ec:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8010f50 <MotionAR_Update+0x19d0>
 80110f0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80110f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110f8:	f63f ac08 	bhi.w	801090c <MotionAR_Update+0x138c>
 80110fc:	ed5f 7a6b 	vldr	s15, [pc, #-428]	; 8010f54 <MotionAR_Update+0x19d4>
 8011100:	ed9d 7a07 	vldr	s14, [sp, #28]
 8011104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801110c:	f63f aad1 	bhi.w	80106b2 <MotionAR_Update+0x1132>
 8011110:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8010f58 <MotionAR_Update+0x19d8>
 8011114:	eeb4 dae7 	vcmpe.f32	s26, s15
 8011118:	f7ff b9ee 	b.w	80104f8 <MotionAR_Update+0xf78>
 801111c:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 8010f5c <MotionAR_Update+0x19dc>
 8011120:	ed9d 7a06 	vldr	s14, [sp, #24]
 8011124:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801112c:	f67e afe1 	bls.w	80100f2 <MotionAR_Update+0xb72>
 8011130:	ed5f 7a75 	vldr	s15, [pc, #-468]	; 8010f60 <MotionAR_Update+0x19e0>
 8011134:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801113c:	f63f ab18 	bhi.w	8010770 <MotionAR_Update+0x11f0>
 8011140:	ed5f 7a78 	vldr	s15, [pc, #-480]	; 8010f64 <MotionAR_Update+0x19e4>
 8011144:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801114c:	f67e afd1 	bls.w	80100f2 <MotionAR_Update+0xb72>
 8011150:	ed5f 7a7b 	vldr	s15, [pc, #-492]	; 8010f68 <MotionAR_Update+0x19e8>
 8011154:	eeb4 cae7 	vcmpe.f32	s24, s15
 8011158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801115c:	f67e afc9 	bls.w	80100f2 <MotionAR_Update+0xb72>
 8011160:	ed5f 7a7e 	vldr	s15, [pc, #-504]	; 8010f6c <MotionAR_Update+0x19ec>
 8011164:	eef4 2ae7 	vcmpe.f32	s5, s15
 8011168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116c:	f63e afc1 	bhi.w	80100f2 <MotionAR_Update+0xb72>
 8011170:	ed5f 7a81 	vldr	s15, [pc, #-516]	; 8010f70 <MotionAR_Update+0x19f0>
 8011174:	eef4 4ae7 	vcmpe.f32	s9, s15
 8011178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801117c:	f67f aaf8 	bls.w	8010770 <MotionAR_Update+0x11f0>
 8011180:	f7fe bfb7 	b.w	80100f2 <MotionAR_Update+0xb72>
 8011184:	ed5f 7a85 	vldr	s15, [pc, #-532]	; 8010f74 <MotionAR_Update+0x19f4>
 8011188:	eef4 eae7 	vcmpe.f32	s29, s15
 801118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011190:	f67f a94d 	bls.w	801042e <MotionAR_Update+0xeae>
 8011194:	ed5f 7a88 	vldr	s15, [pc, #-544]	; 8010f78 <MotionAR_Update+0x19f8>
 8011198:	eeb4 cae7 	vcmpe.f32	s24, s15
 801119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111a0:	f67f a945 	bls.w	801042e <MotionAR_Update+0xeae>
 80111a4:	f7ff bae4 	b.w	8010770 <MotionAR_Update+0x11f0>
 80111a8:	ed5f 7a8c 	vldr	s15, [pc, #-560]	; 8010f7c <MotionAR_Update+0x19fc>
 80111ac:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80111b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b4:	f67f ad2e 	bls.w	8010c14 <MotionAR_Update+0x1694>
 80111b8:	f7fe bf9b 	b.w	80100f2 <MotionAR_Update+0xb72>
 80111bc:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 8010f80 <MotionAR_Update+0x1a00>
 80111c0:	eef4 5ae7 	vcmpe.f32	s11, s15
 80111c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111c8:	f67f ab57 	bls.w	801087a <MotionAR_Update+0x12fa>
 80111cc:	f7ff bb00 	b.w	80107d0 <MotionAR_Update+0x1250>
 80111d0:	ed5f 7a94 	vldr	s15, [pc, #-592]	; 8010f84 <MotionAR_Update+0x1a04>
 80111d4:	eef4 5ae7 	vcmpe.f32	s11, s15
 80111d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111dc:	f67f a95d 	bls.w	801049a <MotionAR_Update+0xf1a>
 80111e0:	f7fe bf87 	b.w	80100f2 <MotionAR_Update+0xb72>
 80111e4:	3301      	adds	r3, #1
 80111e6:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
 80111ea:	f7ff b801 	b.w	80101f0 <MotionAR_Update+0xc70>
 80111ee:	bf00      	nop

080111f0 <MotionCP_Update>:
 80111f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f4:	ed2d 8b06 	vpush	{d8-d10}
 80111f8:	4c74      	ldr	r4, [pc, #464]	; (80113cc <MotionCP_Update+0x1dc>)
 80111fa:	b09f      	sub	sp, #124	; 0x7c
 80111fc:	7823      	ldrb	r3, [r4, #0]
 80111fe:	9112      	str	r1, [sp, #72]	; 0x48
 8011200:	b923      	cbnz	r3, 801120c <MotionCP_Update+0x1c>
 8011202:	b01f      	add	sp, #124	; 0x7c
 8011204:	ecbd 8b06 	vpop	{d8-d10}
 8011208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801120c:	f994 3005 	ldrsb.w	r3, [r4, #5]
 8011210:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80113d0 <MotionCP_Update+0x1e0>
 8011214:	edd0 6a01 	vldr	s13, [r0, #4]
 8011218:	ed90 7a00 	vldr	s14, [r0]
 801121c:	edd0 7a02 	vldr	s15, [r0, #8]
 8011220:	89e2      	ldrh	r2, [r4, #14]
 8011222:	9217      	str	r2, [sp, #92]	; 0x5c
 8011224:	ee09 3a10 	vmov	s18, r3
 8011228:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801122c:	ee08 3a10 	vmov	s16, r3
 8011230:	f994 300b 	ldrsb.w	r3, [r4, #11]
 8011234:	ee08 3a90 	vmov	s17, r3
 8011238:	f994 3004 	ldrsb.w	r3, [r4, #4]
 801123c:	ee06 3a10 	vmov	s12, r3
 8011240:	f994 3007 	ldrsb.w	r3, [r4, #7]
 8011244:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011248:	ee04 3a90 	vmov	s9, r3
 801124c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8011250:	f994 300a 	ldrsb.w	r3, [r4, #10]
 8011254:	ee27 7a25 	vmul.f32	s14, s14, s11
 8011258:	ee05 3a10 	vmov	s10, r3
 801125c:	ee29 9a26 	vmul.f32	s18, s18, s13
 8011260:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011264:	f994 3006 	ldrsb.w	r3, [r4, #6]
 8011268:	eea7 9a06 	vfma.f32	s18, s14, s12
 801126c:	2ac8      	cmp	r2, #200	; 0xc8
 801126e:	ee06 3a10 	vmov	s12, r3
 8011272:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8011276:	f994 3009 	ldrsb.w	r3, [r4, #9]
 801127a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801127e:	ee28 8a26 	vmul.f32	s16, s16, s13
 8011282:	ee68 8aa6 	vmul.f32	s17, s17, s13
 8011286:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801128a:	ee06 3a90 	vmov	s13, r3
 801128e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8011292:	f994 300c 	ldrsb.w	r3, [r4, #12]
 8011296:	eea7 8a24 	vfma.f32	s16, s14, s9
 801129a:	eee7 8a05 	vfma.f32	s17, s14, s10
 801129e:	ee07 3a10 	vmov	s14, r3
 80112a2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80112a6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80112aa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80112ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80112b2:	eea7 9a86 	vfma.f32	s18, s15, s12
 80112b6:	eea7 8aa6 	vfma.f32	s16, s15, s13
 80112ba:	eee7 8a87 	vfma.f32	s17, s15, s14
 80112be:	d804      	bhi.n	80112ca <MotionCP_Update+0xda>
 80112c0:	4613      	mov	r3, r2
 80112c2:	3301      	adds	r3, #1
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80112c8:	81e3      	strh	r3, [r4, #14]
 80112ca:	7c23      	ldrb	r3, [r4, #16]
 80112cc:	4e41      	ldr	r6, [pc, #260]	; (80113d4 <MotionCP_Update+0x1e4>)
 80112ce:	eddf 7a42 	vldr	s15, [pc, #264]	; 80113d8 <MotionCP_Update+0x1e8>
 80112d2:	7c61      	ldrb	r1, [r4, #17]
 80112d4:	9116      	str	r1, [sp, #88]	; 0x58
 80112d6:	3301      	adds	r3, #1
 80112d8:	fba6 2603 	umull	r2, r6, r6, r3
 80112dc:	0936      	lsrs	r6, r6, #4
 80112de:	2296      	movs	r2, #150	; 0x96
 80112e0:	fb02 3616 	mls	r6, r2, r6, r3
 80112e4:	ee29 9a27 	vmul.f32	s18, s18, s15
 80112e8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80112ec:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80112f0:	7426      	strb	r6, [r4, #16]
 80112f2:	2900      	cmp	r1, #0
 80112f4:	f040 8194 	bne.w	8011620 <MotionCP_Update+0x430>
 80112f8:	7ca3      	ldrb	r3, [r4, #18]
 80112fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80112fc:	ee19 0a10 	vmov	r0, s18
 8011300:	f7ef f8f2 	bl	80004e8 <__aeabi_f2d>
 8011304:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8011308:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801130c:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8011310:	ee18 0a10 	vmov	r0, s16
 8011314:	ee28 8a08 	vmul.f32	s16, s16, s16
 8011318:	f7ef f8e6 	bl	80004e8 <__aeabi_f2d>
 801131c:	eea9 8a09 	vfma.f32	s16, s18, s18
 8011320:	1c6f      	adds	r7, r5, #1
 8011322:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8011326:	e9c7 0106 	strd	r0, r1, [r7, #24]
 801132a:	eea8 8aa8 	vfma.f32	s16, s17, s17
 801132e:	3502      	adds	r5, #2
 8011330:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8011334:	ee18 0a90 	vmov	r0, s17
 8011338:	f7ef f8d6 	bl	80004e8 <__aeabi_f2d>
 801133c:	e9c5 0106 	strd	r0, r1, [r5, #24]
 8011340:	ee18 0a10 	vmov	r0, s16
 8011344:	f7ef f8d0 	bl	80004e8 <__aeabi_f2d>
 8011348:	4b24      	ldr	r3, [pc, #144]	; (80113dc <MotionCP_Update+0x1ec>)
 801134a:	2e95      	cmp	r6, #149	; 0x95
 801134c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011350:	e9c3 0100 	strd	r0, r1, [r3]
 8011354:	d102      	bne.n	801135c <MotionCP_Update+0x16c>
 8011356:	2301      	movs	r3, #1
 8011358:	7463      	strb	r3, [r4, #17]
 801135a:	9316      	str	r3, [sp, #88]	; 0x58
 801135c:	4f20      	ldr	r7, [pc, #128]	; (80113e0 <MotionCP_Update+0x1f0>)
 801135e:	4b21      	ldr	r3, [pc, #132]	; (80113e4 <MotionCP_Update+0x1f4>)
 8011360:	4c21      	ldr	r4, [pc, #132]	; (80113e8 <MotionCP_Update+0x1f8>)
 8011362:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 8011366:	9314      	str	r3, [sp, #80]	; 0x50
 8011368:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801136c:	9210      	str	r2, [sp, #64]	; 0x40
 801136e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8011372:	920f      	str	r2, [sp, #60]	; 0x3c
 8011374:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8011378:	920c      	str	r2, [sp, #48]	; 0x30
 801137a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801137e:	9211      	str	r2, [sp, #68]	; 0x44
 8011380:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8011384:	9209      	str	r2, [sp, #36]	; 0x24
 8011386:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 801138a:	920e      	str	r2, [sp, #56]	; 0x38
 801138c:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8011390:	9208      	str	r2, [sp, #32]
 8011392:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8011396:	920b      	str	r2, [sp, #44]	; 0x2c
 8011398:	f507 7222 	add.w	r2, r7, #648	; 0x288
 801139c:	f04f 0800 	mov.w	r8, #0
 80113a0:	f04f 0900 	mov.w	r9, #0
 80113a4:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
 80113a8:	920a      	str	r2, [sp, #40]	; 0x28
 80113aa:	3309      	adds	r3, #9
 80113ac:	2201      	movs	r2, #1
 80113ae:	e9c5 0100 	strd	r0, r1, [r5]
 80113b2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80113b6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80113ba:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80113be:	e9cd 8900 	strd	r8, r9, [sp]
 80113c2:	9615      	str	r6, [sp, #84]	; 0x54
 80113c4:	469b      	mov	fp, r3
 80113c6:	4692      	mov	sl, r2
 80113c8:	e025      	b.n	8011416 <MotionCP_Update+0x226>
 80113ca:	bf00      	nop
 80113cc:	20001bb0 	.word	0x20001bb0
 80113d0:	411cf5c3 	.word	0x411cf5c3
 80113d4:	1b4e81b5 	.word	0x1b4e81b5
 80113d8:	bdd0fac6 	.word	0xbdd0fac6
 80113dc:	200029d8 	.word	0x200029d8
 80113e0:	08023fd8 	.word	0x08023fd8
 80113e4:	20002ca8 	.word	0x20002ca8
 80113e8:	20000140 	.word	0x20000140
 80113ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113ee:	3308      	adds	r3, #8
 80113f0:	9309      	str	r3, [sp, #36]	; 0x24
 80113f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113f4:	3308      	adds	r3, #8
 80113f6:	930e      	str	r3, [sp, #56]	; 0x38
 80113f8:	9b08      	ldr	r3, [sp, #32]
 80113fa:	3308      	adds	r3, #8
 80113fc:	9308      	str	r3, [sp, #32]
 80113fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011400:	3308      	adds	r3, #8
 8011402:	930b      	str	r3, [sp, #44]	; 0x2c
 8011404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011406:	f10a 0a01 	add.w	sl, sl, #1
 801140a:	3308      	adds	r3, #8
 801140c:	fa5f fa8a 	uxtb.w	sl, sl
 8011410:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011414:	930a      	str	r3, [sp, #40]	; 0x28
 8011416:	4b89      	ldr	r3, [pc, #548]	; (801163c <MotionCP_Update+0x44c>)
 8011418:	fba3 340b 	umull	r3, r4, r3, fp
 801141c:	0864      	lsrs	r4, r4, #1
 801141e:	4b88      	ldr	r3, [pc, #544]	; (8011640 <MotionCP_Update+0x450>)
 8011420:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8011424:	ebab 0404 	sub.w	r4, fp, r4
 8011428:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801142c:	463b      	mov	r3, r7
 801142e:	ed94 8b00 	vldr	d8, [r4]
 8011432:	e8f3 0102 	ldrd	r0, r1, [r3], #8
 8011436:	461f      	mov	r7, r3
 8011438:	ec53 2b18 	vmov	r2, r3, d8
 801143c:	f7ef f8ac 	bl	8000598 <__aeabi_dmul>
 8011440:	4602      	mov	r2, r0
 8011442:	460b      	mov	r3, r1
 8011444:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011448:	f7ee fef0 	bl	800022c <__adddf3>
 801144c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801144e:	4602      	mov	r2, r0
 8011450:	460b      	mov	r3, r1
 8011452:	ec43 2b17 	vmov	d7, r2, r3
 8011456:	e9cd 2300 	strd	r2, r3, [sp]
 801145a:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801145e:	ed85 7b12 	vstr	d7, [r5, #72]	; 0x48
 8011462:	ec51 0b18 	vmov	r0, r1, d8
 8011466:	9610      	str	r6, [sp, #64]	; 0x40
 8011468:	f7ef f896 	bl	8000598 <__aeabi_dmul>
 801146c:	4602      	mov	r2, r0
 801146e:	460b      	mov	r3, r1
 8011470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011474:	f7ee feda 	bl	800022c <__adddf3>
 8011478:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801147a:	4602      	mov	r2, r0
 801147c:	460b      	mov	r3, r1
 801147e:	ec43 2b17 	vmov	d7, r2, r3
 8011482:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011486:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801148a:	ed85 7b24 	vstr	d7, [r5, #144]	; 0x90
 801148e:	ec51 0b18 	vmov	r0, r1, d8
 8011492:	960f      	str	r6, [sp, #60]	; 0x3c
 8011494:	f7ef f880 	bl	8000598 <__aeabi_dmul>
 8011498:	4602      	mov	r2, r0
 801149a:	460b      	mov	r3, r1
 801149c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80114a0:	f7ee fec4 	bl	800022c <__adddf3>
 80114a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80114a6:	4602      	mov	r2, r0
 80114a8:	460b      	mov	r3, r1
 80114aa:	ec43 2b17 	vmov	d7, r2, r3
 80114ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80114b2:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80114b6:	ed85 7b36 	vstr	d7, [r5, #216]	; 0xd8
 80114ba:	ec51 0b18 	vmov	r0, r1, d8
 80114be:	960c      	str	r6, [sp, #48]	; 0x30
 80114c0:	f7ef f86a 	bl	8000598 <__aeabi_dmul>
 80114c4:	4602      	mov	r2, r0
 80114c6:	460b      	mov	r3, r1
 80114c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80114cc:	f7ee feae 	bl	800022c <__adddf3>
 80114d0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80114d2:	4602      	mov	r2, r0
 80114d4:	460b      	mov	r3, r1
 80114d6:	ec43 2b17 	vmov	d7, r2, r3
 80114da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80114de:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80114e2:	ed85 7b48 	vstr	d7, [r5, #288]	; 0x120
 80114e6:	ec51 0b18 	vmov	r0, r1, d8
 80114ea:	9611      	str	r6, [sp, #68]	; 0x44
 80114ec:	f7ef f854 	bl	8000598 <__aeabi_dmul>
 80114f0:	4602      	mov	r2, r0
 80114f2:	460b      	mov	r3, r1
 80114f4:	4640      	mov	r0, r8
 80114f6:	4649      	mov	r1, r9
 80114f8:	f7ee fe98 	bl	800022c <__adddf3>
 80114fc:	f1ba 0f01 	cmp.w	sl, #1
 8011500:	4680      	mov	r8, r0
 8011502:	4689      	mov	r9, r1
 8011504:	e9c5 895a 	strd	r8, r9, [r5, #360]	; 0x168
 8011508:	f43f af70 	beq.w	80113ec <MotionCP_Update+0x1fc>
 801150c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801150e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 8011512:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011516:	f7ef f83f 	bl	8000598 <__aeabi_dmul>
 801151a:	4602      	mov	r2, r0
 801151c:	460b      	mov	r3, r1
 801151e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011522:	f7ee fe81 	bl	8000228 <__aeabi_dsub>
 8011526:	e9cd 0100 	strd	r0, r1, [sp]
 801152a:	e9c5 0112 	strd	r0, r1, [r5, #72]	; 0x48
 801152e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011530:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
 8011534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011538:	f7ef f82e 	bl	8000598 <__aeabi_dmul>
 801153c:	4602      	mov	r2, r0
 801153e:	460b      	mov	r3, r1
 8011540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011544:	f7ee fe70 	bl	8000228 <__aeabi_dsub>
 8011548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801154c:	e9c5 0124 	strd	r0, r1, [r5, #144]	; 0x90
 8011550:	9908      	ldr	r1, [sp, #32]
 8011552:	e9d4 2336 	ldrd	r2, r3, [r4, #216]	; 0xd8
 8011556:	e9d1 0100 	ldrd	r0, r1, [r1]
 801155a:	f7ef f81d 	bl	8000598 <__aeabi_dmul>
 801155e:	4602      	mov	r2, r0
 8011560:	460b      	mov	r3, r1
 8011562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011566:	f7ee fe5f 	bl	8000228 <__aeabi_dsub>
 801156a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801156e:	e9c5 0136 	strd	r0, r1, [r5, #216]	; 0xd8
 8011572:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011574:	e9d4 2348 	ldrd	r2, r3, [r4, #288]	; 0x120
 8011578:	e9d1 0100 	ldrd	r0, r1, [r1]
 801157c:	f7ef f80c 	bl	8000598 <__aeabi_dmul>
 8011580:	4602      	mov	r2, r0
 8011582:	460b      	mov	r3, r1
 8011584:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011588:	f7ee fe4e 	bl	8000228 <__aeabi_dsub>
 801158c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011590:	e9c5 0148 	strd	r0, r1, [r5, #288]	; 0x120
 8011594:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011596:	e9d4 235a 	ldrd	r2, r3, [r4, #360]	; 0x168
 801159a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801159e:	f7ee fffb 	bl	8000598 <__aeabi_dmul>
 80115a2:	4602      	mov	r2, r0
 80115a4:	460b      	mov	r3, r1
 80115a6:	4640      	mov	r0, r8
 80115a8:	4649      	mov	r1, r9
 80115aa:	f7ee fe3d 	bl	8000228 <__aeabi_dsub>
 80115ae:	f1ba 0f09 	cmp.w	sl, #9
 80115b2:	4680      	mov	r8, r0
 80115b4:	4689      	mov	r9, r1
 80115b6:	e9c5 895a 	strd	r8, r9, [r5, #360]	; 0x168
 80115ba:	f47f af17 	bne.w	80113ec <MotionCP_Update+0x1fc>
 80115be:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 80115c2:	4b1e      	ldr	r3, [pc, #120]	; (801163c <MotionCP_Update+0x44c>)
 80115c4:	4c1f      	ldr	r4, [pc, #124]	; (8011644 <MotionCP_Update+0x454>)
 80115c6:	3201      	adds	r2, #1
 80115c8:	fba3 1302 	umull	r1, r3, r3, r2
 80115cc:	ed9d 7b00 	vldr	d7, [sp]
 80115d0:	085b      	lsrs	r3, r3, #1
 80115d2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80115d6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80115da:	1ad3      	subs	r3, r2, r3
 80115dc:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80115e0:	ed82 7b00 	vstr	d7, [r2]
 80115e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80115e8:	ed82 7b02 	vstr	d7, [r2, #8]
 80115ec:	ed9d 7b04 	vldr	d7, [sp, #16]
 80115f0:	4915      	ldr	r1, [pc, #84]	; (8011648 <MotionCP_Update+0x458>)
 80115f2:	ed82 7b04 	vstr	d7, [r2, #16]
 80115f6:	f881 31e0 	strb.w	r3, [r1, #480]	; 0x1e0
 80115fa:	ed9d 7b06 	vldr	d7, [sp, #24]
 80115fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011600:	2b32      	cmp	r3, #50	; 0x32
 8011602:	ed82 7b06 	vstr	d7, [r2, #24]
 8011606:	e9c2 8908 	strd	r8, r9, [r2, #32]
 801160a:	d021      	beq.n	8011650 <MotionCP_Update+0x460>
 801160c:	4b0e      	ldr	r3, [pc, #56]	; (8011648 <MotionCP_Update+0x458>)
 801160e:	f893 71e1 	ldrb.w	r7, [r3, #481]	; 0x1e1
 8011612:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011614:	701f      	strb	r7, [r3, #0]
 8011616:	b01f      	add	sp, #124	; 0x7c
 8011618:	ecbd 8b06 	vpop	{d8-d10}
 801161c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011620:	7ca2      	ldrb	r2, [r4, #18]
 8011622:	4b0a      	ldr	r3, [pc, #40]	; (801164c <MotionCP_Update+0x45c>)
 8011624:	fba3 1302 	umull	r1, r3, r3, r2
 8011628:	091b      	lsrs	r3, r3, #4
 801162a:	2132      	movs	r1, #50	; 0x32
 801162c:	fb01 2313 	mls	r3, r1, r3, r2
 8011630:	3301      	adds	r3, #1
 8011632:	b2db      	uxtb	r3, r3
 8011634:	9313      	str	r3, [sp, #76]	; 0x4c
 8011636:	74a3      	strb	r3, [r4, #18]
 8011638:	e660      	b.n	80112fc <MotionCP_Update+0x10c>
 801163a:	bf00      	nop
 801163c:	38e38e39 	.word	0x38e38e39
 8011640:	20000140 	.word	0x20000140
 8011644:	20002eb0 	.word	0x20002eb0
 8011648:	20002ca8 	.word	0x20002ca8
 801164c:	51eb851f 	.word	0x51eb851f
 8011650:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011652:	2b00      	cmp	r3, #0
 8011654:	d0da      	beq.n	801160c <MotionCP_Update+0x41c>
 8011656:	4dd8      	ldr	r5, [pc, #864]	; (80119b8 <MotionCP_Update+0x7c8>)
 8011658:	f8df b380 	ldr.w	fp, [pc, #896]	; 80119dc <MotionCP_Update+0x7ec>
 801165c:	f505 6361 	add.w	r3, r5, #3600	; 0xe10
 8011660:	f04f 0800 	mov.w	r8, #0
 8011664:	930e      	str	r3, [sp, #56]	; 0x38
 8011666:	465b      	mov	r3, fp
 8011668:	f8cd 8020 	str.w	r8, [sp, #32]
 801166c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8011670:	f8cd 8000 	str.w	r8, [sp]
 8011674:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8011678:	f8cd 8008 	str.w	r8, [sp, #8]
 801167c:	46c2      	mov	sl, r8
 801167e:	f8cd 8010 	str.w	r8, [sp, #16]
 8011682:	f8cd 8018 	str.w	r8, [sp, #24]
 8011686:	46c1      	mov	r9, r8
 8011688:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801168c:	46c3      	mov	fp, r8
 801168e:	4698      	mov	r8, r3
 8011690:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011694:	4610      	mov	r0, r2
 8011696:	4619      	mov	r1, r3
 8011698:	f7ee ff7e 	bl	8000598 <__aeabi_dmul>
 801169c:	4606      	mov	r6, r0
 801169e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116a0:	460f      	mov	r7, r1
 80116a2:	f7ee ff21 	bl	80004e8 <__aeabi_f2d>
 80116a6:	4602      	mov	r2, r0
 80116a8:	460b      	mov	r3, r1
 80116aa:	4630      	mov	r0, r6
 80116ac:	4639      	mov	r1, r7
 80116ae:	f7ee fdbd 	bl	800022c <__adddf3>
 80116b2:	f7ef fa69 	bl	8000b88 <__aeabi_d2f>
 80116b6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80116ba:	4606      	mov	r6, r0
 80116bc:	4619      	mov	r1, r3
 80116be:	4610      	mov	r0, r2
 80116c0:	9609      	str	r6, [sp, #36]	; 0x24
 80116c2:	f7ee ff69 	bl	8000598 <__aeabi_dmul>
 80116c6:	4606      	mov	r6, r0
 80116c8:	9800      	ldr	r0, [sp, #0]
 80116ca:	460f      	mov	r7, r1
 80116cc:	f7ee ff0c 	bl	80004e8 <__aeabi_f2d>
 80116d0:	4602      	mov	r2, r0
 80116d2:	460b      	mov	r3, r1
 80116d4:	4630      	mov	r0, r6
 80116d6:	4639      	mov	r1, r7
 80116d8:	f7ee fda8 	bl	800022c <__adddf3>
 80116dc:	f7ef fa54 	bl	8000b88 <__aeabi_d2f>
 80116e0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80116e4:	4606      	mov	r6, r0
 80116e6:	4619      	mov	r1, r3
 80116e8:	4610      	mov	r0, r2
 80116ea:	9600      	str	r6, [sp, #0]
 80116ec:	f7ee ff54 	bl	8000598 <__aeabi_dmul>
 80116f0:	4606      	mov	r6, r0
 80116f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80116f4:	460f      	mov	r7, r1
 80116f6:	f7ee fef7 	bl	80004e8 <__aeabi_f2d>
 80116fa:	4602      	mov	r2, r0
 80116fc:	460b      	mov	r3, r1
 80116fe:	4630      	mov	r0, r6
 8011700:	4639      	mov	r1, r7
 8011702:	f7ee fd93 	bl	800022c <__adddf3>
 8011706:	f7ef fa3f 	bl	8000b88 <__aeabi_d2f>
 801170a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801170e:	4606      	mov	r6, r0
 8011710:	4619      	mov	r1, r3
 8011712:	4610      	mov	r0, r2
 8011714:	960a      	str	r6, [sp, #40]	; 0x28
 8011716:	f7ee ff3f 	bl	8000598 <__aeabi_dmul>
 801171a:	4606      	mov	r6, r0
 801171c:	9808      	ldr	r0, [sp, #32]
 801171e:	460f      	mov	r7, r1
 8011720:	f7ee fee2 	bl	80004e8 <__aeabi_f2d>
 8011724:	4602      	mov	r2, r0
 8011726:	460b      	mov	r3, r1
 8011728:	4630      	mov	r0, r6
 801172a:	4639      	mov	r1, r7
 801172c:	f7ee fd7e 	bl	800022c <__adddf3>
 8011730:	f7ef fa2a 	bl	8000b88 <__aeabi_d2f>
 8011734:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8011738:	4606      	mov	r6, r0
 801173a:	4619      	mov	r1, r3
 801173c:	4610      	mov	r0, r2
 801173e:	9608      	str	r6, [sp, #32]
 8011740:	f7ee ff2a 	bl	8000598 <__aeabi_dmul>
 8011744:	4606      	mov	r6, r0
 8011746:	4650      	mov	r0, sl
 8011748:	460f      	mov	r7, r1
 801174a:	f7ee fecd 	bl	80004e8 <__aeabi_f2d>
 801174e:	4602      	mov	r2, r0
 8011750:	460b      	mov	r3, r1
 8011752:	4630      	mov	r0, r6
 8011754:	4639      	mov	r1, r7
 8011756:	f7ee fd69 	bl	800022c <__adddf3>
 801175a:	f7ef fa15 	bl	8000b88 <__aeabi_d2f>
 801175e:	4682      	mov	sl, r0
 8011760:	9804      	ldr	r0, [sp, #16]
 8011762:	f7ee fec1 	bl	80004e8 <__aeabi_f2d>
 8011766:	e9d5 2300 	ldrd	r2, r3, [r5]
 801176a:	f7ee fd5f 	bl	800022c <__adddf3>
 801176e:	f7ef fa0b 	bl	8000b88 <__aeabi_d2f>
 8011772:	4603      	mov	r3, r0
 8011774:	4658      	mov	r0, fp
 8011776:	9304      	str	r3, [sp, #16]
 8011778:	f7ee feb6 	bl	80004e8 <__aeabi_f2d>
 801177c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8011780:	f7ee fd54 	bl	800022c <__adddf3>
 8011784:	f7ef fa00 	bl	8000b88 <__aeabi_d2f>
 8011788:	4683      	mov	fp, r0
 801178a:	9802      	ldr	r0, [sp, #8]
 801178c:	f7ee feac 	bl	80004e8 <__aeabi_f2d>
 8011790:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8011794:	f7ee fd4a 	bl	800022c <__adddf3>
 8011798:	f7ef f9f6 	bl	8000b88 <__aeabi_d2f>
 801179c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801179e:	e8f2 6702 	ldrd	r6, r7, [r2], #8
 80117a2:	4603      	mov	r3, r0
 80117a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80117a6:	920e      	str	r2, [sp, #56]	; 0x38
 80117a8:	9302      	str	r3, [sp, #8]
 80117aa:	f7ee fe9d 	bl	80004e8 <__aeabi_f2d>
 80117ae:	4632      	mov	r2, r6
 80117b0:	463b      	mov	r3, r7
 80117b2:	f7ee fd3b 	bl	800022c <__adddf3>
 80117b6:	f7ef f9e7 	bl	8000b88 <__aeabi_d2f>
 80117ba:	4632      	mov	r2, r6
 80117bc:	4684      	mov	ip, r0
 80117be:	463b      	mov	r3, r7
 80117c0:	4630      	mov	r0, r6
 80117c2:	4639      	mov	r1, r7
 80117c4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80117c8:	f7ee fee6 	bl	8000598 <__aeabi_dmul>
 80117cc:	4602      	mov	r2, r0
 80117ce:	460b      	mov	r3, r1
 80117d0:	4648      	mov	r0, r9
 80117d2:	ec43 2b18 	vmov	d8, r2, r3
 80117d6:	f7ee fe87 	bl	80004e8 <__aeabi_f2d>
 80117da:	4602      	mov	r2, r0
 80117dc:	460b      	mov	r3, r1
 80117de:	ec51 0b18 	vmov	r0, r1, d8
 80117e2:	f7ee fd23 	bl	800022c <__adddf3>
 80117e6:	f7ef f9cf 	bl	8000b88 <__aeabi_d2f>
 80117ea:	4681      	mov	r9, r0
 80117ec:	9806      	ldr	r0, [sp, #24]
 80117ee:	f7ee fe7b 	bl	80004e8 <__aeabi_f2d>
 80117f2:	4632      	mov	r2, r6
 80117f4:	463b      	mov	r3, r7
 80117f6:	f7ef f941 	bl	8000a7c <__aeabi_dcmplt>
 80117fa:	b120      	cbz	r0, 8011806 <MotionCP_Update+0x616>
 80117fc:	4630      	mov	r0, r6
 80117fe:	4639      	mov	r1, r7
 8011800:	f7ef f9c2 	bl	8000b88 <__aeabi_d2f>
 8011804:	9006      	str	r0, [sp, #24]
 8011806:	4640      	mov	r0, r8
 8011808:	f7ee fe6e 	bl	80004e8 <__aeabi_f2d>
 801180c:	4632      	mov	r2, r6
 801180e:	463b      	mov	r3, r7
 8011810:	f7ef f952 	bl	8000ab8 <__aeabi_dcmpgt>
 8011814:	b120      	cbz	r0, 8011820 <MotionCP_Update+0x630>
 8011816:	4630      	mov	r0, r6
 8011818:	4639      	mov	r1, r7
 801181a:	f7ef f9b5 	bl	8000b88 <__aeabi_d2f>
 801181e:	4680      	mov	r8, r0
 8011820:	4b66      	ldr	r3, [pc, #408]	; (80119bc <MotionCP_Update+0x7cc>)
 8011822:	3428      	adds	r4, #40	; 0x28
 8011824:	42a3      	cmp	r3, r4
 8011826:	f105 0518 	add.w	r5, r5, #24
 801182a:	f47f af31 	bne.w	8011690 <MotionCP_Update+0x4a0>
 801182e:	eddd 7a00 	vldr	s15, [sp]
 8011832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011836:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801183a:	4643      	mov	r3, r8
 801183c:	46d0      	mov	r8, sl
 801183e:	46da      	mov	sl, fp
 8011840:	469b      	mov	fp, r3
 8011842:	ed9d 7a00 	vldr	s14, [sp]
 8011846:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801184e:	f000 80e4 	beq.w	8011a1a <MotionCP_Update+0x82a>
 8011852:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8011856:	ee27 6a27 	vmul.f32	s12, s14, s15
 801185a:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 801185e:	ed8d 6a19 	vstr	s12, [sp, #100]	; 0x64
 8011862:	ee67 6a27 	vmul.f32	s13, s14, s15
 8011866:	ee05 8a90 	vmov	s11, r8
 801186a:	ed9d 7a08 	vldr	s14, [sp, #32]
 801186e:	edcd 6a1b 	vstr	s13, [sp, #108]	; 0x6c
 8011872:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011876:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801187a:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
 801187e:	edcd 7a1d 	vstr	s15, [sp, #116]	; 0x74
 8011882:	ed9f aa4f 	vldr	s20, [pc, #316]	; 80119c0 <MotionCP_Update+0x7d0>
 8011886:	eddd 7a04 	vldr	s15, [sp, #16]
 801188a:	ee67 8a8a 	vmul.f32	s17, s15, s20
 801188e:	eddd 7a02 	vldr	s15, [sp, #8]
 8011892:	ee07 ba10 	vmov	s14, fp
 8011896:	ee27 8a8a 	vmul.f32	s16, s15, s20
 801189a:	eddd 7a06 	vldr	s15, [sp, #24]
 801189e:	ee37 9ac7 	vsub.f32	s18, s15, s14
 80118a2:	eec8 7a88 	vdiv.f32	s15, s17, s16
 80118a6:	ee17 0a90 	vmov	r0, s15
 80118aa:	f7ee fe1d 	bl	80004e8 <__aeabi_f2d>
 80118ae:	f00f fb13 	bl	8020ed8 <atan>
 80118b2:	a33f      	add	r3, pc, #252	; (adr r3, 80119b0 <MotionCP_Update+0x7c0>)
 80118b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b8:	f7ee fe6e 	bl	8000598 <__aeabi_dmul>
 80118bc:	f7ef f964 	bl	8000b88 <__aeabi_d2f>
 80118c0:	ee07 aa90 	vmov	s15, sl
 80118c4:	ee67 7a8a 	vmul.f32	s15, s15, s20
 80118c8:	4603      	mov	r3, r0
 80118ca:	ee17 0a90 	vmov	r0, s15
 80118ce:	ee09 3a90 	vmov	s19, r3
 80118d2:	f7ee fe09 	bl	80004e8 <__aeabi_f2d>
 80118d6:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80118da:	4606      	mov	r6, r0
 80118dc:	eee8 7a08 	vfma.f32	s15, s16, s16
 80118e0:	460f      	mov	r7, r1
 80118e2:	ee17 0a90 	vmov	r0, s15
 80118e6:	f7ee fdff 	bl	80004e8 <__aeabi_f2d>
 80118ea:	f00f ff6d 	bl	80217c8 <sqrt>
 80118ee:	4602      	mov	r2, r0
 80118f0:	460b      	mov	r3, r1
 80118f2:	4630      	mov	r0, r6
 80118f4:	4639      	mov	r1, r7
 80118f6:	f7ee ff79 	bl	80007ec <__aeabi_ddiv>
 80118fa:	f00f faed 	bl	8020ed8 <atan>
 80118fe:	a32c      	add	r3, pc, #176	; (adr r3, 80119b0 <MotionCP_Update+0x7c0>)
 8011900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011904:	f7ee fe48 	bl	8000598 <__aeabi_dmul>
 8011908:	f7ef f93e 	bl	8000b88 <__aeabi_d2f>
 801190c:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80119c4 <MotionCP_Update+0x7d4>
 8011910:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8011914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011918:	ee0a 0a90 	vmov	s21, r0
 801191c:	f200 8156 	bhi.w	8011bcc <MotionCP_Update+0x9dc>
 8011920:	eddf 7a29 	vldr	s15, [pc, #164]	; 80119c8 <MotionCP_Update+0x7d8>
 8011924:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8011928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801192c:	f200 8206 	bhi.w	8011d3c <MotionCP_Update+0xb4c>
 8011930:	eddf 7a26 	vldr	s15, [pc, #152]	; 80119cc <MotionCP_Update+0x7dc>
 8011934:	eef0 9ae9 	vabs.f32	s19, s19
 8011938:	eef4 9ae7 	vcmpe.f32	s19, s15
 801193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011940:	f340 8142 	ble.w	8011bc8 <MotionCP_Update+0x9d8>
 8011944:	eddf 7a22 	vldr	s15, [pc, #136]	; 80119d0 <MotionCP_Update+0x7e0>
 8011948:	eef4 9ae7 	vcmpe.f32	s19, s15
 801194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011950:	f140 813a 	bpl.w	8011bc8 <MotionCP_Update+0x9d8>
 8011954:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80119d4 <MotionCP_Update+0x7e4>
 8011958:	eef4 aae7 	vcmpe.f32	s21, s15
 801195c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011960:	f340 8132 	ble.w	8011bc8 <MotionCP_Update+0x9d8>
 8011964:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8011968:	eef4 aae7 	vcmpe.f32	s21, s15
 801196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011970:	bf4c      	ite	mi
 8011972:	2703      	movmi	r7, #3
 8011974:	2701      	movpl	r7, #1
 8011976:	4a18      	ldr	r2, [pc, #96]	; (80119d8 <MotionCP_Update+0x7e8>)
 8011978:	e9d2 3679 	ldrd	r3, r6, [r2, #484]	; 0x1e4
 801197c:	e9d2 547b 	ldrd	r5, r4, [r2, #492]	; 0x1ec
 8011980:	e9d2 017d 	ldrd	r0, r1, [r2, #500]	; 0x1f4
 8011984:	f8d2 21fc 	ldr.w	r2, [r2, #508]	; 0x1fc
 8011988:	0052      	lsls	r2, r2, #1
 801198a:	f002 0e7e 	and.w	lr, r2, #126	; 0x7e
 801198e:	005b      	lsls	r3, r3, #1
 8011990:	4a11      	ldr	r2, [pc, #68]	; (80119d8 <MotionCP_Update+0x7e8>)
 8011992:	0076      	lsls	r6, r6, #1
 8011994:	006d      	lsls	r5, r5, #1
 8011996:	0064      	lsls	r4, r4, #1
 8011998:	0040      	lsls	r0, r0, #1
 801199a:	0049      	lsls	r1, r1, #1
 801199c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80119a0:	f006 067e 	and.w	r6, r6, #126	; 0x7e
 80119a4:	f005 057e 	and.w	r5, r5, #126	; 0x7e
 80119a8:	e01a      	b.n	80119e0 <MotionCP_Update+0x7f0>
 80119aa:	bf00      	nop
 80119ac:	f3af 8000 	nop.w
 80119b0:	1a63c1f5 	.word	0x1a63c1f5
 80119b4:	404ca5dc 	.word	0x404ca5dc
 80119b8:	20001bc8 	.word	0x20001bc8
 80119bc:	20004620 	.word	0x20004620
 80119c0:	3bda740e 	.word	0x3bda740e
 80119c4:	3f76d634 	.word	0x3f76d634
 80119c8:	3d23d70a 	.word	0x3d23d70a
 80119cc:	42480000 	.word	0x42480000
 80119d0:	42b40000 	.word	0x42b40000
 80119d4:	c2700000 	.word	0xc2700000
 80119d8:	20002ca8 	.word	0x20002ca8
 80119dc:	41200000 	.word	0x41200000
 80119e0:	f004 047e 	and.w	r4, r4, #126	; 0x7e
 80119e4:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 80119e8:	f001 017e 	and.w	r1, r1, #126	; 0x7e
 80119ec:	f107 3cff 	add.w	ip, r7, #4294967295
 80119f0:	e9c2 3679 	strd	r3, r6, [r2, #484]	; 0x1e4
 80119f4:	e9c2 547b 	strd	r5, r4, [r2, #492]	; 0x1ec
 80119f8:	e9c2 017d 	strd	r0, r1, [r2, #500]	; 0x1f4
 80119fc:	f8c2 e1fc 	str.w	lr, [r2, #508]	; 0x1fc
 8011a00:	f1bc 0f06 	cmp.w	ip, #6
 8011a04:	f200 80c0 	bhi.w	8011b88 <MotionCP_Update+0x998>
 8011a08:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8011a0c:	00c7000d 	.word	0x00c7000d
 8011a10:	00cc00d1 	.word	0x00cc00d1
 8011a14:	00ba00d6 	.word	0x00ba00d6
 8011a18:	00c1      	.short	0x00c1
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8011a20:	931b      	str	r3, [sp, #108]	; 0x6c
 8011a22:	9319      	str	r3, [sp, #100]	; 0x64
 8011a24:	e72d      	b.n	8011882 <MotionCP_Update+0x692>
 8011a26:	4aa6      	ldr	r2, [pc, #664]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011a28:	3301      	adds	r3, #1
 8011a2a:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
 8011a2e:	07da      	lsls	r2, r3, #31
 8011a30:	bf48      	it	mi
 8011a32:	46bc      	movmi	ip, r7
 8011a34:	f140 80a8 	bpl.w	8011b88 <MotionCP_Update+0x998>
 8011a38:	079a      	lsls	r2, r3, #30
 8011a3a:	bf44      	itt	mi
 8011a3c:	f10c 0c01 	addmi.w	ip, ip, #1
 8011a40:	fa5f fc8c 	uxtbmi.w	ip, ip
 8011a44:	075a      	lsls	r2, r3, #29
 8011a46:	bf44      	itt	mi
 8011a48:	f10c 0c01 	addmi.w	ip, ip, #1
 8011a4c:	fa5f fc8c 	uxtbmi.w	ip, ip
 8011a50:	071a      	lsls	r2, r3, #28
 8011a52:	bf44      	itt	mi
 8011a54:	f10c 0c01 	addmi.w	ip, ip, #1
 8011a58:	fa5f fc8c 	uxtbmi.w	ip, ip
 8011a5c:	06db      	lsls	r3, r3, #27
 8011a5e:	d506      	bpl.n	8011a6e <MotionCP_Update+0x87e>
 8011a60:	f1bc 0f04 	cmp.w	ip, #4
 8011a64:	d103      	bne.n	8011a6e <MotionCP_Update+0x87e>
 8011a66:	4a96      	ldr	r2, [pc, #600]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011a68:	2301      	movs	r3, #1
 8011a6a:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
 8011a6e:	f006 0301 	and.w	r3, r6, #1
 8011a72:	07b2      	lsls	r2, r6, #30
 8011a74:	bf48      	it	mi
 8011a76:	3301      	addmi	r3, #1
 8011a78:	0772      	lsls	r2, r6, #29
 8011a7a:	bf44      	itt	mi
 8011a7c:	3301      	addmi	r3, #1
 8011a7e:	b2db      	uxtbmi	r3, r3
 8011a80:	0732      	lsls	r2, r6, #28
 8011a82:	bf44      	itt	mi
 8011a84:	3301      	addmi	r3, #1
 8011a86:	b2db      	uxtbmi	r3, r3
 8011a88:	06f2      	lsls	r2, r6, #27
 8011a8a:	d505      	bpl.n	8011a98 <MotionCP_Update+0x8a8>
 8011a8c:	2b04      	cmp	r3, #4
 8011a8e:	d103      	bne.n	8011a98 <MotionCP_Update+0x8a8>
 8011a90:	4a8b      	ldr	r2, [pc, #556]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011a92:	2302      	movs	r3, #2
 8011a94:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
 8011a98:	f005 0301 	and.w	r3, r5, #1
 8011a9c:	07ae      	lsls	r6, r5, #30
 8011a9e:	bf48      	it	mi
 8011aa0:	3301      	addmi	r3, #1
 8011aa2:	076a      	lsls	r2, r5, #29
 8011aa4:	bf44      	itt	mi
 8011aa6:	3301      	addmi	r3, #1
 8011aa8:	b2db      	uxtbmi	r3, r3
 8011aaa:	072e      	lsls	r6, r5, #28
 8011aac:	bf44      	itt	mi
 8011aae:	3301      	addmi	r3, #1
 8011ab0:	b2db      	uxtbmi	r3, r3
 8011ab2:	06ea      	lsls	r2, r5, #27
 8011ab4:	d505      	bpl.n	8011ac2 <MotionCP_Update+0x8d2>
 8011ab6:	2b04      	cmp	r3, #4
 8011ab8:	d103      	bne.n	8011ac2 <MotionCP_Update+0x8d2>
 8011aba:	4a81      	ldr	r2, [pc, #516]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011abc:	2303      	movs	r3, #3
 8011abe:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
 8011ac2:	f004 0301 	and.w	r3, r4, #1
 8011ac6:	07a6      	lsls	r6, r4, #30
 8011ac8:	bf48      	it	mi
 8011aca:	3301      	addmi	r3, #1
 8011acc:	0765      	lsls	r5, r4, #29
 8011ace:	bf44      	itt	mi
 8011ad0:	3301      	addmi	r3, #1
 8011ad2:	b2db      	uxtbmi	r3, r3
 8011ad4:	0722      	lsls	r2, r4, #28
 8011ad6:	bf44      	itt	mi
 8011ad8:	3301      	addmi	r3, #1
 8011ada:	b2db      	uxtbmi	r3, r3
 8011adc:	06e6      	lsls	r6, r4, #27
 8011ade:	d504      	bpl.n	8011aea <MotionCP_Update+0x8fa>
 8011ae0:	2b04      	cmp	r3, #4
 8011ae2:	bf04      	itt	eq
 8011ae4:	4a76      	ldreq	r2, [pc, #472]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011ae6:	f882 3200 	strbeq.w	r3, [r2, #512]	; 0x200
 8011aea:	f000 0301 	and.w	r3, r0, #1
 8011aee:	0785      	lsls	r5, r0, #30
 8011af0:	bf48      	it	mi
 8011af2:	3301      	addmi	r3, #1
 8011af4:	0744      	lsls	r4, r0, #29
 8011af6:	bf44      	itt	mi
 8011af8:	3301      	addmi	r3, #1
 8011afa:	b2db      	uxtbmi	r3, r3
 8011afc:	0702      	lsls	r2, r0, #28
 8011afe:	bf44      	itt	mi
 8011b00:	3301      	addmi	r3, #1
 8011b02:	b2db      	uxtbmi	r3, r3
 8011b04:	06c6      	lsls	r6, r0, #27
 8011b06:	d505      	bpl.n	8011b14 <MotionCP_Update+0x924>
 8011b08:	2b04      	cmp	r3, #4
 8011b0a:	d103      	bne.n	8011b14 <MotionCP_Update+0x924>
 8011b0c:	4a6c      	ldr	r2, [pc, #432]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011b0e:	2305      	movs	r3, #5
 8011b10:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
 8011b14:	f001 0301 	and.w	r3, r1, #1
 8011b18:	078d      	lsls	r5, r1, #30
 8011b1a:	bf48      	it	mi
 8011b1c:	3301      	addmi	r3, #1
 8011b1e:	074c      	lsls	r4, r1, #29
 8011b20:	bf44      	itt	mi
 8011b22:	3301      	addmi	r3, #1
 8011b24:	b2db      	uxtbmi	r3, r3
 8011b26:	0708      	lsls	r0, r1, #28
 8011b28:	bf44      	itt	mi
 8011b2a:	3301      	addmi	r3, #1
 8011b2c:	b2db      	uxtbmi	r3, r3
 8011b2e:	06ca      	lsls	r2, r1, #27
 8011b30:	d505      	bpl.n	8011b3e <MotionCP_Update+0x94e>
 8011b32:	2b04      	cmp	r3, #4
 8011b34:	d103      	bne.n	8011b3e <MotionCP_Update+0x94e>
 8011b36:	4a62      	ldr	r2, [pc, #392]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011b38:	2306      	movs	r3, #6
 8011b3a:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
 8011b3e:	f00e 0301 	and.w	r3, lr, #1
 8011b42:	f01e 0f02 	tst.w	lr, #2
 8011b46:	bf18      	it	ne
 8011b48:	3301      	addne	r3, #1
 8011b4a:	f01e 0f04 	tst.w	lr, #4
 8011b4e:	bf1c      	itt	ne
 8011b50:	3301      	addne	r3, #1
 8011b52:	b2db      	uxtbne	r3, r3
 8011b54:	f01e 0f08 	tst.w	lr, #8
 8011b58:	bf1c      	itt	ne
 8011b5a:	3301      	addne	r3, #1
 8011b5c:	b2db      	uxtbne	r3, r3
 8011b5e:	f01e 0f10 	tst.w	lr, #16
 8011b62:	d005      	beq.n	8011b70 <MotionCP_Update+0x980>
 8011b64:	2b04      	cmp	r3, #4
 8011b66:	d103      	bne.n	8011b70 <MotionCP_Update+0x980>
 8011b68:	4a55      	ldr	r2, [pc, #340]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011b6a:	2307      	movs	r3, #7
 8011b6c:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
 8011b70:	4b53      	ldr	r3, [pc, #332]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011b72:	b337      	cbz	r7, 8011bc2 <MotionCP_Update+0x9d2>
 8011b74:	f893 7200 	ldrb.w	r7, [r3, #512]	; 0x200
 8011b78:	4b51      	ldr	r3, [pc, #324]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011b7a:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
 8011b7e:	e548      	b.n	8011612 <MotionCP_Update+0x422>
 8011b80:	4a4f      	ldr	r2, [pc, #316]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011b82:	3101      	adds	r1, #1
 8011b84:	f8c2 11f8 	str.w	r1, [r2, #504]	; 0x1f8
 8011b88:	f04f 0c00 	mov.w	ip, #0
 8011b8c:	e754      	b.n	8011a38 <MotionCP_Update+0x848>
 8011b8e:	4a4c      	ldr	r2, [pc, #304]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011b90:	f10e 0e01 	add.w	lr, lr, #1
 8011b94:	f8c2 e1fc 	str.w	lr, [r2, #508]	; 0x1fc
 8011b98:	e7f6      	b.n	8011b88 <MotionCP_Update+0x998>
 8011b9a:	4a49      	ldr	r2, [pc, #292]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011b9c:	3601      	adds	r6, #1
 8011b9e:	f8c2 61e8 	str.w	r6, [r2, #488]	; 0x1e8
 8011ba2:	e7f1      	b.n	8011b88 <MotionCP_Update+0x998>
 8011ba4:	4a46      	ldr	r2, [pc, #280]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011ba6:	3401      	adds	r4, #1
 8011ba8:	f8c2 41f0 	str.w	r4, [r2, #496]	; 0x1f0
 8011bac:	e7ec      	b.n	8011b88 <MotionCP_Update+0x998>
 8011bae:	4a44      	ldr	r2, [pc, #272]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011bb0:	3501      	adds	r5, #1
 8011bb2:	f8c2 51ec 	str.w	r5, [r2, #492]	; 0x1ec
 8011bb6:	e7e7      	b.n	8011b88 <MotionCP_Update+0x998>
 8011bb8:	4a41      	ldr	r2, [pc, #260]	; (8011cc0 <MotionCP_Update+0xad0>)
 8011bba:	3001      	adds	r0, #1
 8011bbc:	f8c2 01f4 	str.w	r0, [r2, #500]	; 0x1f4
 8011bc0:	e7e2      	b.n	8011b88 <MotionCP_Update+0x998>
 8011bc2:	f883 7200 	strb.w	r7, [r3, #512]	; 0x200
 8011bc6:	e7d7      	b.n	8011b78 <MotionCP_Update+0x988>
 8011bc8:	2701      	movs	r7, #1
 8011bca:	e6d4      	b.n	8011976 <MotionCP_Update+0x786>
 8011bcc:	ee18 0a10 	vmov	r0, s16
 8011bd0:	f7ee fc8a 	bl	80004e8 <__aeabi_f2d>
 8011bd4:	a32e      	add	r3, pc, #184	; (adr r3, 8011c90 <MotionCP_Update+0xaa0>)
 8011bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bda:	4682      	mov	sl, r0
 8011bdc:	468b      	mov	fp, r1
 8011bde:	f7ee ff57 	bl	8000a90 <__aeabi_dcmple>
 8011be2:	2800      	cmp	r0, #0
 8011be4:	f040 80aa 	bne.w	8011d3c <MotionCP_Update+0xb4c>
 8011be8:	ee19 0a10 	vmov	r0, s18
 8011bec:	f7ee fc7c 	bl	80004e8 <__aeabi_f2d>
 8011bf0:	a329      	add	r3, pc, #164	; (adr r3, 8011c98 <MotionCP_Update+0xaa8>)
 8011bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	460d      	mov	r5, r1
 8011bfa:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8011bfe:	f7ee ff47 	bl	8000a90 <__aeabi_dcmple>
 8011c02:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 8011c06:	edcd 7a02 	vstr	s15, [sp, #8]
 8011c0a:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
 8011c0e:	edcd 7a04 	vstr	s15, [sp, #16]
 8011c12:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8011c16:	edcd 7a06 	vstr	s15, [sp, #24]
 8011c1a:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 8011c1e:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
 8011c22:	2800      	cmp	r0, #0
 8011c24:	f000 80cb 	beq.w	8011dbe <MotionCP_Update+0xbce>
 8011c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c2a:	f7ee fc5d 	bl	80004e8 <__aeabi_f2d>
 8011c2e:	a31c      	add	r3, pc, #112	; (adr r3, 8011ca0 <MotionCP_Update+0xab0>)
 8011c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c34:	4682      	mov	sl, r0
 8011c36:	468b      	mov	fp, r1
 8011c38:	f7ee ff2a 	bl	8000a90 <__aeabi_dcmple>
 8011c3c:	2800      	cmp	r0, #0
 8011c3e:	f000 8157 	beq.w	8011ef0 <MotionCP_Update+0xd00>
 8011c42:	ee18 0a90 	vmov	r0, s17
 8011c46:	f7ee fc4f 	bl	80004e8 <__aeabi_f2d>
 8011c4a:	a317      	add	r3, pc, #92	; (adr r3, 8011ca8 <MotionCP_Update+0xab8>)
 8011c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c50:	f7ee ff1e 	bl	8000a90 <__aeabi_dcmple>
 8011c54:	2800      	cmp	r0, #0
 8011c56:	f000 8235 	beq.w	80120c4 <MotionCP_Update+0xed4>
 8011c5a:	9802      	ldr	r0, [sp, #8]
 8011c5c:	f7ee fc44 	bl	80004e8 <__aeabi_f2d>
 8011c60:	a313      	add	r3, pc, #76	; (adr r3, 8011cb0 <MotionCP_Update+0xac0>)
 8011c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c66:	f7ee ff13 	bl	8000a90 <__aeabi_dcmple>
 8011c6a:	2800      	cmp	r0, #0
 8011c6c:	f040 813e 	bne.w	8011eec <MotionCP_Update+0xcfc>
 8011c70:	a311      	add	r3, pc, #68	; (adr r3, 8011cb8 <MotionCP_Update+0xac8>)
 8011c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c76:	4620      	mov	r0, r4
 8011c78:	4629      	mov	r1, r5
 8011c7a:	f7ee ff09 	bl	8000a90 <__aeabi_dcmple>
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	f000 8134 	beq.w	8011eec <MotionCP_Update+0xcfc>
 8011c84:	2706      	movs	r7, #6
 8011c86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011c88:	2bc7      	cmp	r3, #199	; 0xc7
 8011c8a:	bf98      	it	ls
 8011c8c:	2700      	movls	r7, #0
 8011c8e:	e672      	b.n	8011976 <MotionCP_Update+0x786>
 8011c90:	e071c53f 	.word	0xe071c53f
 8011c94:	bfe9f2d5 	.word	0xbfe9f2d5
 8011c98:	80b24207 	.word	0x80b24207
 8011c9c:	400d9c09 	.word	0x400d9c09
 8011ca0:	21af7d31 	.word	0x21af7d31
 8011ca4:	4001ce38 	.word	0x4001ce38
 8011ca8:	851eb852 	.word	0x851eb852
 8011cac:	bfe751eb 	.word	0xbfe751eb
 8011cb0:	fc5cdd51 	.word	0xfc5cdd51
 8011cb4:	3fcc4f6d 	.word	0x3fcc4f6d
 8011cb8:	df3300de 	.word	0xdf3300de
 8011cbc:	4001cfc1 	.word	0x4001cfc1
 8011cc0:	20002ca8 	.word	0x20002ca8
 8011cc4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011cc6:	f7ee fc0f 	bl	80004e8 <__aeabi_f2d>
 8011cca:	a3f2      	add	r3, pc, #968	; (adr r3, 8012094 <MotionCP_Update+0xea4>)
 8011ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd0:	f7ee fede 	bl	8000a90 <__aeabi_dcmple>
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	f000 8353 	beq.w	8012380 <MotionCP_Update+0x1190>
 8011cda:	a3f0      	add	r3, pc, #960	; (adr r3, 801209c <MotionCP_Update+0xeac>)
 8011cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	4629      	mov	r1, r5
 8011ce4:	f7ee fed4 	bl	8000a90 <__aeabi_dcmple>
 8011ce8:	bb40      	cbnz	r0, 8011d3c <MotionCP_Update+0xb4c>
 8011cea:	9804      	ldr	r0, [sp, #16]
 8011cec:	f7ee fbfc 	bl	80004e8 <__aeabi_f2d>
 8011cf0:	a3ec      	add	r3, pc, #944	; (adr r3, 80120a4 <MotionCP_Update+0xeb4>)
 8011cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf6:	f7ee fecb 	bl	8000a90 <__aeabi_dcmple>
 8011cfa:	2800      	cmp	r0, #0
 8011cfc:	f000 83a3 	beq.w	8012446 <MotionCP_Update+0x1256>
 8011d00:	a3ea      	add	r3, pc, #936	; (adr r3, 80120ac <MotionCP_Update+0xebc>)
 8011d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d06:	4630      	mov	r0, r6
 8011d08:	4639      	mov	r1, r7
 8011d0a:	f7ee fec1 	bl	8000a90 <__aeabi_dcmple>
 8011d0e:	2800      	cmp	r0, #0
 8011d10:	f000 80ec 	beq.w	8011eec <MotionCP_Update+0xcfc>
 8011d14:	ee19 0a90 	vmov	r0, s19
 8011d18:	f7ee fbe6 	bl	80004e8 <__aeabi_f2d>
 8011d1c:	a3e5      	add	r3, pc, #916	; (adr r3, 80120b4 <MotionCP_Update+0xec4>)
 8011d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d22:	f7ee feb5 	bl	8000a90 <__aeabi_dcmple>
 8011d26:	b148      	cbz	r0, 8011d3c <MotionCP_Update+0xb4c>
 8011d28:	a3e4      	add	r3, pc, #912	; (adr r3, 80120bc <MotionCP_Update+0xecc>)
 8011d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d2e:	4620      	mov	r0, r4
 8011d30:	4629      	mov	r1, r5
 8011d32:	f7ee fead 	bl	8000a90 <__aeabi_dcmple>
 8011d36:	2800      	cmp	r0, #0
 8011d38:	f000 80d8 	beq.w	8011eec <MotionCP_Update+0xcfc>
 8011d3c:	eddf 7ace 	vldr	s15, [pc, #824]	; 8012078 <MotionCP_Update+0xe88>
 8011d40:	eef0 9ae9 	vabs.f32	s19, s19
 8011d44:	eef4 9ae7 	vcmpe.f32	s19, s15
 8011d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d4c:	d50e      	bpl.n	8011d6c <MotionCP_Update+0xb7c>
 8011d4e:	eddf 7acb 	vldr	s15, [pc, #812]	; 801207c <MotionCP_Update+0xe8c>
 8011d52:	eef4 aae7 	vcmpe.f32	s21, s15
 8011d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d5a:	dd07      	ble.n	8011d6c <MotionCP_Update+0xb7c>
 8011d5c:	eddf 7ac8 	vldr	s15, [pc, #800]	; 8012080 <MotionCP_Update+0xe90>
 8011d60:	eef4 aae7 	vcmpe.f32	s21, s15
 8011d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d68:	f100 8110 	bmi.w	8011f8c <MotionCP_Update+0xd9c>
 8011d6c:	eddf 7ac5 	vldr	s15, [pc, #788]	; 8012084 <MotionCP_Update+0xe94>
 8011d70:	eef4 9ae7 	vcmpe.f32	s19, s15
 8011d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d78:	dd15      	ble.n	8011da6 <MotionCP_Update+0xbb6>
 8011d7a:	eddf 7ac3 	vldr	s15, [pc, #780]	; 8012088 <MotionCP_Update+0xe98>
 8011d7e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8011d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d86:	d50e      	bpl.n	8011da6 <MotionCP_Update+0xbb6>
 8011d88:	eddf 7ac0 	vldr	s15, [pc, #768]	; 801208c <MotionCP_Update+0xe9c>
 8011d8c:	eef4 aae7 	vcmpe.f32	s21, s15
 8011d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d94:	dd07      	ble.n	8011da6 <MotionCP_Update+0xbb6>
 8011d96:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8011d9a:	eef4 aae7 	vcmpe.f32	s21, s15
 8011d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da2:	f100 81fd 	bmi.w	80121a0 <MotionCP_Update+0xfb0>
 8011da6:	eddf 7aba 	vldr	s15, [pc, #744]	; 8012090 <MotionCP_Update+0xea0>
 8011daa:	eef0 aaea 	vabs.f32	s21, s21
 8011dae:	eef4 aae7 	vcmpe.f32	s21, s15
 8011db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db6:	bfcc      	ite	gt
 8011db8:	2704      	movgt	r7, #4
 8011dba:	2700      	movle	r7, #0
 8011dbc:	e5db      	b.n	8011976 <MotionCP_Update+0x786>
 8011dbe:	ee18 0a90 	vmov	r0, s17
 8011dc2:	f7ee fb91 	bl	80004e8 <__aeabi_f2d>
 8011dc6:	a37e      	add	r3, pc, #504	; (adr r3, 8011fc0 <MotionCP_Update+0xdd0>)
 8011dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dcc:	4604      	mov	r4, r0
 8011dce:	460d      	mov	r5, r1
 8011dd0:	f7ee fe5e 	bl	8000a90 <__aeabi_dcmple>
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	f000 80a4 	beq.w	8011f22 <MotionCP_Update+0xd32>
 8011dda:	9808      	ldr	r0, [sp, #32]
 8011ddc:	f7ee fb84 	bl	80004e8 <__aeabi_f2d>
 8011de0:	a379      	add	r3, pc, #484	; (adr r3, 8011fc8 <MotionCP_Update+0xdd8>)
 8011de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de6:	f7ee fe53 	bl	8000a90 <__aeabi_dcmple>
 8011dea:	2800      	cmp	r0, #0
 8011dec:	f000 819d 	beq.w	801212a <MotionCP_Update+0xf3a>
 8011df0:	a377      	add	r3, pc, #476	; (adr r3, 8011fd0 <MotionCP_Update+0xde0>)
 8011df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011df6:	4630      	mov	r0, r6
 8011df8:	4639      	mov	r1, r7
 8011dfa:	f7ee fe49 	bl	8000a90 <__aeabi_dcmple>
 8011dfe:	2800      	cmp	r0, #0
 8011e00:	f43f af40 	beq.w	8011c84 <MotionCP_Update+0xa94>
 8011e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e06:	f7ee fb6f 	bl	80004e8 <__aeabi_f2d>
 8011e0a:	a373      	add	r3, pc, #460	; (adr r3, 8011fd8 <MotionCP_Update+0xde8>)
 8011e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e10:	4604      	mov	r4, r0
 8011e12:	460d      	mov	r5, r1
 8011e14:	f7ee fe3c 	bl	8000a90 <__aeabi_dcmple>
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	f000 8244 	beq.w	80122a6 <MotionCP_Update+0x10b6>
 8011e1e:	9804      	ldr	r0, [sp, #16]
 8011e20:	f7ee fb62 	bl	80004e8 <__aeabi_f2d>
 8011e24:	a36e      	add	r3, pc, #440	; (adr r3, 8011fe0 <MotionCP_Update+0xdf0>)
 8011e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2a:	f7ee fe31 	bl	8000a90 <__aeabi_dcmple>
 8011e2e:	2800      	cmp	r0, #0
 8011e30:	d15c      	bne.n	8011eec <MotionCP_Update+0xcfc>
 8011e32:	9806      	ldr	r0, [sp, #24]
 8011e34:	f7ee fb58 	bl	80004e8 <__aeabi_f2d>
 8011e38:	a36b      	add	r3, pc, #428	; (adr r3, 8011fe8 <MotionCP_Update+0xdf8>)
 8011e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3e:	f7ee fe27 	bl	8000a90 <__aeabi_dcmple>
 8011e42:	2800      	cmp	r0, #0
 8011e44:	d052      	beq.n	8011eec <MotionCP_Update+0xcfc>
 8011e46:	2705      	movs	r7, #5
 8011e48:	e71d      	b.n	8011c86 <MotionCP_Update+0xa96>
 8011e4a:	ee1a 0a90 	vmov	r0, s21
 8011e4e:	f7ee fb4b 	bl	80004e8 <__aeabi_f2d>
 8011e52:	a367      	add	r3, pc, #412	; (adr r3, 8011ff0 <MotionCP_Update+0xe00>)
 8011e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e58:	ec41 0b1a 	vmov	d10, r0, r1
 8011e5c:	f7ee fe18 	bl	8000a90 <__aeabi_dcmple>
 8011e60:	2800      	cmp	r0, #0
 8011e62:	f000 8243 	beq.w	80122ec <MotionCP_Update+0x10fc>
 8011e66:	a364      	add	r3, pc, #400	; (adr r3, 8011ff8 <MotionCP_Update+0xe08>)
 8011e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	4629      	mov	r1, r5
 8011e70:	f7ee fe0e 	bl	8000a90 <__aeabi_dcmple>
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d039      	beq.n	8011eec <MotionCP_Update+0xcfc>
 8011e78:	9804      	ldr	r0, [sp, #16]
 8011e7a:	f7ee fb35 	bl	80004e8 <__aeabi_f2d>
 8011e7e:	a360      	add	r3, pc, #384	; (adr r3, 8012000 <MotionCP_Update+0xe10>)
 8011e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e84:	ec41 0b18 	vmov	d8, r0, r1
 8011e88:	f7ee fe02 	bl	8000a90 <__aeabi_dcmple>
 8011e8c:	2800      	cmp	r0, #0
 8011e8e:	f000 82af 	beq.w	80123f0 <MotionCP_Update+0x1200>
 8011e92:	9800      	ldr	r0, [sp, #0]
 8011e94:	f7ee fb28 	bl	80004e8 <__aeabi_f2d>
 8011e98:	a35b      	add	r3, pc, #364	; (adr r3, 8012008 <MotionCP_Update+0xe18>)
 8011e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9e:	f7ee fdf7 	bl	8000a90 <__aeabi_dcmple>
 8011ea2:	b318      	cbz	r0, 8011eec <MotionCP_Update+0xcfc>
 8011ea4:	a35a      	add	r3, pc, #360	; (adr r3, 8012010 <MotionCP_Update+0xe20>)
 8011ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eaa:	4620      	mov	r0, r4
 8011eac:	4629      	mov	r1, r5
 8011eae:	f7ee fdef 	bl	8000a90 <__aeabi_dcmple>
 8011eb2:	b1d8      	cbz	r0, 8011eec <MotionCP_Update+0xcfc>
 8011eb4:	a358      	add	r3, pc, #352	; (adr r3, 8012018 <MotionCP_Update+0xe28>)
 8011eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eba:	4650      	mov	r0, sl
 8011ebc:	4659      	mov	r1, fp
 8011ebe:	f7ee fde7 	bl	8000a90 <__aeabi_dcmple>
 8011ec2:	b198      	cbz	r0, 8011eec <MotionCP_Update+0xcfc>
 8011ec4:	ee19 0a90 	vmov	r0, s19
 8011ec8:	f7ee fb0e 	bl	80004e8 <__aeabi_f2d>
 8011ecc:	a354      	add	r3, pc, #336	; (adr r3, 8012020 <MotionCP_Update+0xe30>)
 8011ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed2:	f7ee fddd 	bl	8000a90 <__aeabi_dcmple>
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	d0b5      	beq.n	8011e46 <MotionCP_Update+0xc56>
 8011eda:	a353      	add	r3, pc, #332	; (adr r3, 8012028 <MotionCP_Update+0xe38>)
 8011edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	4639      	mov	r1, r7
 8011ee4:	f7ee fdd4 	bl	8000a90 <__aeabi_dcmple>
 8011ee8:	2800      	cmp	r0, #0
 8011eea:	d1ac      	bne.n	8011e46 <MotionCP_Update+0xc56>
 8011eec:	2707      	movs	r7, #7
 8011eee:	e542      	b.n	8011976 <MotionCP_Update+0x786>
 8011ef0:	ee1a 0a90 	vmov	r0, s21
 8011ef4:	f7ee faf8 	bl	80004e8 <__aeabi_f2d>
 8011ef8:	a34d      	add	r3, pc, #308	; (adr r3, 8012030 <MotionCP_Update+0xe40>)
 8011efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011efe:	4604      	mov	r4, r0
 8011f00:	460d      	mov	r5, r1
 8011f02:	f7ee fdc5 	bl	8000a90 <__aeabi_dcmple>
 8011f06:	2800      	cmp	r0, #0
 8011f08:	f000 811d 	beq.w	8012146 <MotionCP_Update+0xf56>
 8011f0c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011f0e:	f7ee faeb 	bl	80004e8 <__aeabi_f2d>
 8011f12:	a349      	add	r3, pc, #292	; (adr r3, 8012038 <MotionCP_Update+0xe48>)
 8011f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f18:	f7ee fdba 	bl	8000a90 <__aeabi_dcmple>
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	d1e5      	bne.n	8011eec <MotionCP_Update+0xcfc>
 8011f20:	e70c      	b.n	8011d3c <MotionCP_Update+0xb4c>
 8011f22:	a347      	add	r3, pc, #284	; (adr r3, 8012040 <MotionCP_Update+0xe50>)
 8011f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f28:	4650      	mov	r0, sl
 8011f2a:	4659      	mov	r1, fp
 8011f2c:	f7ee fdb0 	bl	8000a90 <__aeabi_dcmple>
 8011f30:	b370      	cbz	r0, 8011f90 <MotionCP_Update+0xda0>
 8011f32:	9802      	ldr	r0, [sp, #8]
 8011f34:	f7ee fad8 	bl	80004e8 <__aeabi_f2d>
 8011f38:	a343      	add	r3, pc, #268	; (adr r3, 8012048 <MotionCP_Update+0xe58>)
 8011f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3e:	ec41 0b18 	vmov	d8, r0, r1
 8011f42:	f7ee fda5 	bl	8000a90 <__aeabi_dcmple>
 8011f46:	2800      	cmp	r0, #0
 8011f48:	f43f af7f 	beq.w	8011e4a <MotionCP_Update+0xc5a>
 8011f4c:	9800      	ldr	r0, [sp, #0]
 8011f4e:	f7ee facb 	bl	80004e8 <__aeabi_f2d>
 8011f52:	a33f      	add	r3, pc, #252	; (adr r3, 8012050 <MotionCP_Update+0xe60>)
 8011f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f58:	f7ee fd9a 	bl	8000a90 <__aeabi_dcmple>
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	f43f aeb1 	beq.w	8011cc4 <MotionCP_Update+0xad4>
 8011f62:	a33d      	add	r3, pc, #244	; (adr r3, 8012058 <MotionCP_Update+0xe68>)
 8011f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f68:	4620      	mov	r0, r4
 8011f6a:	4629      	mov	r1, r5
 8011f6c:	f7ee fd90 	bl	8000a90 <__aeabi_dcmple>
 8011f70:	2800      	cmp	r0, #0
 8011f72:	d1bb      	bne.n	8011eec <MotionCP_Update+0xcfc>
 8011f74:	9806      	ldr	r0, [sp, #24]
 8011f76:	f7ee fab7 	bl	80004e8 <__aeabi_f2d>
 8011f7a:	a339      	add	r3, pc, #228	; (adr r3, 8012060 <MotionCP_Update+0xe70>)
 8011f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f80:	f7ee fd86 	bl	8000a90 <__aeabi_dcmple>
 8011f84:	2800      	cmp	r0, #0
 8011f86:	f47f af5e 	bne.w	8011e46 <MotionCP_Update+0xc56>
 8011f8a:	e7af      	b.n	8011eec <MotionCP_Update+0xcfc>
 8011f8c:	2702      	movs	r7, #2
 8011f8e:	e4f2      	b.n	8011976 <MotionCP_Update+0x786>
 8011f90:	9802      	ldr	r0, [sp, #8]
 8011f92:	f7ee faa9 	bl	80004e8 <__aeabi_f2d>
 8011f96:	a334      	add	r3, pc, #208	; (adr r3, 8012068 <MotionCP_Update+0xe78>)
 8011f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9c:	f7ee fd78 	bl	8000a90 <__aeabi_dcmple>
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	f47f aecb 	bne.w	8011d3c <MotionCP_Update+0xb4c>
 8011fa6:	a332      	add	r3, pc, #200	; (adr r3, 8012070 <MotionCP_Update+0xe80>)
 8011fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fac:	4630      	mov	r0, r6
 8011fae:	4639      	mov	r1, r7
 8011fb0:	f7ee fd6e 	bl	8000a90 <__aeabi_dcmple>
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	d199      	bne.n	8011eec <MotionCP_Update+0xcfc>
 8011fb8:	e745      	b.n	8011e46 <MotionCP_Update+0xc56>
 8011fba:	bf00      	nop
 8011fbc:	f3af 8000 	nop.w
 8011fc0:	6833c600 	.word	0x6833c600
 8011fc4:	bfe61fe8 	.word	0xbfe61fe8
 8011fc8:	631f8a09 	.word	0x631f8a09
 8011fcc:	403cb2ee 	.word	0x403cb2ee
 8011fd0:	de9c022a 	.word	0xde9c022a
 8011fd4:	3fd7fbc5 	.word	0x3fd7fbc5
 8011fd8:	2cfd8f0c 	.word	0x2cfd8f0c
 8011fdc:	4025ca96 	.word	0x4025ca96
 8011fe0:	50acc0be 	.word	0x50acc0be
 8011fe4:	3fd7fba4 	.word	0x3fd7fba4
 8011fe8:	bd1aa822 	.word	0xbd1aa822
 8011fec:	3faca01a 	.word	0x3faca01a
 8011ff0:	b45ae600 	.word	0xb45ae600
 8011ff4:	402ff500 	.word	0x402ff500
 8011ff8:	faf85943 	.word	0xfaf85943
 8011ffc:	3fe8975a 	.word	0x3fe8975a
 8012000:	4f1a1987 	.word	0x4f1a1987
 8012004:	3fae7104 	.word	0x3fae7104
 8012008:	8eb0318c 	.word	0x8eb0318c
 801200c:	40408de3 	.word	0x40408de3
 8012010:	4d2b2bfe 	.word	0x4d2b2bfe
 8012014:	3fc1414a 	.word	0x3fc1414a
 8012018:	7a89331a 	.word	0x7a89331a
 801201c:	3fcba7c1 	.word	0x3fcba7c1
 8012020:	63779e9d 	.word	0x63779e9d
 8012024:	c0551f41 	.word	0xc0551f41
 8012028:	7b0f6ad7 	.word	0x7b0f6ad7
 801202c:	bfef80a1 	.word	0xbfef80a1
 8012030:	4a87e38f 	.word	0x4a87e38f
 8012034:	c051e123 	.word	0xc051e123
 8012038:	6317268d 	.word	0x6317268d
 801203c:	3fa71d60 	.word	0x3fa71d60
 8012040:	e88df373 	.word	0xe88df373
 8012044:	3fd0759e 	.word	0x3fd0759e
 8012048:	78d0cc36 	.word	0x78d0cc36
 801204c:	3f938822 	.word	0x3f938822
 8012050:	0c1333b9 	.word	0x0c1333b9
 8012054:	404026e7 	.word	0x404026e7
 8012058:	700cd856 	.word	0x700cd856
 801205c:	bfd3b641 	.word	0xbfd3b641
 8012060:	b517a461 	.word	0xb517a461
 8012064:	3fce55fb 	.word	0x3fce55fb
 8012068:	424e5929 	.word	0x424e5929
 801206c:	3f910be9 	.word	0x3f910be9
 8012070:	489d27c4 	.word	0x489d27c4
 8012074:	3fef5530 	.word	0x3fef5530
 8012078:	42340000 	.word	0x42340000
 801207c:	c29c0000 	.word	0xc29c0000
 8012080:	420c0000 	.word	0x420c0000
 8012084:	42480000 	.word	0x42480000
 8012088:	42b40000 	.word	0x42b40000
 801208c:	c25c0000 	.word	0xc25c0000
 8012090:	425c0000 	.word	0x425c0000
 8012094:	14db5958 	.word	0x14db5958
 8012098:	401eeb8f 	.word	0x401eeb8f
 801209c:	dc11e42e 	.word	0xdc11e42e
 80120a0:	bfcad948 	.word	0xbfcad948
 80120a4:	6b93ccd1 	.word	0x6b93ccd1
 80120a8:	3fae640a 	.word	0x3fae640a
 80120ac:	23315d70 	.word	0x23315d70
 80120b0:	bfd23dbc 	.word	0xbfd23dbc
 80120b4:	28c79f66 	.word	0x28c79f66
 80120b8:	4044c6cf 	.word	0x4044c6cf
 80120bc:	4ce3de61 	.word	0x4ce3de61
 80120c0:	bf9fb613 	.word	0xbf9fb613
 80120c4:	9804      	ldr	r0, [sp, #16]
 80120c6:	f7ee fa0f 	bl	80004e8 <__aeabi_f2d>
 80120ca:	f20f 43b0 	addw	r3, pc, #1200	; 0x4b0
 80120ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d2:	f7ee fcdd 	bl	8000a90 <__aeabi_dcmple>
 80120d6:	2800      	cmp	r0, #0
 80120d8:	d07c      	beq.n	80121d4 <MotionCP_Update+0xfe4>
 80120da:	ee1a 0a90 	vmov	r0, s21
 80120de:	f7ee fa03 	bl	80004e8 <__aeabi_f2d>
 80120e2:	f20f 43a0 	addw	r3, pc, #1184	; 0x4a0
 80120e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ea:	4604      	mov	r4, r0
 80120ec:	460d      	mov	r5, r1
 80120ee:	f7ee fccf 	bl	8000a90 <__aeabi_dcmple>
 80120f2:	2800      	cmp	r0, #0
 80120f4:	f000 8091 	beq.w	801221a <MotionCP_Update+0x102a>
 80120f8:	9800      	ldr	r0, [sp, #0]
 80120fa:	f7ee f9f5 	bl	80004e8 <__aeabi_f2d>
 80120fe:	f20f 438c 	addw	r3, pc, #1164	; 0x48c
 8012102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012106:	f7ee fcc3 	bl	8000a90 <__aeabi_dcmple>
 801210a:	2800      	cmp	r0, #0
 801210c:	f43f aeee 	beq.w	8011eec <MotionCP_Update+0xcfc>
 8012110:	9802      	ldr	r0, [sp, #8]
 8012112:	f7ee f9e9 	bl	80004e8 <__aeabi_f2d>
 8012116:	f20f 437c 	addw	r3, pc, #1148	; 0x47c
 801211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801211e:	f7ee fcb7 	bl	8000a90 <__aeabi_dcmple>
 8012122:	2800      	cmp	r0, #0
 8012124:	f47f ae0a 	bne.w	8011d3c <MotionCP_Update+0xb4c>
 8012128:	e6e0      	b.n	8011eec <MotionCP_Update+0xcfc>
 801212a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801212c:	f7ee f9dc 	bl	80004e8 <__aeabi_f2d>
 8012130:	f20f 4368 	addw	r3, pc, #1128	; 0x468
 8012134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012138:	f7ee fcaa 	bl	8000a90 <__aeabi_dcmple>
 801213c:	2800      	cmp	r0, #0
 801213e:	bf14      	ite	ne
 8012140:	2706      	movne	r7, #6
 8012142:	2705      	moveq	r7, #5
 8012144:	e59f      	b.n	8011c86 <MotionCP_Update+0xa96>
 8012146:	9808      	ldr	r0, [sp, #32]
 8012148:	f7ee f9ce 	bl	80004e8 <__aeabi_f2d>
 801214c:	f20f 4354 	addw	r3, pc, #1108	; 0x454
 8012150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012154:	f7ee fc9c 	bl	8000a90 <__aeabi_dcmple>
 8012158:	b328      	cbz	r0, 80121a6 <MotionCP_Update+0xfb6>
 801215a:	f20f 4350 	addw	r3, pc, #1104	; 0x450
 801215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012162:	4620      	mov	r0, r4
 8012164:	4629      	mov	r1, r5
 8012166:	f7ee fc93 	bl	8000a90 <__aeabi_dcmple>
 801216a:	2800      	cmp	r0, #0
 801216c:	f000 808f 	beq.w	801228e <MotionCP_Update+0x109e>
 8012170:	f20f 4340 	addw	r3, pc, #1088	; 0x440
 8012174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012178:	4650      	mov	r0, sl
 801217a:	4659      	mov	r1, fp
 801217c:	f7ee fc88 	bl	8000a90 <__aeabi_dcmple>
 8012180:	2800      	cmp	r0, #0
 8012182:	f47f ad7f 	bne.w	8011c84 <MotionCP_Update+0xa94>
 8012186:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012188:	f7ee f9ae 	bl	80004e8 <__aeabi_f2d>
 801218c:	f20f 432c 	addw	r3, pc, #1068	; 0x42c
 8012190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012194:	f7ee fc7c 	bl	8000a90 <__aeabi_dcmple>
 8012198:	2800      	cmp	r0, #0
 801219a:	f47f ad73 	bne.w	8011c84 <MotionCP_Update+0xa94>
 801219e:	e6a5      	b.n	8011eec <MotionCP_Update+0xcfc>
 80121a0:	2703      	movs	r7, #3
 80121a2:	f7ff bbe8 	b.w	8011976 <MotionCP_Update+0x786>
 80121a6:	f20f 431c 	addw	r3, pc, #1052	; 0x41c
 80121aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ae:	4620      	mov	r0, r4
 80121b0:	4629      	mov	r1, r5
 80121b2:	f7ee fc6d 	bl	8000a90 <__aeabi_dcmple>
 80121b6:	2800      	cmp	r0, #0
 80121b8:	f000 8081 	beq.w	80122be <MotionCP_Update+0x10ce>
 80121bc:	f20f 430c 	addw	r3, pc, #1036	; 0x40c
 80121c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c4:	4620      	mov	r0, r4
 80121c6:	4629      	mov	r1, r5
 80121c8:	f7ee fc62 	bl	8000a90 <__aeabi_dcmple>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	f47f ae3a 	bne.w	8011e46 <MotionCP_Update+0xc56>
 80121d2:	e68b      	b.n	8011eec <MotionCP_Update+0xcfc>
 80121d4:	ee1a 0a90 	vmov	r0, s21
 80121d8:	f7ee f986 	bl	80004e8 <__aeabi_f2d>
 80121dc:	a3fd      	add	r3, pc, #1012	; (adr r3, 80125d4 <MotionCP_Update+0x13e4>)
 80121de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e2:	f7ee fc55 	bl	8000a90 <__aeabi_dcmple>
 80121e6:	2800      	cmp	r0, #0
 80121e8:	f43f ae2d 	beq.w	8011e46 <MotionCP_Update+0xc56>
 80121ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80121f0:	a3fa      	add	r3, pc, #1000	; (adr r3, 80125dc <MotionCP_Update+0x13ec>)
 80121f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f6:	f7ee fc4b 	bl	8000a90 <__aeabi_dcmple>
 80121fa:	2800      	cmp	r0, #0
 80121fc:	f47f ad9e 	bne.w	8011d3c <MotionCP_Update+0xb4c>
 8012200:	ee19 0a90 	vmov	r0, s19
 8012204:	f7ee f970 	bl	80004e8 <__aeabi_f2d>
 8012208:	a3f6      	add	r3, pc, #984	; (adr r3, 80125e4 <MotionCP_Update+0x13f4>)
 801220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220e:	f7ee fc3f 	bl	8000a90 <__aeabi_dcmple>
 8012212:	2800      	cmp	r0, #0
 8012214:	f47f ad92 	bne.w	8011d3c <MotionCP_Update+0xb4c>
 8012218:	e615      	b.n	8011e46 <MotionCP_Update+0xc56>
 801221a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801221c:	f7ee f964 	bl	80004e8 <__aeabi_f2d>
 8012220:	a3f2      	add	r3, pc, #968	; (adr r3, 80125ec <MotionCP_Update+0x13fc>)
 8012222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012226:	f7ee fc33 	bl	8000a90 <__aeabi_dcmple>
 801222a:	2800      	cmp	r0, #0
 801222c:	f000 8093 	beq.w	8012356 <MotionCP_Update+0x1166>
 8012230:	9806      	ldr	r0, [sp, #24]
 8012232:	f7ee f959 	bl	80004e8 <__aeabi_f2d>
 8012236:	a3ef      	add	r3, pc, #956	; (adr r3, 80125f4 <MotionCP_Update+0x1404>)
 8012238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801223c:	f7ee fc28 	bl	8000a90 <__aeabi_dcmple>
 8012240:	2800      	cmp	r0, #0
 8012242:	f47f ad7b 	bne.w	8011d3c <MotionCP_Update+0xb4c>
 8012246:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801224a:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8012578 <MotionCP_Update+0x1388>
 801224e:	ee67 7ae7 	vnmul.f32	s15, s15, s15
 8012252:	ee06 9a90 	vmov	s13, r9
 8012256:	eee7 6a8a 	vfma.f32	s13, s15, s20
 801225a:	ee66 7a87 	vmul.f32	s15, s13, s14
 801225e:	ee17 0a90 	vmov	r0, s15
 8012262:	f7ee f941 	bl	80004e8 <__aeabi_f2d>
 8012266:	a390      	add	r3, pc, #576	; (adr r3, 80124a8 <MotionCP_Update+0x12b8>)
 8012268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226c:	f7ee fc10 	bl	8000a90 <__aeabi_dcmple>
 8012270:	2800      	cmp	r0, #0
 8012272:	f47f ad63 	bne.w	8011d3c <MotionCP_Update+0xb4c>
 8012276:	9808      	ldr	r0, [sp, #32]
 8012278:	f7ee f936 	bl	80004e8 <__aeabi_f2d>
 801227c:	a38c      	add	r3, pc, #560	; (adr r3, 80124b0 <MotionCP_Update+0x12c0>)
 801227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012282:	f7ee fc05 	bl	8000a90 <__aeabi_dcmple>
 8012286:	2800      	cmp	r0, #0
 8012288:	f47f ad58 	bne.w	8011d3c <MotionCP_Update+0xb4c>
 801228c:	e62e      	b.n	8011eec <MotionCP_Update+0xcfc>
 801228e:	a38a      	add	r3, pc, #552	; (adr r3, 80124b8 <MotionCP_Update+0x12c8>)
 8012290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012294:	4620      	mov	r0, r4
 8012296:	4629      	mov	r1, r5
 8012298:	f7ee fbfa 	bl	8000a90 <__aeabi_dcmple>
 801229c:	2800      	cmp	r0, #0
 801229e:	bf14      	ite	ne
 80122a0:	2706      	movne	r7, #6
 80122a2:	2705      	moveq	r7, #5
 80122a4:	e4ef      	b.n	8011c86 <MotionCP_Update+0xa96>
 80122a6:	a386      	add	r3, pc, #536	; (adr r3, 80124c0 <MotionCP_Update+0x12d0>)
 80122a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ac:	4620      	mov	r0, r4
 80122ae:	4629      	mov	r1, r5
 80122b0:	f7ee fbee 	bl	8000a90 <__aeabi_dcmple>
 80122b4:	2800      	cmp	r0, #0
 80122b6:	bf14      	ite	ne
 80122b8:	2706      	movne	r7, #6
 80122ba:	2705      	moveq	r7, #5
 80122bc:	e4e3      	b.n	8011c86 <MotionCP_Update+0xa96>
 80122be:	ee18 0a90 	vmov	r0, s17
 80122c2:	f7ee f911 	bl	80004e8 <__aeabi_f2d>
 80122c6:	a380      	add	r3, pc, #512	; (adr r3, 80124c8 <MotionCP_Update+0x12d8>)
 80122c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122cc:	f7ee fbe0 	bl	8000a90 <__aeabi_dcmple>
 80122d0:	2800      	cmp	r0, #0
 80122d2:	f43f adb8 	beq.w	8011e46 <MotionCP_Update+0xc56>
 80122d6:	a37e      	add	r3, pc, #504	; (adr r3, 80124d0 <MotionCP_Update+0x12e0>)
 80122d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122dc:	4650      	mov	r0, sl
 80122de:	4659      	mov	r1, fp
 80122e0:	f7ee fbd6 	bl	8000a90 <__aeabi_dcmple>
 80122e4:	2800      	cmp	r0, #0
 80122e6:	f47f ae01 	bne.w	8011eec <MotionCP_Update+0xcfc>
 80122ea:	e4cb      	b.n	8011c84 <MotionCP_Update+0xa94>
 80122ec:	a37a      	add	r3, pc, #488	; (adr r3, 80124d8 <MotionCP_Update+0x12e8>)
 80122ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f2:	ec51 0b18 	vmov	r0, r1, d8
 80122f6:	f7ee fbcb 	bl	8000a90 <__aeabi_dcmple>
 80122fa:	2800      	cmp	r0, #0
 80122fc:	d04c      	beq.n	8012398 <MotionCP_Update+0x11a8>
 80122fe:	9804      	ldr	r0, [sp, #16]
 8012300:	f7ee f8f2 	bl	80004e8 <__aeabi_f2d>
 8012304:	a376      	add	r3, pc, #472	; (adr r3, 80124e0 <MotionCP_Update+0x12f0>)
 8012306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230a:	f7ee fbc1 	bl	8000a90 <__aeabi_dcmple>
 801230e:	2800      	cmp	r0, #0
 8012310:	f43f ad99 	beq.w	8011e46 <MotionCP_Update+0xc56>
 8012314:	9806      	ldr	r0, [sp, #24]
 8012316:	f7ee f8e7 	bl	80004e8 <__aeabi_f2d>
 801231a:	a373      	add	r3, pc, #460	; (adr r3, 80124e8 <MotionCP_Update+0x12f8>)
 801231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012320:	f7ee fbb6 	bl	8000a90 <__aeabi_dcmple>
 8012324:	2800      	cmp	r0, #0
 8012326:	f47f ad8e 	bne.w	8011e46 <MotionCP_Update+0xc56>
 801232a:	a371      	add	r3, pc, #452	; (adr r3, 80124f0 <MotionCP_Update+0x1300>)
 801232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012330:	4620      	mov	r0, r4
 8012332:	4629      	mov	r1, r5
 8012334:	f7ee fbac 	bl	8000a90 <__aeabi_dcmple>
 8012338:	2800      	cmp	r0, #0
 801233a:	f43f ad84 	beq.w	8011e46 <MotionCP_Update+0xc56>
 801233e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012340:	f7ee f8d2 	bl	80004e8 <__aeabi_f2d>
 8012344:	a36c      	add	r3, pc, #432	; (adr r3, 80124f8 <MotionCP_Update+0x1308>)
 8012346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234a:	f7ee fba1 	bl	8000a90 <__aeabi_dcmple>
 801234e:	2800      	cmp	r0, #0
 8012350:	f47f adcc 	bne.w	8011eec <MotionCP_Update+0xcfc>
 8012354:	e577      	b.n	8011e46 <MotionCP_Update+0xc56>
 8012356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801235a:	a369      	add	r3, pc, #420	; (adr r3, 8012500 <MotionCP_Update+0x1310>)
 801235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012360:	f7ee fb96 	bl	8000a90 <__aeabi_dcmple>
 8012364:	2800      	cmp	r0, #0
 8012366:	d057      	beq.n	8012418 <MotionCP_Update+0x1228>
 8012368:	9802      	ldr	r0, [sp, #8]
 801236a:	f7ee f8bd 	bl	80004e8 <__aeabi_f2d>
 801236e:	a366      	add	r3, pc, #408	; (adr r3, 8012508 <MotionCP_Update+0x1318>)
 8012370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012374:	f7ee fb8c 	bl	8000a90 <__aeabi_dcmple>
 8012378:	2800      	cmp	r0, #0
 801237a:	f47f acdf 	bne.w	8011d3c <MotionCP_Update+0xb4c>
 801237e:	e481      	b.n	8011c84 <MotionCP_Update+0xa94>
 8012380:	9808      	ldr	r0, [sp, #32]
 8012382:	f7ee f8b1 	bl	80004e8 <__aeabi_f2d>
 8012386:	a362      	add	r3, pc, #392	; (adr r3, 8012510 <MotionCP_Update+0x1320>)
 8012388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238c:	f7ee fb80 	bl	8000a90 <__aeabi_dcmple>
 8012390:	2800      	cmp	r0, #0
 8012392:	f47f ad58 	bne.w	8011e46 <MotionCP_Update+0xc56>
 8012396:	e5a9      	b.n	8011eec <MotionCP_Update+0xcfc>
 8012398:	9800      	ldr	r0, [sp, #0]
 801239a:	f7ee f8a5 	bl	80004e8 <__aeabi_f2d>
 801239e:	a35e      	add	r3, pc, #376	; (adr r3, 8012518 <MotionCP_Update+0x1328>)
 80123a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a4:	f7ee fb74 	bl	8000a90 <__aeabi_dcmple>
 80123a8:	2800      	cmp	r0, #0
 80123aa:	f43f ad4c 	beq.w	8011e46 <MotionCP_Update+0xc56>
 80123ae:	a35c      	add	r3, pc, #368	; (adr r3, 8012520 <MotionCP_Update+0x1330>)
 80123b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b4:	4620      	mov	r0, r4
 80123b6:	4629      	mov	r1, r5
 80123b8:	f7ee fb6a 	bl	8000a90 <__aeabi_dcmple>
 80123bc:	2800      	cmp	r0, #0
 80123be:	f47f ad42 	bne.w	8011e46 <MotionCP_Update+0xc56>
 80123c2:	a359      	add	r3, pc, #356	; (adr r3, 8012528 <MotionCP_Update+0x1338>)
 80123c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c8:	ec51 0b1a 	vmov	r0, r1, d10
 80123cc:	f7ee fb60 	bl	8000a90 <__aeabi_dcmple>
 80123d0:	2800      	cmp	r0, #0
 80123d2:	f47f ad38 	bne.w	8011e46 <MotionCP_Update+0xc56>
 80123d6:	ee19 0a90 	vmov	r0, s19
 80123da:	f7ee f885 	bl	80004e8 <__aeabi_f2d>
 80123de:	a354      	add	r3, pc, #336	; (adr r3, 8012530 <MotionCP_Update+0x1340>)
 80123e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e4:	f7ee fb54 	bl	8000a90 <__aeabi_dcmple>
 80123e8:	2800      	cmp	r0, #0
 80123ea:	f47f ad7f 	bne.w	8011eec <MotionCP_Update+0xcfc>
 80123ee:	e52a      	b.n	8011e46 <MotionCP_Update+0xc56>
 80123f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80123f2:	f7ee f879 	bl	80004e8 <__aeabi_f2d>
 80123f6:	a350      	add	r3, pc, #320	; (adr r3, 8012538 <MotionCP_Update+0x1348>)
 80123f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fc:	f7ee fb48 	bl	8000a90 <__aeabi_dcmple>
 8012400:	b368      	cbz	r0, 801245e <MotionCP_Update+0x126e>
 8012402:	a34f      	add	r3, pc, #316	; (adr r3, 8012540 <MotionCP_Update+0x1350>)
 8012404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012408:	4650      	mov	r0, sl
 801240a:	4659      	mov	r1, fp
 801240c:	f7ee fb40 	bl	8000a90 <__aeabi_dcmple>
 8012410:	2800      	cmp	r0, #0
 8012412:	f47f ad18 	bne.w	8011e46 <MotionCP_Update+0xc56>
 8012416:	e569      	b.n	8011eec <MotionCP_Update+0xcfc>
 8012418:	a34b      	add	r3, pc, #300	; (adr r3, 8012548 <MotionCP_Update+0x1358>)
 801241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241e:	4620      	mov	r0, r4
 8012420:	4629      	mov	r1, r5
 8012422:	f7ee fb35 	bl	8000a90 <__aeabi_dcmple>
 8012426:	2800      	cmp	r0, #0
 8012428:	f000 80e8 	beq.w	80125fc <MotionCP_Update+0x140c>
 801242c:	ee19 0a90 	vmov	r0, s19
 8012430:	f7ee f85a 	bl	80004e8 <__aeabi_f2d>
 8012434:	a346      	add	r3, pc, #280	; (adr r3, 8012550 <MotionCP_Update+0x1360>)
 8012436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801243a:	f7ee fb29 	bl	8000a90 <__aeabi_dcmple>
 801243e:	2800      	cmp	r0, #0
 8012440:	f47f ac7c 	bne.w	8011d3c <MotionCP_Update+0xb4c>
 8012444:	e4ff      	b.n	8011e46 <MotionCP_Update+0xc56>
 8012446:	9808      	ldr	r0, [sp, #32]
 8012448:	f7ee f84e 	bl	80004e8 <__aeabi_f2d>
 801244c:	a342      	add	r3, pc, #264	; (adr r3, 8012558 <MotionCP_Update+0x1368>)
 801244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012452:	f7ee fb1d 	bl	8000a90 <__aeabi_dcmple>
 8012456:	2800      	cmp	r0, #0
 8012458:	f47f acf5 	bne.w	8011e46 <MotionCP_Update+0xc56>
 801245c:	e546      	b.n	8011eec <MotionCP_Update+0xcfc>
 801245e:	ee19 0a90 	vmov	r0, s19
 8012462:	f7ee f841 	bl	80004e8 <__aeabi_f2d>
 8012466:	a33e      	add	r3, pc, #248	; (adr r3, 8012560 <MotionCP_Update+0x1370>)
 8012468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246c:	f7ee fb10 	bl	8000a90 <__aeabi_dcmple>
 8012470:	2800      	cmp	r0, #0
 8012472:	f47f ace8 	bne.w	8011e46 <MotionCP_Update+0xc56>
 8012476:	4640      	mov	r0, r8
 8012478:	f7ee f836 	bl	80004e8 <__aeabi_f2d>
 801247c:	a33a      	add	r3, pc, #232	; (adr r3, 8012568 <MotionCP_Update+0x1378>)
 801247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012482:	f7ee fb05 	bl	8000a90 <__aeabi_dcmple>
 8012486:	2800      	cmp	r0, #0
 8012488:	f000 80cd 	beq.w	8012626 <MotionCP_Update+0x1436>
 801248c:	a338      	add	r3, pc, #224	; (adr r3, 8012570 <MotionCP_Update+0x1380>)
 801248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012492:	ec51 0b18 	vmov	r0, r1, d8
 8012496:	f7ee fafb 	bl	8000a90 <__aeabi_dcmple>
 801249a:	2800      	cmp	r0, #0
 801249c:	f47f ad26 	bne.w	8011eec <MotionCP_Update+0xcfc>
 80124a0:	e4d1      	b.n	8011e46 <MotionCP_Update+0xc56>
 80124a2:	bf00      	nop
 80124a4:	f3af 8000 	nop.w
 80124a8:	3126e979 	.word	0x3126e979
 80124ac:	3fd1ac08 	.word	0x3fd1ac08
 80124b0:	d48cb4af 	.word	0xd48cb4af
 80124b4:	40181a7b 	.word	0x40181a7b
 80124b8:	d9a95422 	.word	0xd9a95422
 80124bc:	40515003 	.word	0x40515003
 80124c0:	a3619978 	.word	0xa3619978
 80124c4:	404245ac 	.word	0x404245ac
 80124c8:	b64e0547 	.word	0xb64e0547
 80124cc:	bfdd3b81 	.word	0xbfdd3b81
 80124d0:	78359bc3 	.word	0x78359bc3
 80124d4:	4011455f 	.word	0x4011455f
 80124d8:	ccaf709b 	.word	0xccaf709b
 80124dc:	3fad755b 	.word	0x3fad755b
 80124e0:	1fd5885d 	.word	0x1fd5885d
 80124e4:	3fb81861 	.word	0x3fb81861
 80124e8:	177ea1c7 	.word	0x177ea1c7
 80124ec:	3fb366b6 	.word	0x3fb366b6
 80124f0:	625204b0 	.word	0x625204b0
 80124f4:	3fc4f6d7 	.word	0x3fc4f6d7
 80124f8:	f0b6b6e1 	.word	0xf0b6b6e1
 80124fc:	3fb854bc 	.word	0x3fb854bc
 8012500:	f76e6107 	.word	0xf76e6107
 8012504:	40049f72 	.word	0x40049f72
 8012508:	f94c8798 	.word	0xf94c8798
 801250c:	3fc35410 	.word	0x3fc35410
 8012510:	fa58f712 	.word	0xfa58f712
 8012514:	4030e9d0 	.word	0x4030e9d0
 8012518:	e5e24788 	.word	0xe5e24788
 801251c:	40207ce9 	.word	0x40207ce9
 8012520:	1f8a0903 	.word	0x1f8a0903
 8012524:	3fbaee63 	.word	0x3fbaee63
 8012528:	1416377a 	.word	0x1416377a
 801252c:	4052d006 	.word	0x4052d006
 8012530:	14ca9260 	.word	0x14ca9260
 8012534:	c0452273 	.word	0xc0452273
 8012538:	639d5e4a 	.word	0x639d5e4a
 801253c:	3fd0f640 	.word	0x3fd0f640
 8012540:	c58ab92c 	.word	0xc58ab92c
 8012544:	bfb30a6f 	.word	0xbfb30a6f
 8012548:	1fa33376 	.word	0x1fa33376
 801254c:	c053440d 	.word	0xc053440d
 8012550:	4d3bf2f5 	.word	0x4d3bf2f5
 8012554:	402d2c66 	.word	0x402d2c66
 8012558:	f2064239 	.word	0xf2064239
 801255c:	4010b2ec 	.word	0x4010b2ec
 8012560:	79746024 	.word	0x79746024
 8012564:	40538073 	.word	0x40538073
 8012568:	5a3a083a 	.word	0x5a3a083a
 801256c:	3feb92d5 	.word	0x3feb92d5
 8012570:	fd933e36 	.word	0xfd933e36
 8012574:	3fc634f3 	.word	0x3fc634f3
 8012578:	3bdbeb62 	.word	0x3bdbeb62
 801257c:	0110a138 	.word	0x0110a138
 8012580:	3fb15087 	.word	0x3fb15087
 8012584:	b85a4f01 	.word	0xb85a4f01
 8012588:	c05516ac 	.word	0xc05516ac
 801258c:	fce746cc 	.word	0xfce746cc
 8012590:	403ed714 	.word	0x403ed714
 8012594:	adafd114 	.word	0xadafd114
 8012598:	3f83fe9f 	.word	0x3f83fe9f
 801259c:	2d38476f 	.word	0x2d38476f
 80125a0:	40364d78 	.word	0x40364d78
 80125a4:	59c8c932 	.word	0x59c8c932
 80125a8:	3ffc93d8 	.word	0x3ffc93d8
 80125ac:	b4677b39 	.word	0xb4677b39
 80125b0:	40508f55 	.word	0x40508f55
 80125b4:	4573a798 	.word	0x4573a798
 80125b8:	40517829 	.word	0x40517829
 80125bc:	e30446b7 	.word	0xe30446b7
 80125c0:	4003f2e0 	.word	0x4003f2e0
 80125c4:	fcbd5561 	.word	0xfcbd5561
 80125c8:	4027a34e 	.word	0x4027a34e
 80125cc:	27525461 	.word	0x27525461
 80125d0:	c03829a0 	.word	0xc03829a0
 80125d4:	f7a4e7ab 	.word	0xf7a4e7ab
 80125d8:	c052a98d 	.word	0xc052a98d
 80125dc:	7a7008a7 	.word	0x7a7008a7
 80125e0:	40074f17 	.word	0x40074f17
 80125e4:	aa00192a 	.word	0xaa00192a
 80125e8:	402241b8 	.word	0x402241b8
 80125ec:	908e581d 	.word	0x908e581d
 80125f0:	3fa33c81 	.word	0x3fa33c81
 80125f4:	62845996 	.word	0x62845996
 80125f8:	3fca682b 	.word	0x3fca682b
 80125fc:	a316      	add	r3, pc, #88	; (adr r3, 8012658 <MotionCP_Update+0x1468>)
 80125fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012602:	4630      	mov	r0, r6
 8012604:	4639      	mov	r1, r7
 8012606:	f7ee fa43 	bl	8000a90 <__aeabi_dcmple>
 801260a:	b1c0      	cbz	r0, 801263e <MotionCP_Update+0x144e>
 801260c:	ee19 0a90 	vmov	r0, s19
 8012610:	f7ed ff6a 	bl	80004e8 <__aeabi_f2d>
 8012614:	a312      	add	r3, pc, #72	; (adr r3, 8012660 <MotionCP_Update+0x1470>)
 8012616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261a:	f7ee fa39 	bl	8000a90 <__aeabi_dcmple>
 801261e:	2800      	cmp	r0, #0
 8012620:	f47f ac64 	bne.w	8011eec <MotionCP_Update+0xcfc>
 8012624:	e40f      	b.n	8011e46 <MotionCP_Update+0xc56>
 8012626:	9800      	ldr	r0, [sp, #0]
 8012628:	f7ed ff5e 	bl	80004e8 <__aeabi_f2d>
 801262c:	a30e      	add	r3, pc, #56	; (adr r3, 8012668 <MotionCP_Update+0x1478>)
 801262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012632:	f7ee fa2d 	bl	8000a90 <__aeabi_dcmple>
 8012636:	2800      	cmp	r0, #0
 8012638:	f47f ac58 	bne.w	8011eec <MotionCP_Update+0xcfc>
 801263c:	e403      	b.n	8011e46 <MotionCP_Update+0xc56>
 801263e:	9808      	ldr	r0, [sp, #32]
 8012640:	f7ed ff52 	bl	80004e8 <__aeabi_f2d>
 8012644:	a30a      	add	r3, pc, #40	; (adr r3, 8012670 <MotionCP_Update+0x1480>)
 8012646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264a:	f7ee fa21 	bl	8000a90 <__aeabi_dcmple>
 801264e:	2800      	cmp	r0, #0
 8012650:	f47f abf9 	bne.w	8011e46 <MotionCP_Update+0xc56>
 8012654:	f7ff bb72 	b.w	8011d3c <MotionCP_Update+0xb4c>
 8012658:	642bf983 	.word	0x642bf983
 801265c:	3feb8cae 	.word	0x3feb8cae
 8012660:	26aa8eb4 	.word	0x26aa8eb4
 8012664:	4045a688 	.word	0x4045a688
 8012668:	6a098916 	.word	0x6a098916
 801266c:	400356f8 	.word	0x400356f8
 8012670:	f4e0114d 	.word	0xf4e0114d
 8012674:	3ffd9e2e 	.word	0x3ffd9e2e

08012678 <DataHist_parameters>:
 8012678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801267c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801267e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012680:	7020      	strb	r0, [r4, #0]
 8012682:	6808      	ldr	r0, [r1, #0]
 8012684:	6060      	str	r0, [r4, #4]
 8012686:	6848      	ldr	r0, [r1, #4]
 8012688:	60a0      	str	r0, [r4, #8]
 801268a:	6888      	ldr	r0, [r1, #8]
 801268c:	60e0      	str	r0, [r4, #12]
 801268e:	68c8      	ldr	r0, [r1, #12]
 8012690:	6120      	str	r0, [r4, #16]
 8012692:	6908      	ldr	r0, [r1, #16]
 8012694:	6160      	str	r0, [r4, #20]
 8012696:	6948      	ldr	r0, [r1, #20]
 8012698:	61a0      	str	r0, [r4, #24]
 801269a:	6988      	ldr	r0, [r1, #24]
 801269c:	61e0      	str	r0, [r4, #28]
 801269e:	69c8      	ldr	r0, [r1, #28]
 80126a0:	6220      	str	r0, [r4, #32]
 80126a2:	6a09      	ldr	r1, [r1, #32]
 80126a4:	6261      	str	r1, [r4, #36]	; 0x24
 80126a6:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 80126aa:	8811      	ldrh	r1, [r2, #0]
 80126ac:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80126b0:	8521      	strh	r1, [r4, #40]	; 0x28
 80126b2:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 80126b6:	f104 0830 	add.w	r8, r4, #48	; 0x30
 80126ba:	f04f 0e00 	mov.w	lr, #0
 80126be:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 80126c2:	4641      	mov	r1, r8
 80126c4:	f852 0b04 	ldr.w	r0, [r2], #4
 80126c8:	f841 0b04 	str.w	r0, [r1], #4
 80126cc:	4562      	cmp	r2, ip
 80126ce:	d1f9      	bne.n	80126c4 <DataHist_parameters+0x4c>
 80126d0:	f10e 0e1e 	add.w	lr, lr, #30
 80126d4:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 80126d8:	f108 0878 	add.w	r8, r8, #120	; 0x78
 80126dc:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 80126e0:	d1ed      	bne.n	80126be <DataHist_parameters+0x46>
 80126e2:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 80126e6:	881a      	ldrh	r2, [r3, #0]
 80126e8:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80126ec:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 80126f0:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80126f4:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 80126f8:	f04f 0c00 	mov.w	ip, #0
 80126fc:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 8012700:	4672      	mov	r2, lr
 8012702:	f853 1b04 	ldr.w	r1, [r3], #4
 8012706:	f842 1b04 	str.w	r1, [r2], #4
 801270a:	4283      	cmp	r3, r0
 801270c:	d1f9      	bne.n	8012702 <DataHist_parameters+0x8a>
 801270e:	f10c 0c1e 	add.w	ip, ip, #30
 8012712:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 8012716:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 801271a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 801271e:	d1ed      	bne.n	80126fc <DataHist_parameters+0x84>
 8012720:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 8012724:	883b      	ldrh	r3, [r7, #0]
 8012726:	f8d7 e004 	ldr.w	lr, [r7, #4]
 801272a:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 801272e:	3780      	adds	r7, #128	; 0x80
 8012730:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 8012734:	2000      	movs	r0, #0
 8012736:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 801273a:	4662      	mov	r2, ip
 801273c:	f853 1b04 	ldr.w	r1, [r3], #4
 8012740:	f842 1b04 	str.w	r1, [r2], #4
 8012744:	42bb      	cmp	r3, r7
 8012746:	d1f9      	bne.n	801273c <DataHist_parameters+0xc4>
 8012748:	301e      	adds	r0, #30
 801274a:	285a      	cmp	r0, #90	; 0x5a
 801274c:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 8012750:	f103 0778 	add.w	r7, r3, #120	; 0x78
 8012754:	d1ef      	bne.n	8012736 <DataHist_parameters+0xbe>
 8012756:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 801275a:	8833      	ldrh	r3, [r6, #0]
 801275c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8012760:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 8012764:	3680      	adds	r6, #128	; 0x80
 8012766:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 801276a:	2000      	movs	r0, #0
 801276c:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 8012770:	463a      	mov	r2, r7
 8012772:	f853 1b04 	ldr.w	r1, [r3], #4
 8012776:	f842 1b04 	str.w	r1, [r2], #4
 801277a:	429e      	cmp	r6, r3
 801277c:	d1f9      	bne.n	8012772 <DataHist_parameters+0xfa>
 801277e:	301e      	adds	r0, #30
 8012780:	285a      	cmp	r0, #90	; 0x5a
 8012782:	f107 0778 	add.w	r7, r7, #120	; 0x78
 8012786:	f106 0678 	add.w	r6, r6, #120	; 0x78
 801278a:	d1ef      	bne.n	801276c <DataHist_parameters+0xf4>
 801278c:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 8012790:	69aa      	ldr	r2, [r5, #24]
 8012792:	f8c3 c004 	str.w	ip, [r3, #4]
 8012796:	782b      	ldrb	r3, [r5, #0]
 8012798:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 801279c:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 80127a0:	619a      	str	r2, [r3, #24]
 80127a2:	686a      	ldr	r2, [r5, #4]
 80127a4:	605a      	str	r2, [r3, #4]
 80127a6:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 80127aa:	68a9      	ldr	r1, [r5, #8]
 80127ac:	6011      	str	r1, [r2, #0]
 80127ae:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 80127b2:	68e9      	ldr	r1, [r5, #12]
 80127b4:	6011      	str	r1, [r2, #0]
 80127b6:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 80127ba:	6929      	ldr	r1, [r5, #16]
 80127bc:	6011      	str	r1, [r2, #0]
 80127be:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 80127c2:	6969      	ldr	r1, [r5, #20]
 80127c4:	6011      	str	r1, [r2, #0]
 80127c6:	69ea      	ldr	r2, [r5, #28]
 80127c8:	61da      	str	r2, [r3, #28]
 80127ca:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 80127ce:	6a2a      	ldr	r2, [r5, #32]
 80127d0:	601a      	str	r2, [r3, #0]
 80127d2:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 80127d6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80127d8:	601a      	str	r2, [r3, #0]
 80127da:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 80127de:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80127e0:	601a      	str	r2, [r3, #0]
 80127e2:	f204 6414 	addw	r4, r4, #1556	; 0x614
 80127e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80127e8:	6023      	str	r3, [r4, #0]
 80127ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127ee:	bf00      	nop

080127f0 <rotVect>:
 80127f0:	f991 3001 	ldrsb.w	r3, [r1, #1]
 80127f4:	ed92 5a01 	vldr	s10, [r2, #4]
 80127f8:	edd2 5a00 	vldr	s11, [r2]
 80127fc:	ed92 6a02 	vldr	s12, [r2, #8]
 8012800:	ee07 3a90 	vmov	s15, r3
 8012804:	f991 3000 	ldrsb.w	r3, [r1]
 8012808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801280c:	ee06 3a90 	vmov	s13, r3
 8012810:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012814:	f991 3002 	ldrsb.w	r3, [r1, #2]
 8012818:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801281c:	ee07 3a10 	vmov	s14, r3
 8012820:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8012824:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012828:	eee7 7a06 	vfma.f32	s15, s14, s12
 801282c:	edc0 7a00 	vstr	s15, [r0]
 8012830:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8012834:	ed92 5a01 	vldr	s10, [r2, #4]
 8012838:	edd2 5a00 	vldr	s11, [r2]
 801283c:	ed92 6a02 	vldr	s12, [r2, #8]
 8012840:	ee07 3a90 	vmov	s15, r3
 8012844:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8012848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801284c:	ee06 3a90 	vmov	s13, r3
 8012850:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012854:	f991 3005 	ldrsb.w	r3, [r1, #5]
 8012858:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801285c:	ee07 3a10 	vmov	s14, r3
 8012860:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8012864:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012868:	eee7 7a06 	vfma.f32	s15, s14, s12
 801286c:	edc0 7a01 	vstr	s15, [r0, #4]
 8012870:	f991 3007 	ldrsb.w	r3, [r1, #7]
 8012874:	ed92 5a01 	vldr	s10, [r2, #4]
 8012878:	edd2 5a00 	vldr	s11, [r2]
 801287c:	ed92 6a02 	vldr	s12, [r2, #8]
 8012880:	ee07 3a90 	vmov	s15, r3
 8012884:	f991 3006 	ldrsb.w	r3, [r1, #6]
 8012888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801288c:	ee06 3a90 	vmov	s13, r3
 8012890:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012894:	f991 3008 	ldrsb.w	r3, [r1, #8]
 8012898:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801289c:	ee07 3a10 	vmov	s14, r3
 80128a0:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80128a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80128a8:	eee7 7a06 	vfma.f32	s15, s14, s12
 80128ac:	edc0 7a02 	vstr	s15, [r0, #8]
 80128b0:	4770      	bx	lr
 80128b2:	bf00      	nop

080128b4 <findAxis>:
 80128b4:	f990 3000 	ldrsb.w	r3, [r0]
 80128b8:	2b01      	cmp	r3, #1
 80128ba:	d027      	beq.n	801290c <findAxis+0x58>
 80128bc:	3301      	adds	r3, #1
 80128be:	d00e      	beq.n	80128de <findAxis+0x2a>
 80128c0:	f990 3003 	ldrsb.w	r3, [r0, #3]
 80128c4:	2b01      	cmp	r3, #1
 80128c6:	d053      	beq.n	8012970 <findAxis+0xbc>
 80128c8:	3301      	adds	r3, #1
 80128ca:	d048      	beq.n	801295e <findAxis+0xaa>
 80128cc:	f990 3006 	ldrsb.w	r3, [r0, #6]
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	d053      	beq.n	801297c <findAxis+0xc8>
 80128d4:	3301      	adds	r3, #1
 80128d6:	d104      	bne.n	80128e2 <findAxis+0x2e>
 80128d8:	2364      	movs	r3, #100	; 0x64
 80128da:	700b      	strb	r3, [r1, #0]
 80128dc:	e001      	b.n	80128e2 <findAxis+0x2e>
 80128de:	2377      	movs	r3, #119	; 0x77
 80128e0:	700b      	strb	r3, [r1, #0]
 80128e2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80128e6:	2b01      	cmp	r3, #1
 80128e8:	d016      	beq.n	8012918 <findAxis+0x64>
 80128ea:	3301      	adds	r3, #1
 80128ec:	d02e      	beq.n	801294c <findAxis+0x98>
 80128ee:	f990 3004 	ldrsb.w	r3, [r0, #4]
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	d039      	beq.n	801296a <findAxis+0xb6>
 80128f6:	3301      	adds	r3, #1
 80128f8:	d034      	beq.n	8012964 <findAxis+0xb0>
 80128fa:	f990 3007 	ldrsb.w	r3, [r0, #7]
 80128fe:	2b01      	cmp	r3, #1
 8012900:	d03f      	beq.n	8012982 <findAxis+0xce>
 8012902:	3301      	adds	r3, #1
 8012904:	d10a      	bne.n	801291c <findAxis+0x68>
 8012906:	2364      	movs	r3, #100	; 0x64
 8012908:	704b      	strb	r3, [r1, #1]
 801290a:	e007      	b.n	801291c <findAxis+0x68>
 801290c:	2365      	movs	r3, #101	; 0x65
 801290e:	700b      	strb	r3, [r1, #0]
 8012910:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012914:	2b01      	cmp	r3, #1
 8012916:	d1e8      	bne.n	80128ea <findAxis+0x36>
 8012918:	2365      	movs	r3, #101	; 0x65
 801291a:	704b      	strb	r3, [r1, #1]
 801291c:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8012920:	2b01      	cmp	r3, #1
 8012922:	d010      	beq.n	8012946 <findAxis+0x92>
 8012924:	3301      	adds	r3, #1
 8012926:	d014      	beq.n	8012952 <findAxis+0x9e>
 8012928:	f990 3005 	ldrsb.w	r3, [r0, #5]
 801292c:	2b01      	cmp	r3, #1
 801292e:	d022      	beq.n	8012976 <findAxis+0xc2>
 8012930:	3301      	adds	r3, #1
 8012932:	d011      	beq.n	8012958 <findAxis+0xa4>
 8012934:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012938:	2b01      	cmp	r3, #1
 801293a:	d025      	beq.n	8012988 <findAxis+0xd4>
 801293c:	3301      	adds	r3, #1
 801293e:	bf04      	itt	eq
 8012940:	2364      	moveq	r3, #100	; 0x64
 8012942:	708b      	strbeq	r3, [r1, #2]
 8012944:	4770      	bx	lr
 8012946:	2365      	movs	r3, #101	; 0x65
 8012948:	708b      	strb	r3, [r1, #2]
 801294a:	4770      	bx	lr
 801294c:	2377      	movs	r3, #119	; 0x77
 801294e:	704b      	strb	r3, [r1, #1]
 8012950:	e7e4      	b.n	801291c <findAxis+0x68>
 8012952:	2377      	movs	r3, #119	; 0x77
 8012954:	708b      	strb	r3, [r1, #2]
 8012956:	4770      	bx	lr
 8012958:	2373      	movs	r3, #115	; 0x73
 801295a:	708b      	strb	r3, [r1, #2]
 801295c:	4770      	bx	lr
 801295e:	2373      	movs	r3, #115	; 0x73
 8012960:	700b      	strb	r3, [r1, #0]
 8012962:	e7be      	b.n	80128e2 <findAxis+0x2e>
 8012964:	2373      	movs	r3, #115	; 0x73
 8012966:	704b      	strb	r3, [r1, #1]
 8012968:	e7d8      	b.n	801291c <findAxis+0x68>
 801296a:	236e      	movs	r3, #110	; 0x6e
 801296c:	704b      	strb	r3, [r1, #1]
 801296e:	e7d5      	b.n	801291c <findAxis+0x68>
 8012970:	236e      	movs	r3, #110	; 0x6e
 8012972:	700b      	strb	r3, [r1, #0]
 8012974:	e7b5      	b.n	80128e2 <findAxis+0x2e>
 8012976:	236e      	movs	r3, #110	; 0x6e
 8012978:	708b      	strb	r3, [r1, #2]
 801297a:	4770      	bx	lr
 801297c:	2375      	movs	r3, #117	; 0x75
 801297e:	700b      	strb	r3, [r1, #0]
 8012980:	e7af      	b.n	80128e2 <findAxis+0x2e>
 8012982:	2375      	movs	r3, #117	; 0x75
 8012984:	704b      	strb	r3, [r1, #1]
 8012986:	e7c9      	b.n	801291c <findAxis+0x68>
 8012988:	2375      	movs	r3, #117	; 0x75
 801298a:	708b      	strb	r3, [r1, #2]
 801298c:	4770      	bx	lr
 801298e:	bf00      	nop

08012990 <findDirection>:
 8012990:	b5d0      	push	{r4, r6, r7, lr}
 8012992:	ed2d 8b04 	vpush	{d8-d9}
 8012996:	eef0 8ac0 	vabs.f32	s17, s0
 801299a:	eeb0 8ae0 	vabs.f32	s16, s1
 801299e:	eef4 8ac8 	vcmpe.f32	s17, s16
 80129a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a6:	4604      	mov	r4, r0
 80129a8:	eeb0 9ac1 	vabs.f32	s18, s2
 80129ac:	dd36      	ble.n	8012a1c <findDirection+0x8c>
 80129ae:	eef4 8ac9 	vcmpe.f32	s17, s18
 80129b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b6:	dd31      	ble.n	8012a1c <findDirection+0x8c>
 80129b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80129bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c0:	ee18 0a90 	vmov	r0, s17
 80129c4:	f340 8094 	ble.w	8012af0 <findDirection+0x160>
 80129c8:	f7ed fd8e 	bl	80004e8 <__aeabi_f2d>
 80129cc:	4606      	mov	r6, r0
 80129ce:	ee18 0a10 	vmov	r0, s16
 80129d2:	460f      	mov	r7, r1
 80129d4:	f7ed fd88 	bl	80004e8 <__aeabi_f2d>
 80129d8:	a387      	add	r3, pc, #540	; (adr r3, 8012bf8 <findDirection+0x268>)
 80129da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129de:	f7ed fddb 	bl	8000598 <__aeabi_dmul>
 80129e2:	4602      	mov	r2, r0
 80129e4:	460b      	mov	r3, r1
 80129e6:	4630      	mov	r0, r6
 80129e8:	4639      	mov	r1, r7
 80129ea:	f7ee f865 	bl	8000ab8 <__aeabi_dcmpgt>
 80129ee:	b188      	cbz	r0, 8012a14 <findDirection+0x84>
 80129f0:	ee19 0a10 	vmov	r0, s18
 80129f4:	f7ed fd78 	bl	80004e8 <__aeabi_f2d>
 80129f8:	a37f      	add	r3, pc, #508	; (adr r3, 8012bf8 <findDirection+0x268>)
 80129fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129fe:	f7ed fdcb 	bl	8000598 <__aeabi_dmul>
 8012a02:	4602      	mov	r2, r0
 8012a04:	460b      	mov	r3, r1
 8012a06:	4630      	mov	r0, r6
 8012a08:	4639      	mov	r1, r7
 8012a0a:	f7ee f855 	bl	8000ab8 <__aeabi_dcmpgt>
 8012a0e:	2800      	cmp	r0, #0
 8012a10:	bf18      	it	ne
 8012a12:	2404      	movne	r4, #4
 8012a14:	ecbd 8b04 	vpop	{d8-d9}
 8012a18:	4620      	mov	r0, r4
 8012a1a:	bdd0      	pop	{r4, r6, r7, pc}
 8012a1c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8012a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a24:	dd32      	ble.n	8012a8c <findDirection+0xfc>
 8012a26:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8012a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a2e:	ee18 0a10 	vmov	r0, s16
 8012a32:	f340 8086 	ble.w	8012b42 <findDirection+0x1b2>
 8012a36:	f7ed fd57 	bl	80004e8 <__aeabi_f2d>
 8012a3a:	4606      	mov	r6, r0
 8012a3c:	ee18 0a90 	vmov	r0, s17
 8012a40:	460f      	mov	r7, r1
 8012a42:	f7ed fd51 	bl	80004e8 <__aeabi_f2d>
 8012a46:	a36c      	add	r3, pc, #432	; (adr r3, 8012bf8 <findDirection+0x268>)
 8012a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4c:	f7ed fda4 	bl	8000598 <__aeabi_dmul>
 8012a50:	4602      	mov	r2, r0
 8012a52:	460b      	mov	r3, r1
 8012a54:	4630      	mov	r0, r6
 8012a56:	4639      	mov	r1, r7
 8012a58:	f7ee f82e 	bl	8000ab8 <__aeabi_dcmpgt>
 8012a5c:	2800      	cmp	r0, #0
 8012a5e:	d0d9      	beq.n	8012a14 <findDirection+0x84>
 8012a60:	ee19 0a10 	vmov	r0, s18
 8012a64:	f7ed fd40 	bl	80004e8 <__aeabi_f2d>
 8012a68:	a363      	add	r3, pc, #396	; (adr r3, 8012bf8 <findDirection+0x268>)
 8012a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6e:	f7ed fd93 	bl	8000598 <__aeabi_dmul>
 8012a72:	4602      	mov	r2, r0
 8012a74:	460b      	mov	r3, r1
 8012a76:	4630      	mov	r0, r6
 8012a78:	4639      	mov	r1, r7
 8012a7a:	f7ee f81d 	bl	8000ab8 <__aeabi_dcmpgt>
 8012a7e:	ecbd 8b04 	vpop	{d8-d9}
 8012a82:	2800      	cmp	r0, #0
 8012a84:	bf18      	it	ne
 8012a86:	2401      	movne	r4, #1
 8012a88:	4620      	mov	r0, r4
 8012a8a:	bdd0      	pop	{r4, r6, r7, pc}
 8012a8c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8012a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a94:	ee19 0a10 	vmov	r0, s18
 8012a98:	dd7f      	ble.n	8012b9a <findDirection+0x20a>
 8012a9a:	f7ed fd25 	bl	80004e8 <__aeabi_f2d>
 8012a9e:	4606      	mov	r6, r0
 8012aa0:	ee18 0a10 	vmov	r0, s16
 8012aa4:	460f      	mov	r7, r1
 8012aa6:	f7ed fd1f 	bl	80004e8 <__aeabi_f2d>
 8012aaa:	a353      	add	r3, pc, #332	; (adr r3, 8012bf8 <findDirection+0x268>)
 8012aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab0:	f7ed fd72 	bl	8000598 <__aeabi_dmul>
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	460b      	mov	r3, r1
 8012ab8:	4630      	mov	r0, r6
 8012aba:	4639      	mov	r1, r7
 8012abc:	f7ed fffc 	bl	8000ab8 <__aeabi_dcmpgt>
 8012ac0:	2800      	cmp	r0, #0
 8012ac2:	d0a7      	beq.n	8012a14 <findDirection+0x84>
 8012ac4:	ee18 0a90 	vmov	r0, s17
 8012ac8:	f7ed fd0e 	bl	80004e8 <__aeabi_f2d>
 8012acc:	a34a      	add	r3, pc, #296	; (adr r3, 8012bf8 <findDirection+0x268>)
 8012ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad2:	f7ed fd61 	bl	8000598 <__aeabi_dmul>
 8012ad6:	4602      	mov	r2, r0
 8012ad8:	460b      	mov	r3, r1
 8012ada:	4630      	mov	r0, r6
 8012adc:	4639      	mov	r1, r7
 8012ade:	f7ed ffeb 	bl	8000ab8 <__aeabi_dcmpgt>
 8012ae2:	ecbd 8b04 	vpop	{d8-d9}
 8012ae6:	2800      	cmp	r0, #0
 8012ae8:	bf18      	it	ne
 8012aea:	2400      	movne	r4, #0
 8012aec:	4620      	mov	r0, r4
 8012aee:	bdd0      	pop	{r4, r6, r7, pc}
 8012af0:	f7ed fcfa 	bl	80004e8 <__aeabi_f2d>
 8012af4:	4606      	mov	r6, r0
 8012af6:	ee18 0a10 	vmov	r0, s16
 8012afa:	460f      	mov	r7, r1
 8012afc:	f7ed fcf4 	bl	80004e8 <__aeabi_f2d>
 8012b00:	a33d      	add	r3, pc, #244	; (adr r3, 8012bf8 <findDirection+0x268>)
 8012b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b06:	f7ed fd47 	bl	8000598 <__aeabi_dmul>
 8012b0a:	4602      	mov	r2, r0
 8012b0c:	460b      	mov	r3, r1
 8012b0e:	4630      	mov	r0, r6
 8012b10:	4639      	mov	r1, r7
 8012b12:	f7ed ffd1 	bl	8000ab8 <__aeabi_dcmpgt>
 8012b16:	2800      	cmp	r0, #0
 8012b18:	f43f af7c 	beq.w	8012a14 <findDirection+0x84>
 8012b1c:	ee19 0a10 	vmov	r0, s18
 8012b20:	f7ed fce2 	bl	80004e8 <__aeabi_f2d>
 8012b24:	a334      	add	r3, pc, #208	; (adr r3, 8012bf8 <findDirection+0x268>)
 8012b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2a:	f7ed fd35 	bl	8000598 <__aeabi_dmul>
 8012b2e:	4602      	mov	r2, r0
 8012b30:	460b      	mov	r3, r1
 8012b32:	4630      	mov	r0, r6
 8012b34:	4639      	mov	r1, r7
 8012b36:	f7ed ffbf 	bl	8000ab8 <__aeabi_dcmpgt>
 8012b3a:	2800      	cmp	r0, #0
 8012b3c:	bf18      	it	ne
 8012b3e:	2405      	movne	r4, #5
 8012b40:	e768      	b.n	8012a14 <findDirection+0x84>
 8012b42:	f7ed fcd1 	bl	80004e8 <__aeabi_f2d>
 8012b46:	4606      	mov	r6, r0
 8012b48:	ee18 0a90 	vmov	r0, s17
 8012b4c:	460f      	mov	r7, r1
 8012b4e:	f7ed fccb 	bl	80004e8 <__aeabi_f2d>
 8012b52:	a329      	add	r3, pc, #164	; (adr r3, 8012bf8 <findDirection+0x268>)
 8012b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b58:	f7ed fd1e 	bl	8000598 <__aeabi_dmul>
 8012b5c:	4602      	mov	r2, r0
 8012b5e:	460b      	mov	r3, r1
 8012b60:	4630      	mov	r0, r6
 8012b62:	4639      	mov	r1, r7
 8012b64:	f7ed ffa8 	bl	8000ab8 <__aeabi_dcmpgt>
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	f43f af53 	beq.w	8012a14 <findDirection+0x84>
 8012b6e:	ee19 0a10 	vmov	r0, s18
 8012b72:	f7ed fcb9 	bl	80004e8 <__aeabi_f2d>
 8012b76:	a320      	add	r3, pc, #128	; (adr r3, 8012bf8 <findDirection+0x268>)
 8012b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7c:	f7ed fd0c 	bl	8000598 <__aeabi_dmul>
 8012b80:	4602      	mov	r2, r0
 8012b82:	460b      	mov	r3, r1
 8012b84:	4630      	mov	r0, r6
 8012b86:	4639      	mov	r1, r7
 8012b88:	f7ed ff96 	bl	8000ab8 <__aeabi_dcmpgt>
 8012b8c:	ecbd 8b04 	vpop	{d8-d9}
 8012b90:	2800      	cmp	r0, #0
 8012b92:	bf18      	it	ne
 8012b94:	2403      	movne	r4, #3
 8012b96:	4620      	mov	r0, r4
 8012b98:	bdd0      	pop	{r4, r6, r7, pc}
 8012b9a:	f7ed fca5 	bl	80004e8 <__aeabi_f2d>
 8012b9e:	4606      	mov	r6, r0
 8012ba0:	ee18 0a10 	vmov	r0, s16
 8012ba4:	460f      	mov	r7, r1
 8012ba6:	f7ed fc9f 	bl	80004e8 <__aeabi_f2d>
 8012baa:	a313      	add	r3, pc, #76	; (adr r3, 8012bf8 <findDirection+0x268>)
 8012bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb0:	f7ed fcf2 	bl	8000598 <__aeabi_dmul>
 8012bb4:	4602      	mov	r2, r0
 8012bb6:	460b      	mov	r3, r1
 8012bb8:	4630      	mov	r0, r6
 8012bba:	4639      	mov	r1, r7
 8012bbc:	f7ed ff7c 	bl	8000ab8 <__aeabi_dcmpgt>
 8012bc0:	2800      	cmp	r0, #0
 8012bc2:	f43f af27 	beq.w	8012a14 <findDirection+0x84>
 8012bc6:	ee18 0a90 	vmov	r0, s17
 8012bca:	f7ed fc8d 	bl	80004e8 <__aeabi_f2d>
 8012bce:	a30a      	add	r3, pc, #40	; (adr r3, 8012bf8 <findDirection+0x268>)
 8012bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd4:	f7ed fce0 	bl	8000598 <__aeabi_dmul>
 8012bd8:	4602      	mov	r2, r0
 8012bda:	460b      	mov	r3, r1
 8012bdc:	4630      	mov	r0, r6
 8012bde:	4639      	mov	r1, r7
 8012be0:	f7ed ff6a 	bl	8000ab8 <__aeabi_dcmpgt>
 8012be4:	ecbd 8b04 	vpop	{d8-d9}
 8012be8:	2800      	cmp	r0, #0
 8012bea:	bf18      	it	ne
 8012bec:	2402      	movne	r4, #2
 8012bee:	4620      	mov	r0, r4
 8012bf0:	bdd0      	pop	{r4, r6, r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	f3af 8000 	nop.w
 8012bf8:	e0000000 	.word	0xe0000000
 8012bfc:	3ff6b851 	.word	0x3ff6b851

08012c00 <updateOrientation>:
 8012c00:	b410      	push	{r4}
 8012c02:	2300      	movs	r3, #0
 8012c04:	6003      	str	r3, [r0, #0]
 8012c06:	6043      	str	r3, [r0, #4]
 8012c08:	7203      	strb	r3, [r0, #8]
 8012c0a:	780c      	ldrb	r4, [r1, #0]
 8012c0c:	784a      	ldrb	r2, [r1, #1]
 8012c0e:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 8012c12:	2b17      	cmp	r3, #23
 8012c14:	bf98      	it	ls
 8012c16:	3420      	addls	r4, #32
 8012c18:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 8012c1c:	bf98      	it	ls
 8012c1e:	b2e4      	uxtbls	r4, r4
 8012c20:	2b17      	cmp	r3, #23
 8012c22:	788b      	ldrb	r3, [r1, #2]
 8012c24:	bf98      	it	ls
 8012c26:	3220      	addls	r2, #32
 8012c28:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 8012c2c:	bf98      	it	ls
 8012c2e:	b2d2      	uxtbls	r2, r2
 8012c30:	2917      	cmp	r1, #23
 8012c32:	bf98      	it	ls
 8012c34:	3320      	addls	r3, #32
 8012c36:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 8012c3a:	bf98      	it	ls
 8012c3c:	b2db      	uxtbls	r3, r3
 8012c3e:	2c13      	cmp	r4, #19
 8012c40:	d80d      	bhi.n	8012c5e <updateOrientation+0x5e>
 8012c42:	e8df f004 	tbb	[pc, r4]
 8012c46:	0a36      	.short	0x0a36
 8012c48:	0c0c0c0c 	.word	0x0c0c0c0c
 8012c4c:	0c0c0c0c 	.word	0x0c0c0c0c
 8012c50:	0c0c0c39 	.word	0x0c0c0c39
 8012c54:	3f0c3c0c 	.word	0x3f0c3c0c
 8012c58:	420c      	.short	0x420c
 8012c5a:	2101      	movs	r1, #1
 8012c5c:	7001      	strb	r1, [r0, #0]
 8012c5e:	3a64      	subs	r2, #100	; 0x64
 8012c60:	2a13      	cmp	r2, #19
 8012c62:	d80d      	bhi.n	8012c80 <updateOrientation+0x80>
 8012c64:	e8df f002 	tbb	[pc, r2]
 8012c68:	0c0c0a34 	.word	0x0c0c0a34
 8012c6c:	0c0c0c0c 	.word	0x0c0c0c0c
 8012c70:	0c370c0c 	.word	0x0c370c0c
 8012c74:	3a0c0c0c 	.word	0x3a0c0c0c
 8012c78:	400c3d0c 	.word	0x400c3d0c
 8012c7c:	2201      	movs	r2, #1
 8012c7e:	7042      	strb	r2, [r0, #1]
 8012c80:	3b64      	subs	r3, #100	; 0x64
 8012c82:	2b13      	cmp	r3, #19
 8012c84:	d80d      	bhi.n	8012ca2 <updateOrientation+0xa2>
 8012c86:	e8df f003 	tbb	[pc, r3]
 8012c8a:	320a      	.short	0x320a
 8012c8c:	0c0c0c0c 	.word	0x0c0c0c0c
 8012c90:	0c0c0c0c 	.word	0x0c0c0c0c
 8012c94:	0c0c0c37 	.word	0x0c0c0c37
 8012c98:	410c3c0c 	.word	0x410c3c0c
 8012c9c:	0f0c      	.short	0x0f0c
 8012c9e:	23ff      	movs	r3, #255	; 0xff
 8012ca0:	7203      	strb	r3, [r0, #8]
 8012ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ca6:	4770      	bx	lr
 8012ca8:	23ff      	movs	r3, #255	; 0xff
 8012caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cae:	7083      	strb	r3, [r0, #2]
 8012cb0:	4770      	bx	lr
 8012cb2:	21ff      	movs	r1, #255	; 0xff
 8012cb4:	7181      	strb	r1, [r0, #6]
 8012cb6:	e7d2      	b.n	8012c5e <updateOrientation+0x5e>
 8012cb8:	2101      	movs	r1, #1
 8012cba:	70c1      	strb	r1, [r0, #3]
 8012cbc:	e7cf      	b.n	8012c5e <updateOrientation+0x5e>
 8012cbe:	21ff      	movs	r1, #255	; 0xff
 8012cc0:	70c1      	strb	r1, [r0, #3]
 8012cc2:	e7cc      	b.n	8012c5e <updateOrientation+0x5e>
 8012cc4:	2101      	movs	r1, #1
 8012cc6:	7181      	strb	r1, [r0, #6]
 8012cc8:	e7c9      	b.n	8012c5e <updateOrientation+0x5e>
 8012cca:	21ff      	movs	r1, #255	; 0xff
 8012ccc:	7001      	strb	r1, [r0, #0]
 8012cce:	e7c6      	b.n	8012c5e <updateOrientation+0x5e>
 8012cd0:	22ff      	movs	r2, #255	; 0xff
 8012cd2:	71c2      	strb	r2, [r0, #7]
 8012cd4:	e7d4      	b.n	8012c80 <updateOrientation+0x80>
 8012cd6:	2201      	movs	r2, #1
 8012cd8:	7102      	strb	r2, [r0, #4]
 8012cda:	e7d1      	b.n	8012c80 <updateOrientation+0x80>
 8012cdc:	22ff      	movs	r2, #255	; 0xff
 8012cde:	7102      	strb	r2, [r0, #4]
 8012ce0:	e7ce      	b.n	8012c80 <updateOrientation+0x80>
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	71c2      	strb	r2, [r0, #7]
 8012ce6:	e7cb      	b.n	8012c80 <updateOrientation+0x80>
 8012ce8:	22ff      	movs	r2, #255	; 0xff
 8012cea:	7042      	strb	r2, [r0, #1]
 8012cec:	e7c8      	b.n	8012c80 <updateOrientation+0x80>
 8012cee:	2301      	movs	r3, #1
 8012cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cf4:	7083      	strb	r3, [r0, #2]
 8012cf6:	4770      	bx	lr
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cfe:	7143      	strb	r3, [r0, #5]
 8012d00:	4770      	bx	lr
 8012d02:	23ff      	movs	r3, #255	; 0xff
 8012d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d08:	7143      	strb	r3, [r0, #5]
 8012d0a:	4770      	bx	lr
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d12:	7203      	strb	r3, [r0, #8]
 8012d14:	4770      	bx	lr
 8012d16:	bf00      	nop

08012d18 <qmult>:
 8012d18:	ed91 2a03 	vldr	s4, [r1, #12]
 8012d1c:	ed90 3a01 	vldr	s6, [r0, #4]
 8012d20:	edd0 5a02 	vldr	s11, [r0, #8]
 8012d24:	edd1 4a01 	vldr	s9, [r1, #4]
 8012d28:	ed90 4a00 	vldr	s8, [r0]
 8012d2c:	edd1 3a00 	vldr	s7, [r1]
 8012d30:	ed91 5a02 	vldr	s10, [r1, #8]
 8012d34:	edd0 2a03 	vldr	s5, [r0, #12]
 8012d38:	ee25 6aa4 	vmul.f32	s12, s11, s9
 8012d3c:	ee62 6a03 	vmul.f32	s13, s4, s6
 8012d40:	ee22 7a25 	vmul.f32	s14, s4, s11
 8012d44:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 8012d48:	eea4 6a02 	vfma.f32	s12, s8, s4
 8012d4c:	eee4 6a05 	vfma.f32	s13, s8, s10
 8012d50:	eea3 7a23 	vfma.f32	s14, s6, s7
 8012d54:	eee4 7a63 	vfms.f32	s15, s8, s7
 8012d58:	eea2 6aa3 	vfma.f32	s12, s5, s7
 8012d5c:	eee4 6aa2 	vfma.f32	s13, s9, s5
 8012d60:	eea5 7a22 	vfma.f32	s14, s10, s5
 8012d64:	eee2 7a22 	vfma.f32	s15, s4, s5
 8012d68:	eea3 6a45 	vfms.f32	s12, s6, s10
 8012d6c:	eee5 6ae3 	vfms.f32	s13, s11, s7
 8012d70:	eea4 7a64 	vfms.f32	s14, s8, s9
 8012d74:	eee5 7a65 	vfms.f32	s15, s10, s11
 8012d78:	ed82 6a00 	vstr	s12, [r2]
 8012d7c:	edc2 6a01 	vstr	s13, [r2, #4]
 8012d80:	ed82 7a02 	vstr	s14, [r2, #8]
 8012d84:	edc2 7a03 	vstr	s15, [r2, #12]
 8012d88:	4770      	bx	lr
 8012d8a:	bf00      	nop

08012d8c <MEMS_setMagIndexToOne>:
 8012d8c:	291f      	cmp	r1, #31
 8012d8e:	b430      	push	{r4, r5}
 8012d90:	d920      	bls.n	8012dd4 <MEMS_setMagIndexToOne+0x48>
 8012d92:	6885      	ldr	r5, [r0, #8]
 8012d94:	3920      	subs	r1, #32
 8012d96:	2401      	movs	r4, #1
 8012d98:	fa04 f101 	lsl.w	r1, r4, r1
 8012d9c:	ea21 0105 	bic.w	r1, r1, r5
 8012da0:	4069      	eors	r1, r5
 8012da2:	2a1f      	cmp	r2, #31
 8012da4:	6081      	str	r1, [r0, #8]
 8012da6:	d91f      	bls.n	8012de8 <MEMS_setMagIndexToOne+0x5c>
 8012da8:	6901      	ldr	r1, [r0, #16]
 8012daa:	f1a2 0420 	sub.w	r4, r2, #32
 8012dae:	2201      	movs	r2, #1
 8012db0:	40a2      	lsls	r2, r4
 8012db2:	ea22 0201 	bic.w	r2, r2, r1
 8012db6:	404a      	eors	r2, r1
 8012db8:	2b1f      	cmp	r3, #31
 8012dba:	6102      	str	r2, [r0, #16]
 8012dbc:	d91e      	bls.n	8012dfc <MEMS_setMagIndexToOne+0x70>
 8012dbe:	69c2      	ldr	r2, [r0, #28]
 8012dc0:	f1a3 0120 	sub.w	r1, r3, #32
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	408b      	lsls	r3, r1
 8012dc8:	ea23 0302 	bic.w	r3, r3, r2
 8012dcc:	4053      	eors	r3, r2
 8012dce:	bc30      	pop	{r4, r5}
 8012dd0:	61c3      	str	r3, [r0, #28]
 8012dd2:	4770      	bx	lr
 8012dd4:	68c5      	ldr	r5, [r0, #12]
 8012dd6:	2401      	movs	r4, #1
 8012dd8:	fa04 f101 	lsl.w	r1, r4, r1
 8012ddc:	ea21 0105 	bic.w	r1, r1, r5
 8012de0:	4069      	eors	r1, r5
 8012de2:	2a1f      	cmp	r2, #31
 8012de4:	60c1      	str	r1, [r0, #12]
 8012de6:	d8df      	bhi.n	8012da8 <MEMS_setMagIndexToOne+0x1c>
 8012de8:	6944      	ldr	r4, [r0, #20]
 8012dea:	2101      	movs	r1, #1
 8012dec:	fa01 f202 	lsl.w	r2, r1, r2
 8012df0:	ea22 0204 	bic.w	r2, r2, r4
 8012df4:	4062      	eors	r2, r4
 8012df6:	2b1f      	cmp	r3, #31
 8012df8:	6142      	str	r2, [r0, #20]
 8012dfa:	d8e0      	bhi.n	8012dbe <MEMS_setMagIndexToOne+0x32>
 8012dfc:	6981      	ldr	r1, [r0, #24]
 8012dfe:	2201      	movs	r2, #1
 8012e00:	fa02 f303 	lsl.w	r3, r2, r3
 8012e04:	ea23 0301 	bic.w	r3, r3, r1
 8012e08:	404b      	eors	r3, r1
 8012e0a:	bc30      	pop	{r4, r5}
 8012e0c:	6183      	str	r3, [r0, #24]
 8012e0e:	4770      	bx	lr

08012e10 <getRotationMatrix>:
 8012e10:	b538      	push	{r3, r4, r5, lr}
 8012e12:	4605      	mov	r5, r0
 8012e14:	460c      	mov	r4, r1
 8012e16:	4610      	mov	r0, r2
 8012e18:	2100      	movs	r1, #0
 8012e1a:	2224      	movs	r2, #36	; 0x24
 8012e1c:	f00f ffb8 	bl	8022d90 <memset>
 8012e20:	edd5 5a00 	vldr	s11, [r5]
 8012e24:	ed9f 3a49 	vldr	s6, [pc, #292]	; 8012f4c <getRotationMatrix+0x13c>
 8012e28:	edc0 5a02 	vstr	s11, [r0, #8]
 8012e2c:	ed95 7a01 	vldr	s14, [r5, #4]
 8012e30:	ed80 7a05 	vstr	s14, [r0, #20]
 8012e34:	ed95 5a02 	vldr	s10, [r5, #8]
 8012e38:	ed80 5a08 	vstr	s10, [r0, #32]
 8012e3c:	ed94 4a02 	vldr	s8, [r4, #8]
 8012e40:	edd4 3a01 	vldr	s7, [r4, #4]
 8012e44:	edd4 4a00 	vldr	s9, [r4]
 8012e48:	ee67 7a44 	vnmul.f32	s15, s14, s8
 8012e4c:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 8012e50:	eee3 7a85 	vfma.f32	s15, s7, s10
 8012e54:	4603      	mov	r3, r0
 8012e56:	eee4 6a87 	vfma.f32	s13, s9, s14
 8012e5a:	eeb0 7ae7 	vabs.f32	s14, s15
 8012e5e:	eeb4 7ac3 	vcmpe.f32	s14, s6
 8012e62:	ee25 6a64 	vnmul.f32	s12, s10, s9
 8012e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e6a:	eea4 6a25 	vfma.f32	s12, s8, s11
 8012e6e:	bfdc      	itt	le
 8012e70:	eec7 5a83 	vdivle.f32	s11, s15, s6
 8012e74:	eeb0 7a43 	vmovle.f32	s14, s6
 8012e78:	eeb0 5ac6 	vabs.f32	s10, s12
 8012e7c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012e80:	edc0 6a06 	vstr	s13, [r0, #24]
 8012e84:	bfd4      	ite	le
 8012e86:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 8012e8a:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 8012e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e92:	ed80 6a03 	vstr	s12, [r0, #12]
 8012e96:	edc0 7a00 	vstr	s15, [r0]
 8012e9a:	d447      	bmi.n	8012f2c <getRotationMatrix+0x11c>
 8012e9c:	eec6 5a07 	vdiv.f32	s11, s12, s14
 8012ea0:	eee5 6aa5 	vfma.f32	s13, s11, s11
 8012ea4:	eef0 5a66 	vmov.f32	s11, s13
 8012ea8:	edd3 6a06 	vldr	s13, [r3, #24]
 8012eac:	eeb0 5ae6 	vabs.f32	s10, s13
 8012eb0:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eb8:	d543      	bpl.n	8012f42 <getRotationMatrix+0x132>
 8012eba:	eec7 4a05 	vdiv.f32	s9, s14, s10
 8012ebe:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8012ec2:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8012ec6:	eeb0 7a45 	vmov.f32	s14, s10
 8012eca:	eea5 4aa4 	vfma.f32	s8, s11, s9
 8012ece:	eef0 5a44 	vmov.f32	s11, s8
 8012ed2:	eeb1 5ae5 	vsqrt.f32	s10, s11
 8012ed6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8012eda:	ee65 5a07 	vmul.f32	s11, s10, s14
 8012ede:	edd3 3a08 	vldr	s7, [r3, #32]
 8012ee2:	edd3 4a02 	vldr	s9, [r3, #8]
 8012ee6:	ed93 4a05 	vldr	s8, [r3, #20]
 8012eea:	ee83 7a25 	vdiv.f32	s14, s6, s11
 8012eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012ef2:	ee26 6a07 	vmul.f32	s12, s12, s14
 8012ef6:	ee26 7a87 	vmul.f32	s14, s13, s14
 8012efa:	ee66 5a63 	vnmul.f32	s11, s12, s7
 8012efe:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 8012f02:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 8012f06:	eea3 5aa7 	vfma.f32	s10, s7, s15
 8012f0a:	eee4 5a07 	vfma.f32	s11, s8, s14
 8012f0e:	eee6 6a24 	vfma.f32	s13, s12, s9
 8012f12:	edc3 7a00 	vstr	s15, [r3]
 8012f16:	ed83 6a03 	vstr	s12, [r3, #12]
 8012f1a:	ed83 7a06 	vstr	s14, [r3, #24]
 8012f1e:	ed83 5a04 	vstr	s10, [r3, #16]
 8012f22:	edc3 5a01 	vstr	s11, [r3, #4]
 8012f26:	edc3 6a07 	vstr	s13, [r3, #28]
 8012f2a:	bd38      	pop	{r3, r4, r5, pc}
 8012f2c:	eec7 4a05 	vdiv.f32	s9, s14, s10
 8012f30:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012f34:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8012f38:	eeb0 7a45 	vmov.f32	s14, s10
 8012f3c:	eee6 5aa4 	vfma.f32	s11, s13, s9
 8012f40:	e7b2      	b.n	8012ea8 <getRotationMatrix+0x98>
 8012f42:	ee86 5a87 	vdiv.f32	s10, s13, s14
 8012f46:	eee5 5a05 	vfma.f32	s11, s10, s10
 8012f4a:	e7c2      	b.n	8012ed2 <getRotationMatrix+0xc2>
 8012f4c:	00000000 	.word	0x00000000

08012f50 <b_dcm2q>:
 8012f50:	ed90 5a08 	vldr	s10, [r0, #32]
 8012f54:	edd0 7a00 	vldr	s15, [r0]
 8012f58:	edd0 6a04 	vldr	s13, [r0, #16]
 8012f5c:	ee37 7a85 	vadd.f32	s14, s15, s10
 8012f60:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8012f64:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012f68:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 8012f6c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8012f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f74:	bfc5      	ittet	gt
 8012f76:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 8012f7a:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 8012f7e:	eddf 5a43 	vldrle	s11, [pc, #268]	; 801308c <b_dcm2q+0x13c>
 8012f82:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 8012f86:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8012f8a:	ee35 6a47 	vsub.f32	s12, s10, s14
 8012f8e:	ee35 7a07 	vadd.f32	s14, s10, s14
 8012f92:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8012f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f9a:	bfc5      	ittet	gt
 8012f9c:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 8012fa0:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 8012fa4:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 801308c <b_dcm2q+0x13c>
 8012fa8:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 8012fac:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 8012fb0:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8012fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fb8:	dd5b      	ble.n	8013072 <b_dcm2q+0x122>
 8012fba:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8012fbe:	ee37 7a24 	vadd.f32	s14, s14, s9
 8012fc2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8012fc6:	eef1 4ac7 	vsqrt.f32	s9, s14
 8012fca:	ee64 4a84 	vmul.f32	s9, s9, s8
 8012fce:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012fd2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012fd6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012fda:	edd0 6a07 	vldr	s13, [r0, #28]
 8012fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fe6:	bf85      	ittet	hi
 8012fe8:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 8012fec:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 8012ff0:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 801308c <b_dcm2q+0x13c>
 8012ff4:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 8012ff8:	edd0 7a05 	vldr	s15, [r0, #20]
 8012ffc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013000:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013008:	d43c      	bmi.n	8013084 <b_dcm2q+0x134>
 801300a:	bfd8      	it	le
 801300c:	ee27 7a27 	vmulle.f32	s14, s14, s15
 8013010:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013018:	ed81 7a00 	vstr	s14, [r1]
 801301c:	edd0 7a06 	vldr	s15, [r0, #24]
 8013020:	ed90 7a02 	vldr	s14, [r0, #8]
 8013024:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801302c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013030:	d425      	bmi.n	801307e <b_dcm2q+0x12e>
 8013032:	bfd8      	it	le
 8013034:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 8013038:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801303c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8013040:	edc1 5a01 	vstr	s11, [r1, #4]
 8013044:	edd0 7a01 	vldr	s15, [r0, #4]
 8013048:	ed90 7a03 	vldr	s14, [r0, #12]
 801304c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013058:	d40e      	bmi.n	8013078 <b_dcm2q+0x128>
 801305a:	bfd8      	it	le
 801305c:	ee26 6a27 	vmulle.f32	s12, s12, s15
 8013060:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013064:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013068:	edc1 4a03 	vstr	s9, [r1, #12]
 801306c:	ed81 6a02 	vstr	s12, [r1, #8]
 8013070:	4770      	bx	lr
 8013072:	eddf 4a06 	vldr	s9, [pc, #24]	; 801308c <b_dcm2q+0x13c>
 8013076:	e7aa      	b.n	8012fce <b_dcm2q+0x7e>
 8013078:	eeb1 6a46 	vneg.f32	s12, s12
 801307c:	e7f0      	b.n	8013060 <b_dcm2q+0x110>
 801307e:	eef1 5a65 	vneg.f32	s11, s11
 8013082:	e7d9      	b.n	8013038 <b_dcm2q+0xe8>
 8013084:	eeb1 7a47 	vneg.f32	s14, s14
 8013088:	e7c2      	b.n	8013010 <b_dcm2q+0xc0>
 801308a:	bf00      	nop
 801308c:	00000000 	.word	0x00000000

08013090 <q2hpr>:
 8013090:	b538      	push	{r3, r4, r5, lr}
 8013092:	ed90 7a00 	vldr	s14, [r0]
 8013096:	edd0 6a01 	vldr	s13, [r0, #4]
 801309a:	edd0 7a02 	vldr	s15, [r0, #8]
 801309e:	ed90 4a03 	vldr	s8, [r0, #12]
 80130a2:	ed2d 8b0a 	vpush	{d8-d12}
 80130a6:	ee67 4a27 	vmul.f32	s9, s14, s15
 80130aa:	ee27 8a26 	vmul.f32	s16, s14, s13
 80130ae:	ee26 5aa7 	vmul.f32	s10, s13, s15
 80130b2:	ee27 6a07 	vmul.f32	s12, s14, s14
 80130b6:	ee26 aaa6 	vmul.f32	s20, s13, s13
 80130ba:	ee67 5aa7 	vmul.f32	s11, s15, s15
 80130be:	ee27 7a04 	vmul.f32	s14, s14, s8
 80130c2:	ee66 6a84 	vmul.f32	s13, s13, s8
 80130c6:	ee67 7a84 	vmul.f32	s15, s15, s8
 80130ca:	ee78 aa08 	vadd.f32	s21, s16, s16
 80130ce:	ee76 9a06 	vadd.f32	s19, s12, s12
 80130d2:	ee3a aa0a 	vadd.f32	s20, s20, s20
 80130d6:	ee34 caa4 	vadd.f32	s24, s9, s9
 80130da:	ee35 baa5 	vadd.f32	s22, s11, s11
 80130de:	ee77 8a07 	vadd.f32	s17, s14, s14
 80130e2:	ee75 ba05 	vadd.f32	s23, s10, s10
 80130e6:	ee36 9aa6 	vadd.f32	s18, s13, s13
 80130ea:	ee37 8aa7 	vadd.f32	s16, s15, s15
 80130ee:	460c      	mov	r4, r1
 80130f0:	bbd2      	cbnz	r2, 8013168 <q2hpr+0xd8>
 80130f2:	ee79 5a8b 	vadd.f32	s11, s19, s22
 80130f6:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 80130fa:	ee7b 7a65 	vsub.f32	s15, s22, s11
 80130fe:	ee17 1a90 	vmov	r1, s15
 8013102:	ee7a 7ac8 	vsub.f32	s15, s21, s16
 8013106:	ee17 0a90 	vmov	r0, s15
 801310a:	f00e fbd9 	bl	80218c0 <atan2f>
 801310e:	ee78 7aab 	vadd.f32	s15, s17, s23
 8013112:	ee08 0a10 	vmov	s16, r0
 8013116:	ee17 0a90 	vmov	r0, s15
 801311a:	ed84 8a00 	vstr	s16, [r4]
 801311e:	f00e fba3 	bl	8021868 <asinf>
 8013122:	ee39 6a8a 	vadd.f32	s12, s19, s20
 8013126:	ee7c 7a49 	vsub.f32	s15, s24, s18
 801312a:	4603      	mov	r3, r0
 801312c:	ee17 0a90 	vmov	r0, s15
 8013130:	ee7b 7a46 	vsub.f32	s15, s22, s12
 8013134:	ee17 1a90 	vmov	r1, s15
 8013138:	ee07 3a90 	vmov	s15, r3
 801313c:	eef1 8a67 	vneg.f32	s17, s15
 8013140:	f00e fbbe 	bl	80218c0 <atan2f>
 8013144:	4605      	mov	r5, r0
 8013146:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801314e:	60a5      	str	r5, [r4, #8]
 8013150:	edc4 8a01 	vstr	s17, [r4, #4]
 8013154:	d505      	bpl.n	8013162 <q2hpr+0xd2>
 8013156:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80131c0 <q2hpr+0x130>
 801315a:	ee38 8a27 	vadd.f32	s16, s16, s15
 801315e:	ed84 8a00 	vstr	s16, [r4]
 8013162:	ecbd 8b0a 	vpop	{d8-d12}
 8013166:	bd38      	pop	{r3, r4, r5, pc}
 8013168:	ee7c 7a49 	vsub.f32	s15, s24, s18
 801316c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013170:	ee17 0a90 	vmov	r0, s15
 8013174:	f00e fb78 	bl	8021868 <asinf>
 8013178:	ee39 6a8a 	vadd.f32	s12, s19, s20
 801317c:	4605      	mov	r5, r0
 801317e:	ee79 7a46 	vsub.f32	s15, s18, s12
 8013182:	ee3a 8a88 	vadd.f32	s16, s21, s16
 8013186:	ee17 1a90 	vmov	r1, s15
 801318a:	ee78 7aab 	vadd.f32	s15, s17, s23
 801318e:	ee17 0a90 	vmov	r0, s15
 8013192:	f00e fb95 	bl	80218c0 <atan2f>
 8013196:	ee3a 6a0b 	vadd.f32	s12, s20, s22
 801319a:	4603      	mov	r3, r0
 801319c:	ee79 7a46 	vsub.f32	s15, s18, s12
 80131a0:	ee17 1a90 	vmov	r1, s15
 80131a4:	eef1 7a48 	vneg.f32	s15, s16
 80131a8:	ee17 0a90 	vmov	r0, s15
 80131ac:	ee07 3a90 	vmov	s15, r3
 80131b0:	eef1 8a67 	vneg.f32	s17, s15
 80131b4:	f00e fb84 	bl	80218c0 <atan2f>
 80131b8:	ee08 0a10 	vmov	s16, r0
 80131bc:	6020      	str	r0, [r4, #0]
 80131be:	e7c2      	b.n	8013146 <q2hpr+0xb6>
 80131c0:	40c90fdb 	.word	0x40c90fdb

080131c4 <llEvaluate.constprop.0>:
 80131c4:	edd2 0a00 	vldr	s1, [r2]
 80131c8:	ed90 1a00 	vldr	s2, [r0]
 80131cc:	edd0 1a04 	vldr	s3, [r0, #16]
 80131d0:	edd2 5a01 	vldr	s11, [r2, #4]
 80131d4:	ed90 6a08 	vldr	s12, [r0, #32]
 80131d8:	ed90 2a05 	vldr	s4, [r0, #20]
 80131dc:	ed92 7a02 	vldr	s14, [r2, #8]
 80131e0:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 80131e4:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 80131e8:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 80131ec:	edd2 7a03 	vldr	s15, [r2, #12]
 80131f0:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 80131f4:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 80131f8:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 80131fc:	eec0 6a81 	vdiv.f32	s13, s1, s2
 8013200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013204:	b084      	sub	sp, #16
 8013206:	f10d 0810 	add.w	r8, sp, #16
 801320a:	2704      	movs	r7, #4
 801320c:	f101 0510 	add.w	r5, r1, #16
 8013210:	2f04      	cmp	r7, #4
 8013212:	4686      	mov	lr, r0
 8013214:	f04f 0c03 	mov.w	ip, #3
 8013218:	b27b      	sxtb	r3, r7
 801321a:	eee1 5ae6 	vfms.f32	s11, s3, s13
 801321e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8013222:	ee85 6a82 	vdiv.f32	s12, s11, s4
 8013226:	eee6 7ae2 	vfms.f32	s15, s13, s5
 801322a:	eea6 7a43 	vfms.f32	s14, s12, s6
 801322e:	edcd 6a00 	vstr	s13, [sp]
 8013232:	eec7 6a04 	vdiv.f32	s13, s14, s8
 8013236:	eee6 7a63 	vfms.f32	s15, s12, s7
 801323a:	ed8d 6a01 	vstr	s12, [sp, #4]
 801323e:	eee6 7ae4 	vfms.f32	s15, s13, s9
 8013242:	edcd 6a02 	vstr	s13, [sp, #8]
 8013246:	ee87 7a85 	vdiv.f32	s14, s15, s10
 801324a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801324e:	ed78 7a01 	vldmdb	r8!, {s15}
 8013252:	ed65 7a01 	vstmdb	r5!, {s15}
 8013256:	d029      	beq.n	80132ac <llEvaluate.constprop.0+0xe8>
 8013258:	ea4f 068c 	mov.w	r6, ip, lsl #2
 801325c:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 8013260:	4432      	add	r2, r6
 8013262:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8013266:	edd2 6a00 	vldr	s13, [r2]
 801326a:	ed94 7a00 	vldr	s14, [r4]
 801326e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8013272:	3301      	adds	r3, #1
 8013274:	b2da      	uxtb	r2, r3
 8013276:	2a04      	cmp	r2, #4
 8013278:	b25b      	sxtb	r3, r3
 801327a:	edc5 7a00 	vstr	s15, [r5]
 801327e:	d1ed      	bne.n	801325c <llEvaluate.constprop.0+0x98>
 8013280:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 8013284:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013288:	f01c 0fff 	tst.w	ip, #255	; 0xff
 801328c:	ed85 7a00 	vstr	s14, [r5]
 8013290:	d013      	beq.n	80132ba <llEvaluate.constprop.0+0xf6>
 8013292:	3f01      	subs	r7, #1
 8013294:	b2ff      	uxtb	r7, r7
 8013296:	ed78 7a01 	vldmdb	r8!, {s15}
 801329a:	2f04      	cmp	r7, #4
 801329c:	f1ae 0e14 	sub.w	lr, lr, #20
 80132a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80132a4:	b27b      	sxtb	r3, r7
 80132a6:	ed65 7a01 	vstmdb	r5!, {s15}
 80132aa:	d1d5      	bne.n	8013258 <llEvaluate.constprop.0+0x94>
 80132ac:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 80132b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80132b4:	ed85 7a00 	vstr	s14, [r5]
 80132b8:	e7eb      	b.n	8013292 <llEvaluate.constprop.0+0xce>
 80132ba:	b004      	add	sp, #16
 80132bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132c0 <MEMS_updateMagBufferIndex>:
 80132c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132c4:	ed2d 8b02 	vpush	{d8}
 80132c8:	7804      	ldrb	r4, [r0, #0]
 80132ca:	7842      	ldrb	r2, [r0, #1]
 80132cc:	4606      	mov	r6, r0
 80132ce:	f990 0002 	ldrsb.w	r0, [r0, #2]
 80132d2:	2300      	movs	r3, #0
 80132d4:	4294      	cmp	r4, r2
 80132d6:	e9c6 3302 	strd	r3, r3, [r6, #8]
 80132da:	e9c6 3304 	strd	r3, r3, [r6, #16]
 80132de:	e9c6 3306 	strd	r3, r3, [r6, #24]
 80132e2:	b083      	sub	sp, #12
 80132e4:	460d      	mov	r5, r1
 80132e6:	f100 0001 	add.w	r0, r0, #1
 80132ea:	f000 8092 	beq.w	8013412 <MEMS_updateMagBufferIndex+0x152>
 80132ee:	1b00      	subs	r0, r0, r4
 80132f0:	fb90 f8f2 	sdiv	r8, r0, r2
 80132f4:	fb02 0018 	mls	r0, r2, r8, r0
 80132f8:	2800      	cmp	r0, #0
 80132fa:	bfb6      	itet	lt
 80132fc:	eb02 0800 	addlt.w	r8, r2, r0
 8013300:	fa0f f880 	sxthge.w	r8, r0
 8013304:	fa0f f888 	sxthlt.w	r8, r8
 8013308:	b934      	cbnz	r4, 8013318 <MEMS_updateMagBufferIndex+0x58>
 801330a:	23ff      	movs	r3, #255	; 0xff
 801330c:	70b3      	strb	r3, [r6, #2]
 801330e:	b003      	add	sp, #12
 8013310:	ecbd 8b02 	vpop	{d8}
 8013314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013318:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801331c:	2700      	movs	r7, #0
 801331e:	ee87 8a80 	vdiv.f32	s16, s15, s0
 8013322:	463b      	mov	r3, r7
 8013324:	e000      	b.n	8013328 <MEMS_updateMagBufferIndex+0x68>
 8013326:	7872      	ldrb	r2, [r6, #1]
 8013328:	4443      	add	r3, r8
 801332a:	fb93 f4f2 	sdiv	r4, r3, r2
 801332e:	fb02 3314 	mls	r3, r2, r4, r3
 8013332:	b2dc      	uxtb	r4, r3
 8013334:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8013338:	3701      	adds	r7, #1
 801333a:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 801333e:	fb92 f3f5 	sdiv	r3, r2, r5
 8013342:	fb05 2313 	mls	r3, r5, r3, r2
 8013346:	2b00      	cmp	r3, #0
 8013348:	bfb8      	it	lt
 801334a:	195b      	addlt	r3, r3, r5
 801334c:	b21b      	sxth	r3, r3
 801334e:	ee07 3a90 	vmov	s15, r3
 8013352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013356:	ee67 7a88 	vmul.f32	s15, s15, s16
 801335a:	ee17 0a90 	vmov	r0, s15
 801335e:	f00e f99f 	bl	80216a0 <roundf>
 8013362:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 8013366:	fb92 f3f5 	sdiv	r3, r2, r5
 801336a:	ee07 0a90 	vmov	s15, r0
 801336e:	fb05 2313 	mls	r3, r5, r3, r2
 8013372:	2b00      	cmp	r3, #0
 8013374:	bfb8      	it	lt
 8013376:	195b      	addlt	r3, r3, r5
 8013378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801337c:	b21b      	sxth	r3, r3
 801337e:	edcd 7a01 	vstr	s15, [sp, #4]
 8013382:	ee07 3a90 	vmov	s15, r3
 8013386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801338a:	f89d 9004 	ldrb.w	r9, [sp, #4]
 801338e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013392:	ee17 0a90 	vmov	r0, s15
 8013396:	f00e f983 	bl	80216a0 <roundf>
 801339a:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 801339e:	fb92 f3f5 	sdiv	r3, r2, r5
 80133a2:	ee07 0a90 	vmov	s15, r0
 80133a6:	fb05 2313 	mls	r3, r5, r3, r2
 80133aa:	18ea      	adds	r2, r5, r3
 80133ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80133b0:	b219      	sxth	r1, r3
 80133b2:	b212      	sxth	r2, r2
 80133b4:	ee07 1a10 	vmov	s14, r1
 80133b8:	edcd 7a01 	vstr	s15, [sp, #4]
 80133bc:	ee07 2a90 	vmov	s15, r2
 80133c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80133c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	bfb8      	it	lt
 80133cc:	ee67 7a88 	vmullt.f32	s15, s15, s16
 80133d0:	ee27 7a08 	vmul.f32	s14, s14, s16
 80133d4:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80133d8:	ee17 0a10 	vmov	r0, s14
 80133dc:	bfb8      	it	lt
 80133de:	ee17 0a90 	vmovlt	r0, s15
 80133e2:	f00e f95d 	bl	80216a0 <roundf>
 80133e6:	ee07 0a90 	vmov	s15, r0
 80133ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80133ee:	4622      	mov	r2, r4
 80133f0:	edcd 7a01 	vstr	s15, [sp, #4]
 80133f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80133f8:	4649      	mov	r1, r9
 80133fa:	4630      	mov	r0, r6
 80133fc:	f7ff fcc6 	bl	8012d8c <MEMS_setMagIndexToOne>
 8013400:	7832      	ldrb	r2, [r6, #0]
 8013402:	b2fb      	uxtb	r3, r7
 8013404:	429a      	cmp	r2, r3
 8013406:	d88e      	bhi.n	8013326 <MEMS_updateMagBufferIndex+0x66>
 8013408:	b003      	add	sp, #12
 801340a:	ecbd 8b02 	vpop	{d8}
 801340e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013412:	fb90 f8f4 	sdiv	r8, r0, r4
 8013416:	fb04 0018 	mls	r0, r4, r8, r0
 801341a:	fa0f f880 	sxth.w	r8, r0
 801341e:	e773      	b.n	8013308 <MEMS_updateMagBufferIndex+0x48>

08013420 <getMagStats.constprop.0>:
 8013420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013424:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013426:	2400      	movs	r4, #0
 8013428:	4607      	mov	r7, r0
 801342a:	6034      	str	r4, [r6, #0]
 801342c:	601c      	str	r4, [r3, #0]
 801342e:	7800      	ldrb	r0, [r0, #0]
 8013430:	787d      	ldrb	r5, [r7, #1]
 8013432:	f997 4002 	ldrsb.w	r4, [r7, #2]
 8013436:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801343a:	42a8      	cmp	r0, r5
 801343c:	eec7 5a80 	vdiv.f32	s11, s15, s0
 8013440:	f000 80c0 	beq.w	80135c4 <getMagStats.constprop.0+0x1a4>
 8013444:	3401      	adds	r4, #1
 8013446:	eba4 0c00 	sub.w	ip, r4, r0
 801344a:	fb9c f4f5 	sdiv	r4, ip, r5
 801344e:	fb05 c414 	mls	r4, r5, r4, ip
 8013452:	2c00      	cmp	r4, #0
 8013454:	bfb8      	it	lt
 8013456:	1964      	addlt	r4, r4, r5
 8013458:	b224      	sxth	r4, r4
 801345a:	ee04 0a90 	vmov	s9, r0
 801345e:	ed9f 5a60 	vldr	s10, [pc, #384]	; 80135e0 <getMagStats.constprop.0+0x1c0>
 8013462:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8013466:	ee25 5a85 	vmul.f32	s10, s11, s10
 801346a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801346e:	2800      	cmp	r0, #0
 8013470:	f000 80b2 	beq.w	80135d8 <getMagStats.constprop.0+0x1b8>
 8013474:	3801      	subs	r0, #1
 8013476:	fa54 fc80 	uxtab	ip, r4, r0
 801347a:	f8b1 9000 	ldrh.w	r9, [r1]
 801347e:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 8013482:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8013486:	ed9f 3a57 	vldr	s6, [pc, #348]	; 80135e4 <getMagStats.constprop.0+0x1c4>
 801348a:	2000      	movs	r0, #0
 801348c:	e002      	b.n	8013494 <getMagStats.constprop.0+0x74>
 801348e:	ed93 3a00 	vldr	s6, [r3]
 8013492:	3401      	adds	r4, #1
 8013494:	fb94 f1f5 	sdiv	r1, r4, r5
 8013498:	fb05 4111 	mls	r1, r5, r1, r4
 801349c:	b2c9      	uxtb	r1, r1
 801349e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80134a2:	edd2 3a00 	vldr	s7, [r2]
 80134a6:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 80134aa:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 80134ae:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 80134b0:	ed92 4a04 	vldr	s8, [r2, #16]
 80134b4:	ed92 6a08 	vldr	s12, [r2, #32]
 80134b8:	ebaa 0a09 	sub.w	sl, sl, r9
 80134bc:	ebab 0b08 	sub.w	fp, fp, r8
 80134c0:	fa0f fa8a 	sxth.w	sl, sl
 80134c4:	ee07 aa10 	vmov	s14, sl
 80134c8:	fa0f fa8b 	sxth.w	sl, fp
 80134cc:	ee06 aa90 	vmov	s13, sl
 80134d0:	eba1 010e 	sub.w	r1, r1, lr
 80134d4:	b209      	sxth	r1, r1
 80134d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80134da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80134de:	ee07 1a90 	vmov	s15, r1
 80134e2:	ee27 7a23 	vmul.f32	s14, s14, s7
 80134e6:	ee66 6a84 	vmul.f32	s13, s13, s8
 80134ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134ee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80134f2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80134f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80134fa:	ee16 1a90 	vmov	r1, s13
 80134fe:	ee17 aa10 	vmov	sl, s14
 8013502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013506:	fb11 f101 	smulbb	r1, r1, r1
 801350a:	fa0f fa8a 	sxth.w	sl, sl
 801350e:	fb0a 1a0a 	mla	sl, sl, sl, r1
 8013512:	ee17 1a90 	vmov	r1, s15
 8013516:	b209      	sxth	r1, r1
 8013518:	fb01 a101 	mla	r1, r1, r1, sl
 801351c:	ee07 1a90 	vmov	s15, r1
 8013520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013524:	f100 0a01 	add.w	sl, r0, #1
 8013528:	eef1 6ae7 	vsqrt.f32	s13, s15
 801352c:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013530:	ee17 1a90 	vmov	r1, s15
 8013534:	b209      	sxth	r1, r1
 8013536:	ee07 1a10 	vmov	s14, r1
 801353a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801353e:	ee77 7a45 	vsub.f32	s15, s14, s10
 8013542:	ee37 7a03 	vadd.f32	s14, s14, s6
 8013546:	eef0 7ae7 	vabs.f32	s15, s15
 801354a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801354e:	ed83 7a00 	vstr	s14, [r3]
 8013552:	ee17 1a90 	vmov	r1, s15
 8013556:	b209      	sxth	r1, r1
 8013558:	fb01 fb01 	mul.w	fp, r1, r1
 801355c:	ee07 ba90 	vmov	s15, fp
 8013560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013564:	ee07 1a90 	vmov	s15, r1
 8013568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801356c:	eef4 5ae7 	vcmpe.f32	s11, s15
 8013570:	edd6 7a00 	vldr	s15, [r6]
 8013574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013578:	ee77 7a27 	vadd.f32	s15, s14, s15
 801357c:	bf48      	it	mi
 801357e:	fa5f f08a 	uxtbmi.w	r0, sl
 8013582:	45a4      	cmp	ip, r4
 8013584:	edc6 7a00 	vstr	s15, [r6]
 8013588:	d181      	bne.n	801348e <getMagStats.constprop.0+0x6e>
 801358a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801358e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80135e8 <getMagStats.constprop.0+0x1c8>
 8013592:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 8013596:	eef1 7ae6 	vsqrt.f32	s15, s13
 801359a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801359e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80135a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135a6:	bfb8      	it	lt
 80135a8:	eef0 7a47 	vmovlt.f32	s15, s14
 80135ac:	edc6 7a00 	vstr	s15, [r6]
 80135b0:	edd3 7a00 	vldr	s15, [r3]
 80135b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80135b8:	eec0 7a24 	vdiv.f32	s15, s0, s9
 80135bc:	edc3 7a00 	vstr	s15, [r3]
 80135c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135c4:	1c65      	adds	r5, r4, #1
 80135c6:	fb95 f4f0 	sdiv	r4, r5, r0
 80135ca:	fb00 5414 	mls	r4, r0, r4, r5
 80135ce:	ee04 0a90 	vmov	s9, r0
 80135d2:	b224      	sxth	r4, r4
 80135d4:	4605      	mov	r5, r0
 80135d6:	e742      	b.n	801345e <getMagStats.constprop.0+0x3e>
 80135d8:	edd6 7a00 	vldr	s15, [r6]
 80135dc:	e7d5      	b.n	801358a <getMagStats.constprop.0+0x16a>
 80135de:	bf00      	nop
 80135e0:	423c0000 	.word	0x423c0000
 80135e4:	00000000 	.word	0x00000000
 80135e8:	3f59999a 	.word	0x3f59999a

080135ec <MFX_emptyAttitude>:
 80135ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f0:	ed2d 8b10 	vpush	{d8-d15}
 80135f4:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 80135f8:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 80135fc:	f04f 0a00 	mov.w	sl, #0
 8013600:	4fef      	ldr	r7, [pc, #956]	; (80139c0 <MFX_emptyAttitude+0x3d4>)
 8013602:	f8c4 a008 	str.w	sl, [r4, #8]
 8013606:	e9c4 aa00 	strd	sl, sl, [r4]
 801360a:	f837 3b04 	ldrh.w	r3, [r7], #4
 801360e:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 8013612:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 8013616:	4680      	mov	r8, r0
 8013618:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 801361c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 8013620:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013624:	0c1b      	lsrs	r3, r3, #16
 8013626:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 801362a:	ab27      	add	r3, sp, #156	; 0x9c
 801362c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013630:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 8013634:	ab2d      	add	r3, sp, #180	; 0xb4
 8013636:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 801363a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801363e:	ab30      	add	r3, sp, #192	; 0xc0
 8013640:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013644:	ab33      	add	r3, sp, #204	; 0xcc
 8013646:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 801364a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801364e:	f04f 0c00 	mov.w	ip, #0
 8013652:	ab36      	add	r3, sp, #216	; 0xd8
 8013654:	f04f 0b00 	mov.w	fp, #0
 8013658:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 801365c:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 8013660:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013664:	4628      	mov	r0, r5
 8013666:	2224      	movs	r2, #36	; 0x24
 8013668:	f00f fb92 	bl	8022d90 <memset>
 801366c:	4651      	mov	r1, sl
 801366e:	4620      	mov	r0, r4
 8013670:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013674:	ed9f bad3 	vldr	s22, [pc, #844]	; 80139c4 <MFX_emptyAttitude+0x3d8>
 8013678:	eddf ead3 	vldr	s29, [pc, #844]	; 80139c8 <MFX_emptyAttitude+0x3dc>
 801367c:	f00f fb88 	bl	8022d90 <memset>
 8013680:	edd5 4a00 	vldr	s9, [r5]
 8013684:	ed95 5a01 	vldr	s10, [r5, #4]
 8013688:	edd5 5a02 	vldr	s11, [r5, #8]
 801368c:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 8013690:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 8013694:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 8013698:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 801369c:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 80136a0:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 80136a4:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 80136a8:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 80136ac:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 80136b0:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 80136b4:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 80136b8:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 80136bc:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 80136c0:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 80136c4:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 80136c8:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 80136cc:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 80136d0:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 80136d4:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 80136d8:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 80136dc:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 80136e0:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 80136e4:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 80136e8:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 80136ec:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 80136f0:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 80136f4:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 80136f8:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 80136fc:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 8013700:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 8013704:	ed95 6a03 	vldr	s12, [r5, #12]
 8013708:	edd5 6a04 	vldr	s13, [r5, #16]
 801370c:	ed95 7a05 	vldr	s14, [r5, #20]
 8013710:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 8013714:	ed8d 6a08 	vstr	s12, [sp, #32]
 8013718:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801371c:	edcd 6a07 	vstr	s13, [sp, #28]
 8013720:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 8013724:	ed8d 7a06 	vstr	s14, [sp, #24]
 8013728:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 801372c:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 8013730:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 8013734:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 8013738:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 801373c:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 8013740:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 8013744:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 8013748:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 801374c:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 8013750:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 8013754:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 8013758:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 801375c:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 8013760:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 8013764:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 8013768:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 801376c:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 8013770:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 8013774:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 8013778:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 801377c:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 8013780:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 8013784:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 8013788:	edd5 7a06 	vldr	s15, [r5, #24]
 801378c:	edd5 fa07 	vldr	s31, [r5, #28]
 8013790:	ed95 fa08 	vldr	s30, [r5, #32]
 8013794:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 8013798:	edcd 7a05 	vstr	s15, [sp, #20]
 801379c:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 80137a0:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 80137a4:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 80137a8:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 80137ac:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 80137b0:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 80137b4:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 80137b8:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 80137bc:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 80137c0:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 80137c4:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 80137c8:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 80137cc:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 80137d0:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 80137d4:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 80137d8:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 80137dc:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 80137e0:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 80137e4:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 80137e8:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 80137ec:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 80137f0:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 80137f4:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 80137f8:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 80137fc:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 8013800:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 8013804:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 8013808:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 801380c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801380e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 8013812:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013816:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013818:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	f8cc 3000 	str.w	r3, [ip]
 8013822:	4651      	mov	r1, sl
 8013824:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013828:	4620      	mov	r0, r4
 801382a:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 801382e:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 8013832:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 8013836:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 801383a:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 801383e:	f00f faa7 	bl	8022d90 <memset>
 8013842:	4621      	mov	r1, r4
 8013844:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013848:	a898      	add	r0, sp, #608	; 0x260
 801384a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801384e:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 8013852:	f00f fa75 	bl	8022d40 <memcpy>
 8013856:	4651      	mov	r1, sl
 8013858:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801385c:	4620      	mov	r0, r4
 801385e:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 8013862:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 8013866:	f00f fa93 	bl	8022d90 <memset>
 801386a:	4621      	mov	r1, r4
 801386c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013870:	a8f4      	add	r0, sp, #976	; 0x3d0
 8013872:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 8013876:	f00f fa63 	bl	8022d40 <memcpy>
 801387a:	4651      	mov	r1, sl
 801387c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013880:	4620      	mov	r0, r4
 8013882:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 8013886:	f00f fa83 	bl	8022d90 <memset>
 801388a:	4621      	mov	r1, r4
 801388c:	8037      	strh	r7, [r6, #0]
 801388e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013892:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 8013896:	f00f fa53 	bl	8022d40 <memcpy>
 801389a:	4651      	mov	r1, sl
 801389c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80138a0:	4620      	mov	r0, r4
 80138a2:	ed86 8a01 	vstr	s16, [r6, #4]
 80138a6:	f00f fa73 	bl	8022d90 <memset>
 80138aa:	4621      	mov	r1, r4
 80138ac:	802f      	strh	r7, [r5, #0]
 80138ae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80138b2:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 80138b6:	f00f fa43 	bl	8022d40 <memcpy>
 80138ba:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 80138be:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 80138c2:	2701      	movs	r7, #1
 80138c4:	9600      	str	r6, [sp, #0]
 80138c6:	9403      	str	r4, [sp, #12]
 80138c8:	eddf 3a40 	vldr	s7, [pc, #256]	; 80139cc <MFX_emptyAttitude+0x3e0>
 80138cc:	ed9f 4a40 	vldr	s8, [pc, #256]	; 80139d0 <MFX_emptyAttitude+0x3e4>
 80138d0:	ed85 8a01 	vstr	s16, [r5, #4]
 80138d4:	483f      	ldr	r0, [pc, #252]	; (80139d4 <MFX_emptyAttitude+0x3e8>)
 80138d6:	4d40      	ldr	r5, [pc, #256]	; (80139d8 <MFX_emptyAttitude+0x3ec>)
 80138d8:	f8df e120 	ldr.w	lr, [pc, #288]	; 80139fc <MFX_emptyAttitude+0x410>
 80138dc:	951c      	str	r5, [sp, #112]	; 0x70
 80138de:	abf2      	add	r3, sp, #968	; 0x3c8
 80138e0:	aa96      	add	r2, sp, #600	; 0x258
 80138e2:	a90d      	add	r1, sp, #52	; 0x34
 80138e4:	9017      	str	r0, [sp, #92]	; 0x5c
 80138e6:	4d3d      	ldr	r5, [pc, #244]	; (80139dc <MFX_emptyAttitude+0x3f0>)
 80138e8:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 80138ec:	4638      	mov	r0, r7
 80138ee:	ae27      	add	r6, sp, #156	; 0x9c
 80138f0:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 80138f4:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 80138f8:	951b      	str	r5, [sp, #108]	; 0x6c
 80138fa:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 80138fe:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 8013902:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 8013906:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 801390a:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 801390e:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 8013912:	f7fe feb1 	bl	8012678 <DataHist_parameters>
 8013916:	ce07      	ldmia	r6!, {r0, r1, r2}
 8013918:	4b31      	ldr	r3, [pc, #196]	; (80139e0 <MFX_emptyAttitude+0x3f4>)
 801391a:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 801391e:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 8013922:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 8013926:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 801392a:	f8c8 300c 	str.w	r3, [r8, #12]
 801392e:	4b2d      	ldr	r3, [pc, #180]	; (80139e4 <MFX_emptyAttitude+0x3f8>)
 8013930:	f8c8 3014 	str.w	r3, [r8, #20]
 8013934:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 8013938:	eddf 2a2b 	vldr	s5, [pc, #172]	; 80139e8 <MFX_emptyAttitude+0x3fc>
 801393c:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 80139ec <MFX_emptyAttitude+0x400>
 8013940:	eddf 3a2b 	vldr	s7, [pc, #172]	; 80139f0 <MFX_emptyAttitude+0x404>
 8013944:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 80139f4 <MFX_emptyAttitude+0x408>
 8013948:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 80139f8 <MFX_emptyAttitude+0x40c>
 801394c:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 8013950:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8013a00 <MFX_emptyAttitude+0x414>
 8013954:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 8013a04 <MFX_emptyAttitude+0x418>
 8013958:	edc8 2a06 	vstr	s5, [r8, #24]
 801395c:	f04f 0b00 	mov.w	fp, #0
 8013960:	f04f 0c00 	mov.w	ip, #0
 8013964:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 8013968:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 801396c:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 8013970:	ad2d      	add	r5, sp, #180	; 0xb4
 8013972:	469b      	mov	fp, r3
 8013974:	f8df c090 	ldr.w	ip, [pc, #144]	; 8013a08 <MFX_emptyAttitude+0x41c>
 8013978:	ed88 3a07 	vstr	s6, [r8, #28]
 801397c:	f240 1301 	movw	r3, #257	; 0x101
 8013980:	edc8 3a08 	vstr	s7, [r8, #32]
 8013984:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 8013988:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 801398c:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 8013990:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 8013994:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 8013998:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 801399c:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 80139a0:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 80139a4:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 80139a8:	f8c8 3000 	str.w	r3, [r8]
 80139ac:	f8a8 3004 	strh.w	r3, [r8, #4]
 80139b0:	ed88 8a02 	vstr	s16, [r8, #8]
 80139b4:	ed88 8a04 	vstr	s16, [r8, #16]
 80139b8:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 80139bc:	e028      	b.n	8013a10 <MFX_emptyAttitude+0x424>
 80139be:	bf00      	nop
 80139c0:	080242cc 	.word	0x080242cc
 80139c4:	00000000 	.word	0x00000000
 80139c8:	447a0000 	.word	0x447a0000
 80139cc:	3e93ffa3 	.word	0x3e93ffa3
 80139d0:	3e5cec8f 	.word	0x3e5cec8f
 80139d4:	3ea25c13 	.word	0x3ea25c13
 80139d8:	40a00000 	.word	0x40a00000
 80139dc:	3d57bb3d 	.word	0x3d57bb3d
 80139e0:	01010100 	.word	0x01010100
 80139e4:	41200000 	.word	0x41200000
 80139e8:	3a9d4952 	.word	0x3a9d4952
 80139ec:	3ac49ba6 	.word	0x3ac49ba6
 80139f0:	3b03126f 	.word	0x3b03126f
 80139f4:	402ab021 	.word	0x402ab021
 80139f8:	3a83126f 	.word	0x3a83126f
 80139fc:	3e006d36 	.word	0x3e006d36
 8013a00:	3f639581 	.word	0x3f639581
 8013a04:	3f13f7cf 	.word	0x3f13f7cf
 8013a08:	3f2ac083 	.word	0x3f2ac083
 8013a0c:	3f4ccccd 	.word	0x3f4ccccd
 8013a10:	cd07      	ldmia	r5!, {r0, r1, r2}
 8013a12:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 8013a16:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 8013a1a:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 8013a1e:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 8013a22:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 8013a26:	ab33      	add	r3, sp, #204	; 0xcc
 8013a28:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 8013a2c:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 8013a30:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 8013a34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a36:	ab36      	add	r3, sp, #216	; 0xd8
 8013a38:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 8013a3c:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 8013a40:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 8013a44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a46:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 8013a0c <MFX_emptyAttitude+0x420>
 8013a4a:	4bd6      	ldr	r3, [pc, #856]	; (8013da4 <MFX_emptyAttitude+0x7b8>)
 8013a4c:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 8013a50:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 8013a54:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 8013a58:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 8013a5c:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 8013a60:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 8013a64:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 8013a68:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 8013a6c:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 8013a70:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 8013a74:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 8013a78:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 8013a7c:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 8013a80:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 8013a84:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 8013a88:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 8013a8c:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 8013a90:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 8013a94:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 8013a98:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 8013a9c:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 8013aa0:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 8013aa4:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 8013aa8:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 8013aac:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 8013ab0:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 8013ab4:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 8013ab8:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 8013abc:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 8013ac0:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 8013ac4:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 8013ac8:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 8013acc:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 8013ad0:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 8013ad4:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 8013ad8:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 8013adc:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 8013ae0:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 8013ae4:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 8013ae8:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 8013aec:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 8013af0:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 8013af4:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 8013af8:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 8013afc:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 8013b00:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 8013b04:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 8013b08:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 8013b0c:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 8013b10:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 8013b14:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 8013b18:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 8013b1c:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 8013b20:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 8013b24:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 8013b28:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 8013b2c:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 8013b30:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 8013b34:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 8013b38:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 8013b3c:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 8013b40:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 8013b44:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 8013b48:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 8013b4c:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 8013b50:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 8013b54:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 8013b58:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 8013b5c:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 8013b60:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 8013b64:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 8013b68:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 8013b6c:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 8013b70:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 8013b74:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 8013b78:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 8013b7c:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 8013b80:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 8013b84:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 8013b88:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8013b8c:	ed9d 6a08 	vldr	s12, [sp, #32]
 8013b90:	eddd 6a07 	vldr	s13, [sp, #28]
 8013b94:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 8013b98:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 8013b9c:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 8013ba0:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 8013ba4:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 8013ba8:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 8013bac:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 8013bb0:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 8013bb4:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 8013bb8:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 8013bbc:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 8013bc0:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 8013bc4:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 8013bc8:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 8013bcc:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 8013bd0:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 8013bd4:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 8013bd8:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 8013bdc:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 8013be0:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 8013be4:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 8013be8:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 8013bec:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 8013bf0:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 8013bf4:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 8013bf8:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 8013bfc:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 8013c00:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 8013c04:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 8013c08:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 8013c0c:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 8013c10:	ed9d 7a06 	vldr	s14, [sp, #24]
 8013c14:	eddd 7a05 	vldr	s15, [sp, #20]
 8013c18:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 8013c1c:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 8013c20:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 8013c24:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 8013c28:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 8013c2c:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 8013c30:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 8013c34:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 8013c38:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 8013c3c:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 8013c40:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 8013c44:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 8013c48:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 8013c4c:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 8013c50:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 8013c54:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 8013c58:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 8013c5c:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 8013c60:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 8013c64:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 8013c68:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 8013c6c:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 8013c70:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 8013c74:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 8013c78:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 8013c7c:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 8013c80:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 8013c84:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 8013c88:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 8013c8c:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 8013c90:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 8013c94:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 8013c98:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 8013c9c:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 8013ca0:	7820      	ldrb	r0, [r4, #0]
 8013ca2:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 8013ca6:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 8013caa:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 8013cae:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 8013cb2:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 8013cb6:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 8013cba:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 8013cbe:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 8013cc2:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 8013cc6:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 8013cca:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 8013cce:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 8013cd2:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 8013cd6:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 8013cda:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 8013cde:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 8013ce2:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 8013ce6:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 8013cea:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8013cee:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 8013cf2:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 8013cf6:	f8cd e00c 	str.w	lr, [sp, #12]
 8013cfa:	9500      	str	r5, [sp, #0]
 8013cfc:	f7fe fcbc 	bl	8012678 <DataHist_parameters>
 8013d00:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 8013d04:	f608 1334 	addw	r3, r8, #2356	; 0x934
 8013d08:	9205      	str	r2, [sp, #20]
 8013d0a:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 8013d0e:	ed8b ba00 	vstr	s22, [fp]
 8013d12:	f608 1154 	addw	r1, r8, #2388	; 0x954
 8013d16:	ed83 ba00 	vstr	s22, [r3]
 8013d1a:	9b05      	ldr	r3, [sp, #20]
 8013d1c:	9106      	str	r1, [sp, #24]
 8013d1e:	f608 1938 	addw	r9, r8, #2360	; 0x938
 8013d22:	ed89 ba00 	vstr	s22, [r9]
 8013d26:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 8013d2a:	ed83 8a00 	vstr	s16, [r3]
 8013d2e:	9b06      	ldr	r3, [sp, #24]
 8013d30:	9207      	str	r2, [sp, #28]
 8013d32:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 8013d36:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 8013d3a:	f608 1744 	addw	r7, r8, #2372	; 0x944
 8013d3e:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 8013d42:	f608 1548 	addw	r5, r8, #2376	; 0x948
 8013d46:	f608 1464 	addw	r4, r8, #2404	; 0x964
 8013d4a:	ed8e ba00 	vstr	s22, [lr]
 8013d4e:	ed8c ba00 	vstr	s22, [ip]
 8013d52:	ed87 ba00 	vstr	s22, [r7]
 8013d56:	ed86 ba00 	vstr	s22, [r6]
 8013d5a:	ed85 ba00 	vstr	s22, [r5]
 8013d5e:	ed84 ba00 	vstr	s22, [r4]
 8013d62:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 8013d66:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 8013d6a:	ed83 ba00 	vstr	s22, [r3]
 8013d6e:	9b07      	ldr	r3, [sp, #28]
 8013d70:	f608 1058 	addw	r0, r8, #2392	; 0x958
 8013d74:	f608 1168 	addw	r1, r8, #2408	; 0x968
 8013d78:	ed80 8a00 	vstr	s16, [r0]
 8013d7c:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 8013d80:	ed81 ba00 	vstr	s22, [r1]
 8013d84:	ed83 ba00 	vstr	s22, [r3]
 8013d88:	230a      	movs	r3, #10
 8013d8a:	ed82 ba00 	vstr	s22, [r2]
 8013d8e:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 8013d92:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 8013d96:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 8013d9a:	ecbd 8b10 	vpop	{d8-d15}
 8013d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013da2:	bf00      	nop
 8013da4:	3f333333 	.word	0x3f333333

08013da8 <output_update>:
 8013da8:	ed90 7a00 	vldr	s14, [r0]
 8013dac:	edd0 7a01 	vldr	s15, [r0, #4]
 8013db0:	ed90 5a03 	vldr	s10, [r0, #12]
 8013db4:	edd0 5a02 	vldr	s11, [r0, #8]
 8013db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dbc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8013dc0:	ee27 6a07 	vmul.f32	s12, s14, s14
 8013dc4:	ee67 6a05 	vmul.f32	s13, s14, s10
 8013dc8:	ee36 6a24 	vadd.f32	s12, s12, s9
 8013dcc:	ee67 4aa5 	vmul.f32	s9, s15, s11
 8013dd0:	ee27 7a25 	vmul.f32	s14, s14, s11
 8013dd4:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013dd8:	ee36 6a06 	vadd.f32	s12, s12, s12
 8013ddc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013de0:	f89d c01c 	ldrb.w	ip, [sp, #28]
 8013de4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013de8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013dec:	ee35 5ac6 	vsub.f32	s10, s11, s12
 8013df0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013df4:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8013df8:	ee37 7a07 	vadd.f32	s14, s14, s14
 8013dfc:	460f      	mov	r7, r1
 8013dfe:	4615      	mov	r5, r2
 8013e00:	461e      	mov	r6, r3
 8013e02:	f1bc 0f00 	cmp.w	ip, #0
 8013e06:	d146      	bne.n	8013e96 <output_update+0xee>
 8013e08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e0c:	eef1 6a66 	vneg.f32	s13, s13
 8013e10:	edc3 7a01 	vstr	s15, [r3, #4]
 8013e14:	edc3 6a00 	vstr	s13, [r3]
 8013e18:	ed83 5a02 	vstr	s10, [r3, #8]
 8013e1c:	4662      	mov	r2, ip
 8013e1e:	4629      	mov	r1, r5
 8013e20:	4604      	mov	r4, r0
 8013e22:	f7ff f935 	bl	8013090 <q2hpr>
 8013e26:	edd5 6a01 	vldr	s13, [r5, #4]
 8013e2a:	ed95 7a00 	vldr	s14, [r5]
 8013e2e:	edd5 7a02 	vldr	s15, [r5, #8]
 8013e32:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8013f44 <output_update+0x19c>
 8013e36:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013e3a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 8013e3e:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 8013e42:	ed85 7a00 	vstr	s14, [r5]
 8013e46:	edc5 6a01 	vstr	s13, [r5, #4]
 8013e4a:	edc5 7a02 	vstr	s15, [r5, #8]
 8013e4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8013e52:	edd6 7a00 	vldr	s15, [r6]
 8013e56:	6822      	ldr	r2, [r4, #0]
 8013e58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013e5c:	edc8 7a00 	vstr	s15, [r8]
 8013e60:	ed97 7a00 	vldr	s14, [r7]
 8013e64:	edd6 7a01 	vldr	s15, [r6, #4]
 8013e68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013e6c:	edc8 7a01 	vstr	s15, [r8, #4]
 8013e70:	edd6 7a02 	vldr	s15, [r6, #8]
 8013e74:	ed97 7a02 	vldr	s14, [r7, #8]
 8013e78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e7c:	edc8 7a02 	vstr	s15, [r8, #8]
 8013e80:	edd4 7a02 	vldr	s15, [r4, #8]
 8013e84:	6863      	ldr	r3, [r4, #4]
 8013e86:	6023      	str	r3, [r4, #0]
 8013e88:	eef1 7a67 	vneg.f32	s15, s15
 8013e8c:	6062      	str	r2, [r4, #4]
 8013e8e:	edc4 7a02 	vstr	s15, [r4, #8]
 8013e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e96:	f1bc 0f01 	cmp.w	ip, #1
 8013e9a:	d015      	beq.n	8013ec8 <output_update+0x120>
 8013e9c:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8013f44 <output_update+0x19c>
 8013ea0:	edd2 6a00 	vldr	s13, [r2]
 8013ea4:	ed92 7a01 	vldr	s14, [r2, #4]
 8013ea8:	edd2 7a02 	vldr	s15, [r2, #8]
 8013eac:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013eb0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013eb4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013eb8:	edc2 6a00 	vstr	s13, [r2]
 8013ebc:	ed82 7a01 	vstr	s14, [r2, #4]
 8013ec0:	edc2 7a02 	vstr	s15, [r2, #8]
 8013ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ecc:	ee36 6a65 	vsub.f32	s12, s12, s11
 8013ed0:	eef1 6a66 	vneg.f32	s13, s13
 8013ed4:	edc3 7a00 	vstr	s15, [r3]
 8013ed8:	ed83 6a02 	vstr	s12, [r3, #8]
 8013edc:	edc3 6a01 	vstr	s13, [r3, #4]
 8013ee0:	4662      	mov	r2, ip
 8013ee2:	4629      	mov	r1, r5
 8013ee4:	f7ff f8d4 	bl	8013090 <q2hpr>
 8013ee8:	edd5 6a00 	vldr	s13, [r5]
 8013eec:	ed95 7a01 	vldr	s14, [r5, #4]
 8013ef0:	edd5 7a02 	vldr	s15, [r5, #8]
 8013ef4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013f44 <output_update+0x19c>
 8013ef8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013efc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013f00:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013f04:	ed85 7a01 	vstr	s14, [r5, #4]
 8013f08:	edc5 6a00 	vstr	s13, [r5]
 8013f0c:	edc5 7a02 	vstr	s15, [r5, #8]
 8013f10:	ed97 7a00 	vldr	s14, [r7]
 8013f14:	edd6 7a00 	vldr	s15, [r6]
 8013f18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f1c:	edc8 7a00 	vstr	s15, [r8]
 8013f20:	ed97 7a01 	vldr	s14, [r7, #4]
 8013f24:	edd6 7a01 	vldr	s15, [r6, #4]
 8013f28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f2c:	edc8 7a01 	vstr	s15, [r8, #4]
 8013f30:	edd6 7a02 	vldr	s15, [r6, #8]
 8013f34:	ed97 7a02 	vldr	s14, [r7, #8]
 8013f38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f3c:	edc8 7a02 	vstr	s15, [r8, #8]
 8013f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f44:	42652ee1 	.word	0x42652ee1

08013f48 <kalman_3gyro.constprop.0>:
 8013f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f4c:	ed2d 8b10 	vpush	{d8-d15}
 8013f50:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8013f54:	edd2 9a02 	vldr	s19, [r2, #8]
 8013f58:	edd2 8a03 	vldr	s17, [r2, #12]
 8013f5c:	edd2 6a04 	vldr	s13, [r2, #16]
 8013f60:	ed92 6a05 	vldr	s12, [r2, #20]
 8013f64:	6854      	ldr	r4, [r2, #4]
 8013f66:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 8013f6a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013f72:	4683      	mov	fp, r0
 8013f74:	edd2 7a00 	vldr	s15, [r2]
 8013f78:	48e3      	ldr	r0, [pc, #908]	; (8014308 <kalman_3gyro.constprop.0+0x3c0>)
 8013f7a:	9108      	str	r1, [sp, #32]
 8013f7c:	904a      	str	r0, [sp, #296]	; 0x128
 8013f7e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8013f82:	460d      	mov	r5, r1
 8013f84:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 8013f88:	2100      	movs	r1, #0
 8013f8a:	9328      	str	r3, [sp, #160]	; 0xa0
 8013f8c:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8013f90:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 8013f94:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8013f98:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 8013f9c:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 8013fa0:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 8013fa4:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 8013fa8:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 8013fac:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 8013fb0:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 8013fb4:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 8013fb8:	946f      	str	r4, [sp, #444]	; 0x1bc
 8013fba:	9470      	str	r4, [sp, #448]	; 0x1c0
 8013fbc:	9471      	str	r4, [sp, #452]	; 0x1c4
 8013fbe:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 8013fc2:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 8013fc6:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 8013fca:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 8013fce:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 8013fd2:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 8013fd6:	eeb0 8a60 	vmov.f32	s16, s1
 8013fda:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 8013fde:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 8013fe2:	ed8d 1a07 	vstr	s2, [sp, #28]
 8013fe6:	f00e fed3 	bl	8022d90 <memset>
 8013fea:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 8013fee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013ff2:	600b      	str	r3, [r1, #0]
 8013ff4:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 8013ff8:	f89b 200d 	ldrb.w	r2, [fp, #13]
 8013ffc:	600b      	str	r3, [r1, #0]
 8013ffe:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 8014002:	600b      	str	r3, [r1, #0]
 8014004:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 8014008:	600b      	str	r3, [r1, #0]
 801400a:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 801400e:	600b      	str	r3, [r1, #0]
 8014010:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 8014014:	600b      	str	r3, [r1, #0]
 8014016:	2a00      	cmp	r2, #0
 8014018:	f001 82a0 	beq.w	801555c <kalman_3gyro.constprop.0+0x1614>
 801401c:	ed95 5a02 	vldr	s10, [r5, #8]
 8014020:	edd5 5a01 	vldr	s11, [r5, #4]
 8014024:	ed95 3a00 	vldr	s6, [r5]
 8014028:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 801402c:	ee65 4aa7 	vmul.f32	s9, s11, s15
 8014030:	ee35 4a05 	vadd.f32	s8, s10, s10
 8014034:	ee75 5aa5 	vadd.f32	s11, s11, s11
 8014038:	ee25 5a27 	vmul.f32	s10, s10, s15
 801403c:	ee63 7a27 	vmul.f32	s15, s6, s15
 8014040:	ee33 3a03 	vadd.f32	s6, s6, s6
 8014044:	9b08      	ldr	r3, [sp, #32]
 8014046:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 801404a:	ed82 4a00 	vstr	s8, [r2]
 801404e:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 8014052:	edc2 4a00 	vstr	s9, [r2]
 8014056:	ed93 6a05 	vldr	s12, [r3, #20]
 801405a:	edd3 6a04 	vldr	s13, [r3, #16]
 801405e:	ed93 7a03 	vldr	s14, [r3, #12]
 8014062:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 8014066:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 801406a:	ed82 5a00 	vstr	s10, [r2]
 801406e:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 8014072:	ed82 3a00 	vstr	s6, [r2]
 8014076:	eef1 3a46 	vneg.f32	s7, s12
 801407a:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 801407e:	edc2 5a00 	vstr	s11, [r2]
 8014082:	eeb1 4a66 	vneg.f32	s8, s13
 8014086:	ee33 5aa3 	vadd.f32	s10, s7, s7
 801408a:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 801408e:	edc2 7a00 	vstr	s15, [r2]
 8014092:	ee34 3a04 	vadd.f32	s6, s8, s8
 8014096:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 801409a:	eef1 4a47 	vneg.f32	s9, s14
 801409e:	ed82 5a00 	vstr	s10, [r2]
 80140a2:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 80140a6:	ee36 5aa6 	vadd.f32	s10, s13, s13
 80140aa:	ed81 3a00 	vstr	s6, [r1]
 80140ae:	ee74 5aa4 	vadd.f32	s11, s9, s9
 80140b2:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 80140b6:	ed81 5a00 	vstr	s10, [r1]
 80140ba:	ee77 7a07 	vadd.f32	s15, s14, s14
 80140be:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 80140c2:	edc1 5a00 	vstr	s11, [r1]
 80140c6:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 80140ca:	edc1 7a00 	vstr	s15, [r1]
 80140ce:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 80140d2:	2300      	movs	r3, #0
 80140d4:	600b      	str	r3, [r1, #0]
 80140d6:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 80140da:	ee76 2a06 	vadd.f32	s5, s12, s12
 80140de:	600b      	str	r3, [r1, #0]
 80140e0:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 80140e4:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 80140e8:	600b      	str	r3, [r1, #0]
 80140ea:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 80140ee:	edc2 2a00 	vstr	s5, [r2]
 80140f2:	600b      	str	r3, [r1, #0]
 80140f4:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 80140f8:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 80140fc:	600b      	str	r3, [r1, #0]
 80140fe:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 8014102:	a87b      	add	r0, sp, #492	; 0x1ec
 8014104:	600b      	str	r3, [r1, #0]
 8014106:	2230      	movs	r2, #48	; 0x30
 8014108:	2100      	movs	r1, #0
 801410a:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 801410e:	934b      	str	r3, [sp, #300]	; 0x12c
 8014110:	934f      	str	r3, [sp, #316]	; 0x13c
 8014112:	9353      	str	r3, [sp, #332]	; 0x14c
 8014114:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 8014118:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 801411c:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 8014120:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 8014124:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 8014128:	942c      	str	r4, [sp, #176]	; 0xb0
 801412a:	f00e fe31 	bl	8022d90 <memset>
 801412e:	eddb 6a06 	vldr	s13, [fp, #24]
 8014132:	ed9b 7a07 	vldr	s14, [fp, #28]
 8014136:	eddb 7a08 	vldr	s15, [fp, #32]
 801413a:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 801413e:	ee68 6a26 	vmul.f32	s13, s16, s13
 8014142:	ee28 7a07 	vmul.f32	s14, s16, s14
 8014146:	ee68 7a27 	vmul.f32	s15, s16, s15
 801414a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801414e:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 8014152:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 8014156:	2b00      	cmp	r3, #0
 8014158:	f043 843d 	bne.w	80179d6 <kalman_3gyro.constprop.0+0x3a8e>
 801415c:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 8014160:	2b00      	cmp	r3, #0
 8014162:	f043 81c5 	bne.w	80174f0 <kalman_3gyro.constprop.0+0x35a8>
 8014166:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 801416a:	9304      	str	r3, [sp, #16]
 801416c:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 8014170:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 8014174:	9310      	str	r3, [sp, #64]	; 0x40
 8014176:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 801417a:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 801417e:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 8014182:	930f      	str	r3, [sp, #60]	; 0x3c
 8014184:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 8014188:	edd0 7a00 	vldr	s15, [r0]
 801418c:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 8014190:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 8014194:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 8014198:	ed93 6a00 	vldr	s12, [r3]
 801419c:	ed91 7a00 	vldr	s14, [r1]
 80141a0:	edd2 6a00 	vldr	s13, [r2]
 80141a4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80141a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80141ac:	2300      	movs	r3, #0
 80141ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141b2:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 80141b6:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 80141ba:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 80141be:	933a      	str	r3, [sp, #232]	; 0xe8
 80141c0:	933b      	str	r3, [sp, #236]	; 0xec
 80141c2:	933c      	str	r3, [sp, #240]	; 0xf0
 80141c4:	933d      	str	r3, [sp, #244]	; 0xf4
 80141c6:	d14e      	bne.n	8014266 <kalman_3gyro.constprop.0+0x31e>
 80141c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80141cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d0:	d149      	bne.n	8014266 <kalman_3gyro.constprop.0+0x31e>
 80141d2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80141d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141da:	d144      	bne.n	8014266 <kalman_3gyro.constprop.0+0x31e>
 80141dc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80141e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e4:	d13f      	bne.n	8014266 <kalman_3gyro.constprop.0+0x31e>
 80141e6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80141e8:	9336      	str	r3, [sp, #216]	; 0xd8
 80141ea:	7802      	ldrb	r2, [r0, #0]
 80141ec:	9337      	str	r3, [sp, #220]	; 0xdc
 80141ee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80141f2:	9338      	str	r3, [sp, #224]	; 0xe0
 80141f4:	2300      	movs	r3, #0
 80141f6:	ed90 7a03 	vldr	s14, [r0, #12]
 80141fa:	edd0 6a01 	vldr	s13, [r0, #4]
 80141fe:	edd0 7a02 	vldr	s15, [r0, #8]
 8014202:	9139      	str	r1, [sp, #228]	; 0xe4
 8014204:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 8014208:	2a00      	cmp	r2, #0
 801420a:	f003 84fd 	beq.w	8017c08 <kalman_3gyro.constprop.0+0x3cc0>
 801420e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014212:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014216:	eee7 7a07 	vfma.f32	s15, s14, s14
 801421a:	eef1 6ae7 	vsqrt.f32	s13, s15
 801421e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014222:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014226:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 801422a:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 801422e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8014232:	2100      	movs	r1, #0
 8014234:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8014238:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 801423c:	f00e fda8 	bl	8022d90 <memset>
 8014240:	4b32      	ldr	r3, [pc, #200]	; (801430c <kalman_3gyro.constprop.0+0x3c4>)
 8014242:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8014246:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 801424a:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 801424e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8014252:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8014256:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 801425a:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 801425e:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8014262:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8014266:	9b08      	ldr	r3, [sp, #32]
 8014268:	eddf 5a29 	vldr	s11, [pc, #164]	; 8014310 <kalman_3gyro.constprop.0+0x3c8>
 801426c:	ed93 7a01 	vldr	s14, [r3, #4]
 8014270:	edd3 6a00 	vldr	s13, [r3]
 8014274:	edd3 7a02 	vldr	s15, [r3, #8]
 8014278:	ee27 6a07 	vmul.f32	s12, s14, s14
 801427c:	eea6 6aa6 	vfma.f32	s12, s13, s13
 8014280:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8014284:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8014288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801428c:	f101 8105 	bmi.w	801549a <kalman_3gyro.constprop.0+0x1552>
 8014290:	eeb1 9ac6 	vsqrt.f32	s18, s12
 8014294:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014298:	ee39 6a46 	vsub.f32	s12, s18, s12
 801429c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 80142a0:	eeb0 6ac6 	vabs.f32	s12, s12
 80142a4:	ee76 aa6a 	vsub.f32	s21, s12, s21
 80142a8:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 80142ac:	edd3 5a04 	vldr	s11, [r3, #16]
 80142b0:	edd3 3a03 	vldr	s7, [r3, #12]
 80142b4:	ed93 2a05 	vldr	s4, [r3, #20]
 80142b8:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8014310 <kalman_3gyro.constprop.0+0x3c8>
 80142bc:	9b04      	ldr	r3, [sp, #16]
 80142be:	edd5 ba00 	vldr	s23, [r5]
 80142c2:	ed93 ba00 	vldr	s22, [r3]
 80142c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80142ca:	eec6 2a09 	vdiv.f32	s5, s12, s18
 80142ce:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 80142d2:	461e      	mov	r6, r3
 80142d4:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 80142d8:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 80142dc:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 80142e0:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 80142e4:	9327      	str	r3, [sp, #156]	; 0x9c
 80142e6:	9502      	str	r5, [sp, #8]
 80142e8:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 80142ec:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 80142f0:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 80142f4:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 80142f8:	9501      	str	r5, [sp, #4]
 80142fa:	ee25 6aa5 	vmul.f32	s12, s11, s11
 80142fe:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8014302:	eea3 6aa3 	vfma.f32	s12, s7, s7
 8014306:	e009      	b.n	801431c <kalman_3gyro.constprop.0+0x3d4>
 8014308:	3a9d4952 	.word	0x3a9d4952
 801430c:	40a00000 	.word	0x40a00000
 8014310:	3c23d70a 	.word	0x3c23d70a
 8014314:	3dcccccd 	.word	0x3dcccccd
 8014318:	4b000000 	.word	0x4b000000
 801431c:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 8014320:	9522      	str	r5, [sp, #136]	; 0x88
 8014322:	edd6 1a00 	vldr	s3, [r6]
 8014326:	ed91 3a00 	vldr	s6, [r1]
 801432a:	ed9a 1a00 	vldr	s2, [sl]
 801432e:	edd3 ea00 	vldr	s29, [r3]
 8014332:	ed94 4a00 	vldr	s8, [r4]
 8014336:	ed8d 3a06 	vstr	s6, [sp, #24]
 801433a:	eea2 6a02 	vfma.f32	s12, s4, s4
 801433e:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 8014342:	9617      	str	r6, [sp, #92]	; 0x5c
 8014344:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 8014348:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801434c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014350:	bf58      	it	pl
 8014352:	eeb1 aac6 	vsqrtpl.f32	s20, s12
 8014356:	961a      	str	r6, [sp, #104]	; 0x68
 8014358:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 801435c:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 8014360:	9611      	str	r6, [sp, #68]	; 0x44
 8014362:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 8014366:	9303      	str	r3, [sp, #12]
 8014368:	9618      	str	r6, [sp, #96]	; 0x60
 801436a:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 801436e:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 8014372:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 8014376:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 801437a:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 801437e:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 8014382:	bf48      	it	mi
 8014384:	ed1f aa1d 	vldrmi	s20, [pc, #-116]	; 8014314 <kalman_3gyro.constprop.0+0x3cc>
 8014388:	edcd 1a09 	vstr	s3, [sp, #36]	; 0x24
 801438c:	ee84 6a8a 	vdiv.f32	s12, s9, s20
 8014390:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 8014394:	ee26 8aa2 	vmul.f32	s16, s13, s5
 8014398:	ee67 fa22 	vmul.f32	s31, s14, s5
 801439c:	ee63 3a86 	vmul.f32	s7, s7, s12
 80143a0:	ee65 5a86 	vmul.f32	s11, s11, s12
 80143a4:	ee22 2a06 	vmul.f32	s4, s4, s12
 80143a8:	ee67 2aa2 	vmul.f32	s5, s15, s5
 80143ac:	ed90 6a00 	vldr	s12, [r0]
 80143b0:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 80143b4:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 80143b8:	edcd 3a30 	vstr	s7, [sp, #192]	; 0xc0
 80143bc:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 80143c0:	ed8d 6a05 	vstr	s12, [sp, #20]
 80143c4:	ed8d 1a0a 	vstr	s2, [sp, #40]	; 0x28
 80143c8:	ed92 6a00 	vldr	s12, [r2]
 80143cc:	edcd 2a2f 	vstr	s5, [sp, #188]	; 0xbc
 80143d0:	ed8d 2a32 	vstr	s4, [sp, #200]	; 0xc8
 80143d4:	9e02      	ldr	r6, [sp, #8]
 80143d6:	ed9c 5a00 	vldr	s10, [ip]
 80143da:	edd6 0a00 	vldr	s1, [r6]
 80143de:	9e01      	ldr	r6, [sp, #4]
 80143e0:	ed8d 5a0b 	vstr	s10, [sp, #44]	; 0x2c
 80143e4:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 80143e8:	eec4 daab 	vdiv.f32	s27, s9, s23
 80143ec:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 80143f0:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 80143f4:	ed9c 1a00 	vldr	s2, [ip]
 80143f8:	ed96 ca00 	vldr	s24, [r6]
 80143fc:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80143fe:	ed90 da00 	vldr	s26, [r0]
 8014402:	edd6 ca00 	vldr	s25, [r6]
 8014406:	9803      	ldr	r0, [sp, #12]
 8014408:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801440a:	ed90 3a00 	vldr	s6, [r0]
 801440e:	ed96 5a00 	vldr	s10, [r6]
 8014412:	ed99 fa00 	vldr	s30, [r9]
 8014416:	ed9e 0a00 	vldr	s0, [lr]
 801441a:	edd2 1a00 	vldr	s3, [r2]
 801441e:	edd5 4a00 	vldr	s9, [r5]
 8014422:	edcd 0a14 	vstr	s1, [sp, #80]	; 0x50
 8014426:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 801442a:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 801442e:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 8014432:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 8014436:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 801443a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 801443e:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 8014442:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 8014446:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 801444a:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 801444e:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 8014452:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 8014456:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 801445a:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 801445e:	ed99 ea00 	vldr	s28, [r9]
 8014462:	edd4 0a00 	vldr	s1, [r4]
 8014466:	ed8d ca0c 	vstr	s24, [sp, #48]	; 0x30
 801446a:	ed8d 3a22 	vstr	s6, [sp, #136]	; 0x88
 801446e:	ed93 ca00 	vldr	s24, [r3]
 8014472:	ed91 3a00 	vldr	s6, [r1]
 8014476:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 801447a:	ed8d 5a24 	vstr	s10, [sp, #144]	; 0x90
 801447e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014480:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8014482:	ed93 5a00 	vldr	s10, [r3]
 8014486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014488:	ed8d 5a23 	vstr	s10, [sp, #140]	; 0x8c
 801448c:	ee65 5aaf 	vmul.f32	s11, s11, s31
 8014490:	edd3 fa00 	vldr	s31, [r3]
 8014494:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 8014498:	edd6 fa00 	vldr	s31, [r6]
 801449c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801449e:	edcd fa26 	vstr	s31, [sp, #152]	; 0x98
 80144a2:	eee3 5a88 	vfma.f32	s11, s7, s16
 80144a6:	edd6 fa00 	vldr	s31, [r6]
 80144aa:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80144ac:	ee26 8aad 	vmul.f32	s16, s13, s27
 80144b0:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 80144b4:	ed96 5a00 	vldr	s10, [r6]
 80144b8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80144ba:	eef8 3a00 	vmov.f32	s7, #128	; 0xc0000000 -2.0
 80144be:	ee96 6aa3 	vfnms.f32	s12, s13, s7
 80144c2:	eef0 6a4f 	vmov.f32	s13, s30
 80144c6:	ed9d fa14 	vldr	s30, [sp, #80]	; 0x50
 80144ca:	eedf 6a23 	vfnms.f32	s13, s30, s7
 80144ce:	eeb0 fa45 	vmov.f32	s30, s10
 80144d2:	ee9f faa3 	vfnms.f32	s30, s31, s7
 80144d6:	edd8 fa00 	vldr	s31, [r8]
 80144da:	ed9d 5a25 	vldr	s10, [sp, #148]	; 0x94
 80144de:	ee9f 4aa3 	vfnms.f32	s8, s31, s7
 80144e2:	edd7 fa00 	vldr	s31, [r7]
 80144e6:	eedf 4aa3 	vfnms.f32	s9, s31, s7
 80144ea:	eddd fa24 	vldr	s31, [sp, #144]	; 0x90
 80144ee:	eed5 fa23 	vfnms.f32	s31, s10, s7
 80144f2:	ed9d 5a05 	vldr	s10, [sp, #20]
 80144f6:	ee76 6a8e 	vadd.f32	s13, s13, s28
 80144fa:	ee34 4a05 	vadd.f32	s8, s8, s10
 80144fe:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 8014502:	ed9d 5a0c 	vldr	s10, [sp, #48]	; 0x30
 8014506:	ee95 ea23 	vfnms.f32	s28, s10, s7
 801450a:	ee74 4a8d 	vadd.f32	s9, s9, s26
 801450e:	eeb0 5a4e 	vmov.f32	s10, s28
 8014512:	ed9d ea22 	vldr	s28, [sp, #136]	; 0x88
 8014516:	ed9d da26 	vldr	s26, [sp, #152]	; 0x98
 801451a:	ee9e 3a23 	vfnms.f32	s6, s28, s7
 801451e:	ee7f fa8d 	vadd.f32	s31, s31, s26
 8014522:	ee33 3a0c 	vadd.f32	s6, s6, s24
 8014526:	ed96 ca00 	vldr	s24, [r6]
 801452a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801452c:	ed96 da00 	vldr	s26, [r6]
 8014530:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014532:	ee35 5a2c 	vadd.f32	s10, s10, s25
 8014536:	edd6 ca00 	vldr	s25, [r6]
 801453a:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801453c:	ee3f fa0c 	vadd.f32	s30, s30, s24
 8014540:	ed96 ca00 	vldr	s24, [r6]
 8014544:	ee9c caa3 	vfnms.f32	s24, s25, s7
 8014548:	eddd ca0a 	vldr	s25, [sp, #40]	; 0x28
 801454c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801454e:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 8014552:	eee0 6a23 	vfma.f32	s13, s0, s7
 8014556:	eee0 4aa3 	vfma.f32	s9, s1, s7
 801455a:	ed9d 0a06 	vldr	s0, [sp, #24]
 801455e:	edd6 0a00 	vldr	s1, [r6]
 8014562:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8014564:	ee36 6a2e 	vadd.f32	s12, s12, s29
 8014568:	eead fa23 	vfma.f32	s30, s26, s7
 801456c:	eeac 6aa3 	vfma.f32	s12, s25, s7
 8014570:	eea0 4a23 	vfma.f32	s8, s0, s7
 8014574:	eee0 faa3 	vfma.f32	s31, s1, s7
 8014578:	ed9d 0a23 	vldr	s0, [sp, #140]	; 0x8c
 801457c:	ed5f 0a9b 	vldr	s1, [pc, #-620]	; 8014314 <kalman_3gyro.constprop.0+0x3cc>
 8014580:	eea1 3aa3 	vfma.f32	s6, s3, s7
 8014584:	ee6b baa0 	vmul.f32	s23, s23, s1
 8014588:	ee20 0a20 	vmul.f32	s0, s0, s1
 801458c:	edd6 1a00 	vldr	s3, [r6]
 8014590:	ee6b 0a20 	vmul.f32	s1, s22, s1
 8014594:	eea1 5a23 	vfma.f32	s10, s2, s7
 8014598:	ee26 6a2b 	vmul.f32	s12, s12, s23
 801459c:	ee7c 1a21 	vadd.f32	s3, s24, s3
 80145a0:	ee2f fa00 	vmul.f32	s30, s30, s0
 80145a4:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80145a8:	ed9c 1a00 	vldr	s2, [ip]
 80145ac:	ee24 4a2b 	vmul.f32	s8, s8, s23
 80145b0:	ee60 4aa4 	vmul.f32	s9, s1, s9
 80145b4:	eee1 1a23 	vfma.f32	s3, s2, s7
 80145b8:	ee26 6a06 	vmul.f32	s12, s12, s12
 80145bc:	ee2f fa0f 	vmul.f32	s30, s30, s30
 80145c0:	ee6f fa80 	vmul.f32	s31, s31, s0
 80145c4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80145c8:	eea4 6a04 	vfma.f32	s12, s8, s8
 80145cc:	eee4 6aa4 	vfma.f32	s13, s9, s9
 80145d0:	eeaf faaf 	vfma.f32	s30, s31, s31
 80145d4:	ee25 5a2b 	vmul.f32	s10, s10, s23
 80145d8:	ee61 1a80 	vmul.f32	s3, s3, s0
 80145dc:	ee20 3a83 	vmul.f32	s6, s1, s6
 80145e0:	eea5 6a05 	vfma.f32	s12, s10, s10
 80145e4:	eea1 faa1 	vfma.f32	s30, s3, s3
 80145e8:	eee3 6a03 	vfma.f32	s13, s6, s6
 80145ec:	eee2 5a22 	vfma.f32	s11, s4, s5
 80145f0:	ed1f 5ab7 	vldr	s10, [pc, #-732]	; 8014318 <kalman_3gyro.constprop.0+0x3d0>
 80145f4:	eef0 4ac8 	vabs.f32	s9, s16
 80145f8:	eef4 4ac5 	vcmpe.f32	s9, s10
 80145fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014600:	ee27 ea2d 	vmul.f32	s28, s14, s27
 8014604:	eeb1 dac6 	vsqrt.f32	s26, s12
 8014608:	eef1 cacf 	vsqrt.f32	s25, s30
 801460c:	eef1 bae6 	vsqrt.f32	s23, s13
 8014610:	ee67 daad 	vmul.f32	s27, s15, s27
 8014614:	eeb0 ca65 	vmov.f32	s24, s11
 8014618:	d513      	bpl.n	8014642 <kalman_3gyro.constprop.0+0x6fa>
 801461a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801461e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014626:	f2c1 804b 	blt.w	80156c0 <kalman_3gyro.constprop.0+0x1778>
 801462a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801462e:	ee17 0a90 	vmov	r0, s15
 8014632:	f7eb ff59 	bl	80004e8 <__aeabi_f2d>
 8014636:	f00c fe63 	bl	8021300 <floor>
 801463a:	f7ec faa5 	bl	8000b88 <__aeabi_d2f>
 801463e:	ee08 0a10 	vmov	s16, r0
 8014642:	ed5f 7acb 	vldr	s15, [pc, #-812]	; 8014318 <kalman_3gyro.constprop.0+0x3d0>
 8014646:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 801464a:	eef0 6ace 	vabs.f32	s13, s28
 801464e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014656:	d513      	bpl.n	8014680 <kalman_3gyro.constprop.0+0x738>
 8014658:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801465c:	eeb4 eae7 	vcmpe.f32	s28, s15
 8014660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014664:	f2c1 8020 	blt.w	80156a8 <kalman_3gyro.constprop.0+0x1760>
 8014668:	ee7e 7a27 	vadd.f32	s15, s28, s15
 801466c:	ee17 0a90 	vmov	r0, s15
 8014670:	f7eb ff3a 	bl	80004e8 <__aeabi_f2d>
 8014674:	f00c fe44 	bl	8021300 <floor>
 8014678:	f7ec fa86 	bl	8000b88 <__aeabi_d2f>
 801467c:	ee0e 0a10 	vmov	s28, r0
 8014680:	ed5f 7adb 	vldr	s15, [pc, #-876]	; 8014318 <kalman_3gyro.constprop.0+0x3d0>
 8014684:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 8014688:	eeb0 7aed 	vabs.f32	s14, s27
 801468c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014694:	d513      	bpl.n	80146be <kalman_3gyro.constprop.0+0x776>
 8014696:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801469a:	eef4 dae7 	vcmpe.f32	s27, s15
 801469e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a2:	f2c0 87f5 	blt.w	8015690 <kalman_3gyro.constprop.0+0x1748>
 80146a6:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 80146aa:	ee17 0a90 	vmov	r0, s15
 80146ae:	f7eb ff1b 	bl	80004e8 <__aeabi_f2d>
 80146b2:	f00c fe25 	bl	8021300 <floor>
 80146b6:	f7ec fa67 	bl	8000b88 <__aeabi_d2f>
 80146ba:	ee0d 0a90 	vmov	s27, r0
 80146be:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 80146c2:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 80146c6:	1e61      	subs	r1, r4, #1
 80146c8:	b249      	sxtb	r1, r1
 80146ca:	2900      	cmp	r1, #0
 80146cc:	dd1a      	ble.n	8014704 <kalman_3gyro.constprop.0+0x7bc>
 80146ce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80146d2:	1ea0      	subs	r0, r4, #2
 80146d4:	0089      	lsls	r1, r1, #2
 80146d6:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 80146da:	b2c0      	uxtb	r0, r0
 80146dc:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 80146e0:	440a      	add	r2, r1
 80146e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80146e6:	445b      	add	r3, fp
 80146e8:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 80146ec:	6819      	ldr	r1, [r3, #0]
 80146ee:	6858      	ldr	r0, [r3, #4]
 80146f0:	60d9      	str	r1, [r3, #12]
 80146f2:	6899      	ldr	r1, [r3, #8]
 80146f4:	6118      	str	r0, [r3, #16]
 80146f6:	6159      	str	r1, [r3, #20]
 80146f8:	3b0c      	subs	r3, #12
 80146fa:	4293      	cmp	r3, r2
 80146fc:	d1f6      	bne.n	80146ec <kalman_3gyro.constprop.0+0x7a4>
 80146fe:	9b04      	ldr	r3, [sp, #16]
 8014700:	ed93 ba00 	vldr	s22, [r3]
 8014704:	ed88 8a00 	vstr	s16, [r8]
 8014708:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801470c:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 8014710:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014712:	ed83 ea00 	vstr	s28, [r3]
 8014716:	9b01      	ldr	r3, [sp, #4]
 8014718:	eddf 7a99 	vldr	s15, [pc, #612]	; 8014980 <kalman_3gyro.constprop.0+0xa38>
 801471c:	edc3 da00 	vstr	s27, [r3]
 8014720:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 8014724:	3301      	adds	r3, #1
 8014726:	b2db      	uxtb	r3, r3
 8014728:	429c      	cmp	r4, r3
 801472a:	bf28      	it	cs
 801472c:	461c      	movcs	r4, r3
 801472e:	9b08      	ldr	r3, [sp, #32]
 8014730:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 8014734:	edd3 da03 	vldr	s27, [r3, #12]
 8014738:	ed93 ba04 	vldr	s22, [r3, #16]
 801473c:	edd3 6a05 	vldr	s13, [r3, #20]
 8014740:	ee68 da2d 	vmul.f32	s27, s16, s27
 8014744:	ee28 ba0b 	vmul.f32	s22, s16, s22
 8014748:	eeb0 7aed 	vabs.f32	s14, s27
 801474c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014754:	ee28 8a26 	vmul.f32	s16, s16, s13
 8014758:	d513      	bpl.n	8014782 <kalman_3gyro.constprop.0+0x83a>
 801475a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801475e:	eef4 dae7 	vcmpe.f32	s27, s15
 8014762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014766:	f2c0 8787 	blt.w	8015678 <kalman_3gyro.constprop.0+0x1730>
 801476a:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 801476e:	ee17 0a90 	vmov	r0, s15
 8014772:	f7eb feb9 	bl	80004e8 <__aeabi_f2d>
 8014776:	f00c fdc3 	bl	8021300 <floor>
 801477a:	f7ec fa05 	bl	8000b88 <__aeabi_d2f>
 801477e:	ee0d 0a90 	vmov	s27, r0
 8014782:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8014980 <kalman_3gyro.constprop.0+0xa38>
 8014786:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 801478a:	eeb0 7acb 	vabs.f32	s14, s22
 801478e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014796:	d513      	bpl.n	80147c0 <kalman_3gyro.constprop.0+0x878>
 8014798:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801479c:	eeb4 bae7 	vcmpe.f32	s22, s15
 80147a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147a4:	f2c0 875c 	blt.w	8015660 <kalman_3gyro.constprop.0+0x1718>
 80147a8:	ee7b 7a27 	vadd.f32	s15, s22, s15
 80147ac:	ee17 0a90 	vmov	r0, s15
 80147b0:	f7eb fe9a 	bl	80004e8 <__aeabi_f2d>
 80147b4:	f00c fda4 	bl	8021300 <floor>
 80147b8:	f7ec f9e6 	bl	8000b88 <__aeabi_d2f>
 80147bc:	ee0b 0a10 	vmov	s22, r0
 80147c0:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8014980 <kalman_3gyro.constprop.0+0xa38>
 80147c4:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 80147c8:	eeb0 7ac8 	vabs.f32	s14, s16
 80147cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147d4:	d513      	bpl.n	80147fe <kalman_3gyro.constprop.0+0x8b6>
 80147d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80147da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80147de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147e2:	f2c0 8731 	blt.w	8015648 <kalman_3gyro.constprop.0+0x1700>
 80147e6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80147ea:	ee17 0a90 	vmov	r0, s15
 80147ee:	f7eb fe7b 	bl	80004e8 <__aeabi_f2d>
 80147f2:	f00c fd85 	bl	8021300 <floor>
 80147f6:	f7ec f9c7 	bl	8000b88 <__aeabi_d2f>
 80147fa:	ee08 0a10 	vmov	s16, r0
 80147fe:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 8014802:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 8014806:	1e61      	subs	r1, r4, #1
 8014808:	b249      	sxtb	r1, r1
 801480a:	2900      	cmp	r1, #0
 801480c:	dd17      	ble.n	801483e <kalman_3gyro.constprop.0+0x8f6>
 801480e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014812:	1ea2      	subs	r2, r4, #2
 8014814:	0089      	lsls	r1, r1, #2
 8014816:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 801481a:	b2d2      	uxtb	r2, r2
 801481c:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 8014820:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014824:	4401      	add	r1, r0
 8014826:	445b      	add	r3, fp
 8014828:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 801482c:	681a      	ldr	r2, [r3, #0]
 801482e:	6858      	ldr	r0, [r3, #4]
 8014830:	60da      	str	r2, [r3, #12]
 8014832:	689a      	ldr	r2, [r3, #8]
 8014834:	6118      	str	r0, [r3, #16]
 8014836:	615a      	str	r2, [r3, #20]
 8014838:	3b0c      	subs	r3, #12
 801483a:	4299      	cmp	r1, r3
 801483c:	d1f6      	bne.n	801482c <kalman_3gyro.constprop.0+0x8e4>
 801483e:	9b02      	ldr	r3, [sp, #8]
 8014840:	edc7 da00 	vstr	s27, [r7]
 8014844:	ed83 ba00 	vstr	s22, [r3]
 8014848:	9b03      	ldr	r3, [sp, #12]
 801484a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014980 <kalman_3gyro.constprop.0+0xa38>
 801484e:	ed83 8a00 	vstr	s16, [r3]
 8014852:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 8014856:	3301      	adds	r3, #1
 8014858:	b2db      	uxtb	r3, r3
 801485a:	429c      	cmp	r4, r3
 801485c:	bf28      	it	cs
 801485e:	461c      	movcs	r4, r3
 8014860:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014862:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 8014866:	ed93 7a00 	vldr	s14, [r3]
 801486a:	9b08      	ldr	r3, [sp, #32]
 801486c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014870:	ee86 8a07 	vdiv.f32	s16, s12, s14
 8014874:	edd3 da06 	vldr	s27, [r3, #24]
 8014878:	ed93 ba07 	vldr	s22, [r3, #28]
 801487c:	edd3 6a08 	vldr	s13, [r3, #32]
 8014880:	ee68 da2d 	vmul.f32	s27, s16, s27
 8014884:	ee28 ba0b 	vmul.f32	s22, s16, s22
 8014888:	eeb0 7aed 	vabs.f32	s14, s27
 801488c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014894:	ee28 8a26 	vmul.f32	s16, s16, s13
 8014898:	d513      	bpl.n	80148c2 <kalman_3gyro.constprop.0+0x97a>
 801489a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801489e:	eef4 dae7 	vcmpe.f32	s27, s15
 80148a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148a6:	f2c0 86c3 	blt.w	8015630 <kalman_3gyro.constprop.0+0x16e8>
 80148aa:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 80148ae:	ee17 0a90 	vmov	r0, s15
 80148b2:	f7eb fe19 	bl	80004e8 <__aeabi_f2d>
 80148b6:	f00c fd23 	bl	8021300 <floor>
 80148ba:	f7ec f965 	bl	8000b88 <__aeabi_d2f>
 80148be:	ee0d 0a90 	vmov	s27, r0
 80148c2:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8014980 <kalman_3gyro.constprop.0+0xa38>
 80148c6:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 80148ca:	eeb0 7acb 	vabs.f32	s14, s22
 80148ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80148d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d6:	d513      	bpl.n	8014900 <kalman_3gyro.constprop.0+0x9b8>
 80148d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80148dc:	eeb4 bae7 	vcmpe.f32	s22, s15
 80148e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148e4:	f2c0 8698 	blt.w	8015618 <kalman_3gyro.constprop.0+0x16d0>
 80148e8:	ee7b 7a27 	vadd.f32	s15, s22, s15
 80148ec:	ee17 0a90 	vmov	r0, s15
 80148f0:	f7eb fdfa 	bl	80004e8 <__aeabi_f2d>
 80148f4:	f00c fd04 	bl	8021300 <floor>
 80148f8:	f7ec f946 	bl	8000b88 <__aeabi_d2f>
 80148fc:	ee0b 0a10 	vmov	s22, r0
 8014900:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014980 <kalman_3gyro.constprop.0+0xa38>
 8014904:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 8014908:	eeb0 7ac8 	vabs.f32	s14, s16
 801490c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014914:	d513      	bpl.n	801493e <kalman_3gyro.constprop.0+0x9f6>
 8014916:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801491a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014922:	f2c0 866d 	blt.w	8015600 <kalman_3gyro.constprop.0+0x16b8>
 8014926:	ee78 7a27 	vadd.f32	s15, s16, s15
 801492a:	ee17 0a90 	vmov	r0, s15
 801492e:	f7eb fddb 	bl	80004e8 <__aeabi_f2d>
 8014932:	f00c fce5 	bl	8021300 <floor>
 8014936:	f7ec f927 	bl	8000b88 <__aeabi_d2f>
 801493a:	ee08 0a10 	vmov	s16, r0
 801493e:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 8014942:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 8014946:	1e63      	subs	r3, r4, #1
 8014948:	b25b      	sxtb	r3, r3
 801494a:	2b00      	cmp	r3, #0
 801494c:	dd1c      	ble.n	8014988 <kalman_3gyro.constprop.0+0xa40>
 801494e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014952:	1ea2      	subs	r2, r4, #2
 8014954:	0099      	lsls	r1, r3, #2
 8014956:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 801495a:	b2d2      	uxtb	r2, r2
 801495c:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 8014960:	4408      	add	r0, r1
 8014962:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014966:	445b      	add	r3, fp
 8014968:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 801496c:	681a      	ldr	r2, [r3, #0]
 801496e:	6859      	ldr	r1, [r3, #4]
 8014970:	60da      	str	r2, [r3, #12]
 8014972:	689a      	ldr	r2, [r3, #8]
 8014974:	6119      	str	r1, [r3, #16]
 8014976:	615a      	str	r2, [r3, #20]
 8014978:	3b0c      	subs	r3, #12
 801497a:	4283      	cmp	r3, r0
 801497c:	d1f6      	bne.n	801496c <kalman_3gyro.constprop.0+0xa24>
 801497e:	e003      	b.n	8014988 <kalman_3gyro.constprop.0+0xa40>
 8014980:	4b000000 	.word	0x4b000000
 8014984:	00000000 	.word	0x00000000
 8014988:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801498a:	edc3 da00 	vstr	s27, [r3]
 801498e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014990:	ed83 ba00 	vstr	s22, [r3]
 8014994:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014996:	ed83 8a00 	vstr	s16, [r3]
 801499a:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 801499e:	3301      	adds	r3, #1
 80149a0:	b2db      	uxtb	r3, r3
 80149a2:	429c      	cmp	r4, r3
 80149a4:	bf28      	it	cs
 80149a6:	461c      	movcs	r4, r3
 80149a8:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 80149ac:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 80149b0:	aa54      	add	r2, sp, #336	; 0x150
 80149b2:	a92d      	add	r1, sp, #180	; 0xb4
 80149b4:	a830      	add	r0, sp, #192	; 0xc0
 80149b6:	461c      	mov	r4, r3
 80149b8:	9314      	str	r3, [sp, #80]	; 0x50
 80149ba:	f7fe fa29 	bl	8012e10 <getRotationMatrix>
 80149be:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 80149c2:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 80149c6:	6820      	ldr	r0, [r4, #0]
 80149c8:	6861      	ldr	r1, [r4, #4]
 80149ca:	68a2      	ldr	r2, [r4, #8]
 80149cc:	68e3      	ldr	r3, [r4, #12]
 80149ce:	4635      	mov	r5, r6
 80149d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80149d2:	3410      	adds	r4, #16
 80149d4:	42bc      	cmp	r4, r7
 80149d6:	462e      	mov	r6, r5
 80149d8:	d1f5      	bne.n	80149c6 <kalman_3gyro.constprop.0+0xa7e>
 80149da:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 80149de:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 80149e2:	6820      	ldr	r0, [r4, #0]
 80149e4:	6028      	str	r0, [r5, #0]
 80149e6:	eef0 7ae7 	vabs.f32	s15, s15
 80149ea:	eeb0 7ac7 	vabs.f32	s14, s14
 80149ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80149f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149f6:	f140 85a4 	bpl.w	8015542 <kalman_3gyro.constprop.0+0x15fa>
 80149fa:	2303      	movs	r3, #3
 80149fc:	2506      	movs	r5, #6
 80149fe:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8014a02:	2604      	movs	r6, #4
 8014a04:	2400      	movs	r4, #0
 8014a06:	eef0 7a47 	vmov.f32	s15, s14
 8014a0a:	4632      	mov	r2, r6
 8014a0c:	46a2      	mov	sl, r4
 8014a0e:	2107      	movs	r1, #7
 8014a10:	f04f 0c01 	mov.w	ip, #1
 8014a14:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 8014a18:	eeb0 7ac7 	vabs.f32	s14, s14
 8014a1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a24:	f340 85ae 	ble.w	8015584 <kalman_3gyro.constprop.0+0x163c>
 8014a28:	2304      	movs	r3, #4
 8014a2a:	2007      	movs	r0, #7
 8014a2c:	2108      	movs	r1, #8
 8014a2e:	9301      	str	r3, [sp, #4]
 8014a30:	461c      	mov	r4, r3
 8014a32:	9002      	str	r0, [sp, #8]
 8014a34:	460a      	mov	r2, r1
 8014a36:	2306      	movs	r3, #6
 8014a38:	2003      	movs	r0, #3
 8014a3a:	2605      	movs	r6, #5
 8014a3c:	f04f 0800 	mov.w	r8, #0
 8014a40:	f04f 0a01 	mov.w	sl, #1
 8014a44:	f04f 0c02 	mov.w	ip, #2
 8014a48:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8014a4a:	442c      	add	r4, r5
 8014a4c:	442a      	add	r2, r5
 8014a4e:	edd4 6a00 	vldr	s13, [r4]
 8014a52:	ed92 7a00 	vldr	s14, [r2]
 8014a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014a5a:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8014a5e:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 8014a62:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 8014a66:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8014a6a:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8014a6e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8014a72:	970c      	str	r7, [sp, #48]	; 0x30
 8014a74:	9f01      	ldr	r7, [sp, #4]
 8014a76:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8014a7a:	00b6      	lsls	r6, r6, #2
 8014a7c:	960a      	str	r6, [sp, #40]	; 0x28
 8014a7e:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 8014a82:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 8014a86:	edc4 7a00 	vstr	s15, [r4]
 8014a8a:	edd2 7a00 	vldr	s15, [r2]
 8014a8e:	ed99 7a00 	vldr	s14, [r9]
 8014a92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014a96:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8014a9a:	9204      	str	r2, [sp, #16]
 8014a9c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8014aa0:	9205      	str	r2, [sp, #20]
 8014aa2:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8014aa6:	9209      	str	r2, [sp, #36]	; 0x24
 8014aa8:	00ba      	lsls	r2, r7, #2
 8014aaa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8014aac:	9206      	str	r2, [sp, #24]
 8014aae:	0080      	lsls	r0, r0, #2
 8014ab0:	9003      	str	r0, [sp, #12]
 8014ab2:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 8014ab6:	0089      	lsls	r1, r1, #2
 8014ab8:	910b      	str	r1, [sp, #44]	; 0x2c
 8014aba:	edc9 6a00 	vstr	s13, [r9]
 8014abe:	ed94 6a00 	vldr	s12, [r4]
 8014ac2:	ed97 7a00 	vldr	s14, [r7]
 8014ac6:	edd5 7a00 	vldr	s15, [r5]
 8014aca:	9902      	ldr	r1, [sp, #8]
 8014acc:	9a02      	ldr	r2, [sp, #8]
 8014ace:	eee6 7a47 	vfms.f32	s15, s12, s14
 8014ad2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8014ad6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8014ada:	0092      	lsls	r2, r2, #2
 8014adc:	edc5 7a00 	vstr	s15, [r5]
 8014ae0:	ed97 7a00 	vldr	s14, [r7]
 8014ae4:	edde 7a00 	vldr	s15, [lr]
 8014ae8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8014aec:	009b      	lsls	r3, r3, #2
 8014aee:	edce 7a00 	vstr	s15, [lr]
 8014af2:	edd0 5a00 	vldr	s11, [r0]
 8014af6:	ed91 7a00 	vldr	s14, [r1]
 8014afa:	eea6 7a65 	vfms.f32	s14, s12, s11
 8014afe:	eef0 7ae7 	vabs.f32	s15, s15
 8014b02:	ed81 7a00 	vstr	s14, [r1]
 8014b06:	ed90 6a00 	vldr	s12, [r0]
 8014b0a:	ed96 7a00 	vldr	s14, [r6]
 8014b0e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8014b12:	ed86 7a00 	vstr	s14, [r6]
 8014b16:	ed95 7a00 	vldr	s14, [r5]
 8014b1a:	eeb0 7ac7 	vabs.f32	s14, s14
 8014b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b26:	dd10      	ble.n	8014b4a <kalman_3gyro.constprop.0+0xc02>
 8014b28:	4652      	mov	r2, sl
 8014b2a:	46c2      	mov	sl, r8
 8014b2c:	4690      	mov	r8, r2
 8014b2e:	461a      	mov	r2, r3
 8014b30:	9b01      	ldr	r3, [sp, #4]
 8014b32:	9902      	ldr	r1, [sp, #8]
 8014b34:	9803      	ldr	r0, [sp, #12]
 8014b36:	9006      	str	r0, [sp, #24]
 8014b38:	009b      	lsls	r3, r3, #2
 8014b3a:	9303      	str	r3, [sp, #12]
 8014b3c:	008b      	lsls	r3, r1, #2
 8014b3e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8014b42:	9105      	str	r1, [sp, #20]
 8014b44:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8014b48:	9104      	str	r1, [sp, #16]
 8014b4a:	9903      	ldr	r1, [sp, #12]
 8014b4c:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 8014b50:	4401      	add	r1, r0
 8014b52:	460c      	mov	r4, r1
 8014b54:	9906      	ldr	r1, [sp, #24]
 8014b56:	ed94 7a00 	vldr	s14, [r4]
 8014b5a:	4401      	add	r1, r0
 8014b5c:	edd1 7a00 	vldr	s15, [r1]
 8014b60:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8014b64:	4608      	mov	r0, r1
 8014b66:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8014b6a:	440a      	add	r2, r1
 8014b6c:	440b      	add	r3, r1
 8014b6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014b70:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8014b74:	4429      	add	r1, r5
 8014b76:	460d      	mov	r5, r1
 8014b78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014b7a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 8014b7e:	4431      	add	r1, r6
 8014b80:	468e      	mov	lr, r1
 8014b82:	ed84 3a00 	vstr	s6, [r4]
 8014b86:	ed92 7a00 	vldr	s14, [r2]
 8014b8a:	edd3 7a00 	vldr	s15, [r3]
 8014b8e:	9904      	ldr	r1, [sp, #16]
 8014b90:	eee3 7a47 	vfms.f32	s15, s6, s14
 8014b94:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 8014b98:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 8014b9c:	440e      	add	r6, r1
 8014b9e:	1879      	adds	r1, r7, r1
 8014ba0:	edc3 7a00 	vstr	s15, [r3]
 8014ba4:	9101      	str	r1, [sp, #4]
 8014ba6:	9b05      	ldr	r3, [sp, #20]
 8014ba8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014baa:	edd2 0a00 	vldr	s1, [r2]
 8014bae:	ed95 1a00 	vldr	s2, [r5]
 8014bb2:	ed9e 2a00 	vldr	s4, [lr]
 8014bb6:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 8014bba:	edd6 6a00 	vldr	s13, [r6]
 8014bbe:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 8014bc2:	1874      	adds	r4, r6, r1
 8014bc4:	18f7      	adds	r7, r6, r3
 8014bc6:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 8014bca:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8014bce:	eb06 0903 	add.w	r9, r6, r3
 8014bd2:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8014bd6:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 8014bda:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 8014bde:	4633      	mov	r3, r6
 8014be0:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 8014be4:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8014be8:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 8014bec:	448c      	add	ip, r1
 8014bee:	9901      	ldr	r1, [sp, #4]
 8014bf0:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 8014bf4:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8014bf8:	ed94 7a00 	vldr	s14, [r4]
 8014bfc:	ed93 6a00 	vldr	s12, [r3]
 8014c00:	edd0 7a00 	vldr	s15, [r0]
 8014c04:	ed99 8a00 	vldr	s16, [r9]
 8014c08:	ed91 ba00 	vldr	s22, [r1]
 8014c0c:	ed97 4a00 	vldr	s8, [r7]
 8014c10:	edd6 4a00 	vldr	s9, [r6]
 8014c14:	eddc da00 	vldr	s27, [ip]
 8014c18:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8014c1c:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 8014c20:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8014c24:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 8014c28:	46a2      	mov	sl, r4
 8014c2a:	4613      	mov	r3, r2
 8014c2c:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 8014c30:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 8014c34:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 8014c38:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 8014c3c:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8014c40:	eeeb 6a47 	vfms.f32	s13, s22, s14
 8014c44:	eea8 4a47 	vfms.f32	s8, s16, s14
 8014c48:	ed94 5a00 	vldr	s10, [r4]
 8014c4c:	edda 3a00 	vldr	s7, [sl]
 8014c50:	edd2 5a00 	vldr	s11, [r2]
 8014c54:	edd3 7a00 	vldr	s15, [r3]
 8014c58:	eeab 5a64 	vfms.f32	s10, s22, s9
 8014c5c:	eee8 5a64 	vfms.f32	s11, s16, s9
 8014c60:	eee6 3a4b 	vfms.f32	s7, s12, s22
 8014c64:	eee6 7a48 	vfms.f32	s15, s12, s16
 8014c68:	eea6 4ac3 	vfms.f32	s8, s13, s6
 8014c6c:	ee82 8aad 	vdiv.f32	s16, s5, s27
 8014c70:	eee3 5a45 	vfms.f32	s11, s6, s10
 8014c74:	eee3 7a63 	vfms.f32	s15, s6, s7
 8014c78:	ee20 4a04 	vmul.f32	s8, s0, s8
 8014c7c:	ee60 5a25 	vmul.f32	s11, s0, s11
 8014c80:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014c84:	eee0 6ac4 	vfms.f32	s13, s1, s8
 8014c88:	eea0 5ae5 	vfms.f32	s10, s1, s11
 8014c8c:	eee7 3ae0 	vfms.f32	s7, s15, s1
 8014c90:	eea1 7a44 	vfms.f32	s14, s2, s8
 8014c94:	ee61 6aa6 	vmul.f32	s13, s3, s13
 8014c98:	eee1 4a65 	vfms.f32	s9, s2, s11
 8014c9c:	eea7 6ac1 	vfms.f32	s12, s15, s2
 8014ca0:	ee21 5a85 	vmul.f32	s10, s3, s10
 8014ca4:	eea2 7a66 	vfms.f32	s14, s4, s13
 8014ca8:	ee63 1aa1 	vmul.f32	s3, s7, s3
 8014cac:	eee2 4a45 	vfms.f32	s9, s4, s10
 8014cb0:	eea1 6ac2 	vfms.f32	s12, s3, s4
 8014cb4:	ee28 7a07 	vmul.f32	s14, s16, s14
 8014cb8:	ee37 3a85 	vadd.f32	s6, s15, s10
 8014cbc:	ee68 4a24 	vmul.f32	s9, s16, s9
 8014cc0:	ee26 8a08 	vmul.f32	s16, s12, s16
 8014cc4:	ee37 6a43 	vsub.f32	s12, s14, s6
 8014cc8:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 8014ccc:	eeb4 6ae3 	vcmpe.f32	s12, s7
 8014cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd4:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 8014cd8:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 8014cdc:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 8014ce0:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8014ce4:	bfc8      	it	gt
 8014ce6:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 8014cea:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8014cee:	bfcc      	ite	gt
 8014cf0:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 8014cf4:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 8014984 <kalman_3gyro.constprop.0+0xa3c>
 8014cf8:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 8014cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d00:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 8014d04:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 8014d08:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 8014d0c:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 8014d10:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 8014d14:	f100 84e4 	bmi.w	80156e0 <kalman_3gyro.constprop.0+0x1798>
 8014d18:	bfd8      	it	le
 8014d1a:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 8014d1e:	ee37 6a87 	vadd.f32	s12, s15, s14
 8014d22:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 8014d26:	ee35 6a46 	vsub.f32	s12, s10, s12
 8014d2a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8014d2e:	eeb4 6ac3 	vcmpe.f32	s12, s6
 8014d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d36:	ee63 5aa5 	vmul.f32	s11, s7, s11
 8014d3a:	ee38 4a44 	vsub.f32	s8, s16, s8
 8014d3e:	bf84      	itt	hi
 8014d40:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 8014d44:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 8014d48:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 8014d4c:	bf8c      	ite	hi
 8014d4e:	eef1 3ac6 	vsqrthi.f32	s7, s12
 8014d52:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 80150d4 <kalman_3gyro.constprop.0+0x118c>
 8014d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d5a:	f100 84bd 	bmi.w	80156d8 <kalman_3gyro.constprop.0+0x1790>
 8014d5e:	bfd8      	it	le
 8014d60:	ee63 3a84 	vmulle.f32	s7, s7, s8
 8014d64:	ee37 7a05 	vadd.f32	s14, s14, s10
 8014d68:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8014d6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d70:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d7c:	bf84      	itt	hi
 8014d7e:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 8014d82:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 8014d86:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014d8a:	bf8c      	ite	hi
 8014d8c:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 8014d90:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 80150d4 <kalman_3gyro.constprop.0+0x118c>
 8014d94:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d9c:	ee63 3a86 	vmul.f32	s7, s7, s12
 8014da0:	f102 8399 	bmi.w	80174d6 <kalman_3gyro.constprop.0+0x358e>
 8014da4:	bfd8      	it	le
 8014da6:	ee27 7a26 	vmulle.f32	s14, s14, s13
 8014daa:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 8014dae:	1e53      	subs	r3, r2, #1
 8014db0:	b25b      	sxtb	r3, r3
 8014db2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014dbc:	dd1c      	ble.n	8014df8 <kalman_3gyro.constprop.0+0xeb0>
 8014dbe:	3a02      	subs	r2, #2
 8014dc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014dc4:	b2d2      	uxtb	r2, r2
 8014dc6:	f1ab 000c 	sub.w	r0, fp, #12
 8014dca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8014dce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014dd2:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 8014dd6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8014dda:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8014dde:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 8014de2:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 8014de6:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8014dea:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 8014dee:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 8014df2:	3b0c      	subs	r3, #12
 8014df4:	4283      	cmp	r3, r0
 8014df6:	d1f0      	bne.n	8014dda <kalman_3gyro.constprop.0+0xe92>
 8014df8:	eddd 6a07 	vldr	s13, [sp, #28]
 8014dfc:	4ab6      	ldr	r2, [pc, #728]	; (80150d8 <kalman_3gyro.constprop.0+0x1190>)
 8014dfe:	4bb7      	ldr	r3, [pc, #732]	; (80150dc <kalman_3gyro.constprop.0+0x1194>)
 8014e00:	ed92 8a00 	vldr	s16, [r2]
 8014e04:	ed93 ba00 	vldr	s22, [r3]
 8014e08:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 8014e0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014e10:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8014e14:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 8014e18:	f1c1 0101 	rsb	r1, r1, #1
 8014e1c:	910c      	str	r1, [sp, #48]	; 0x30
 8014e1e:	a92d      	add	r1, sp, #180	; 0xb4
 8014e20:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 8014e24:	9123      	str	r1, [sp, #140]	; 0x8c
 8014e26:	2100      	movs	r1, #0
 8014e28:	9109      	str	r1, [sp, #36]	; 0x24
 8014e2a:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 8014e2e:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 8014e32:	ee75 5aa5 	vadd.f32	s11, s11, s11
 8014e36:	ee73 7aa3 	vadd.f32	s15, s7, s7
 8014e3a:	ee37 7a07 	vadd.f32	s14, s14, s14
 8014e3e:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8014e42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014e46:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014e4a:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 8014e4e:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 8014e52:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 8014e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014e5c:	3301      	adds	r3, #1
 8014e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8014e60:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8014e64:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 8014e68:	18e0      	adds	r0, r4, r3
 8014e6a:	f803 0f01 	strb.w	r0, [r3, #1]!
 8014e6e:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 8014e72:	f841 0b04 	str.w	r0, [r1], #4
 8014e76:	f20d 2069 	addw	r0, sp, #617	; 0x269
 8014e7a:	4298      	cmp	r0, r3
 8014e7c:	f102 020c 	add.w	r2, r2, #12
 8014e80:	d1f2      	bne.n	8014e68 <kalman_3gyro.constprop.0+0xf20>
 8014e82:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8014e86:	ed93 7a00 	vldr	s14, [r3]
 8014e8a:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 8014e8e:	edd3 7a00 	vldr	s15, [r3]
 8014e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e9a:	bf84      	itt	hi
 8014e9c:	f44f 7381 	movhi.w	r3, #258	; 0x102
 8014ea0:	f8a9 3000 	strhhi.w	r3, [r9]
 8014ea4:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 8014ea8:	ed93 7a00 	vldr	s14, [r3]
 8014eac:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 8014eb0:	edd3 7a00 	vldr	s15, [r3]
 8014eb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ebc:	bf84      	itt	hi
 8014ebe:	f44f 7341 	movhi.w	r3, #772	; 0x304
 8014ec2:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 8014ec6:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 8014eca:	ed93 7a00 	vldr	s14, [r3]
 8014ece:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 8014ed2:	edd3 7a00 	vldr	s15, [r3]
 8014ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ede:	bf84      	itt	hi
 8014ee0:	f240 5306 	movwhi	r3, #1286	; 0x506
 8014ee4:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 8014ee8:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 8014eec:	ed93 7a00 	vldr	s14, [r3]
 8014ef0:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 8014ef4:	edd3 7a00 	vldr	s15, [r3]
 8014ef8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f00:	bf84      	itt	hi
 8014f02:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 8014f06:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 8014f0a:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 8014f0e:	ed93 7a00 	vldr	s14, [r3]
 8014f12:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 8014f16:	edd3 7a00 	vldr	s15, [r3]
 8014f1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f22:	bf84      	itt	hi
 8014f24:	f640 130a 	movwhi	r3, #2314	; 0x90a
 8014f28:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 8014f2c:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 8014f30:	ed93 7a00 	vldr	s14, [r3]
 8014f34:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8014f38:	edd3 7a00 	vldr	s15, [r3]
 8014f3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f44:	bf84      	itt	hi
 8014f46:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 8014f4a:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 8014f4e:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 8014f52:	ed93 7a00 	vldr	s14, [r3]
 8014f56:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 8014f5a:	edd3 7a00 	vldr	s15, [r3]
 8014f5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f66:	bf84      	itt	hi
 8014f68:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 8014f6c:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 8014f70:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 8014f74:	ed93 7a00 	vldr	s14, [r3]
 8014f78:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 8014f7c:	edd3 7a00 	vldr	s15, [r3]
 8014f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f88:	bf84      	itt	hi
 8014f8a:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 8014f8e:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 8014f92:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 8014f96:	ed93 7a00 	vldr	s14, [r3]
 8014f9a:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 8014f9e:	edd3 7a00 	vldr	s15, [r3]
 8014fa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014faa:	bf84      	itt	hi
 8014fac:	f241 1312 	movwhi	r3, #4370	; 0x1112
 8014fb0:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 8014fb4:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 8014fb8:	ed93 7a00 	vldr	s14, [r3]
 8014fbc:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 8014fc0:	edd3 7a00 	vldr	s15, [r3]
 8014fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fcc:	bf84      	itt	hi
 8014fce:	f241 3314 	movwhi	r3, #4884	; 0x1314
 8014fd2:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 8014fd6:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 8014fda:	ed93 7a00 	vldr	s14, [r3]
 8014fde:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 8014fe2:	edd3 7a00 	vldr	s15, [r3]
 8014fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fee:	bf84      	itt	hi
 8014ff0:	f241 5316 	movwhi	r3, #5398	; 0x1516
 8014ff4:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 8014ff8:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 8014ffc:	ed93 7a00 	vldr	s14, [r3]
 8015000:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 8015004:	edd3 7a00 	vldr	s15, [r3]
 8015008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801500c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015010:	bf84      	itt	hi
 8015012:	f241 7318 	movwhi	r3, #5912	; 0x1718
 8015016:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 801501a:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 801501e:	ed93 7a00 	vldr	s14, [r3]
 8015022:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 8015026:	edd3 7a00 	vldr	s15, [r3]
 801502a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801502e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015032:	bf84      	itt	hi
 8015034:	f641 131a 	movwhi	r3, #6426	; 0x191a
 8015038:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 801503c:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 8015040:	ed93 7a00 	vldr	s14, [r3]
 8015044:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 8015048:	edd3 7a00 	vldr	s15, [r3]
 801504c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015054:	bf84      	itt	hi
 8015056:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 801505a:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 801505e:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 8015062:	ed93 7a00 	vldr	s14, [r3]
 8015066:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 801506a:	edd3 7a00 	vldr	s15, [r3]
 801506e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015076:	bf84      	itt	hi
 8015078:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 801507c:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 8015080:	221e      	movs	r2, #30
 8015082:	2101      	movs	r1, #1
 8015084:	4650      	mov	r0, sl
 8015086:	f00d fe83 	bl	8022d90 <memset>
 801508a:	2304      	movs	r3, #4
 801508c:	9307      	str	r3, [sp, #28]
 801508e:	2302      	movs	r3, #2
 8015090:	9305      	str	r3, [sp, #20]
 8015092:	9b05      	ldr	r3, [sp, #20]
 8015094:	9306      	str	r3, [sp, #24]
 8015096:	1c5f      	adds	r7, r3, #1
 8015098:	005b      	lsls	r3, r3, #1
 801509a:	9305      	str	r3, [sp, #20]
 801509c:	f04f 0b01 	mov.w	fp, #1
 80150a0:	9b05      	ldr	r3, [sp, #20]
 80150a2:	f8cd b004 	str.w	fp, [sp, #4]
 80150a6:	445b      	add	r3, fp
 80150a8:	2b1f      	cmp	r3, #31
 80150aa:	bfa8      	it	ge
 80150ac:	231f      	movge	r3, #31
 80150ae:	465a      	mov	r2, fp
 80150b0:	eba3 0802 	sub.w	r8, r3, r2
 80150b4:	f1b8 0f00 	cmp.w	r8, #0
 80150b8:	469b      	mov	fp, r3
 80150ba:	f107 35ff 	add.w	r5, r7, #4294967295
 80150be:	dd44      	ble.n	801514a <kalman_3gyro.constprop.0+0x1202>
 80150c0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80150c4:	9302      	str	r3, [sp, #8]
 80150c6:	f1ab 0302 	sub.w	r3, fp, #2
 80150ca:	e9cd 8303 	strd	r8, r3, [sp, #12]
 80150ce:	4616      	mov	r6, r2
 80150d0:	2400      	movs	r4, #0
 80150d2:	e00f      	b.n	80150f4 <kalman_3gyro.constprop.0+0x11ac>
 80150d4:	00000000 	.word	0x00000000
 80150d8:	20006cc8 	.word	0x20006cc8
 80150dc:	20006cd8 	.word	0x20006cd8
 80150e0:	3f333333 	.word	0x3f333333
 80150e4:	3f4ccccd 	.word	0x3f4ccccd
 80150e8:	3f666666 	.word	0x3f666666
 80150ec:	3ecccccc 	.word	0x3ecccccc
 80150f0:	3dcccccd 	.word	0x3dcccccd
 80150f4:	1e71      	subs	r1, r6, #1
 80150f6:	f919 0005 	ldrsb.w	r0, [r9, r5]
 80150fa:	f919 2001 	ldrsb.w	r2, [r9, r1]
 80150fe:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8015102:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015106:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 801510a:	ed5c 7a01 	vldr	s15, [ip, #-4]
 801510e:	ed1e 7a01 	vldr	s14, [lr, #-4]
 8015112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801511a:	f105 0c02 	add.w	ip, r5, #2
 801511e:	f105 0801 	add.w	r8, r5, #1
 8015122:	f240 81d3 	bls.w	80154cc <kalman_3gyro.constprop.0+0x1584>
 8015126:	45e3      	cmp	fp, ip
 8015128:	f80a 0004 	strb.w	r0, [sl, r4]
 801512c:	f000 81bf 	beq.w	80154ae <kalman_3gyro.constprop.0+0x1566>
 8015130:	4645      	mov	r5, r8
 8015132:	9b03      	ldr	r3, [sp, #12]
 8015134:	3401      	adds	r4, #1
 8015136:	42a3      	cmp	r3, r4
 8015138:	dcdc      	bgt.n	80150f4 <kalman_3gyro.constprop.0+0x11ac>
 801513a:	4698      	mov	r8, r3
 801513c:	9b01      	ldr	r3, [sp, #4]
 801513e:	1e58      	subs	r0, r3, #1
 8015140:	4448      	add	r0, r9
 8015142:	4642      	mov	r2, r8
 8015144:	4651      	mov	r1, sl
 8015146:	f00d fdfb 	bl	8022d40 <memcpy>
 801514a:	9b06      	ldr	r3, [sp, #24]
 801514c:	eb0b 0703 	add.w	r7, fp, r3
 8015150:	2f1e      	cmp	r7, #30
 8015152:	dda5      	ble.n	80150a0 <kalman_3gyro.constprop.0+0x1158>
 8015154:	9b07      	ldr	r3, [sp, #28]
 8015156:	3b01      	subs	r3, #1
 8015158:	9307      	str	r3, [sp, #28]
 801515a:	d19a      	bne.n	8015092 <kalman_3gyro.constprop.0+0x114a>
 801515c:	f999 200e 	ldrsb.w	r2, [r9, #14]
 8015160:	f999 300f 	ldrsb.w	r3, [r9, #15]
 8015164:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8015168:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801516c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015170:	ed52 7a01 	vldr	s15, [r2, #-4]
 8015174:	ed13 7a01 	vldr	s14, [r3, #-4]
 8015178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015180:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015184:	460a      	mov	r2, r1
 8015186:	bf4c      	ite	mi
 8015188:	2201      	movmi	r2, #1
 801518a:	2200      	movpl	r2, #0
 801518c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015190:	bf4c      	ite	mi
 8015192:	2301      	movmi	r3, #1
 8015194:	2300      	movpl	r3, #0
 8015196:	429a      	cmp	r2, r3
 8015198:	f000 81b4 	beq.w	8015504 <kalman_3gyro.constprop.0+0x15bc>
 801519c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80151a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80151a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151aa:	ece3 7a01 	vstmia	r3!, {s15}
 80151ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80151b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151b2:	3304      	adds	r3, #4
 80151b4:	930a      	str	r3, [sp, #40]	; 0x28
 80151b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151b8:	2b03      	cmp	r3, #3
 80151ba:	f47f ae4c 	bne.w	8014e56 <kalman_3gyro.constprop.0+0xf0e>
 80151be:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80151c2:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 80151c6:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 80151ca:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 80150e0 <kalman_3gyro.constprop.0+0x1198>
 80151ce:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 80151d2:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 80150e4 <kalman_3gyro.constprop.0+0x119c>
 80151d6:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 80151da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80151de:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80151e2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80151e6:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 80151ea:	eee6 7a06 	vfma.f32	s15, s12, s12
 80151ee:	ee6d 5a26 	vmul.f32	s11, s26, s13
 80151f2:	eeb0 6a67 	vmov.f32	s12, s15
 80151f6:	edcd 7a03 	vstr	s15, [sp, #12]
 80151fa:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 80151fe:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 8015202:	eeb1 4ac6 	vsqrt.f32	s8, s12
 8015206:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801520a:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 801520e:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 8015212:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8015216:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 801521a:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 801521e:	eec5 5a27 	vdiv.f32	s11, s10, s15
 8015222:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 8015226:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801522a:	eeab 5aa7 	vfma.f32	s10, s23, s15
 801522e:	ee64 7a27 	vmul.f32	s15, s8, s15
 8015232:	ee25 7a07 	vmul.f32	s14, s10, s14
 8015236:	ed8d 5a02 	vstr	s10, [sp, #8]
 801523a:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 801523e:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 8015242:	2b00      	cmp	r3, #0
 8015244:	f040 81a4 	bne.w	8015590 <kalman_3gyro.constprop.0+0x1648>
 8015248:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 801524c:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 8015250:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8015254:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 8015258:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 801525c:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8015260:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8015264:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 8015268:	f8c8 3020 	str.w	r3, [r8, #32]
 801526c:	ed88 7a07 	vstr	s14, [r8, #28]
 8015270:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 8015274:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 8015278:	ed93 7a00 	vldr	s14, [r3]
 801527c:	ed92 8a00 	vldr	s16, [r2]
 8015280:	eddb ea02 	vldr	s29, [fp, #8]
 8015284:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 8015288:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 801528c:	ed92 5a00 	vldr	s10, [r2]
 8015290:	ee28 8a07 	vmul.f32	s16, s16, s14
 8015294:	ed93 7a00 	vldr	s14, [r3]
 8015298:	eea5 8a07 	vfma.f32	s16, s10, s14
 801529c:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 80152a0:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 80152a4:	ed92 5a00 	vldr	s10, [r2]
 80152a8:	ed93 7a00 	vldr	s14, [r3]
 80152ac:	eea5 8a07 	vfma.f32	s16, s10, s14
 80152b0:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 80152b4:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 80152b8:	ed92 5a00 	vldr	s10, [r2]
 80152bc:	ed93 7a00 	vldr	s14, [r3]
 80152c0:	eea5 8a07 	vfma.f32	s16, s10, s14
 80152c4:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 80152c8:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 80152cc:	ed92 5a00 	vldr	s10, [r2]
 80152d0:	ed93 7a00 	vldr	s14, [r3]
 80152d4:	eef5 eac0 	vcmpe.f32	s29, #0.0
 80152d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152dc:	eea5 8a07 	vfma.f32	s16, s10, s14
 80152e0:	f340 8232 	ble.w	8015748 <kalman_3gyro.constprop.0+0x1800>
 80152e4:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 80152e8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80152ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f0:	f100 815e 	bmi.w	80155b0 <kalman_3gyro.constprop.0+0x1668>
 80152f4:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 80152f8:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 80152fc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8015300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015304:	f142 8474 	bpl.w	8017bf0 <kalman_3gyro.constprop.0+0x3ca8>
 8015308:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 801530c:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8015310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015314:	f342 84c1 	ble.w	8017c9a <kalman_3gyro.constprop.0+0x3d52>
 8015318:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 801531c:	eef4 2ac8 	vcmpe.f32	s5, s16
 8015320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015324:	f342 8658 	ble.w	8017fd8 <kalman_3gyro.constprop.0+0x4090>
 8015328:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 801532c:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8015330:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8015334:	ee38 3a47 	vsub.f32	s6, s16, s14
 8015338:	ee34 4a63 	vsub.f32	s8, s8, s7
 801533c:	ee32 7ac7 	vsub.f32	s14, s5, s14
 8015340:	ee24 4a03 	vmul.f32	s8, s8, s6
 8015344:	eef4 4ac8 	vcmpe.f32	s9, s16
 8015348:	ee84 ea07 	vdiv.f32	s28, s8, s14
 801534c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015350:	ee3e ea23 	vadd.f32	s28, s28, s7
 8015354:	f202 8658 	bhi.w	8018008 <kalman_3gyro.constprop.0+0x40c0>
 8015358:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 801535c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8015360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015364:	f342 8658 	ble.w	8018018 <kalman_3gyro.constprop.0+0x40d0>
 8015368:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 801536c:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 8015370:	ee38 3a64 	vsub.f32	s6, s16, s9
 8015374:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015378:	ee37 7a64 	vsub.f32	s14, s14, s9
 801537c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8015380:	ee84 ea87 	vdiv.f32	s28, s9, s14
 8015384:	ee3e ea23 	vadd.f32	s28, s28, s7
 8015388:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 801538c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8015390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015394:	f202 8658 	bhi.w	8018048 <kalman_3gyro.constprop.0+0x4100>
 8015398:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 801539c:	eef4 4ac8 	vcmpe.f32	s9, s16
 80153a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153a4:	f343 8305 	ble.w	80189b2 <kalman_3gyro.constprop.0+0x4a6a>
 80153a8:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 80153ac:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 80153b0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80153b4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80153b8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80153bc:	ee24 4a03 	vmul.f32	s8, s8, s6
 80153c0:	ee84 ea07 	vdiv.f32	s28, s8, s14
 80153c4:	ee3e ea23 	vadd.f32	s28, s28, s7
 80153c8:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 80153cc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80153d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d4:	f202 8658 	bhi.w	8018088 <kalman_3gyro.constprop.0+0x4140>
 80153d8:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 80153dc:	eef4 4ac8 	vcmpe.f32	s9, s16
 80153e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e4:	f343 82ed 	ble.w	80189c2 <kalman_3gyro.constprop.0+0x4a7a>
 80153e8:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 80153ec:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 80153f0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80153f4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80153f8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80153fc:	ee24 4a03 	vmul.f32	s8, s8, s6
 8015400:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8015404:	ee3e ea23 	vadd.f32	s28, s28, s7
 8015408:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 801540c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8015410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015414:	f2c2 8658 	blt.w	80180c8 <kalman_3gyro.constprop.0+0x4180>
 8015418:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 801541c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8015420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015424:	f143 82c1 	bpl.w	80189aa <kalman_3gyro.constprop.0+0x4a62>
 8015428:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 801542c:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 8015430:	ee38 3a47 	vsub.f32	s6, s16, s14
 8015434:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015438:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801543c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8015440:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8015444:	ee3e ea23 	vadd.f32	s28, s28, s7
 8015448:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 801544c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8015450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015454:	f2c2 8658 	blt.w	8018108 <kalman_3gyro.constprop.0+0x41c0>
 8015458:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 801545c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8015460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015464:	f142 8658 	bpl.w	8018118 <kalman_3gyro.constprop.0+0x41d0>
 8015468:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 801546c:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 8015470:	ee78 3a64 	vsub.f32	s7, s16, s9
 8015474:	ee35 5a44 	vsub.f32	s10, s10, s8
 8015478:	ee37 7a64 	vsub.f32	s14, s14, s9
 801547c:	ee25 5a23 	vmul.f32	s10, s10, s7
 8015480:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8015484:	ee3e ea04 	vadd.f32	s28, s28, s8
 8015488:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 801548c:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8015490:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8015494:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8015498:	e15a      	b.n	8015750 <kalman_3gyro.constprop.0+0x1808>
 801549a:	ed1f 6aed 	vldr	s12, [pc, #-948]	; 80150e8 <kalman_3gyro.constprop.0+0x11a0>
 801549e:	ed5f aaed 	vldr	s21, [pc, #-948]	; 80150ec <kalman_3gyro.constprop.0+0x11a4>
 80154a2:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 80150f0 <kalman_3gyro.constprop.0+0x11a8>
 80154a6:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 80154aa:	f7fe beff 	b.w	80142ac <kalman_3gyro.constprop.0+0x364>
 80154ae:	1c60      	adds	r0, r4, #1
 80154b0:	42be      	cmp	r6, r7
 80154b2:	eba7 0206 	sub.w	r2, r7, r6
 80154b6:	4449      	add	r1, r9
 80154b8:	4450      	add	r0, sl
 80154ba:	f6bf ae39 	bge.w	8015130 <kalman_3gyro.constprop.0+0x11e8>
 80154be:	443c      	add	r4, r7
 80154c0:	1ba4      	subs	r4, r4, r6
 80154c2:	f00d fc3d 	bl	8022d40 <memcpy>
 80154c6:	463e      	mov	r6, r7
 80154c8:	4645      	mov	r5, r8
 80154ca:	e632      	b.n	8015132 <kalman_3gyro.constprop.0+0x11ea>
 80154cc:	3601      	adds	r6, #1
 80154ce:	42be      	cmp	r6, r7
 80154d0:	f80a 2004 	strb.w	r2, [sl, r4]
 80154d4:	f47f ae2d 	bne.w	8015132 <kalman_3gyro.constprop.0+0x11ea>
 80154d8:	9b02      	ldr	r3, [sp, #8]
 80154da:	f105 0801 	add.w	r8, r5, #1
 80154de:	1c60      	adds	r0, r4, #1
 80154e0:	45c3      	cmp	fp, r8
 80154e2:	eba3 0205 	sub.w	r2, r3, r5
 80154e6:	eb09 0105 	add.w	r1, r9, r5
 80154ea:	4450      	add	r0, sl
 80154ec:	f77f ae21 	ble.w	8015132 <kalman_3gyro.constprop.0+0x11ea>
 80154f0:	f00d fc26 	bl	8022d40 <memcpy>
 80154f4:	9b02      	ldr	r3, [sp, #8]
 80154f6:	441c      	add	r4, r3
 80154f8:	9b04      	ldr	r3, [sp, #16]
 80154fa:	1b5a      	subs	r2, r3, r5
 80154fc:	1b64      	subs	r4, r4, r5
 80154fe:	eb02 0508 	add.w	r5, r2, r8
 8015502:	e616      	b.n	8015132 <kalman_3gyro.constprop.0+0x11ea>
 8015504:	eef4 7a48 	vcmp.f32	s15, s16
 8015508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801550c:	f43f ae46 	beq.w	801519c <kalman_3gyro.constprop.0+0x1254>
 8015510:	eef4 7a4b 	vcmp.f32	s15, s22
 8015514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015518:	f43f ae40 	beq.w	801519c <kalman_3gyro.constprop.0+0x1254>
 801551c:	eeb4 7a48 	vcmp.f32	s14, s16
 8015520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015524:	f43f ae3a 	beq.w	801519c <kalman_3gyro.constprop.0+0x1254>
 8015528:	eeb4 7a4b 	vcmp.f32	s14, s22
 801552c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015530:	f43f ae34 	beq.w	801519c <kalman_3gyro.constprop.0+0x1254>
 8015534:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015538:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801553c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015540:	e632      	b.n	80151a8 <kalman_3gyro.constprop.0+0x1260>
 8015542:	2304      	movs	r3, #4
 8015544:	9301      	str	r3, [sp, #4]
 8015546:	2200      	movs	r2, #0
 8015548:	461c      	mov	r4, r3
 801554a:	2307      	movs	r3, #7
 801554c:	4694      	mov	ip, r2
 801554e:	2106      	movs	r1, #6
 8015550:	9302      	str	r3, [sp, #8]
 8015552:	2603      	movs	r6, #3
 8015554:	f04f 0a01 	mov.w	sl, #1
 8015558:	f7ff ba5c 	b.w	8014a14 <kalman_3gyro.constprop.0+0xacc>
 801555c:	9a08      	ldr	r2, [sp, #32]
 801555e:	eddf 7a62 	vldr	s15, [pc, #392]	; 80156e8 <kalman_3gyro.constprop.0+0x17a0>
 8015562:	eddf 5a62 	vldr	s11, [pc, #392]	; 80156ec <kalman_3gyro.constprop.0+0x17a4>
 8015566:	ed9f 5a62 	vldr	s10, [pc, #392]	; 80156f0 <kalman_3gyro.constprop.0+0x17a8>
 801556a:	4b62      	ldr	r3, [pc, #392]	; (80156f4 <kalman_3gyro.constprop.0+0x17ac>)
 801556c:	edc2 7a00 	vstr	s15, [r2]
 8015570:	eeb0 4a65 	vmov.f32	s8, s11
 8015574:	eeb0 3a67 	vmov.f32	s6, s15
 8015578:	eef0 4a45 	vmov.f32	s9, s10
 801557c:	6053      	str	r3, [r2, #4]
 801557e:	6093      	str	r3, [r2, #8]
 8015580:	f7fe bd60 	b.w	8014044 <kalman_3gyro.constprop.0+0xfc>
 8015584:	2308      	movs	r3, #8
 8015586:	2005      	movs	r0, #5
 8015588:	f04f 0802 	mov.w	r8, #2
 801558c:	f7ff ba5c 	b.w	8014a48 <kalman_3gyro.constprop.0+0xb00>
 8015590:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 8015594:	2300      	movs	r3, #0
 8015596:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 801559a:	ed88 7a07 	vstr	s14, [r8, #28]
 801559e:	ed88 7a08 	vstr	s14, [r8, #32]
 80155a2:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 80155a6:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 80155aa:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 80155ae:	e65f      	b.n	8015270 <kalman_3gyro.constprop.0+0x1328>
 80155b0:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 80155b4:	eeb4 5ac8 	vcmpe.f32	s10, s16
 80155b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155bc:	f342 8369 	ble.w	8017c92 <kalman_3gyro.constprop.0+0x3d4a>
 80155c0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80155c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155c8:	f2c2 867c 	blt.w	80182c4 <kalman_3gyro.constprop.0+0x437c>
 80155cc:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 80155d0:	eef4 4ac8 	vcmpe.f32	s9, s16
 80155d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155d8:	f342 86a6 	ble.w	8018328 <kalman_3gyro.constprop.0+0x43e0>
 80155dc:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 80155e0:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 80155e4:	ee38 3a47 	vsub.f32	s6, s16, s14
 80155e8:	ee34 4a63 	vsub.f32	s8, s8, s7
 80155ec:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80155f0:	ee64 4a03 	vmul.f32	s9, s8, s6
 80155f4:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80155f8:	ee3b ba23 	vadd.f32	s22, s22, s7
 80155fc:	f002 be6b 	b.w	80182d6 <kalman_3gyro.constprop.0+0x438e>
 8015600:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8015604:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8015608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801560c:	f342 8458 	ble.w	8017ec0 <kalman_3gyro.constprop.0+0x3f78>
 8015610:	ed9f 8a39 	vldr	s16, [pc, #228]	; 80156f8 <kalman_3gyro.constprop.0+0x17b0>
 8015614:	f7ff b993 	b.w	801493e <kalman_3gyro.constprop.0+0x9f6>
 8015618:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801561c:	eeb4 bac7 	vcmpe.f32	s22, s14
 8015620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015624:	f342 843e 	ble.w	8017ea4 <kalman_3gyro.constprop.0+0x3f5c>
 8015628:	ed9f ba33 	vldr	s22, [pc, #204]	; 80156f8 <kalman_3gyro.constprop.0+0x17b0>
 801562c:	f7ff b968 	b.w	8014900 <kalman_3gyro.constprop.0+0x9b8>
 8015630:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8015634:	eef4 dac7 	vcmpe.f32	s27, s14
 8015638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801563c:	f342 844e 	ble.w	8017edc <kalman_3gyro.constprop.0+0x3f94>
 8015640:	eddf da2d 	vldr	s27, [pc, #180]	; 80156f8 <kalman_3gyro.constprop.0+0x17b0>
 8015644:	f7ff b93d 	b.w	80148c2 <kalman_3gyro.constprop.0+0x97a>
 8015648:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801564c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8015650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015654:	f342 8418 	ble.w	8017e88 <kalman_3gyro.constprop.0+0x3f40>
 8015658:	ed9f 8a27 	vldr	s16, [pc, #156]	; 80156f8 <kalman_3gyro.constprop.0+0x17b0>
 801565c:	f7ff b8cf 	b.w	80147fe <kalman_3gyro.constprop.0+0x8b6>
 8015660:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8015664:	eeb4 bac7 	vcmpe.f32	s22, s14
 8015668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801566c:	f342 834b 	ble.w	8017d06 <kalman_3gyro.constprop.0+0x3dbe>
 8015670:	ed9f ba21 	vldr	s22, [pc, #132]	; 80156f8 <kalman_3gyro.constprop.0+0x17b0>
 8015674:	f7ff b8a4 	b.w	80147c0 <kalman_3gyro.constprop.0+0x878>
 8015678:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801567c:	eef4 dac7 	vcmpe.f32	s27, s14
 8015680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015684:	f342 8331 	ble.w	8017cea <kalman_3gyro.constprop.0+0x3da2>
 8015688:	eddf da1b 	vldr	s27, [pc, #108]	; 80156f8 <kalman_3gyro.constprop.0+0x17b0>
 801568c:	f7ff b879 	b.w	8014782 <kalman_3gyro.constprop.0+0x83a>
 8015690:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8015694:	eef4 dac7 	vcmpe.f32	s27, s14
 8015698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801569c:	f342 8317 	ble.w	8017cce <kalman_3gyro.constprop.0+0x3d86>
 80156a0:	eddf da15 	vldr	s27, [pc, #84]	; 80156f8 <kalman_3gyro.constprop.0+0x17b0>
 80156a4:	f7ff b80b 	b.w	80146be <kalman_3gyro.constprop.0+0x776>
 80156a8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80156ac:	eeb4 eac7 	vcmpe.f32	s28, s14
 80156b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156b4:	f342 82fd 	ble.w	8017cb2 <kalman_3gyro.constprop.0+0x3d6a>
 80156b8:	ed9f ea0f 	vldr	s28, [pc, #60]	; 80156f8 <kalman_3gyro.constprop.0+0x17b0>
 80156bc:	f7fe bfe0 	b.w	8014680 <kalman_3gyro.constprop.0+0x738>
 80156c0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80156c4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80156c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156cc:	f342 8345 	ble.w	8017d5a <kalman_3gyro.constprop.0+0x3e12>
 80156d0:	ed9f 8a09 	vldr	s16, [pc, #36]	; 80156f8 <kalman_3gyro.constprop.0+0x17b0>
 80156d4:	f7fe bfb5 	b.w	8014642 <kalman_3gyro.constprop.0+0x6fa>
 80156d8:	eef1 3a63 	vneg.f32	s7, s7
 80156dc:	f7ff bb42 	b.w	8014d64 <kalman_3gyro.constprop.0+0xe1c>
 80156e0:	eef1 3a63 	vneg.f32	s7, s7
 80156e4:	f7ff bb1b 	b.w	8014d1e <kalman_3gyro.constprop.0+0xdd6>
 80156e8:	00000000 	.word	0x00000000
 80156ec:	3fb33333 	.word	0x3fb33333
 80156f0:	bfb33333 	.word	0xbfb33333
 80156f4:	3f333333 	.word	0x3f333333
 80156f8:	80000000 	.word	0x80000000
 80156fc:	3fb77778 	.word	0x3fb77778
 8015700:	3f99999a 	.word	0x3f99999a
 8015704:	3f4ccccd 	.word	0x3f4ccccd
 8015708:	42d40000 	.word	0x42d40000
 801570c:	46979000 	.word	0x46979000
 8015710:	4415c000 	.word	0x4415c000
 8015714:	3ba3d70a 	.word	0x3ba3d70a
 8015718:	3b449ba6 	.word	0x3b449ba6
 801571c:	3c75c28f 	.word	0x3c75c28f
 8015720:	3c23d70a 	.word	0x3c23d70a
 8015724:	3d4cccc0 	.word	0x3d4cccc0
 8015728:	43480000 	.word	0x43480000
 801572c:	3d4ccccd 	.word	0x3d4ccccd
 8015730:	3cf5c28f 	.word	0x3cf5c28f
 8015734:	3eb33334 	.word	0x3eb33334
 8015738:	3f933333 	.word	0x3f933333
 801573c:	4247ffff 	.word	0x4247ffff
 8015740:	3dcccccd 	.word	0x3dcccccd
 8015744:	3e4ccccd 	.word	0x3e4ccccd
 8015748:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 801574c:	eeb0 ba4e 	vmov.f32	s22, s28
 8015750:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 8015754:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 8015758:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 8015740 <kalman_3gyro.constprop.0+0x17f8>
 801575c:	ee79 da6d 	vsub.f32	s27, s18, s27
 8015760:	ee3c 5a47 	vsub.f32	s10, s24, s14
 8015764:	eef0 daed 	vabs.f32	s27, s27
 8015768:	eeb0 5ac5 	vabs.f32	s10, s10
 801576c:	ee35 5a2d 	vadd.f32	s10, s10, s27
 8015770:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8015774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015778:	f340 821c 	ble.w	8015bb4 <kalman_3gyro.constprop.0+0x1c6c>
 801577c:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 80156fc <kalman_3gyro.constprop.0+0x17b4>
 8015780:	eeb4 5ac4 	vcmpe.f32	s10, s8
 8015784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015788:	f302 8242 	bgt.w	8017c10 <kalman_3gyro.constprop.0+0x3cc8>
 801578c:	ee35 5a64 	vsub.f32	s10, s10, s9
 8015790:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 8015794:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8015798:	eee5 4a04 	vfma.f32	s9, s10, s8
 801579c:	eeb0 5a64 	vmov.f32	s10, s9
 80157a0:	eeb4 5aea 	vcmpe.f32	s10, s21
 80157a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157a8:	f89b 3000 	ldrb.w	r3, [fp]
 80157ac:	bfb8      	it	lt
 80157ae:	eeb0 5a6a 	vmovlt.f32	s10, s21
 80157b2:	ed8d 5a01 	vstr	s10, [sp, #4]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	f000 81f9 	beq.w	8015bae <kalman_3gyro.constprop.0+0x1c66>
 80157bc:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	f000 81de 	beq.w	8015b82 <kalman_3gyro.constprop.0+0x1c3a>
 80157c6:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 80157ca:	2300      	movs	r3, #0
 80157cc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80157d0:	eeb0 6a61 	vmov.f32	s12, s3
 80157d4:	eea7 6a47 	vfms.f32	s12, s14, s14
 80157d8:	9908      	ldr	r1, [sp, #32]
 80157da:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 80157de:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 80157e2:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 80157e6:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 80157ea:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 80157ee:	eef1 0ac6 	vsqrt.f32	s1, s12
 80157f2:	2200      	movs	r2, #0
 80157f4:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 80157f8:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 80157fc:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 8015800:	9233      	str	r2, [sp, #204]	; 0xcc
 8015802:	ee23 6aa3 	vmul.f32	s12, s7, s7
 8015806:	ee23 4a85 	vmul.f32	s8, s7, s10
 801580a:	ee36 2a06 	vadd.f32	s4, s12, s12
 801580e:	ee25 6a05 	vmul.f32	s12, s10, s10
 8015812:	ee22 1aa2 	vmul.f32	s2, s5, s5
 8015816:	ee36 6a06 	vadd.f32	s12, s12, s12
 801581a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801581e:	ee63 4aa6 	vmul.f32	s9, s7, s13
 8015822:	ee34 4a04 	vadd.f32	s8, s8, s8
 8015826:	eeb0 3a42 	vmov.f32	s6, s4
 801582a:	ee22 0aa6 	vmul.f32	s0, s5, s13
 801582e:	eea1 3a25 	vfma.f32	s6, s2, s11
 8015832:	eef0 aa46 	vmov.f32	s21, s12
 8015836:	ee62 3aa3 	vmul.f32	s7, s5, s7
 801583a:	eee1 aa25 	vfma.f32	s21, s2, s11
 801583e:	ee74 4aa4 	vadd.f32	s9, s9, s9
 8015842:	ee65 6a26 	vmul.f32	s13, s10, s13
 8015846:	ee22 5a85 	vmul.f32	s10, s5, s10
 801584a:	eef0 2a44 	vmov.f32	s5, s8
 801584e:	eee0 2a25 	vfma.f32	s5, s0, s11
 8015852:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8015856:	eeb0 fa64 	vmov.f32	s30, s9
 801585a:	eea0 4a65 	vfms.f32	s8, s0, s11
 801585e:	ee71 fac3 	vsub.f32	s31, s3, s6
 8015862:	ee95 fa25 	vfnms.f32	s30, s10, s11
 8015866:	eeb0 1a6a 	vmov.f32	s2, s21
 801586a:	eef0 aa66 	vmov.f32	s21, s13
 801586e:	eee3 aaa5 	vfma.f32	s21, s7, s11
 8015872:	ee31 1ac1 	vsub.f32	s2, s3, s2
 8015876:	ee2f 0a87 	vmul.f32	s0, s31, s14
 801587a:	ee32 6a06 	vadd.f32	s12, s4, s12
 801587e:	ee22 2a87 	vmul.f32	s4, s5, s14
 8015882:	eea0 0a84 	vfma.f32	s0, s1, s8
 8015886:	eea0 2a81 	vfma.f32	s4, s1, s2
 801588a:	ee2f 7a07 	vmul.f32	s14, s30, s14
 801588e:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 8015892:	eef0 3a64 	vmov.f32	s7, s9
 8015896:	eee5 3a65 	vfms.f32	s7, s10, s11
 801589a:	eee5 4a25 	vfma.f32	s9, s10, s11
 801589e:	ee33 3a61 	vsub.f32	s6, s6, s3
 80158a2:	edd1 5a02 	vldr	s11, [r1, #8]
 80158a6:	ed91 5a05 	vldr	s10, [r1, #20]
 80158aa:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 80158ae:	ee31 6ac6 	vsub.f32	s12, s3, s12
 80158b2:	eea0 7aaa 	vfma.f32	s14, s1, s21
 80158b6:	edd1 1a01 	vldr	s3, [r1, #4]
 80158ba:	edd1 fa00 	vldr	s31, [r1]
 80158be:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 80158c2:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80158c6:	ee31 2ac2 	vsub.f32	s4, s3, s4
 80158ca:	edd1 5a03 	vldr	s11, [r1, #12]
 80158ce:	edd1 1a04 	vldr	s3, [r1, #16]
 80158d2:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 8015700 <kalman_3gyro.constprop.0+0x17b8>
 80158d6:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 80158da:	ee33 3a05 	vadd.f32	s6, s6, s10
 80158de:	ee71 2ae2 	vsub.f32	s5, s3, s5
 80158e2:	ee73 3aa5 	vadd.f32	s7, s7, s11
 80158e6:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 80158ea:	eef4 7ac4 	vcmpe.f32	s15, s8
 80158ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158f2:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 80158f6:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 80158fa:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 80158fe:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 8015902:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 8015906:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 801590a:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 801590e:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 8015912:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 8015916:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 801591a:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 801591e:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 8015922:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 8015926:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 801592a:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 801592e:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 8015932:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 8015936:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 801593a:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 801593e:	d506      	bpl.n	801594e <kalman_3gyro.constprop.0+0x1a06>
 8015940:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 8015704 <kalman_3gyro.constprop.0+0x17bc>
 8015944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801594c:	dc01      	bgt.n	8015952 <kalman_3gyro.constprop.0+0x1a0a>
 801594e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015952:	ee7a 7a67 	vsub.f32	s15, s20, s15
 8015956:	eef0 7ae7 	vabs.f32	s15, s15
 801595a:	ee77 7aab 	vadd.f32	s15, s15, s23
 801595e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015966:	f340 8141 	ble.w	8015bec <kalman_3gyro.constprop.0+0x1ca4>
 801596a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801596e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015976:	f142 814f 	bpl.w	8017c18 <kalman_3gyro.constprop.0+0x3cd0>
 801597a:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 8015714 <kalman_3gyro.constprop.0+0x17cc>
 801597e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015982:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 8015720 <kalman_3gyro.constprop.0+0x17d8>
 8015986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801598a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801598e:	f102 81c8 	bmi.w	8017d22 <kalman_3gyro.constprop.0+0x3dda>
 8015992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015996:	f142 81c8 	bpl.w	8017d2a <kalman_3gyro.constprop.0+0x3de2>
 801599a:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 801571c <kalman_3gyro.constprop.0+0x17d4>
 801599e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80159a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159a6:	f282 8437 	bge.w	8018218 <kalman_3gyro.constprop.0+0x42d0>
 80159aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80159ae:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 8015730 <kalman_3gyro.constprop.0+0x17e8>
 80159b2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80159b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ba:	f2c2 8443 	blt.w	8018244 <kalman_3gyro.constprop.0+0x42fc>
 80159be:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 801572c <kalman_3gyro.constprop.0+0x17e4>
 80159c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80159c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ca:	f142 8443 	bpl.w	8018254 <kalman_3gyro.constprop.0+0x430c>
 80159ce:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 8015730 <kalman_3gyro.constprop.0+0x17e8>
 80159d2:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 801573c <kalman_3gyro.constprop.0+0x17f4>
 80159d6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80159da:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80159de:	ee66 6a87 	vmul.f32	s13, s13, s14
 80159e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80159e6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80159ea:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 8015740 <kalman_3gyro.constprop.0+0x17f8>
 80159ee:	eef4 7ae6 	vcmpe.f32	s15, s13
 80159f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159f6:	f2c2 8443 	blt.w	8018280 <kalman_3gyro.constprop.0+0x4338>
 80159fa:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 8015744 <kalman_3gyro.constprop.0+0x17fc>
 80159fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a06:	f142 8443 	bpl.w	8018290 <kalman_3gyro.constprop.0+0x4348>
 8015a0a:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 8015740 <kalman_3gyro.constprop.0+0x17f8>
 8015a0e:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 8015708 <kalman_3gyro.constprop.0+0x17c0>
 8015a12:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8015a16:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8015a1a:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015a1e:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8015a22:	eea6 7a86 	vfma.f32	s14, s13, s12
 8015a26:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015a2a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a32:	db0d      	blt.n	8015a50 <kalman_3gyro.constprop.0+0x1b08>
 8015a34:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015a38:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 801570c <kalman_3gyro.constprop.0+0x17c4>
 8015a3c:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 8015710 <kalman_3gyro.constprop.0+0x17c8>
 8015a40:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8015a44:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015a48:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8015a4c:	eea6 7a86 	vfma.f32	s14, s13, s12
 8015a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015a54:	ee77 6a26 	vadd.f32	s13, s14, s13
 8015a58:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8015a5c:	eec6 4a26 	vdiv.f32	s9, s12, s13
 8015a60:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 801571c <kalman_3gyro.constprop.0+0x17d4>
 8015a64:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 8015714 <kalman_3gyro.constprop.0+0x17cc>
 8015a68:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 8015720 <kalman_3gyro.constprop.0+0x17d8>
 8015a6c:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 8015718 <kalman_3gyro.constprop.0+0x17d0>
 8015a70:	eef4 4ac6 	vcmpe.f32	s9, s12
 8015a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a78:	eef4 7ae3 	vcmpe.f32	s15, s7
 8015a7c:	bfb8      	it	lt
 8015a7e:	eef0 4a46 	vmovlt.f32	s9, s12
 8015a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a86:	ee24 4a84 	vmul.f32	s8, s9, s8
 8015a8a:	ee24 6aa6 	vmul.f32	s12, s9, s13
 8015a8e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015a92:	f142 83b2 	bpl.w	80181fa <kalman_3gyro.constprop.0+0x42b2>
 8015a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a9a:	f2c2 83b2 	blt.w	8018202 <kalman_3gyro.constprop.0+0x42ba>
 8015a9e:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 801571c <kalman_3gyro.constprop.0+0x17d4>
 8015aa2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aaa:	f142 834d 	bpl.w	8018148 <kalman_3gyro.constprop.0+0x4200>
 8015aae:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 8015720 <kalman_3gyro.constprop.0+0x17d8>
 8015ab2:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 8015724 <kalman_3gyro.constprop.0+0x17dc>
 8015ab6:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 8015728 <kalman_3gyro.constprop.0+0x17e0>
 8015aba:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8015abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015ac2:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8015ac6:	eee3 6a83 	vfma.f32	s13, s7, s6
 8015aca:	eeb0 ca66 	vmov.f32	s24, s13
 8015ace:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 8015730 <kalman_3gyro.constprop.0+0x17e8>
 8015ad2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ada:	f2c2 834d 	blt.w	8018178 <kalman_3gyro.constprop.0+0x4230>
 8015ade:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 801572c <kalman_3gyro.constprop.0+0x17e4>
 8015ae2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aea:	f142 834d 	bpl.w	8018188 <kalman_3gyro.constprop.0+0x4240>
 8015aee:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 8015730 <kalman_3gyro.constprop.0+0x17e8>
 8015af2:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 8015734 <kalman_3gyro.constprop.0+0x17ec>
 8015af6:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 801573c <kalman_3gyro.constprop.0+0x17f4>
 8015afa:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 8015738 <kalman_3gyro.constprop.0+0x17f0>
 8015afe:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8015b02:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8015b06:	eee3 6a83 	vfma.f32	s13, s7, s6
 8015b0a:	eeb0 ca66 	vmov.f32	s24, s13
 8015b0e:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 8015740 <kalman_3gyro.constprop.0+0x17f8>
 8015b12:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b1a:	f2c2 834d 	blt.w	80181b8 <kalman_3gyro.constprop.0+0x4270>
 8015b1e:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 8015744 <kalman_3gyro.constprop.0+0x17fc>
 8015b22:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b2a:	f142 834d 	bpl.w	80181c8 <kalman_3gyro.constprop.0+0x4280>
 8015b2e:	eddf 3a23 	vldr	s7, [pc, #140]	; 8015bbc <kalman_3gyro.constprop.0+0x1c74>
 8015b32:	eddf 6a23 	vldr	s13, [pc, #140]	; 8015bc0 <kalman_3gyro.constprop.0+0x1c78>
 8015b36:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8015b3a:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 8015b3e:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8015b42:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 8015b46:	eee3 6a83 	vfma.f32	s13, s7, s6
 8015b4a:	eeb0 ca66 	vmov.f32	s24, s13
 8015b4e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015b52:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b5a:	f2c2 8067 	blt.w	8017c2c <kalman_3gyro.constprop.0+0x3ce4>
 8015b5e:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8015b62:	ee37 3ae3 	vsub.f32	s6, s15, s7
 8015b66:	eddf 3a17 	vldr	s7, [pc, #92]	; 8015bc4 <kalman_3gyro.constprop.0+0x1c7c>
 8015b6a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8015bc8 <kalman_3gyro.constprop.0+0x1c80>
 8015b6e:	ee63 3a23 	vmul.f32	s7, s6, s7
 8015b72:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8015b76:	eee3 6a83 	vfma.f32	s13, s7, s6
 8015b7a:	eeb0 ca66 	vmov.f32	s24, s13
 8015b7e:	f002 b855 	b.w	8017c2c <kalman_3gyro.constprop.0+0x3ce4>
 8015b82:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015b86:	ed9b 6a05 	vldr	s12, [fp, #20]
 8015b8a:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8015b8e:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 8015b92:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8015b96:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015b9a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8015b9e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8015ba2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015baa:	f102 81d9 	bmi.w	8017f60 <kalman_3gyro.constprop.0+0x4018>
 8015bae:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 8015bb2:	e60b      	b.n	80157cc <kalman_3gyro.constprop.0+0x1884>
 8015bb4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8015bb8:	e5f2      	b.n	80157a0 <kalman_3gyro.constprop.0+0x1858>
 8015bba:	bf00      	nop
 8015bbc:	3dcccccd 	.word	0x3dcccccd
 8015bc0:	410c0000 	.word	0x410c0000
 8015bc4:	42c80000 	.word	0x42c80000
 8015bc8:	424a0000 	.word	0x424a0000
 8015bcc:	3c23d70a 	.word	0x3c23d70a
 8015bd0:	3b449ba6 	.word	0x3b449ba6
 8015bd4:	3fb33333 	.word	0x3fb33333
 8015bd8:	3ecccccd 	.word	0x3ecccccd
 8015bdc:	3f8f5c29 	.word	0x3f8f5c29
 8015be0:	3f59999a 	.word	0x3f59999a
 8015be4:	3e4ccccd 	.word	0x3e4ccccd
 8015be8:	3f99999a 	.word	0x3f99999a
 8015bec:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8015bf0:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 8015bcc <kalman_3gyro.constprop.0+0x1c84>
 8015bf4:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 8015bd0 <kalman_3gyro.constprop.0+0x1c88>
 8015bf8:	eeb0 7a4c 	vmov.f32	s14, s24
 8015bfc:	eef0 4a4c 	vmov.f32	s9, s24
 8015c00:	eddd 6a01 	vldr	s13, [sp, #4]
 8015c04:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 8015c08:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 8015c0c:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 8015c10:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 8015c14:	ee66 aa8b 	vmul.f32	s21, s13, s22
 8015c18:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 8015c1c:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 8015c20:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 8015c24:	f89b 200c 	ldrb.w	r2, [fp, #12]
 8015c28:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 8015c2c:	ee76 3aa6 	vadd.f32	s7, s13, s13
 8015c30:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 8015c34:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 8015c38:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8015c3c:	ee2a 3a83 	vmul.f32	s6, s21, s6
 8015c40:	ee62 2aaa 	vmul.f32	s5, s5, s21
 8015c44:	ee63 3a87 	vmul.f32	s7, s7, s14
 8015c48:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015c4c:	ee6b aa2a 	vmul.f32	s21, s22, s21
 8015c50:	ee2e ea02 	vmul.f32	s28, s28, s4
 8015c54:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 8015c58:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 8015c5c:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 8015c60:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 8015c64:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8015c68:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 8015c6c:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 8015c70:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 8015c74:	2a00      	cmp	r2, #0
 8015c76:	f001 8411 	beq.w	801749c <kalman_3gyro.constprop.0+0x3554>
 8015c7a:	ee77 2a07 	vadd.f32	s5, s14, s14
 8015c7e:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 8015c82:	f89b 100e 	ldrb.w	r1, [fp, #14]
 8015c86:	f89b 200d 	ldrb.w	r2, [fp, #13]
 8015c8a:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 8015c8e:	ee24 4a24 	vmul.f32	s8, s8, s9
 8015c92:	ee27 ea0e 	vmul.f32	s28, s14, s28
 8015c96:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8015c9a:	ee29 7a87 	vmul.f32	s14, s19, s14
 8015c9e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8015ca2:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 8015ca6:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 8015caa:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 8015cae:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 8015cb2:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 8015cb6:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 8015cba:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 8015cbe:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 8015cc2:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8015cc6:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 8015cca:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8015cce:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 8015cd2:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 8015cd6:	b159      	cbz	r1, 8015cf0 <kalman_3gyro.constprop.0+0x1da8>
 8015cd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ce4:	dd04      	ble.n	8015cf0 <kalman_3gyro.constprop.0+0x1da8>
 8015ce6:	2000      	movs	r0, #0
 8015ce8:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 8015cec:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 8015cf0:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8015cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cf8:	dd09      	ble.n	8015d0e <kalman_3gyro.constprop.0+0x1dc6>
 8015cfa:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 8015cfe:	eef4 7ac8 	vcmpe.f32	s15, s16
 8015d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d06:	db02      	blt.n	8015d0e <kalman_3gyro.constprop.0+0x1dc6>
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	f001 87b8 	beq.w	8017c7e <kalman_3gyro.constprop.0+0x3d36>
 8015d0e:	b132      	cbz	r2, 8015d1e <kalman_3gyro.constprop.0+0x1dd6>
 8015d10:	f240 1001 	movw	r0, #257	; 0x101
 8015d14:	2301      	movs	r3, #1
 8015d16:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 8015d1a:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8015d1e:	2301      	movs	r3, #1
 8015d20:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8015d24:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8015d28:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 8015bd4 <kalman_3gyro.constprop.0+0x1c8c>
 8015d2c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8015d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d34:	dc09      	bgt.n	8015d4a <kalman_3gyro.constprop.0+0x1e02>
 8015d36:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 8015bd8 <kalman_3gyro.constprop.0+0x1c90>
 8015d3a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8015d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d42:	d402      	bmi.n	8015d4a <kalman_3gyro.constprop.0+0x1e02>
 8015d44:	2a00      	cmp	r2, #0
 8015d46:	f042 8087 	bne.w	8017e58 <kalman_3gyro.constprop.0+0x3f10>
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8015d50:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8015d54:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8015d58:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8015d5c:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 8015bdc <kalman_3gyro.constprop.0+0x1c94>
 8015d60:	eeb4 aae7 	vcmpe.f32	s20, s15
 8015d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d68:	dc09      	bgt.n	8015d7e <kalman_3gyro.constprop.0+0x1e36>
 8015d6a:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 8015be0 <kalman_3gyro.constprop.0+0x1c98>
 8015d6e:	eeb4 aae7 	vcmpe.f32	s20, s15
 8015d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d76:	d402      	bmi.n	8015d7e <kalman_3gyro.constprop.0+0x1e36>
 8015d78:	2900      	cmp	r1, #0
 8015d7a:	f041 87fc 	bne.w	8017d76 <kalman_3gyro.constprop.0+0x3e2e>
 8015d7e:	2300      	movs	r3, #0
 8015d80:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 8015d84:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 8015d88:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8015d8c:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 8015d90:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015d94:	eef4 dae7 	vcmpe.f32	s27, s15
 8015d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d9c:	f341 836b 	ble.w	8017476 <kalman_3gyro.constprop.0+0x352e>
 8015da0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015da4:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8015da8:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8015dac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015db0:	2300      	movs	r3, #0
 8015db2:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8015db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015dba:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8015dbe:	eef4 dac7 	vcmpe.f32	s27, s14
 8015dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dc6:	bfc4      	itt	gt
 8015dc8:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 8015dcc:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 8015dd0:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8015dd4:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8015dd8:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8015ddc:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 8015de0:	2b0e      	cmp	r3, #14
 8015de2:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 8015de6:	dc02      	bgt.n	8015dee <kalman_3gyro.constprop.0+0x1ea6>
 8015de8:	3305      	adds	r3, #5
 8015dea:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8015dee:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8015df2:	eef4 7acd 	vcmpe.f32	s15, s26
 8015df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dfa:	f340 82e9 	ble.w	80163d0 <kalman_3gyro.constprop.0+0x2488>
 8015dfe:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8015e02:	eef4 7aeb 	vcmpe.f32	s15, s23
 8015e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e0a:	f340 82e1 	ble.w	80163d0 <kalman_3gyro.constprop.0+0x2488>
 8015e0e:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8015e12:	eef4 7aec 	vcmpe.f32	s15, s25
 8015e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e1a:	f340 82d9 	ble.w	80163d0 <kalman_3gyro.constprop.0+0x2488>
 8015e1e:	9b08      	ldr	r3, [sp, #32]
 8015e20:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 8015be4 <kalman_3gyro.constprop.0+0x1c9c>
 8015e24:	ed93 7a06 	vldr	s14, [r3, #24]
 8015e28:	eef0 6ac7 	vabs.f32	s13, s14
 8015e2c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e34:	f140 82cc 	bpl.w	80163d0 <kalman_3gyro.constprop.0+0x2488>
 8015e38:	edd3 6a07 	vldr	s13, [r3, #28]
 8015e3c:	eeb0 6ae6 	vabs.f32	s12, s13
 8015e40:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e48:	f140 82c2 	bpl.w	80163d0 <kalman_3gyro.constprop.0+0x2488>
 8015e4c:	ed93 6a08 	vldr	s12, [r3, #32]
 8015e50:	eef0 4ac6 	vabs.f32	s9, s12
 8015e54:	eef4 4ae7 	vcmpe.f32	s9, s15
 8015e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e5c:	f140 82b8 	bpl.w	80163d0 <kalman_3gyro.constprop.0+0x2488>
 8015e60:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 8015be8 <kalman_3gyro.constprop.0+0x1ca0>
 8015e64:	eef0 5ae5 	vabs.f32	s11, s11
 8015e68:	eef4 5ae7 	vcmpe.f32	s11, s15
 8015e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e70:	f140 82ae 	bpl.w	80163d0 <kalman_3gyro.constprop.0+0x2488>
 8015e74:	eef0 1ae1 	vabs.f32	s3, s3
 8015e78:	eef4 1ae7 	vcmpe.f32	s3, s15
 8015e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e80:	f140 82a6 	bpl.w	80163d0 <kalman_3gyro.constprop.0+0x2488>
 8015e84:	eeb0 5ac5 	vabs.f32	s10, s10
 8015e88:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8015e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e90:	f140 829e 	bpl.w	80163d0 <kalman_3gyro.constprop.0+0x2488>
 8015e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e96:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 8015e9a:	edd3 5a00 	vldr	s11, [r3]
 8015e9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ea0:	991d      	ldr	r1, [sp, #116]	; 0x74
 8015ea2:	ed93 5a00 	vldr	s10, [r3]
 8015ea6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015ea8:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015eac:	2a09      	cmp	r2, #9
 8015eae:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 8015eb2:	ed93 4a00 	vldr	s8, [r3]
 8015eb6:	edd4 3a00 	vldr	s7, [r4]
 8015eba:	bf8c      	ite	hi
 8015ebc:	230a      	movhi	r3, #10
 8015ebe:	2305      	movls	r3, #5
 8015ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ec4:	bfb4      	ite	lt
 8015ec6:	eef0 7a45 	vmovlt.f32	s15, s10
 8015eca:	eef0 7a65 	vmovge.f32	s15, s11
 8015ece:	bf8c      	ite	hi
 8015ed0:	eef0 4a45 	vmovhi.f32	s9, s10
 8015ed4:	eef0 4a65 	vmovls.f32	s9, s11
 8015ed8:	eef4 7ae3 	vcmpe.f32	s15, s7
 8015edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ee0:	eef4 4ae3 	vcmpe.f32	s9, s7
 8015ee4:	bfb8      	it	lt
 8015ee6:	eef0 7a63 	vmovlt.f32	s15, s7
 8015eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eee:	bf88      	it	hi
 8015ef0:	eef0 4a63 	vmovhi.f32	s9, s7
 8015ef4:	eef4 7ac4 	vcmpe.f32	s15, s8
 8015ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015efc:	ee35 5a85 	vadd.f32	s10, s11, s10
 8015f00:	eef4 4ac4 	vcmpe.f32	s9, s8
 8015f04:	edd1 5a00 	vldr	s11, [r1]
 8015f08:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015f0a:	bfb8      	it	lt
 8015f0c:	eef0 7a44 	vmovlt.f32	s15, s8
 8015f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f14:	bf88      	it	hi
 8015f16:	eef0 4a44 	vmovhi.f32	s9, s8
 8015f1a:	eef4 7ae5 	vcmpe.f32	s15, s11
 8015f1e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8015f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f26:	eef4 4ae5 	vcmpe.f32	s9, s11
 8015f2a:	bfb8      	it	lt
 8015f2c:	eef0 7a65 	vmovlt.f32	s15, s11
 8015f30:	ee35 5a04 	vadd.f32	s10, s10, s8
 8015f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f38:	bf88      	it	hi
 8015f3a:	eef0 4a65 	vmovhi.f32	s9, s11
 8015f3e:	2b05      	cmp	r3, #5
 8015f40:	ee35 5a25 	vadd.f32	s10, s10, s11
 8015f44:	edd1 5a00 	vldr	s11, [r1]
 8015f48:	d065      	beq.n	8016016 <kalman_3gyro.constprop.0+0x20ce>
 8015f4a:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 8015f4e:	edd1 3a00 	vldr	s7, [r1]
 8015f52:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 8015f56:	eef4 7ae3 	vcmpe.f32	s15, s7
 8015f5a:	ed91 4a00 	vldr	s8, [r1]
 8015f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f62:	eef4 4ae3 	vcmpe.f32	s9, s7
 8015f66:	bfb8      	it	lt
 8015f68:	eef0 7a63 	vmovlt.f32	s15, s7
 8015f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f70:	bf88      	it	hi
 8015f72:	eef0 4a63 	vmovhi.f32	s9, s7
 8015f76:	eef4 7ac4 	vcmpe.f32	s15, s8
 8015f7a:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 8015f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f82:	ee35 5a23 	vadd.f32	s10, s10, s7
 8015f86:	eef4 4ac4 	vcmpe.f32	s9, s8
 8015f8a:	edd1 3a00 	vldr	s7, [r1]
 8015f8e:	bfb8      	it	lt
 8015f90:	eef0 7a44 	vmovlt.f32	s15, s8
 8015f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f98:	bf88      	it	hi
 8015f9a:	eef0 4a44 	vmovhi.f32	s9, s8
 8015f9e:	eef4 7ae3 	vcmpe.f32	s15, s7
 8015fa2:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 8015fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015faa:	ee35 5a04 	vadd.f32	s10, s10, s8
 8015fae:	eef4 4ae3 	vcmpe.f32	s9, s7
 8015fb2:	ed91 4a00 	vldr	s8, [r1]
 8015fb6:	bfb8      	it	lt
 8015fb8:	eef0 7a63 	vmovlt.f32	s15, s7
 8015fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fc0:	bf88      	it	hi
 8015fc2:	eef0 4a63 	vmovhi.f32	s9, s7
 8015fc6:	eef4 7ac4 	vcmpe.f32	s15, s8
 8015fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fce:	eef4 4ac4 	vcmpe.f32	s9, s8
 8015fd2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8015fd6:	bfb8      	it	lt
 8015fd8:	eef0 7a44 	vmovlt.f32	s15, s8
 8015fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe0:	bf88      	it	hi
 8015fe2:	eef0 4a44 	vmovhi.f32	s9, s8
 8015fe6:	2b0a      	cmp	r3, #10
 8015fe8:	ee35 5a04 	vadd.f32	s10, s10, s8
 8015fec:	d113      	bne.n	8016016 <kalman_3gyro.constprop.0+0x20ce>
 8015fee:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 8015ff2:	ed91 4a00 	vldr	s8, [r1]
 8015ff6:	eef4 7ac4 	vcmpe.f32	s15, s8
 8015ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ffe:	eef4 4ac4 	vcmpe.f32	s9, s8
 8016002:	bfb8      	it	lt
 8016004:	eef0 7a44 	vmovlt.f32	s15, s8
 8016008:	ee35 5a04 	vadd.f32	s10, s10, s8
 801600c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016010:	bf88      	it	hi
 8016012:	eef0 4a44 	vmovhi.f32	s9, s8
 8016016:	ee77 7ae4 	vsub.f32	s15, s15, s9
 801601a:	eddf 4ae7 	vldr	s9, [pc, #924]	; 80163b8 <kalman_3gyro.constprop.0+0x2470>
 801601e:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 80163bc <kalman_3gyro.constprop.0+0x2474>
 8016022:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016026:	ee25 5a04 	vmul.f32	s10, s10, s8
 801602a:	eef4 7ae4 	vcmpe.f32	s15, s9
 801602e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016032:	f300 81cd 	bgt.w	80163d0 <kalman_3gyro.constprop.0+0x2488>
 8016036:	eef0 7ac5 	vabs.f32	s15, s10
 801603a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801603e:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 80163c0 <kalman_3gyro.constprop.0+0x2478>
 8016042:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801604a:	f300 81c1 	bgt.w	80163d0 <kalman_3gyro.constprop.0+0x2488>
 801604e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016050:	ed91 5a00 	vldr	s10, [r1]
 8016054:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016056:	ed91 4a00 	vldr	s8, [r1]
 801605a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801605c:	eeb4 5ac4 	vcmpe.f32	s10, s8
 8016060:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 8016064:	ed90 3a00 	vldr	s6, [r0]
 8016068:	edd1 3a00 	vldr	s7, [r1]
 801606c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801606e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016072:	bfb4      	ite	lt
 8016074:	eef0 7a44 	vmovlt.f32	s15, s8
 8016078:	eef0 7a45 	vmovge.f32	s15, s10
 801607c:	bf8c      	ite	hi
 801607e:	eef0 4a44 	vmovhi.f32	s9, s8
 8016082:	eef0 4a45 	vmovls.f32	s9, s10
 8016086:	eef4 7ac3 	vcmpe.f32	s15, s6
 801608a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801608e:	eef4 4ac3 	vcmpe.f32	s9, s6
 8016092:	bfb8      	it	lt
 8016094:	eef0 7a43 	vmovlt.f32	s15, s6
 8016098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801609c:	bf88      	it	hi
 801609e:	eef0 4a43 	vmovhi.f32	s9, s6
 80160a2:	eef4 7ae3 	vcmpe.f32	s15, s7
 80160a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160aa:	ee35 5a04 	vadd.f32	s10, s10, s8
 80160ae:	eef4 4ae3 	vcmpe.f32	s9, s7
 80160b2:	ed91 4a00 	vldr	s8, [r1]
 80160b6:	bfb8      	it	lt
 80160b8:	eef0 7a63 	vmovlt.f32	s15, s7
 80160bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160c0:	bf88      	it	hi
 80160c2:	eef0 4a63 	vmovhi.f32	s9, s7
 80160c6:	eef4 7ac4 	vcmpe.f32	s15, s8
 80160ca:	ee35 5a03 	vadd.f32	s10, s10, s6
 80160ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160d2:	eef4 4ac4 	vcmpe.f32	s9, s8
 80160d6:	ee35 5a23 	vadd.f32	s10, s10, s7
 80160da:	bfb8      	it	lt
 80160dc:	eef0 7a44 	vmovlt.f32	s15, s8
 80160e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160e4:	bf88      	it	hi
 80160e6:	eef0 4a44 	vmovhi.f32	s9, s8
 80160ea:	2b05      	cmp	r3, #5
 80160ec:	ee35 5a04 	vadd.f32	s10, s10, s8
 80160f0:	d065      	beq.n	80161be <kalman_3gyro.constprop.0+0x2276>
 80160f2:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 80160f6:	edd1 3a00 	vldr	s7, [r1]
 80160fa:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 80160fe:	eef4 7ae3 	vcmpe.f32	s15, s7
 8016102:	ed91 4a00 	vldr	s8, [r1]
 8016106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801610a:	eef4 4ae3 	vcmpe.f32	s9, s7
 801610e:	bfb8      	it	lt
 8016110:	eef0 7a63 	vmovlt.f32	s15, s7
 8016114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016118:	bf88      	it	hi
 801611a:	eef0 4a63 	vmovhi.f32	s9, s7
 801611e:	eef4 7ac4 	vcmpe.f32	s15, s8
 8016122:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8016126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801612a:	ee35 5a23 	vadd.f32	s10, s10, s7
 801612e:	eef4 4ac4 	vcmpe.f32	s9, s8
 8016132:	edd1 3a00 	vldr	s7, [r1]
 8016136:	bfb8      	it	lt
 8016138:	eef0 7a44 	vmovlt.f32	s15, s8
 801613c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016140:	bf88      	it	hi
 8016142:	eef0 4a44 	vmovhi.f32	s9, s8
 8016146:	eef4 7ae3 	vcmpe.f32	s15, s7
 801614a:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 801614e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016152:	ee35 5a04 	vadd.f32	s10, s10, s8
 8016156:	eef4 4ae3 	vcmpe.f32	s9, s7
 801615a:	ed91 4a00 	vldr	s8, [r1]
 801615e:	bfb8      	it	lt
 8016160:	eef0 7a63 	vmovlt.f32	s15, s7
 8016164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016168:	bf88      	it	hi
 801616a:	eef0 4a63 	vmovhi.f32	s9, s7
 801616e:	eef4 7ac4 	vcmpe.f32	s15, s8
 8016172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016176:	eef4 4ac4 	vcmpe.f32	s9, s8
 801617a:	ee35 5a23 	vadd.f32	s10, s10, s7
 801617e:	bfb8      	it	lt
 8016180:	eef0 7a44 	vmovlt.f32	s15, s8
 8016184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016188:	bf88      	it	hi
 801618a:	eef0 4a44 	vmovhi.f32	s9, s8
 801618e:	2b0a      	cmp	r3, #10
 8016190:	ee35 5a04 	vadd.f32	s10, s10, s8
 8016194:	d113      	bne.n	80161be <kalman_3gyro.constprop.0+0x2276>
 8016196:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 801619a:	ed91 4a00 	vldr	s8, [r1]
 801619e:	eef4 7ac4 	vcmpe.f32	s15, s8
 80161a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161a6:	eef4 4ac4 	vcmpe.f32	s9, s8
 80161aa:	bfb8      	it	lt
 80161ac:	eef0 7a44 	vmovlt.f32	s15, s8
 80161b0:	ee35 5a04 	vadd.f32	s10, s10, s8
 80161b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161b8:	bf88      	it	hi
 80161ba:	eef0 4a44 	vmovhi.f32	s9, s8
 80161be:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80161c2:	eddf 4a7d 	vldr	s9, [pc, #500]	; 80163b8 <kalman_3gyro.constprop.0+0x2470>
 80161c6:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 80163bc <kalman_3gyro.constprop.0+0x2474>
 80161ca:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80161ce:	ee25 5a04 	vmul.f32	s10, s10, s8
 80161d2:	eef4 7ae4 	vcmpe.f32	s15, s9
 80161d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161da:	f300 80f9 	bgt.w	80163d0 <kalman_3gyro.constprop.0+0x2488>
 80161de:	eef0 7ac5 	vabs.f32	s15, s10
 80161e2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80161e6:	ed9f 5a76 	vldr	s10, [pc, #472]	; 80163c0 <kalman_3gyro.constprop.0+0x2478>
 80161ea:	eef4 7ac5 	vcmpe.f32	s15, s10
 80161ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161f2:	f300 80ed 	bgt.w	80163d0 <kalman_3gyro.constprop.0+0x2488>
 80161f6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80161f8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80161fa:	edd1 4a00 	vldr	s9, [r1]
 80161fe:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016200:	ed91 3a00 	vldr	s6, [r1]
 8016204:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016206:	eef4 4ac3 	vcmpe.f32	s9, s6
 801620a:	ed91 4a00 	vldr	s8, [r1]
 801620e:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 8016212:	edd1 3a00 	vldr	s7, [r1]
 8016216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801621a:	bfb4      	ite	lt
 801621c:	eef0 7a43 	vmovlt.f32	s15, s6
 8016220:	eef0 7a64 	vmovge.f32	s15, s9
 8016224:	bf8c      	ite	hi
 8016226:	eeb0 5a43 	vmovhi.f32	s10, s6
 801622a:	eeb0 5a64 	vmovls.f32	s10, s9
 801622e:	eef4 3ae7 	vcmpe.f32	s7, s15
 8016232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016236:	eef4 3ac5 	vcmpe.f32	s7, s10
 801623a:	bfa8      	it	ge
 801623c:	eef0 7a63 	vmovge.f32	s15, s7
 8016240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016244:	bf98      	it	ls
 8016246:	eeb0 5a63 	vmovls.f32	s10, s7
 801624a:	eeb4 4ae7 	vcmpe.f32	s8, s15
 801624e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016252:	ee34 3a83 	vadd.f32	s6, s9, s6
 8016256:	eeb4 4ac5 	vcmpe.f32	s8, s10
 801625a:	edd5 4a00 	vldr	s9, [r5]
 801625e:	bfa8      	it	ge
 8016260:	eef0 7a44 	vmovge.f32	s15, s8
 8016264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016268:	bf98      	it	ls
 801626a:	eeb0 5a44 	vmovls.f32	s10, s8
 801626e:	eef4 7ae4 	vcmpe.f32	s15, s9
 8016272:	ee73 3a83 	vadd.f32	s7, s7, s6
 8016276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801627a:	eef4 4ac5 	vcmpe.f32	s9, s10
 801627e:	bfb8      	it	lt
 8016280:	eef0 7a64 	vmovlt.f32	s15, s9
 8016284:	ee34 4a23 	vadd.f32	s8, s8, s7
 8016288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801628c:	bf98      	it	ls
 801628e:	eeb0 5a64 	vmovls.f32	s10, s9
 8016292:	2b05      	cmp	r3, #5
 8016294:	ee74 4a84 	vadd.f32	s9, s9, s8
 8016298:	d065      	beq.n	8016366 <kalman_3gyro.constprop.0+0x241e>
 801629a:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 801629e:	ed95 4a00 	vldr	s8, [r5]
 80162a2:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 80162a6:	eef4 7ac4 	vcmpe.f32	s15, s8
 80162aa:	ed95 3a00 	vldr	s6, [r5]
 80162ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162b2:	eeb4 5ac4 	vcmpe.f32	s10, s8
 80162b6:	bfb8      	it	lt
 80162b8:	eef0 7a44 	vmovlt.f32	s15, s8
 80162bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162c0:	bf88      	it	hi
 80162c2:	eeb0 5a44 	vmovhi.f32	s10, s8
 80162c6:	eef4 7ac3 	vcmpe.f32	s15, s6
 80162ca:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 80162ce:	edd5 3a00 	vldr	s7, [r5]
 80162d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162d6:	eeb4 5ac3 	vcmpe.f32	s10, s6
 80162da:	bfb8      	it	lt
 80162dc:	eef0 7a43 	vmovlt.f32	s15, s6
 80162e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162e4:	bf88      	it	hi
 80162e6:	eeb0 5a43 	vmovhi.f32	s10, s6
 80162ea:	eef4 7ae3 	vcmpe.f32	s15, s7
 80162ee:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 80162f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162f6:	ee34 4a24 	vadd.f32	s8, s8, s9
 80162fa:	eeb4 5ae3 	vcmpe.f32	s10, s7
 80162fe:	edd5 4a00 	vldr	s9, [r5]
 8016302:	bfb8      	it	lt
 8016304:	eef0 7a63 	vmovlt.f32	s15, s7
 8016308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801630c:	bf88      	it	hi
 801630e:	eeb0 5a63 	vmovhi.f32	s10, s7
 8016312:	eef4 7ae4 	vcmpe.f32	s15, s9
 8016316:	ee34 4a03 	vadd.f32	s8, s8, s6
 801631a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801631e:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8016322:	bfb8      	it	lt
 8016324:	eef0 7a64 	vmovlt.f32	s15, s9
 8016328:	ee34 4a23 	vadd.f32	s8, s8, s7
 801632c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016330:	bf88      	it	hi
 8016332:	eeb0 5a64 	vmovhi.f32	s10, s9
 8016336:	2b0a      	cmp	r3, #10
 8016338:	ee74 4a24 	vadd.f32	s9, s8, s9
 801633c:	d113      	bne.n	8016366 <kalman_3gyro.constprop.0+0x241e>
 801633e:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 8016342:	ed93 4a00 	vldr	s8, [r3]
 8016346:	eef4 7ac4 	vcmpe.f32	s15, s8
 801634a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801634e:	eeb4 5ac4 	vcmpe.f32	s10, s8
 8016352:	bfb8      	it	lt
 8016354:	eef0 7a44 	vmovlt.f32	s15, s8
 8016358:	ee74 4a84 	vadd.f32	s9, s9, s8
 801635c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016360:	bf88      	it	hi
 8016362:	eeb0 5a44 	vmovhi.f32	s10, s8
 8016366:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801636a:	ed9f 4a13 	vldr	s8, [pc, #76]	; 80163b8 <kalman_3gyro.constprop.0+0x2470>
 801636e:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80163bc <kalman_3gyro.constprop.0+0x2474>
 8016372:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016376:	ee64 4a85 	vmul.f32	s9, s9, s10
 801637a:	eef4 7ac4 	vcmpe.f32	s15, s8
 801637e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016382:	dc25      	bgt.n	80163d0 <kalman_3gyro.constprop.0+0x2488>
 8016384:	eef0 7ae4 	vabs.f32	s15, s9
 8016388:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801638c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80163c0 <kalman_3gyro.constprop.0+0x2478>
 8016390:	eef4 5ae7 	vcmpe.f32	s11, s15
 8016394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016398:	dc1a      	bgt.n	80163d0 <kalman_3gyro.constprop.0+0x2488>
 801639a:	f89b 5005 	ldrb.w	r5, [fp, #5]
 801639e:	2d00      	cmp	r5, #0
 80163a0:	f000 80e0 	beq.w	8016564 <kalman_3gyro.constprop.0+0x261c>
 80163a4:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 80163a8:	2b01      	cmp	r3, #1
 80163aa:	f002 83cc 	beq.w	8018b46 <kalman_3gyro.constprop.0+0x4bfe>
 80163ae:	2201      	movs	r2, #1
 80163b0:	462b      	mov	r3, r5
 80163b2:	9201      	str	r2, [sp, #4]
 80163b4:	e01c      	b.n	80163f0 <kalman_3gyro.constprop.0+0x24a8>
 80163b6:	bf00      	nop
 80163b8:	3be56041 	.word	0x3be56041
 80163bc:	3dcccccd 	.word	0x3dcccccd
 80163c0:	3e333333 	.word	0x3e333333
 80163c4:	3d088889 	.word	0x3d088889
 80163c8:	42480000 	.word	0x42480000
 80163cc:	00000000 	.word	0x00000000
 80163d0:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80163d4:	2100      	movs	r1, #0
 80163d6:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 80163da:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 80163de:	2b00      	cmp	r3, #0
 80163e0:	f000 80c1 	beq.w	8016566 <kalman_3gyro.constprop.0+0x261e>
 80163e4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80163e8:	2a01      	cmp	r2, #1
 80163ea:	f001 85a8 	beq.w	8017f3e <kalman_3gyro.constprop.0+0x3ff6>
 80163ee:	9101      	str	r1, [sp, #4]
 80163f0:	2b02      	cmp	r3, #2
 80163f2:	f041 8765 	bne.w	80182c0 <kalman_3gyro.constprop.0+0x4378>
 80163f6:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80163fa:	eecd 6a27 	vdiv.f32	s13, s26, s15
 80163fe:	f240 1301 	movw	r3, #257	; 0x101
 8016402:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 8016406:	2301      	movs	r3, #1
 8016408:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 801640c:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8016410:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8016414:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 8016418:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 801641c:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 8016420:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 8016424:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 8016428:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 801642c:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 8016430:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016434:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801643c:	f2c2 802e 	blt.w	801849c <kalman_3gyro.constprop.0+0x4554>
 8016440:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8016444:	2a00      	cmp	r2, #0
 8016446:	f002 836e 	beq.w	8018b26 <kalman_3gyro.constprop.0+0x4bde>
 801644a:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 801644e:	3301      	adds	r3, #1
 8016450:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8016454:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016458:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 801645c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8016460:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8016464:	f002 846d 	beq.w	8018d42 <kalman_3gyro.constprop.0+0x4dfa>
 8016468:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 801646c:	f002 8064 	beq.w	8018538 <kalman_3gyro.constprop.0+0x45f0>
 8016470:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8016474:	2a00      	cmp	r2, #0
 8016476:	f042 8064 	bne.w	8018542 <kalman_3gyro.constprop.0+0x45fa>
 801647a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801647c:	a830      	add	r0, sp, #192	; 0xc0
 801647e:	f04f 31ff 	mov.w	r1, #4294967295
 8016482:	4613      	mov	r3, r2
 8016484:	edd2 7a00 	vldr	s15, [r2]
 8016488:	3101      	adds	r1, #1
 801648a:	330c      	adds	r3, #12
 801648c:	3204      	adds	r2, #4
 801648e:	461c      	mov	r4, r3
 8016490:	ed94 7a00 	vldr	s14, [r4]
 8016494:	330c      	adds	r3, #12
 8016496:	4598      	cmp	r8, r3
 8016498:	ee77 7a87 	vadd.f32	s15, s15, s14
 801649c:	d1f7      	bne.n	801648e <kalman_3gyro.constprop.0+0x2546>
 801649e:	2902      	cmp	r1, #2
 80164a0:	ece0 7a01 	vstmia	r0!, {s15}
 80164a4:	f108 0804 	add.w	r8, r8, #4
 80164a8:	d1eb      	bne.n	8016482 <kalman_3gyro.constprop.0+0x253a>
 80164aa:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80163c4 <kalman_3gyro.constprop.0+0x247c>
 80164ae:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 80164b2:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 80164b6:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 80164ba:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80164bc:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 80164c0:	ee24 4a27 	vmul.f32	s8, s8, s15
 80164c4:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80164c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80164cc:	460a      	mov	r2, r1
 80164ce:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 80164d2:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 80164d6:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 80164da:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 80164de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80164e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164e6:	f103 030c 	add.w	r3, r3, #12
 80164ea:	bf88      	it	hi
 80164ec:	eef0 7a47 	vmovhi.f32	s15, s14
 80164f0:	4293      	cmp	r3, r2
 80164f2:	d1f2      	bne.n	80164da <kalman_3gyro.constprop.0+0x2592>
 80164f4:	1d1a      	adds	r2, r3, #4
 80164f6:	4290      	cmp	r0, r2
 80164f8:	ece4 7a01 	vstmia	r4!, {s15}
 80164fc:	d1e9      	bne.n	80164d2 <kalman_3gyro.constprop.0+0x258a>
 80164fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016500:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 8016504:	edd3 7a00 	vldr	s15, [r3]
 8016508:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 801650c:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 8016510:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8016514:	ee97 5a84 	vfnms.f32	s10, s15, s8
 8016518:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 801651c:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 8016520:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 8016524:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 8016528:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 801652c:	b14b      	cbz	r3, 8016542 <kalman_3gyro.constprop.0+0x25fa>
 801652e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8016532:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8016536:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801653a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801653e:	f102 84e7 	bmi.w	8018f10 <kalman_3gyro.constprop.0+0x4fc8>
 8016542:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 8016546:	2a1e      	cmp	r2, #30
 8016548:	f002 8471 	beq.w	8018e2e <kalman_3gyro.constprop.0+0x4ee6>
 801654c:	1c53      	adds	r3, r2, #1
 801654e:	2aff      	cmp	r2, #255	; 0xff
 8016550:	bf14      	ite	ne
 8016552:	b2db      	uxtbne	r3, r3
 8016554:	23ff      	moveq	r3, #255	; 0xff
 8016556:	2200      	movs	r2, #0
 8016558:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 801655c:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8016560:	9b01      	ldr	r3, [sp, #4]
 8016562:	e012      	b.n	801658a <kalman_3gyro.constprop.0+0x2642>
 8016564:	2301      	movs	r3, #1
 8016566:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 801656a:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 801656e:	9181      	str	r1, [sp, #516]	; 0x204
 8016570:	9282      	str	r2, [sp, #520]	; 0x208
 8016572:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8016576:	9183      	str	r1, [sp, #524]	; 0x20c
 8016578:	2200      	movs	r2, #0
 801657a:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 801657e:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 8016582:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8016586:	f88b 2001 	strb.w	r2, [fp, #1]
 801658a:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 80163c8 <kalman_3gyro.constprop.0+0x2480>
 801658e:	eeb4 cae7 	vcmpe.f32	s24, s15
 8016592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016596:	f2c0 875f 	blt.w	8017458 <kalman_3gyro.constprop.0+0x3510>
 801659a:	2200      	movs	r2, #0
 801659c:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 80165a0:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 80165a4:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 80165a8:	2b01      	cmp	r3, #1
 80165aa:	d125      	bne.n	80165f8 <kalman_3gyro.constprop.0+0x26b0>
 80165ac:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 80165b0:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 80165b4:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 80165b8:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 80165bc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80165c0:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 80165c4:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 80165c8:	ee25 5a24 	vmul.f32	s10, s10, s9
 80165cc:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80165d0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80165d4:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80165d8:	ee37 7a07 	vadd.f32	s14, s14, s14
 80165dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80165e0:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 80165e4:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 80165e8:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 80165ec:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 80165f0:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80165f4:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 80165f8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80165fc:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 8016600:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 8016604:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 8016608:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 801660c:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 8016610:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 8016614:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 8016618:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 801661c:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 8016620:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 8016624:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 8016628:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 801662c:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 8016630:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 8016634:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 8016638:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 801663c:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 8016640:	eee7 3a07 	vfma.f32	s7, s14, s14
 8016644:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 8016648:	9301      	str	r3, [sp, #4]
 801664a:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 801664e:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 8016652:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8016656:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 801665a:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 801665e:	eea8 3a08 	vfma.f32	s6, s16, s16
 8016662:	2500      	movs	r5, #0
 8016664:	eea0 4a00 	vfma.f32	s8, s0, s0
 8016668:	eee0 4aa0 	vfma.f32	s9, s1, s1
 801666c:	eea1 5a01 	vfma.f32	s10, s2, s2
 8016670:	eee1 5aa1 	vfma.f32	s11, s3, s3
 8016674:	eea2 6a02 	vfma.f32	s12, s4, s4
 8016678:	eee2 6aa2 	vfma.f32	s13, s5, s5
 801667c:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 8016680:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 8016684:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016688:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 801668c:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 8016690:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 8016694:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 8016698:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 801669c:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 80166a0:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 80166a4:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 80166a8:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 80166ac:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 80166b0:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 80166b4:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 80166b8:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 80166bc:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 80166c0:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 80166c4:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 80166c8:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 80166cc:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 80166d0:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 80163cc <kalman_3gyro.constprop.0+0x2484>
 80166d4:	ee68 8aa8 	vmul.f32	s17, s17, s17
 80166d8:	ee24 4a04 	vmul.f32	s8, s8, s8
 80166dc:	ee64 4aa4 	vmul.f32	s9, s9, s9
 80166e0:	ee25 5a05 	vmul.f32	s10, s10, s10
 80166e4:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80166e8:	ee26 6a06 	vmul.f32	s12, s12, s12
 80166ec:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80166f0:	ee27 7a07 	vmul.f32	s14, s14, s14
 80166f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80166f8:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 80166fc:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 8016700:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 8016704:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 8016708:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 801670c:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 8016710:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 8016714:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 8016718:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 801671c:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 8016720:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 8016724:	e005      	b.n	8016732 <kalman_3gyro.constprop.0+0x27ea>
 8016726:	3501      	adds	r5, #1
 8016728:	2d0c      	cmp	r5, #12
 801672a:	f104 0404 	add.w	r4, r4, #4
 801672e:	f000 84fe 	beq.w	801712e <kalman_3gyro.constprop.0+0x31e6>
 8016732:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016736:	2b00      	cmp	r3, #0
 8016738:	d0f5      	beq.n	8016726 <kalman_3gyro.constprop.0+0x27de>
 801673a:	edd4 da00 	vldr	s27, [r4]
 801673e:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 8016742:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 8016746:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 801674a:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 801674e:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 8016752:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 8016756:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 801675a:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 801675e:	9b01      	ldr	r3, [sp, #4]
 8016760:	ed89 8a00 	vstr	s16, [r9]
 8016764:	ed89 8a01 	vstr	s16, [r9, #4]
 8016768:	ed89 8a02 	vstr	s16, [r9, #8]
 801676c:	ed89 8a03 	vstr	s16, [r9, #12]
 8016770:	ed89 8a04 	vstr	s16, [r9, #16]
 8016774:	ed89 8a05 	vstr	s16, [r9, #20]
 8016778:	ed89 8a06 	vstr	s16, [r9, #24]
 801677c:	ed89 8a07 	vstr	s16, [r9, #28]
 8016780:	ed89 8a08 	vstr	s16, [r9, #32]
 8016784:	464e      	mov	r6, r9
 8016786:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 801678a:	464a      	mov	r2, r9
 801678c:	ecb3 7a01 	vldmia	r3!, {s14}
 8016790:	ecf2 7a01 	vldmia	r2!, {s15}
 8016794:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801679c:	d006      	beq.n	80167ac <kalman_3gyro.constprop.0+0x2864>
 801679e:	eef5 da40 	vcmp.f32	s27, #0.0
 80167a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167a6:	bf18      	it	ne
 80167a8:	eeed 7a87 	vfmane.f32	s15, s27, s14
 80167ac:	ed93 7a08 	vldr	s14, [r3, #32]
 80167b0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80167b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167b8:	d006      	beq.n	80167c8 <kalman_3gyro.constprop.0+0x2880>
 80167ba:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80167be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c2:	bf18      	it	ne
 80167c4:	eeee 7a07 	vfmane.f32	s15, s28, s14
 80167c8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80167cc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80167d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167d4:	d006      	beq.n	80167e4 <kalman_3gyro.constprop.0+0x289c>
 80167d6:	eef5 ea40 	vcmp.f32	s29, #0.0
 80167da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167de:	bf18      	it	ne
 80167e0:	eeee 7a87 	vfmane.f32	s15, s29, s14
 80167e4:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80167e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80167ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167f0:	d006      	beq.n	8016800 <kalman_3gyro.constprop.0+0x28b8>
 80167f2:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80167f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167fa:	bf18      	it	ne
 80167fc:	eeef 7a07 	vfmane.f32	s15, s30, s14
 8016800:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8016804:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801680c:	d006      	beq.n	801681c <kalman_3gyro.constprop.0+0x28d4>
 801680e:	eef5 fa40 	vcmp.f32	s31, #0.0
 8016812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016816:	bf18      	it	ne
 8016818:	eeef 7a87 	vfmane.f32	s15, s31, s14
 801681c:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8016820:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016828:	d006      	beq.n	8016838 <kalman_3gyro.constprop.0+0x28f0>
 801682a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801682e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016832:	bf18      	it	ne
 8016834:	eee6 7a87 	vfmane.f32	s15, s13, s14
 8016838:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 801683c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016844:	d006      	beq.n	8016854 <kalman_3gyro.constprop.0+0x290c>
 8016846:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801684a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801684e:	bf18      	it	ne
 8016850:	eee6 7a07 	vfmane.f32	s15, s12, s14
 8016854:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8016858:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801685c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016860:	d006      	beq.n	8016870 <kalman_3gyro.constprop.0+0x2928>
 8016862:	eef5 5a40 	vcmp.f32	s11, #0.0
 8016866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801686a:	bf18      	it	ne
 801686c:	eee5 7a87 	vfmane.f32	s15, s11, s14
 8016870:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8016874:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801687c:	d006      	beq.n	801688c <kalman_3gyro.constprop.0+0x2944>
 801687e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8016882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016886:	bf18      	it	ne
 8016888:	eee5 7a07 	vfmane.f32	s15, s10, s14
 801688c:	428b      	cmp	r3, r1
 801688e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8016892:	f47f af7b 	bne.w	801678c <kalman_3gyro.constprop.0+0x2844>
 8016896:	eef5 da40 	vcmp.f32	s27, #0.0
 801689a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801689e:	edd9 8a00 	vldr	s17, [r9]
 80168a2:	f040 8543 	bne.w	801732c <kalman_3gyro.constprop.0+0x33e4>
 80168a6:	eef0 7a6d 	vmov.f32	s15, s27
 80168aa:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80168ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168b2:	ed99 9a01 	vldr	s18, [r9, #4]
 80168b6:	d006      	beq.n	80168c6 <kalman_3gyro.constprop.0+0x297e>
 80168b8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80168bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168c0:	bf18      	it	ne
 80168c2:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 80168c6:	eef5 ea40 	vcmp.f32	s29, #0.0
 80168ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ce:	edd9 aa02 	vldr	s21, [r9, #8]
 80168d2:	d006      	beq.n	80168e2 <kalman_3gyro.constprop.0+0x299a>
 80168d4:	eef5 aa40 	vcmp.f32	s21, #0.0
 80168d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168dc:	bf18      	it	ne
 80168de:	eeea 7aae 	vfmane.f32	s15, s21, s29
 80168e2:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80168e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ea:	edd9 ba03 	vldr	s23, [r9, #12]
 80168ee:	d006      	beq.n	80168fe <kalman_3gyro.constprop.0+0x29b6>
 80168f0:	eef5 ba40 	vcmp.f32	s23, #0.0
 80168f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168f8:	bf18      	it	ne
 80168fa:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 80168fe:	eef5 fa40 	vcmp.f32	s31, #0.0
 8016902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016906:	edd9 ca04 	vldr	s25, [r9, #16]
 801690a:	d006      	beq.n	801691a <kalman_3gyro.constprop.0+0x29d2>
 801690c:	eef5 ca40 	vcmp.f32	s25, #0.0
 8016910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016914:	bf18      	it	ne
 8016916:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 801691a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801691e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016922:	ed99 ca05 	vldr	s24, [r9, #20]
 8016926:	d006      	beq.n	8016936 <kalman_3gyro.constprop.0+0x29ee>
 8016928:	eeb5 ca40 	vcmp.f32	s24, #0.0
 801692c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016930:	bf18      	it	ne
 8016932:	eeec 7a26 	vfmane.f32	s15, s24, s13
 8016936:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801693a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801693e:	ed99 da06 	vldr	s26, [r9, #24]
 8016942:	d006      	beq.n	8016952 <kalman_3gyro.constprop.0+0x2a0a>
 8016944:	eeb5 da40 	vcmp.f32	s26, #0.0
 8016948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801694c:	bf18      	it	ne
 801694e:	eeed 7a06 	vfmane.f32	s15, s26, s12
 8016952:	eef5 5a40 	vcmp.f32	s11, #0.0
 8016956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801695a:	ed99 aa07 	vldr	s20, [r9, #28]
 801695e:	d006      	beq.n	801696e <kalman_3gyro.constprop.0+0x2a26>
 8016960:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8016964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016968:	bf18      	it	ne
 801696a:	eeea 7a25 	vfmane.f32	s15, s20, s11
 801696e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8016972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016976:	ed99 ba08 	vldr	s22, [r9, #32]
 801697a:	d006      	beq.n	801698a <kalman_3gyro.constprop.0+0x2a42>
 801697c:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8016980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016984:	bf18      	it	ne
 8016986:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 801698a:	ab87      	add	r3, sp, #540	; 0x21c
 801698c:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 8016990:	ed92 7a00 	vldr	s14, [r2]
 8016994:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016998:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 801699c:	eec4 7a87 	vdiv.f32	s15, s9, s14
 80169a0:	2d05      	cmp	r5, #5
 80169a2:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80169a6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80169aa:	ee29 9a27 	vmul.f32	s18, s18, s15
 80169ae:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80169b2:	ee6b baa7 	vmul.f32	s23, s23, s15
 80169b6:	ee6c caa7 	vmul.f32	s25, s25, s15
 80169ba:	ee2c ca27 	vmul.f32	s24, s24, s15
 80169be:	ee2d da27 	vmul.f32	s26, s26, s15
 80169c2:	ee2a aa27 	vmul.f32	s20, s20, s15
 80169c6:	ee2b ba27 	vmul.f32	s22, s22, s15
 80169ca:	edc9 8a00 	vstr	s17, [r9]
 80169ce:	ed89 9a01 	vstr	s18, [r9, #4]
 80169d2:	edc9 aa02 	vstr	s21, [r9, #8]
 80169d6:	edc9 ba03 	vstr	s23, [r9, #12]
 80169da:	edc9 ca04 	vstr	s25, [r9, #16]
 80169de:	ed89 ca05 	vstr	s24, [r9, #20]
 80169e2:	ed89 da06 	vstr	s26, [r9, #24]
 80169e6:	ed89 aa07 	vstr	s20, [r9, #28]
 80169ea:	ed89 ba08 	vstr	s22, [r9, #32]
 80169ee:	f340 8497 	ble.w	8017320 <kalman_3gyro.constprop.0+0x33d8>
 80169f2:	eef5 da40 	vcmp.f32	s27, #0.0
 80169f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169fa:	f000 8510 	beq.w	801741e <kalman_3gyro.constprop.0+0x34d6>
 80169fe:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 8016a02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a0a:	d001      	beq.n	8016a10 <kalman_3gyro.constprop.0+0x2ac8>
 8016a0c:	ee67 7aad 	vmul.f32	s15, s15, s27
 8016a10:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8016a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a18:	d008      	beq.n	8016a2c <kalman_3gyro.constprop.0+0x2ae4>
 8016a1a:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 8016a1e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a26:	bf18      	it	ne
 8016a28:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8016a2c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8016a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a34:	d008      	beq.n	8016a48 <kalman_3gyro.constprop.0+0x2b00>
 8016a36:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 8016a3a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a42:	bf18      	it	ne
 8016a44:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8016a48:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8016a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a50:	d008      	beq.n	8016a64 <kalman_3gyro.constprop.0+0x2b1c>
 8016a52:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 8016a56:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a5e:	bf18      	it	ne
 8016a60:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8016a64:	eef5 fa40 	vcmp.f32	s31, #0.0
 8016a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a6c:	d008      	beq.n	8016a80 <kalman_3gyro.constprop.0+0x2b38>
 8016a6e:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 8016a72:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a7a:	bf18      	it	ne
 8016a7c:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8016a80:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a88:	d008      	beq.n	8016a9c <kalman_3gyro.constprop.0+0x2b54>
 8016a8a:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 8016a8e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a96:	bf18      	it	ne
 8016a98:	eee7 7a26 	vfmane.f32	s15, s14, s13
 8016a9c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8016aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aa4:	d008      	beq.n	8016ab8 <kalman_3gyro.constprop.0+0x2b70>
 8016aa6:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 8016aaa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ab2:	bf18      	it	ne
 8016ab4:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8016ab8:	eef5 5a40 	vcmp.f32	s11, #0.0
 8016abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ac0:	d008      	beq.n	8016ad4 <kalman_3gyro.constprop.0+0x2b8c>
 8016ac2:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 8016ac6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ace:	bf18      	it	ne
 8016ad0:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8016ad4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8016ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016adc:	d008      	beq.n	8016af0 <kalman_3gyro.constprop.0+0x2ba8>
 8016ade:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 8016ae2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aea:	bf18      	it	ne
 8016aec:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8016af0:	aa7b      	add	r2, sp, #492	; 0x1ec
 8016af2:	4413      	add	r3, r2
 8016af4:	edd3 9a00 	vldr	s19, [r3]
 8016af8:	ee79 9ae7 	vsub.f32	s19, s19, s15
 8016afc:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8016b00:	2100      	movs	r1, #0
 8016b02:	4650      	mov	r0, sl
 8016b04:	ed8d 5a05 	vstr	s10, [sp, #20]
 8016b08:	edcd 5a04 	vstr	s11, [sp, #16]
 8016b0c:	ed8d 6a03 	vstr	s12, [sp, #12]
 8016b10:	edcd 6a02 	vstr	s13, [sp, #8]
 8016b14:	f00c f93c 	bl	8022d90 <memset>
 8016b18:	ed9d 5a05 	vldr	s10, [sp, #20]
 8016b1c:	eddd 5a04 	vldr	s11, [sp, #16]
 8016b20:	ed9d 6a03 	vldr	s12, [sp, #12]
 8016b24:	eddd 6a02 	vldr	s13, [sp, #8]
 8016b28:	4651      	mov	r1, sl
 8016b2a:	f109 0224 	add.w	r2, r9, #36	; 0x24
 8016b2e:	4653      	mov	r3, sl
 8016b30:	ecf6 7a01 	vldmia	r6!, {s15}
 8016b34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b3c:	d062      	beq.n	8016c04 <kalman_3gyro.constprop.0+0x2cbc>
 8016b3e:	eef5 da40 	vcmp.f32	s27, #0.0
 8016b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b46:	d005      	beq.n	8016b54 <kalman_3gyro.constprop.0+0x2c0c>
 8016b48:	ed93 7a00 	vldr	s14, [r3]
 8016b4c:	eead 7aa7 	vfma.f32	s14, s27, s15
 8016b50:	ed83 7a00 	vstr	s14, [r3]
 8016b54:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8016b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b5c:	d005      	beq.n	8016b6a <kalman_3gyro.constprop.0+0x2c22>
 8016b5e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8016b62:	eeae 7a27 	vfma.f32	s14, s28, s15
 8016b66:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 8016b6a:	eef5 ea40 	vcmp.f32	s29, #0.0
 8016b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b72:	d005      	beq.n	8016b80 <kalman_3gyro.constprop.0+0x2c38>
 8016b74:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8016b78:	eeae 7aa7 	vfma.f32	s14, s29, s15
 8016b7c:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 8016b80:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8016b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b88:	d005      	beq.n	8016b96 <kalman_3gyro.constprop.0+0x2c4e>
 8016b8a:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8016b8e:	eeaf 7a27 	vfma.f32	s14, s30, s15
 8016b92:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 8016b96:	eef5 fa40 	vcmp.f32	s31, #0.0
 8016b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b9e:	d005      	beq.n	8016bac <kalman_3gyro.constprop.0+0x2c64>
 8016ba0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8016ba4:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 8016ba8:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 8016bac:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bb4:	d005      	beq.n	8016bc2 <kalman_3gyro.constprop.0+0x2c7a>
 8016bb6:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8016bba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016bbe:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 8016bc2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8016bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bca:	d005      	beq.n	8016bd8 <kalman_3gyro.constprop.0+0x2c90>
 8016bcc:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8016bd0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016bd4:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 8016bd8:	eef5 5a40 	vcmp.f32	s11, #0.0
 8016bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016be0:	d005      	beq.n	8016bee <kalman_3gyro.constprop.0+0x2ca6>
 8016be2:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 8016be6:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016bea:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 8016bee:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8016bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bf6:	d005      	beq.n	8016c04 <kalman_3gyro.constprop.0+0x2cbc>
 8016bf8:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 8016bfc:	eea5 7a27 	vfma.f32	s14, s10, s15
 8016c00:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 8016c04:	4296      	cmp	r6, r2
 8016c06:	f103 0304 	add.w	r3, r3, #4
 8016c0a:	d191      	bne.n	8016b30 <kalman_3gyro.constprop.0+0x2be8>
 8016c0c:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 8016c10:	4656      	mov	r6, sl
 8016c12:	463b      	mov	r3, r7
 8016c14:	2208      	movs	r2, #8
 8016c16:	2000      	movs	r0, #0
 8016c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016c1c:	e074      	b.n	8016d08 <kalman_3gyro.constprop.0+0x2dc0>
 8016c1e:	edd6 7a00 	vldr	s15, [r6]
 8016c22:	ed83 8a01 	vstr	s16, [r3, #4]
 8016c26:	eef1 7a67 	vneg.f32	s15, s15
 8016c2a:	2801      	cmp	r0, #1
 8016c2c:	edc6 7a00 	vstr	s15, [r6]
 8016c30:	f1a2 0c07 	sub.w	ip, r2, #7
 8016c34:	f000 831e 	beq.w	8017274 <kalman_3gyro.constprop.0+0x332c>
 8016c38:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8016c3c:	eddc 7a00 	vldr	s15, [ip]
 8016c40:	ed83 8a02 	vstr	s16, [r3, #8]
 8016c44:	eef1 7a67 	vneg.f32	s15, s15
 8016c48:	2802      	cmp	r0, #2
 8016c4a:	edcc 7a00 	vstr	s15, [ip]
 8016c4e:	f1a2 0c06 	sub.w	ip, r2, #6
 8016c52:	f000 82f8 	beq.w	8017246 <kalman_3gyro.constprop.0+0x32fe>
 8016c56:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8016c5a:	eddc 7a00 	vldr	s15, [ip]
 8016c5e:	ed83 8a03 	vstr	s16, [r3, #12]
 8016c62:	eef1 7a67 	vneg.f32	s15, s15
 8016c66:	2803      	cmp	r0, #3
 8016c68:	edcc 7a00 	vstr	s15, [ip]
 8016c6c:	f1a2 0c05 	sub.w	ip, r2, #5
 8016c70:	d170      	bne.n	8016d54 <kalman_3gyro.constprop.0+0x2e0c>
 8016c72:	edd6 7a03 	vldr	s15, [r6, #12]
 8016c76:	ed83 8a04 	vstr	s16, [r3, #16]
 8016c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016c7e:	f1a2 0e04 	sub.w	lr, r2, #4
 8016c82:	edc6 7a03 	vstr	s15, [r6, #12]
 8016c86:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8016c8a:	edde 7a00 	vldr	s15, [lr]
 8016c8e:	ed83 8a05 	vstr	s16, [r3, #20]
 8016c92:	eef1 7a67 	vneg.f32	s15, s15
 8016c96:	f1a2 0c03 	sub.w	ip, r2, #3
 8016c9a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8016c9e:	edce 7a00 	vstr	s15, [lr]
 8016ca2:	eddc 7a00 	vldr	s15, [ip]
 8016ca6:	ed83 8a06 	vstr	s16, [r3, #24]
 8016caa:	eef1 7a67 	vneg.f32	s15, s15
 8016cae:	edcc 7a00 	vstr	s15, [ip]
 8016cb2:	f1a2 0c02 	sub.w	ip, r2, #2
 8016cb6:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8016cba:	eddc 7a00 	vldr	s15, [ip]
 8016cbe:	ed83 8a07 	vstr	s16, [r3, #28]
 8016cc2:	eef1 7a67 	vneg.f32	s15, s15
 8016cc6:	2807      	cmp	r0, #7
 8016cc8:	edcc 7a00 	vstr	s15, [ip]
 8016ccc:	f102 3cff 	add.w	ip, r2, #4294967295
 8016cd0:	f040 80a2 	bne.w	8016e18 <kalman_3gyro.constprop.0+0x2ed0>
 8016cd4:	edd6 7a07 	vldr	s15, [r6, #28]
 8016cd8:	ed83 8a08 	vstr	s16, [r3, #32]
 8016cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016ce0:	edc6 7a07 	vstr	s15, [r6, #28]
 8016ce4:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 8016ce8:	eddc 7a00 	vldr	s15, [ip]
 8016cec:	3001      	adds	r0, #1
 8016cee:	eef1 7a67 	vneg.f32	s15, s15
 8016cf2:	2809      	cmp	r0, #9
 8016cf4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8016cf8:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8016cfc:	f102 0209 	add.w	r2, r2, #9
 8016d00:	edcc 7a00 	vstr	s15, [ip]
 8016d04:	f000 809f 	beq.w	8016e46 <kalman_3gyro.constprop.0+0x2efe>
 8016d08:	ed83 8a00 	vstr	s16, [r3]
 8016d0c:	2800      	cmp	r0, #0
 8016d0e:	d186      	bne.n	8016c1e <kalman_3gyro.constprop.0+0x2cd6>
 8016d10:	edda 7a00 	vldr	s15, [sl]
 8016d14:	ed83 8a01 	vstr	s16, [r3, #4]
 8016d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016d1c:	f1a2 0e07 	sub.w	lr, r2, #7
 8016d20:	edc6 7a00 	vstr	s15, [r6]
 8016d24:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8016d28:	edde 7a00 	vldr	s15, [lr]
 8016d2c:	ed83 8a02 	vstr	s16, [r3, #8]
 8016d30:	eef1 7a67 	vneg.f32	s15, s15
 8016d34:	f1a2 0c06 	sub.w	ip, r2, #6
 8016d38:	edce 7a00 	vstr	s15, [lr]
 8016d3c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8016d40:	eddc 7a00 	vldr	s15, [ip]
 8016d44:	ed83 8a03 	vstr	s16, [r3, #12]
 8016d48:	eef1 7a67 	vneg.f32	s15, s15
 8016d4c:	edcc 7a00 	vstr	s15, [ip]
 8016d50:	f1a2 0c05 	sub.w	ip, r2, #5
 8016d54:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8016d58:	eddc 7a00 	vldr	s15, [ip]
 8016d5c:	ed83 8a04 	vstr	s16, [r3, #16]
 8016d60:	eef1 7a67 	vneg.f32	s15, s15
 8016d64:	2804      	cmp	r0, #4
 8016d66:	edcc 7a00 	vstr	s15, [ip]
 8016d6a:	f1a2 0c04 	sub.w	ip, r2, #4
 8016d6e:	d031      	beq.n	8016dd4 <kalman_3gyro.constprop.0+0x2e8c>
 8016d70:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8016d74:	eddc 7a00 	vldr	s15, [ip]
 8016d78:	ed83 8a05 	vstr	s16, [r3, #20]
 8016d7c:	eef1 7a67 	vneg.f32	s15, s15
 8016d80:	2805      	cmp	r0, #5
 8016d82:	edcc 7a00 	vstr	s15, [ip]
 8016d86:	f1a2 0c03 	sub.w	ip, r2, #3
 8016d8a:	f000 8245 	beq.w	8017218 <kalman_3gyro.constprop.0+0x32d0>
 8016d8e:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8016d92:	eddc 7a00 	vldr	s15, [ip]
 8016d96:	ed83 8a06 	vstr	s16, [r3, #24]
 8016d9a:	eef1 7a67 	vneg.f32	s15, s15
 8016d9e:	2806      	cmp	r0, #6
 8016da0:	edcc 7a00 	vstr	s15, [ip]
 8016da4:	f1a2 0c02 	sub.w	ip, r2, #2
 8016da8:	d185      	bne.n	8016cb6 <kalman_3gyro.constprop.0+0x2d6e>
 8016daa:	edd6 7a06 	vldr	s15, [r6, #24]
 8016dae:	ed83 8a07 	vstr	s16, [r3, #28]
 8016db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016db6:	f102 3cff 	add.w	ip, r2, #4294967295
 8016dba:	edc6 7a06 	vstr	s15, [r6, #24]
 8016dbe:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8016dc2:	eddc 7a00 	vldr	s15, [ip]
 8016dc6:	ed83 8a08 	vstr	s16, [r3, #32]
 8016dca:	eef1 7a67 	vneg.f32	s15, s15
 8016dce:	edcc 7a00 	vstr	s15, [ip]
 8016dd2:	e787      	b.n	8016ce4 <kalman_3gyro.constprop.0+0x2d9c>
 8016dd4:	edd6 7a04 	vldr	s15, [r6, #16]
 8016dd8:	ed83 8a05 	vstr	s16, [r3, #20]
 8016ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016de0:	f1a2 0e03 	sub.w	lr, r2, #3
 8016de4:	edc6 7a04 	vstr	s15, [r6, #16]
 8016de8:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8016dec:	edde 7a00 	vldr	s15, [lr]
 8016df0:	ed83 8a06 	vstr	s16, [r3, #24]
 8016df4:	eef1 7a67 	vneg.f32	s15, s15
 8016df8:	f1a2 0c02 	sub.w	ip, r2, #2
 8016dfc:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8016e00:	edce 7a00 	vstr	s15, [lr]
 8016e04:	eddc 7a00 	vldr	s15, [ip]
 8016e08:	ed83 8a07 	vstr	s16, [r3, #28]
 8016e0c:	eef1 7a67 	vneg.f32	s15, s15
 8016e10:	edcc 7a00 	vstr	s15, [ip]
 8016e14:	f102 3cff 	add.w	ip, r2, #4294967295
 8016e18:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8016e1c:	eddc 7a00 	vldr	s15, [ip]
 8016e20:	ed83 8a08 	vstr	s16, [r3, #32]
 8016e24:	eef1 7a67 	vneg.f32	s15, s15
 8016e28:	2808      	cmp	r0, #8
 8016e2a:	edcc 7a00 	vstr	s15, [ip]
 8016e2e:	f47f af59 	bne.w	8016ce4 <kalman_3gyro.constprop.0+0x2d9c>
 8016e32:	ed96 7a08 	vldr	s14, [r6, #32]
 8016e36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016e3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016e3e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8016e42:	edc2 7a00 	vstr	s15, [r2]
 8016e46:	2000      	movs	r0, #0
 8016e48:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 8016e4c:	ecb1 3a01 	vldmia	r1!, {s6}
 8016e50:	edd1 3a08 	vldr	s7, [r1, #32]
 8016e54:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 8016e58:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 8016e5c:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 8016e60:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 8016e64:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 8016e68:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 8016e6c:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 8016e70:	465a      	mov	r2, fp
 8016e72:	463b      	mov	r3, r7
 8016e74:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8016e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e7c:	d00c      	beq.n	8016e98 <kalman_3gyro.constprop.0+0x2f50>
 8016e7e:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 8016e82:	eef5 2a40 	vcmp.f32	s5, #0.0
 8016e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e8a:	d005      	beq.n	8016e98 <kalman_3gyro.constprop.0+0x2f50>
 8016e8c:	edd3 7a00 	vldr	s15, [r3]
 8016e90:	eee3 7a22 	vfma.f32	s15, s6, s5
 8016e94:	edc3 7a00 	vstr	s15, [r3]
 8016e98:	eef5 3a40 	vcmp.f32	s7, #0.0
 8016e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ea0:	d00c      	beq.n	8016ebc <kalman_3gyro.constprop.0+0x2f74>
 8016ea2:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 8016ea6:	eef5 2a40 	vcmp.f32	s5, #0.0
 8016eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eae:	d005      	beq.n	8016ebc <kalman_3gyro.constprop.0+0x2f74>
 8016eb0:	edd3 7a00 	vldr	s15, [r3]
 8016eb4:	eee3 7aa2 	vfma.f32	s15, s7, s5
 8016eb8:	edc3 7a00 	vstr	s15, [r3]
 8016ebc:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8016ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ec4:	d00c      	beq.n	8016ee0 <kalman_3gyro.constprop.0+0x2f98>
 8016ec6:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 8016eca:	eef5 2a40 	vcmp.f32	s5, #0.0
 8016ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ed2:	d005      	beq.n	8016ee0 <kalman_3gyro.constprop.0+0x2f98>
 8016ed4:	edd3 7a00 	vldr	s15, [r3]
 8016ed8:	eee4 7a22 	vfma.f32	s15, s8, s5
 8016edc:	edc3 7a00 	vstr	s15, [r3]
 8016ee0:	eef5 4a40 	vcmp.f32	s9, #0.0
 8016ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ee8:	d00c      	beq.n	8016f04 <kalman_3gyro.constprop.0+0x2fbc>
 8016eea:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 8016eee:	eef5 2a40 	vcmp.f32	s5, #0.0
 8016ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ef6:	d005      	beq.n	8016f04 <kalman_3gyro.constprop.0+0x2fbc>
 8016ef8:	edd3 7a00 	vldr	s15, [r3]
 8016efc:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8016f00:	edc3 7a00 	vstr	s15, [r3]
 8016f04:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8016f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f0c:	d00c      	beq.n	8016f28 <kalman_3gyro.constprop.0+0x2fe0>
 8016f0e:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 8016f12:	eef5 2a40 	vcmp.f32	s5, #0.0
 8016f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f1a:	d005      	beq.n	8016f28 <kalman_3gyro.constprop.0+0x2fe0>
 8016f1c:	edd3 7a00 	vldr	s15, [r3]
 8016f20:	eee5 7a22 	vfma.f32	s15, s10, s5
 8016f24:	edc3 7a00 	vstr	s15, [r3]
 8016f28:	eef5 5a40 	vcmp.f32	s11, #0.0
 8016f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f30:	d00c      	beq.n	8016f4c <kalman_3gyro.constprop.0+0x3004>
 8016f32:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 8016f36:	eef5 2a40 	vcmp.f32	s5, #0.0
 8016f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f3e:	d005      	beq.n	8016f4c <kalman_3gyro.constprop.0+0x3004>
 8016f40:	edd3 7a00 	vldr	s15, [r3]
 8016f44:	eee5 7aa2 	vfma.f32	s15, s11, s5
 8016f48:	edc3 7a00 	vstr	s15, [r3]
 8016f4c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8016f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f54:	d00c      	beq.n	8016f70 <kalman_3gyro.constprop.0+0x3028>
 8016f56:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 8016f5a:	eef5 2a40 	vcmp.f32	s5, #0.0
 8016f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f62:	d005      	beq.n	8016f70 <kalman_3gyro.constprop.0+0x3028>
 8016f64:	edd3 7a00 	vldr	s15, [r3]
 8016f68:	eee6 7a22 	vfma.f32	s15, s12, s5
 8016f6c:	edc3 7a00 	vstr	s15, [r3]
 8016f70:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f78:	d00c      	beq.n	8016f94 <kalman_3gyro.constprop.0+0x304c>
 8016f7a:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 8016f7e:	eef5 2a40 	vcmp.f32	s5, #0.0
 8016f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f86:	d005      	beq.n	8016f94 <kalman_3gyro.constprop.0+0x304c>
 8016f88:	edd3 7a00 	vldr	s15, [r3]
 8016f8c:	eee6 7aa2 	vfma.f32	s15, s13, s5
 8016f90:	edc3 7a00 	vstr	s15, [r3]
 8016f94:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f9c:	d00c      	beq.n	8016fb8 <kalman_3gyro.constprop.0+0x3070>
 8016f9e:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 8016fa2:	eef5 2a40 	vcmp.f32	s5, #0.0
 8016fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016faa:	d005      	beq.n	8016fb8 <kalman_3gyro.constprop.0+0x3070>
 8016fac:	edd3 7a00 	vldr	s15, [r3]
 8016fb0:	eee7 7a22 	vfma.f32	s15, s14, s5
 8016fb4:	edc3 7a00 	vstr	s15, [r3]
 8016fb8:	3224      	adds	r2, #36	; 0x24
 8016fba:	4296      	cmp	r6, r2
 8016fbc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8016fc0:	f47f af58 	bne.w	8016e74 <kalman_3gyro.constprop.0+0x2f2c>
 8016fc4:	3001      	adds	r0, #1
 8016fc6:	2809      	cmp	r0, #9
 8016fc8:	f107 0704 	add.w	r7, r7, #4
 8016fcc:	f47f af3e 	bne.w	8016e4c <kalman_3gyro.constprop.0+0x2f04>
 8016fd0:	9801      	ldr	r0, [sp, #4]
 8016fd2:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8016fd6:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8016fda:	f00b feb1 	bl	8022d40 <memcpy>
 8016fde:	eef5 8a40 	vcmp.f32	s17, #0.0
 8016fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fe6:	f000 817c 	beq.w	80172e2 <kalman_3gyro.constprop.0+0x339a>
 8016fea:	eef5 9a40 	vcmp.f32	s19, #0.0
 8016fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ff2:	f000 8176 	beq.w	80172e2 <kalman_3gyro.constprop.0+0x339a>
 8016ff6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8016ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ffe:	ee69 8aa8 	vmul.f32	s17, s19, s17
 8017002:	f040 8212 	bne.w	801742a <kalman_3gyro.constprop.0+0x34e2>
 8017006:	eef5 aa40 	vcmp.f32	s21, #0.0
 801700a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801700e:	f000 8177 	beq.w	8017300 <kalman_3gyro.constprop.0+0x33b8>
 8017012:	eef5 ba40 	vcmp.f32	s23, #0.0
 8017016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801701a:	ee29 7aaa 	vmul.f32	s14, s19, s21
 801701e:	f040 81cb 	bne.w	80173b8 <kalman_3gyro.constprop.0+0x3470>
 8017022:	eef0 ba47 	vmov.f32	s23, s14
 8017026:	eef0 aa49 	vmov.f32	s21, s18
 801702a:	eef5 ca40 	vcmp.f32	s25, #0.0
 801702e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017032:	f000 8138 	beq.w	80172a6 <kalman_3gyro.constprop.0+0x335e>
 8017036:	eef5 9a40 	vcmp.f32	s19, #0.0
 801703a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801703e:	f000 824e 	beq.w	80174de <kalman_3gyro.constprop.0+0x3596>
 8017042:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8017046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801704a:	ee29 7aac 	vmul.f32	s14, s19, s25
 801704e:	eef0 7a48 	vmov.f32	s15, s16
 8017052:	f040 81c5 	bne.w	80173e0 <kalman_3gyro.constprop.0+0x3498>
 8017056:	eeb0 ca47 	vmov.f32	s24, s14
 801705a:	eef0 ca67 	vmov.f32	s25, s15
 801705e:	eeb5 da40 	vcmp.f32	s26, #0.0
 8017062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017066:	f000 8179 	beq.w	801735c <kalman_3gyro.constprop.0+0x3414>
 801706a:	eef5 9a40 	vcmp.f32	s19, #0.0
 801706e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017072:	f000 8125 	beq.w	80172c0 <kalman_3gyro.constprop.0+0x3378>
 8017076:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801707a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801707e:	ee29 7a8d 	vmul.f32	s14, s19, s26
 8017082:	eef0 7a48 	vmov.f32	s15, s16
 8017086:	f040 81be 	bne.w	8017406 <kalman_3gyro.constprop.0+0x34be>
 801708a:	eeb0 aa47 	vmov.f32	s20, s14
 801708e:	eeb0 da67 	vmov.f32	s26, s15
 8017092:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8017096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801709a:	f000 811f 	beq.w	80172dc <kalman_3gyro.constprop.0+0x3394>
 801709e:	eef5 9a40 	vcmp.f32	s19, #0.0
 80170a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170a6:	f000 821d 	beq.w	80174e4 <kalman_3gyro.constprop.0+0x359c>
 80170aa:	eef0 7a48 	vmov.f32	s15, s16
 80170ae:	ee2b ba29 	vmul.f32	s22, s22, s19
 80170b2:	eef0 9a67 	vmov.f32	s19, s15
 80170b6:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 80170ba:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 80170be:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 80170c2:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 80170c6:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 80170ca:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 80170ce:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 80170d2:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 80170d6:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 80170da:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80170de:	ee74 aa2a 	vadd.f32	s21, s8, s21
 80170e2:	ee74 baab 	vadd.f32	s23, s9, s23
 80170e6:	ee75 ca2c 	vadd.f32	s25, s10, s25
 80170ea:	ee35 ca8c 	vadd.f32	s24, s11, s24
 80170ee:	ee36 da0d 	vadd.f32	s26, s12, s26
 80170f2:	ee36 aa8a 	vadd.f32	s20, s13, s20
 80170f6:	ee77 9a29 	vadd.f32	s19, s14, s19
 80170fa:	ee37 ba8b 	vadd.f32	s22, s15, s22
 80170fe:	3501      	adds	r5, #1
 8017100:	2d0c      	cmp	r5, #12
 8017102:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 8017106:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 801710a:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 801710e:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 8017112:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 8017116:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 801711a:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 801711e:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 8017122:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 8017126:	f104 0404 	add.w	r4, r4, #4
 801712a:	f47f ab02 	bne.w	8016732 <kalman_3gyro.constprop.0+0x27ea>
 801712e:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 8017132:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 8017136:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 801713a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801713e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8017142:	eee6 7a06 	vfma.f32	s15, s12, s12
 8017146:	eee7 7a07 	vfma.f32	s15, s14, s14
 801714a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801714e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017152:	f100 81b5 	bmi.w	80174c0 <kalman_3gyro.constprop.0+0x3578>
 8017156:	eef1 4ae7 	vsqrt.f32	s9, s15
 801715a:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 80174ec <kalman_3gyro.constprop.0+0x35a4>
 801715e:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 8017162:	ee67 4a86 	vmul.f32	s9, s15, s12
 8017166:	ee67 5aa6 	vmul.f32	s11, s15, s13
 801716a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801716e:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 8017172:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 8017176:	aa36      	add	r2, sp, #216	; 0xd8
 8017178:	edc3 4a00 	vstr	s9, [r3]
 801717c:	edc3 5a01 	vstr	s11, [r3, #4]
 8017180:	edc3 7a02 	vstr	s15, [r3, #8]
 8017184:	ed83 5a03 	vstr	s10, [r3, #12]
 8017188:	4618      	mov	r0, r3
 801718a:	4611      	mov	r1, r2
 801718c:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 8017190:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 8017194:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 8017198:	f7fb fdbe 	bl	8012d18 <qmult>
 801719c:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 80171a0:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 80171a4:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 80171a8:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 80171ac:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 80171b0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80171b2:	ee66 7a06 	vmul.f32	s15, s12, s12
 80171b6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80171ba:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80171be:	ae54      	add	r6, sp, #336	; 0x150
 80171c0:	af5c      	add	r7, sp, #368	; 0x170
 80171c2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80171c6:	eee7 7a07 	vfma.f32	s15, s14, s14
 80171ca:	eeb1 5ae7 	vsqrt.f32	s10, s15
 80171ce:	eec4 7a85 	vdiv.f32	s15, s9, s10
 80171d2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80171d6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80171da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80171de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80171e2:	edc3 5a00 	vstr	s11, [r3]
 80171e6:	ed83 6a01 	vstr	s12, [r3, #4]
 80171ea:	edc3 6a02 	vstr	s13, [r3, #8]
 80171ee:	ed83 7a03 	vstr	s14, [r3, #12]
 80171f2:	4634      	mov	r4, r6
 80171f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80171f6:	42bc      	cmp	r4, r7
 80171f8:	6028      	str	r0, [r5, #0]
 80171fa:	6069      	str	r1, [r5, #4]
 80171fc:	60aa      	str	r2, [r5, #8]
 80171fe:	60eb      	str	r3, [r5, #12]
 8017200:	4626      	mov	r6, r4
 8017202:	f105 0510 	add.w	r5, r5, #16
 8017206:	d1f4      	bne.n	80171f2 <kalman_3gyro.constprop.0+0x32aa>
 8017208:	6820      	ldr	r0, [r4, #0]
 801720a:	6028      	str	r0, [r5, #0]
 801720c:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 8017210:	ecbd 8b10 	vpop	{d8-d15}
 8017214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017218:	edd6 7a05 	vldr	s15, [r6, #20]
 801721c:	ed83 8a06 	vstr	s16, [r3, #24]
 8017220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017224:	f1a2 0e02 	sub.w	lr, r2, #2
 8017228:	edc6 7a05 	vstr	s15, [r6, #20]
 801722c:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8017230:	edde 7a00 	vldr	s15, [lr]
 8017234:	ed83 8a07 	vstr	s16, [r3, #28]
 8017238:	eef1 7a67 	vneg.f32	s15, s15
 801723c:	f102 3cff 	add.w	ip, r2, #4294967295
 8017240:	edce 7a00 	vstr	s15, [lr]
 8017244:	e5bb      	b.n	8016dbe <kalman_3gyro.constprop.0+0x2e76>
 8017246:	edd6 7a02 	vldr	s15, [r6, #8]
 801724a:	ed83 8a03 	vstr	s16, [r3, #12]
 801724e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017252:	f1a2 0c05 	sub.w	ip, r2, #5
 8017256:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 801725a:	edc6 7a02 	vstr	s15, [r6, #8]
 801725e:	eddc 7a00 	vldr	s15, [ip]
 8017262:	ed83 8a04 	vstr	s16, [r3, #16]
 8017266:	eef1 7a67 	vneg.f32	s15, s15
 801726a:	edcc 7a00 	vstr	s15, [ip]
 801726e:	f1a2 0c04 	sub.w	ip, r2, #4
 8017272:	e57d      	b.n	8016d70 <kalman_3gyro.constprop.0+0x2e28>
 8017274:	edd6 7a01 	vldr	s15, [r6, #4]
 8017278:	ed83 8a02 	vstr	s16, [r3, #8]
 801727c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017280:	f1a2 0c06 	sub.w	ip, r2, #6
 8017284:	edc6 7a01 	vstr	s15, [r6, #4]
 8017288:	e558      	b.n	8016d3c <kalman_3gyro.constprop.0+0x2df4>
 801728a:	eef5 ca40 	vcmp.f32	s25, #0.0
 801728e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017292:	ee69 7aab 	vmul.f32	s15, s19, s23
 8017296:	eeb0 7a48 	vmov.f32	s14, s16
 801729a:	f040 8097 	bne.w	80173cc <kalman_3gyro.constprop.0+0x3484>
 801729e:	eef0 ca67 	vmov.f32	s25, s15
 80172a2:	eef0 ba47 	vmov.f32	s23, s14
 80172a6:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80172aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ae:	f43f aed6 	beq.w	801705e <kalman_3gyro.constprop.0+0x3116>
 80172b2:	eef5 9a40 	vcmp.f32	s19, #0.0
 80172b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ba:	d142      	bne.n	8017342 <kalman_3gyro.constprop.0+0x33fa>
 80172bc:	eeb0 ca69 	vmov.f32	s24, s19
 80172c0:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80172c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172c8:	f040 80ba 	bne.w	8017440 <kalman_3gyro.constprop.0+0x34f8>
 80172cc:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80172d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172d4:	eeb0 da4a 	vmov.f32	s26, s20
 80172d8:	f47f aee1 	bne.w	801709e <kalman_3gyro.constprop.0+0x3156>
 80172dc:	eef0 9a4b 	vmov.f32	s19, s22
 80172e0:	e6e9      	b.n	80170b6 <kalman_3gyro.constprop.0+0x316e>
 80172e2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80172e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ea:	d051      	beq.n	8017390 <kalman_3gyro.constprop.0+0x3448>
 80172ec:	eef5 9a40 	vcmp.f32	s19, #0.0
 80172f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172f4:	f040 8097 	bne.w	8017426 <kalman_3gyro.constprop.0+0x34de>
 80172f8:	eef0 aa69 	vmov.f32	s21, s19
 80172fc:	eef0 8a69 	vmov.f32	s17, s19
 8017300:	eef5 ba40 	vcmp.f32	s23, #0.0
 8017304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017308:	f43f ae8f 	beq.w	801702a <kalman_3gyro.constprop.0+0x30e2>
 801730c:	eef5 9a40 	vcmp.f32	s19, #0.0
 8017310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017314:	d1b9      	bne.n	801728a <kalman_3gyro.constprop.0+0x3342>
 8017316:	eef0 ca69 	vmov.f32	s25, s19
 801731a:	eef0 ba69 	vmov.f32	s23, s19
 801731e:	e7c2      	b.n	80172a6 <kalman_3gyro.constprop.0+0x335e>
 8017320:	aa7b      	add	r2, sp, #492	; 0x1ec
 8017322:	4413      	add	r3, r2
 8017324:	edd3 9a00 	vldr	s19, [r3]
 8017328:	f7ff bbe8 	b.w	8016afc <kalman_3gyro.constprop.0+0x2bb4>
 801732c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017334:	bf14      	ite	ne
 8017336:	ee68 7aad 	vmulne.f32	s15, s17, s27
 801733a:	eef0 7a68 	vmoveq.f32	s15, s17
 801733e:	f7ff bab4 	b.w	80168aa <kalman_3gyro.constprop.0+0x2962>
 8017342:	eeb5 da40 	vcmp.f32	s26, #0.0
 8017346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801734a:	ee69 7a8c 	vmul.f32	s15, s19, s24
 801734e:	eeb0 7a48 	vmov.f32	s14, s16
 8017352:	d14e      	bne.n	80173f2 <kalman_3gyro.constprop.0+0x34aa>
 8017354:	eeb0 da67 	vmov.f32	s26, s15
 8017358:	eeb0 ca47 	vmov.f32	s24, s14
 801735c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8017360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017364:	f43f ae95 	beq.w	8017092 <kalman_3gyro.constprop.0+0x314a>
 8017368:	eef5 9a40 	vcmp.f32	s19, #0.0
 801736c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017370:	f000 8474 	beq.w	8017c5c <kalman_3gyro.constprop.0+0x3d14>
 8017374:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8017378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801737c:	ee69 7a8a 	vmul.f32	s15, s19, s20
 8017380:	eeb0 7a48 	vmov.f32	s14, s16
 8017384:	d148      	bne.n	8017418 <kalman_3gyro.constprop.0+0x34d0>
 8017386:	eef0 9a67 	vmov.f32	s19, s15
 801738a:	eeb0 aa47 	vmov.f32	s20, s14
 801738e:	e692      	b.n	80170b6 <kalman_3gyro.constprop.0+0x316e>
 8017390:	eef5 aa40 	vcmp.f32	s21, #0.0
 8017394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017398:	d05b      	beq.n	8017452 <kalman_3gyro.constprop.0+0x350a>
 801739a:	eef5 9a40 	vcmp.f32	s19, #0.0
 801739e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173a2:	d0a9      	beq.n	80172f8 <kalman_3gyro.constprop.0+0x33b0>
 80173a4:	eef5 ba40 	vcmp.f32	s23, #0.0
 80173a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173ac:	ee29 7aaa 	vmul.f32	s14, s19, s21
 80173b0:	eef0 8a49 	vmov.f32	s17, s18
 80173b4:	f43f ae35 	beq.w	8017022 <kalman_3gyro.constprop.0+0x30da>
 80173b8:	eef5 ca40 	vcmp.f32	s25, #0.0
 80173bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173c0:	ee69 7aab 	vmul.f32	s15, s19, s23
 80173c4:	eef0 aa49 	vmov.f32	s21, s18
 80173c8:	f43f af69 	beq.w	801729e <kalman_3gyro.constprop.0+0x3356>
 80173cc:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80173d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173d4:	eef0 ba47 	vmov.f32	s23, s14
 80173d8:	ee29 7aac 	vmul.f32	s14, s19, s25
 80173dc:	f43f ae3b 	beq.w	8017056 <kalman_3gyro.constprop.0+0x310e>
 80173e0:	eeb5 da40 	vcmp.f32	s26, #0.0
 80173e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173e8:	eef0 ca67 	vmov.f32	s25, s15
 80173ec:	ee69 7a8c 	vmul.f32	s15, s19, s24
 80173f0:	d0b0      	beq.n	8017354 <kalman_3gyro.constprop.0+0x340c>
 80173f2:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80173f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173fa:	eeb0 ca47 	vmov.f32	s24, s14
 80173fe:	ee29 7a8d 	vmul.f32	s14, s19, s26
 8017402:	f43f ae42 	beq.w	801708a <kalman_3gyro.constprop.0+0x3142>
 8017406:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801740a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801740e:	eeb0 da67 	vmov.f32	s26, s15
 8017412:	ee69 7a8a 	vmul.f32	s15, s19, s20
 8017416:	d0b6      	beq.n	8017386 <kalman_3gyro.constprop.0+0x343e>
 8017418:	eeb0 aa47 	vmov.f32	s20, s14
 801741c:	e647      	b.n	80170ae <kalman_3gyro.constprop.0+0x3166>
 801741e:	eef0 7a6d 	vmov.f32	s15, s27
 8017422:	f7ff baf5 	b.w	8016a10 <kalman_3gyro.constprop.0+0x2ac8>
 8017426:	eef0 8a48 	vmov.f32	s17, s16
 801742a:	eef5 aa40 	vcmp.f32	s21, #0.0
 801742e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017432:	ee29 9a29 	vmul.f32	s18, s18, s19
 8017436:	f47f adec 	bne.w	8017012 <kalman_3gyro.constprop.0+0x30ca>
 801743a:	eef0 aa49 	vmov.f32	s21, s18
 801743e:	e75f      	b.n	8017300 <kalman_3gyro.constprop.0+0x33b8>
 8017440:	ed9f ba2a 	vldr	s22, [pc, #168]	; 80174ec <kalman_3gyro.constprop.0+0x35a4>
 8017444:	eef0 9a48 	vmov.f32	s19, s16
 8017448:	eeb0 aa48 	vmov.f32	s20, s16
 801744c:	eeb0 da48 	vmov.f32	s26, s16
 8017450:	e631      	b.n	80170b6 <kalman_3gyro.constprop.0+0x316e>
 8017452:	eef0 8a6a 	vmov.f32	s17, s21
 8017456:	e753      	b.n	8017300 <kalman_3gyro.constprop.0+0x33b8>
 8017458:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 801745c:	2a31      	cmp	r2, #49	; 0x31
 801745e:	f63f a8a3 	bhi.w	80165a8 <kalman_3gyro.constprop.0+0x2660>
 8017462:	2100      	movs	r1, #0
 8017464:	3201      	adds	r2, #1
 8017466:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 801746a:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 801746e:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8017472:	f7ff b899 	b.w	80165a8 <kalman_3gyro.constprop.0+0x2660>
 8017476:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 801747a:	2b00      	cmp	r3, #0
 801747c:	f340 83da 	ble.w	8017c34 <kalman_3gyro.constprop.0+0x3cec>
 8017480:	3b01      	subs	r3, #1
 8017482:	2200      	movs	r2, #0
 8017484:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8017488:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 801748c:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 8017490:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 8017494:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 8017498:	f7fe bca9 	b.w	8015dee <kalman_3gyro.constprop.0+0x1ea6>
 801749c:	f89b 200d 	ldrb.w	r2, [fp, #13]
 80174a0:	f89b 100e 	ldrb.w	r1, [fp, #14]
 80174a4:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80174a8:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 80174ac:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 80174b0:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 80174b4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 80174b8:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 80174bc:	f7fe bc18 	b.w	8015cf0 <kalman_3gyro.constprop.0+0x1da8>
 80174c0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80174c4:	eef0 4a46 	vmov.f32	s9, s12
 80174c8:	eeb1 5ae5 	vsqrt.f32	s10, s11
 80174cc:	eef0 7a47 	vmov.f32	s15, s14
 80174d0:	eef0 5a66 	vmov.f32	s11, s13
 80174d4:	e64b      	b.n	801716e <kalman_3gyro.constprop.0+0x3226>
 80174d6:	eeb1 7a47 	vneg.f32	s14, s14
 80174da:	f7fd bc66 	b.w	8014daa <kalman_3gyro.constprop.0+0xe62>
 80174de:	eef0 ca69 	vmov.f32	s25, s19
 80174e2:	e6e0      	b.n	80172a6 <kalman_3gyro.constprop.0+0x335e>
 80174e4:	eeb0 ba69 	vmov.f32	s22, s19
 80174e8:	e5e5      	b.n	80170b6 <kalman_3gyro.constprop.0+0x316e>
 80174ea:	bf00      	nop
 80174ec:	00000000 	.word	0x00000000
 80174f0:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 80174f4:	49c6      	ldr	r1, [pc, #792]	; (8017810 <kalman_3gyro.constprop.0+0x38c8>)
 80174f6:	4bc7      	ldr	r3, [pc, #796]	; (8017814 <kalman_3gyro.constprop.0+0x38cc>)
 80174f8:	4ac7      	ldr	r2, [pc, #796]	; (8017818 <kalman_3gyro.constprop.0+0x38d0>)
 80174fa:	2000      	movs	r0, #0
 80174fc:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 8017500:	6029      	str	r1, [r5, #0]
 8017502:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 8017506:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 801750a:	6002      	str	r2, [r0, #0]
 801750c:	600b      	str	r3, [r1, #0]
 801750e:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 8017512:	9004      	str	r0, [sp, #16]
 8017514:	9110      	str	r1, [sp, #64]	; 0x40
 8017516:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 801751a:	2b00      	cmp	r3, #0
 801751c:	f000 80a0 	beq.w	8017660 <kalman_3gyro.constprop.0+0x3718>
 8017520:	240c      	movs	r4, #12
 8017522:	eddf babe 	vldr	s23, [pc, #760]	; 801781c <kalman_3gyro.constprop.0+0x38d4>
 8017526:	ed9f babe 	vldr	s22, [pc, #760]	; 8017820 <kalman_3gyro.constprop.0+0x38d8>
 801752a:	ed9f 8abe 	vldr	s16, [pc, #760]	; 8017824 <kalman_3gyro.constprop.0+0x38dc>
 801752e:	ed9f aabe 	vldr	s20, [pc, #760]	; 8017828 <kalman_3gyro.constprop.0+0x38e0>
 8017532:	eddf aabe 	vldr	s21, [pc, #760]	; 801782c <kalman_3gyro.constprop.0+0x38e4>
 8017536:	9f08      	ldr	r7, [sp, #32]
 8017538:	fb14 8403 	smlabb	r4, r4, r3, r8
 801753c:	4646      	mov	r6, r8
 801753e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8017542:	e05f      	b.n	8017604 <kalman_3gyro.constprop.0+0x36bc>
 8017544:	eeb4 7aca 	vcmpe.f32	s14, s20
 8017548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801754c:	f300 8132 	bgt.w	80177b4 <kalman_3gyro.constprop.0+0x386c>
 8017550:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8017554:	ee17 0a90 	vmov	r0, s15
 8017558:	f7e8 ffc6 	bl	80004e8 <__aeabi_f2d>
 801755c:	f009 fe4c 	bl	80211f8 <ceil>
 8017560:	f7e9 fb12 	bl	8000b88 <__aeabi_d2f>
 8017564:	ee07 0a90 	vmov	s15, r0
 8017568:	edc6 7a00 	vstr	s15, [r6]
 801756c:	ed97 7a01 	vldr	s14, [r7, #4]
 8017570:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8017574:	eef0 6ae7 	vabs.f32	s13, s15
 8017578:	eef4 6acb 	vcmpe.f32	s13, s22
 801757c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017580:	d517      	bpl.n	80175b2 <kalman_3gyro.constprop.0+0x366a>
 8017582:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8017586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801758a:	f280 8100 	bge.w	801778e <kalman_3gyro.constprop.0+0x3846>
 801758e:	eeb4 7aca 	vcmpe.f32	s14, s20
 8017592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017596:	f300 810a 	bgt.w	80177ae <kalman_3gyro.constprop.0+0x3866>
 801759a:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801759e:	ee17 0a90 	vmov	r0, s15
 80175a2:	f7e8 ffa1 	bl	80004e8 <__aeabi_f2d>
 80175a6:	f009 fe27 	bl	80211f8 <ceil>
 80175aa:	f7e9 faed 	bl	8000b88 <__aeabi_d2f>
 80175ae:	ee07 0a90 	vmov	s15, r0
 80175b2:	edc6 7a01 	vstr	s15, [r6, #4]
 80175b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80175ba:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80175be:	eef0 6ae7 	vabs.f32	s13, s15
 80175c2:	eef4 6acb 	vcmpe.f32	s13, s22
 80175c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175ca:	d516      	bpl.n	80175fa <kalman_3gyro.constprop.0+0x36b2>
 80175cc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80175d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175d4:	da33      	bge.n	801763e <kalman_3gyro.constprop.0+0x36f6>
 80175d6:	eeb4 7aca 	vcmpe.f32	s14, s20
 80175da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175de:	f300 80e3 	bgt.w	80177a8 <kalman_3gyro.constprop.0+0x3860>
 80175e2:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80175e6:	ee17 0a90 	vmov	r0, s15
 80175ea:	f7e8 ff7d 	bl	80004e8 <__aeabi_f2d>
 80175ee:	f009 fe03 	bl	80211f8 <ceil>
 80175f2:	f7e9 fac9 	bl	8000b88 <__aeabi_d2f>
 80175f6:	ee07 0a90 	vmov	s15, r0
 80175fa:	edc6 7a02 	vstr	s15, [r6, #8]
 80175fe:	360c      	adds	r6, #12
 8017600:	42b4      	cmp	r4, r6
 8017602:	d02d      	beq.n	8017660 <kalman_3gyro.constprop.0+0x3718>
 8017604:	ed97 7a00 	vldr	s14, [r7]
 8017608:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801760c:	eef0 6ae7 	vabs.f32	s13, s15
 8017610:	eef4 6acb 	vcmpe.f32	s13, s22
 8017614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017618:	d5a6      	bpl.n	8017568 <kalman_3gyro.constprop.0+0x3620>
 801761a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801761e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017622:	db8f      	blt.n	8017544 <kalman_3gyro.constprop.0+0x35fc>
 8017624:	ee77 7a89 	vadd.f32	s15, s15, s18
 8017628:	ee17 0a90 	vmov	r0, s15
 801762c:	f7e8 ff5c 	bl	80004e8 <__aeabi_f2d>
 8017630:	f009 fe66 	bl	8021300 <floor>
 8017634:	f7e9 faa8 	bl	8000b88 <__aeabi_d2f>
 8017638:	ee07 0a90 	vmov	s15, r0
 801763c:	e794      	b.n	8017568 <kalman_3gyro.constprop.0+0x3620>
 801763e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8017642:	360c      	adds	r6, #12
 8017644:	ee17 0a90 	vmov	r0, s15
 8017648:	f7e8 ff4e 	bl	80004e8 <__aeabi_f2d>
 801764c:	f009 fe58 	bl	8021300 <floor>
 8017650:	f7e9 fa9a 	bl	8000b88 <__aeabi_d2f>
 8017654:	ee07 0a90 	vmov	s15, r0
 8017658:	ed46 7a01 	vstr	s15, [r6, #-4]
 801765c:	42b4      	cmp	r4, r6
 801765e:	d1d1      	bne.n	8017604 <kalman_3gyro.constprop.0+0x36bc>
 8017660:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 8017664:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 8017668:	2b00      	cmp	r3, #0
 801766a:	f000 80b7 	beq.w	80177dc <kalman_3gyro.constprop.0+0x3894>
 801766e:	240c      	movs	r4, #12
 8017670:	eddf ba6f 	vldr	s23, [pc, #444]	; 8017830 <kalman_3gyro.constprop.0+0x38e8>
 8017674:	ed9f ba6a 	vldr	s22, [pc, #424]	; 8017820 <kalman_3gyro.constprop.0+0x38d8>
 8017678:	ed9f 8a6e 	vldr	s16, [pc, #440]	; 8017834 <kalman_3gyro.constprop.0+0x38ec>
 801767c:	ed9f aa6e 	vldr	s20, [pc, #440]	; 8017838 <kalman_3gyro.constprop.0+0x38f0>
 8017680:	eddf aa6a 	vldr	s21, [pc, #424]	; 801782c <kalman_3gyro.constprop.0+0x38e4>
 8017684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017688:	fb14 7403 	smlabb	r4, r4, r3, r7
 801768c:	463e      	mov	r6, r7
 801768e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8017692:	e05f      	b.n	8017754 <kalman_3gyro.constprop.0+0x380c>
 8017694:	eeb4 7aca 	vcmpe.f32	s14, s20
 8017698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801769c:	f300 8175 	bgt.w	801798a <kalman_3gyro.constprop.0+0x3a42>
 80176a0:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80176a4:	ee17 0a90 	vmov	r0, s15
 80176a8:	f7e8 ff1e 	bl	80004e8 <__aeabi_f2d>
 80176ac:	f009 fda4 	bl	80211f8 <ceil>
 80176b0:	f7e9 fa6a 	bl	8000b88 <__aeabi_d2f>
 80176b4:	ee07 0a90 	vmov	s15, r0
 80176b8:	edc6 7a00 	vstr	s15, [r6]
 80176bc:	ed99 7a04 	vldr	s14, [r9, #16]
 80176c0:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80176c4:	eef0 6ae7 	vabs.f32	s13, s15
 80176c8:	eef4 6acb 	vcmpe.f32	s13, s22
 80176cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176d0:	d517      	bpl.n	8017702 <kalman_3gyro.constprop.0+0x37ba>
 80176d2:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80176d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176da:	f280 8143 	bge.w	8017964 <kalman_3gyro.constprop.0+0x3a1c>
 80176de:	eeb4 7aca 	vcmpe.f32	s14, s20
 80176e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176e6:	f300 814d 	bgt.w	8017984 <kalman_3gyro.constprop.0+0x3a3c>
 80176ea:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80176ee:	ee17 0a90 	vmov	r0, s15
 80176f2:	f7e8 fef9 	bl	80004e8 <__aeabi_f2d>
 80176f6:	f009 fd7f 	bl	80211f8 <ceil>
 80176fa:	f7e9 fa45 	bl	8000b88 <__aeabi_d2f>
 80176fe:	ee07 0a90 	vmov	s15, r0
 8017702:	edc6 7a01 	vstr	s15, [r6, #4]
 8017706:	ed99 7a05 	vldr	s14, [r9, #20]
 801770a:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801770e:	eef0 6ae7 	vabs.f32	s13, s15
 8017712:	eef4 6acb 	vcmpe.f32	s13, s22
 8017716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801771a:	d516      	bpl.n	801774a <kalman_3gyro.constprop.0+0x3802>
 801771c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8017720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017724:	da49      	bge.n	80177ba <kalman_3gyro.constprop.0+0x3872>
 8017726:	eeb4 7aca 	vcmpe.f32	s14, s20
 801772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801772e:	f300 8126 	bgt.w	801797e <kalman_3gyro.constprop.0+0x3a36>
 8017732:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8017736:	ee17 0a90 	vmov	r0, s15
 801773a:	f7e8 fed5 	bl	80004e8 <__aeabi_f2d>
 801773e:	f009 fd5b 	bl	80211f8 <ceil>
 8017742:	f7e9 fa21 	bl	8000b88 <__aeabi_d2f>
 8017746:	ee07 0a90 	vmov	s15, r0
 801774a:	edc6 7a02 	vstr	s15, [r6, #8]
 801774e:	360c      	adds	r6, #12
 8017750:	42b4      	cmp	r4, r6
 8017752:	d043      	beq.n	80177dc <kalman_3gyro.constprop.0+0x3894>
 8017754:	ed99 7a03 	vldr	s14, [r9, #12]
 8017758:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801775c:	eef0 6ae7 	vabs.f32	s13, s15
 8017760:	eef4 6acb 	vcmpe.f32	s13, s22
 8017764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017768:	d5a6      	bpl.n	80176b8 <kalman_3gyro.constprop.0+0x3770>
 801776a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801776e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017772:	db8f      	blt.n	8017694 <kalman_3gyro.constprop.0+0x374c>
 8017774:	ee77 7a89 	vadd.f32	s15, s15, s18
 8017778:	ee17 0a90 	vmov	r0, s15
 801777c:	f7e8 feb4 	bl	80004e8 <__aeabi_f2d>
 8017780:	f009 fdbe 	bl	8021300 <floor>
 8017784:	f7e9 fa00 	bl	8000b88 <__aeabi_d2f>
 8017788:	ee07 0a90 	vmov	s15, r0
 801778c:	e794      	b.n	80176b8 <kalman_3gyro.constprop.0+0x3770>
 801778e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8017792:	ee17 0a90 	vmov	r0, s15
 8017796:	f7e8 fea7 	bl	80004e8 <__aeabi_f2d>
 801779a:	f009 fdb1 	bl	8021300 <floor>
 801779e:	f7e9 f9f3 	bl	8000b88 <__aeabi_d2f>
 80177a2:	ee07 0a90 	vmov	s15, r0
 80177a6:	e704      	b.n	80175b2 <kalman_3gyro.constprop.0+0x366a>
 80177a8:	eef0 7a6a 	vmov.f32	s15, s21
 80177ac:	e725      	b.n	80175fa <kalman_3gyro.constprop.0+0x36b2>
 80177ae:	eef0 7a6a 	vmov.f32	s15, s21
 80177b2:	e6fe      	b.n	80175b2 <kalman_3gyro.constprop.0+0x366a>
 80177b4:	eef0 7a6a 	vmov.f32	s15, s21
 80177b8:	e6d6      	b.n	8017568 <kalman_3gyro.constprop.0+0x3620>
 80177ba:	ee77 7a89 	vadd.f32	s15, s15, s18
 80177be:	360c      	adds	r6, #12
 80177c0:	ee17 0a90 	vmov	r0, s15
 80177c4:	f7e8 fe90 	bl	80004e8 <__aeabi_f2d>
 80177c8:	f009 fd9a 	bl	8021300 <floor>
 80177cc:	f7e9 f9dc 	bl	8000b88 <__aeabi_d2f>
 80177d0:	ee07 0a90 	vmov	s15, r0
 80177d4:	ed46 7a01 	vstr	s15, [r6, #-4]
 80177d8:	42b4      	cmp	r4, r6
 80177da:	d1bb      	bne.n	8017754 <kalman_3gyro.constprop.0+0x380c>
 80177dc:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	f43c accc 	beq.w	801417e <kalman_3gyro.constprop.0+0x236>
 80177e6:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 80177ea:	240c      	movs	r4, #12
 80177ec:	eddf ba13 	vldr	s23, [pc, #76]	; 801783c <kalman_3gyro.constprop.0+0x38f4>
 80177f0:	ed9f ba0b 	vldr	s22, [pc, #44]	; 8017820 <kalman_3gyro.constprop.0+0x38d8>
 80177f4:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8017840 <kalman_3gyro.constprop.0+0x38f8>
 80177f8:	ed9f aa12 	vldr	s20, [pc, #72]	; 8017844 <kalman_3gyro.constprop.0+0x38fc>
 80177fc:	eddf aa0b 	vldr	s21, [pc, #44]	; 801782c <kalman_3gyro.constprop.0+0x38e4>
 8017800:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017804:	960f      	str	r6, [sp, #60]	; 0x3c
 8017806:	fb14 6403 	smlabb	r4, r4, r3, r6
 801780a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 801780e:	e08c      	b.n	801792a <kalman_3gyro.constprop.0+0x39e2>
 8017810:	3a7001e0 	.word	0x3a7001e0
 8017814:	3a8c0118 	.word	0x3a8c0118
 8017818:	3a000100 	.word	0x3a000100
 801781c:	44888777 	.word	0x44888777
 8017820:	4b000000 	.word	0x4b000000
 8017824:	39f001e1 	.word	0x39f001e1
 8017828:	b9f001e1 	.word	0xb9f001e1
 801782c:	80000000 	.word	0x80000000
 8017830:	44fffe00 	.word	0x44fffe00
 8017834:	39800100 	.word	0x39800100
 8017838:	b9800100 	.word	0xb9800100
 801783c:	446a0ccd 	.word	0x446a0ccd
 8017840:	3a0c0118 	.word	0x3a0c0118
 8017844:	ba0c0118 	.word	0xba0c0118
 8017848:	bf666666 	.word	0xbf666666
 801784c:	3d072b02 	.word	0x3d072b02
 8017850:	3cb43958 	.word	0x3cb43958
 8017854:	3cf5c28f 	.word	0x3cf5c28f
 8017858:	3d75c28f 	.word	0x3d75c28f
 801785c:	3d23d70a 	.word	0x3d23d70a
 8017860:	3ca3d70a 	.word	0x3ca3d70a
 8017864:	3d4ccccd 	.word	0x3d4ccccd
 8017868:	3d8f5c29 	.word	0x3d8f5c29
 801786c:	eeb4 7aca 	vcmpe.f32	s14, s20
 8017870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017874:	f300 80a9 	bgt.w	80179ca <kalman_3gyro.constprop.0+0x3a82>
 8017878:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801787c:	ee17 0a90 	vmov	r0, s15
 8017880:	f7e8 fe32 	bl	80004e8 <__aeabi_f2d>
 8017884:	f009 fcb8 	bl	80211f8 <ceil>
 8017888:	f7e9 f97e 	bl	8000b88 <__aeabi_d2f>
 801788c:	ee07 0a90 	vmov	s15, r0
 8017890:	edc6 7a00 	vstr	s15, [r6]
 8017894:	ed99 7a07 	vldr	s14, [r9, #28]
 8017898:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801789c:	eef0 6ae7 	vabs.f32	s13, s15
 80178a0:	eef4 6acb 	vcmpe.f32	s13, s22
 80178a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178a8:	d516      	bpl.n	80178d8 <kalman_3gyro.constprop.0+0x3990>
 80178aa:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80178ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178b2:	da7a      	bge.n	80179aa <kalman_3gyro.constprop.0+0x3a62>
 80178b4:	eeb4 7aca 	vcmpe.f32	s14, s20
 80178b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178bc:	f300 8082 	bgt.w	80179c4 <kalman_3gyro.constprop.0+0x3a7c>
 80178c0:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80178c4:	ee17 0a90 	vmov	r0, s15
 80178c8:	f7e8 fe0e 	bl	80004e8 <__aeabi_f2d>
 80178cc:	f009 fc94 	bl	80211f8 <ceil>
 80178d0:	f7e9 f95a 	bl	8000b88 <__aeabi_d2f>
 80178d4:	ee07 0a90 	vmov	s15, r0
 80178d8:	edc6 7a01 	vstr	s15, [r6, #4]
 80178dc:	ed99 7a08 	vldr	s14, [r9, #32]
 80178e0:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80178e4:	eef0 6ae7 	vabs.f32	s13, s15
 80178e8:	eef4 6acb 	vcmpe.f32	s13, s22
 80178ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178f0:	d515      	bpl.n	801791e <kalman_3gyro.constprop.0+0x39d6>
 80178f2:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80178f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178fa:	da49      	bge.n	8017990 <kalman_3gyro.constprop.0+0x3a48>
 80178fc:	eeb4 7aca 	vcmpe.f32	s14, s20
 8017900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017904:	dc64      	bgt.n	80179d0 <kalman_3gyro.constprop.0+0x3a88>
 8017906:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801790a:	ee17 0a90 	vmov	r0, s15
 801790e:	f7e8 fdeb 	bl	80004e8 <__aeabi_f2d>
 8017912:	f009 fc71 	bl	80211f8 <ceil>
 8017916:	f7e9 f937 	bl	8000b88 <__aeabi_d2f>
 801791a:	ee07 0a90 	vmov	s15, r0
 801791e:	edc6 7a02 	vstr	s15, [r6, #8]
 8017922:	360c      	adds	r6, #12
 8017924:	42b4      	cmp	r4, r6
 8017926:	f43c ac2d 	beq.w	8014184 <kalman_3gyro.constprop.0+0x23c>
 801792a:	ed99 7a06 	vldr	s14, [r9, #24]
 801792e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8017932:	eef0 6ae7 	vabs.f32	s13, s15
 8017936:	eef4 6acb 	vcmpe.f32	s13, s22
 801793a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801793e:	d5a7      	bpl.n	8017890 <kalman_3gyro.constprop.0+0x3948>
 8017940:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8017944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017948:	db90      	blt.n	801786c <kalman_3gyro.constprop.0+0x3924>
 801794a:	ee77 7a89 	vadd.f32	s15, s15, s18
 801794e:	ee17 0a90 	vmov	r0, s15
 8017952:	f7e8 fdc9 	bl	80004e8 <__aeabi_f2d>
 8017956:	f009 fcd3 	bl	8021300 <floor>
 801795a:	f7e9 f915 	bl	8000b88 <__aeabi_d2f>
 801795e:	ee07 0a90 	vmov	s15, r0
 8017962:	e795      	b.n	8017890 <kalman_3gyro.constprop.0+0x3948>
 8017964:	ee77 7a89 	vadd.f32	s15, s15, s18
 8017968:	ee17 0a90 	vmov	r0, s15
 801796c:	f7e8 fdbc 	bl	80004e8 <__aeabi_f2d>
 8017970:	f009 fcc6 	bl	8021300 <floor>
 8017974:	f7e9 f908 	bl	8000b88 <__aeabi_d2f>
 8017978:	ee07 0a90 	vmov	s15, r0
 801797c:	e6c1      	b.n	8017702 <kalman_3gyro.constprop.0+0x37ba>
 801797e:	eef0 7a6a 	vmov.f32	s15, s21
 8017982:	e6e2      	b.n	801774a <kalman_3gyro.constprop.0+0x3802>
 8017984:	eef0 7a6a 	vmov.f32	s15, s21
 8017988:	e6bb      	b.n	8017702 <kalman_3gyro.constprop.0+0x37ba>
 801798a:	eef0 7a6a 	vmov.f32	s15, s21
 801798e:	e693      	b.n	80176b8 <kalman_3gyro.constprop.0+0x3770>
 8017990:	ee77 7a89 	vadd.f32	s15, s15, s18
 8017994:	ee17 0a90 	vmov	r0, s15
 8017998:	f7e8 fda6 	bl	80004e8 <__aeabi_f2d>
 801799c:	f009 fcb0 	bl	8021300 <floor>
 80179a0:	f7e9 f8f2 	bl	8000b88 <__aeabi_d2f>
 80179a4:	ee07 0a90 	vmov	s15, r0
 80179a8:	e7b9      	b.n	801791e <kalman_3gyro.constprop.0+0x39d6>
 80179aa:	ee77 7a89 	vadd.f32	s15, s15, s18
 80179ae:	ee17 0a90 	vmov	r0, s15
 80179b2:	f7e8 fd99 	bl	80004e8 <__aeabi_f2d>
 80179b6:	f009 fca3 	bl	8021300 <floor>
 80179ba:	f7e9 f8e5 	bl	8000b88 <__aeabi_d2f>
 80179be:	ee07 0a90 	vmov	s15, r0
 80179c2:	e789      	b.n	80178d8 <kalman_3gyro.constprop.0+0x3990>
 80179c4:	eef0 7a6a 	vmov.f32	s15, s21
 80179c8:	e786      	b.n	80178d8 <kalman_3gyro.constprop.0+0x3990>
 80179ca:	eef0 7a6a 	vmov.f32	s15, s21
 80179ce:	e75f      	b.n	8017890 <kalman_3gyro.constprop.0+0x3948>
 80179d0:	eef0 7a6a 	vmov.f32	s15, s21
 80179d4:	e7a3      	b.n	801791e <kalman_3gyro.constprop.0+0x39d6>
 80179d6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80179d8:	7813      	ldrb	r3, [r2, #0]
 80179da:	ed92 7a03 	vldr	s14, [r2, #12]
 80179de:	edd2 6a01 	vldr	s13, [r2, #4]
 80179e2:	edd2 7a02 	vldr	s15, [r2, #8]
 80179e6:	2200      	movs	r2, #0
 80179e8:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	f040 813b 	bne.w	8017c68 <kalman_3gyro.constprop.0+0x3d20>
 80179f2:	ed5f 7a6b 	vldr	s15, [pc, #-428]	; 8017848 <kalman_3gyro.constprop.0+0x3900>
 80179f6:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 80179fa:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80179fe:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 8017a02:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 8017a06:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017a0a:	2100      	movs	r1, #0
 8017a0c:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8017a10:	f00b f9be 	bl	8022d90 <memset>
 8017a14:	eddb 7a02 	vldr	s15, [fp, #8]
 8017a18:	ed5f 5a74 	vldr	s11, [pc, #-464]	; 801784c <kalman_3gyro.constprop.0+0x3904>
 8017a1c:	ed1f 6a74 	vldr	s12, [pc, #-464]	; 8017850 <kalman_3gyro.constprop.0+0x3908>
 8017a20:	ed5f 6a74 	vldr	s13, [pc, #-464]	; 8017854 <kalman_3gyro.constprop.0+0x390c>
 8017a24:	ed5f 4a74 	vldr	s9, [pc, #-464]	; 8017858 <kalman_3gyro.constprop.0+0x3910>
 8017a28:	ed5f 3a74 	vldr	s7, [pc, #-464]	; 801785c <kalman_3gyro.constprop.0+0x3914>
 8017a2c:	ed1f 7a74 	vldr	s14, [pc, #-464]	; 8017860 <kalman_3gyro.constprop.0+0x3918>
 8017a30:	ed1f 5a74 	vldr	s10, [pc, #-464]	; 8017864 <kalman_3gyro.constprop.0+0x391c>
 8017a34:	ed1f 4a74 	vldr	s8, [pc, #-464]	; 8017868 <kalman_3gyro.constprop.0+0x3920>
 8017a38:	4be8      	ldr	r3, [pc, #928]	; (8017ddc <kalman_3gyro.constprop.0+0x3e94>)
 8017a3a:	49e9      	ldr	r1, [pc, #932]	; (8017de0 <kalman_3gyro.constprop.0+0x3e98>)
 8017a3c:	4de9      	ldr	r5, [pc, #932]	; (8017de4 <kalman_3gyro.constprop.0+0x3e9c>)
 8017a3e:	ed9f 3aea 	vldr	s6, [pc, #936]	; 8017de8 <kalman_3gyro.constprop.0+0x3ea0>
 8017a42:	48ea      	ldr	r0, [pc, #936]	; (8017dec <kalman_3gyro.constprop.0+0x3ea4>)
 8017a44:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 8017a48:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8017a4c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8017a50:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017a54:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 8017a58:	eddf 5ae5 	vldr	s11, [pc, #916]	; 8017df0 <kalman_3gyro.constprop.0+0x3ea8>
 8017a5c:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 8017a60:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8017a64:	ee67 3aa3 	vmul.f32	s7, s15, s7
 8017a68:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 8017a6c:	ed9f 6ae1 	vldr	s12, [pc, #900]	; 8017df4 <kalman_3gyro.constprop.0+0x3eac>
 8017a70:	eddf 6ae1 	vldr	s13, [pc, #900]	; 8017df8 <kalman_3gyro.constprop.0+0x3eb0>
 8017a74:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 8017a78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017a7c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8017a80:	ee27 5a85 	vmul.f32	s10, s15, s10
 8017a84:	ee27 4a84 	vmul.f32	s8, s15, s8
 8017a88:	ee27 6a86 	vmul.f32	s12, s15, s12
 8017a8c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8017a90:	2200      	movs	r2, #0
 8017a92:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 8017a96:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 8017a9a:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 8017a9e:	4cd7      	ldr	r4, [pc, #860]	; (8017dfc <kalman_3gyro.constprop.0+0x3eb4>)
 8017aa0:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 8017aa4:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 8017aa8:	eddf 3ad5 	vldr	s7, [pc, #852]	; 8017e00 <kalman_3gyro.constprop.0+0x3eb8>
 8017aac:	49d5      	ldr	r1, [pc, #852]	; (8017e04 <kalman_3gyro.constprop.0+0x3ebc>)
 8017aae:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 8017ab2:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 8017ab6:	eddf 4ad4 	vldr	s9, [pc, #848]	; 8017e08 <kalman_3gyro.constprop.0+0x3ec0>
 8017aba:	4bd4      	ldr	r3, [pc, #848]	; (8017e0c <kalman_3gyro.constprop.0+0x3ec4>)
 8017abc:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 8017ac0:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 8017ac4:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 8017ac8:	4ad1      	ldr	r2, [pc, #836]	; (8017e10 <kalman_3gyro.constprop.0+0x3ec8>)
 8017aca:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 8017ace:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 8017ad2:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 8017ad6:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8017ada:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8017ade:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8017ae2:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8017ae6:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8017aea:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8017aee:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8017af2:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8017af6:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8017afa:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 8017afe:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 8017b02:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 8017b06:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 8017b0a:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 8017b0e:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 8017b12:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 8017b16:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8017b1a:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8017b1e:	4cbd      	ldr	r4, [pc, #756]	; (8017e14 <kalman_3gyro.constprop.0+0x3ecc>)
 8017b20:	48bd      	ldr	r0, [pc, #756]	; (8017e18 <kalman_3gyro.constprop.0+0x3ed0>)
 8017b22:	49be      	ldr	r1, [pc, #760]	; (8017e1c <kalman_3gyro.constprop.0+0x3ed4>)
 8017b24:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 8017b28:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 8017b2c:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 8017b30:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 8017b34:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 8017b38:	ee27 6a83 	vmul.f32	s12, s15, s6
 8017b3c:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 8017b40:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 8017b44:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8017b48:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 8017b4c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8017b50:	4ab3      	ldr	r2, [pc, #716]	; (8017e20 <kalman_3gyro.constprop.0+0x3ed8>)
 8017b52:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 8017b56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017b5a:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 8017b5e:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 8017b62:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 8017b66:	4eaf      	ldr	r6, [pc, #700]	; (8017e24 <kalman_3gyro.constprop.0+0x3edc>)
 8017b68:	4daf      	ldr	r5, [pc, #700]	; (8017e28 <kalman_3gyro.constprop.0+0x3ee0>)
 8017b6a:	49b0      	ldr	r1, [pc, #704]	; (8017e2c <kalman_3gyro.constprop.0+0x3ee4>)
 8017b6c:	4ab0      	ldr	r2, [pc, #704]	; (8017e30 <kalman_3gyro.constprop.0+0x3ee8>)
 8017b6e:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 8017b72:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 8017b76:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8017b7a:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 8017b7e:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 8017b82:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 8017b86:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 8017b8a:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 8017b8e:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 8017b92:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 8017b96:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 8017b9a:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 8017b9e:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 8017ba2:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 8017ba6:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 8017baa:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 8017bae:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 8017bb2:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 8017bb6:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 8017bba:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 8017bbe:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 8017bc2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8017bc6:	b973      	cbnz	r3, 8017be6 <kalman_3gyro.constprop.0+0x3c9e>
 8017bc8:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 8017bcc:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 8017bd0:	6811      	ldr	r1, [r2, #0]
 8017bd2:	681a      	ldr	r2, [r3, #0]
 8017bd4:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 8017bd8:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 8017be2:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 8017be6:	2300      	movs	r3, #0
 8017be8:	f88b 3001 	strb.w	r3, [fp, #1]
 8017bec:	f7fc bab6 	b.w	801415c <kalman_3gyro.constprop.0+0x214>
 8017bf0:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8017bf4:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 8017bf8:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8017bfc:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8017c00:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8017c04:	f7fd bda4 	b.w	8015750 <kalman_3gyro.constprop.0+0x1808>
 8017c08:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8017e34 <kalman_3gyro.constprop.0+0x3eec>
 8017c0c:	f7fc bb09 	b.w	8014222 <kalman_3gyro.constprop.0+0x2da>
 8017c10:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 8017c14:	f7fd bdc4 	b.w	80157a0 <kalman_3gyro.constprop.0+0x1858>
 8017c18:	ed9f 6a87 	vldr	s12, [pc, #540]	; 8017e38 <kalman_3gyro.constprop.0+0x3ef0>
 8017c1c:	ed9f 4a87 	vldr	s8, [pc, #540]	; 8017e3c <kalman_3gyro.constprop.0+0x3ef4>
 8017c20:	eddf 4a87 	vldr	s9, [pc, #540]	; 8017e40 <kalman_3gyro.constprop.0+0x3ef8>
 8017c24:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8017e44 <kalman_3gyro.constprop.0+0x3efc>
 8017c28:	ed9f ca87 	vldr	s24, [pc, #540]	; 8017e48 <kalman_3gyro.constprop.0+0x3f00>
 8017c2c:	ee68 8a8c 	vmul.f32	s17, s17, s24
 8017c30:	f7fd bfe6 	b.w	8015c00 <kalman_3gyro.constprop.0+0x1cb8>
 8017c34:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 8017c38:	2a00      	cmp	r2, #0
 8017c3a:	f340 815d 	ble.w	8017ef8 <kalman_3gyro.constprop.0+0x3fb0>
 8017c3e:	ed9d 7a02 	vldr	s14, [sp, #8]
 8017c42:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 8017c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c4e:	f340 8153 	ble.w	8017ef8 <kalman_3gyro.constprop.0+0x3fb0>
 8017c52:	3a01      	subs	r2, #1
 8017c54:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 8017c58:	f7fe b8c9 	b.w	8015dee <kalman_3gyro.constprop.0+0x1ea6>
 8017c5c:	eeb0 aa69 	vmov.f32	s20, s19
 8017c60:	eeb0 ba69 	vmov.f32	s22, s19
 8017c64:	f7ff ba27 	b.w	80170b6 <kalman_3gyro.constprop.0+0x316e>
 8017c68:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017c6c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8017c70:	eee7 7a07 	vfma.f32	s15, s14, s14
 8017c74:	eef1 6ae7 	vsqrt.f32	s13, s15
 8017c78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017c7c:	e6bb      	b.n	80179f6 <kalman_3gyro.constprop.0+0x3aae>
 8017c7e:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8017c82:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8017c86:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8017c8a:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8017c8e:	f7fe b84b 	b.w	8015d28 <kalman_3gyro.constprop.0+0x1de0>
 8017c92:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 8017c96:	f7fd bb2f 	b.w	80152f8 <kalman_3gyro.constprop.0+0x13b0>
 8017c9a:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8017c9e:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 8017ca2:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8017ca6:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8017caa:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8017cae:	f7fd bd4f 	b.w	8015750 <kalman_3gyro.constprop.0+0x1808>
 8017cb2:	ee7e 7a67 	vsub.f32	s15, s28, s15
 8017cb6:	ee17 0a90 	vmov	r0, s15
 8017cba:	f7e8 fc15 	bl	80004e8 <__aeabi_f2d>
 8017cbe:	f009 fa9b 	bl	80211f8 <ceil>
 8017cc2:	f7e8 ff61 	bl	8000b88 <__aeabi_d2f>
 8017cc6:	ee0e 0a10 	vmov	s28, r0
 8017cca:	f7fc bcd9 	b.w	8014680 <kalman_3gyro.constprop.0+0x738>
 8017cce:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8017cd2:	ee17 0a90 	vmov	r0, s15
 8017cd6:	f7e8 fc07 	bl	80004e8 <__aeabi_f2d>
 8017cda:	f009 fa8d 	bl	80211f8 <ceil>
 8017cde:	f7e8 ff53 	bl	8000b88 <__aeabi_d2f>
 8017ce2:	ee0d 0a90 	vmov	s27, r0
 8017ce6:	f7fc bcea 	b.w	80146be <kalman_3gyro.constprop.0+0x776>
 8017cea:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8017cee:	ee17 0a90 	vmov	r0, s15
 8017cf2:	f7e8 fbf9 	bl	80004e8 <__aeabi_f2d>
 8017cf6:	f009 fa7f 	bl	80211f8 <ceil>
 8017cfa:	f7e8 ff45 	bl	8000b88 <__aeabi_d2f>
 8017cfe:	ee0d 0a90 	vmov	s27, r0
 8017d02:	f7fc bd3e 	b.w	8014782 <kalman_3gyro.constprop.0+0x83a>
 8017d06:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8017d0a:	ee17 0a90 	vmov	r0, s15
 8017d0e:	f7e8 fbeb 	bl	80004e8 <__aeabi_f2d>
 8017d12:	f009 fa71 	bl	80211f8 <ceil>
 8017d16:	f7e8 ff37 	bl	8000b88 <__aeabi_d2f>
 8017d1a:	ee0b 0a10 	vmov	s22, r0
 8017d1e:	f7fc bd4f 	b.w	80147c0 <kalman_3gyro.constprop.0+0x878>
 8017d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d26:	f6fd ae38 	blt.w	801599a <kalman_3gyro.constprop.0+0x1a52>
 8017d2a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8017e40 <kalman_3gyro.constprop.0+0x3ef8>
 8017d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d36:	f140 826f 	bpl.w	8018218 <kalman_3gyro.constprop.0+0x42d0>
 8017d3a:	eddf 6a44 	vldr	s13, [pc, #272]	; 8017e4c <kalman_3gyro.constprop.0+0x3f04>
 8017d3e:	eddf 4a44 	vldr	s9, [pc, #272]	; 8017e50 <kalman_3gyro.constprop.0+0x3f08>
 8017d42:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8017e54 <kalman_3gyro.constprop.0+0x3f0c>
 8017d46:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8017d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017d4e:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8017d52:	eea6 7a86 	vfma.f32	s14, s13, s12
 8017d56:	f7fd be2a 	b.w	80159ae <kalman_3gyro.constprop.0+0x1a66>
 8017d5a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8017d5e:	ee17 0a90 	vmov	r0, s15
 8017d62:	f7e8 fbc1 	bl	80004e8 <__aeabi_f2d>
 8017d66:	f009 fa47 	bl	80211f8 <ceil>
 8017d6a:	f7e8 ff0d 	bl	8000b88 <__aeabi_d2f>
 8017d6e:	ee08 0a10 	vmov	s16, r0
 8017d72:	f7fc bc66 	b.w	8014642 <kalman_3gyro.constprop.0+0x6fa>
 8017d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017d7a:	ee3a aa47 	vsub.f32	s20, s20, s14
 8017d7e:	eef0 7aca 	vabs.f32	s15, s20
 8017d82:	ee2a aa0a 	vmul.f32	s20, s20, s20
 8017d86:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d8e:	eeb4 aac7 	vcmpe.f32	s20, s14
 8017d92:	bfb8      	it	lt
 8017d94:	eef0 7a66 	vmovlt.f32	s15, s13
 8017d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d9c:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 8017da0:	f77d aff6 	ble.w	8015d90 <kalman_3gyro.constprop.0+0x1e48>
 8017da4:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 8017da8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8017dac:	eeb4 aac7 	vcmpe.f32	s20, s14
 8017db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017db4:	f77d afec 	ble.w	8015d90 <kalman_3gyro.constprop.0+0x1e48>
 8017db8:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 8017dbc:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 8017dc0:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8017dc4:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8017dc8:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8017dcc:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 8017dd0:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 8017dd4:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 8017dd8:	f7fd bfda 	b.w	8015d90 <kalman_3gyro.constprop.0+0x1e48>
 8017ddc:	3eb33333 	.word	0x3eb33333
 8017de0:	3ee66666 	.word	0x3ee66666
 8017de4:	3f866666 	.word	0x3f866666
 8017de8:	3ecccccd 	.word	0x3ecccccd
 8017dec:	3f933333 	.word	0x3f933333
 8017df0:	3dcccccd 	.word	0x3dcccccd
 8017df4:	3e4ccccd 	.word	0x3e4ccccd
 8017df8:	3e99999a 	.word	0x3e99999a
 8017dfc:	3f8ccccd 	.word	0x3f8ccccd
 8017e00:	3f4ccccd 	.word	0x3f4ccccd
 8017e04:	3ebd70a4 	.word	0x3ebd70a4
 8017e08:	3f666666 	.word	0x3f666666
 8017e0c:	40a00000 	.word	0x40a00000
 8017e10:	3f99999a 	.word	0x3f99999a
 8017e14:	3f19999a 	.word	0x3f19999a
 8017e18:	3fb9999a 	.word	0x3fb9999a
 8017e1c:	3fe66666 	.word	0x3fe66666
 8017e20:	3f333333 	.word	0x3f333333
 8017e24:	3fa66666 	.word	0x3fa66666
 8017e28:	3fcccccd 	.word	0x3fcccccd
 8017e2c:	40200000 	.word	0x40200000
 8017e30:	40400000 	.word	0x40400000
 8017e34:	bf666666 	.word	0xbf666666
 8017e38:	391d4951 	.word	0x391d4951
 8017e3c:	383cbe62 	.word	0x383cbe62
 8017e40:	3c75c28f 	.word	0x3c75c28f
 8017e44:	469c3e00 	.word	0x469c3e00
 8017e48:	43168000 	.word	0x43168000
 8017e4c:	3c23d70a 	.word	0x3c23d70a
 8017e50:	3f19999a 	.word	0x3f19999a
 8017e54:	43480000 	.word	0x43480000
 8017e58:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8017e5c:	2a01      	cmp	r2, #1
 8017e5e:	d002      	beq.n	8017e66 <kalman_3gyro.constprop.0+0x3f1e>
 8017e60:	2b01      	cmp	r3, #1
 8017e62:	f47d af7b 	bne.w	8015d5c <kalman_3gyro.constprop.0+0x1e14>
 8017e66:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8017e6a:	eef4 7ac3 	vcmpe.f32	s15, s6
 8017e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e72:	bfa8      	it	ge
 8017e74:	eeb0 3a67 	vmovge.f32	s6, s15
 8017e78:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8017e7c:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 8017e80:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 8017e84:	f7fd bf6a 	b.w	8015d5c <kalman_3gyro.constprop.0+0x1e14>
 8017e88:	ee78 7a67 	vsub.f32	s15, s16, s15
 8017e8c:	ee17 0a90 	vmov	r0, s15
 8017e90:	f7e8 fb2a 	bl	80004e8 <__aeabi_f2d>
 8017e94:	f009 f9b0 	bl	80211f8 <ceil>
 8017e98:	f7e8 fe76 	bl	8000b88 <__aeabi_d2f>
 8017e9c:	ee08 0a10 	vmov	s16, r0
 8017ea0:	f7fc bcad 	b.w	80147fe <kalman_3gyro.constprop.0+0x8b6>
 8017ea4:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8017ea8:	ee17 0a90 	vmov	r0, s15
 8017eac:	f7e8 fb1c 	bl	80004e8 <__aeabi_f2d>
 8017eb0:	f009 f9a2 	bl	80211f8 <ceil>
 8017eb4:	f7e8 fe68 	bl	8000b88 <__aeabi_d2f>
 8017eb8:	ee0b 0a10 	vmov	s22, r0
 8017ebc:	f7fc bd20 	b.w	8014900 <kalman_3gyro.constprop.0+0x9b8>
 8017ec0:	ee78 7a67 	vsub.f32	s15, s16, s15
 8017ec4:	ee17 0a90 	vmov	r0, s15
 8017ec8:	f7e8 fb0e 	bl	80004e8 <__aeabi_f2d>
 8017ecc:	f009 f994 	bl	80211f8 <ceil>
 8017ed0:	f7e8 fe5a 	bl	8000b88 <__aeabi_d2f>
 8017ed4:	ee08 0a10 	vmov	s16, r0
 8017ed8:	f7fc bd31 	b.w	801493e <kalman_3gyro.constprop.0+0x9f6>
 8017edc:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8017ee0:	ee17 0a90 	vmov	r0, s15
 8017ee4:	f7e8 fb00 	bl	80004e8 <__aeabi_f2d>
 8017ee8:	f009 f986 	bl	80211f8 <ceil>
 8017eec:	f7e8 fe4c 	bl	8000b88 <__aeabi_d2f>
 8017ef0:	ee0d 0a90 	vmov	s27, r0
 8017ef4:	f7fc bce5 	b.w	80148c2 <kalman_3gyro.constprop.0+0x97a>
 8017ef8:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8017efc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8017f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017f04:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8017f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f0c:	f77d af6f 	ble.w	8015dee <kalman_3gyro.constprop.0+0x1ea6>
 8017f10:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8017f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017f18:	eef4 7aec 	vcmpe.f32	s15, s25
 8017f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f20:	f77d af65 	ble.w	8015dee <kalman_3gyro.constprop.0+0x1ea6>
 8017f24:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8017f28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017f2c:	eef4 7acd 	vcmpe.f32	s15, s26
 8017f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f34:	f140 8711 	bpl.w	8018d5a <kalman_3gyro.constprop.0+0x4e12>
 8017f38:	3303      	adds	r3, #3
 8017f3a:	f7ff baa2 	b.w	8017482 <kalman_3gyro.constprop.0+0x353a>
 8017f3e:	460b      	mov	r3, r1
 8017f40:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8017f44:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8017f48:	9181      	str	r1, [sp, #516]	; 0x204
 8017f4a:	9282      	str	r2, [sp, #520]	; 0x208
 8017f4c:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8017f50:	9183      	str	r1, [sp, #524]	; 0x20c
 8017f52:	2200      	movs	r2, #0
 8017f54:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8017f58:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8017f5c:	f7fe bb15 	b.w	801658a <kalman_3gyro.constprop.0+0x2642>
 8017f60:	a936      	add	r1, sp, #216	; 0xd8
 8017f62:	a854      	add	r0, sp, #336	; 0x150
 8017f64:	f7fa fff4 	bl	8012f50 <b_dcm2q>
 8017f68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8017f72:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 8017f76:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017f7a:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8017f7e:	f00a ff07 	bl	8022d90 <memset>
 8017f82:	4bd9      	ldr	r3, [pc, #868]	; (80182e8 <kalman_3gyro.constprop.0+0x43a0>)
 8017f84:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8017f88:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8017f8c:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8017f90:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8017f94:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8017f98:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8017f9c:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8017fa0:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8017fa4:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8017fa8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017faa:	781a      	ldrb	r2, [r3, #0]
 8017fac:	ee07 2a90 	vmov	s15, r2
 8017fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017fb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fbc:	f040 84dd 	bne.w	801897a <kalman_3gyro.constprop.0+0x4a32>
 8017fc0:	eeb0 7a4c 	vmov.f32	s14, s24
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	f88b 3000 	strb.w	r3, [fp]
 8017fca:	eddb ea02 	vldr	s29, [fp, #8]
 8017fce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017fd2:	2301      	movs	r3, #1
 8017fd4:	f7fd bbfa 	b.w	80157cc <kalman_3gyro.constprop.0+0x1884>
 8017fd8:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8017fdc:	eef4 4ac8 	vcmpe.f32	s9, s16
 8017fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fe4:	f340 85da 	ble.w	8018b9c <kalman_3gyro.constprop.0+0x4c54>
 8017fe8:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8017fec:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 8017ff0:	ee78 3a62 	vsub.f32	s7, s16, s5
 8017ff4:	ee37 7a44 	vsub.f32	s14, s14, s8
 8017ff8:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8017ffc:	ee27 7a23 	vmul.f32	s14, s14, s7
 8018000:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8018004:	ee3e ea04 	vadd.f32	s28, s28, s8
 8018008:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 801800c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8018010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018014:	f63d a9b8 	bhi.w	8015388 <kalman_3gyro.constprop.0+0x1440>
 8018018:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 801801c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8018020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018024:	f340 84bd 	ble.w	80189a2 <kalman_3gyro.constprop.0+0x4a5a>
 8018028:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 801802c:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8018030:	ee38 3a47 	vsub.f32	s6, s16, s14
 8018034:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018038:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801803c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8018040:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8018044:	ee3e ea23 	vadd.f32	s28, s28, s7
 8018048:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 801804c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8018050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018054:	f63d a9b8 	bhi.w	80153c8 <kalman_3gyro.constprop.0+0x1480>
 8018058:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 801805c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8018060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018064:	f340 84a9 	ble.w	80189ba <kalman_3gyro.constprop.0+0x4a72>
 8018068:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 801806c:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8018070:	ee38 3a47 	vsub.f32	s6, s16, s14
 8018074:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018078:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801807c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8018080:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8018084:	ee3e ea23 	vadd.f32	s28, s28, s7
 8018088:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 801808c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8018090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018094:	f63d a9b8 	bhi.w	8015408 <kalman_3gyro.constprop.0+0x14c0>
 8018098:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 801809c:	eef4 4ac8 	vcmpe.f32	s9, s16
 80180a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180a4:	f340 8491 	ble.w	80189ca <kalman_3gyro.constprop.0+0x4a82>
 80180a8:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 80180ac:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 80180b0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80180b4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80180b8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80180bc:	ee24 4a03 	vmul.f32	s8, s8, s6
 80180c0:	ee84 ea07 	vdiv.f32	s28, s8, s14
 80180c4:	ee3e ea23 	vadd.f32	s28, s28, s7
 80180c8:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 80180cc:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80180d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180d4:	f6fd a9b8 	blt.w	8015448 <kalman_3gyro.constprop.0+0x1500>
 80180d8:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 80180dc:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80180e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180e4:	f57d a9b8 	bpl.w	8015458 <kalman_3gyro.constprop.0+0x1510>
 80180e8:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 80180ec:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 80180f0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80180f4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80180f8:	ee74 4ac7 	vsub.f32	s9, s9, s14
 80180fc:	ee24 7a03 	vmul.f32	s14, s8, s6
 8018100:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8018104:	ee3e ea23 	vadd.f32	s28, s28, s7
 8018108:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 801810c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8018110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018114:	f6fd a9b8 	blt.w	8015488 <kalman_3gyro.constprop.0+0x1540>
 8018118:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801811c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018120:	f57d a9b2 	bpl.w	8015488 <kalman_3gyro.constprop.0+0x1540>
 8018124:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8018128:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 801812c:	ee78 3a47 	vsub.f32	s7, s16, s14
 8018130:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8018134:	ee35 7a47 	vsub.f32	s14, s10, s14
 8018138:	ee24 5aa3 	vmul.f32	s10, s9, s7
 801813c:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8018140:	ee3e ea04 	vadd.f32	s28, s28, s8
 8018144:	f7fd b9a0 	b.w	8015488 <kalman_3gyro.constprop.0+0x1540>
 8018148:	eddf 6a68 	vldr	s13, [pc, #416]	; 80182ec <kalman_3gyro.constprop.0+0x43a4>
 801814c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018154:	f57d acc3 	bpl.w	8015ade <kalman_3gyro.constprop.0+0x1b96>
 8018158:	eddf 3a65 	vldr	s7, [pc, #404]	; 80182f0 <kalman_3gyro.constprop.0+0x43a8>
 801815c:	eddf 2a65 	vldr	s5, [pc, #404]	; 80182f4 <kalman_3gyro.constprop.0+0x43ac>
 8018160:	ed9f 3a65 	vldr	s6, [pc, #404]	; 80182f8 <kalman_3gyro.constprop.0+0x43b0>
 8018164:	eddf 6a65 	vldr	s13, [pc, #404]	; 80182fc <kalman_3gyro.constprop.0+0x43b4>
 8018168:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801816c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8018170:	eee3 6a83 	vfma.f32	s13, s7, s6
 8018174:	eeb0 ca66 	vmov.f32	s24, s13
 8018178:	eddf 6a61 	vldr	s13, [pc, #388]	; 8018300 <kalman_3gyro.constprop.0+0x43b8>
 801817c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018184:	f6fd acc3 	blt.w	8015b0e <kalman_3gyro.constprop.0+0x1bc6>
 8018188:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8018304 <kalman_3gyro.constprop.0+0x43bc>
 801818c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018194:	f57d acc3 	bpl.w	8015b1e <kalman_3gyro.constprop.0+0x1bd6>
 8018198:	eddf 3a59 	vldr	s7, [pc, #356]	; 8018300 <kalman_3gyro.constprop.0+0x43b8>
 801819c:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80181a0:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80181a4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80181a8:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 80181ac:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80181b0:	eee3 6a83 	vfma.f32	s13, s7, s6
 80181b4:	eeb0 ca66 	vmov.f32	s24, s13
 80181b8:	eddf 6a53 	vldr	s13, [pc, #332]	; 8018308 <kalman_3gyro.constprop.0+0x43c0>
 80181bc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80181c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181c4:	f6fd acc3 	blt.w	8015b4e <kalman_3gyro.constprop.0+0x1c06>
 80181c8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80181cc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80181d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181d4:	f57d acc3 	bpl.w	8015b5e <kalman_3gyro.constprop.0+0x1c16>
 80181d8:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8018308 <kalman_3gyro.constprop.0+0x43c0>
 80181dc:	eddf 2a4b 	vldr	s5, [pc, #300]	; 801830c <kalman_3gyro.constprop.0+0x43c4>
 80181e0:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8018310 <kalman_3gyro.constprop.0+0x43c8>
 80181e4:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80181e8:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 80181ec:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80181f0:	eee3 6a83 	vfma.f32	s13, s7, s6
 80181f4:	eeb0 ca66 	vmov.f32	s24, s13
 80181f8:	e518      	b.n	8017c2c <kalman_3gyro.constprop.0+0x3ce4>
 80181fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181fe:	f57d ac4e 	bpl.w	8015a9e <kalman_3gyro.constprop.0+0x1b56>
 8018202:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80182f0 <kalman_3gyro.constprop.0+0x43a8>
 8018206:	eef4 7ae6 	vcmpe.f32	s15, s13
 801820a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801820e:	da9b      	bge.n	8018148 <kalman_3gyro.constprop.0+0x4200>
 8018210:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8018214:	f7fd bc5b 	b.w	8015ace <kalman_3gyro.constprop.0+0x1b86>
 8018218:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80182ec <kalman_3gyro.constprop.0+0x43a4>
 801821c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018224:	f57d abcb 	bpl.w	80159be <kalman_3gyro.constprop.0+0x1a76>
 8018228:	eddf 6a31 	vldr	s13, [pc, #196]	; 80182f0 <kalman_3gyro.constprop.0+0x43a8>
 801822c:	eddf 4a39 	vldr	s9, [pc, #228]	; 8018314 <kalman_3gyro.constprop.0+0x43cc>
 8018230:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80182f8 <kalman_3gyro.constprop.0+0x43b0>
 8018234:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8018318 <kalman_3gyro.constprop.0+0x43d0>
 8018238:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801823c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8018240:	eea6 7a86 	vfma.f32	s14, s13, s12
 8018244:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8018300 <kalman_3gyro.constprop.0+0x43b8>
 8018248:	eef4 7ae6 	vcmpe.f32	s15, s13
 801824c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018250:	f6fd abcb 	blt.w	80159ea <kalman_3gyro.constprop.0+0x1aa2>
 8018254:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8018304 <kalman_3gyro.constprop.0+0x43bc>
 8018258:	eef4 7ac7 	vcmpe.f32	s15, s14
 801825c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018260:	f57d abcb 	bpl.w	80159fa <kalman_3gyro.constprop.0+0x1ab2>
 8018264:	eddf 6a26 	vldr	s13, [pc, #152]	; 8018300 <kalman_3gyro.constprop.0+0x43b8>
 8018268:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801826c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8018270:	ee66 6a87 	vmul.f32	s13, s13, s14
 8018274:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8018278:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801827c:	eea6 7a86 	vfma.f32	s14, s13, s12
 8018280:	eddf 6a21 	vldr	s13, [pc, #132]	; 8018308 <kalman_3gyro.constprop.0+0x43c0>
 8018284:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801828c:	f6fd abcb 	blt.w	8015a26 <kalman_3gyro.constprop.0+0x1ade>
 8018290:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801829c:	f57d abca 	bpl.w	8015a34 <kalman_3gyro.constprop.0+0x1aec>
 80182a0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8018308 <kalman_3gyro.constprop.0+0x43c0>
 80182a4:	eddf 4a1d 	vldr	s9, [pc, #116]	; 801831c <kalman_3gyro.constprop.0+0x43d4>
 80182a8:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8018310 <kalman_3gyro.constprop.0+0x43c8>
 80182ac:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8018320 <kalman_3gyro.constprop.0+0x43d8>
 80182b0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80182b4:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80182b8:	eea6 7a86 	vfma.f32	s14, s13, s12
 80182bc:	f7fd bbc8 	b.w	8015a50 <kalman_3gyro.constprop.0+0x1b08>
 80182c0:	9b01      	ldr	r3, [sp, #4]
 80182c2:	e63d      	b.n	8017f40 <kalman_3gyro.constprop.0+0x3ff8>
 80182c4:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 80182c8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80182cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182d0:	da2c      	bge.n	801832c <kalman_3gyro.constprop.0+0x43e4>
 80182d2:	ed9f ba14 	vldr	s22, [pc, #80]	; 8018324 <kalman_3gyro.constprop.0+0x43dc>
 80182d6:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 80182da:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80182de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182e2:	db3b      	blt.n	801835c <kalman_3gyro.constprop.0+0x4414>
 80182e4:	e386      	b.n	80189f4 <kalman_3gyro.constprop.0+0x4aac>
 80182e6:	bf00      	nop
 80182e8:	40a00000 	.word	0x40a00000
 80182ec:	3cf5c28f 	.word	0x3cf5c28f
 80182f0:	3c75c28f 	.word	0x3c75c28f
 80182f4:	3dccccd0 	.word	0x3dccccd0
 80182f8:	42855556 	.word	0x42855556
 80182fc:	3f866666 	.word	0x3f866666
 8018300:	3d4ccccd 	.word	0x3d4ccccd
 8018304:	3dcccccd 	.word	0x3dcccccd
 8018308:	3e4ccccd 	.word	0x3e4ccccd
 801830c:	42200000 	.word	0x42200000
 8018310:	40555555 	.word	0x40555555
 8018314:	3ecccccc 	.word	0x3ecccccc
 8018318:	3fcccccd 	.word	0x3fcccccd
 801831c:	43f00000 	.word	0x43f00000
 8018320:	42ee0000 	.word	0x42ee0000
 8018324:	00000000 	.word	0x00000000
 8018328:	eeb0 7a64 	vmov.f32	s14, s9
 801832c:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 8018330:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8018334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018338:	f140 8358 	bpl.w	80189ec <kalman_3gyro.constprop.0+0x4aa4>
 801833c:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 8018340:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 8018344:	ee38 3a47 	vsub.f32	s6, s16, s14
 8018348:	ee34 4a63 	vsub.f32	s8, s8, s7
 801834c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8018350:	ee64 4a03 	vmul.f32	s9, s8, s6
 8018354:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8018358:	ee3b ba23 	vadd.f32	s22, s22, s7
 801835c:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 8018360:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8018364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018368:	f2c0 835c 	blt.w	8018a24 <kalman_3gyro.constprop.0+0x4adc>
 801836c:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 8018370:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8018374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018378:	f140 8401 	bpl.w	8018b7e <kalman_3gyro.constprop.0+0x4c36>
 801837c:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 8018380:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 8018384:	ee38 3a47 	vsub.f32	s6, s16, s14
 8018388:	ee34 4a63 	vsub.f32	s8, s8, s7
 801838c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8018390:	ee64 4a03 	vmul.f32	s9, s8, s6
 8018394:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8018398:	ee3b ba23 	vadd.f32	s22, s22, s7
 801839c:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 80183a0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80183a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183a8:	f200 835c 	bhi.w	8018a64 <kalman_3gyro.constprop.0+0x4b1c>
 80183ac:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 80183b0:	eef4 4ac8 	vcmpe.f32	s9, s16
 80183b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183b8:	f340 83e7 	ble.w	8018b8a <kalman_3gyro.constprop.0+0x4c42>
 80183bc:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 80183c0:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 80183c4:	ee38 3a47 	vsub.f32	s6, s16, s14
 80183c8:	ee34 4a63 	vsub.f32	s8, s8, s7
 80183cc:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80183d0:	ee64 4a03 	vmul.f32	s9, s8, s6
 80183d4:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80183d8:	ee3b ba23 	vadd.f32	s22, s22, s7
 80183dc:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 80183e0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80183e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183e8:	f200 835c 	bhi.w	8018aa4 <kalman_3gyro.constprop.0+0x4b5c>
 80183ec:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 80183f0:	eef4 4ac8 	vcmpe.f32	s9, s16
 80183f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183f8:	f340 83b3 	ble.w	8018b62 <kalman_3gyro.constprop.0+0x4c1a>
 80183fc:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 8018400:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 8018404:	ee38 3a47 	vsub.f32	s6, s16, s14
 8018408:	ee34 4a63 	vsub.f32	s8, s8, s7
 801840c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8018410:	ee64 4a03 	vmul.f32	s9, s8, s6
 8018414:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8018418:	ee3b ba23 	vadd.f32	s22, s22, s7
 801841c:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 8018420:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8018424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018428:	f2c0 835b 	blt.w	8018ae2 <kalman_3gyro.constprop.0+0x4b9a>
 801842c:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8018430:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8018434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018438:	f140 835b 	bpl.w	8018af2 <kalman_3gyro.constprop.0+0x4baa>
 801843c:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 8018440:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8018444:	ee38 3a47 	vsub.f32	s6, s16, s14
 8018448:	ee34 4a63 	vsub.f32	s8, s8, s7
 801844c:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8018450:	ee24 7a03 	vmul.f32	s14, s8, s6
 8018454:	ee87 ba24 	vdiv.f32	s22, s14, s9
 8018458:	ee3b ba23 	vadd.f32	s22, s22, s7
 801845c:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 8018460:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8018464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018468:	f6fc af46 	blt.w	80152f8 <kalman_3gyro.constprop.0+0x13b0>
 801846c:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8018470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018474:	f57c af40 	bpl.w	80152f8 <kalman_3gyro.constprop.0+0x13b0>
 8018478:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 801847c:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 8018480:	ee78 3a47 	vsub.f32	s7, s16, s14
 8018484:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8018488:	ee35 7a47 	vsub.f32	s14, s10, s14
 801848c:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8018490:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8018494:	ee3b ba04 	vadd.f32	s22, s22, s8
 8018498:	f7fc bf2e 	b.w	80152f8 <kalman_3gyro.constprop.0+0x13b0>
 801849c:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80184a0:	eef4 7acd 	vcmpe.f32	s15, s26
 80184a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184a8:	dd2c      	ble.n	8018504 <kalman_3gyro.constprop.0+0x45bc>
 80184aa:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 80184ae:	eef4 7aeb 	vcmpe.f32	s15, s23
 80184b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184b6:	dd25      	ble.n	8018504 <kalman_3gyro.constprop.0+0x45bc>
 80184b8:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 80184bc:	eef4 7aec 	vcmpe.f32	s15, s25
 80184c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184c4:	dd1e      	ble.n	8018504 <kalman_3gyro.constprop.0+0x45bc>
 80184c6:	eddd 5a03 	vldr	s11, [sp, #12]
 80184ca:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80184ce:	eef4 5ae7 	vcmpe.f32	s11, s15
 80184d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184d6:	d515      	bpl.n	8018504 <kalman_3gyro.constprop.0+0x45bc>
 80184d8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80184dc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80184e0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80184e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80184e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184ec:	d50a      	bpl.n	8018504 <kalman_3gyro.constprop.0+0x45bc>
 80184ee:	2300      	movs	r3, #0
 80184f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80184f4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80184f8:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 80184fc:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8018500:	f7fd bfb8 	b.w	8016474 <kalman_3gyro.constprop.0+0x252c>
 8018504:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 8018508:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801850c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018510:	dd0b      	ble.n	801852a <kalman_3gyro.constprop.0+0x45e2>
 8018512:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8018516:	eef4 7ac7 	vcmpe.f32	s15, s14
 801851a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801851e:	f100 843f 	bmi.w	8018da0 <kalman_3gyro.constprop.0+0x4e58>
 8018522:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8018526:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801852a:	2300      	movs	r3, #0
 801852c:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8018530:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8018534:	f7fd bf9e 	b.w	8016474 <kalman_3gyro.constprop.0+0x252c>
 8018538:	2301      	movs	r3, #1
 801853a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801853e:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 8018542:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 8018546:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 801854a:	edd2 5a00 	vldr	s11, [r2]
 801854e:	ed93 7a00 	vldr	s14, [r3]
 8018552:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 8018556:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 801855a:	ed92 5a00 	vldr	s10, [r2]
 801855e:	edd3 6a00 	vldr	s13, [r3]
 8018562:	ee25 4aa5 	vmul.f32	s8, s11, s11
 8018566:	ee67 4a07 	vmul.f32	s9, s14, s14
 801856a:	eea5 4a05 	vfma.f32	s8, s10, s10
 801856e:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 8018572:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 8018576:	eee6 4aa6 	vfma.f32	s9, s13, s13
 801857a:	aa5d      	add	r2, sp, #372	; 0x174
 801857c:	a833      	add	r0, sp, #204	; 0xcc
 801857e:	ed91 6a00 	vldr	s12, [r1]
 8018582:	edd3 7a00 	vldr	s15, [r3]
 8018586:	eea6 4a06 	vfma.f32	s8, s12, s12
 801858a:	a92d      	add	r1, sp, #180	; 0xb4
 801858c:	ad5d      	add	r5, sp, #372	; 0x174
 801858e:	eee7 4aa7 	vfma.f32	s9, s15, s15
 8018592:	ac66      	add	r4, sp, #408	; 0x198
 8018594:	eef1 2ac4 	vsqrt.f32	s5, s8
 8018598:	eeb1 3ae4 	vsqrt.f32	s6, s9
 801859c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80185a0:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 80185a4:	eec3 4a83 	vdiv.f32	s9, s7, s6
 80185a8:	ee25 5a04 	vmul.f32	s10, s10, s8
 80185ac:	ee27 7a24 	vmul.f32	s14, s14, s9
 80185b0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80185b4:	ee65 5a84 	vmul.f32	s11, s11, s8
 80185b8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80185bc:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80185c0:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 80185c4:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 80185c8:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 80185cc:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 80185d0:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 80185d4:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 80185d8:	f7fa fc1a 	bl	8012e10 <getRotationMatrix>
 80185dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80185de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80185e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80185e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80185e4:	682e      	ldr	r6, [r5, #0]
 80185e6:	6026      	str	r6, [r4, #0]
 80185e8:	ad66      	add	r5, sp, #408	; 0x198
 80185ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80185ec:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 80185f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80185f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80185f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80185f6:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 80185fa:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 80185fe:	6026      	str	r6, [r4, #0]
 8018600:	eef0 7ae7 	vabs.f32	s15, s15
 8018604:	eeb0 7ac7 	vabs.f32	s14, s14
 8018608:	eef4 7ac7 	vcmpe.f32	s15, s14
 801860c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018610:	f100 81df 	bmi.w	80189d2 <kalman_3gyro.constprop.0+0x4a8a>
 8018614:	2304      	movs	r3, #4
 8018616:	9302      	str	r3, [sp, #8]
 8018618:	461a      	mov	r2, r3
 801861a:	2307      	movs	r3, #7
 801861c:	2003      	movs	r0, #3
 801861e:	2706      	movs	r7, #6
 8018620:	9304      	str	r3, [sp, #16]
 8018622:	f04f 0e01 	mov.w	lr, #1
 8018626:	2500      	movs	r5, #0
 8018628:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 801862c:	eeb0 7ac7 	vabs.f32	s14, s14
 8018630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018638:	f340 8296 	ble.w	8018b68 <kalman_3gyro.constprop.0+0x4c20>
 801863c:	2304      	movs	r3, #4
 801863e:	9302      	str	r3, [sp, #8]
 8018640:	461a      	mov	r2, r3
 8018642:	2306      	movs	r3, #6
 8018644:	2708      	movs	r7, #8
 8018646:	9306      	str	r3, [sp, #24]
 8018648:	2307      	movs	r3, #7
 801864a:	9707      	str	r7, [sp, #28]
 801864c:	9304      	str	r3, [sp, #16]
 801864e:	2005      	movs	r0, #5
 8018650:	f04f 0c00 	mov.w	ip, #0
 8018654:	f04f 0e01 	mov.w	lr, #1
 8018658:	2502      	movs	r5, #2
 801865a:	ab66      	add	r3, sp, #408	; 0x198
 801865c:	441a      	add	r2, r3
 801865e:	9b07      	ldr	r3, [sp, #28]
 8018660:	edd2 6a00 	vldr	s13, [r2]
 8018664:	9c02      	ldr	r4, [sp, #8]
 8018666:	a966      	add	r1, sp, #408	; 0x198
 8018668:	440b      	add	r3, r1
 801866a:	ed93 7a00 	vldr	s14, [r3]
 801866e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018672:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8018676:	eb02 068c 	add.w	r6, r2, ip, lsl #2
 801867a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801867e:	9207      	str	r2, [sp, #28]
 8018680:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8018684:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8018688:	920d      	str	r2, [sp, #52]	; 0x34
 801868a:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 801868e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8018692:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018694:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8018698:	0080      	lsls	r0, r0, #2
 801869a:	9011      	str	r0, [sp, #68]	; 0x44
 801869c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80186a0:	900e      	str	r0, [sp, #56]	; 0x38
 80186a2:	00a0      	lsls	r0, r4, #2
 80186a4:	9005      	str	r0, [sp, #20]
 80186a6:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 80186aa:	00bf      	lsls	r7, r7, #2
 80186ac:	9712      	str	r7, [sp, #72]	; 0x48
 80186ae:	9f04      	ldr	r7, [sp, #16]
 80186b0:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 80186b4:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 80186b8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80186bc:	9907      	ldr	r1, [sp, #28]
 80186be:	edc3 7a00 	vstr	s15, [r3]
 80186c2:	ed96 7a00 	vldr	s14, [r6]
 80186c6:	edd1 7a00 	vldr	s15, [r1]
 80186ca:	930c      	str	r3, [sp, #48]	; 0x30
 80186cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80186d0:	9b06      	ldr	r3, [sp, #24]
 80186d2:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 80186d6:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80186da:	009b      	lsls	r3, r3, #2
 80186dc:	9306      	str	r3, [sp, #24]
 80186de:	00ab      	lsls	r3, r5, #2
 80186e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80186e2:	9b02      	ldr	r3, [sp, #8]
 80186e4:	009b      	lsls	r3, r3, #2
 80186e6:	9307      	str	r3, [sp, #28]
 80186e8:	9b04      	ldr	r3, [sp, #16]
 80186ea:	edc6 6a00 	vstr	s13, [r6]
 80186ee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80186f0:	edd2 7a00 	vldr	s15, [r2]
 80186f4:	ed96 6a00 	vldr	s12, [r6]
 80186f8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80186fa:	ed96 7a00 	vldr	s14, [r6]
 80186fe:	eee6 7a47 	vfms.f32	s15, s12, s14
 8018702:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8018706:	940a      	str	r4, [sp, #40]	; 0x28
 8018708:	009b      	lsls	r3, r3, #2
 801870a:	ea4f 048c 	mov.w	r4, ip, lsl #2
 801870e:	940b      	str	r4, [sp, #44]	; 0x2c
 8018710:	9309      	str	r3, [sp, #36]	; 0x24
 8018712:	edc2 7a00 	vstr	s15, [r2]
 8018716:	ed96 7a00 	vldr	s14, [r6]
 801871a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801871c:	edd6 7a00 	vldr	s15, [r6]
 8018720:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8018724:	edc6 7a00 	vstr	s15, [r6]
 8018728:	edd0 5a00 	vldr	s11, [r0]
 801872c:	ed97 7a00 	vldr	s14, [r7]
 8018730:	eea6 7a65 	vfms.f32	s14, s12, s11
 8018734:	eef0 7ae7 	vabs.f32	s15, s15
 8018738:	ed87 7a00 	vstr	s14, [r7]
 801873c:	ed90 6a00 	vldr	s12, [r0]
 8018740:	ed91 7a00 	vldr	s14, [r1]
 8018744:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8018748:	ed81 7a00 	vstr	s14, [r1]
 801874c:	ed92 7a00 	vldr	s14, [r2]
 8018750:	eeb0 7ac7 	vabs.f32	s14, s14
 8018754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801875c:	dd12      	ble.n	8018784 <kalman_3gyro.constprop.0+0x483c>
 801875e:	4673      	mov	r3, lr
 8018760:	46e6      	mov	lr, ip
 8018762:	469c      	mov	ip, r3
 8018764:	9b02      	ldr	r3, [sp, #8]
 8018766:	9a06      	ldr	r2, [sp, #24]
 8018768:	9209      	str	r2, [sp, #36]	; 0x24
 801876a:	009a      	lsls	r2, r3, #2
 801876c:	9b04      	ldr	r3, [sp, #16]
 801876e:	9805      	ldr	r0, [sp, #20]
 8018770:	9007      	str	r0, [sp, #28]
 8018772:	009b      	lsls	r3, r3, #2
 8018774:	9306      	str	r3, [sp, #24]
 8018776:	ea4f 038c 	mov.w	r3, ip, lsl #2
 801877a:	930b      	str	r3, [sp, #44]	; 0x2c
 801877c:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8018780:	9205      	str	r2, [sp, #20]
 8018782:	930a      	str	r3, [sp, #40]	; 0x28
 8018784:	9b05      	ldr	r3, [sp, #20]
 8018786:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 801878a:	4413      	add	r3, r2
 801878c:	461c      	mov	r4, r3
 801878e:	9b07      	ldr	r3, [sp, #28]
 8018790:	ed94 7a00 	vldr	s14, [r4]
 8018794:	4413      	add	r3, r2
 8018796:	edd3 7a00 	vldr	s15, [r3]
 801879a:	ee87 2a27 	vdiv.f32	s4, s14, s15
 801879e:	4619      	mov	r1, r3
 80187a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187a2:	4413      	add	r3, r2
 80187a4:	9a06      	ldr	r2, [sp, #24]
 80187a6:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 80187aa:	4402      	add	r2, r0
 80187ac:	4610      	mov	r0, r2
 80187ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80187b0:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 80187b4:	4432      	add	r2, r6
 80187b6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80187b8:	ed84 2a00 	vstr	s4, [r4]
 80187bc:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 80187c0:	443e      	add	r6, r7
 80187c2:	9605      	str	r6, [sp, #20]
 80187c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80187c6:	9204      	str	r2, [sp, #16]
 80187c8:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 80187cc:	19ba      	adds	r2, r7, r6
 80187ce:	ed93 7a00 	vldr	s14, [r3]
 80187d2:	edd0 7a00 	vldr	s15, [r0]
 80187d6:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 80187da:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 80187de:	edd2 3a00 	vldr	s7, [r2]
 80187e2:	00aa      	lsls	r2, r5, #2
 80187e4:	eee2 7a47 	vfms.f32	s15, s4, s14
 80187e8:	18a2      	adds	r2, r4, r2
 80187ea:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 80187ee:	ed92 5a00 	vldr	s10, [r2]
 80187f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80187f4:	edc0 7a00 	vstr	s15, [r0]
 80187f8:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 80187fc:	4437      	add	r7, r6
 80187fe:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 8018802:	9702      	str	r7, [sp, #8]
 8018804:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 8018808:	18a7      	adds	r7, r4, r2
 801880a:	4634      	mov	r4, r6
 801880c:	1882      	adds	r2, r0, r2
 801880e:	f5a4 60cc 	sub.w	r0, r4, #1632	; 0x660
 8018812:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8018816:	9007      	str	r0, [sp, #28]
 8018818:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 801881c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801881e:	ed92 0a00 	vldr	s0, [r2]
 8018822:	9a04      	ldr	r2, [sp, #16]
 8018824:	ed93 1a00 	vldr	s2, [r3]
 8018828:	edd2 1a00 	vldr	s3, [r2]
 801882c:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 8018830:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8018834:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8018838:	1820      	adds	r0, r4, r0
 801883a:	46ae      	mov	lr, r5
 801883c:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8018840:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 8018844:	f2a5 656c 	subw	r5, r5, #1644	; 0x66c
 8018848:	9006      	str	r0, [sp, #24]
 801884a:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 801884e:	eb04 008c 	add.w	r0, r4, ip, lsl #2
 8018852:	f5a0 6ccc 	sub.w	ip, r0, #1632	; 0x660
 8018856:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 801885a:	aa5d      	add	r2, sp, #372	; 0x174
 801885c:	edd1 7a00 	vldr	s15, [r1]
 8018860:	9902      	ldr	r1, [sp, #8]
 8018862:	edd6 5a00 	vldr	s11, [r6]
 8018866:	ed91 8a00 	vldr	s16, [r1]
 801886a:	edd7 4a00 	vldr	s9, [r7]
 801886e:	ed95 6a00 	vldr	s12, [r5]
 8018872:	9b07      	ldr	r3, [sp, #28]
 8018874:	ed9c 3a00 	vldr	s6, [ip]
 8018878:	ed93 7a00 	vldr	s14, [r3]
 801887c:	9e05      	ldr	r6, [sp, #20]
 801887e:	f2a0 636c 	subw	r3, r0, #1644	; 0x66c
 8018882:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 8018886:	4610      	mov	r0, r2
 8018888:	a93e      	add	r1, sp, #248	; 0xf8
 801888a:	edd3 6a00 	vldr	s13, [r3]
 801888e:	edde 7a00 	vldr	s15, [lr]
 8018892:	9b06      	ldr	r3, [sp, #24]
 8018894:	eee8 3a45 	vfms.f32	s7, s16, s10
 8018898:	eee0 4a45 	vfms.f32	s9, s0, s10
 801889c:	eea8 6a65 	vfms.f32	s12, s16, s11
 80188a0:	eee7 7a48 	vfms.f32	s15, s14, s16
 80188a4:	eee0 6a65 	vfms.f32	s13, s0, s11
 80188a8:	eea7 3a40 	vfms.f32	s6, s14, s0
 80188ac:	ed93 0a00 	vldr	s0, [r3]
 80188b0:	eea2 3a67 	vfms.f32	s6, s4, s15
 80188b4:	eee3 4ac2 	vfms.f32	s9, s7, s4
 80188b8:	eee2 6a46 	vfms.f32	s13, s4, s12
 80188bc:	ee80 2a80 	vdiv.f32	s4, s1, s0
 80188c0:	ee64 6a26 	vmul.f32	s13, s8, s13
 80188c4:	ee64 4a24 	vmul.f32	s9, s8, s9
 80188c8:	ee24 4a03 	vmul.f32	s8, s8, s6
 80188cc:	eea1 6a66 	vfms.f32	s12, s2, s13
 80188d0:	eee4 3ac1 	vfms.f32	s7, s9, s2
 80188d4:	eee4 7a41 	vfms.f32	s15, s8, s2
 80188d8:	eee1 5ae6 	vfms.f32	s11, s3, s13
 80188dc:	eea4 5ae1 	vfms.f32	s10, s9, s3
 80188e0:	eea4 7a61 	vfms.f32	s14, s8, s3
 80188e4:	ed96 3a00 	vldr	s6, [r6]
 80188e8:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 80188ec:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80188f0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80188f4:	ee22 6a86 	vmul.f32	s12, s5, s12
 80188f8:	eea7 7ac3 	vfms.f32	s14, s15, s6
 80188fc:	eea3 5ac3 	vfms.f32	s10, s7, s6
 8018900:	eee3 5a46 	vfms.f32	s11, s6, s12
 8018904:	ee27 7a02 	vmul.f32	s14, s14, s4
 8018908:	ee22 5a05 	vmul.f32	s10, s4, s10
 801890c:	ee62 5a25 	vmul.f32	s11, s4, s11
 8018910:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 8018914:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 8018918:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 801891c:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 8018920:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 8018924:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 8018928:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 801892c:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 8018930:	f7fa fb0e 	bl	8012f50 <b_dcm2q>
 8018934:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 8018938:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 801893c:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 8018940:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 8018944:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8018948:	ee37 7a07 	vadd.f32	s14, s14, s14
 801894c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018950:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8018954:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 8018958:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 801895c:	2b00      	cmp	r3, #0
 801895e:	f43d ad8c 	beq.w	801647a <kalman_3gyro.constprop.0+0x2532>
 8018962:	2200      	movs	r2, #0
 8018964:	9b01      	ldr	r3, [sp, #4]
 8018966:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 801896a:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 801896e:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 8018972:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8018976:	f7fd be08 	b.w	801658a <kalman_3gyro.constprop.0+0x2642>
 801897a:	edd3 7a02 	vldr	s15, [r3, #8]
 801897e:	ed93 7a01 	vldr	s14, [r3, #4]
 8018982:	edd3 6a03 	vldr	s13, [r3, #12]
 8018986:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801898a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801898e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8018992:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8018996:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801899a:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 801899e:	f7ff bb11 	b.w	8017fc4 <kalman_3gyro.constprop.0+0x407c>
 80189a2:	eeb0 7a64 	vmov.f32	s14, s9
 80189a6:	f7fc bcf7 	b.w	8015398 <kalman_3gyro.constprop.0+0x1450>
 80189aa:	eeb0 7a64 	vmov.f32	s14, s9
 80189ae:	f7ff bb93 	b.w	80180d8 <kalman_3gyro.constprop.0+0x4190>
 80189b2:	eeb0 7a64 	vmov.f32	s14, s9
 80189b6:	f7ff bb4f 	b.w	8018058 <kalman_3gyro.constprop.0+0x4110>
 80189ba:	eeb0 7a64 	vmov.f32	s14, s9
 80189be:	f7fc bd0b 	b.w	80153d8 <kalman_3gyro.constprop.0+0x1490>
 80189c2:	eeb0 7a64 	vmov.f32	s14, s9
 80189c6:	f7ff bb67 	b.w	8018098 <kalman_3gyro.constprop.0+0x4150>
 80189ca:	eeb0 7a64 	vmov.f32	s14, s9
 80189ce:	f7fc bd23 	b.w	8015418 <kalman_3gyro.constprop.0+0x14d0>
 80189d2:	2303      	movs	r3, #3
 80189d4:	2200      	movs	r2, #0
 80189d6:	2004      	movs	r0, #4
 80189d8:	9302      	str	r3, [sp, #8]
 80189da:	2306      	movs	r3, #6
 80189dc:	9007      	str	r0, [sp, #28]
 80189de:	eef0 7a47 	vmov.f32	s15, s14
 80189e2:	4696      	mov	lr, r2
 80189e4:	2707      	movs	r7, #7
 80189e6:	9304      	str	r3, [sp, #16]
 80189e8:	2501      	movs	r5, #1
 80189ea:	e61d      	b.n	8018628 <kalman_3gyro.constprop.0+0x46e0>
 80189ec:	ed9f bae2 	vldr	s22, [pc, #904]	; 8018d78 <kalman_3gyro.constprop.0+0x4e30>
 80189f0:	eeb0 7a64 	vmov.f32	s14, s9
 80189f4:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 80189f8:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80189fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a00:	f140 80b9 	bpl.w	8018b76 <kalman_3gyro.constprop.0+0x4c2e>
 8018a04:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 8018a08:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 8018a0c:	ee38 3a47 	vsub.f32	s6, s16, s14
 8018a10:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018a14:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8018a18:	ee64 4a03 	vmul.f32	s9, s8, s6
 8018a1c:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8018a20:	ee3b ba23 	vadd.f32	s22, s22, s7
 8018a24:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 8018a28:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8018a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a30:	f6ff acb4 	blt.w	801839c <kalman_3gyro.constprop.0+0x4454>
 8018a34:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 8018a38:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8018a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a40:	f140 80a0 	bpl.w	8018b84 <kalman_3gyro.constprop.0+0x4c3c>
 8018a44:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 8018a48:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 8018a4c:	ee38 3a47 	vsub.f32	s6, s16, s14
 8018a50:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018a54:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8018a58:	ee64 4a03 	vmul.f32	s9, s8, s6
 8018a5c:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8018a60:	ee3b ba23 	vadd.f32	s22, s22, s7
 8018a64:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 8018a68:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8018a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a70:	f63f acb4 	bhi.w	80183dc <kalman_3gyro.constprop.0+0x4494>
 8018a74:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 8018a78:	eef4 4ac8 	vcmpe.f32	s9, s16
 8018a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a80:	f340 8086 	ble.w	8018b90 <kalman_3gyro.constprop.0+0x4c48>
 8018a84:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 8018a88:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 8018a8c:	ee38 3a47 	vsub.f32	s6, s16, s14
 8018a90:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018a94:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8018a98:	ee64 4a03 	vmul.f32	s9, s8, s6
 8018a9c:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8018aa0:	ee3b ba23 	vadd.f32	s22, s22, s7
 8018aa4:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 8018aa8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8018aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ab0:	f63f acb4 	bhi.w	801841c <kalman_3gyro.constprop.0+0x44d4>
 8018ab4:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 8018ab8:	eef4 4ac8 	vcmpe.f32	s9, s16
 8018abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ac0:	dd69      	ble.n	8018b96 <kalman_3gyro.constprop.0+0x4c4e>
 8018ac2:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 8018ac6:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 8018aca:	ee38 3a47 	vsub.f32	s6, s16, s14
 8018ace:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018ad2:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8018ad6:	ee64 4a03 	vmul.f32	s9, s8, s6
 8018ada:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8018ade:	ee3b ba23 	vadd.f32	s22, s22, s7
 8018ae2:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8018ae6:	eef4 4ac8 	vcmpe.f32	s9, s16
 8018aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aee:	f63f acb5 	bhi.w	801845c <kalman_3gyro.constprop.0+0x4514>
 8018af2:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 8018af6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8018afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018afe:	f77f acb5 	ble.w	801846c <kalman_3gyro.constprop.0+0x4524>
 8018b02:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8018b06:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 8018b0a:	ee78 3a64 	vsub.f32	s7, s16, s9
 8018b0e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8018b12:	ee37 7a64 	vsub.f32	s14, s14, s9
 8018b16:	ee25 5a23 	vmul.f32	s10, s10, s7
 8018b1a:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8018b1e:	ee3b ba04 	vadd.f32	s22, s22, s8
 8018b22:	f7fc bbe9 	b.w	80152f8 <kalman_3gyro.constprop.0+0x13b0>
 8018b26:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8018b2a:	eddf 7a94 	vldr	s15, [pc, #592]	; 8018d7c <kalman_3gyro.constprop.0+0x4e34>
 8018b2e:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8018d80 <kalman_3gyro.constprop.0+0x4e38>
 8018b32:	3301      	adds	r3, #1
 8018b34:	b29b      	uxth	r3, r3
 8018b36:	2b31      	cmp	r3, #49	; 0x31
 8018b38:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8018b3c:	bf98      	it	ls
 8018b3e:	eef0 7a47 	vmovls.f32	s15, s14
 8018b42:	f7fd bc89 	b.w	8016458 <kalman_3gyro.constprop.0+0x2510>
 8018b46:	2a0a      	cmp	r2, #10
 8018b48:	d02c      	beq.n	8018ba4 <kalman_3gyro.constprop.0+0x4c5c>
 8018b4a:	2100      	movs	r1, #0
 8018b4c:	3201      	adds	r2, #1
 8018b4e:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8018b52:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8018b56:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8018b5a:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 8018b5e:	f7fd bd14 	b.w	801658a <kalman_3gyro.constprop.0+0x2642>
 8018b62:	eeb0 7a64 	vmov.f32	s14, s9
 8018b66:	e7a5      	b.n	8018ab4 <kalman_3gyro.constprop.0+0x4b6c>
 8018b68:	2308      	movs	r3, #8
 8018b6a:	9306      	str	r3, [sp, #24]
 8018b6c:	2305      	movs	r3, #5
 8018b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8018b70:	f04f 0c02 	mov.w	ip, #2
 8018b74:	e571      	b.n	801865a <kalman_3gyro.constprop.0+0x4712>
 8018b76:	eeb0 7a64 	vmov.f32	s14, s9
 8018b7a:	f7ff bbf7 	b.w	801836c <kalman_3gyro.constprop.0+0x4424>
 8018b7e:	eeb0 7a64 	vmov.f32	s14, s9
 8018b82:	e757      	b.n	8018a34 <kalman_3gyro.constprop.0+0x4aec>
 8018b84:	eeb0 7a64 	vmov.f32	s14, s9
 8018b88:	e410      	b.n	80183ac <kalman_3gyro.constprop.0+0x4464>
 8018b8a:	eeb0 7a64 	vmov.f32	s14, s9
 8018b8e:	e771      	b.n	8018a74 <kalman_3gyro.constprop.0+0x4b2c>
 8018b90:	eeb0 7a64 	vmov.f32	s14, s9
 8018b94:	e42a      	b.n	80183ec <kalman_3gyro.constprop.0+0x44a4>
 8018b96:	eeb0 7a64 	vmov.f32	s14, s9
 8018b9a:	e447      	b.n	801842c <kalman_3gyro.constprop.0+0x44e4>
 8018b9c:	ed9f ea76 	vldr	s28, [pc, #472]	; 8018d78 <kalman_3gyro.constprop.0+0x4e30>
 8018ba0:	f7fc bbda 	b.w	8015358 <kalman_3gyro.constprop.0+0x1410>
 8018ba4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018ba6:	ed94 3a00 	vldr	s6, [r4]
 8018baa:	edd2 5a00 	vldr	s11, [r2]
 8018bae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018bb0:	edd0 3a00 	vldr	s7, [r0]
 8018bb4:	ed92 1a00 	vldr	s2, [r2]
 8018bb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018bba:	ed91 4a00 	vldr	s8, [r1]
 8018bbe:	edd2 4a00 	vldr	s9, [r2]
 8018bc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018bc4:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 8018bc8:	ed92 2a00 	vldr	s4, [r2]
 8018bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018bce:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 8018bd2:	edd2 7a00 	vldr	s15, [r2]
 8018bd6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018bd8:	edd2 2a00 	vldr	s5, [r2]
 8018bdc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018bde:	ee75 5a81 	vadd.f32	s11, s11, s2
 8018be2:	edd2 1a00 	vldr	s3, [r2]
 8018be6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018be8:	ee74 4a82 	vadd.f32	s9, s9, s4
 8018bec:	ee75 5a83 	vadd.f32	s11, s11, s6
 8018bf0:	ed92 3a00 	vldr	s6, [r2]
 8018bf4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018bf6:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8018bfa:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8018bfe:	edd2 3a00 	vldr	s7, [r2]
 8018c02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018c04:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018c08:	ed92 4a00 	vldr	s8, [r2]
 8018c0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018c0e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8018c12:	ed92 2a00 	vldr	s4, [r2]
 8018c16:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018c18:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 8018c1c:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8018c20:	edd2 2a00 	vldr	s5, [r2]
 8018c24:	ed91 3a00 	vldr	s6, [r1]
 8018c28:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018c2c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8018c30:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 8018c34:	ee75 5a84 	vadd.f32	s11, s11, s8
 8018c38:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 8018c3c:	ed90 4a00 	vldr	s8, [r0]
 8018c40:	edd2 3a00 	vldr	s7, [r2]
 8018c44:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8018c48:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 8018c4c:	ed91 2a00 	vldr	s4, [r1]
 8018c50:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8018c54:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8018c58:	ee74 4a83 	vadd.f32	s9, s9, s6
 8018c5c:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 8018c60:	ee75 5a84 	vadd.f32	s11, s11, s8
 8018c64:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 8018c68:	ed90 4a00 	vldr	s8, [r0]
 8018c6c:	edd2 2a00 	vldr	s5, [r2]
 8018c70:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8018c74:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018c78:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 8018c7c:	edd1 3a00 	vldr	s7, [r1]
 8018c80:	ed90 3a00 	vldr	s6, [r0]
 8018c84:	ee74 4a82 	vadd.f32	s9, s9, s4
 8018c88:	ee75 5a84 	vadd.f32	s11, s11, s8
 8018c8c:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 8018c90:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 8018c94:	ed92 4a00 	vldr	s8, [r2]
 8018c98:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8018c9c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8018ca0:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 8018ca4:	edd0 3a00 	vldr	s7, [r0]
 8018ca8:	edd4 2a00 	vldr	s5, [r4]
 8018cac:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8018cb0:	ee75 5a83 	vadd.f32	s11, s11, s6
 8018cb4:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8018cb8:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 8018cbc:	ed91 3a00 	vldr	s6, [r1]
 8018cc0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018cc4:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8018cc8:	ed92 4a00 	vldr	s8, [r2]
 8018ccc:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 8018cd0:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 8018cd4:	edd4 3a00 	vldr	s7, [r4]
 8018cd8:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 8018cdc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8018ce0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018ce4:	ee74 4a83 	vadd.f32	s9, s9, s6
 8018ce8:	ed91 4a00 	vldr	s8, [r1]
 8018cec:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8018cf0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018cf4:	ee64 4a85 	vmul.f32	s9, s9, s10
 8018cf8:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 8018cfc:	ee65 5a85 	vmul.f32	s11, s11, s10
 8018d00:	edc1 4a00 	vstr	s9, [r1]
 8018d04:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018d08:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8018d0c:	edc1 5a00 	vstr	s11, [r1]
 8018d10:	f240 1501 	movw	r5, #257	; 0x101
 8018d14:	3201      	adds	r2, #1
 8018d16:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 8018d1a:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 8018d1e:	edc1 7a00 	vstr	s15, [r1]
 8018d22:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8018d26:	2800      	cmp	r0, #0
 8018d28:	f43d ac2f 	beq.w	801658a <kalman_3gyro.constprop.0+0x2642>
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 8018d32:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 8018d36:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 8018d3a:	f88b 2001 	strb.w	r2, [fp, #1]
 8018d3e:	f7fd bc24 	b.w	801658a <kalman_3gyro.constprop.0+0x2642>
 8018d42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8018d46:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8018d4a:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8018d4e:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8018d52:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8018d56:	f7fd bb8d 	b.w	8016474 <kalman_3gyro.constprop.0+0x252c>
 8018d5a:	2a00      	cmp	r2, #0
 8018d5c:	f340 80c2 	ble.w	8018ee4 <kalman_3gyro.constprop.0+0x4f9c>
 8018d60:	2300      	movs	r3, #0
 8018d62:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8018d66:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8018d6a:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8018d6e:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8018d72:	f7fd b83c 	b.w	8015dee <kalman_3gyro.constprop.0+0x1ea6>
 8018d76:	bf00      	nop
 8018d78:	00000000 	.word	0x00000000
 8018d7c:	3e4cccce 	.word	0x3e4cccce
 8018d80:	3eaaaaab 	.word	0x3eaaaaab
 8018d84:	3e999998 	.word	0x3e999998
 8018d88:	3f99999a 	.word	0x3f99999a
 8018d8c:	3dccccd0 	.word	0x3dccccd0
 8018d90:	3f8ccccd 	.word	0x3f8ccccd
 8018d94:	3e4ccccd 	.word	0x3e4ccccd
 8018d98:	3d088889 	.word	0x3d088889
 8018d9c:	3d0d3dcb 	.word	0x3d0d3dcb
 8018da0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dac:	d55b      	bpl.n	8018e66 <kalman_3gyro.constprop.0+0x4f1e>
 8018dae:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8018d8c <kalman_3gyro.constprop.0+0x4e44>
 8018db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018db6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8018dba:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8018dbe:	eef0 5a66 	vmov.f32	s11, s13
 8018dc2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8018dc6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dce:	eeb0 7a65 	vmov.f32	s14, s11
 8018dd2:	db5b      	blt.n	8018e8c <kalman_3gyro.constprop.0+0x4f44>
 8018dd4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8018dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018de0:	d55b      	bpl.n	8018e9a <kalman_3gyro.constprop.0+0x4f52>
 8018de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018de6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8018dea:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 8018d84 <kalman_3gyro.constprop.0+0x4e3c>
 8018dee:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8018d88 <kalman_3gyro.constprop.0+0x4e40>
 8018df2:	eea6 7a86 	vfma.f32	s14, s13, s12
 8018df6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8018dfa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e02:	db5b      	blt.n	8018ebc <kalman_3gyro.constprop.0+0x4f74>
 8018e04:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8018e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e10:	d55b      	bpl.n	8018eca <kalman_3gyro.constprop.0+0x4f82>
 8018e12:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8018e16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018e1a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8018e1e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8018e22:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018e26:	ee68 8a87 	vmul.f32	s17, s17, s14
 8018e2a:	f7ff bb7e 	b.w	801852a <kalman_3gyro.constprop.0+0x45e2>
 8018e2e:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8018e32:	2b27      	cmp	r3, #39	; 0x27
 8018e34:	f200 80c3 	bhi.w	8018fbe <kalman_3gyro.constprop.0+0x5076>
 8018e38:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8018e3c:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8018e40:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8018e44:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 8018e48:	2201      	movs	r2, #1
 8018e4a:	4413      	add	r3, r2
 8018e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018e50:	bf14      	ite	ne
 8018e52:	b29b      	uxthne	r3, r3
 8018e54:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8018e58:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8018e5c:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8018e60:	9b01      	ldr	r3, [sp, #4]
 8018e62:	f7fd bb92 	b.w	801658a <kalman_3gyro.constprop.0+0x2642>
 8018e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018e6a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e72:	d5af      	bpl.n	8018dd4 <kalman_3gyro.constprop.0+0x4e8c>
 8018e74:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8018e78:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 8018d8c <kalman_3gyro.constprop.0+0x4e44>
 8018e7c:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8018d90 <kalman_3gyro.constprop.0+0x4e48>
 8018e80:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018e84:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8018e88:	eea6 7a86 	vfma.f32	s14, s13, s12
 8018e8c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018e90:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e98:	dbad      	blt.n	8018df6 <kalman_3gyro.constprop.0+0x4eae>
 8018e9a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8018e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ea6:	d5ad      	bpl.n	8018e04 <kalman_3gyro.constprop.0+0x4ebc>
 8018ea8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018eac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8018eb0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8018eb4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8018eb8:	eea6 7a86 	vfma.f32	s14, s13, s12
 8018ebc:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8018ec0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ec8:	dbad      	blt.n	8018e26 <kalman_3gyro.constprop.0+0x4ede>
 8018eca:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8018ece:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018ed2:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8018d94 <kalman_3gyro.constprop.0+0x4e4c>
 8018ed6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018eda:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8018ede:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018ee2:	e7a0      	b.n	8018e26 <kalman_3gyro.constprop.0+0x4ede>
 8018ee4:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8018ee8:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8018eec:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 8018ef0:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8018ef4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018ef8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018efc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018f00:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8018f04:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 8018f08:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 8018f0c:	f7fc bf6f 	b.w	8015dee <kalman_3gyro.constprop.0+0x1ea6>
 8018f10:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 8018d98 <kalman_3gyro.constprop.0+0x4e50>
 8018f14:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 8018d9c <kalman_3gyro.constprop.0+0x4e54>
 8018f18:	ac33      	add	r4, sp, #204	; 0xcc
 8018f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8018f1e:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 8018f22:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 8018f26:	eef0 7a66 	vmov.f32	s15, s13
 8018f2a:	3001      	adds	r0, #1
 8018f2c:	461a      	mov	r2, r3
 8018f2e:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 8018f32:	320c      	adds	r2, #12
 8018f34:	428a      	cmp	r2, r1
 8018f36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018f3a:	d1f8      	bne.n	8018f2e <kalman_3gyro.constprop.0+0x4fe6>
 8018f3c:	ee27 7a84 	vmul.f32	s14, s15, s8
 8018f40:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8018f44:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8018f48:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8018f4c:	330c      	adds	r3, #12
 8018f4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018f52:	428b      	cmp	r3, r1
 8018f54:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8018f58:	d1f6      	bne.n	8018f48 <kalman_3gyro.constprop.0+0x5000>
 8018f5a:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8018f5e:	2802      	cmp	r0, #2
 8018f60:	f103 0104 	add.w	r1, r3, #4
 8018f64:	ece4 6a01 	vstmia	r4!, {s13}
 8018f68:	d1d9      	bne.n	8018f1e <kalman_3gyro.constprop.0+0x4fd6>
 8018f6a:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 8018f6e:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8018f72:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 8018f76:	eef1 3ae7 	vsqrt.f32	s7, s15
 8018f7a:	eeb1 4ae6 	vsqrt.f32	s8, s13
 8018f7e:	eef1 4ac7 	vsqrt.f32	s9, s14
 8018f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018f86:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8018f8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018f8e:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 8018f92:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f9a:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 8018f9e:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 8018fa2:	f57d aace 	bpl.w	8016542 <kalman_3gyro.constprop.0+0x25fa>
 8018fa6:	2200      	movs	r2, #0
 8018fa8:	9b01      	ldr	r3, [sp, #4]
 8018faa:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8018fae:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8018fb2:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8018fb6:	f88b 2001 	strb.w	r2, [fp, #1]
 8018fba:	f7fd bae6 	b.w	801658a <kalman_3gyro.constprop.0+0x2642>
 8018fbe:	9b08      	ldr	r3, [sp, #32]
 8018fc0:	6999      	ldr	r1, [r3, #24]
 8018fc2:	69da      	ldr	r2, [r3, #28]
 8018fc4:	6a1b      	ldr	r3, [r3, #32]
 8018fc6:	9181      	str	r1, [sp, #516]	; 0x204
 8018fc8:	9282      	str	r2, [sp, #520]	; 0x208
 8018fca:	9383      	str	r3, [sp, #524]	; 0x20c
 8018fcc:	e73a      	b.n	8018e44 <kalman_3gyro.constprop.0+0x4efc>
 8018fce:	bf00      	nop

08018fd0 <iNemoEngine_API_Update>:
 8018fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd4:	ed2d 8b0c 	vpush	{d8-d13}
 8018fd8:	4604      	mov	r4, r0
 8018fda:	b0c1      	sub	sp, #260	; 0x104
 8018fdc:	460d      	mov	r5, r1
 8018fde:	4617      	mov	r7, r2
 8018fe0:	eeb0 8a40 	vmov.f32	s16, s0
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	f000 824f 	beq.w	8019488 <iNemoEngine_API_Update+0x4b8>
 8018fea:	461e      	mov	r6, r3
 8018fec:	463b      	mov	r3, r7
 8018fee:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 8018ff2:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8018ff6:	6859      	ldr	r1, [r3, #4]
 8018ff8:	689a      	ldr	r2, [r3, #8]
 8018ffa:	ab33      	add	r3, sp, #204	; 0xcc
 8018ffc:	c307      	stmia	r3!, {r0, r1, r2}
 8018ffe:	6879      	ldr	r1, [r7, #4]
 8019000:	68ba      	ldr	r2, [r7, #8]
 8019002:	6838      	ldr	r0, [r7, #0]
 8019004:	ab30      	add	r3, sp, #192	; 0xc0
 8019006:	c307      	stmia	r3!, {r0, r1, r2}
 8019008:	f857 0f18 	ldr.w	r0, [r7, #24]!
 801900c:	6879      	ldr	r1, [r7, #4]
 801900e:	68ba      	ldr	r2, [r7, #8]
 8019010:	ab36      	add	r3, sp, #216	; 0xd8
 8019012:	c307      	stmia	r3!, {r0, r1, r2}
 8019014:	f1bc 0f00 	cmp.w	ip, #0
 8019018:	d005      	beq.n	8019026 <iNemoEngine_API_Update+0x56>
 801901a:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 801901e:	7923      	ldrb	r3, [r4, #4]
 8019020:	429a      	cmp	r2, r3
 8019022:	f080 828b 	bcs.w	801953c <iNemoEngine_API_Update+0x56c>
 8019026:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 801902a:	f10d 0a14 	add.w	sl, sp, #20
 801902e:	2300      	movs	r3, #0
 8019030:	4649      	mov	r1, r9
 8019032:	4650      	mov	r0, sl
 8019034:	aa33      	add	r2, sp, #204	; 0xcc
 8019036:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 801903a:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 801903e:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8019042:	f7f9 fbd5 	bl	80127f0 <rotVect>
 8019046:	aa36      	add	r2, sp, #216	; 0xd8
 8019048:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801904c:	a808      	add	r0, sp, #32
 801904e:	f7f9 fbcf 	bl	80127f0 <rotVect>
 8019052:	aa30      	add	r2, sp, #192	; 0xc0
 8019054:	4640      	mov	r0, r8
 8019056:	f104 0143 	add.w	r1, r4, #67	; 0x43
 801905a:	f7f9 fbc9 	bl	80127f0 <rotVect>
 801905e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8019062:	b923      	cbnz	r3, 801906e <iNemoEngine_API_Update+0x9e>
 8019064:	4b8a      	ldr	r3, [pc, #552]	; (8019290 <iNemoEngine_API_Update+0x2c0>)
 8019066:	930c      	str	r3, [sp, #48]	; 0x30
 8019068:	2200      	movs	r2, #0
 801906a:	920b      	str	r2, [sp, #44]	; 0x2c
 801906c:	930d      	str	r3, [sp, #52]	; 0x34
 801906e:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8019072:	2f09      	cmp	r7, #9
 8019074:	d849      	bhi.n	801910a <iNemoEngine_API_Update+0x13a>
 8019076:	ed9d ba06 	vldr	s22, [sp, #24]
 801907a:	eddd ba05 	vldr	s23, [sp, #20]
 801907e:	eddd aa07 	vldr	s21, [sp, #28]
 8019082:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8019086:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 801908a:	eeeb 7aab 	vfma.f32	s15, s23, s23
 801908e:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8019092:	ee17 0a90 	vmov	r0, s15
 8019096:	f7e7 fa27 	bl	80004e8 <__aeabi_f2d>
 801909a:	f008 fb95 	bl	80217c8 <sqrt>
 801909e:	f7e7 fd73 	bl	8000b88 <__aeabi_d2f>
 80190a2:	ee07 0a90 	vmov	s15, r0
 80190a6:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 80190aa:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 80190ae:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 80190b2:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 80190b6:	ee69 7aa9 	vmul.f32	s15, s19, s19
 80190ba:	ee6b ba87 	vmul.f32	s23, s23, s14
 80190be:	eeea 7a0a 	vfma.f32	s15, s20, s20
 80190c2:	ee2b ba07 	vmul.f32	s22, s22, s14
 80190c6:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80190ca:	ee6a aa87 	vmul.f32	s21, s21, s14
 80190ce:	ee17 0a90 	vmov	r0, s15
 80190d2:	edcd ba05 	vstr	s23, [sp, #20]
 80190d6:	ed8d ba06 	vstr	s22, [sp, #24]
 80190da:	edcd aa07 	vstr	s21, [sp, #28]
 80190de:	f7e7 fa03 	bl	80004e8 <__aeabi_f2d>
 80190e2:	f008 fb71 	bl	80217c8 <sqrt>
 80190e6:	f7e7 fd4f 	bl	8000b88 <__aeabi_d2f>
 80190ea:	ee07 0a90 	vmov	s15, r0
 80190ee:	eecc 7a27 	vdiv.f32	s15, s24, s15
 80190f2:	ee2a aa27 	vmul.f32	s20, s20, s15
 80190f6:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80190fa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80190fe:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8019102:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8019106:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 801910a:	7923      	ldrb	r3, [r4, #4]
 801910c:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8019110:	429a      	cmp	r2, r3
 8019112:	f080 80e1 	bcs.w	80192d8 <iNemoEngine_API_Update+0x308>
 8019116:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 801911a:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 801911e:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8019122:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8019126:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 801912a:	3701      	adds	r7, #1
 801912c:	aa33      	add	r2, sp, #204	; 0xcc
 801912e:	4649      	mov	r1, r9
 8019130:	4640      	mov	r0, r8
 8019132:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8019136:	9302      	str	r3, [sp, #8]
 8019138:	f7f9 fb5a 	bl	80127f0 <rotVect>
 801913c:	9b02      	ldr	r3, [sp, #8]
 801913e:	f8db 1000 	ldr.w	r1, [fp]
 8019142:	6818      	ldr	r0, [r3, #0]
 8019144:	f8da 2000 	ldr.w	r2, [sl]
 8019148:	6833      	ldr	r3, [r6, #0]
 801914a:	61ab      	str	r3, [r5, #24]
 801914c:	60e8      	str	r0, [r5, #12]
 801914e:	6129      	str	r1, [r5, #16]
 8019150:	616a      	str	r2, [r5, #20]
 8019152:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019156:	9301      	str	r3, [sp, #4]
 8019158:	f105 0328 	add.w	r3, r5, #40	; 0x28
 801915c:	4641      	mov	r1, r8
 801915e:	9300      	str	r3, [sp, #0]
 8019160:	462a      	mov	r2, r5
 8019162:	f105 031c 	add.w	r3, r5, #28
 8019166:	f105 000c 	add.w	r0, r5, #12
 801916a:	f7fa fe1d 	bl	8013da8 <output_update>
 801916e:	ed95 8a00 	vldr	s16, [r5]
 8019172:	edd5 9a01 	vldr	s19, [r5, #4]
 8019176:	ee18 0a10 	vmov	r0, s16
 801917a:	f008 fab7 	bl	80216ec <sinf>
 801917e:	ee08 0a90 	vmov	s17, r0
 8019182:	eddf 7a44 	vldr	s15, [pc, #272]	; 8019294 <iNemoEngine_API_Update+0x2c4>
 8019186:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8019298 <iNemoEngine_API_Update+0x2c8>
 801918a:	ee68 8aa8 	vmul.f32	s17, s17, s17
 801918e:	eef0 6ae9 	vabs.f32	s13, s19
 8019192:	eee8 7aa7 	vfma.f32	s15, s17, s15
 8019196:	eef4 6ac7 	vcmpe.f32	s13, s14
 801919a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801919e:	eef0 8a67 	vmov.f32	s17, s15
 80191a2:	d570      	bpl.n	8019286 <iNemoEngine_API_Update+0x2b6>
 80191a4:	ee19 0a90 	vmov	r0, s19
 80191a8:	f008 fae2 	bl	8021770 <tanf>
 80191ac:	ee07 0a90 	vmov	s15, r0
 80191b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80191b4:	eea7 9aa8 	vfma.f32	s18, s15, s17
 80191b8:	eef1 7ac9 	vsqrt.f32	s15, s18
 80191bc:	eddf 6a37 	vldr	s13, [pc, #220]	; 801929c <iNemoEngine_API_Update+0x2cc>
 80191c0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80192b0 <iNemoEngine_API_Update+0x2e0>
 80191c4:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 80191c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80191cc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80191d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191d4:	bf88      	it	hi
 80191d6:	eef0 7a66 	vmovhi.f32	s15, s13
 80191da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80191de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191e2:	bfb8      	it	lt
 80191e4:	eef0 7a47 	vmovlt.f32	s15, s14
 80191e8:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 80191ec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80191f0:	4c2b      	ldr	r4, [pc, #172]	; (80192a0 <iNemoEngine_API_Update+0x2d0>)
 80191f2:	bba3      	cbnz	r3, 801925e <iNemoEngine_API_Update+0x28e>
 80191f4:	6820      	ldr	r0, [r4, #0]
 80191f6:	edd5 0a08 	vldr	s1, [r5, #32]
 80191fa:	ed95 0a07 	vldr	s0, [r5, #28]
 80191fe:	edd5 9a03 	vldr	s19, [r5, #12]
 8019202:	ed95 aa04 	vldr	s20, [r5, #16]
 8019206:	ed95 9a05 	vldr	s18, [r5, #20]
 801920a:	edd5 8a06 	vldr	s17, [r5, #24]
 801920e:	f7f9 fbbf 	bl	8012990 <findDirection>
 8019212:	6020      	str	r0, [r4, #0]
 8019214:	2805      	cmp	r0, #5
 8019216:	f200 8331 	bhi.w	801987c <iNemoEngine_API_Update+0x8ac>
 801921a:	e8df f010 	tbh	[pc, r0, lsl #1]
 801921e:	000a      	.short	0x000a
 8019220:	00060137 	.word	0x00060137
 8019224:	00060163 	.word	0x00060163
 8019228:	000a      	.short	0x000a
 801922a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80192a4 <iNemoEngine_API_Update+0x2d4>
 801922e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8019232:	eddf 7a28 	vldr	s15, [pc, #160]	; 80192d4 <iNemoEngine_API_Update+0x304>
 8019236:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801923a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801923e:	bfa8      	it	ge
 8019240:	ee38 8a67 	vsubge.f32	s16, s16, s15
 8019244:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801924c:	f100 8111 	bmi.w	8019472 <iNemoEngine_API_Update+0x4a2>
 8019250:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8019254:	b041      	add	sp, #260	; 0x104
 8019256:	ecbd 8b0c 	vpop	{d8-d13}
 801925a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801925e:	ed95 9a05 	vldr	s18, [r5, #20]
 8019262:	6820      	ldr	r0, [r4, #0]
 8019264:	edd5 0a07 	vldr	s1, [r5, #28]
 8019268:	ed95 0a08 	vldr	s0, [r5, #32]
 801926c:	edd5 9a04 	vldr	s19, [r5, #16]
 8019270:	ed95 aa03 	vldr	s20, [r5, #12]
 8019274:	edd5 8a06 	vldr	s17, [r5, #24]
 8019278:	eeb1 1a41 	vneg.f32	s2, s2
 801927c:	eeb1 9a49 	vneg.f32	s18, s18
 8019280:	f7f9 fb86 	bl	8012990 <findDirection>
 8019284:	e7c5      	b.n	8019212 <iNemoEngine_API_Update+0x242>
 8019286:	eddf 7a08 	vldr	s15, [pc, #32]	; 80192a8 <iNemoEngine_API_Update+0x2d8>
 801928a:	eea8 9aa7 	vfma.f32	s18, s17, s15
 801928e:	e793      	b.n	80191b8 <iNemoEngine_API_Update+0x1e8>
 8019290:	3f333333 	.word	0x3f333333
 8019294:	00000000 	.word	0x00000000
 8019298:	3fbc430e 	.word	0x3fbc430e
 801929c:	40490fdb 	.word	0x40490fdb
 80192a0:	20004620 	.word	0x20004620
 80192a4:	43340000 	.word	0x43340000
 80192a8:	42c6ab07 	.word	0x42c6ab07
 80192ac:	3c03126f 	.word	0x3c03126f
 80192b0:	3c8efa35 	.word	0x3c8efa35
 80192b4:	3e4ccccd 	.word	0x3e4ccccd
 80192b8:	3fb50481 	.word	0x3fb50481
 80192bc:	3ed93dd9 	.word	0x3ed93dd9
 80192c0:	3b656042 	.word	0x3b656042
 80192c4:	42c80000 	.word	0x42c80000
 80192c8:	3a83126f 	.word	0x3a83126f
 80192cc:	3d4ccccd 	.word	0x3d4ccccd
 80192d0:	3f333333 	.word	0x3f333333
 80192d4:	43b40000 	.word	0x43b40000
 80192d8:	ee07 3a90 	vmov	s15, r3
 80192dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80192e0:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 80192ac <iNemoEngine_API_Update+0x2dc>
 80192e4:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 80192b0 <iNemoEngine_API_Update+0x2e0>
 80192e8:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 80192c0 <iNemoEngine_API_Update+0x2f0>
 80192ec:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 80192bc <iNemoEngine_API_Update+0x2ec>
 80192f0:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 80192b8 <iNemoEngine_API_Update+0x2e8>
 80192f4:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 80192b4 <iNemoEngine_API_Update+0x2e4>
 80192f8:	ee27 1a88 	vmul.f32	s2, s15, s16
 80192fc:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8019300:	ee85 5a81 	vdiv.f32	s10, s11, s2
 8019304:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8019308:	2700      	movs	r7, #0
 801930a:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 801930e:	f04f 0c00 	mov.w	ip, #0
 8019312:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 8019316:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 801931a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 801931e:	edd3 5a00 	vldr	s11, [r3]
 8019322:	f8c3 c000 	str.w	ip, [r3]
 8019326:	eef1 7ac5 	vsqrt.f32	s15, s10
 801932a:	f604 1364 	addw	r3, r4, #2404	; 0x964
 801932e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8019332:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8019336:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 801933a:	edd7 4a00 	vldr	s9, [r7]
 801933e:	f8c7 c000 	str.w	ip, [r7]
 8019342:	ed93 5a00 	vldr	s10, [r3]
 8019346:	f8c3 c000 	str.w	ip, [r3]
 801934a:	7963      	ldrb	r3, [r4, #5]
 801934c:	ee64 4a84 	vmul.f32	s9, s9, s8
 8019350:	ee25 5a04 	vmul.f32	s10, s10, s8
 8019354:	ee65 5a84 	vmul.f32	s11, s11, s8
 8019358:	2b01      	cmp	r3, #1
 801935a:	eec3 3a27 	vdiv.f32	s7, s6, s15
 801935e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019362:	ee27 6a86 	vmul.f32	s12, s15, s12
 8019366:	ee27 7a87 	vmul.f32	s14, s15, s14
 801936a:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 801936e:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 8019372:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 8019376:	f000 8122 	beq.w	80195be <iNemoEngine_API_Update+0x5ee>
 801937a:	2b02      	cmp	r3, #2
 801937c:	f000 8116 	beq.w	80195ac <iNemoEngine_API_Update+0x5dc>
 8019380:	2b00      	cmp	r3, #0
 8019382:	f000 80e3 	beq.w	801954c <iNemoEngine_API_Update+0x57c>
 8019386:	edd4 0a05 	vldr	s1, [r4, #20]
 801938a:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 80192c4 <iNemoEngine_API_Update+0x2f4>
 801938e:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 80192c8 <iNemoEngine_API_Update+0x2f8>
 8019392:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8019396:	ee60 0a85 	vmul.f32	s1, s1, s10
 801939a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801939e:	8863      	ldrh	r3, [r4, #2]
 80193a0:	1e5a      	subs	r2, r3, #1
 80193a2:	2a12      	cmp	r2, #18
 80193a4:	f200 80db 	bhi.w	801955e <iNemoEngine_API_Update+0x58e>
 80193a8:	3301      	adds	r3, #1
 80193aa:	b21a      	sxth	r2, r3
 80193ac:	b29b      	uxth	r3, r3
 80193ae:	2b03      	cmp	r3, #3
 80193b0:	8062      	strh	r2, [r4, #2]
 80193b2:	f240 8109 	bls.w	80195c8 <iNemoEngine_API_Update+0x5f8>
 80193b6:	ee05 2a90 	vmov	s11, r2
 80193ba:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 80192cc <iNemoEngine_API_Update+0x2fc>
 80193be:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80193c2:	ee65 5a85 	vmul.f32	s11, s11, s10
 80193c6:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 80193ca:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 80193ce:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 80193d2:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 80192d0 <iNemoEngine_API_Update+0x300>
 80193d6:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 80193da:	ee26 6a24 	vmul.f32	s12, s12, s9
 80193de:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80193e2:	ee26 6a25 	vmul.f32	s12, s12, s11
 80193e6:	ee27 7a05 	vmul.f32	s14, s14, s10
 80193ea:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 80193ee:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 80193f2:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 80193f6:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80193fa:	aa1a      	add	r2, sp, #104	; 0x68
 80193fc:	af16      	add	r7, sp, #88	; 0x58
 80193fe:	e9cd 7200 	strd	r7, r2, [sp]
 8019402:	ab12      	add	r3, sp, #72	; 0x48
 8019404:	aa1e      	add	r2, sp, #120	; 0x78
 8019406:	4641      	mov	r1, r8
 8019408:	4620      	mov	r0, r4
 801940a:	f7fa fd9d 	bl	8013f48 <kalman_3gyro.constprop.0>
 801940e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019410:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 8019414:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 8019418:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 801941c:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 8019420:	f8c7 a000 	str.w	sl, [r7]
 8019424:	f604 1744 	addw	r7, r4, #2372	; 0x944
 8019428:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 801942c:	f8c7 e000 	str.w	lr, [r7]
 8019430:	f604 1748 	addw	r7, r4, #2376	; 0x948
 8019434:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8019438:	f8c7 c000 	str.w	ip, [r7]
 801943c:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8019440:	6030      	str	r0, [r6, #0]
 8019442:	60f3      	str	r3, [r6, #12]
 8019444:	6071      	str	r1, [r6, #4]
 8019446:	60b2      	str	r2, [r6, #8]
 8019448:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 801944c:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8019450:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8019454:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019456:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 801945a:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 801945e:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8019462:	edc3 7a00 	vstr	s15, [r3]
 8019466:	f8cb e000 	str.w	lr, [fp]
 801946a:	f8ca c000 	str.w	ip, [sl]
 801946e:	6030      	str	r0, [r6, #0]
 8019470:	e65b      	b.n	801912a <iNemoEngine_API_Update+0x15a>
 8019472:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 80192d4 <iNemoEngine_API_Update+0x304>
 8019476:	ee38 8a27 	vadd.f32	s16, s16, s15
 801947a:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 801947e:	b041      	add	sp, #260	; 0x104
 8019480:	ecbd 8b0c 	vpop	{d8-d13}
 8019484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019488:	ae0e      	add	r6, sp, #56	; 0x38
 801948a:	e5af      	b.n	8018fec <iNemoEngine_API_Update+0x1c>
 801948c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8019490:	ee69 8a28 	vmul.f32	s17, s18, s17
 8019494:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8019498:	eee9 8a8a 	vfma.f32	s17, s19, s20
 801949c:	eeea 7a4a 	vfms.f32	s15, s20, s20
 80194a0:	eee9 7a49 	vfms.f32	s15, s18, s18
 80194a4:	ee17 0a90 	vmov	r0, s15
 80194a8:	f7e7 f81e 	bl	80004e8 <__aeabi_f2d>
 80194ac:	ee78 7aa8 	vadd.f32	s15, s17, s17
 80194b0:	4602      	mov	r2, r0
 80194b2:	460b      	mov	r3, r1
 80194b4:	ee17 0a90 	vmov	r0, s15
 80194b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80194bc:	f7e7 f814 	bl	80004e8 <__aeabi_f2d>
 80194c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80194c4:	f008 f97e 	bl	80217c4 <atan2>
 80194c8:	a3ef      	add	r3, pc, #956	; (adr r3, 8019888 <iNemoEngine_API_Update+0x8b8>)
 80194ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194ce:	f7e7 f863 	bl	8000598 <__aeabi_dmul>
 80194d2:	4bef      	ldr	r3, [pc, #956]	; (8019890 <iNemoEngine_API_Update+0x8c0>)
 80194d4:	2200      	movs	r2, #0
 80194d6:	f7e6 fea7 	bl	8000228 <__aeabi_dsub>
 80194da:	f7e7 fb55 	bl	8000b88 <__aeabi_d2f>
 80194de:	ee08 0a10 	vmov	s16, r0
 80194e2:	e6a6      	b.n	8019232 <iNemoEngine_API_Update+0x262>
 80194e4:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80194e8:	ee69 8a28 	vmul.f32	s17, s18, s17
 80194ec:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80194f0:	eee9 8a8a 	vfma.f32	s17, s19, s20
 80194f4:	eeea 7a4a 	vfms.f32	s15, s20, s20
 80194f8:	eee9 7a49 	vfms.f32	s15, s18, s18
 80194fc:	ee17 0a90 	vmov	r0, s15
 8019500:	f7e6 fff2 	bl	80004e8 <__aeabi_f2d>
 8019504:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8019508:	4602      	mov	r2, r0
 801950a:	460b      	mov	r3, r1
 801950c:	ee17 0a90 	vmov	r0, s15
 8019510:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019514:	f7e6 ffe8 	bl	80004e8 <__aeabi_f2d>
 8019518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801951c:	f008 f952 	bl	80217c4 <atan2>
 8019520:	a3d9      	add	r3, pc, #868	; (adr r3, 8019888 <iNemoEngine_API_Update+0x8b8>)
 8019522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019526:	f7e7 f837 	bl	8000598 <__aeabi_dmul>
 801952a:	4bd9      	ldr	r3, [pc, #868]	; (8019890 <iNemoEngine_API_Update+0x8c0>)
 801952c:	2200      	movs	r2, #0
 801952e:	f7e6 fe7d 	bl	800022c <__adddf3>
 8019532:	f7e7 fb29 	bl	8000b88 <__aeabi_d2f>
 8019536:	ee08 0a10 	vmov	s16, r0
 801953a:	e67a      	b.n	8019232 <iNemoEngine_API_Update+0x262>
 801953c:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8019540:	2b00      	cmp	r3, #0
 8019542:	dd44      	ble.n	80195ce <iNemoEngine_API_Update+0x5fe>
 8019544:	3b01      	subs	r3, #1
 8019546:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 801954a:	e56c      	b.n	8019026 <iNemoEngine_API_Update+0x56>
 801954c:	8863      	ldrh	r3, [r4, #2]
 801954e:	eddf 0ad1 	vldr	s1, [pc, #836]	; 8019894 <iNemoEngine_API_Update+0x8c4>
 8019552:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8019898 <iNemoEngine_API_Update+0x8c8>
 8019556:	1e5a      	subs	r2, r3, #1
 8019558:	2a12      	cmp	r2, #18
 801955a:	f67f af25 	bls.w	80193a8 <iNemoEngine_API_Update+0x3d8>
 801955e:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 8019562:	eddf 2ace 	vldr	s5, [pc, #824]	; 801989c <iNemoEngine_API_Update+0x8cc>
 8019566:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 801956a:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 801956e:	ee34 4a22 	vadd.f32	s8, s8, s5
 8019572:	ee64 7aa6 	vmul.f32	s15, s9, s13
 8019576:	eec3 4a84 	vdiv.f32	s9, s7, s8
 801957a:	2300      	movs	r3, #0
 801957c:	8063      	strh	r3, [r4, #2]
 801957e:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 8019582:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 8019586:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 80198a0 <iNemoEngine_API_Update+0x8d0>
 801958a:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 801958e:	ee65 6a26 	vmul.f32	s13, s10, s13
 8019592:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019596:	ee27 7a03 	vmul.f32	s14, s14, s6
 801959a:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 801959e:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 80195a2:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 80195a6:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80195aa:	e726      	b.n	80193fa <iNemoEngine_API_Update+0x42a>
 80195ac:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 80195b0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80195b4:	edd4 0a05 	vldr	s1, [r4, #20]
 80195b8:	ed9f 0aba 	vldr	s0, [pc, #744]	; 80198a4 <iNemoEngine_API_Update+0x8d4>
 80195bc:	e6ef      	b.n	801939e <iNemoEngine_API_Update+0x3ce>
 80195be:	edd4 0a05 	vldr	s1, [r4, #20]
 80195c2:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80198a8 <iNemoEngine_API_Update+0x8d8>
 80195c6:	e6ea      	b.n	801939e <iNemoEngine_API_Update+0x3ce>
 80195c8:	eddf 5ab8 	vldr	s11, [pc, #736]	; 80198ac <iNemoEngine_API_Update+0x8dc>
 80195cc:	e6fb      	b.n	80193c6 <iNemoEngine_API_Update+0x3f6>
 80195ce:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 80195d2:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 80195d6:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 80195da:	ed97 5a00 	vldr	s10, [r7]
 80195de:	ed92 da00 	vldr	s26, [r2]
 80195e2:	ed93 6a00 	vldr	s12, [r3]
 80195e6:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8019894 <iNemoEngine_API_Update+0x8c4>
 80195ea:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 80195ee:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 80195f2:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 80195f6:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 80195fa:	ed91 3a00 	vldr	s6, [r1]
 80195fe:	ed92 1a00 	vldr	s2, [r2]
 8019602:	ed97 7a00 	vldr	s14, [r7]
 8019606:	edd3 3a00 	vldr	s7, [r3]
 801960a:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 801960e:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 8019612:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 8019616:	ed91 ba00 	vldr	s22, [r1]
 801961a:	edd0 6a00 	vldr	s13, [r0]
 801961e:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 8019622:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 8019626:	edd1 aa00 	vldr	s21, [r1]
 801962a:	ed92 2a00 	vldr	s4, [r2]
 801962e:	ee96 7a04 	vfnms.f32	s14, s12, s8
 8019632:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8019636:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 801963a:	eed1 3a04 	vfnms.f32	s7, s2, s8
 801963e:	f204 6234 	addw	r2, r4, #1588	; 0x634
 8019642:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 8019646:	edd0 7a00 	vldr	s15, [r0]
 801964a:	edd2 1a00 	vldr	s3, [r2]
 801964e:	ed93 ca00 	vldr	s24, [r3]
 8019652:	eed5 6a04 	vfnms.f32	s13, s10, s8
 8019656:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 801965a:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 801965e:	ed91 5a00 	vldr	s10, [r1]
 8019662:	edd0 5a00 	vldr	s11, [r0]
 8019666:	edd7 9a00 	vldr	s19, [r7]
 801966a:	f204 6024 	addw	r0, r4, #1572	; 0x624
 801966e:	eed5 1a04 	vfnms.f32	s3, s10, s8
 8019672:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 8019676:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 801967a:	edd0 2a00 	vldr	s5, [r0]
 801967e:	edd3 0a00 	vldr	s1, [r3]
 8019682:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 8019686:	ee37 7a27 	vadd.f32	s14, s14, s15
 801968a:	ee73 3aa5 	vadd.f32	s7, s7, s11
 801968e:	edd7 7a00 	vldr	s15, [r7]
 8019692:	edd0 5a00 	vldr	s11, [r0]
 8019696:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 801969a:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 801969e:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 80196a2:	ed93 6a00 	vldr	s12, [r3]
 80196a6:	edda ba00 	vldr	s23, [sl]
 80196aa:	ed99 5a00 	vldr	s10, [r9]
 80196ae:	ee76 6a83 	vadd.f32	s13, s13, s6
 80196b2:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 80196b6:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 80196ba:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 80196be:	eed7 5a84 	vfnms.f32	s11, s15, s8
 80196c2:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 80196c6:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 80196ca:	eddc 4a00 	vldr	s9, [ip]
 80196ce:	edd3 7a00 	vldr	s15, [r3]
 80196d2:	ed98 1a00 	vldr	s2, [r8]
 80196d6:	edde 8a00 	vldr	s17, [lr]
 80196da:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 80196de:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 80196e2:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 80196e6:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 80196ea:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 80196ee:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 80196f2:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 80196f6:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 80196fa:	ed9c aa00 	vldr	s20, [ip]
 80196fe:	eeed 6a03 	vfma.f32	s13, s26, s6
 8019702:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 8019706:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 801970a:	ed92 da00 	vldr	s26, [r2]
 801970e:	eeab 7a03 	vfma.f32	s14, s22, s6
 8019712:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 8019716:	ed91 ba00 	vldr	s22, [r1]
 801971a:	eef0 ca61 	vmov.f32	s25, s3
 801971e:	eddb 1a00 	vldr	s3, [fp]
 8019722:	edd3 ba00 	vldr	s23, [r3]
 8019726:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 801972a:	eedb 7a84 	vfnms.f32	s15, s23, s8
 801972e:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 8019732:	1c53      	adds	r3, r2, #1
 8019734:	eeea 3a83 	vfma.f32	s7, s21, s6
 8019738:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 801973c:	edd8 aa00 	vldr	s21, [r8]
 8019740:	eee6 1a03 	vfma.f32	s3, s12, s6
 8019744:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8019748:	ed9e 6a00 	vldr	s12, [lr]
 801974c:	edd7 aa00 	vldr	s21, [r7]
 8019750:	eee6 7a03 	vfma.f32	s15, s12, s6
 8019754:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 8019758:	ed9c 6a00 	vldr	s12, [ip]
 801975c:	eedc 4a04 	vfnms.f32	s9, s24, s8
 8019760:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 8019764:	ee75 5a8d 	vadd.f32	s11, s11, s26
 8019768:	ee2a 4a00 	vmul.f32	s8, s20, s0
 801976c:	ee22 2a00 	vmul.f32	s4, s4, s0
 8019770:	ee62 2a80 	vmul.f32	s5, s5, s0
 8019774:	eeeb 5a03 	vfma.f32	s11, s22, s6
 8019778:	ed90 0a00 	vldr	s0, [r0]
 801977c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8019780:	ee36 6a00 	vadd.f32	s12, s12, s0
 8019784:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8019788:	ed91 0a00 	vldr	s0, [r1]
 801978c:	ee35 5a28 	vadd.f32	s10, s10, s17
 8019790:	ee66 6a82 	vmul.f32	s13, s13, s4
 8019794:	ee22 7a87 	vmul.f32	s14, s5, s14
 8019798:	ee64 5a25 	vmul.f32	s11, s8, s11
 801979c:	eee0 4a83 	vfma.f32	s9, s1, s6
 80197a0:	f604 1068 	addw	r0, r4, #2408	; 0x968
 80197a4:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 80197a8:	eea1 5a03 	vfma.f32	s10, s2, s6
 80197ac:	eea0 6a03 	vfma.f32	s12, s0, s6
 80197b0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80197b4:	ee63 3a82 	vmul.f32	s7, s7, s4
 80197b8:	ee27 7a07 	vmul.f32	s14, s14, s14
 80197bc:	ee62 1aa1 	vmul.f32	s3, s5, s3
 80197c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80197c4:	eee3 6aa3 	vfma.f32	s13, s7, s7
 80197c8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80197cc:	eea1 7aa1 	vfma.f32	s14, s3, s3
 80197d0:	ee24 6a06 	vmul.f32	s12, s8, s12
 80197d4:	ee62 4a24 	vmul.f32	s9, s4, s9
 80197d8:	ee22 5a85 	vmul.f32	s10, s5, s10
 80197dc:	eee4 6aa4 	vfma.f32	s13, s9, s9
 80197e0:	eea5 7a05 	vfma.f32	s14, s10, s10
 80197e4:	eee6 7a06 	vfma.f32	s15, s12, s12
 80197e8:	eeb1 6ae6 	vsqrt.f32	s12, s13
 80197ec:	eef1 6ac7 	vsqrt.f32	s13, s14
 80197f0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80197f4:	ee07 3a90 	vmov	s15, r3
 80197f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80197fc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8019800:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 8019804:	b21b      	sxth	r3, r3
 8019806:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801980a:	ee07 2a90 	vmov	s15, r2
 801980e:	ed90 4a00 	vldr	s8, [r0]
 8019812:	edd1 4a00 	vldr	s9, [r1]
 8019816:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801981a:	edd7 7a00 	vldr	s15, [r7]
 801981e:	eee5 6a84 	vfma.f32	s13, s11, s8
 8019822:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8019826:	eea5 7aa4 	vfma.f32	s14, s11, s9
 801982a:	ee66 7a05 	vmul.f32	s15, s12, s10
 801982e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8019832:	ee27 7a05 	vmul.f32	s14, s14, s10
 8019836:	edc7 7a00 	vstr	s15, [r7]
 801983a:	edc0 6a00 	vstr	s13, [r0]
 801983e:	ed81 7a00 	vstr	s14, [r1]
 8019842:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 8019846:	f47f abee 	bne.w	8019026 <iNemoEngine_API_Update+0x56>
 801984a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801984e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019852:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019856:	ee67 7a86 	vmul.f32	s15, s15, s12
 801985a:	2300      	movs	r3, #0
 801985c:	2200      	movs	r2, #0
 801985e:	edc4 6a07 	vstr	s13, [r4, #28]
 8019862:	ed84 7a08 	vstr	s14, [r4, #32]
 8019866:	edc4 7a06 	vstr	s15, [r4, #24]
 801986a:	603b      	str	r3, [r7, #0]
 801986c:	6003      	str	r3, [r0, #0]
 801986e:	600b      	str	r3, [r1, #0]
 8019870:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 8019874:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8019878:	f7ff bbd5 	b.w	8019026 <iNemoEngine_API_Update+0x56>
 801987c:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80198b0 <iNemoEngine_API_Update+0x8e0>
 8019880:	e4e6      	b.n	8019250 <iNemoEngine_API_Update+0x280>
 8019882:	bf00      	nop
 8019884:	f3af 8000 	nop.w
 8019888:	20000000 	.word	0x20000000
 801988c:	404ca5dc 	.word	0x404ca5dc
 8019890:	40568000 	.word	0x40568000
 8019894:	3dcccccd 	.word	0x3dcccccd
 8019898:	3a83126f 	.word	0x3a83126f
 801989c:	358637bd 	.word	0x358637bd
 80198a0:	3f333333 	.word	0x3f333333
 80198a4:	3727c5ac 	.word	0x3727c5ac
 80198a8:	3ac49ba6 	.word	0x3ac49ba6
 80198ac:	3e4ccccd 	.word	0x3e4ccccd
 80198b0:	00000000 	.word	0x00000000

080198b4 <MEMS_getSensorData_I16>:
 80198b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80198b8:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 80198bc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80198c0:	68c5      	ldr	r5, [r0, #12]
 80198c2:	4596      	cmp	lr, r2
 80198c4:	fa1f f882 	uxth.w	r8, r2
 80198c8:	d94d      	bls.n	8019966 <MEMS_getSensorData_I16+0xb2>
 80198ca:	f10e 33ff 	add.w	r3, lr, #4294967295
 80198ce:	fb04 5313 	mls	r3, r4, r3, r5
 80198d2:	ebae 0c02 	sub.w	ip, lr, r2
 80198d6:	f8a1 8004 	strh.w	r8, [r1, #4]
 80198da:	600b      	str	r3, [r1, #0]
 80198dc:	fa5f fc8c 	uxtb.w	ip, ip
 80198e0:	4647      	mov	r7, r8
 80198e2:	f1b8 0f00 	cmp.w	r8, #0
 80198e6:	d017      	beq.n	8019918 <MEMS_getSensorData_I16+0x64>
 80198e8:	688e      	ldr	r6, [r1, #8]
 80198ea:	6905      	ldr	r5, [r0, #16]
 80198ec:	2300      	movs	r3, #0
 80198ee:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 80198f2:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 80198f6:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 80198fa:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 80198fe:	f8d4 9002 	ldr.w	r9, [r4, #2]
 8019902:	f8c1 9002 	str.w	r9, [r1, #2]
 8019906:	3301      	adds	r3, #1
 8019908:	88e4      	ldrh	r4, [r4, #6]
 801990a:	80cc      	strh	r4, [r1, #6]
 801990c:	b2d9      	uxtb	r1, r3
 801990e:	42b9      	cmp	r1, r7
 8019910:	460b      	mov	r3, r1
 8019912:	d3ec      	bcc.n	80198ee <MEMS_getSensorData_I16+0x3a>
 8019914:	45c6      	cmp	lr, r8
 8019916:	d934      	bls.n	8019982 <MEMS_getSensorData_I16+0xce>
 8019918:	ebae 0308 	sub.w	r3, lr, r8
 801991c:	b29b      	uxth	r3, r3
 801991e:	8103      	strh	r3, [r0, #8]
 8019920:	f1bc 0f00 	cmp.w	ip, #0
 8019924:	d01d      	beq.n	8019962 <MEMS_getSensorData_I16+0xae>
 8019926:	6903      	ldr	r3, [r0, #16]
 8019928:	f10c 3cff 	add.w	ip, ip, #4294967295
 801992c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019930:	f103 000a 	add.w	r0, r3, #10
 8019934:	fa5f fc8c 	uxtb.w	ip, ip
 8019938:	3202      	adds	r2, #2
 801993a:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 801993e:	3302      	adds	r3, #2
 8019940:	2400      	movs	r4, #0
 8019942:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8019946:	f803 1c02 	strb.w	r1, [r3, #-2]
 801994a:	6811      	ldr	r1, [r2, #0]
 801994c:	6019      	str	r1, [r3, #0]
 801994e:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8019952:	8099      	strh	r1, [r3, #4]
 8019954:	3308      	adds	r3, #8
 8019956:	4283      	cmp	r3, r0
 8019958:	f802 4c02 	strb.w	r4, [r2, #-2]
 801995c:	f102 0208 	add.w	r2, r2, #8
 8019960:	d1ef      	bne.n	8019942 <MEMS_getSensorData_I16+0x8e>
 8019962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019966:	f10e 33ff 	add.w	r3, lr, #4294967295
 801996a:	fb04 5313 	mls	r3, r4, r3, r5
 801996e:	f8a1 e004 	strh.w	lr, [r1, #4]
 8019972:	600b      	str	r3, [r1, #0]
 8019974:	f1be 0f00 	cmp.w	lr, #0
 8019978:	d005      	beq.n	8019986 <MEMS_getSensorData_I16+0xd2>
 801997a:	4677      	mov	r7, lr
 801997c:	f04f 0c00 	mov.w	ip, #0
 8019980:	e7b2      	b.n	80198e8 <MEMS_getSensorData_I16+0x34>
 8019982:	2300      	movs	r3, #0
 8019984:	e7cb      	b.n	801991e <MEMS_getSensorData_I16+0x6a>
 8019986:	f8a0 e008 	strh.w	lr, [r0, #8]
 801998a:	e7ea      	b.n	8019962 <MEMS_getSensorData_I16+0xae>

0801998c <MEMS_SolveLinearEq>:
 801998c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019990:	ed2d 8b0c 	vpush	{d8-d13}
 8019994:	b0a9      	sub	sp, #164	; 0xa4
 8019996:	461e      	mov	r6, r3
 8019998:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 801999a:	f04f 0800 	mov.w	r8, #0
 801999e:	f04f 0c00 	mov.w	ip, #0
 80199a2:	f8c5 c000 	str.w	ip, [r5]
 80199a6:	4613      	mov	r3, r2
 80199a8:	460c      	mov	r4, r1
 80199aa:	2240      	movs	r2, #64	; 0x40
 80199ac:	4641      	mov	r1, r8
 80199ae:	4607      	mov	r7, r0
 80199b0:	f8c6 8000 	str.w	r8, [r6]
 80199b4:	f8c6 8004 	str.w	r8, [r6, #4]
 80199b8:	f8c6 8008 	str.w	r8, [r6, #8]
 80199bc:	f8c6 800c 	str.w	r8, [r6, #12]
 80199c0:	a808      	add	r0, sp, #32
 80199c2:	ee08 3a10 	vmov	s16, r3
 80199c6:	e9cd 8801 	strd	r8, r8, [sp, #4]
 80199ca:	f8cd 8000 	str.w	r8, [sp]
 80199ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80199d2:	f009 f9dd 	bl	8022d90 <memset>
 80199d6:	4641      	mov	r1, r8
 80199d8:	a818      	add	r0, sp, #96	; 0x60
 80199da:	2240      	movs	r2, #64	; 0x40
 80199dc:	f009 f9d8 	bl	8022d90 <memset>
 80199e0:	edd4 2a03 	vldr	s5, [r4, #12]
 80199e4:	eddf 7ae3 	vldr	s15, [pc, #908]	; 8019d74 <MEMS_SolveLinearEq+0x3e8>
 80199e8:	eef4 2ae7 	vcmpe.f32	s5, s15
 80199ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199f0:	d47c      	bmi.n	8019aec <MEMS_SolveLinearEq+0x160>
 80199f2:	783a      	ldrb	r2, [r7, #0]
 80199f4:	7879      	ldrb	r1, [r7, #1]
 80199f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80199fa:	428a      	cmp	r2, r1
 80199fc:	d07c      	beq.n	8019af8 <MEMS_SolveLinearEq+0x16c>
 80199fe:	3301      	adds	r3, #1
 8019a00:	1a98      	subs	r0, r3, r2
 8019a02:	fb90 f3f1 	sdiv	r3, r0, r1
 8019a06:	fb01 0313 	mls	r3, r1, r3, r0
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	bfb8      	it	lt
 8019a0e:	185b      	addlt	r3, r3, r1
 8019a10:	b21b      	sxth	r3, r3
 8019a12:	2a00      	cmp	r2, #0
 8019a14:	f000 81d6 	beq.w	8019dc4 <MEMS_SolveLinearEq+0x438>
 8019a18:	1e50      	subs	r0, r2, #1
 8019a1a:	b2c0      	uxtb	r0, r0
 8019a1c:	3001      	adds	r0, #1
 8019a1e:	edd4 3a00 	vldr	s7, [r4]
 8019a22:	ed94 4a01 	vldr	s8, [r4, #4]
 8019a26:	edd4 4a02 	vldr	s9, [r4, #8]
 8019a2a:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8019a2e:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 8019d78 <MEMS_SolveLinearEq+0x3ec>
 8019a32:	4418      	add	r0, r3
 8019a34:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8019a38:	fb93 f2f1 	sdiv	r2, r3, r1
 8019a3c:	fb01 3212 	mls	r2, r1, r2, r3
 8019a40:	b2d2      	uxtb	r2, r2
 8019a42:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8019a46:	f9b2 c024 	ldrsh.w	ip, [r2, #36]	; 0x24
 8019a4a:	ee07 ca90 	vmov	s15, ip
 8019a4e:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
 8019a52:	f9b2 2026 	ldrsh.w	r2, [r2, #38]	; 0x26
 8019a56:	ee06 ca10 	vmov	s12, ip
 8019a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a5e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8019a62:	ee67 7a88 	vmul.f32	s15, s15, s16
 8019a66:	ee26 6a08 	vmul.f32	s12, s12, s16
 8019a6a:	ee77 6ac4 	vsub.f32	s13, s15, s8
 8019a6e:	ee07 2a10 	vmov	s14, r2
 8019a72:	ee36 5a63 	vsub.f32	s10, s12, s7
 8019a76:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8019a7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019a7e:	eee5 6a05 	vfma.f32	s13, s10, s10
 8019a82:	ee27 7a08 	vmul.f32	s14, s14, s16
 8019a86:	ee33 6ac6 	vsub.f32	s12, s7, s12
 8019a8a:	ee74 aac7 	vsub.f32	s21, s9, s14
 8019a8e:	ee37 7a64 	vsub.f32	s14, s14, s9
 8019a92:	ee74 7a67 	vsub.f32	s15, s8, s15
 8019a96:	eee7 6a07 	vfma.f32	s13, s14, s14
 8019a9a:	eef4 6ac2 	vcmpe.f32	s13, s4
 8019a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aa2:	d531      	bpl.n	8019b08 <MEMS_SolveLinearEq+0x17c>
 8019aa4:	3301      	adds	r3, #1
 8019aa6:	4298      	cmp	r0, r3
 8019aa8:	d1c6      	bne.n	8019a38 <MEMS_SolveLinearEq+0xac>
 8019aaa:	eef0 7a65 	vmov.f32	s15, s11
 8019aae:	2001      	movs	r0, #1
 8019ab0:	4602      	mov	r2, r0
 8019ab2:	2100      	movs	r1, #0
 8019ab4:	e006      	b.n	8019ac4 <MEMS_SolveLinearEq+0x138>
 8019ab6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019aba:	af28      	add	r7, sp, #160	; 0xa0
 8019abc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8019ac0:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 8019ac4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8019ac8:	3201      	adds	r2, #1
 8019aca:	af28      	add	r7, sp, #160	; 0xa0
 8019acc:	b2d2      	uxtb	r2, r2
 8019ace:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8019ad2:	2a04      	cmp	r2, #4
 8019ad4:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 8019ad8:	460b      	mov	r3, r1
 8019ada:	d1ec      	bne.n	8019ab6 <MEMS_SolveLinearEq+0x12a>
 8019adc:	1c42      	adds	r2, r0, #1
 8019ade:	b2d2      	uxtb	r2, r2
 8019ae0:	2a04      	cmp	r2, #4
 8019ae2:	d076      	beq.n	8019bd2 <MEMS_SolveLinearEq+0x246>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	4601      	mov	r1, r0
 8019ae8:	4610      	mov	r0, r2
 8019aea:	e7e4      	b.n	8019ab6 <MEMS_SolveLinearEq+0x12a>
 8019aec:	2000      	movs	r0, #0
 8019aee:	b029      	add	sp, #164	; 0xa4
 8019af0:	ecbd 8b0c 	vpop	{d8-d13}
 8019af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019af8:	1c59      	adds	r1, r3, #1
 8019afa:	fb91 f3f2 	sdiv	r3, r1, r2
 8019afe:	fb02 1313 	mls	r3, r2, r3, r1
 8019b02:	b21b      	sxth	r3, r3
 8019b04:	4611      	mov	r1, r2
 8019b06:	e784      	b.n	8019a12 <MEMS_SolveLinearEq+0x86>
 8019b08:	eef1 cae6 	vsqrt.f32	s25, s13
 8019b0c:	3301      	adds	r3, #1
 8019b0e:	4283      	cmp	r3, r0
 8019b10:	ed9d ca00 	vldr	s24, [sp]
 8019b14:	eddd ba08 	vldr	s23, [sp, #32]
 8019b18:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 8019b1c:	ed9d aa01 	vldr	s20, [sp, #4]
 8019b20:	eddd 9a02 	vldr	s19, [sp, #8]
 8019b24:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 8019b28:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 8019b2c:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 8019b30:	ed9d 0a03 	vldr	s0, [sp, #12]
 8019b34:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8019b38:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 8019b3c:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 8019b40:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 8019b44:	eec1 6aac 	vdiv.f32	s13, s3, s25
 8019b48:	ee3d da21 	vadd.f32	s26, s26, s3
 8019b4c:	ee26 7a26 	vmul.f32	s14, s12, s13
 8019b50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019b54:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8019b58:	ee72 aaec 	vsub.f32	s21, s5, s25
 8019b5c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019b60:	eea7 ba26 	vfma.f32	s22, s14, s13
 8019b64:	eee7 8aa6 	vfma.f32	s17, s15, s13
 8019b68:	eeaa ca87 	vfma.f32	s24, s21, s14
 8019b6c:	eee7 ba07 	vfma.f32	s23, s14, s14
 8019b70:	eeaa aaa7 	vfma.f32	s20, s21, s15
 8019b74:	eeea 9aa6 	vfma.f32	s19, s21, s13
 8019b78:	eea7 9aa7 	vfma.f32	s18, s15, s15
 8019b7c:	eea6 3aa6 	vfma.f32	s6, s13, s13
 8019b80:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 8019b84:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8019b88:	ee30 6a06 	vadd.f32	s12, s0, s12
 8019b8c:	ee71 7a67 	vsub.f32	s15, s2, s15
 8019b90:	ee75 6a66 	vsub.f32	s13, s10, s13
 8019b94:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 8019b98:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8019b9c:	ed8d ca00 	vstr	s24, [sp]
 8019ba0:	edcd ba08 	vstr	s23, [sp, #32]
 8019ba4:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 8019ba8:	ed8d aa01 	vstr	s20, [sp, #4]
 8019bac:	edcd 9a02 	vstr	s19, [sp, #8]
 8019bb0:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 8019bb4:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 8019bb8:	ed8d 6a03 	vstr	s12, [sp, #12]
 8019bbc:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8019bc0:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8019bc4:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 8019bc8:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 8019bcc:	f47f af34 	bne.w	8019a38 <MEMS_SolveLinearEq+0xac>
 8019bd0:	e76b      	b.n	8019aaa <MEMS_SolveLinearEq+0x11e>
 8019bd2:	2240      	movs	r2, #64	; 0x40
 8019bd4:	2100      	movs	r1, #0
 8019bd6:	a818      	add	r0, sp, #96	; 0x60
 8019bd8:	f009 f8da 	bl	8022d90 <memset>
 8019bdc:	ab08      	add	r3, sp, #32
 8019bde:	ed9f 5a67 	vldr	s10, [pc, #412]	; 8019d7c <MEMS_SolveLinearEq+0x3f0>
 8019be2:	4618      	mov	r0, r3
 8019be4:	aa18      	add	r2, sp, #96	; 0x60
 8019be6:	2100      	movs	r1, #0
 8019be8:	b24f      	sxtb	r7, r1
 8019bea:	2900      	cmp	r1, #0
 8019bec:	f000 80b5 	beq.w	8019d5a <MEMS_SolveLinearEq+0x3ce>
 8019bf0:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8019bf4:	eeb0 7ae7 	vabs.f32	s14, s15
 8019bf8:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8019bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c00:	f53f af74 	bmi.w	8019aec <MEMS_SolveLinearEq+0x160>
 8019c04:	ed93 7a00 	vldr	s14, [r3]
 8019c08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019c0c:	2f01      	cmp	r7, #1
 8019c0e:	edc2 6a00 	vstr	s13, [r2]
 8019c12:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8019c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019c1a:	f000 80b5 	beq.w	8019d88 <MEMS_SolveLinearEq+0x3fc>
 8019c1e:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 8019c22:	eeb0 7ac6 	vabs.f32	s14, s12
 8019c26:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8019c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c2e:	f53f af5d 	bmi.w	8019aec <MEMS_SolveLinearEq+0x160>
 8019c32:	ed93 7a01 	vldr	s14, [r3, #4]
 8019c36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019c3a:	2f02      	cmp	r7, #2
 8019c3c:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8019c40:	edc2 7a01 	vstr	s15, [r2, #4]
 8019c44:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8019c48:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 8019c4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019c50:	eea6 7a26 	vfma.f32	s14, s12, s13
 8019c54:	f000 80a7 	beq.w	8019da6 <MEMS_SolveLinearEq+0x41a>
 8019c58:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 8019c5c:	eeb0 6ae4 	vabs.f32	s12, s9
 8019c60:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8019c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c68:	f53f af40 	bmi.w	8019aec <MEMS_SolveLinearEq+0x160>
 8019c6c:	edd3 5a02 	vldr	s11, [r3, #8]
 8019c70:	ed90 6a00 	vldr	s12, [r0]
 8019c74:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8019c78:	eec7 5a24 	vdiv.f32	s11, s14, s9
 8019c7c:	edc2 5a02 	vstr	s11, [r2, #8]
 8019c80:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 8019c84:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019c88:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019c8c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019c90:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8019c94:	eee5 7a87 	vfma.f32	s15, s11, s14
 8019c98:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8019c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ca0:	f77f af24 	ble.w	8019aec <MEMS_SolveLinearEq+0x160>
 8019ca4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8019ca8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8019cac:	ed82 7a03 	vstr	s14, [r2, #12]
 8019cb0:	3101      	adds	r1, #1
 8019cb2:	2904      	cmp	r1, #4
 8019cb4:	f103 0310 	add.w	r3, r3, #16
 8019cb8:	f102 0210 	add.w	r2, r2, #16
 8019cbc:	f100 0014 	add.w	r0, r0, #20
 8019cc0:	d192      	bne.n	8019be8 <MEMS_SolveLinearEq+0x25c>
 8019cc2:	466a      	mov	r2, sp
 8019cc4:	4631      	mov	r1, r6
 8019cc6:	a818      	add	r0, sp, #96	; 0x60
 8019cc8:	f7f9 fa7c 	bl	80131c4 <llEvaluate.constprop.0>
 8019ccc:	4b2c      	ldr	r3, [pc, #176]	; (8019d80 <MEMS_SolveLinearEq+0x3f4>)
 8019cce:	602b      	str	r3, [r5, #0]
 8019cd0:	f10d 0910 	add.w	r9, sp, #16
 8019cd4:	46e8      	mov	r8, sp
 8019cd6:	f10d 0b0c 	add.w	fp, sp, #12
 8019cda:	2700      	movs	r7, #0
 8019cdc:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8019ce0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8019ce4:	e9cd 7700 	strd	r7, r7, [sp]
 8019ce8:	e9cd 7702 	strd	r7, r7, [sp, #8]
 8019cec:	466a      	mov	r2, sp
 8019cee:	f848 ab04 	str.w	sl, [r8], #4
 8019cf2:	a904      	add	r1, sp, #16
 8019cf4:	a818      	add	r0, sp, #96	; 0x60
 8019cf6:	f7f9 fa65 	bl	80131c4 <llEvaluate.constprop.0>
 8019cfa:	ecf9 7a01 	vldmia	r9!, {s15}
 8019cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d06:	dd23      	ble.n	8019d50 <MEMS_SolveLinearEq+0x3c4>
 8019d08:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8019d0c:	edd5 7a00 	vldr	s15, [r5]
 8019d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d18:	bfb8      	it	lt
 8019d1a:	eef0 7a47 	vmovlt.f32	s15, s14
 8019d1e:	45c3      	cmp	fp, r8
 8019d20:	edc5 7a00 	vstr	s15, [r5]
 8019d24:	d1de      	bne.n	8019ce4 <MEMS_SolveLinearEq+0x358>
 8019d26:	edd4 7a03 	vldr	s15, [r4, #12]
 8019d2a:	ed96 7a03 	vldr	s14, [r6, #12]
 8019d2e:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8019d32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019d36:	2001      	movs	r0, #1
 8019d38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d40:	bf48      	it	mi
 8019d42:	edc6 7a03 	vstrmi	s15, [r6, #12]
 8019d46:	b029      	add	sp, #164	; 0xa4
 8019d48:	ecbd 8b0c 	vpop	{d8-d13}
 8019d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d50:	45c3      	cmp	fp, r8
 8019d52:	ed85 0a00 	vstr	s0, [r5]
 8019d56:	d1c5      	bne.n	8019ce4 <MEMS_SolveLinearEq+0x358>
 8019d58:	e7e5      	b.n	8019d26 <MEMS_SolveLinearEq+0x39a>
 8019d5a:	edd0 7a00 	vldr	s15, [r0]
 8019d5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d66:	f77f aec1 	ble.w	8019aec <MEMS_SolveLinearEq+0x160>
 8019d6a:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8019d6e:	ed82 7a00 	vstr	s14, [r2]
 8019d72:	e79d      	b.n	8019cb0 <MEMS_SolveLinearEq+0x324>
 8019d74:	3dcccccd 	.word	0x3dcccccd
 8019d78:	2b8cbccb 	.word	0x2b8cbccb
 8019d7c:	358637bd 	.word	0x358637bd
 8019d80:	3dcccccd 	.word	0x3dcccccd
 8019d84:	00000000 	.word	0x00000000
 8019d88:	ed90 7a00 	vldr	s14, [r0]
 8019d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d94:	f77f aeaa 	ble.w	8019aec <MEMS_SolveLinearEq+0x160>
 8019d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d9c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8019da0:	ed82 7a01 	vstr	s14, [r2, #4]
 8019da4:	e784      	b.n	8019cb0 <MEMS_SolveLinearEq+0x324>
 8019da6:	edd0 7a00 	vldr	s15, [r0]
 8019daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019db2:	f77f ae9b 	ble.w	8019aec <MEMS_SolveLinearEq+0x160>
 8019db6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019dba:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8019dbe:	ed82 7a02 	vstr	s14, [r2, #8]
 8019dc2:	e775      	b.n	8019cb0 <MEMS_SolveLinearEq+0x324>
 8019dc4:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8019d84 <MEMS_SolveLinearEq+0x3f8>
 8019dc8:	e671      	b.n	8019aae <MEMS_SolveLinearEq+0x122>
 8019dca:	bf00      	nop

08019dcc <MEMS_EIG3>:
 8019dcc:	edd0 6a02 	vldr	s13, [r0, #8]
 8019dd0:	ed90 7a01 	vldr	s14, [r0, #4]
 8019dd4:	edd0 4a04 	vldr	s9, [r0, #16]
 8019dd8:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8019f3c <MEMS_EIG3+0x170>
 8019ddc:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8019de0:	b510      	push	{r4, lr}
 8019de2:	eee7 7a07 	vfma.f32	s15, s14, s14
 8019de6:	460c      	mov	r4, r1
 8019de8:	ed2d 8b04 	vpush	{d8-d9}
 8019dec:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8019df0:	b08a      	sub	sp, #40	; 0x28
 8019df2:	eef4 7ac6 	vcmpe.f32	s15, s12
 8019df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dfa:	d509      	bpl.n	8019e10 <MEMS_EIG3+0x44>
 8019dfc:	6803      	ldr	r3, [r0, #0]
 8019dfe:	600b      	str	r3, [r1, #0]
 8019e00:	68c3      	ldr	r3, [r0, #12]
 8019e02:	604b      	str	r3, [r1, #4]
 8019e04:	6943      	ldr	r3, [r0, #20]
 8019e06:	608b      	str	r3, [r1, #8]
 8019e08:	b00a      	add	sp, #40	; 0x28
 8019e0a:	ecbd 8b04 	vpop	{d8-d9}
 8019e0e:	bd10      	pop	{r4, pc}
 8019e10:	ed90 4a00 	vldr	s8, [r0]
 8019e14:	edd0 5a03 	vldr	s11, [r0, #12]
 8019e18:	ed90 2a05 	vldr	s4, [r0, #20]
 8019e1c:	ed9f 9a48 	vldr	s18, [pc, #288]	; 8019f40 <MEMS_EIG3+0x174>
 8019e20:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8019f44 <MEMS_EIG3+0x178>
 8019e24:	ee34 8a25 	vadd.f32	s16, s8, s11
 8019e28:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8019e2c:	ee38 8a02 	vadd.f32	s16, s16, s4
 8019e30:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8019e34:	ee28 8a09 	vmul.f32	s16, s16, s18
 8019e38:	eef8 2a00 	vmov.f32	s5, #128	; 0xc0000000 -2.0
 8019e3c:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8019e40:	ee34 4a48 	vsub.f32	s8, s8, s16
 8019e44:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8019e48:	ee32 2a48 	vsub.f32	s4, s4, s16
 8019e4c:	eea4 5a04 	vfma.f32	s10, s8, s8
 8019e50:	eea7 5a83 	vfma.f32	s10, s15, s6
 8019e54:	eef0 7a45 	vmov.f32	s15, s10
 8019e58:	eee2 7a02 	vfma.f32	s15, s4, s4
 8019e5c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019e60:	eef1 8ae7 	vsqrt.f32	s17, s15
 8019e64:	ee83 6aa8 	vdiv.f32	s12, s7, s17
 8019e68:	ee82 5a28 	vdiv.f32	s10, s4, s17
 8019e6c:	ee84 2a28 	vdiv.f32	s4, s8, s17
 8019e70:	ee66 6a26 	vmul.f32	s13, s12, s13
 8019e74:	ee65 5a86 	vmul.f32	s11, s11, s12
 8019e78:	ee26 7a07 	vmul.f32	s14, s12, s14
 8019e7c:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 8019e80:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019e84:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019e88:	ee66 4a46 	vnmul.f32	s9, s12, s12
 8019e8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e90:	eee5 4a85 	vfma.f32	s9, s11, s10
 8019e94:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8019e98:	eee4 7a82 	vfma.f32	s15, s9, s4
 8019e9c:	eea6 5a26 	vfma.f32	s10, s12, s13
 8019ea0:	eee5 7a07 	vfma.f32	s15, s10, s14
 8019ea4:	eef4 7ae2 	vcmpe.f32	s15, s5
 8019ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eac:	d909      	bls.n	8019ec2 <MEMS_EIG3+0xf6>
 8019eae:	eef4 7ac3 	vcmpe.f32	s15, s6
 8019eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eb6:	db22      	blt.n	8019efe <MEMS_EIG3+0x132>
 8019eb8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8019f48 <MEMS_EIG3+0x17c>
 8019ebc:	eeb0 9a63 	vmov.f32	s18, s7
 8019ec0:	e003      	b.n	8019eca <MEMS_EIG3+0xfe>
 8019ec2:	ed9f 9a22 	vldr	s18, [pc, #136]	; 8019f4c <MEMS_EIG3+0x180>
 8019ec6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019eca:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8019ece:	eef0 7a48 	vmov.f32	s15, s16
 8019ed2:	eeb0 6a48 	vmov.f32	s12, s16
 8019ed6:	eee8 7a89 	vfma.f32	s15, s17, s18
 8019eda:	eea8 6a87 	vfma.f32	s12, s17, s14
 8019ede:	edc4 7a00 	vstr	s15, [r4]
 8019ee2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019ee6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8019eea:	eed8 7a26 	vfnms.f32	s15, s16, s13
 8019eee:	ed84 6a02 	vstr	s12, [r4, #8]
 8019ef2:	edc4 7a01 	vstr	s15, [r4, #4]
 8019ef6:	b00a      	add	sp, #40	; 0x28
 8019ef8:	ecbd 8b04 	vpop	{d8-d9}
 8019efc:	bd10      	pop	{r4, pc}
 8019efe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019f06:	ee17 0a90 	vmov	r0, s15
 8019f0a:	f007 fc81 	bl	8021810 <acosf>
 8019f0e:	ee07 0a90 	vmov	s15, r0
 8019f12:	ee27 9a89 	vmul.f32	s18, s15, s18
 8019f16:	ee19 0a10 	vmov	r0, s18
 8019f1a:	f007 fb7d 	bl	8021618 <cosf>
 8019f1e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8019f50 <MEMS_EIG3+0x184>
 8019f22:	ee79 7a27 	vadd.f32	s15, s18, s15
 8019f26:	4603      	mov	r3, r0
 8019f28:	ee17 0a90 	vmov	r0, s15
 8019f2c:	ee09 3a10 	vmov	s18, r3
 8019f30:	f007 fb72 	bl	8021618 <cosf>
 8019f34:	ee07 0a10 	vmov	s14, r0
 8019f38:	e7c7      	b.n	8019eca <MEMS_EIG3+0xfe>
 8019f3a:	bf00      	nop
 8019f3c:	358637bd 	.word	0x358637bd
 8019f40:	3eaaaaab 	.word	0x3eaaaaab
 8019f44:	3e2aaaab 	.word	0x3e2aaaab
 8019f48:	bf000001 	.word	0xbf000001
 8019f4c:	3effffff 	.word	0x3effffff
 8019f50:	40060a92 	.word	0x40060a92

08019f54 <MEMS_runMagCal>:
 8019f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f58:	ed2d 8b0a 	vpush	{d8-d12}
 8019f5c:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8019f60:	2282      	movs	r2, #130	; 0x82
 8019f62:	ab36      	add	r3, sp, #216	; 0xd8
 8019f64:	460c      	mov	r4, r1
 8019f66:	9105      	str	r1, [sp, #20]
 8019f68:	4683      	mov	fp, r0
 8019f6a:	4608      	mov	r0, r1
 8019f6c:	a917      	add	r1, sp, #92	; 0x5c
 8019f6e:	9319      	str	r3, [sp, #100]	; 0x64
 8019f70:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8019f74:	f7ff fc9e 	bl	80198b4 <MEMS_getSensorData_I16>
 8019f78:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8019f7c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019f80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019f82:	9209      	str	r2, [sp, #36]	; 0x24
 8019f84:	f108 31ff 	add.w	r1, r8, #4294967295
 8019f88:	9106      	str	r1, [sp, #24]
 8019f8a:	fb01 2103 	mla	r1, r1, r3, r2
 8019f8e:	9108      	str	r1, [sp, #32]
 8019f90:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 8019f94:	f1b8 0f00 	cmp.w	r8, #0
 8019f98:	f000 842b 	beq.w	801a7f2 <MEMS_runMagCal+0x89e>
 8019f9c:	f8db 3008 	ldr.w	r3, [fp, #8]
 8019fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019fa4:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8019fa8:	fb02 f203 	mul.w	r2, r2, r3
 8019fac:	31a0      	adds	r1, #160	; 0xa0
 8019fae:	4291      	cmp	r1, r2
 8019fb0:	f080 8425 	bcs.w	801a7fe <MEMS_runMagCal+0x8aa>
 8019fb4:	3b00      	subs	r3, #0
 8019fb6:	bf18      	it	ne
 8019fb8:	2301      	movne	r3, #1
 8019fba:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8019fbe:	2200      	movs	r2, #0
 8019fc0:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8019fc4:	f8cb 200c 	str.w	r2, [fp, #12]
 8019fc8:	2300      	movs	r3, #0
 8019fca:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 8019fce:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 8019fd2:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 8019fd6:	22ff      	movs	r2, #255	; 0xff
 8019fd8:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8019fdc:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8019fe0:	4cd5      	ldr	r4, [pc, #852]	; (801a338 <MEMS_runMagCal+0x3e4>)
 8019fe2:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 801a344 <MEMS_runMagCal+0x3f0>
 8019fe6:	9b05      	ldr	r3, [sp, #20]
 8019fe8:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8019fec:	ed93 5a01 	vldr	s10, [r3, #4]
 8019ff0:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8019ff4:	4652      	mov	r2, sl
 8019ff6:	2a03      	cmp	r2, #3
 8019ff8:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8019ffc:	bf28      	it	cs
 8019ffe:	2203      	movcs	r2, #3
 801a000:	2100      	movs	r1, #0
 801a002:	9207      	str	r2, [sp, #28]
 801a004:	eef0 7a47 	vmov.f32	s15, s14
 801a008:	464b      	mov	r3, r9
 801a00a:	9402      	str	r4, [sp, #8]
 801a00c:	4627      	mov	r7, r4
 801a00e:	9503      	str	r5, [sp, #12]
 801a010:	462e      	mov	r6, r5
 801a012:	460a      	mov	r2, r1
 801a014:	9404      	str	r4, [sp, #16]
 801a016:	7818      	ldrb	r0, [r3, #0]
 801a018:	3201      	adds	r2, #1
 801a01a:	b292      	uxth	r2, r2
 801a01c:	2800      	cmp	r0, #0
 801a01e:	d04b      	beq.n	801a0b8 <MEMS_runMagCal+0x164>
 801a020:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 801a024:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 801a028:	ed9b 3a18 	vldr	s6, [fp, #96]	; 0x60
 801a02c:	ed9b 4a1e 	vldr	s8, [fp, #120]	; 0x78
 801a030:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 801a034:	eddb 4a1a 	vldr	s9, [fp, #104]	; 0x68
 801a038:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801a03c:	9c02      	ldr	r4, [sp, #8]
 801a03e:	eddb 5a19 	vldr	s11, [fp, #100]	; 0x64
 801a042:	ed9b 6a22 	vldr	s12, [fp, #136]	; 0x88
 801a046:	ee07 ea10 	vmov	s14, lr
 801a04a:	ee06 ca90 	vmov	s13, ip
 801a04e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a052:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a056:	ee37 7a43 	vsub.f32	s14, s14, s6
 801a05a:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801a05e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a062:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801a066:	ee27 7a07 	vmul.f32	s14, s14, s14
 801a06a:	4574      	cmp	r4, lr
 801a06c:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801a070:	bfb8      	it	lt
 801a072:	4674      	movlt	r4, lr
 801a074:	9402      	str	r4, [sp, #8]
 801a076:	ee06 0a90 	vmov	s13, r0
 801a07a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a07e:	9c03      	ldr	r4, [sp, #12]
 801a080:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a084:	ee36 7ae5 	vsub.f32	s14, s13, s11
 801a088:	4574      	cmp	r4, lr
 801a08a:	bfa8      	it	ge
 801a08c:	4674      	movge	r4, lr
 801a08e:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a092:	4567      	cmp	r7, ip
 801a094:	9403      	str	r4, [sp, #12]
 801a096:	9c04      	ldr	r4, [sp, #16]
 801a098:	bfb8      	it	lt
 801a09a:	4667      	movlt	r7, ip
 801a09c:	eee7 7a07 	vfma.f32	s15, s14, s14
 801a0a0:	4566      	cmp	r6, ip
 801a0a2:	bfa8      	it	ge
 801a0a4:	4666      	movge	r6, ip
 801a0a6:	4284      	cmp	r4, r0
 801a0a8:	bfb8      	it	lt
 801a0aa:	4604      	movlt	r4, r0
 801a0ac:	3101      	adds	r1, #1
 801a0ae:	4285      	cmp	r5, r0
 801a0b0:	b249      	sxtb	r1, r1
 801a0b2:	9404      	str	r4, [sp, #16]
 801a0b4:	bfa8      	it	ge
 801a0b6:	4605      	movge	r5, r0
 801a0b8:	9807      	ldr	r0, [sp, #28]
 801a0ba:	4282      	cmp	r2, r0
 801a0bc:	f103 0308 	add.w	r3, r3, #8
 801a0c0:	d9a9      	bls.n	801a016 <MEMS_runMagCal+0xc2>
 801a0c2:	4590      	cmp	r8, r2
 801a0c4:	9c04      	ldr	r4, [sp, #16]
 801a0c6:	f240 8797 	bls.w	801aff8 <MEMS_runMagCal+0x10a4>
 801a0ca:	ebaa 0a02 	sub.w	sl, sl, r2
 801a0ce:	fa12 fa8a 	uxtah	sl, r2, sl
 801a0d2:	f109 0308 	add.w	r3, r9, #8
 801a0d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a0da:	9307      	str	r3, [sp, #28]
 801a0dc:	2300      	movs	r3, #0
 801a0de:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 801a0e2:	9304      	str	r3, [sp, #16]
 801a0e4:	7813      	ldrb	r3, [r2, #0]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	f000 8096 	beq.w	801a218 <MEMS_runMagCal+0x2c4>
 801a0ec:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801a0f0:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801a0f4:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 801a0f8:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 801a0fc:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 801a100:	ed9b 6a18 	vldr	s12, [fp, #96]	; 0x60
 801a104:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 801a108:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 801a10c:	ed9b 3a17 	vldr	s6, [fp, #92]	; 0x5c
 801a110:	eddb 5a1a 	vldr	s11, [fp, #104]	; 0x68
 801a114:	eddb 2a1e 	vldr	s5, [fp, #120]	; 0x78
 801a118:	eddb 3a19 	vldr	s7, [fp, #100]	; 0x64
 801a11c:	ed9b 4a22 	vldr	s8, [fp, #136]	; 0x88
 801a120:	ebae 0808 	sub.w	r8, lr, r8
 801a124:	eba0 000a 	sub.w	r0, r0, sl
 801a128:	ee06 ca90 	vmov	s13, ip
 801a12c:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 801a130:	ee07 0a10 	vmov	s14, r0
 801a134:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 801a138:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 801a13c:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 801a140:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a144:	eba3 030a 	sub.w	r3, r3, sl
 801a148:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801a14c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a150:	ee06 ea10 	vmov	s12, lr
 801a154:	ebac 0909 	sub.w	r9, ip, r9
 801a158:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 801a15c:	eef8 4ac6 	vcvt.f32.s32	s9, s12
 801a160:	eeb0 7ac7 	vabs.f32	s14, s14
 801a164:	ee06 9a10 	vmov	s12, r9
 801a168:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801a16c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801a170:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801a174:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 801a178:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 801a17c:	eeb0 6ac6 	vabs.f32	s12, s12
 801a180:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a184:	eba0 0808 	sub.w	r8, r0, r8
 801a188:	ee06 0a10 	vmov	s12, r0
 801a18c:	eba3 0309 	sub.w	r3, r3, r9
 801a190:	ee74 4ac3 	vsub.f32	s9, s9, s6
 801a194:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 801a198:	ee64 4aa5 	vmul.f32	s9, s9, s11
 801a19c:	9b02      	ldr	r3, [sp, #8]
 801a19e:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 801a1a2:	4577      	cmp	r7, lr
 801a1a4:	ee66 6aa2 	vmul.f32	s13, s13, s5
 801a1a8:	ee06 8a10 	vmov	s12, r8
 801a1ac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801a1b0:	bfb8      	it	lt
 801a1b2:	4677      	movlt	r7, lr
 801a1b4:	4576      	cmp	r6, lr
 801a1b6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801a1ba:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801a1be:	bfa8      	it	ge
 801a1c0:	4676      	movge	r6, lr
 801a1c2:	4563      	cmp	r3, ip
 801a1c4:	bfb8      	it	lt
 801a1c6:	4663      	movlt	r3, ip
 801a1c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801a1cc:	eee4 6aa4 	vfma.f32	s13, s9, s9
 801a1d0:	9302      	str	r3, [sp, #8]
 801a1d2:	9b03      	ldr	r3, [sp, #12]
 801a1d4:	eeb0 6ac6 	vabs.f32	s12, s12
 801a1d8:	ee36 7a07 	vadd.f32	s14, s12, s14
 801a1dc:	4563      	cmp	r3, ip
 801a1de:	ee75 5ae3 	vsub.f32	s11, s11, s7
 801a1e2:	bfa8      	it	ge
 801a1e4:	4663      	movge	r3, ip
 801a1e6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801a1ea:	4284      	cmp	r4, r0
 801a1ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a1f0:	bfb8      	it	lt
 801a1f2:	4604      	movlt	r4, r0
 801a1f4:	ee65 6a84 	vmul.f32	s13, s11, s8
 801a1f8:	4285      	cmp	r5, r0
 801a1fa:	bfa8      	it	ge
 801a1fc:	4605      	movge	r5, r0
 801a1fe:	9303      	str	r3, [sp, #12]
 801a200:	ee17 0a10 	vmov	r0, s14
 801a204:	9b04      	ldr	r3, [sp, #16]
 801a206:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801a20a:	4283      	cmp	r3, r0
 801a20c:	f101 0101 	add.w	r1, r1, #1
 801a210:	bf38      	it	cc
 801a212:	4603      	movcc	r3, r0
 801a214:	b249      	sxtb	r1, r1
 801a216:	9304      	str	r3, [sp, #16]
 801a218:	9b07      	ldr	r3, [sp, #28]
 801a21a:	3208      	adds	r2, #8
 801a21c:	4293      	cmp	r3, r2
 801a21e:	f47f af61 	bne.w	801a0e4 <MEMS_runMagCal+0x190>
 801a222:	2900      	cmp	r1, #0
 801a224:	f000 86e6 	beq.w	801aff4 <MEMS_runMagCal+0x10a0>
 801a228:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 801a22c:	f280 82f3 	bge.w	801a816 <MEMS_runMagCal+0x8c2>
 801a230:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 801a234:	f2c0 82ef 	blt.w	801a816 <MEMS_runMagCal+0x8c2>
 801a238:	9b02      	ldr	r3, [sp, #8]
 801a23a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a23e:	f280 82ea 	bge.w	801a816 <MEMS_runMagCal+0x8c2>
 801a242:	9a03      	ldr	r2, [sp, #12]
 801a244:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 801a248:	f2c0 82e5 	blt.w	801a816 <MEMS_runMagCal+0x8c2>
 801a24c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 801a250:	f280 82e1 	bge.w	801a816 <MEMS_runMagCal+0x8c2>
 801a254:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 801a258:	f2c0 82dd 	blt.w	801a816 <MEMS_runMagCal+0x8c2>
 801a25c:	ee07 1a10 	vmov	s14, r1
 801a260:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 801a264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a268:	ee87 7a86 	vdiv.f32	s14, s15, s12
 801a26c:	1bbe      	subs	r6, r7, r6
 801a26e:	1a9f      	subs	r7, r3, r2
 801a270:	42be      	cmp	r6, r7
 801a272:	4633      	mov	r3, r6
 801a274:	eba4 0405 	sub.w	r4, r4, r5
 801a278:	bfb8      	it	lt
 801a27a:	463b      	movlt	r3, r7
 801a27c:	42a3      	cmp	r3, r4
 801a27e:	bfb8      	it	lt
 801a280:	4623      	movlt	r3, r4
 801a282:	ee86 6a85 	vdiv.f32	s12, s13, s10
 801a286:	eef1 7ac7 	vsqrt.f32	s15, s14
 801a28a:	ee06 3a90 	vmov	s13, r3
 801a28e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 801a33c <MEMS_runMagCal+0x3e8>
 801a292:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a296:	ee26 7a07 	vmul.f32	s14, s12, s14
 801a29a:	ee65 7a27 	vmul.f32	s15, s10, s15
 801a29e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801a2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2a6:	f100 82b6 	bmi.w	801a816 <MEMS_runMagCal+0x8c2>
 801a2aa:	ed9d 7a04 	vldr	s14, [sp, #16]
 801a2ae:	eddf 5a24 	vldr	s11, [pc, #144]	; 801a340 <MEMS_runMagCal+0x3ec>
 801a2b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801a2b6:	ee27 5a05 	vmul.f32	s10, s14, s10
 801a2ba:	eeb4 5ae5 	vcmpe.f32	s10, s11
 801a2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2c2:	f300 82a8 	bgt.w	801a816 <MEMS_runMagCal+0x8c2>
 801a2c6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801a2ca:	ee26 6a07 	vmul.f32	s12, s12, s14
 801a2ce:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801a2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2d6:	f301 822b 	bgt.w	801b730 <MEMS_runMagCal+0x17dc>
 801a2da:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801a2de:	ee26 7a07 	vmul.f32	s14, s12, s14
 801a2e2:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2ea:	f340 8576 	ble.w	801adda <MEMS_runMagCal+0xe86>
 801a2ee:	ee07 6a10 	vmov	s14, r6
 801a2f2:	ee36 6a06 	vadd.f32	s12, s12, s12
 801a2f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a2fa:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801a2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a302:	f340 856a 	ble.w	801adda <MEMS_runMagCal+0xe86>
 801a306:	ee07 7a10 	vmov	s14, r7
 801a30a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a30e:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801a312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a316:	f140 8560 	bpl.w	801adda <MEMS_runMagCal+0xe86>
 801a31a:	ee07 4a10 	vmov	s14, r4
 801a31e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a322:	2300      	movs	r3, #0
 801a324:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801a328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a32c:	9303      	str	r3, [sp, #12]
 801a32e:	bf48      	it	mi
 801a330:	2301      	movmi	r3, #1
 801a332:	9307      	str	r3, [sp, #28]
 801a334:	f000 bd54 	b.w	801ade0 <MEMS_runMagCal+0xe8c>
 801a338:	ffff8000 	.word	0xffff8000
 801a33c:	43020000 	.word	0x43020000
 801a340:	447a0000 	.word	0x447a0000
 801a344:	00000000 	.word	0x00000000
 801a348:	41f00001 	.word	0x41f00001
 801a34c:	400ccccd 	.word	0x400ccccd
 801a350:	3dcccccd 	.word	0x3dcccccd
 801a354:	423c0000 	.word	0x423c0000
 801a358:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 801a344 <MEMS_runMagCal+0x3f0>
 801a35c:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 801a348 <MEMS_runMagCal+0x3f4>
 801a360:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801a364:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a36c:	dc10      	bgt.n	801a390 <MEMS_runMagCal+0x43c>
 801a36e:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 801a34c <MEMS_runMagCal+0x3f8>
 801a372:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a37a:	dc09      	bgt.n	801a390 <MEMS_runMagCal+0x43c>
 801a37c:	ed94 9a03 	vldr	s18, [r4, #12]
 801a380:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 801a350 <MEMS_runMagCal+0x3fc>
 801a384:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801a388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a38c:	f201 857c 	bhi.w	801be88 <MEMS_runMagCal+0x1f34>
 801a390:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 801a354 <MEMS_runMagCal+0x400>
 801a394:	edd4 6a03 	vldr	s13, [r4, #12]
 801a398:	edd4 4a00 	vldr	s9, [r4]
 801a39c:	ed94 5a01 	vldr	s10, [r4, #4]
 801a3a0:	edd4 5a02 	vldr	s11, [r4, #8]
 801a3a4:	edc4 7a06 	vstr	s15, [r4, #24]
 801a3a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a3ac:	ad2e      	add	r5, sp, #184	; 0xb8
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	e9c5 3300 	strd	r3, r3, [r5]
 801a3b4:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801a3b8:	60ab      	str	r3, [r5, #8]
 801a3ba:	61ab      	str	r3, [r5, #24]
 801a3bc:	4bee      	ldr	r3, [pc, #952]	; (801a778 <MEMS_runMagCal+0x824>)
 801a3be:	f8ca 3000 	str.w	r3, [sl]
 801a3c2:	ee84 6a88 	vdiv.f32	s12, s9, s16
 801a3c6:	eec5 9a08 	vdiv.f32	s19, s10, s16
 801a3ca:	ee85 aa88 	vdiv.f32	s20, s11, s16
 801a3ce:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 801a3d2:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 801a3d6:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 801a3da:	eef0 6a67 	vmov.f32	s13, s15
 801a3de:	eec7 5aa6 	vdiv.f32	s11, s15, s13
 801a3e2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801a3e6:	ee39 9a65 	vsub.f32	s18, s18, s11
 801a3ea:	eddf 6ae4 	vldr	s13, [pc, #912]	; 801a77c <MEMS_runMagCal+0x828>
 801a3ee:	eddf 5ae4 	vldr	s11, [pc, #912]	; 801a780 <MEMS_runMagCal+0x82c>
 801a3f2:	ee77 6a66 	vsub.f32	s13, s14, s13
 801a3f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a3fa:	eef0 6ae6 	vabs.f32	s13, s13
 801a3fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a402:	eef4 6ae5 	vcmpe.f32	s13, s11
 801a406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a40a:	eef0 7ae7 	vabs.f32	s15, s15
 801a40e:	f101 851a 	bmi.w	801be46 <MEMS_runMagCal+0x1ef2>
 801a412:	ed9f 7adc 	vldr	s14, [pc, #880]	; 801a784 <MEMS_runMagCal+0x830>
 801a416:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a41e:	f281 8469 	bge.w	801bcf4 <MEMS_runMagCal+0x1da0>
 801a422:	eddf 7ad9 	vldr	s15, [pc, #868]	; 801a788 <MEMS_runMagCal+0x834>
 801a426:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801a42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a42e:	f101 8461 	bmi.w	801bcf4 <MEMS_runMagCal+0x1da0>
 801a432:	ee16 0a10 	vmov	r0, s12
 801a436:	f007 f933 	bl	80216a0 <roundf>
 801a43a:	ee07 0a90 	vmov	s15, r0
 801a43e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a442:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 801a446:	ee17 3a90 	vmov	r3, s15
 801a44a:	ee19 0a90 	vmov	r0, s19
 801a44e:	f8a9 3000 	strh.w	r3, [r9]
 801a452:	f007 f925 	bl	80216a0 <roundf>
 801a456:	ee07 0a90 	vmov	s15, r0
 801a45a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a45e:	ee1a 0a10 	vmov	r0, s20
 801a462:	ee17 3a90 	vmov	r3, s15
 801a466:	f8a9 3002 	strh.w	r3, [r9, #2]
 801a46a:	f007 f919 	bl	80216a0 <roundf>
 801a46e:	eddd 7a08 	vldr	s15, [sp, #32]
 801a472:	ee06 0a90 	vmov	s13, r0
 801a476:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801a47a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801a47e:	eddf 7ac3 	vldr	s15, [pc, #780]	; 801a78c <MEMS_runMagCal+0x838>
 801a482:	ee16 3a90 	vmov	r3, s13
 801a486:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a48a:	f8a9 3004 	strh.w	r3, [r9, #4]
 801a48e:	ee17 0a90 	vmov	r0, s15
 801a492:	f007 f905 	bl	80216a0 <roundf>
 801a496:	ee07 0a90 	vmov	s15, r0
 801a49a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a49e:	ae0f      	add	r6, sp, #60	; 0x3c
 801a4a0:	edcb 7a01 	vstr	s15, [fp, #4]
 801a4a4:	ab10      	add	r3, sp, #64	; 0x40
 801a4a6:	ee1c 0a10 	vmov	r0, s24
 801a4aa:	eeb0 0a48 	vmov.f32	s0, s16
 801a4ae:	4649      	mov	r1, r9
 801a4b0:	9600      	str	r6, [sp, #0]
 801a4b2:	aa2d      	add	r2, sp, #180	; 0xb4
 801a4b4:	f7f8 ffb4 	bl	8013420 <getMagStats.constprop.0>
 801a4b8:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801a4bc:	eddf 6ab4 	vldr	s13, [pc, #720]	; 801a790 <MEMS_runMagCal+0x83c>
 801a4c0:	461f      	mov	r7, r3
 801a4c2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801a4c6:	005b      	lsls	r3, r3, #1
 801a4c8:	ee07 3a90 	vmov	s15, r3
 801a4cc:	ee07 0a10 	vmov	s14, r0
 801a4d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a4d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a4d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a4dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4e4:	dc0f      	bgt.n	801a506 <MEMS_runMagCal+0x5b2>
 801a4e6:	ed96 7a00 	vldr	s14, [r6]
 801a4ea:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801a4ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4f6:	bfc3      	ittte	gt
 801a4f8:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 801a4fc:	fab3 f383 	clzgt	r3, r3
 801a500:	095b      	lsrgt	r3, r3, #5
 801a502:	2301      	movle	r3, #1
 801a504:	9303      	str	r3, [sp, #12]
 801a506:	edd6 7a00 	vldr	s15, [r6]
 801a50a:	f8db 6004 	ldr.w	r6, [fp, #4]
 801a50e:	9620      	str	r6, [sp, #128]	; 0x80
 801a510:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801a514:	eec7 7a89 	vdiv.f32	s15, s15, s18
 801a518:	ee17 0a90 	vmov	r0, s15
 801a51c:	f007 f8c0 	bl	80216a0 <roundf>
 801a520:	ee07 0a10 	vmov	s14, r0
 801a524:	edda 7a00 	vldr	s15, [sl]
 801a528:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801a52c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801a530:	ee17 3a10 	vmov	r3, s14
 801a534:	ee17 0a90 	vmov	r0, s15
 801a538:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 801a53c:	f007 f8b0 	bl	80216a0 <roundf>
 801a540:	eddf 5a94 	vldr	s11, [pc, #592]	; 801a794 <MEMS_runMagCal+0x840>
 801a544:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 801a548:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801a54c:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 801a550:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 801a554:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 801a558:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801a55c:	ee06 0a10 	vmov	s12, r0
 801a560:	ee27 7a25 	vmul.f32	s14, s14, s11
 801a564:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801a568:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 801a56c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801a570:	ee16 2a90 	vmov	r2, s13
 801a574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a578:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 801a57c:	f8d9 0000 	ldr.w	r0, [r9]
 801a580:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 801a584:	f1b8 0f01 	cmp.w	r8, #1
 801a588:	ee16 0a10 	vmov	r0, s12
 801a58c:	fa1f fc82 	uxth.w	ip, r2
 801a590:	bf08      	it	eq
 801a592:	23ff      	moveq	r3, #255	; 0xff
 801a594:	ee17 2a10 	vmov	r2, s14
 801a598:	ee17 1a90 	vmov	r1, s15
 801a59c:	bf08      	it	eq
 801a59e:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 801a5a2:	9b03      	ldr	r3, [sp, #12]
 801a5a4:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 801a5a8:	b292      	uxth	r2, r2
 801a5aa:	b289      	uxth	r1, r1
 801a5ac:	2000      	movs	r0, #0
 801a5ae:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 801a5b2:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 801a5b6:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 801a5ba:	f88b 0000 	strb.w	r0, [fp]
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	f000 8117 	beq.w	801a7f2 <MEMS_runMagCal+0x89e>
 801a5c4:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 801a5c8:	f88b 0001 	strb.w	r0, [fp, #1]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	f041 811a 	bne.w	801b806 <MEMS_runMagCal+0x18b2>
 801a5d2:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 801a5d6:	ad0e      	add	r5, sp, #56	; 0x38
 801a5d8:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 801a5dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a5e0:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801a5e4:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 801a5e8:	f8cb 6008 	str.w	r6, [fp, #8]
 801a5ec:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 801a5f0:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 801a5f4:	eddf 7a68 	vldr	s15, [pc, #416]	; 801a798 <MEMS_runMagCal+0x844>
 801a5f8:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 801a5fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a600:	fb00 f404 	mul.w	r4, r0, r4
 801a604:	ee05 4a90 	vmov	s11, r4
 801a608:	fb00 f406 	mul.w	r4, r0, r6
 801a60c:	fb00 f00e 	mul.w	r0, r0, lr
 801a610:	ee06 0a10 	vmov	s12, r0
 801a614:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 801a618:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 801a61c:	ee03 0a90 	vmov	s7, r0
 801a620:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 801a624:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 801a628:	ee05 4a10 	vmov	s10, r4
 801a62c:	ee04 0a10 	vmov	s8, r0
 801a630:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 801a634:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801a638:	ee04 0a90 	vmov	s9, r0
 801a63c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801a640:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801a644:	f8dc 0000 	ldr.w	r0, [ip]
 801a648:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 801a64c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801a650:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a654:	ee26 6a27 	vmul.f32	s12, s12, s15
 801a658:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801a65c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801a660:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801a664:	2001      	movs	r0, #1
 801a666:	24ff      	movs	r4, #255	; 0xff
 801a668:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 801a66c:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 801a670:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 801a674:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 801a678:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 801a67c:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 801a680:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 801a684:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 801a688:	f88b 4012 	strb.w	r4, [fp, #18]
 801a68c:	2f00      	cmp	r7, #0
 801a68e:	f001 82e5 	beq.w	801bc5c <MEMS_runMagCal+0x1d08>
 801a692:	9b05      	ldr	r3, [sp, #20]
 801a694:	ed9f 3a43 	vldr	s6, [pc, #268]	; 801a7a4 <MEMS_runMagCal+0x850>
 801a698:	ed93 0a01 	vldr	s0, [r3, #4]
 801a69c:	f89b 1011 	ldrb.w	r1, [fp, #17]
 801a6a0:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 801a6a4:	2200      	movs	r2, #0
 801a6a6:	ee20 3a03 	vmul.f32	s6, s0, s6
 801a6aa:	f04f 34ff 	mov.w	r4, #4294967295
 801a6ae:	4616      	mov	r6, r2
 801a6b0:	fb96 f3f0 	sdiv	r3, r6, r0
 801a6b4:	fb00 6313 	mls	r3, r0, r3, r6
 801a6b8:	b2db      	uxtb	r3, r3
 801a6ba:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801a6be:	1c66      	adds	r6, r4, #1
 801a6c0:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 801a6c4:	ee07 4a90 	vmov	s15, r4
 801a6c8:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 801a6cc:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801a6d0:	ee06 4a90 	vmov	s13, r4
 801a6d4:	fb96 f4f1 	sdiv	r4, r6, r1
 801a6d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a6dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a6e0:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801a6e4:	ee07 3a10 	vmov	s14, r3
 801a6e8:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801a6ec:	ee67 7a85 	vmul.f32	s15, s15, s10
 801a6f0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801a6f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a6f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a6fc:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801a700:	fb01 6414 	mls	r4, r1, r4, r6
 801a704:	b264      	sxtb	r4, r4
 801a706:	ee37 7a64 	vsub.f32	s14, s14, s9
 801a70a:	3201      	adds	r2, #1
 801a70c:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a710:	b212      	sxth	r2, r2
 801a712:	eee7 7a07 	vfma.f32	s15, s14, s14
 801a716:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 801a71a:	42ba      	cmp	r2, r7
 801a71c:	4616      	mov	r6, r2
 801a71e:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801a722:	ee67 7a03 	vmul.f32	s15, s14, s6
 801a726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a72a:	ee17 ca90 	vmov	ip, s15
 801a72e:	f8a3 c014 	strh.w	ip, [r3, #20]
 801a732:	dbbd      	blt.n	801a6b0 <MEMS_runMagCal+0x75c>
 801a734:	f88b 4012 	strb.w	r4, [fp, #18]
 801a738:	428f      	cmp	r7, r1
 801a73a:	bf28      	it	cs
 801a73c:	460f      	movcs	r7, r1
 801a73e:	f88b 7010 	strb.w	r7, [fp, #16]
 801a742:	ee1c 0a10 	vmov	r0, s24
 801a746:	9500      	str	r5, [sp, #0]
 801a748:	4642      	mov	r2, r8
 801a74a:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 801a74e:	ab0d      	add	r3, sp, #52	; 0x34
 801a750:	f7f8 fe66 	bl	8013420 <getMagStats.constprop.0>
 801a754:	ed9f 7a11 	vldr	s14, [pc, #68]	; 801a79c <MEMS_runMagCal+0x848>
 801a758:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801a75c:	edd5 6a00 	vldr	s13, [r5]
 801a760:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a764:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801a768:	eef0 7ae7 	vabs.f32	s15, s15
 801a76c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a774:	d524      	bpl.n	801a7c0 <MEMS_runMagCal+0x86c>
 801a776:	e01d      	b.n	801a7b4 <MEMS_runMagCal+0x860>
 801a778:	41f00001 	.word	0x41f00001
 801a77c:	3f8ccccd 	.word	0x3f8ccccd
 801a780:	3f266666 	.word	0x3f266666
 801a784:	3eb33333 	.word	0x3eb33333
 801a788:	3f19999a 	.word	0x3f19999a
 801a78c:	3a83126f 	.word	0x3a83126f
 801a790:	3c23d70a 	.word	0x3c23d70a
 801a794:	447a0000 	.word	0x447a0000
 801a798:	358637bd 	.word	0x358637bd
 801a79c:	423c0000 	.word	0x423c0000
 801a7a0:	4423d666 	.word	0x4423d666
 801a7a4:	42c80000 	.word	0x42c80000
 801a7a8:	427c0000 	.word	0x427c0000
 801a7ac:	3f666666 	.word	0x3f666666
 801a7b0:	3eaaaaab 	.word	0x3eaaaaab
 801a7b4:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7bc:	f101 8255 	bmi.w	801bc6a <MEMS_runMagCal+0x1d16>
 801a7c0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801a7c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7cc:	d507      	bpl.n	801a7de <MEMS_runMagCal+0x88a>
 801a7ce:	eef4 6a47 	vcmp.f32	s13, s14
 801a7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7d6:	9b03      	ldr	r3, [sp, #12]
 801a7d8:	bf48      	it	mi
 801a7da:	2302      	movmi	r3, #2
 801a7dc:	9303      	str	r3, [sp, #12]
 801a7de:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801a7e2:	9a03      	ldr	r2, [sp, #12]
 801a7e4:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 801a7e8:	2bc8      	cmp	r3, #200	; 0xc8
 801a7ea:	d902      	bls.n	801a7f2 <MEMS_runMagCal+0x89e>
 801a7ec:	2302      	movs	r3, #2
 801a7ee:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 801a7f2:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 801a7f6:	ecbd 8b0a 	vpop	{d8-d12}
 801a7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7fe:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801a802:	4291      	cmp	r1, r2
 801a804:	f4ff abd6 	bcc.w	8019fb4 <MEMS_runMagCal+0x60>
 801a808:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	f47f abe5 	bne.w	8019fdc <MEMS_runMagCal+0x88>
 801a812:	f7ff bbd9 	b.w	8019fc8 <MEMS_runMagCal+0x74>
 801a816:	2702      	movs	r7, #2
 801a818:	2300      	movs	r3, #0
 801a81a:	9307      	str	r3, [sp, #28]
 801a81c:	9303      	str	r3, [sp, #12]
 801a81e:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 801a7a0 <MEMS_runMagCal+0x84c>
 801a822:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a82a:	f140 8270 	bpl.w	801ad0e <MEMS_runMagCal+0xdba>
 801a82e:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 801a7a4 <MEMS_runMagCal+0x850>
 801a832:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 801a836:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a83a:	2b01      	cmp	r3, #1
 801a83c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801a840:	d911      	bls.n	801a866 <MEMS_runMagCal+0x912>
 801a842:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801a846:	ee17 3a10 	vmov	r3, s14
 801a84a:	b29b      	uxth	r3, r3
 801a84c:	2bc7      	cmp	r3, #199	; 0xc7
 801a84e:	f201 8387 	bhi.w	801bf60 <MEMS_runMagCal+0x200c>
 801a852:	2300      	movs	r3, #0
 801a854:	22ff      	movs	r2, #255	; 0xff
 801a856:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 801a85a:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 801a85e:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 801a862:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 801a866:	2f00      	cmp	r7, #0
 801a868:	f040 825d 	bne.w	801ad26 <MEMS_runMagCal+0xdd2>
 801a86c:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 801a870:	2b00      	cmp	r3, #0
 801a872:	f2c0 83ba 	blt.w	801afea <MEMS_runMagCal+0x1096>
 801a876:	f89b 6011 	ldrb.w	r6, [fp, #17]
 801a87a:	1c5a      	adds	r2, r3, #1
 801a87c:	fbb2 f3f6 	udiv	r3, r2, r6
 801a880:	fb06 2313 	mls	r3, r6, r3, r2
 801a884:	b25b      	sxtb	r3, r3
 801a886:	461d      	mov	r5, r3
 801a888:	f89b 4010 	ldrb.w	r4, [fp, #16]
 801a88c:	f88b 3012 	strb.w	r3, [fp, #18]
 801a890:	3401      	adds	r4, #1
 801a892:	42b4      	cmp	r4, r6
 801a894:	bfa8      	it	ge
 801a896:	4634      	movge	r4, r6
 801a898:	fa5f f884 	uxtb.w	r8, r4
 801a89c:	ee17 0a90 	vmov	r0, s15
 801a8a0:	f88b 8010 	strb.w	r8, [fp, #16]
 801a8a4:	f006 fefc 	bl	80216a0 <roundf>
 801a8a8:	ee07 0a90 	vmov	s15, r0
 801a8ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a8b0:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 801a8b4:	ee17 0a90 	vmov	r0, s15
 801a8b8:	8298      	strh	r0, [r3, #20]
 801a8ba:	2f00      	cmp	r7, #0
 801a8bc:	f040 8233 	bne.w	801ad26 <MEMS_runMagCal+0xdd2>
 801a8c0:	f8db 200c 	ldr.w	r2, [fp, #12]
 801a8c4:	b122      	cbz	r2, 801a8d0 <MEMS_runMagCal+0x97c>
 801a8c6:	9908      	ldr	r1, [sp, #32]
 801a8c8:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 801a8cc:	4299      	cmp	r1, r3
 801a8ce:	d390      	bcc.n	801a7f2 <MEMS_runMagCal+0x89e>
 801a8d0:	9b03      	ldr	r3, [sp, #12]
 801a8d2:	2b01      	cmp	r3, #1
 801a8d4:	d08d      	beq.n	801a7f2 <MEMS_runMagCal+0x89e>
 801a8d6:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 801a8da:	1ebb      	subs	r3, r7, #2
 801a8dc:	2b01      	cmp	r3, #1
 801a8de:	f240 823e 	bls.w	801ad5e <MEMS_runMagCal+0xe0a>
 801a8e2:	9b05      	ldr	r3, [sp, #20]
 801a8e4:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801a7a8 <MEMS_runMagCal+0x854>
 801a8e8:	ed93 8a01 	vldr	s16, [r3, #4]
 801a8ec:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 801a8f0:	9a06      	ldr	r2, [sp, #24]
 801a8f2:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 801a8f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a8f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a8fc:	eec7 8a08 	vdiv.f32	s17, s14, s16
 801a900:	fb02 1404 	mla	r4, r2, r4, r1
 801a904:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801a908:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 801a90c:	3310      	adds	r3, #16
 801a90e:	42a3      	cmp	r3, r4
 801a910:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 801a914:	ee28 9a89 	vmul.f32	s18, s17, s18
 801a918:	ee0c 2a10 	vmov	s24, r2
 801a91c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801a924:	ee17 2a90 	vmov	r2, s15
 801a928:	fa1f f982 	uxth.w	r9, r2
 801a92c:	f080 820a 	bcs.w	801ad44 <MEMS_runMagCal+0xdf0>
 801a930:	f242 3328 	movw	r3, #9000	; 0x2328
 801a934:	429c      	cmp	r4, r3
 801a936:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801a93a:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 801a93e:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 801a942:	bf1a      	itte	ne
 801a944:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 801a948:	3c28      	subne	r4, #40	; 0x28
 801a94a:	2400      	moveq	r4, #0
 801a94c:	42a8      	cmp	r0, r5
 801a94e:	f102 0201 	add.w	r2, r2, #1
 801a952:	f000 8741 	beq.w	801b7d8 <MEMS_runMagCal+0x1884>
 801a956:	1a12      	subs	r2, r2, r0
 801a958:	fb92 f1f5 	sdiv	r1, r2, r5
 801a95c:	fb05 2211 	mls	r2, r5, r1, r2
 801a960:	2a00      	cmp	r2, #0
 801a962:	bfb8      	it	lt
 801a964:	1952      	addlt	r2, r2, r5
 801a966:	b211      	sxth	r1, r2
 801a968:	b358      	cbz	r0, 801a9c2 <MEMS_runMagCal+0xa6e>
 801a96a:	3801      	subs	r0, #1
 801a96c:	b280      	uxth	r0, r0
 801a96e:	3001      	adds	r0, #1
 801a970:	1b36      	subs	r6, r6, r4
 801a972:	9f03      	ldr	r7, [sp, #12]
 801a974:	b2b6      	uxth	r6, r6
 801a976:	4408      	add	r0, r1
 801a978:	e002      	b.n	801a980 <MEMS_runMagCal+0xa2c>
 801a97a:	3101      	adds	r1, #1
 801a97c:	4281      	cmp	r1, r0
 801a97e:	d01b      	beq.n	801a9b8 <MEMS_runMagCal+0xa64>
 801a980:	fb91 f3f5 	sdiv	r3, r1, r5
 801a984:	fb05 1313 	mls	r3, r5, r3, r1
 801a988:	b2db      	uxtb	r3, r3
 801a98a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801a98e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 801a992:	4432      	add	r2, r6
 801a994:	b212      	sxth	r2, r2
 801a996:	2a00      	cmp	r2, #0
 801a998:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801a99c:	daed      	bge.n	801a97a <MEMS_runMagCal+0xa26>
 801a99e:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801a9a2:	1e5a      	subs	r2, r3, #1
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	f000 831e 	beq.w	801afe6 <MEMS_runMagCal+0x1092>
 801a9aa:	3101      	adds	r1, #1
 801a9ac:	4281      	cmp	r1, r0
 801a9ae:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 801a9b2:	f04f 0701 	mov.w	r7, #1
 801a9b6:	d1e3      	bne.n	801a980 <MEMS_runMagCal+0xa2c>
 801a9b8:	2f01      	cmp	r7, #1
 801a9ba:	f001 8104 	beq.w	801bbc6 <MEMS_runMagCal+0x1c72>
 801a9be:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801a9c2:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 801a9c6:	2800      	cmp	r0, #0
 801a9c8:	f000 81c2 	beq.w	801ad50 <MEMS_runMagCal+0xdfc>
 801a9cc:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801a9d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a9d2:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801a9d6:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 801a9da:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801a9de:	3308      	adds	r3, #8
 801a9e0:	441c      	add	r4, r3
 801a9e2:	42a2      	cmp	r2, r4
 801a9e4:	f200 8700 	bhi.w	801b7e8 <MEMS_runMagCal+0x1894>
 801a9e8:	9b07      	ldr	r3, [sp, #28]
 801a9ea:	b923      	cbnz	r3, 801a9f6 <MEMS_runMagCal+0xaa2>
 801a9ec:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801a9f0:	2b0a      	cmp	r3, #10
 801a9f2:	f240 81b1 	bls.w	801ad58 <MEMS_runMagCal+0xe04>
 801a9f6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801a9fa:	9302      	str	r3, [sp, #8]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	f000 81ab 	beq.w	801ad58 <MEMS_runMagCal+0xe04>
 801aa02:	ee29 aa09 	vmul.f32	s20, s18, s18
 801aa06:	ed5f 6a97 	vldr	s13, [pc, #-604]	; 801a7ac <MEMS_runMagCal+0x858>
 801aa0a:	ed1f 7a97 	vldr	s14, [pc, #-604]	; 801a7b0 <MEMS_runMagCal+0x85c>
 801aa0e:	9b03      	ldr	r3, [sp, #12]
 801aa10:	9309      	str	r3, [sp, #36]	; 0x24
 801aa12:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 801aa16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801aa1a:	2100      	movs	r1, #0
 801aa1c:	ee2a aa26 	vmul.f32	s20, s20, s13
 801aa20:	ee28 8a07 	vmul.f32	s16, s16, s14
 801aa24:	ee69 9a29 	vmul.f32	s19, s18, s19
 801aa28:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801aa2c:	468a      	mov	sl, r1
 801aa2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801aa30:	f813 203a 	ldrb.w	r2, [r3, sl, lsl #3]
 801aa34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801aa38:	2a00      	cmp	r2, #0
 801aa3a:	f000 80ee 	beq.w	801ac1a <MEMS_runMagCal+0xcc6>
 801aa3e:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 801aa42:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801aa46:	ee07 4a90 	vmov	s15, r4
 801aa4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa4e:	eef0 7ae7 	vabs.f32	s15, s15
 801aa52:	eef4 7ae8 	vcmpe.f32	s15, s17
 801aa56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa5a:	f100 8217 	bmi.w	801ae8c <MEMS_runMagCal+0xf38>
 801aa5e:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 801aa62:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 801aa66:	2f00      	cmp	r7, #0
 801aa68:	f000 822f 	beq.w	801aeca <MEMS_runMagCal+0xf76>
 801aa6c:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 801aa70:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 801aa74:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 801aa78:	1b52      	subs	r2, r2, r5
 801aa7a:	fb02 f102 	mul.w	r1, r2, r2
 801aa7e:	1b02      	subs	r2, r0, r4
 801aa80:	fb02 1202 	mla	r2, r2, r2, r1
 801aa84:	1b9b      	subs	r3, r3, r6
 801aa86:	fb03 2303 	mla	r3, r3, r3, r2
 801aa8a:	ee07 3a90 	vmov	s15, r3
 801aa8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa92:	eeb4 aae7 	vcmpe.f32	s20, s15
 801aa96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa9a:	f300 80be 	bgt.w	801ac1a <MEMS_runMagCal+0xcc6>
 801aa9e:	fb94 f3f9 	sdiv	r3, r4, r9
 801aaa2:	fb09 4313 	mls	r3, r9, r3, r4
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	bfb8      	it	lt
 801aaaa:	444b      	addlt	r3, r9
 801aaac:	b21b      	sxth	r3, r3
 801aaae:	ee07 3a90 	vmov	s15, r3
 801aab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aab6:	ee67 7a88 	vmul.f32	s15, s15, s16
 801aaba:	ee17 0a90 	vmov	r0, s15
 801aabe:	f006 fdef 	bl	80216a0 <roundf>
 801aac2:	fb95 f3f9 	sdiv	r3, r5, r9
 801aac6:	ee07 0a90 	vmov	s15, r0
 801aaca:	fb09 5313 	mls	r3, r9, r3, r5
 801aace:	2b00      	cmp	r3, #0
 801aad0:	bfb8      	it	lt
 801aad2:	444b      	addlt	r3, r9
 801aad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801aad8:	b21b      	sxth	r3, r3
 801aada:	edcd 7a04 	vstr	s15, [sp, #16]
 801aade:	ee07 3a90 	vmov	s15, r3
 801aae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aae6:	f89d 8010 	ldrb.w	r8, [sp, #16]
 801aaea:	ee67 7a88 	vmul.f32	s15, s15, s16
 801aaee:	ee17 0a90 	vmov	r0, s15
 801aaf2:	f006 fdd5 	bl	80216a0 <roundf>
 801aaf6:	fb96 f3f9 	sdiv	r3, r6, r9
 801aafa:	ee07 0a90 	vmov	s15, r0
 801aafe:	fb09 6313 	mls	r3, r9, r3, r6
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	bfb8      	it	lt
 801ab06:	444b      	addlt	r3, r9
 801ab08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ab0c:	b21b      	sxth	r3, r3
 801ab0e:	edcd 7a04 	vstr	s15, [sp, #16]
 801ab12:	ee07 3a90 	vmov	s15, r3
 801ab16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ab1a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 801ab1e:	9204      	str	r2, [sp, #16]
 801ab20:	ee67 7a88 	vmul.f32	s15, s15, s16
 801ab24:	ee17 0a90 	vmov	r0, s15
 801ab28:	f006 fdba 	bl	80216a0 <roundf>
 801ab2c:	ee07 0a90 	vmov	s15, r0
 801ab30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ab34:	f1b8 0f1f 	cmp.w	r8, #31
 801ab38:	edcd 7a06 	vstr	s15, [sp, #24]
 801ab3c:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801ab40:	9106      	str	r1, [sp, #24]
 801ab42:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 801ab46:	f240 8249 	bls.w	801afdc <MEMS_runMagCal+0x1088>
 801ab4a:	f1a8 0220 	sub.w	r2, r8, #32
 801ab4e:	2101      	movs	r1, #1
 801ab50:	fa01 f202 	lsl.w	r2, r1, r2
 801ab54:	401a      	ands	r2, r3
 801ab56:	9804      	ldr	r0, [sp, #16]
 801ab58:	281f      	cmp	r0, #31
 801ab5a:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 801ab5e:	f240 822b 	bls.w	801afb8 <MEMS_runMagCal+0x1064>
 801ab62:	f1a0 0120 	sub.w	r1, r0, #32
 801ab66:	2001      	movs	r0, #1
 801ab68:	fa00 f101 	lsl.w	r1, r0, r1
 801ab6c:	ea01 0c03 	and.w	ip, r1, r3
 801ab70:	9906      	ldr	r1, [sp, #24]
 801ab72:	291f      	cmp	r1, #31
 801ab74:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 801ab78:	f240 822a 	bls.w	801afd0 <MEMS_runMagCal+0x107c>
 801ab7c:	f1a1 0020 	sub.w	r0, r1, #32
 801ab80:	2101      	movs	r1, #1
 801ab82:	fa01 f000 	lsl.w	r0, r1, r0
 801ab86:	4003      	ands	r3, r0
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	f040 812b 	bne.w	801ade4 <MEMS_runMagCal+0xe90>
 801ab8e:	ea52 030c 	orrs.w	r3, r2, ip
 801ab92:	f040 812c 	bne.w	801adee <MEMS_runMagCal+0xe9a>
 801ab96:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 801ab9a:	930a      	str	r3, [sp, #40]	; 0x28
 801ab9c:	461a      	mov	r2, r3
 801ab9e:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801aba2:	3301      	adds	r3, #1
 801aba4:	4694      	mov	ip, r2
 801aba6:	930b      	str	r3, [sp, #44]	; 0x2c
 801aba8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801abaa:	fb92 f3fc 	sdiv	r3, r2, ip
 801abae:	3701      	adds	r7, #1
 801abb0:	4567      	cmp	r7, ip
 801abb2:	bfa8      	it	ge
 801abb4:	4667      	movge	r7, ip
 801abb6:	fb0c 2c13 	mls	ip, ip, r3, r2
 801abba:	b2ff      	uxtb	r7, r7
 801abbc:	fa4f fc8c 	sxtb.w	ip, ip
 801abc0:	9905      	ldr	r1, [sp, #20]
 801abc2:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 801abc6:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801abca:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 801abce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801abd0:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801abd4:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 801abd8:	1a9b      	subs	r3, r3, r2
 801abda:	fb01 330a 	mla	r3, r1, sl, r3
 801abde:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 801abe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801abe4:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 801abe8:	429f      	cmp	r7, r3
 801abea:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 801abee:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 801abf2:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 801abf6:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 801abfa:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 801abfe:	f000 8766 	beq.w	801bace <MEMS_runMagCal+0x1b7a>
 801ac02:	9b06      	ldr	r3, [sp, #24]
 801ac04:	9a04      	ldr	r2, [sp, #16]
 801ac06:	ee1c 0a10 	vmov	r0, s24
 801ac0a:	4641      	mov	r1, r8
 801ac0c:	f7f8 f8be 	bl	8012d8c <MEMS_setMagIndexToOne>
 801ac10:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801ac14:	9302      	str	r3, [sp, #8]
 801ac16:	2301      	movs	r3, #1
 801ac18:	9309      	str	r3, [sp, #36]	; 0x24
 801ac1a:	9b02      	ldr	r3, [sp, #8]
 801ac1c:	f10a 0a01 	add.w	sl, sl, #1
 801ac20:	fa0f fa8a 	sxth.w	sl, sl
 801ac24:	459a      	cmp	sl, r3
 801ac26:	4651      	mov	r1, sl
 801ac28:	f6ff af01 	blt.w	801aa2e <MEMS_runMagCal+0xada>
 801ac2c:	f89b 3000 	ldrb.w	r3, [fp]
 801ac30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac32:	431a      	orrs	r2, r3
 801ac34:	b2d3      	uxtb	r3, r2
 801ac36:	f88b 3000 	strb.w	r3, [fp]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	f43f add9 	beq.w	801a7f2 <MEMS_runMagCal+0x89e>
 801ac40:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801ac44:	9306      	str	r3, [sp, #24]
 801ac46:	2b19      	cmp	r3, #25
 801ac48:	f67f add3 	bls.w	801a7f2 <MEMS_runMagCal+0x89e>
 801ac4c:	f8db 3008 	ldr.w	r3, [fp, #8]
 801ac50:	9309      	str	r3, [sp, #36]	; 0x24
 801ac52:	b123      	cbz	r3, 801ac5e <MEMS_runMagCal+0xd0a>
 801ac54:	f8db 3004 	ldr.w	r3, [fp, #4]
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	f040 8591 	bne.w	801b780 <MEMS_runMagCal+0x182c>
 801ac5e:	9b07      	ldr	r3, [sp, #28]
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	f040 873d 	bne.w	801bae0 <MEMS_runMagCal+0x1b8c>
 801ac66:	9b05      	ldr	r3, [sp, #20]
 801ac68:	9903      	ldr	r1, [sp, #12]
 801ac6a:	ed93 8a01 	vldr	s16, [r3, #4]
 801ac6e:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 801ac72:	9302      	str	r3, [sp, #8]
 801ac74:	2600      	movs	r6, #0
 801ac76:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 801ac7a:	9304      	str	r3, [sp, #16]
 801ac7c:	f04f 0a01 	mov.w	sl, #1
 801ac80:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 801ac84:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 801ac88:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 801ac8c:	9624      	str	r6, [sp, #144]	; 0x90
 801ac8e:	4657      	mov	r7, sl
 801ac90:	460b      	mov	r3, r1
 801ac92:	460c      	mov	r4, r1
 801ac94:	e013      	b.n	801acbe <MEMS_runMagCal+0xd6a>
 801ac96:	f1b9 0f00 	cmp.w	r9, #0
 801ac9a:	bf18      	it	ne
 801ac9c:	3101      	addne	r1, #1
 801ac9e:	2d00      	cmp	r5, #0
 801aca0:	bf18      	it	ne
 801aca2:	3401      	addne	r4, #1
 801aca4:	2a00      	cmp	r2, #0
 801aca6:	bf18      	it	ne
 801aca8:	3301      	addne	r3, #1
 801acaa:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 801acae:	b2c9      	uxtb	r1, r1
 801acb0:	b2e4      	uxtb	r4, r4
 801acb2:	b2db      	uxtb	r3, r3
 801acb4:	f000 81ae 	beq.w	801b014 <MEMS_runMagCal+0x10c0>
 801acb8:	3601      	adds	r6, #1
 801acba:	fa5f fa8c 	uxtb.w	sl, ip
 801acbe:	9804      	ldr	r0, [sp, #16]
 801acc0:	f1a6 0220 	sub.w	r2, r6, #32
 801acc4:	fa07 f202 	lsl.w	r2, r7, r2
 801acc8:	ea02 0500 	and.w	r5, r2, r0
 801accc:	9802      	ldr	r0, [sp, #8]
 801acce:	2e1f      	cmp	r6, #31
 801acd0:	ea08 0902 	and.w	r9, r8, r2
 801acd4:	f10a 0c01 	add.w	ip, sl, #1
 801acd8:	ea02 0200 	and.w	r2, r2, r0
 801acdc:	fa07 f006 	lsl.w	r0, r7, r6
 801ace0:	d8d9      	bhi.n	801ac96 <MEMS_runMagCal+0xd42>
 801ace2:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 801ace6:	ea00 0902 	and.w	r9, r0, r2
 801acea:	4005      	ands	r5, r0
 801acec:	ea0e 0000 	and.w	r0, lr, r0
 801acf0:	f1b9 0f00 	cmp.w	r9, #0
 801acf4:	bf18      	it	ne
 801acf6:	3401      	addne	r4, #1
 801acf8:	2d00      	cmp	r5, #0
 801acfa:	bf0c      	ite	eq
 801acfc:	461d      	moveq	r5, r3
 801acfe:	1c5d      	addne	r5, r3, #1
 801ad00:	2800      	cmp	r0, #0
 801ad02:	bf18      	it	ne
 801ad04:	3101      	addne	r1, #1
 801ad06:	b2e4      	uxtb	r4, r4
 801ad08:	b2eb      	uxtb	r3, r5
 801ad0a:	b2c9      	uxtb	r1, r1
 801ad0c:	e7d4      	b.n	801acb8 <MEMS_runMagCal+0xd64>
 801ad0e:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 801ad12:	eddf 7abb 	vldr	s15, [pc, #748]	; 801b000 <MEMS_runMagCal+0x10ac>
 801ad16:	2b01      	cmp	r3, #1
 801ad18:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801ad1c:	f63f ad99 	bhi.w	801a852 <MEMS_runMagCal+0x8fe>
 801ad20:	2f00      	cmp	r7, #0
 801ad22:	f43f ada3 	beq.w	801a86c <MEMS_runMagCal+0x918>
 801ad26:	9908      	ldr	r1, [sp, #32]
 801ad28:	f8cb 100c 	str.w	r1, [fp, #12]
 801ad2c:	2200      	movs	r2, #0
 801ad2e:	23ff      	movs	r3, #255	; 0xff
 801ad30:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 801ad34:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 801ad38:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 801ad3c:	ecbd 8b0a 	vpop	{d8-d12}
 801ad40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad44:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801ad48:	4634      	mov	r4, r6
 801ad4a:	2800      	cmp	r0, #0
 801ad4c:	f47f ae3e 	bne.w	801a9cc <MEMS_runMagCal+0xa78>
 801ad50:	9b07      	ldr	r3, [sp, #28]
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	f47f ae4f 	bne.w	801a9f6 <MEMS_runMagCal+0xaa2>
 801ad58:	9b03      	ldr	r3, [sp, #12]
 801ad5a:	9309      	str	r3, [sp, #36]	; 0x24
 801ad5c:	e766      	b.n	801ac2c <MEMS_runMagCal+0xcd8>
 801ad5e:	45b0      	cmp	r8, r6
 801ad60:	f000 86c7 	beq.w	801baf2 <MEMS_runMagCal+0x1b9e>
 801ad64:	2f03      	cmp	r7, #3
 801ad66:	f47f adbc 	bne.w	801a8e2 <MEMS_runMagCal+0x98e>
 801ad6a:	ee07 2a90 	vmov	s15, r2
 801ad6e:	eddf 6aa5 	vldr	s13, [pc, #660]	; 801b004 <MEMS_runMagCal+0x10b0>
 801ad72:	ed9b 7a01 	vldr	s14, [fp, #4]
 801ad76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ad7a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801ad7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ad82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ad86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad8a:	f77f adaa 	ble.w	801a8e2 <MEMS_runMagCal+0x98e>
 801ad8e:	f8db 3008 	ldr.w	r3, [fp, #8]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	f43f ada5 	beq.w	801a8e2 <MEMS_runMagCal+0x98e>
 801ad98:	eddd 7a08 	vldr	s15, [sp, #32]
 801ad9c:	330a      	adds	r3, #10
 801ad9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ada2:	ee07 3a90 	vmov	s15, r3
 801ada6:	ee67 6a26 	vmul.f32	s13, s14, s13
 801adaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801adae:	eef4 6ae7 	vcmpe.f32	s13, s15
 801adb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adb6:	f77f ad94 	ble.w	801a8e2 <MEMS_runMagCal+0x98e>
 801adba:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	f47f ad8f 	bne.w	801a8e2 <MEMS_runMagCal+0x98e>
 801adc4:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 801adc8:	2b00      	cmp	r3, #0
 801adca:	f43f ad12 	beq.w	801a7f2 <MEMS_runMagCal+0x89e>
 801adce:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 801add2:	2bff      	cmp	r3, #255	; 0xff
 801add4:	f47f ad0d 	bne.w	801a7f2 <MEMS_runMagCal+0x89e>
 801add8:	e583      	b.n	801a8e2 <MEMS_runMagCal+0x98e>
 801adda:	2300      	movs	r3, #0
 801addc:	9307      	str	r3, [sp, #28]
 801adde:	9303      	str	r3, [sp, #12]
 801ade0:	2700      	movs	r7, #0
 801ade2:	e51c      	b.n	801a81e <MEMS_runMagCal+0x8ca>
 801ade4:	b11a      	cbz	r2, 801adee <MEMS_runMagCal+0xe9a>
 801ade6:	f1bc 0f00 	cmp.w	ip, #0
 801adea:	f47f af16 	bne.w	801ac1a <MEMS_runMagCal+0xcc6>
 801adee:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 801adf2:	930a      	str	r3, [sp, #40]	; 0x28
 801adf4:	461a      	mov	r2, r3
 801adf6:	4297      	cmp	r7, r2
 801adf8:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801adfc:	f000 849e 	beq.w	801b73c <MEMS_runMagCal+0x17e8>
 801ae00:	3301      	adds	r3, #1
 801ae02:	4611      	mov	r1, r2
 801ae04:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae06:	1bdb      	subs	r3, r3, r7
 801ae08:	fb93 f2f2 	sdiv	r2, r3, r2
 801ae0c:	fb01 3212 	mls	r2, r1, r2, r3
 801ae10:	2a00      	cmp	r2, #0
 801ae12:	bfbc      	itt	lt
 801ae14:	460b      	movlt	r3, r1
 801ae16:	18d2      	addlt	r2, r2, r3
 801ae18:	468c      	mov	ip, r1
 801ae1a:	b212      	sxth	r2, r2
 801ae1c:	f107 3eff 	add.w	lr, r7, #4294967295
 801ae20:	fa5f fe8e 	uxtb.w	lr, lr
 801ae24:	f10e 0e01 	add.w	lr, lr, #1
 801ae28:	4496      	add	lr, r2
 801ae2a:	e002      	b.n	801ae32 <MEMS_runMagCal+0xede>
 801ae2c:	4572      	cmp	r2, lr
 801ae2e:	f43f aebb 	beq.w	801aba8 <MEMS_runMagCal+0xc54>
 801ae32:	fb92 f3fc 	sdiv	r3, r2, ip
 801ae36:	fb0c 2313 	mls	r3, ip, r3, r2
 801ae3a:	b2db      	uxtb	r3, r3
 801ae3c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801ae40:	3201      	adds	r2, #1
 801ae42:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 801ae46:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 801ae4a:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801ae4e:	1a20      	subs	r0, r4, r0
 801ae50:	1a69      	subs	r1, r5, r1
 801ae52:	ee07 0a90 	vmov	s15, r0
 801ae56:	ee06 1a90 	vmov	s13, r1
 801ae5a:	1af3      	subs	r3, r6, r3
 801ae5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae60:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ae64:	ee07 3a10 	vmov	s14, r3
 801ae68:	eef0 7ae7 	vabs.f32	s15, s15
 801ae6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae70:	eef0 6ae6 	vabs.f32	s13, s13
 801ae74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ae78:	eeb0 7ac7 	vabs.f32	s14, s14
 801ae7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ae80:	eef4 9ae7 	vcmpe.f32	s19, s15
 801ae84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae88:	ddd0      	ble.n	801ae2c <MEMS_runMagCal+0xed8>
 801ae8a:	e6c6      	b.n	801ac1a <MEMS_runMagCal+0xcc6>
 801ae8c:	ee07 5a90 	vmov	s15, r5
 801ae90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae94:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 801ae98:	eef0 7ae7 	vabs.f32	s15, s15
 801ae9c:	eef4 8ae7 	vcmpe.f32	s17, s15
 801aea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aea4:	f77f addd 	ble.w	801aa62 <MEMS_runMagCal+0xb0e>
 801aea8:	ee07 6a90 	vmov	s15, r6
 801aeac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aeb0:	eef0 7ae7 	vabs.f32	s15, s15
 801aeb4:	eef4 8ae7 	vcmpe.f32	s17, s15
 801aeb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aebc:	f73f aead 	bgt.w	801ac1a <MEMS_runMagCal+0xcc6>
 801aec0:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 801aec4:	2f00      	cmp	r7, #0
 801aec6:	f47f add1 	bne.w	801aa6c <MEMS_runMagCal+0xb18>
 801aeca:	fb94 f2f9 	sdiv	r2, r4, r9
 801aece:	f04f 0301 	mov.w	r3, #1
 801aed2:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 801aed6:	9b05      	ldr	r3, [sp, #20]
 801aed8:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 801aedc:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 801aee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aee2:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 801aee6:	fb09 4212 	mls	r2, r9, r2, r4
 801aeea:	2a00      	cmp	r2, #0
 801aeec:	fb01 3300 	mla	r3, r1, r0, r3
 801aef0:	bfb8      	it	lt
 801aef2:	444a      	addlt	r2, r9
 801aef4:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 801aef8:	b213      	sxth	r3, r2
 801aefa:	ee07 3a90 	vmov	s15, r3
 801aefe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af02:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 801af06:	ee67 7a88 	vmul.f32	s15, s15, s16
 801af0a:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 801af0e:	ee17 0a90 	vmov	r0, s15
 801af12:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 801af16:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 801af1a:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 801af1e:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 801af22:	f006 fbbd 	bl	80216a0 <roundf>
 801af26:	fb95 f3f9 	sdiv	r3, r5, r9
 801af2a:	ee07 0a90 	vmov	s15, r0
 801af2e:	fb09 5513 	mls	r5, r9, r3, r5
 801af32:	2d00      	cmp	r5, #0
 801af34:	bfb8      	it	lt
 801af36:	444d      	addlt	r5, r9
 801af38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801af3c:	b22d      	sxth	r5, r5
 801af3e:	edcd 7a02 	vstr	s15, [sp, #8]
 801af42:	ee07 5a90 	vmov	s15, r5
 801af46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801af4e:	ee67 7a88 	vmul.f32	s15, s15, s16
 801af52:	ee17 0a90 	vmov	r0, s15
 801af56:	f006 fba3 	bl	80216a0 <roundf>
 801af5a:	fb96 f3f9 	sdiv	r3, r6, r9
 801af5e:	ee07 0a90 	vmov	s15, r0
 801af62:	fb09 6613 	mls	r6, r9, r3, r6
 801af66:	2e00      	cmp	r6, #0
 801af68:	bfb8      	it	lt
 801af6a:	444e      	addlt	r6, r9
 801af6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801af70:	b236      	sxth	r6, r6
 801af72:	edcd 7a02 	vstr	s15, [sp, #8]
 801af76:	ee07 6a90 	vmov	s15, r6
 801af7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af7e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801af82:	9204      	str	r2, [sp, #16]
 801af84:	ee67 7a88 	vmul.f32	s15, s15, s16
 801af88:	2301      	movs	r3, #1
 801af8a:	ee17 0a90 	vmov	r0, s15
 801af8e:	9309      	str	r3, [sp, #36]	; 0x24
 801af90:	f006 fb86 	bl	80216a0 <roundf>
 801af94:	ee07 0a90 	vmov	s15, r0
 801af98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801af9c:	9a04      	ldr	r2, [sp, #16]
 801af9e:	edcd 7a02 	vstr	s15, [sp, #8]
 801afa2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801afa6:	ee1c 0a10 	vmov	r0, s24
 801afaa:	4621      	mov	r1, r4
 801afac:	f7f7 feee 	bl	8012d8c <MEMS_setMagIndexToOne>
 801afb0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801afb4:	9302      	str	r3, [sp, #8]
 801afb6:	e630      	b.n	801ac1a <MEMS_runMagCal+0xcc6>
 801afb8:	4603      	mov	r3, r0
 801afba:	2001      	movs	r0, #1
 801afbc:	fa00 f303 	lsl.w	r3, r0, r3
 801afc0:	ea01 0c03 	and.w	ip, r1, r3
 801afc4:	9906      	ldr	r1, [sp, #24]
 801afc6:	291f      	cmp	r1, #31
 801afc8:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 801afcc:	f63f add6 	bhi.w	801ab7c <MEMS_runMagCal+0xc28>
 801afd0:	460b      	mov	r3, r1
 801afd2:	2101      	movs	r1, #1
 801afd4:	fa01 f303 	lsl.w	r3, r1, r3
 801afd8:	4003      	ands	r3, r0
 801afda:	e5d5      	b.n	801ab88 <MEMS_runMagCal+0xc34>
 801afdc:	2301      	movs	r3, #1
 801afde:	fa03 f308 	lsl.w	r3, r3, r8
 801afe2:	401a      	ands	r2, r3
 801afe4:	e5b7      	b.n	801ab56 <MEMS_runMagCal+0xc02>
 801afe6:	2701      	movs	r7, #1
 801afe8:	e4c7      	b.n	801a97a <MEMS_runMagCal+0xa26>
 801afea:	2500      	movs	r5, #0
 801afec:	f89b 6011 	ldrb.w	r6, [fp, #17]
 801aff0:	462b      	mov	r3, r5
 801aff2:	e449      	b.n	801a888 <MEMS_runMagCal+0x934>
 801aff4:	460f      	mov	r7, r1
 801aff6:	e40f      	b.n	801a818 <MEMS_runMagCal+0x8c4>
 801aff8:	2300      	movs	r3, #0
 801affa:	9304      	str	r3, [sp, #16]
 801affc:	f7ff b911 	b.w	801a222 <MEMS_runMagCal+0x2ce>
 801b000:	477fff00 	.word	0x477fff00
 801b004:	3a83126f 	.word	0x3a83126f
 801b008:	42340000 	.word	0x42340000
 801b00c:	3faccccd 	.word	0x3faccccd
 801b010:	00000000 	.word	0x00000000
 801b014:	2905      	cmp	r1, #5
 801b016:	f240 8386 	bls.w	801b726 <MEMS_runMagCal+0x17d2>
 801b01a:	2c05      	cmp	r4, #5
 801b01c:	f240 8383 	bls.w	801b726 <MEMS_runMagCal+0x17d2>
 801b020:	2b05      	cmp	r3, #5
 801b022:	f240 8380 	bls.w	801b726 <MEMS_runMagCal+0x17d2>
 801b026:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801b02a:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 801b02e:	9302      	str	r3, [sp, #8]
 801b030:	9b06      	ldr	r3, [sp, #24]
 801b032:	4553      	cmp	r3, sl
 801b034:	f000 85f3 	beq.w	801bc1e <MEMS_runMagCal+0x1cca>
 801b038:	461a      	mov	r2, r3
 801b03a:	9b02      	ldr	r3, [sp, #8]
 801b03c:	3301      	adds	r3, #1
 801b03e:	9304      	str	r3, [sp, #16]
 801b040:	1a9b      	subs	r3, r3, r2
 801b042:	fb93 f2fa 	sdiv	r2, r3, sl
 801b046:	fb0a 3212 	mls	r2, sl, r2, r3
 801b04a:	2a00      	cmp	r2, #0
 801b04c:	bfb8      	it	lt
 801b04e:	4452      	addlt	r2, sl
 801b050:	46d1      	mov	r9, sl
 801b052:	b212      	sxth	r2, r2
 801b054:	9906      	ldr	r1, [sp, #24]
 801b056:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 801b05a:	f101 38ff 	add.w	r8, r1, #4294967295
 801b05e:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 801b062:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 801b066:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 801b06a:	fa5f f888 	uxtb.w	r8, r8
 801b06e:	f108 0801 	add.w	r8, r8, #1
 801b072:	468e      	mov	lr, r1
 801b074:	463e      	mov	r6, r7
 801b076:	46ac      	mov	ip, r5
 801b078:	4490      	add	r8, r2
 801b07a:	fb92 f3f9 	sdiv	r3, r2, r9
 801b07e:	fb09 2313 	mls	r3, r9, r3, r2
 801b082:	b2db      	uxtb	r3, r3
 801b084:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801b088:	3201      	adds	r2, #1
 801b08a:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 801b08e:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 801b092:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801b096:	42a1      	cmp	r1, r4
 801b098:	bfb8      	it	lt
 801b09a:	4621      	movlt	r1, r4
 801b09c:	45a6      	cmp	lr, r4
 801b09e:	bfa8      	it	ge
 801b0a0:	46a6      	movge	lr, r4
 801b0a2:	4285      	cmp	r5, r0
 801b0a4:	bfb8      	it	lt
 801b0a6:	4605      	movlt	r5, r0
 801b0a8:	4584      	cmp	ip, r0
 801b0aa:	bfa8      	it	ge
 801b0ac:	4684      	movge	ip, r0
 801b0ae:	429f      	cmp	r7, r3
 801b0b0:	bfb8      	it	lt
 801b0b2:	461f      	movlt	r7, r3
 801b0b4:	429e      	cmp	r6, r3
 801b0b6:	bfa8      	it	ge
 801b0b8:	461e      	movge	r6, r3
 801b0ba:	4542      	cmp	r2, r8
 801b0bc:	d1dd      	bne.n	801b07a <MEMS_runMagCal+0x1126>
 801b0be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b0c2:	eec7 8a88 	vdiv.f32	s17, s15, s16
 801b0c6:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 801b0ca:	eba1 010e 	sub.w	r1, r1, lr
 801b0ce:	eba5 050c 	sub.w	r5, r5, ip
 801b0d2:	1bbe      	subs	r6, r7, r6
 801b0d4:	b209      	sxth	r1, r1
 801b0d6:	b22d      	sxth	r5, r5
 801b0d8:	b236      	sxth	r6, r6
 801b0da:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 801b008 <MEMS_runMagCal+0x10b4>
 801b0de:	ee28 7a87 	vmul.f32	s14, s17, s14
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	f040 8595 	bne.w	801bc12 <MEMS_runMagCal+0x1cbe>
 801b0e8:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 801b0ec:	fab3 f883 	clz	r8, r3
 801b0f0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b0f4:	ee06 1a90 	vmov	s13, r1
 801b0f8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801b0fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b100:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b104:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b10c:	f300 8564 	bgt.w	801bbd8 <MEMS_runMagCal+0x1c84>
 801b110:	ee06 5a10 	vmov	s12, r5
 801b114:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801b118:	eef4 7ac6 	vcmpe.f32	s15, s12
 801b11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b120:	f100 855a 	bmi.w	801bbd8 <MEMS_runMagCal+0x1c84>
 801b124:	ee05 6a90 	vmov	s11, r6
 801b128:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801b12c:	eef4 7ae5 	vcmpe.f32	s15, s11
 801b130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b134:	f100 8550 	bmi.w	801bbd8 <MEMS_runMagCal+0x1c84>
 801b138:	428d      	cmp	r5, r1
 801b13a:	462b      	mov	r3, r5
 801b13c:	bfb8      	it	lt
 801b13e:	460b      	movlt	r3, r1
 801b140:	42b3      	cmp	r3, r6
 801b142:	461a      	mov	r2, r3
 801b144:	bfb8      	it	lt
 801b146:	4632      	movlt	r2, r6
 801b148:	428e      	cmp	r6, r1
 801b14a:	4633      	mov	r3, r6
 801b14c:	bfa8      	it	ge
 801b14e:	460b      	movge	r3, r1
 801b150:	42ab      	cmp	r3, r5
 801b152:	bfa8      	it	ge
 801b154:	462b      	movge	r3, r5
 801b156:	428a      	cmp	r2, r1
 801b158:	9202      	str	r2, [sp, #8]
 801b15a:	f340 858a 	ble.w	801bc72 <MEMS_runMagCal+0x1d1e>
 801b15e:	4299      	cmp	r1, r3
 801b160:	bfb8      	it	lt
 801b162:	4619      	movlt	r1, r3
 801b164:	42aa      	cmp	r2, r5
 801b166:	dd02      	ble.n	801b16e <MEMS_runMagCal+0x121a>
 801b168:	42ab      	cmp	r3, r5
 801b16a:	bfb8      	it	lt
 801b16c:	4629      	movlt	r1, r5
 801b16e:	9a02      	ldr	r2, [sp, #8]
 801b170:	4296      	cmp	r6, r2
 801b172:	da02      	bge.n	801b17a <MEMS_runMagCal+0x1226>
 801b174:	429e      	cmp	r6, r3
 801b176:	bfc8      	it	gt
 801b178:	4631      	movgt	r1, r6
 801b17a:	f1b8 0f00 	cmp.w	r8, #0
 801b17e:	f000 829c 	beq.w	801b6ba <MEMS_runMagCal+0x1766>
 801b182:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b18a:	dc0d      	bgt.n	801b1a8 <MEMS_runMagCal+0x1254>
 801b18c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801b190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b194:	dc08      	bgt.n	801b1a8 <MEMS_runMagCal+0x1254>
 801b196:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801b19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b19e:	bfcc      	ite	gt
 801b1a0:	f04f 0801 	movgt.w	r8, #1
 801b1a4:	f04f 0800 	movle.w	r8, #0
 801b1a8:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 801b00c <MEMS_runMagCal+0x10b8>
 801b1ac:	ed9d 5a02 	vldr	s10, [sp, #8]
 801b1b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b1b4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801b1b8:	eeb4 5ae7 	vcmpe.f32	s10, s15
 801b1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1c0:	f2c0 855a 	blt.w	801bc78 <MEMS_runMagCal+0x1d24>
 801b1c4:	ee07 1a90 	vmov	s15, r1
 801b1c8:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 801b1cc:	ee27 5a05 	vmul.f32	s10, s14, s10
 801b1d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b1d4:	eef4 7ac5 	vcmpe.f32	s15, s10
 801b1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1dc:	f2c0 854c 	blt.w	801bc78 <MEMS_runMagCal+0x1d24>
 801b1e0:	9a02      	ldr	r2, [sp, #8]
 801b1e2:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801b1e6:	f280 8547 	bge.w	801bc78 <MEMS_runMagCal+0x1d24>
 801b1ea:	ee07 3a90 	vmov	s15, r3
 801b1ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b1f2:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 801b1f6:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b1fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b202:	f140 8539 	bpl.w	801bc78 <MEMS_runMagCal+0x1d24>
 801b206:	9b06      	ldr	r3, [sp, #24]
 801b208:	4553      	cmp	r3, sl
 801b20a:	f000 856b 	beq.w	801bce4 <MEMS_runMagCal+0x1d90>
 801b20e:	461a      	mov	r2, r3
 801b210:	9b04      	ldr	r3, [sp, #16]
 801b212:	1a9b      	subs	r3, r3, r2
 801b214:	fb93 f7f9 	sdiv	r7, r3, r9
 801b218:	fb09 3717 	mls	r7, r9, r7, r3
 801b21c:	2f00      	cmp	r7, #0
 801b21e:	bfb8      	it	lt
 801b220:	4457      	addlt	r7, sl
 801b222:	b23f      	sxth	r7, r7
 801b224:	9b03      	ldr	r3, [sp, #12]
 801b226:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801b22a:	b27f      	sxtb	r7, r7
 801b22c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b230:	9304      	str	r3, [sp, #16]
 801b232:	f1c7 0e01 	rsb	lr, r7, #1
 801b236:	469c      	mov	ip, r3
 801b238:	463b      	mov	r3, r7
 801b23a:	fb93 f1f9 	sdiv	r1, r3, r9
 801b23e:	fb09 3111 	mls	r1, r9, r1, r3
 801b242:	b24a      	sxtb	r2, r1
 801b244:	2a00      	cmp	r2, #0
 801b246:	f107 0701 	add.w	r7, r7, #1
 801b24a:	bfb8      	it	lt
 801b24c:	eb0a 0201 	addlt.w	r2, sl, r1
 801b250:	fb97 f3f9 	sdiv	r3, r7, r9
 801b254:	fb09 7313 	mls	r3, r9, r3, r7
 801b258:	bfb8      	it	lt
 801b25a:	b252      	sxtblt	r2, r2
 801b25c:	b25b      	sxtb	r3, r3
 801b25e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801b262:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 801b266:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 801b26a:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 801b26e:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 801b272:	1a45      	subs	r5, r0, r1
 801b274:	bf48      	it	mi
 801b276:	1a09      	submi	r1, r1, r0
 801b278:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 801b27c:	bf4c      	ite	mi
 801b27e:	b20d      	sxthmi	r5, r1
 801b280:	b22d      	sxthpl	r5, r5
 801b282:	1a21      	subs	r1, r4, r0
 801b284:	bf48      	it	mi
 801b286:	1b01      	submi	r1, r0, r4
 801b288:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 801b28c:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 801b290:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 801b294:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 801b298:	1a9b      	subs	r3, r3, r2
 801b29a:	1a26      	subs	r6, r4, r0
 801b29c:	b21b      	sxth	r3, r3
 801b29e:	bf48      	it	mi
 801b2a0:	1b06      	submi	r6, r0, r4
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	b209      	sxth	r1, r1
 801b2a6:	b236      	sxth	r6, r6
 801b2a8:	dd20      	ble.n	801b2ec <MEMS_runMagCal+0x1398>
 801b2aa:	4429      	add	r1, r5
 801b2ac:	440e      	add	r6, r1
 801b2ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b2b2:	fb02 f606 	mul.w	r6, r2, r6
 801b2b6:	ee07 6a90 	vmov	s15, r6
 801b2ba:	ee07 3a10 	vmov	s14, r3
 801b2be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b2c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b2c6:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b2ca:	f10c 0c01 	add.w	ip, ip, #1
 801b2ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801b2d2:	fa5f fc8c 	uxtb.w	ip, ip
 801b2d6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801b2da:	ee17 3a90 	vmov	r3, s15
 801b2de:	b21b      	sxth	r3, r3
 801b2e0:	2b96      	cmp	r3, #150	; 0x96
 801b2e2:	dd03      	ble.n	801b2ec <MEMS_runMagCal+0x1398>
 801b2e4:	9b04      	ldr	r3, [sp, #16]
 801b2e6:	3301      	adds	r3, #1
 801b2e8:	b2db      	uxtb	r3, r3
 801b2ea:	9304      	str	r3, [sp, #16]
 801b2ec:	eb0e 0307 	add.w	r3, lr, r7
 801b2f0:	b2db      	uxtb	r3, r3
 801b2f2:	4598      	cmp	r8, r3
 801b2f4:	d8a0      	bhi.n	801b238 <MEMS_runMagCal+0x12e4>
 801b2f6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b2fa:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801b2fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b302:	4563      	cmp	r3, ip
 801b304:	f340 820f 	ble.w	801b726 <MEMS_runMagCal+0x17d2>
 801b308:	9b07      	ldr	r3, [sp, #28]
 801b30a:	b92b      	cbnz	r3, 801b318 <MEMS_runMagCal+0x13c4>
 801b30c:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 801b310:	3b02      	subs	r3, #2
 801b312:	2b01      	cmp	r3, #1
 801b314:	f240 8524 	bls.w	801bd60 <MEMS_runMagCal+0x1e0c>
 801b318:	ac25      	add	r4, sp, #148	; 0x94
 801b31a:	2220      	movs	r2, #32
 801b31c:	4620      	mov	r0, r4
 801b31e:	2100      	movs	r1, #0
 801b320:	f007 fd36 	bl	8022d90 <memset>
 801b324:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 801b328:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 801b32c:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801b330:	2200      	movs	r2, #0
 801b332:	4286      	cmp	r6, r0
 801b334:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 801b338:	921f      	str	r2, [sp, #124]	; 0x7c
 801b33a:	f103 0301 	add.w	r3, r3, #1
 801b33e:	f000 8507 	beq.w	801bd50 <MEMS_runMagCal+0x1dfc>
 801b342:	1b9b      	subs	r3, r3, r6
 801b344:	fb93 f2f0 	sdiv	r2, r3, r0
 801b348:	fb00 3312 	mls	r3, r0, r2, r3
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	bfb8      	it	lt
 801b350:	181b      	addlt	r3, r3, r0
 801b352:	b21a      	sxth	r2, r3
 801b354:	2e00      	cmp	r6, #0
 801b356:	f000 8558 	beq.w	801be0a <MEMS_runMagCal+0x1eb6>
 801b35a:	1e77      	subs	r7, r6, #1
 801b35c:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 801b010 <MEMS_runMagCal+0x10bc>
 801b360:	b2fd      	uxtb	r5, r7
 801b362:	3501      	adds	r5, #1
 801b364:	eeb0 5a65 	vmov.f32	s10, s11
 801b368:	eef0 4a65 	vmov.f32	s9, s11
 801b36c:	4415      	add	r5, r2
 801b36e:	4611      	mov	r1, r2
 801b370:	fb91 f3f0 	sdiv	r3, r1, r0
 801b374:	fb00 1313 	mls	r3, r0, r3, r1
 801b378:	b2db      	uxtb	r3, r3
 801b37a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801b37e:	3101      	adds	r1, #1
 801b380:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 801b384:	ee06 ca90 	vmov	s13, ip
 801b388:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 801b38c:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801b390:	ee07 ca10 	vmov	s14, ip
 801b394:	ee07 3a90 	vmov	s15, r3
 801b398:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b39c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b3a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b3a4:	42a9      	cmp	r1, r5
 801b3a6:	ee74 4aa6 	vadd.f32	s9, s9, s13
 801b3aa:	ee35 5a07 	vadd.f32	s10, s10, s14
 801b3ae:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801b3b2:	d1dd      	bne.n	801b370 <MEMS_runMagCal+0x141c>
 801b3b4:	ee07 6a90 	vmov	s15, r6
 801b3b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b3bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b3c0:	eec7 9a27 	vdiv.f32	s19, s14, s15
 801b3c4:	b2f9      	uxtb	r1, r7
 801b3c6:	3101      	adds	r1, #1
 801b3c8:	4411      	add	r1, r2
 801b3ca:	ed9f 6aec 	vldr	s12, [pc, #944]	; 801b77c <MEMS_runMagCal+0x1828>
 801b3ce:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 801b3d2:	ee29 9aa4 	vmul.f32	s18, s19, s9
 801b3d6:	ee29 aa85 	vmul.f32	s20, s19, s10
 801b3da:	ee69 9aa5 	vmul.f32	s19, s19, s11
 801b3de:	eef0 4a46 	vmov.f32	s9, s12
 801b3e2:	eeb0 4a46 	vmov.f32	s8, s12
 801b3e6:	eef0 3a46 	vmov.f32	s7, s12
 801b3ea:	eeb0 3a46 	vmov.f32	s6, s12
 801b3ee:	eef0 2a46 	vmov.f32	s5, s12
 801b3f2:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 801b3f6:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 801b3fa:	fb92 f3f0 	sdiv	r3, r2, r0
 801b3fe:	fb00 2313 	mls	r3, r0, r3, r2
 801b402:	b2db      	uxtb	r3, r3
 801b404:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801b408:	3201      	adds	r2, #1
 801b40a:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 801b40e:	ee06 5a90 	vmov	s13, r5
 801b412:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 801b416:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801b41a:	ee07 5a10 	vmov	s14, r5
 801b41e:	ee07 3a90 	vmov	s15, r3
 801b422:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b426:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b42a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b42e:	ee76 6ac9 	vsub.f32	s13, s13, s18
 801b432:	ee37 7a4a 	vsub.f32	s14, s14, s20
 801b436:	ee77 7ae9 	vsub.f32	s15, s15, s19
 801b43a:	4291      	cmp	r1, r2
 801b43c:	eee6 2aa6 	vfma.f32	s5, s13, s13
 801b440:	eea6 3a87 	vfma.f32	s6, s13, s14
 801b444:	eea7 4a07 	vfma.f32	s8, s14, s14
 801b448:	eee6 3aa7 	vfma.f32	s7, s13, s15
 801b44c:	eee7 4a27 	vfma.f32	s9, s14, s15
 801b450:	eea7 6aa7 	vfma.f32	s12, s15, s15
 801b454:	d1d1      	bne.n	801b3fa <MEMS_runMagCal+0x14a6>
 801b456:	edc4 2a00 	vstr	s5, [r4]
 801b45a:	ed84 3a01 	vstr	s6, [r4, #4]
 801b45e:	edc4 3a02 	vstr	s7, [r4, #8]
 801b462:	ed84 4a03 	vstr	s8, [r4, #12]
 801b466:	edc4 4a04 	vstr	s9, [r4, #16]
 801b46a:	ed84 6a05 	vstr	s12, [r4, #20]
 801b46e:	a91a      	add	r1, sp, #104	; 0x68
 801b470:	4620      	mov	r0, r4
 801b472:	f7fe fcab 	bl	8019dcc <MEMS_EIG3>
 801b476:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 801b47a:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 801b47e:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 801b482:	eef0 5ae4 	vabs.f32	s11, s9
 801b486:	eef0 6ac6 	vabs.f32	s13, s12
 801b48a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801b48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b492:	bf8c      	ite	hi
 801b494:	eef0 7a65 	vmovhi.f32	s15, s11
 801b498:	eef0 7a66 	vmovls.f32	s15, s13
 801b49c:	eeb0 7ac5 	vabs.f32	s14, s10
 801b4a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4a8:	eef4 6ae5 	vcmpe.f32	s13, s11
 801b4ac:	bf88      	it	hi
 801b4ae:	eef0 7a47 	vmovhi.f32	s15, s14
 801b4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4b6:	bfb8      	it	lt
 801b4b8:	eef0 6a65 	vmovlt.f32	s13, s11
 801b4bc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b4c0:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 801b4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4c8:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801b4cc:	bfb8      	it	lt
 801b4ce:	eeb0 7a66 	vmovlt.f32	s14, s13
 801b4d2:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801b4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4da:	f300 8422 	bgt.w	801bd22 <MEMS_runMagCal+0x1dce>
 801b4de:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 801b4e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b4e6:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801b4ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4f2:	dd02      	ble.n	801b4fa <MEMS_runMagCal+0x15a6>
 801b4f4:	2b22      	cmp	r3, #34	; 0x22
 801b4f6:	f240 8414 	bls.w	801bd22 <MEMS_runMagCal+0x1dce>
 801b4fa:	ee76 7a24 	vadd.f32	s15, s12, s9
 801b4fe:	ee07 3a10 	vmov	s14, r3
 801b502:	ee77 7a85 	vadd.f32	s15, s15, s10
 801b506:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b50a:	eddf 6a91 	vldr	s13, [pc, #580]	; 801b750 <MEMS_runMagCal+0x17fc>
 801b50e:	ee87 6a87 	vdiv.f32	s12, s15, s14
 801b512:	eef1 7ac6 	vsqrt.f32	s15, s12
 801b516:	ee68 7a27 	vmul.f32	s15, s16, s15
 801b51a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b522:	f300 83fe 	bgt.w	801bd22 <MEMS_runMagCal+0x1dce>
 801b526:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801b52a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b532:	f100 83f6 	bmi.w	801bd22 <MEMS_runMagCal+0x1dce>
 801b536:	eddf 7a87 	vldr	s15, [pc, #540]	; 801b754 <MEMS_runMagCal+0x1800>
 801b53a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 801b53e:	2300      	movs	r3, #0
 801b540:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 801b544:	932c      	str	r3, [sp, #176]	; 0xb0
 801b546:	eddd 7a02 	vldr	s15, [sp, #8]
 801b54a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b54e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b556:	d408      	bmi.n	801b56a <MEMS_runMagCal+0x1616>
 801b558:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801b55c:	ee17 3a10 	vmov	r3, s14
 801b560:	b21b      	sxth	r3, r3
 801b562:	ee07 3a90 	vmov	s15, r3
 801b566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b56a:	eddf 6a82 	vldr	s13, [pc, #520]	; 801b774 <MEMS_runMagCal+0x1820>
 801b56e:	ee86 7a88 	vdiv.f32	s14, s13, s16
 801b572:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b57a:	dc08      	bgt.n	801b58e <MEMS_runMagCal+0x163a>
 801b57c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801b580:	ee17 3a10 	vmov	r3, s14
 801b584:	b21b      	sxth	r3, r3
 801b586:	ee07 3a90 	vmov	s15, r3
 801b58a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b58e:	ee27 7a88 	vmul.f32	s14, s15, s16
 801b592:	eddf 7a71 	vldr	s15, [pc, #452]	; 801b758 <MEMS_runMagCal+0x1804>
 801b596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b59e:	f340 8430 	ble.w	801be02 <MEMS_runMagCal+0x1eae>
 801b5a2:	eddf 7a6e 	vldr	s15, [pc, #440]	; 801b75c <MEMS_runMagCal+0x1808>
 801b5a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5ae:	f140 8428 	bpl.w	801be02 <MEMS_runMagCal+0x1eae>
 801b5b2:	eddf 6a6b 	vldr	s13, [pc, #428]	; 801b760 <MEMS_runMagCal+0x180c>
 801b5b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b5ba:	eee7 7a26 	vfma.f32	s15, s14, s13
 801b5be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b5c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b5c6:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 801b774 <MEMS_runMagCal+0x1820>
 801b5ca:	eddf ba6c 	vldr	s23, [pc, #432]	; 801b77c <MEMS_runMagCal+0x1828>
 801b5ce:	ed9f ba65 	vldr	s22, [pc, #404]	; 801b764 <MEMS_runMagCal+0x1810>
 801b5d2:	eddf aa65 	vldr	s21, [pc, #404]	; 801b768 <MEMS_runMagCal+0x1814>
 801b5d6:	9d03      	ldr	r5, [sp, #12]
 801b5d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b5dc:	ee68 4a09 	vmul.f32	s9, s16, s18
 801b5e0:	ee28 aa0a 	vmul.f32	s20, s16, s20
 801b5e4:	ee68 9a29 	vmul.f32	s19, s16, s19
 801b5e8:	edc4 4a00 	vstr	s9, [r4]
 801b5ec:	ed84 aa01 	vstr	s20, [r4, #4]
 801b5f0:	edc4 9a02 	vstr	s19, [r4, #8]
 801b5f4:	edc4 7a03 	vstr	s15, [r4, #12]
 801b5f8:	edc4 7a06 	vstr	s15, [r4, #24]
 801b5fc:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
 801b600:	ab2d      	add	r3, sp, #180	; 0xb4
 801b602:	ee18 2a10 	vmov	r2, s16
 801b606:	ee1c 0a10 	vmov	r0, s24
 801b60a:	f8cd a000 	str.w	sl, [sp]
 801b60e:	4621      	mov	r1, r4
 801b610:	f7fe f9bc 	bl	801998c <MEMS_SolveLinearEq>
 801b614:	1c6b      	adds	r3, r5, #1
 801b616:	2800      	cmp	r0, #0
 801b618:	f43e ae9e 	beq.w	801a358 <MEMS_runMagCal+0x404>
 801b61c:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 801b620:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 801b624:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 801b628:	edd4 4a00 	vldr	s9, [r4]
 801b62c:	ed94 5a01 	vldr	s10, [r4, #4]
 801b630:	edd4 5a02 	vldr	s11, [r4, #8]
 801b634:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 801b638:	ed94 6a03 	vldr	s12, [r4, #12]
 801b63c:	eef0 6ae3 	vabs.f32	s13, s7
 801b640:	eef0 7ac3 	vabs.f32	s15, s6
 801b644:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b64c:	bfb8      	it	lt
 801b64e:	eef0 7a66 	vmovlt.f32	s15, s13
 801b652:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b65a:	bfb8      	it	lt
 801b65c:	eef0 7a6b 	vmovlt.f32	s15, s23
 801b660:	eef0 6ac4 	vabs.f32	s13, s8
 801b664:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b66c:	bfb8      	it	lt
 801b66e:	eef0 6a67 	vmovlt.f32	s13, s15
 801b672:	ee74 4a83 	vadd.f32	s9, s9, s6
 801b676:	ee35 5a23 	vadd.f32	s10, s10, s7
 801b67a:	ee75 5a84 	vadd.f32	s11, s11, s8
 801b67e:	ee36 6a07 	vadd.f32	s12, s12, s14
 801b682:	eef4 6acb 	vcmpe.f32	s13, s22
 801b686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b68a:	edc4 4a00 	vstr	s9, [r4]
 801b68e:	ed84 5a01 	vstr	s10, [r4, #4]
 801b692:	edc4 5a02 	vstr	s11, [r4, #8]
 801b696:	ed84 6a03 	vstr	s12, [r4, #12]
 801b69a:	eef0 7ac7 	vabs.f32	s15, s14
 801b69e:	d507      	bpl.n	801b6b0 <MEMS_runMagCal+0x175c>
 801b6a0:	eef4 7aea 	vcmpe.f32	s15, s21
 801b6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6a8:	d502      	bpl.n	801b6b0 <MEMS_runMagCal+0x175c>
 801b6aa:	2d01      	cmp	r5, #1
 801b6ac:	f63e ae58 	bhi.w	801a360 <MEMS_runMagCal+0x40c>
 801b6b0:	b2dd      	uxtb	r5, r3
 801b6b2:	2d05      	cmp	r5, #5
 801b6b4:	d1a4      	bne.n	801b600 <MEMS_runMagCal+0x16ac>
 801b6b6:	f7fe be53 	b.w	801a360 <MEMS_runMagCal+0x40c>
 801b6ba:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 801b6be:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 801b6c2:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 801b6c6:	ed9f 4a29 	vldr	s8, [pc, #164]	; 801b76c <MEMS_runMagCal+0x1818>
 801b6ca:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801b6ce:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 801b6d2:	ee77 7a85 	vadd.f32	s15, s15, s10
 801b6d6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801b6da:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b6de:	eef4 7ae4 	vcmpe.f32	s15, s9
 801b6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6e6:	bf88      	it	hi
 801b6e8:	eef0 7a64 	vmovhi.f32	s15, s9
 801b6ec:	eef4 7ac5 	vcmpe.f32	s15, s10
 801b6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6f4:	bfb8      	it	lt
 801b6f6:	eef0 7a45 	vmovlt.f32	s15, s10
 801b6fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801b6fe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b706:	dc0e      	bgt.n	801b726 <MEMS_runMagCal+0x17d2>
 801b708:	ee26 6a27 	vmul.f32	s12, s12, s15
 801b70c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801b710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b714:	dc07      	bgt.n	801b726 <MEMS_runMagCal+0x17d2>
 801b716:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801b71a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b722:	f77f ad70 	ble.w	801b206 <MEMS_runMagCal+0x12b2>
 801b726:	2300      	movs	r3, #0
 801b728:	f88b 3000 	strb.w	r3, [fp]
 801b72c:	f7ff b861 	b.w	801a7f2 <MEMS_runMagCal+0x89e>
 801b730:	2300      	movs	r3, #0
 801b732:	9307      	str	r3, [sp, #28]
 801b734:	2301      	movs	r3, #1
 801b736:	9303      	str	r3, [sp, #12]
 801b738:	f7ff bb52 	b.w	801ade0 <MEMS_runMagCal+0xe8c>
 801b73c:	3301      	adds	r3, #1
 801b73e:	fb93 f2f7 	sdiv	r2, r3, r7
 801b742:	fb07 3212 	mls	r2, r7, r2, r3
 801b746:	930b      	str	r3, [sp, #44]	; 0x2c
 801b748:	b212      	sxth	r2, r2
 801b74a:	46bc      	mov	ip, r7
 801b74c:	f7ff bb66 	b.w	801ae1c <MEMS_runMagCal+0xec8>
 801b750:	42960000 	.word	0x42960000
 801b754:	430d0000 	.word	0x430d0000
 801b758:	41966667 	.word	0x41966667
 801b75c:	433c0000 	.word	0x433c0000
 801b760:	3c2e4c41 	.word	0x3c2e4c41
 801b764:	3e99999a 	.word	0x3e99999a
 801b768:	3f666666 	.word	0x3f666666
 801b76c:	3eaaaaab 	.word	0x3eaaaaab
 801b770:	358637bd 	.word	0x358637bd
 801b774:	423c0000 	.word	0x423c0000
 801b778:	3a83126f 	.word	0x3a83126f
 801b77c:	00000000 	.word	0x00000000
 801b780:	eddd 7a08 	vldr	s15, [sp, #32]
 801b784:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 801b778 <MEMS_runMagCal+0x1824>
 801b788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b78c:	ee07 3a10 	vmov	s14, r3
 801b790:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b794:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801b798:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801b79c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801b7a0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7a8:	f63f aa59 	bhi.w	801ac5e <MEMS_runMagCal+0xd0a>
 801b7ac:	9b07      	ldr	r3, [sp, #28]
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	f43f a81f 	beq.w	801a7f2 <MEMS_runMagCal+0x89e>
 801b7b4:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 801b7b8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801b7bc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801b7c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b7c4:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7cc:	bf4c      	ite	mi
 801b7ce:	2301      	movmi	r3, #1
 801b7d0:	2300      	movpl	r3, #0
 801b7d2:	9307      	str	r3, [sp, #28]
 801b7d4:	f7ff ba47 	b.w	801ac66 <MEMS_runMagCal+0xd12>
 801b7d8:	fb92 f1f0 	sdiv	r1, r2, r0
 801b7dc:	fb00 2211 	mls	r2, r0, r1, r2
 801b7e0:	b211      	sxth	r1, r2
 801b7e2:	4605      	mov	r5, r0
 801b7e4:	f7ff b8c0 	b.w	801a968 <MEMS_runMagCal+0xa14>
 801b7e8:	2200      	movs	r2, #0
 801b7ea:	23ff      	movs	r3, #255	; 0xff
 801b7ec:	ee1c 0a10 	vmov	r0, s24
 801b7f0:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 801b7f4:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 801b7f8:	eeb0 0a49 	vmov.f32	s0, s18
 801b7fc:	4649      	mov	r1, r9
 801b7fe:	f7f7 fd5f 	bl	80132c0 <MEMS_updateMagBufferIndex>
 801b802:	f7ff b8f1 	b.w	801a9e8 <MEMS_runMagCal+0xa94>
 801b806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b80a:	fb03 f60c 	mul.w	r6, r3, ip
 801b80e:	fb03 f202 	mul.w	r2, r3, r2
 801b812:	fb03 f301 	mul.w	r3, r3, r1
 801b816:	ee06 6a90 	vmov	s13, r6
 801b81a:	ee07 2a10 	vmov	s14, r2
 801b81e:	ee07 3a90 	vmov	s15, r3
 801b822:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 801b770 <MEMS_runMagCal+0x181c>
 801b826:	9e05      	ldr	r6, [sp, #20]
 801b828:	9400      	str	r4, [sp, #0]
 801b82a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b82e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b836:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b83a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801b83e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b842:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 801b846:	e9c5 0001 	strd	r0, r0, [r5, #4]
 801b84a:	e9c5 0003 	strd	r0, r0, [r5, #12]
 801b84e:	e9c5 0005 	strd	r0, r0, [r5, #20]
 801b852:	6028      	str	r0, [r5, #0]
 801b854:	ed96 0a01 	vldr	s0, [r6, #4]
 801b858:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801b85c:	4642      	mov	r2, r8
 801b85e:	ab0d      	add	r3, sp, #52	; 0x34
 801b860:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 801b864:	ad0e      	add	r5, sp, #56	; 0x38
 801b866:	ee1c 0a10 	vmov	r0, s24
 801b86a:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 801b86e:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 801b872:	f7f7 fdd5 	bl	8013420 <getMagStats.constprop.0>
 801b876:	9500      	str	r5, [sp, #0]
 801b878:	ed96 0a01 	vldr	s0, [r6, #4]
 801b87c:	ee1c 0a10 	vmov	r0, s24
 801b880:	aa2d      	add	r2, sp, #180	; 0xb4
 801b882:	ab0d      	add	r3, sp, #52	; 0x34
 801b884:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 801b888:	f7f7 fdca 	bl	8013420 <getMagStats.constprop.0>
 801b88c:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 801b774 <MEMS_runMagCal+0x1820>
 801b890:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801b894:	ed95 7a00 	vldr	s14, [r5]
 801b898:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b89c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 801b8a0:	eef0 7ae7 	vabs.f32	s15, s15
 801b8a4:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8ac:	d505      	bpl.n	801b8ba <MEMS_runMagCal+0x1966>
 801b8ae:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8b6:	f100 81fa 	bmi.w	801bcae <MEMS_runMagCal+0x1d5a>
 801b8ba:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 801b8be:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8c6:	f140 81a8 	bpl.w	801bc1a <MEMS_runMagCal+0x1cc6>
 801b8ca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8d2:	9b03      	ldr	r3, [sp, #12]
 801b8d4:	bfb8      	it	lt
 801b8d6:	2302      	movlt	r3, #2
 801b8d8:	edd4 6a00 	vldr	s13, [r4]
 801b8dc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801b8e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b8e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8ec:	f57e af81 	bpl.w	801a7f2 <MEMS_runMagCal+0x89e>
 801b8f0:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 801b8f4:	429a      	cmp	r2, r3
 801b8f6:	f63e af7c 	bhi.w	801a7f2 <MEMS_runMagCal+0x89e>
 801b8fa:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801b8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b902:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b90a:	d40e      	bmi.n	801b92a <MEMS_runMagCal+0x19d6>
 801b90c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 801b910:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b918:	f140 80d4 	bpl.w	801bac4 <MEMS_runMagCal+0x1b70>
 801b91c:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 801b920:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801b924:	429a      	cmp	r2, r3
 801b926:	f080 80cd 	bcs.w	801bac4 <MEMS_runMagCal+0x1b70>
 801b92a:	9b05      	ldr	r3, [sp, #20]
 801b92c:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 801b930:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 801b934:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 801b938:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 801b93c:	edd3 5a01 	vldr	s11, [r3, #4]
 801b940:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 801b944:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 801b948:	1b8b      	subs	r3, r1, r6
 801b94a:	eba0 0c07 	sub.w	ip, r0, r7
 801b94e:	2b00      	cmp	r3, #0
 801b950:	bfb8      	it	lt
 801b952:	425b      	neglt	r3, r3
 801b954:	f1bc 0f00 	cmp.w	ip, #0
 801b958:	bfb8      	it	lt
 801b95a:	f1cc 0c00 	rsblt	ip, ip, #0
 801b95e:	4563      	cmp	r3, ip
 801b960:	bfb8      	it	lt
 801b962:	4663      	movlt	r3, ip
 801b964:	eba2 0c04 	sub.w	ip, r2, r4
 801b968:	f1bc 0f00 	cmp.w	ip, #0
 801b96c:	b21b      	sxth	r3, r3
 801b96e:	bfb8      	it	lt
 801b970:	f1cc 0c00 	rsblt	ip, ip, #0
 801b974:	4563      	cmp	r3, ip
 801b976:	bfb8      	it	lt
 801b978:	4663      	movlt	r3, ip
 801b97a:	b21b      	sxth	r3, r3
 801b97c:	ee07 3a90 	vmov	s15, r3
 801b980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b984:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 801b988:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801b98c:	eef4 7ac6 	vcmpe.f32	s15, s12
 801b990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b994:	f140 8096 	bpl.w	801bac4 <MEMS_runMagCal+0x1b70>
 801b998:	ee37 7a26 	vadd.f32	s14, s14, s13
 801b99c:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 801b9a0:	ee86 2a87 	vdiv.f32	s4, s13, s14
 801b9a4:	ee04 3a90 	vmov	s9, r3
 801b9a8:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 801b9ac:	ee05 3a10 	vmov	s10, r3
 801b9b0:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 801b9b4:	ee07 0a90 	vmov	s15, r0
 801b9b8:	ee05 3a90 	vmov	s11, r3
 801b9bc:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 801b9c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801b9c4:	ee36 4a42 	vsub.f32	s8, s12, s4
 801b9c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b9cc:	ee06 3a10 	vmov	s12, r3
 801b9d0:	ee03 7a90 	vmov	s7, r7
 801b9d4:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801b9d8:	ee07 1a90 	vmov	s15, r1
 801b9dc:	ee00 3a90 	vmov	s1, r3
 801b9e0:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b9e4:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 801b9e8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801b9ec:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 801b9f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b9f4:	ee64 4a84 	vmul.f32	s9, s9, s8
 801b9f8:	ee03 6a90 	vmov	s7, r6
 801b9fc:	eee2 6a22 	vfma.f32	s13, s4, s5
 801ba00:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801ba04:	ee07 2a90 	vmov	s15, r2
 801ba08:	ee01 3a10 	vmov	s2, r3
 801ba0c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ba10:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 801ba14:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 801ba18:	eee2 4a20 	vfma.f32	s9, s4, s1
 801ba1c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801ba20:	ee01 3a90 	vmov	s3, r3
 801ba24:	ee25 5a04 	vmul.f32	s10, s10, s8
 801ba28:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801ba2c:	eea2 7a03 	vfma.f32	s14, s4, s6
 801ba30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ba34:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801ba38:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801ba3c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801ba40:	ee03 4a90 	vmov	s7, r4
 801ba44:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801ba48:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ba4c:	ee65 5a84 	vmul.f32	s11, s11, s8
 801ba50:	ee26 6a04 	vmul.f32	s12, s12, s8
 801ba54:	ee16 2a90 	vmov	r2, s13
 801ba58:	ee04 3a10 	vmov	s8, r3
 801ba5c:	eea2 5a01 	vfma.f32	s10, s4, s2
 801ba60:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 801ba64:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801ba68:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 801ba6c:	eee2 7a23 	vfma.f32	s15, s4, s7
 801ba70:	ee14 2a90 	vmov	r2, s9
 801ba74:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801ba78:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801ba7c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801ba80:	eee2 5a21 	vfma.f32	s11, s4, s3
 801ba84:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 801ba88:	eea2 6a04 	vfma.f32	s12, s4, s8
 801ba8c:	ee17 2a10 	vmov	r2, s14
 801ba90:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 801ba94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ba98:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 801ba9c:	ee15 2a10 	vmov	r2, s10
 801baa0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 801baa4:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 801baa8:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 801baac:	ee17 2a90 	vmov	r2, s15
 801bab0:	ee16 3a10 	vmov	r3, s12
 801bab4:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 801bab8:	ee15 2a90 	vmov	r2, s11
 801babc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 801bac0:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 801bac4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801bac6:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 801baca:	f7fe bd85 	b.w	801a5d8 <MEMS_runMagCal+0x684>
 801bace:	ee1c 0a10 	vmov	r0, s24
 801bad2:	eeb0 0a49 	vmov.f32	s0, s18
 801bad6:	4649      	mov	r1, r9
 801bad8:	f7f7 fbf2 	bl	80132c0 <MEMS_updateMagBufferIndex>
 801badc:	f7ff b891 	b.w	801ac02 <MEMS_runMagCal+0xcae>
 801bae0:	eddd 7a08 	vldr	s15, [sp, #32]
 801bae4:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 801b778 <MEMS_runMagCal+0x1824>
 801bae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801baec:	ee67 7a87 	vmul.f32	s15, s15, s14
 801baf0:	e660      	b.n	801b7b4 <MEMS_runMagCal+0x1860>
 801baf2:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 801b77c <MEMS_runMagCal+0x1828>
 801baf6:	1c6b      	adds	r3, r5, #1
 801baf8:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801bafc:	ad0e      	add	r5, sp, #56	; 0x38
 801bafe:	fb93 f1f6 	sdiv	r1, r3, r6
 801bb02:	fa1f fc86 	uxth.w	ip, r6
 801bb06:	fb06 3311 	mls	r3, r6, r1, r3
 801bb0a:	edc5 6a00 	vstr	s13, [r5]
 801bb0e:	2e00      	cmp	r6, #0
 801bb10:	f000 80e1 	beq.w	801bcd6 <MEMS_runMagCal+0x1d82>
 801bb14:	b29b      	uxth	r3, r3
 801bb16:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bb1a:	1c58      	adds	r0, r3, #1
 801bb1c:	eeb0 6a66 	vmov.f32	s12, s13
 801bb20:	fa10 fc8c 	uxtah	ip, r0, ip
 801bb24:	f241 2e5c 	movw	lr, #4700	; 0x125c
 801bb28:	4619      	mov	r1, r3
 801bb2a:	e000      	b.n	801bb2e <MEMS_runMagCal+0x1bda>
 801bb2c:	3001      	adds	r0, #1
 801bb2e:	fbb1 f3f6 	udiv	r3, r1, r6
 801bb32:	fb06 1313 	mls	r3, r6, r3, r1
 801bb36:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801bb3a:	8a99      	ldrh	r1, [r3, #20]
 801bb3c:	4571      	cmp	r1, lr
 801bb3e:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 801bb42:	f1a3 031c 	sub.w	r3, r3, #28
 801bb46:	bf98      	it	ls
 801bb48:	ebae 0301 	subls.w	r3, lr, r1
 801bb4c:	b29b      	uxth	r3, r3
 801bb4e:	fb03 f303 	mul.w	r3, r3, r3
 801bb52:	ee07 1a10 	vmov	s14, r1
 801bb56:	ee07 3a90 	vmov	s15, r3
 801bb5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bb5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bb62:	4584      	cmp	ip, r0
 801bb64:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801bb68:	ee36 6a07 	vadd.f32	s12, s12, s14
 801bb6c:	4601      	mov	r1, r0
 801bb6e:	d1dd      	bne.n	801bb2c <MEMS_runMagCal+0x1bd8>
 801bb70:	ee07 4a90 	vmov	s15, r4
 801bb74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bb78:	eddf 5ab8 	vldr	s11, [pc, #736]	; 801be5c <MEMS_runMagCal+0x1f08>
 801bb7c:	ed9f 5ab8 	vldr	s10, [pc, #736]	; 801be60 <MEMS_runMagCal+0x1f0c>
 801bb80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bb84:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801bb88:	eef1 7ac7 	vsqrt.f32	s15, s14
 801bb8c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801bb90:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801bb94:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801bb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb9c:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801bba0:	edc5 7a00 	vstr	s15, [r5]
 801bba4:	dd47      	ble.n	801bc36 <MEMS_runMagCal+0x1ce2>
 801bba6:	eddf 7aaf 	vldr	s15, [pc, #700]	; 801be64 <MEMS_runMagCal+0x1f10>
 801bbaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bbae:	2302      	movs	r3, #2
 801bbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbb4:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 801bbb8:	f77e ae93 	ble.w	801a8e2 <MEMS_runMagCal+0x98e>
 801bbbc:	2301      	movs	r3, #1
 801bbbe:	f88b 3001 	strb.w	r3, [fp, #1]
 801bbc2:	f7fe be8e 	b.w	801a8e2 <MEMS_runMagCal+0x98e>
 801bbc6:	ee1c 0a10 	vmov	r0, s24
 801bbca:	eeb0 0a49 	vmov.f32	s0, s18
 801bbce:	4649      	mov	r1, r9
 801bbd0:	f7f7 fb76 	bl	80132c0 <MEMS_updateMagBufferIndex>
 801bbd4:	f7fe bef3 	b.w	801a9be <MEMS_runMagCal+0xa6a>
 801bbd8:	9b02      	ldr	r3, [sp, #8]
 801bbda:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801bbde:	f8db 100c 	ldr.w	r1, [fp, #12]
 801bbe2:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 801bbe6:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 801bbea:	4413      	add	r3, r2
 801bbec:	4299      	cmp	r1, r3
 801bbee:	f4bf ad9a 	bcs.w	801b726 <MEMS_runMagCal+0x17d2>
 801bbf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bbf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801bbf8:	fb03 f301 	mul.w	r3, r3, r1
 801bbfc:	3364      	adds	r3, #100	; 0x64
 801bbfe:	4293      	cmp	r3, r2
 801bc00:	bf38      	it	cc
 801bc02:	4613      	movcc	r3, r2
 801bc04:	2200      	movs	r2, #0
 801bc06:	f8cb 300c 	str.w	r3, [fp, #12]
 801bc0a:	f88b 2000 	strb.w	r2, [fp]
 801bc0e:	f7fe bdf0 	b.w	801a7f2 <MEMS_runMagCal+0x89e>
 801bc12:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801bc16:	f7ff ba6d 	b.w	801b0f4 <MEMS_runMagCal+0x11a0>
 801bc1a:	9b03      	ldr	r3, [sp, #12]
 801bc1c:	e65c      	b.n	801b8d8 <MEMS_runMagCal+0x1984>
 801bc1e:	4619      	mov	r1, r3
 801bc20:	9b02      	ldr	r3, [sp, #8]
 801bc22:	3301      	adds	r3, #1
 801bc24:	fb93 f2f1 	sdiv	r2, r3, r1
 801bc28:	fb01 3212 	mls	r2, r1, r2, r3
 801bc2c:	9304      	str	r3, [sp, #16]
 801bc2e:	b212      	sxth	r2, r2
 801bc30:	4689      	mov	r9, r1
 801bc32:	f7ff ba0f 	b.w	801b054 <MEMS_runMagCal+0x1100>
 801bc36:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801be68 <MEMS_runMagCal+0x1f14>
 801bc3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc42:	eddf 7a88 	vldr	s15, [pc, #544]	; 801be64 <MEMS_runMagCal+0x1f10>
 801bc46:	d434      	bmi.n	801bcb2 <MEMS_runMagCal+0x1d5e>
 801bc48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bc4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc50:	bfc4      	itt	gt
 801bc52:	2301      	movgt	r3, #1
 801bc54:	f88b 3001 	strbgt.w	r3, [fp, #1]
 801bc58:	f7ff b884 	b.w	801ad64 <MEMS_runMagCal+0xe10>
 801bc5c:	9b05      	ldr	r3, [sp, #20]
 801bc5e:	f89b 1011 	ldrb.w	r1, [fp, #17]
 801bc62:	ed93 0a01 	vldr	s0, [r3, #4]
 801bc66:	f7fe bd67 	b.w	801a738 <MEMS_runMagCal+0x7e4>
 801bc6a:	2303      	movs	r3, #3
 801bc6c:	9303      	str	r3, [sp, #12]
 801bc6e:	f7fe bdb6 	b.w	801a7de <MEMS_runMagCal+0x88a>
 801bc72:	4619      	mov	r1, r3
 801bc74:	f7ff ba76 	b.w	801b164 <MEMS_runMagCal+0x1210>
 801bc78:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 801bc7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801bc80:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801bc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc88:	f73f ad4d 	bgt.w	801b726 <MEMS_runMagCal+0x17d2>
 801bc8c:	ee26 6a27 	vmul.f32	s12, s12, s15
 801bc90:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801bc94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc98:	f73f ad45 	bgt.w	801b726 <MEMS_runMagCal+0x17d2>
 801bc9c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801bca0:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801bca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bca8:	f77f aaad 	ble.w	801b206 <MEMS_runMagCal+0x12b2>
 801bcac:	e53b      	b.n	801b726 <MEMS_runMagCal+0x17d2>
 801bcae:	2303      	movs	r3, #3
 801bcb0:	e612      	b.n	801b8d8 <MEMS_runMagCal+0x1984>
 801bcb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcbc:	f88b 3001 	strb.w	r3, [fp, #1]
 801bcc0:	f04f 0103 	mov.w	r1, #3
 801bcc4:	bfc8      	it	gt
 801bcc6:	2301      	movgt	r3, #1
 801bcc8:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 801bccc:	bfc8      	it	gt
 801bcce:	f88b 3001 	strbgt.w	r3, [fp, #1]
 801bcd2:	f7ff b84a 	b.w	801ad6a <MEMS_runMagCal+0xe16>
 801bcd6:	2303      	movs	r3, #3
 801bcd8:	f88b c001 	strb.w	ip, [fp, #1]
 801bcdc:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 801bce0:	f7ff b843 	b.w	801ad6a <MEMS_runMagCal+0xe16>
 801bce4:	9b04      	ldr	r3, [sp, #16]
 801bce6:	fb93 f7f9 	sdiv	r7, r3, r9
 801bcea:	fb09 3717 	mls	r7, r9, r7, r3
 801bcee:	b23f      	sxth	r7, r7
 801bcf0:	f7ff ba98 	b.w	801b224 <MEMS_runMagCal+0x12d0>
 801bcf4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801be6c <MEMS_runMagCal+0x1f18>
 801bcf8:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801bcfc:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801bd00:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801bd04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bd08:	ee87 0a08 	vdiv.f32	s0, s14, s16
 801bd0c:	ee17 2a90 	vmov	r2, s15
 801bd10:	b291      	uxth	r1, r2
 801bd12:	b113      	cbz	r3, 801bd1a <MEMS_runMagCal+0x1dc6>
 801bd14:	3b01      	subs	r3, #1
 801bd16:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 801bd1a:	ee1c 0a10 	vmov	r0, s24
 801bd1e:	f7f7 facf 	bl	80132c0 <MEMS_updateMagBufferIndex>
 801bd22:	eddd 7a08 	vldr	s15, [sp, #32]
 801bd26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801bd2a:	eddf 7a51 	vldr	s15, [pc, #324]	; 801be70 <MEMS_runMagCal+0x1f1c>
 801bd2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bd32:	ee17 0a90 	vmov	r0, s15
 801bd36:	f005 fcb3 	bl	80216a0 <roundf>
 801bd3a:	ee07 0a90 	vmov	s15, r0
 801bd3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bd42:	2300      	movs	r3, #0
 801bd44:	edcb 7a01 	vstr	s15, [fp, #4]
 801bd48:	f88b 3000 	strb.w	r3, [fp]
 801bd4c:	f7fe bd51 	b.w	801a7f2 <MEMS_runMagCal+0x89e>
 801bd50:	fb93 f2f6 	sdiv	r2, r3, r6
 801bd54:	fb06 3312 	mls	r3, r6, r2, r3
 801bd58:	b21a      	sxth	r2, r3
 801bd5a:	4630      	mov	r0, r6
 801bd5c:	f7ff bafa 	b.w	801b354 <MEMS_runMagCal+0x1400>
 801bd60:	f8db 005c 	ldr.w	r0, [fp, #92]	; 0x5c
 801bd64:	f005 fc9c 	bl	80216a0 <roundf>
 801bd68:	ee07 0a90 	vmov	s15, r0
 801bd6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bd70:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 801bd74:	ee17 3a90 	vmov	r3, s15
 801bd78:	f8db 0060 	ldr.w	r0, [fp, #96]	; 0x60
 801bd7c:	f8a9 3000 	strh.w	r3, [r9]
 801bd80:	f005 fc8e 	bl	80216a0 <roundf>
 801bd84:	ee07 0a90 	vmov	s15, r0
 801bd88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bd8c:	f8db 0064 	ldr.w	r0, [fp, #100]	; 0x64
 801bd90:	ee17 3a90 	vmov	r3, s15
 801bd94:	f8a9 3002 	strh.w	r3, [r9, #2]
 801bd98:	f005 fc82 	bl	80216a0 <roundf>
 801bd9c:	ee07 0a90 	vmov	s15, r0
 801bda0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bda4:	ac0f      	add	r4, sp, #60	; 0x3c
 801bda6:	ee17 5a90 	vmov	r5, s15
 801bdaa:	9400      	str	r4, [sp, #0]
 801bdac:	ee1c 0a10 	vmov	r0, s24
 801bdb0:	4649      	mov	r1, r9
 801bdb2:	ab10      	add	r3, sp, #64	; 0x40
 801bdb4:	eeb0 0a48 	vmov.f32	s0, s16
 801bdb8:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 801bdbc:	f8a9 5004 	strh.w	r5, [r9, #4]
 801bdc0:	f7f7 fb2e 	bl	8013420 <getMagStats.constprop.0>
 801bdc4:	ed94 7a00 	vldr	s14, [r4]
 801bdc8:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801be74 <MEMS_runMagCal+0x1f20>
 801bdcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdd4:	d50e      	bpl.n	801bdf4 <MEMS_runMagCal+0x1ea0>
 801bdd6:	b968      	cbnz	r0, 801bdf4 <MEMS_runMagCal+0x1ea0>
 801bdd8:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 801bddc:	b32b      	cbz	r3, 801be2a <MEMS_runMagCal+0x1ed6>
 801bdde:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 801bde2:	ee07 3a90 	vmov	s15, r3
 801bde6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bdea:	eef4 8ae7 	vcmpe.f32	s17, s15
 801bdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdf2:	dc1a      	bgt.n	801be2a <MEMS_runMagCal+0x1ed6>
 801bdf4:	2300      	movs	r3, #0
 801bdf6:	f8c9 3000 	str.w	r3, [r9]
 801bdfa:	f8a9 3004 	strh.w	r3, [r9, #4]
 801bdfe:	f7ff ba8b 	b.w	801b318 <MEMS_runMagCal+0x13c4>
 801be02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801be06:	f7ff bbde 	b.w	801b5c6 <MEMS_runMagCal+0x1672>
 801be0a:	eddf 9a1b 	vldr	s19, [pc, #108]	; 801be78 <MEMS_runMagCal+0x1f24>
 801be0e:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 801be12:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 801be16:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 801be1a:	ee29 9aa4 	vmul.f32	s18, s19, s9
 801be1e:	ee29 aa8a 	vmul.f32	s20, s19, s20
 801be22:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801be26:	f7ff bb22 	b.w	801b46e <MEMS_runMagCal+0x151a>
 801be2a:	eddd 7a08 	vldr	s15, [sp, #32]
 801be2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801be32:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801be70 <MEMS_runMagCal+0x1f1c>
 801be36:	ee67 7a27 	vmul.f32	s15, s14, s15
 801be3a:	2303      	movs	r3, #3
 801be3c:	ee17 0a90 	vmov	r0, s15
 801be40:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 801be44:	e777      	b.n	801bd36 <MEMS_runMagCal+0x1de2>
 801be46:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801be7c <MEMS_runMagCal+0x1f28>
 801be4a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801be4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be52:	f77e aade 	ble.w	801a412 <MEMS_runMagCal+0x4be>
 801be56:	f7fe bae4 	b.w	801a422 <MEMS_runMagCal+0x4ce>
 801be5a:	bf00      	nop
 801be5c:	3c23d70a 	.word	0x3c23d70a
 801be60:	4b095440 	.word	0x4b095440
 801be64:	481c4000 	.word	0x481c4000
 801be68:	471c4000 	.word	0x471c4000
 801be6c:	433d0000 	.word	0x433d0000
 801be70:	3a83126f 	.word	0x3a83126f
 801be74:	3ff4cccd 	.word	0x3ff4cccd
 801be78:	7f800000 	.word	0x7f800000
 801be7c:	3ee66666 	.word	0x3ee66666
 801be80:	423c0000 	.word	0x423c0000
 801be84:	00000000 	.word	0x00000000
 801be88:	2224      	movs	r2, #36	; 0x24
 801be8a:	2100      	movs	r1, #0
 801be8c:	a82d      	add	r0, sp, #180	; 0xb4
 801be8e:	f006 ff7f 	bl	8022d90 <memset>
 801be92:	ed5f 7a05 	vldr	s15, [pc, #-20]	; 801be80 <MEMS_runMagCal+0x1f2c>
 801be96:	eec7 9a89 	vdiv.f32	s19, s15, s18
 801be9a:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 801be9e:	4627      	mov	r7, r4
 801bea0:	ae2d      	add	r6, sp, #180	; 0xb4
 801bea2:	2500      	movs	r5, #0
 801bea4:	3501      	adds	r5, #1
 801bea6:	ecf7 7a01 	vldmia	r7!, {s15}
 801beaa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801beae:	ee17 0a90 	vmov	r0, s15
 801beb2:	f005 fbf5 	bl	80216a0 <roundf>
 801beb6:	ee07 0a90 	vmov	s15, r0
 801beba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bebe:	4633      	mov	r3, r6
 801bec0:	ee17 0a90 	vmov	r0, s15
 801bec4:	2d03      	cmp	r5, #3
 801bec6:	f829 0b02 	strh.w	r0, [r9], #2
 801beca:	f106 0610 	add.w	r6, r6, #16
 801bece:	edc3 9a00 	vstr	s19, [r3]
 801bed2:	d1e7      	bne.n	801bea4 <MEMS_runMagCal+0x1f50>
 801bed4:	ad12      	add	r5, sp, #72	; 0x48
 801bed6:	9500      	str	r5, [sp, #0]
 801bed8:	ab2b      	add	r3, sp, #172	; 0xac
 801beda:	ee1c 0a10 	vmov	r0, s24
 801bede:	a915      	add	r1, sp, #84	; 0x54
 801bee0:	eeb0 0a48 	vmov.f32	s0, s16
 801bee4:	aa2d      	add	r2, sp, #180	; 0xb4
 801bee6:	f7f7 fa9b 	bl	8013420 <getMagStats.constprop.0>
 801beea:	ed5f 3a1b 	vldr	s7, [pc, #-108]	; 801be80 <MEMS_runMagCal+0x1f2c>
 801beee:	ed94 4a03 	vldr	s8, [r4, #12]
 801bef2:	edd5 7a00 	vldr	s15, [r5]
 801bef6:	ed9a 6a00 	vldr	s12, [sl]
 801befa:	edd4 6a06 	vldr	s13, [r4, #24]
 801befe:	edd4 4a00 	vldr	s9, [r4]
 801bf02:	ed94 5a01 	vldr	s10, [r4, #4]
 801bf06:	edd4 5a02 	vldr	s11, [r4, #8]
 801bf0a:	ee83 7a84 	vdiv.f32	s14, s7, s8
 801bf0e:	ad2e      	add	r5, sp, #184	; 0xb8
 801bf10:	2300      	movs	r3, #0
 801bf12:	e9c5 3300 	strd	r3, r3, [r5]
 801bf16:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801bf1a:	60ab      	str	r3, [r5, #8]
 801bf1c:	61ab      	str	r3, [r5, #24]
 801bf1e:	ee26 6a27 	vmul.f32	s12, s12, s15
 801bf22:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801bf26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf2a:	ed8a 6a00 	vstr	s12, [sl]
 801bf2e:	eec5 9a08 	vdiv.f32	s19, s10, s16
 801bf32:	ee84 6a88 	vdiv.f32	s12, s9, s16
 801bf36:	ee85 aa88 	vdiv.f32	s20, s11, s16
 801bf3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801bf3e:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 801bf42:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 801bf46:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 801bf4a:	d405      	bmi.n	801bf58 <MEMS_runMagCal+0x2004>
 801bf4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801bf50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf54:	f57e aa43 	bpl.w	801a3de <MEMS_runMagCal+0x48a>
 801bf58:	ed1f 9a36 	vldr	s18, [pc, #-216]	; 801be84 <MEMS_runMagCal+0x1f30>
 801bf5c:	f7fe ba45 	b.w	801a3ea <MEMS_runMagCal+0x496>
 801bf60:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 801bf64:	4293      	cmp	r3, r2
 801bf66:	f67e ac7e 	bls.w	801a866 <MEMS_runMagCal+0x912>
 801bf6a:	f7fe bc72 	b.w	801a852 <MEMS_runMagCal+0x8fe>
 801bf6e:	bf00      	nop

0801bf70 <MotionFX_initialize>:
 801bf70:	4a3b      	ldr	r2, [pc, #236]	; (801c060 <MotionFX_initialize+0xf0>)
 801bf72:	493c      	ldr	r1, [pc, #240]	; (801c064 <MotionFX_initialize+0xf4>)
 801bf74:	6813      	ldr	r3, [r2, #0]
 801bf76:	f023 0301 	bic.w	r3, r3, #1
 801bf7a:	b530      	push	{r4, r5, lr}
 801bf7c:	6013      	str	r3, [r2, #0]
 801bf7e:	680b      	ldr	r3, [r1, #0]
 801bf80:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 801bf84:	4013      	ands	r3, r2
 801bf86:	f24c 2540 	movw	r5, #49728	; 0xc240
 801bf8a:	42ab      	cmp	r3, r5
 801bf8c:	b085      	sub	sp, #20
 801bf8e:	4604      	mov	r4, r0
 801bf90:	d013      	beq.n	801bfba <MotionFX_initialize+0x4a>
 801bf92:	680b      	ldr	r3, [r1, #0]
 801bf94:	f24c 2170 	movw	r1, #49776	; 0xc270
 801bf98:	4013      	ands	r3, r2
 801bf9a:	428b      	cmp	r3, r1
 801bf9c:	d00d      	beq.n	801bfba <MotionFX_initialize+0x4a>
 801bf9e:	4b32      	ldr	r3, [pc, #200]	; (801c068 <MotionFX_initialize+0xf8>)
 801bfa0:	2201      	movs	r2, #1
 801bfa2:	601a      	str	r2, [r3, #0]
 801bfa4:	681a      	ldr	r2, [r3, #0]
 801bfa6:	2a00      	cmp	r2, #0
 801bfa8:	d1fc      	bne.n	801bfa4 <MotionFX_initialize+0x34>
 801bfaa:	4b30      	ldr	r3, [pc, #192]	; (801c06c <MotionFX_initialize+0xfc>)
 801bfac:	4a30      	ldr	r2, [pc, #192]	; (801c070 <MotionFX_initialize+0x100>)
 801bfae:	601a      	str	r2, [r3, #0]
 801bfb0:	681a      	ldr	r2, [r3, #0]
 801bfb2:	4b30      	ldr	r3, [pc, #192]	; (801c074 <MotionFX_initialize+0x104>)
 801bfb4:	429a      	cmp	r2, r3
 801bfb6:	d01f      	beq.n	801bff8 <MotionFX_initialize+0x88>
 801bfb8:	e7fe      	b.n	801bfb8 <MotionFX_initialize+0x48>
 801bfba:	4b2f      	ldr	r3, [pc, #188]	; (801c078 <MotionFX_initialize+0x108>)
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d1ed      	bne.n	801bf9e <MotionFX_initialize+0x2e>
 801bfc2:	4a2e      	ldr	r2, [pc, #184]	; (801c07c <MotionFX_initialize+0x10c>)
 801bfc4:	6813      	ldr	r3, [r2, #0]
 801bfc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801bfca:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801bfce:	d006      	beq.n	801bfde <MotionFX_initialize+0x6e>
 801bfd0:	6813      	ldr	r3, [r2, #0]
 801bfd2:	f240 4283 	movw	r2, #1155	; 0x483
 801bfd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801bfda:	4293      	cmp	r3, r2
 801bfdc:	d1df      	bne.n	801bf9e <MotionFX_initialize+0x2e>
 801bfde:	4b28      	ldr	r3, [pc, #160]	; (801c080 <MotionFX_initialize+0x110>)
 801bfe0:	2201      	movs	r2, #1
 801bfe2:	601a      	str	r2, [r3, #0]
 801bfe4:	681a      	ldr	r2, [r3, #0]
 801bfe6:	2a00      	cmp	r2, #0
 801bfe8:	d1fc      	bne.n	801bfe4 <MotionFX_initialize+0x74>
 801bfea:	4b26      	ldr	r3, [pc, #152]	; (801c084 <MotionFX_initialize+0x114>)
 801bfec:	4a20      	ldr	r2, [pc, #128]	; (801c070 <MotionFX_initialize+0x100>)
 801bfee:	601a      	str	r2, [r3, #0]
 801bff0:	681a      	ldr	r2, [r3, #0]
 801bff2:	4b20      	ldr	r3, [pc, #128]	; (801c074 <MotionFX_initialize+0x104>)
 801bff4:	429a      	cmp	r2, r3
 801bff6:	d1df      	bne.n	801bfb8 <MotionFX_initialize+0x48>
 801bff8:	4b23      	ldr	r3, [pc, #140]	; (801c088 <MotionFX_initialize+0x118>)
 801bffa:	4a24      	ldr	r2, [pc, #144]	; (801c08c <MotionFX_initialize+0x11c>)
 801bffc:	9301      	str	r3, [sp, #4]
 801bffe:	2501      	movs	r5, #1
 801c000:	4620      	mov	r0, r4
 801c002:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801c006:	7115      	strb	r5, [r2, #4]
 801c008:	f7f7 faf0 	bl	80135ec <MFX_emptyAttitude>
 801c00c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 801c010:	a901      	add	r1, sp, #4
 801c012:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 801c016:	f7f6 fdf3 	bl	8012c00 <updateOrientation>
 801c01a:	a903      	add	r1, sp, #12
 801c01c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 801c020:	f7f6 fdee 	bl	8012c00 <updateOrientation>
 801c024:	a902      	add	r1, sp, #8
 801c026:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801c02a:	f7f6 fde9 	bl	8012c00 <updateOrientation>
 801c02e:	4818      	ldr	r0, [pc, #96]	; (801c090 <MotionFX_initialize+0x120>)
 801c030:	4918      	ldr	r1, [pc, #96]	; (801c094 <MotionFX_initialize+0x124>)
 801c032:	4a19      	ldr	r2, [pc, #100]	; (801c098 <MotionFX_initialize+0x128>)
 801c034:	4b19      	ldr	r3, [pc, #100]	; (801c09c <MotionFX_initialize+0x12c>)
 801c036:	7365      	strb	r5, [r4, #13]
 801c038:	4d19      	ldr	r5, [pc, #100]	; (801c0a0 <MotionFX_initialize+0x130>)
 801c03a:	62a0      	str	r0, [r4, #40]	; 0x28
 801c03c:	6361      	str	r1, [r4, #52]	; 0x34
 801c03e:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 801c042:	2100      	movs	r1, #0
 801c044:	61a2      	str	r2, [r4, #24]
 801c046:	61e3      	str	r3, [r4, #28]
 801c048:	f44f 7281 	mov.w	r2, #258	; 0x102
 801c04c:	f240 1301 	movw	r3, #257	; 0x101
 801c050:	6225      	str	r5, [r4, #32]
 801c052:	62e0      	str	r0, [r4, #44]	; 0x2c
 801c054:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 801c058:	80a2      	strh	r2, [r4, #4]
 801c05a:	81e3      	strh	r3, [r4, #14]
 801c05c:	b005      	add	sp, #20
 801c05e:	bd30      	pop	{r4, r5, pc}
 801c060:	e0002000 	.word	0xe0002000
 801c064:	e000ed00 	.word	0xe000ed00
 801c068:	40023008 	.word	0x40023008
 801c06c:	40023000 	.word	0x40023000
 801c070:	f407a5c2 	.word	0xf407a5c2
 801c074:	b5e8b5cd 	.word	0xb5e8b5cd
 801c078:	e0042000 	.word	0xe0042000
 801c07c:	5c001000 	.word	0x5c001000
 801c080:	58024c08 	.word	0x58024c08
 801c084:	58024c00 	.word	0x58024c00
 801c088:	00756e65 	.word	0x00756e65
 801c08c:	20004620 	.word	0x20004620
 801c090:	3f666666 	.word	0x3f666666
 801c094:	3f2ac083 	.word	0x3f2ac083
 801c098:	3a51b717 	.word	0x3a51b717
 801c09c:	3a378034 	.word	0x3a378034
 801c0a0:	3b378034 	.word	0x3b378034

0801c0a4 <MotionFX_setKnobs>:
 801c0a4:	4b23      	ldr	r3, [pc, #140]	; (801c134 <MotionFX_setKnobs+0x90>)
 801c0a6:	791b      	ldrb	r3, [r3, #4]
 801c0a8:	b903      	cbnz	r3, 801c0ac <MotionFX_setKnobs+0x8>
 801c0aa:	4770      	bx	lr
 801c0ac:	2900      	cmp	r1, #0
 801c0ae:	d0fc      	beq.n	801c0aa <MotionFX_setKnobs+0x6>
 801c0b0:	b570      	push	{r4, r5, r6, lr}
 801c0b2:	4604      	mov	r4, r0
 801c0b4:	684a      	ldr	r2, [r1, #4]
 801c0b6:	6808      	ldr	r0, [r1, #0]
 801c0b8:	688b      	ldr	r3, [r1, #8]
 801c0ba:	6363      	str	r3, [r4, #52]	; 0x34
 801c0bc:	62a0      	str	r0, [r4, #40]	; 0x28
 801c0be:	62e2      	str	r2, [r4, #44]	; 0x2c
 801c0c0:	7b0b      	ldrb	r3, [r1, #12]
 801c0c2:	7163      	strb	r3, [r4, #5]
 801c0c4:	6908      	ldr	r0, [r1, #16]
 801c0c6:	694a      	ldr	r2, [r1, #20]
 801c0c8:	698b      	ldr	r3, [r1, #24]
 801c0ca:	6223      	str	r3, [r4, #32]
 801c0cc:	61e2      	str	r2, [r4, #28]
 801c0ce:	61a0      	str	r0, [r4, #24]
 801c0d0:	7f0b      	ldrb	r3, [r1, #28]
 801c0d2:	7123      	strb	r3, [r4, #4]
 801c0d4:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 801c0d8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801c0dc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801c0de:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 801c0e2:	460a      	mov	r2, r1
 801c0e4:	460b      	mov	r3, r1
 801c0e6:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 801c0ea:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 801c0ee:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 801c0f2:	7889      	ldrb	r1, [r1, #2]
 801c0f4:	7892      	ldrb	r2, [r2, #2]
 801c0f6:	789b      	ldrb	r3, [r3, #2]
 801c0f8:	b084      	sub	sp, #16
 801c0fa:	f88d 1006 	strb.w	r1, [sp, #6]
 801c0fe:	f8ad 000c 	strh.w	r0, [sp, #12]
 801c102:	a901      	add	r1, sp, #4
 801c104:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 801c108:	f88d 200a 	strb.w	r2, [sp, #10]
 801c10c:	f8ad 6004 	strh.w	r6, [sp, #4]
 801c110:	f8ad 5008 	strh.w	r5, [sp, #8]
 801c114:	f88d 300e 	strb.w	r3, [sp, #14]
 801c118:	f7f6 fd72 	bl	8012c00 <updateOrientation>
 801c11c:	a903      	add	r1, sp, #12
 801c11e:	f104 0043 	add.w	r0, r4, #67	; 0x43
 801c122:	f7f6 fd6d 	bl	8012c00 <updateOrientation>
 801c126:	a902      	add	r1, sp, #8
 801c128:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801c12c:	f7f6 fd68 	bl	8012c00 <updateOrientation>
 801c130:	b004      	add	sp, #16
 801c132:	bd70      	pop	{r4, r5, r6, pc}
 801c134:	20004620 	.word	0x20004620

0801c138 <MotionFX_getKnobs>:
 801c138:	4b1c      	ldr	r3, [pc, #112]	; (801c1ac <MotionFX_getKnobs+0x74>)
 801c13a:	791b      	ldrb	r3, [r3, #4]
 801c13c:	b903      	cbnz	r3, 801c140 <MotionFX_getKnobs+0x8>
 801c13e:	4770      	bx	lr
 801c140:	460a      	mov	r2, r1
 801c142:	2900      	cmp	r1, #0
 801c144:	d0fb      	beq.n	801c13e <MotionFX_getKnobs+0x6>
 801c146:	b510      	push	{r4, lr}
 801c148:	4604      	mov	r4, r0
 801c14a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c14c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801c14e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c150:	6093      	str	r3, [r2, #8]
 801c152:	6010      	str	r0, [r2, #0]
 801c154:	6051      	str	r1, [r2, #4]
 801c156:	7963      	ldrb	r3, [r4, #5]
 801c158:	7313      	strb	r3, [r2, #12]
 801c15a:	69a0      	ldr	r0, [r4, #24]
 801c15c:	69e1      	ldr	r1, [r4, #28]
 801c15e:	6a23      	ldr	r3, [r4, #32]
 801c160:	6193      	str	r3, [r2, #24]
 801c162:	6110      	str	r0, [r2, #16]
 801c164:	6151      	str	r1, [r2, #20]
 801c166:	7923      	ldrb	r3, [r4, #4]
 801c168:	7713      	strb	r3, [r2, #28]
 801c16a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c16e:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 801c172:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 801c176:	62d3      	str	r3, [r2, #44]	; 0x2c
 801c178:	f102 011d 	add.w	r1, r2, #29
 801c17c:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 801c180:	f7f6 fb98 	bl	80128b4 <findAxis>
 801c184:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801c188:	f102 0121 	add.w	r1, r2, #33	; 0x21
 801c18c:	f7f6 fb92 	bl	80128b4 <findAxis>
 801c190:	f104 0043 	add.w	r0, r4, #67	; 0x43
 801c194:	f102 0125 	add.w	r1, r2, #37	; 0x25
 801c198:	f7f6 fb8c 	bl	80128b4 <findAxis>
 801c19c:	2300      	movs	r3, #0
 801c19e:	f882 3020 	strb.w	r3, [r2, #32]
 801c1a2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 801c1a6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801c1aa:	bd10      	pop	{r4, pc}
 801c1ac:	20004620 	.word	0x20004620

0801c1b0 <MotionFX_enable_6X>:
 801c1b0:	4b0e      	ldr	r3, [pc, #56]	; (801c1ec <MotionFX_enable_6X+0x3c>)
 801c1b2:	791b      	ldrb	r3, [r3, #4]
 801c1b4:	b903      	cbnz	r3, 801c1b8 <MotionFX_enable_6X+0x8>
 801c1b6:	4770      	bx	lr
 801c1b8:	2900      	cmp	r1, #0
 801c1ba:	d0fc      	beq.n	801c1b6 <MotionFX_enable_6X+0x6>
 801c1bc:	b530      	push	{r4, r5, lr}
 801c1be:	1d05      	adds	r5, r0, #4
 801c1c0:	b099      	sub	sp, #100	; 0x64
 801c1c2:	4604      	mov	r4, r0
 801c1c4:	4629      	mov	r1, r5
 801c1c6:	225c      	movs	r2, #92	; 0x5c
 801c1c8:	a801      	add	r0, sp, #4
 801c1ca:	f006 fdb9 	bl	8022d40 <memcpy>
 801c1ce:	4620      	mov	r0, r4
 801c1d0:	f7f7 fa0c 	bl	80135ec <MFX_emptyAttitude>
 801c1d4:	a901      	add	r1, sp, #4
 801c1d6:	4628      	mov	r0, r5
 801c1d8:	225c      	movs	r2, #92	; 0x5c
 801c1da:	f006 fdb1 	bl	8022d40 <memcpy>
 801c1de:	2300      	movs	r3, #0
 801c1e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801c1e4:	7363      	strb	r3, [r4, #13]
 801c1e6:	b019      	add	sp, #100	; 0x64
 801c1e8:	bd30      	pop	{r4, r5, pc}
 801c1ea:	bf00      	nop
 801c1ec:	20004620 	.word	0x20004620

0801c1f0 <MotionFX_enable_9X>:
 801c1f0:	4b0e      	ldr	r3, [pc, #56]	; (801c22c <MotionFX_enable_9X+0x3c>)
 801c1f2:	791b      	ldrb	r3, [r3, #4]
 801c1f4:	b903      	cbnz	r3, 801c1f8 <MotionFX_enable_9X+0x8>
 801c1f6:	4770      	bx	lr
 801c1f8:	2900      	cmp	r1, #0
 801c1fa:	d0fc      	beq.n	801c1f6 <MotionFX_enable_9X+0x6>
 801c1fc:	b530      	push	{r4, r5, lr}
 801c1fe:	1d05      	adds	r5, r0, #4
 801c200:	b099      	sub	sp, #100	; 0x64
 801c202:	4604      	mov	r4, r0
 801c204:	4629      	mov	r1, r5
 801c206:	225c      	movs	r2, #92	; 0x5c
 801c208:	a801      	add	r0, sp, #4
 801c20a:	f006 fd99 	bl	8022d40 <memcpy>
 801c20e:	4620      	mov	r0, r4
 801c210:	f7f7 f9ec 	bl	80135ec <MFX_emptyAttitude>
 801c214:	a901      	add	r1, sp, #4
 801c216:	4628      	mov	r0, r5
 801c218:	225c      	movs	r2, #92	; 0x5c
 801c21a:	f006 fd91 	bl	8022d40 <memcpy>
 801c21e:	2301      	movs	r3, #1
 801c220:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801c224:	7363      	strb	r3, [r4, #13]
 801c226:	b019      	add	sp, #100	; 0x64
 801c228:	bd30      	pop	{r4, r5, pc}
 801c22a:	bf00      	nop
 801c22c:	20004620 	.word	0x20004620

0801c230 <MotionFX_update>:
 801c230:	b470      	push	{r4, r5, r6}
 801c232:	4c06      	ldr	r4, [pc, #24]	; (801c24c <MotionFX_update+0x1c>)
 801c234:	9e03      	ldr	r6, [sp, #12]
 801c236:	7925      	ldrb	r5, [r4, #4]
 801c238:	b90d      	cbnz	r5, 801c23e <MotionFX_update+0xe>
 801c23a:	bc70      	pop	{r4, r5, r6}
 801c23c:	4770      	bx	lr
 801c23e:	461c      	mov	r4, r3
 801c240:	ed94 0a00 	vldr	s0, [r4]
 801c244:	4633      	mov	r3, r6
 801c246:	bc70      	pop	{r4, r5, r6}
 801c248:	f7fc bec2 	b.w	8018fd0 <iNemoEngine_API_Update>
 801c24c:	20004620 	.word	0x20004620

0801c250 <MotionFX_propagate>:
 801c250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c254:	ed2d 8b04 	vpush	{d8-d9}
 801c258:	4ca2      	ldr	r4, [pc, #648]	; (801c4e4 <MotionFX_propagate+0x294>)
 801c25a:	7927      	ldrb	r7, [r4, #4]
 801c25c:	b0a0      	sub	sp, #128	; 0x80
 801c25e:	b927      	cbnz	r7, 801c26a <MotionFX_propagate+0x1a>
 801c260:	b020      	add	sp, #128	; 0x80
 801c262:	ecbd 8b04 	vpop	{d8-d9}
 801c266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c26a:	4616      	mov	r6, r2
 801c26c:	4604      	mov	r4, r0
 801c26e:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 801c272:	edd3 9a00 	vldr	s19, [r3]
 801c276:	460d      	mov	r5, r1
 801c278:	6851      	ldr	r1, [r2, #4]
 801c27a:	6892      	ldr	r2, [r2, #8]
 801c27c:	ab13      	add	r3, sp, #76	; 0x4c
 801c27e:	c307      	stmia	r3!, {r0, r1, r2}
 801c280:	6830      	ldr	r0, [r6, #0]
 801c282:	6871      	ldr	r1, [r6, #4]
 801c284:	68b2      	ldr	r2, [r6, #8]
 801c286:	ab10      	add	r3, sp, #64	; 0x40
 801c288:	c307      	stmia	r3!, {r0, r1, r2}
 801c28a:	4637      	mov	r7, r6
 801c28c:	ab16      	add	r3, sp, #88	; 0x58
 801c28e:	f857 0f18 	ldr.w	r0, [r7, #24]!
 801c292:	6879      	ldr	r1, [r7, #4]
 801c294:	68ba      	ldr	r2, [r7, #8]
 801c296:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 801c29a:	c307      	stmia	r3!, {r0, r1, r2}
 801c29c:	aa13      	add	r2, sp, #76	; 0x4c
 801c29e:	4649      	mov	r1, r9
 801c2a0:	a803      	add	r0, sp, #12
 801c2a2:	f7f6 faa5 	bl	80127f0 <rotVect>
 801c2a6:	aa16      	add	r2, sp, #88	; 0x58
 801c2a8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801c2ac:	a806      	add	r0, sp, #24
 801c2ae:	f7f6 fa9f 	bl	80127f0 <rotVect>
 801c2b2:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 801c2b6:	2b09      	cmp	r3, #9
 801c2b8:	d825      	bhi.n	801c306 <MotionFX_propagate+0xb6>
 801c2ba:	eddd 8a04 	vldr	s17, [sp, #16]
 801c2be:	ed9d 9a03 	vldr	s18, [sp, #12]
 801c2c2:	ed9d 8a05 	vldr	s16, [sp, #20]
 801c2c6:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801c2ca:	eee9 7a09 	vfma.f32	s15, s18, s18
 801c2ce:	eee8 7a08 	vfma.f32	s15, s16, s16
 801c2d2:	ee17 0a90 	vmov	r0, s15
 801c2d6:	f7e4 f907 	bl	80004e8 <__aeabi_f2d>
 801c2da:	f005 fa75 	bl	80217c8 <sqrt>
 801c2de:	f7e4 fc53 	bl	8000b88 <__aeabi_d2f>
 801c2e2:	ee07 0a90 	vmov	s15, r0
 801c2e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c2ea:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801c2ee:	ee29 9a27 	vmul.f32	s18, s18, s15
 801c2f2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801c2f6:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c2fa:	ed8d 9a03 	vstr	s18, [sp, #12]
 801c2fe:	edcd 8a04 	vstr	s17, [sp, #16]
 801c302:	ed8d 8a05 	vstr	s16, [sp, #20]
 801c306:	7923      	ldrb	r3, [r4, #4]
 801c308:	2b00      	cmp	r3, #0
 801c30a:	f000 80d6 	beq.w	801c4ba <MotionFX_propagate+0x26a>
 801c30e:	ee07 3a90 	vmov	s15, r3
 801c312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c31a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c31e:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 801c322:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 801c326:	f504 6713 	add.w	r7, r4, #2352	; 0x930
 801c32a:	edd2 7a00 	vldr	s15, [r2]
 801c32e:	eddd 8a06 	vldr	s17, [sp, #24]
 801c332:	ed9d 6a07 	vldr	s12, [sp, #28]
 801c336:	ed9d 8a08 	vldr	s16, [sp, #32]
 801c33a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 801c4e8 <MotionFX_propagate+0x298>
 801c33e:	eddf 5a6b 	vldr	s11, [pc, #428]	; 801c4ec <MotionFX_propagate+0x29c>
 801c342:	eee6 7aa8 	vfma.f32	s15, s13, s17
 801c346:	ee26 9a07 	vmul.f32	s18, s12, s14
 801c34a:	edc2 7a00 	vstr	s15, [r2]
 801c34e:	edd3 7a00 	vldr	s15, [r3]
 801c352:	ed8d 9a07 	vstr	s18, [sp, #28]
 801c356:	eee6 7a86 	vfma.f32	s15, s13, s12
 801c35a:	f604 1264 	addw	r2, r4, #2404	; 0x964
 801c35e:	ee68 8a87 	vmul.f32	s17, s17, s14
 801c362:	edc3 7a00 	vstr	s15, [r3]
 801c366:	edd2 7a00 	vldr	s15, [r2]
 801c36a:	edcd 8a06 	vstr	s17, [sp, #24]
 801c36e:	eee6 7a88 	vfma.f32	s15, s13, s16
 801c372:	f604 1344 	addw	r3, r4, #2372	; 0x944
 801c376:	ee28 8a07 	vmul.f32	s16, s16, s14
 801c37a:	edc2 7a00 	vstr	s15, [r2]
 801c37e:	edd3 7a00 	vldr	s15, [r3]
 801c382:	ed8d 8a08 	vstr	s16, [sp, #32]
 801c386:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 801c38a:	ee39 9a67 	vsub.f32	s18, s18, s15
 801c38e:	edd3 7a00 	vldr	s15, [r3]
 801c392:	ee29 7a09 	vmul.f32	s14, s18, s18
 801c396:	ee78 8ae7 	vsub.f32	s17, s17, s15
 801c39a:	f604 1348 	addw	r3, r4, #2376	; 0x948
 801c39e:	edd3 7a00 	vldr	s15, [r3]
 801c3a2:	eea8 7aa8 	vfma.f32	s14, s17, s17
 801c3a6:	ee38 8a67 	vsub.f32	s16, s16, s15
 801c3aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c3ae:	eea8 7a08 	vfma.f32	s14, s16, s16
 801c3b2:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801c3b6:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801c3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3be:	f340 8081 	ble.w	801c4c4 <MotionFX_propagate+0x274>
 801c3c2:	eef1 9ac7 	vsqrt.f32	s19, s14
 801c3c6:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801c3ca:	ee17 0a90 	vmov	r0, s15
 801c3ce:	ee17 6a90 	vmov	r6, s15
 801c3d2:	f005 f98b 	bl	80216ec <sinf>
 801c3d6:	ee07 0a90 	vmov	s15, r0
 801c3da:	eec7 7aa9 	vdiv.f32	s15, s15, s19
 801c3de:	4630      	mov	r0, r6
 801c3e0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801c3e4:	ee29 9a27 	vmul.f32	s18, s18, s15
 801c3e8:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c3ec:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 801c3f0:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 801c3f4:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 801c3f8:	f005 f90e 	bl	8021618 <cosf>
 801c3fc:	900c      	str	r0, [sp, #48]	; 0x30
 801c3fe:	f604 1838 	addw	r8, r4, #2360	; 0x938
 801c402:	a809      	add	r0, sp, #36	; 0x24
 801c404:	463a      	mov	r2, r7
 801c406:	4639      	mov	r1, r7
 801c408:	f7f6 fc86 	bl	8012d18 <qmult>
 801c40c:	edd8 7a00 	vldr	s15, [r8]
 801c410:	ed97 7a00 	vldr	s14, [r7]
 801c414:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 801c418:	f604 1a34 	addw	sl, r4, #2356	; 0x934
 801c41c:	edda 6a00 	vldr	s13, [sl]
 801c420:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801c424:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 801c428:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801c42c:	3301      	adds	r3, #1
 801c42e:	aa13      	add	r2, sp, #76	; 0x4c
 801c430:	edd6 6a00 	vldr	s13, [r6]
 801c434:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801c438:	4649      	mov	r1, r9
 801c43a:	a809      	add	r0, sp, #36	; 0x24
 801c43c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801c440:	eee7 7a07 	vfma.f32	s15, s14, s14
 801c444:	eef1 6ae7 	vsqrt.f32	s13, s15
 801c448:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801c44c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c450:	ed87 7a00 	vstr	s14, [r7]
 801c454:	ed9a 7a00 	vldr	s14, [sl]
 801c458:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c45c:	ed8a 7a00 	vstr	s14, [sl]
 801c460:	ed98 7a00 	vldr	s14, [r8]
 801c464:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c468:	ed88 7a00 	vstr	s14, [r8]
 801c46c:	ed96 7a00 	vldr	s14, [r6]
 801c470:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c474:	edc6 7a00 	vstr	s15, [r6]
 801c478:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 801c47c:	f7f6 f9b8 	bl	80127f0 <rotVect>
 801c480:	f8da 0000 	ldr.w	r0, [sl]
 801c484:	f8d8 1000 	ldr.w	r1, [r8]
 801c488:	6832      	ldr	r2, [r6, #0]
 801c48a:	683b      	ldr	r3, [r7, #0]
 801c48c:	60eb      	str	r3, [r5, #12]
 801c48e:	6128      	str	r0, [r5, #16]
 801c490:	6169      	str	r1, [r5, #20]
 801c492:	61aa      	str	r2, [r5, #24]
 801c494:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c498:	9301      	str	r3, [sp, #4]
 801c49a:	f105 0328 	add.w	r3, r5, #40	; 0x28
 801c49e:	9300      	str	r3, [sp, #0]
 801c4a0:	a909      	add	r1, sp, #36	; 0x24
 801c4a2:	f105 031c 	add.w	r3, r5, #28
 801c4a6:	462a      	mov	r2, r5
 801c4a8:	f105 000c 	add.w	r0, r5, #12
 801c4ac:	f7f7 fc7c 	bl	8013da8 <output_update>
 801c4b0:	b020      	add	sp, #128	; 0x80
 801c4b2:	ecbd 8b04 	vpop	{d8-d9}
 801c4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4ba:	2301      	movs	r3, #1
 801c4bc:	7123      	strb	r3, [r4, #4]
 801c4be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c4c2:	e72c      	b.n	801c31e <MotionFX_propagate+0xce>
 801c4c4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801c4c8:	ee29 9a27 	vmul.f32	s18, s18, s15
 801c4cc:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c4d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801c4d4:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 801c4d8:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 801c4dc:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 801c4e0:	930c      	str	r3, [sp, #48]	; 0x30
 801c4e2:	e78c      	b.n	801c3fe <MotionFX_propagate+0x1ae>
 801c4e4:	20004620 	.word	0x20004620
 801c4e8:	3c8efa35 	.word	0x3c8efa35
 801c4ec:	38d1b718 	.word	0x38d1b718

0801c4f0 <MotionFX_MagCal_init>:
 801c4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4f2:	4c44      	ldr	r4, [pc, #272]	; (801c604 <MotionFX_MagCal_init+0x114>)
 801c4f4:	7923      	ldrb	r3, [r4, #4]
 801c4f6:	b903      	cbnz	r3, 801c4fa <MotionFX_MagCal_init+0xa>
 801c4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c4fa:	1e43      	subs	r3, r0, #1
 801c4fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801c500:	4605      	mov	r5, r0
 801c502:	d2f9      	bcs.n	801c4f8 <MotionFX_MagCal_init+0x8>
 801c504:	2900      	cmp	r1, #0
 801c506:	d139      	bne.n	801c57c <MotionFX_MagCal_init+0x8c>
 801c508:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 801c50c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801c510:	4a3d      	ldr	r2, [pc, #244]	; (801c608 <MotionFX_MagCal_init+0x118>)
 801c512:	1b5b      	subs	r3, r3, r5
 801c514:	ee07 3a90 	vmov	s15, r3
 801c518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c51c:	23c8      	movs	r3, #200	; 0xc8
 801c51e:	eef0 7ae7 	vabs.f32	s15, s15
 801c522:	fb93 f3f5 	sdiv	r3, r3, r5
 801c526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c52a:	b2db      	uxtb	r3, r3
 801c52c:	2b0f      	cmp	r3, #15
 801c52e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c532:	bf28      	it	cs
 801c534:	230f      	movcs	r3, #15
 801c536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c53a:	6015      	str	r5, [r2, #0]
 801c53c:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 801c540:	b22d      	sxth	r5, r5
 801c542:	dc0e      	bgt.n	801c562 <MotionFX_MagCal_init+0x72>
 801c544:	edd4 7a03 	vldr	s15, [r4, #12]
 801c548:	eddf 6a30 	vldr	s13, [pc, #192]	; 801c60c <MotionFX_MagCal_init+0x11c>
 801c54c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801c610 <MotionFX_MagCal_init+0x120>
 801c550:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c554:	eef0 7ae7 	vabs.f32	s15, s15
 801c558:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c560:	dd08      	ble.n	801c574 <MotionFX_MagCal_init+0x84>
 801c562:	2300      	movs	r3, #0
 801c564:	492b      	ldr	r1, [pc, #172]	; (801c614 <MotionFX_MagCal_init+0x124>)
 801c566:	8165      	strh	r5, [r4, #10]
 801c568:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 801c56c:	60e1      	str	r1, [r4, #12]
 801c56e:	8223      	strh	r3, [r4, #16]
 801c570:	6163      	str	r3, [r4, #20]
 801c572:	8122      	strh	r2, [r4, #8]
 801c574:	2300      	movs	r3, #0
 801c576:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 801c57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c57c:	2600      	movs	r6, #0
 801c57e:	4826      	ldr	r0, [pc, #152]	; (801c618 <MotionFX_MagCal_init+0x128>)
 801c580:	61a0      	str	r0, [r4, #24]
 801c582:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 801c586:	4631      	mov	r1, r6
 801c588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801c58c:	6122      	str	r2, [r4, #16]
 801c58e:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801c592:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c596:	6166      	str	r6, [r4, #20]
 801c598:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 801c59c:	6566      	str	r6, [r4, #84]	; 0x54
 801c59e:	83a6      	strh	r6, [r4, #28]
 801c5a0:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 801c5a4:	f006 fbf4 	bl	8022d90 <memset>
 801c5a8:	23ff      	movs	r3, #255	; 0xff
 801c5aa:	225f      	movs	r2, #95	; 0x5f
 801c5ac:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 801c5b0:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 801c5b4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801c5b8:	2200      	movs	r2, #0
 801c5ba:	2300      	movs	r3, #0
 801c5bc:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801c5c0:	f44f 7780 	mov.w	r7, #256	; 0x100
 801c5c4:	4631      	mov	r1, r6
 801c5c6:	62a6      	str	r6, [r4, #40]	; 0x28
 801c5c8:	2230      	movs	r2, #48	; 0x30
 801c5ca:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 801c5ce:	f104 0074 	add.w	r0, r4, #116	; 0x74
 801c5d2:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 801c5d6:	85a6      	strh	r6, [r4, #44]	; 0x2c
 801c5d8:	f006 fbda 	bl	8022d90 <memset>
 801c5dc:	f1a5 030a 	sub.w	r3, r5, #10
 801c5e0:	b29b      	uxth	r3, r3
 801c5e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c5e6:	2b32      	cmp	r3, #50	; 0x32
 801c5e8:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 801c5ec:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 801c5f0:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 801c5f4:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 801c5f8:	d888      	bhi.n	801c50c <MotionFX_MagCal_init+0x1c>
 801c5fa:	2301      	movs	r3, #1
 801c5fc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 801c600:	e784      	b.n	801c50c <MotionFX_MagCal_init+0x1c>
 801c602:	bf00      	nop
 801c604:	20004620 	.word	0x20004620
 801c608:	200002f0 	.word	0x200002f0
 801c60c:	3dcccccd 	.word	0x3dcccccd
 801c610:	3c23d70a 	.word	0x3c23d70a
 801c614:	3dcccccd 	.word	0x3dcccccd
 801c618:	200068b8 	.word	0x200068b8

0801c61c <MotionFX_MagCal_run>:
 801c61c:	4a3e      	ldr	r2, [pc, #248]	; (801c718 <MotionFX_MagCal_run+0xfc>)
 801c61e:	7913      	ldrb	r3, [r2, #4]
 801c620:	2b00      	cmp	r3, #0
 801c622:	d077      	beq.n	801c714 <MotionFX_MagCal_run+0xf8>
 801c624:	ed90 7a00 	vldr	s14, [r0]
 801c628:	eddf 6a3c 	vldr	s13, [pc, #240]	; 801c71c <MotionFX_MagCal_run+0x100>
 801c62c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801c630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c634:	bfb4      	ite	lt
 801c636:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801c63a:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 801c63e:	eee7 7a26 	vfma.f32	s15, s14, s13
 801c642:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c644:	ed90 7a01 	vldr	s14, [r0, #4]
 801c648:	eddf 6a34 	vldr	s13, [pc, #208]	; 801c71c <MotionFX_MagCal_run+0x100>
 801c64c:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 801c650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c654:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801c658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c65c:	ee17 1a90 	vmov	r1, s15
 801c660:	bfb4      	ite	lt
 801c662:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801c666:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 801c66a:	eee7 7a26 	vfma.f32	s15, s14, s13
 801c66e:	ed90 7a02 	vldr	s14, [r0, #8]
 801c672:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801c71c <MotionFX_MagCal_run+0x100>
 801c676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c67a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801c67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c682:	ee17 4a90 	vmov	r4, s15
 801c686:	bfac      	ite	ge
 801c688:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 801c68c:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801c690:	eee7 7a26 	vfma.f32	s15, s14, s13
 801c694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c698:	ee17 7a90 	vmov	r7, s15
 801c69c:	b383      	cbz	r3, 801c700 <MotionFX_MagCal_run+0xe4>
 801c69e:	4820      	ldr	r0, [pc, #128]	; (801c720 <MotionFX_MagCal_run+0x104>)
 801c6a0:	6805      	ldr	r5, [r0, #0]
 801c6a2:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 801c6a6:	fb15 f503 	smulbb	r5, r5, r3
 801c6aa:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 801c6ae:	00dd      	lsls	r5, r3, #3
 801c6b0:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 801c6b4:	f8df c06c 	ldr.w	ip, [pc, #108]	; 801c724 <MotionFX_MagCal_run+0x108>
 801c6b8:	42b1      	cmp	r1, r6
 801c6ba:	bfa8      	it	ge
 801c6bc:	4631      	movge	r1, r6
 801c6be:	42b7      	cmp	r7, r6
 801c6c0:	bfa8      	it	ge
 801c6c2:	4637      	movge	r7, r6
 801c6c4:	4561      	cmp	r1, ip
 801c6c6:	4608      	mov	r0, r1
 801c6c8:	bfb8      	it	lt
 801c6ca:	4660      	movlt	r0, ip
 801c6cc:	4564      	cmp	r4, ip
 801c6ce:	db1f      	blt.n	801c710 <MotionFX_MagCal_run+0xf4>
 801c6d0:	42b4      	cmp	r4, r6
 801c6d2:	bfa8      	it	ge
 801c6d4:	4634      	movge	r4, r6
 801c6d6:	b224      	sxth	r4, r4
 801c6d8:	4e12      	ldr	r6, [pc, #72]	; (801c724 <MotionFX_MagCal_run+0x108>)
 801c6da:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 801c6de:	3301      	adds	r3, #1
 801c6e0:	4415      	add	r5, r2
 801c6e2:	b2db      	uxtb	r3, r3
 801c6e4:	42b7      	cmp	r7, r6
 801c6e6:	bfb8      	it	lt
 801c6e8:	4637      	movlt	r7, r6
 801c6ea:	428b      	cmp	r3, r1
 801c6ec:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 801c6f0:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 801c6f4:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 801c6f8:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 801c6fc:	d014      	beq.n	801c728 <MotionFX_MagCal_run+0x10c>
 801c6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c700:	68c0      	ldr	r0, [r0, #12]
 801c702:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 801c706:	2001      	movs	r0, #1
 801c708:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 801c70c:	461d      	mov	r5, r3
 801c70e:	e7cf      	b.n	801c6b0 <MotionFX_MagCal_run+0x94>
 801c710:	4634      	mov	r4, r6
 801c712:	e7e1      	b.n	801c6d8 <MotionFX_MagCal_run+0xbc>
 801c714:	4770      	bx	lr
 801c716:	bf00      	nop
 801c718:	20004620 	.word	0x20004620
 801c71c:	43fa0000 	.word	0x43fa0000
 801c720:	200002f0 	.word	0x200002f0
 801c724:	ffff8002 	.word	0xffff8002
 801c728:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 801c72c:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 801c730:	2000      	movs	r0, #0
 801c732:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 801c736:	2b00      	cmp	r3, #0
 801c738:	f000 8159 	beq.w	801c9ee <MotionFX_MagCal_run+0x3d2>
 801c73c:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 801c740:	8a57      	ldrh	r7, [r2, #18]
 801c742:	8a13      	ldrh	r3, [r2, #16]
 801c744:	2900      	cmp	r1, #0
 801c746:	f000 8150 	beq.w	801c9ea <MotionFX_MagCal_run+0x3ce>
 801c74a:	2f00      	cmp	r7, #0
 801c74c:	f000 814d 	beq.w	801c9ea <MotionFX_MagCal_run+0x3ce>
 801c750:	42bb      	cmp	r3, r7
 801c752:	bf28      	it	cs
 801c754:	463b      	movcs	r3, r7
 801c756:	3301      	adds	r3, #1
 801c758:	b29b      	uxth	r3, r3
 801c75a:	42bb      	cmp	r3, r7
 801c75c:	bf28      	it	cs
 801c75e:	463b      	movcs	r3, r7
 801c760:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 801c764:	191d      	adds	r5, r3, r4
 801c766:	f04f 0c01 	mov.w	ip, #1
 801c76a:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 801c76e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 801c772:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 801c776:	f8c5 e002 	str.w	lr, [r5, #2]
 801c77a:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 801c77e:	f8a5 e006 	strh.w	lr, [r5, #6]
 801c782:	4561      	cmp	r1, ip
 801c784:	f000 812a 	beq.w	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c788:	4463      	add	r3, ip
 801c78a:	b29b      	uxth	r3, r3
 801c78c:	42bb      	cmp	r3, r7
 801c78e:	bf28      	it	cs
 801c790:	463b      	movcs	r3, r7
 801c792:	eb03 0e04 	add.w	lr, r3, r4
 801c796:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801c79a:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801c79e:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 801c7a2:	f8c5 e002 	str.w	lr, [r5, #2]
 801c7a6:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 801c7aa:	f8a5 e006 	strh.w	lr, [r5, #6]
 801c7ae:	2902      	cmp	r1, #2
 801c7b0:	f000 8114 	beq.w	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c7b4:	4463      	add	r3, ip
 801c7b6:	b29b      	uxth	r3, r3
 801c7b8:	42bb      	cmp	r3, r7
 801c7ba:	bf28      	it	cs
 801c7bc:	463b      	movcs	r3, r7
 801c7be:	eb03 0e04 	add.w	lr, r3, r4
 801c7c2:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801c7c6:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801c7ca:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 801c7ce:	f8c5 e002 	str.w	lr, [r5, #2]
 801c7d2:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 801c7d6:	f8a5 e006 	strh.w	lr, [r5, #6]
 801c7da:	2903      	cmp	r1, #3
 801c7dc:	f000 80fe 	beq.w	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c7e0:	4463      	add	r3, ip
 801c7e2:	b29b      	uxth	r3, r3
 801c7e4:	42bb      	cmp	r3, r7
 801c7e6:	bf28      	it	cs
 801c7e8:	463b      	movcs	r3, r7
 801c7ea:	eb03 0e04 	add.w	lr, r3, r4
 801c7ee:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801c7f2:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801c7f6:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 801c7fa:	f8c5 e002 	str.w	lr, [r5, #2]
 801c7fe:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 801c802:	f8a5 e006 	strh.w	lr, [r5, #6]
 801c806:	2904      	cmp	r1, #4
 801c808:	f000 80e8 	beq.w	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c80c:	4463      	add	r3, ip
 801c80e:	b29b      	uxth	r3, r3
 801c810:	42bb      	cmp	r3, r7
 801c812:	bf28      	it	cs
 801c814:	463b      	movcs	r3, r7
 801c816:	eb03 0e04 	add.w	lr, r3, r4
 801c81a:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801c81e:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801c822:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 801c826:	f8c5 e002 	str.w	lr, [r5, #2]
 801c82a:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 801c82e:	f8a5 e006 	strh.w	lr, [r5, #6]
 801c832:	2905      	cmp	r1, #5
 801c834:	f000 80d2 	beq.w	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c838:	4463      	add	r3, ip
 801c83a:	b29b      	uxth	r3, r3
 801c83c:	42bb      	cmp	r3, r7
 801c83e:	bf28      	it	cs
 801c840:	463b      	movcs	r3, r7
 801c842:	441c      	add	r4, r3
 801c844:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 801c848:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 801c84c:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 801c850:	f8c5 4002 	str.w	r4, [r5, #2]
 801c854:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 801c858:	80ec      	strh	r4, [r5, #6]
 801c85a:	2906      	cmp	r1, #6
 801c85c:	f000 80be 	beq.w	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c860:	4463      	add	r3, ip
 801c862:	b29b      	uxth	r3, r3
 801c864:	42bb      	cmp	r3, r7
 801c866:	bf28      	it	cs
 801c868:	463b      	movcs	r3, r7
 801c86a:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 801c86e:	eb03 0c04 	add.w	ip, r3, r4
 801c872:	2501      	movs	r5, #1
 801c874:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 801c878:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 801c87c:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 801c880:	f8cc e002 	str.w	lr, [ip, #2]
 801c884:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 801c888:	f8ac e006 	strh.w	lr, [ip, #6]
 801c88c:	2907      	cmp	r1, #7
 801c88e:	f000 80a5 	beq.w	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c892:	442b      	add	r3, r5
 801c894:	b29b      	uxth	r3, r3
 801c896:	42bb      	cmp	r3, r7
 801c898:	bf28      	it	cs
 801c89a:	463b      	movcs	r3, r7
 801c89c:	eb03 0e04 	add.w	lr, r3, r4
 801c8a0:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801c8a4:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801c8a8:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 801c8ac:	f8cc e002 	str.w	lr, [ip, #2]
 801c8b0:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 801c8b4:	f8ac e006 	strh.w	lr, [ip, #6]
 801c8b8:	2908      	cmp	r1, #8
 801c8ba:	f000 808f 	beq.w	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c8be:	442b      	add	r3, r5
 801c8c0:	b29b      	uxth	r3, r3
 801c8c2:	42bb      	cmp	r3, r7
 801c8c4:	bf28      	it	cs
 801c8c6:	463b      	movcs	r3, r7
 801c8c8:	eb03 0e04 	add.w	lr, r3, r4
 801c8cc:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801c8d0:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801c8d4:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 801c8d8:	f8cc e002 	str.w	lr, [ip, #2]
 801c8dc:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 801c8e0:	f8ac e006 	strh.w	lr, [ip, #6]
 801c8e4:	2909      	cmp	r1, #9
 801c8e6:	d079      	beq.n	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c8e8:	442b      	add	r3, r5
 801c8ea:	b29b      	uxth	r3, r3
 801c8ec:	42bb      	cmp	r3, r7
 801c8ee:	bf28      	it	cs
 801c8f0:	463b      	movcs	r3, r7
 801c8f2:	eb03 0e04 	add.w	lr, r3, r4
 801c8f6:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801c8fa:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801c8fe:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 801c902:	f8cc e002 	str.w	lr, [ip, #2]
 801c906:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 801c90a:	f8ac e006 	strh.w	lr, [ip, #6]
 801c90e:	290a      	cmp	r1, #10
 801c910:	d064      	beq.n	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c912:	442b      	add	r3, r5
 801c914:	b29b      	uxth	r3, r3
 801c916:	42bb      	cmp	r3, r7
 801c918:	bf28      	it	cs
 801c91a:	463b      	movcs	r3, r7
 801c91c:	eb03 0e04 	add.w	lr, r3, r4
 801c920:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801c924:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801c928:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 801c92c:	f8cc e002 	str.w	lr, [ip, #2]
 801c930:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 801c934:	f8ac e006 	strh.w	lr, [ip, #6]
 801c938:	290b      	cmp	r1, #11
 801c93a:	d04f      	beq.n	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c93c:	442b      	add	r3, r5
 801c93e:	b29b      	uxth	r3, r3
 801c940:	42bb      	cmp	r3, r7
 801c942:	bf28      	it	cs
 801c944:	463b      	movcs	r3, r7
 801c946:	eb03 0e04 	add.w	lr, r3, r4
 801c94a:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801c94e:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801c952:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 801c956:	f8cc e002 	str.w	lr, [ip, #2]
 801c95a:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 801c95e:	f8ac e006 	strh.w	lr, [ip, #6]
 801c962:	290c      	cmp	r1, #12
 801c964:	d03a      	beq.n	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c966:	442b      	add	r3, r5
 801c968:	b29b      	uxth	r3, r3
 801c96a:	42bb      	cmp	r3, r7
 801c96c:	bf28      	it	cs
 801c96e:	463b      	movcs	r3, r7
 801c970:	eb03 0e04 	add.w	lr, r3, r4
 801c974:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801c978:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801c97c:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 801c980:	f8cc e002 	str.w	lr, [ip, #2]
 801c984:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 801c988:	f8ac e006 	strh.w	lr, [ip, #6]
 801c98c:	290d      	cmp	r1, #13
 801c98e:	d025      	beq.n	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c990:	442b      	add	r3, r5
 801c992:	b29b      	uxth	r3, r3
 801c994:	42bb      	cmp	r3, r7
 801c996:	bf28      	it	cs
 801c998:	463b      	movcs	r3, r7
 801c99a:	eb03 0e04 	add.w	lr, r3, r4
 801c99e:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801c9a2:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801c9a6:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 801c9aa:	f8cc e002 	str.w	lr, [ip, #2]
 801c9ae:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 801c9b2:	f8ac e006 	strh.w	lr, [ip, #6]
 801c9b6:	290e      	cmp	r1, #14
 801c9b8:	d010      	beq.n	801c9dc <MotionFX_MagCal_run+0x3c0>
 801c9ba:	442b      	add	r3, r5
 801c9bc:	b29b      	uxth	r3, r3
 801c9be:	42bb      	cmp	r3, r7
 801c9c0:	bf28      	it	cs
 801c9c2:	463b      	movcs	r3, r7
 801c9c4:	441c      	add	r4, r3
 801c9c6:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 801c9ca:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 801c9ce:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 801c9d2:	f8c7 0002 	str.w	r0, [r7, #2]
 801c9d6:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 801c9da:	80f8      	strh	r0, [r7, #6]
 801c9dc:	3901      	subs	r1, #1
 801c9de:	b2c9      	uxtb	r1, r1
 801c9e0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801c9e4:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 801c9e8:	4434      	add	r4, r6
 801c9ea:	8213      	strh	r3, [r2, #16]
 801c9ec:	6154      	str	r4, [r2, #20]
 801c9ee:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	f43f ae83 	beq.w	801c6fe <MotionFX_MagCal_run+0xe2>
 801c9f8:	8a11      	ldrh	r1, [r2, #16]
 801c9fa:	8a53      	ldrh	r3, [r2, #18]
 801c9fc:	428b      	cmp	r3, r1
 801c9fe:	d022      	beq.n	801ca46 <MotionFX_MagCal_run+0x42a>
 801ca00:	b341      	cbz	r1, 801ca54 <MotionFX_MagCal_run+0x438>
 801ca02:	6953      	ldr	r3, [r2, #20]
 801ca04:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 801ca08:	3301      	adds	r3, #1
 801ca0a:	4403      	add	r3, r0
 801ca0c:	1c58      	adds	r0, r3, #1
 801ca0e:	d021      	beq.n	801ca54 <MotionFX_MagCal_run+0x438>
 801ca10:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 801ca14:	3410      	adds	r4, #16
 801ca16:	6d50      	ldr	r0, [r2, #84]	; 0x54
 801ca18:	42a0      	cmp	r0, r4
 801ca1a:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 801ca1e:	bf84      	itt	hi
 801ca20:	6553      	strhi	r3, [r2, #84]	; 0x54
 801ca22:	4618      	movhi	r0, r3
 801ca24:	4420      	add	r0, r4
 801ca26:	4283      	cmp	r3, r0
 801ca28:	f4ff ae69 	bcc.w	801c6fe <MotionFX_MagCal_run+0xe2>
 801ca2c:	b131      	cbz	r1, 801ca3c <MotionFX_MagCal_run+0x420>
 801ca2e:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 801ca32:	6952      	ldr	r2, [r2, #20]
 801ca34:	3901      	subs	r1, #1
 801ca36:	fb00 2111 	mls	r1, r0, r1, r2
 801ca3a:	b289      	uxth	r1, r1
 801ca3c:	1a5b      	subs	r3, r3, r1
 801ca3e:	b21b      	sxth	r3, r3
 801ca40:	42a3      	cmp	r3, r4
 801ca42:	f6ff ae5c 	blt.w	801c6fe <MotionFX_MagCal_run+0xe2>
 801ca46:	4905      	ldr	r1, [pc, #20]	; (801ca5c <MotionFX_MagCal_run+0x440>)
 801ca48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ca4c:	f101 0014 	add.w	r0, r1, #20
 801ca50:	f7fd ba80 	b.w	8019f54 <MEMS_runMagCal>
 801ca54:	f242 7410 	movw	r4, #10000	; 0x2710
 801ca58:	2300      	movs	r3, #0
 801ca5a:	e7dc      	b.n	801ca16 <MotionFX_MagCal_run+0x3fa>
 801ca5c:	20004628 	.word	0x20004628

0801ca60 <MotionFX_MagCal_getParams>:
 801ca60:	b4f0      	push	{r4, r5, r6, r7}
 801ca62:	4f1b      	ldr	r7, [pc, #108]	; (801cad0 <MotionFX_MagCal_getParams+0x70>)
 801ca64:	793b      	ldrb	r3, [r7, #4]
 801ca66:	b08e      	sub	sp, #56	; 0x38
 801ca68:	b373      	cbz	r3, 801cac8 <MotionFX_MagCal_getParams+0x68>
 801ca6a:	f107 0574 	add.w	r5, r7, #116	; 0x74
 801ca6e:	4606      	mov	r6, r0
 801ca70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ca72:	ac01      	add	r4, sp, #4
 801ca74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ca76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ca78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ca7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ca7c:	ed9d 7a03 	vldr	s14, [sp, #12]
 801ca80:	eddd 6a02 	vldr	s13, [sp, #8]
 801ca84:	eddd 7a04 	vldr	s15, [sp, #16]
 801ca88:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801cad4 <MotionFX_MagCal_getParams+0x74>
 801ca8c:	682d      	ldr	r5, [r5, #0]
 801ca8e:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 801ca92:	7337      	strb	r7, [r6, #12]
 801ca94:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801ca98:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801ca9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801caa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801caa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801caa6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801caaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801caae:	ee27 7a06 	vmul.f32	s14, s14, s12
 801cab2:	ee66 6a86 	vmul.f32	s13, s13, s12
 801cab6:	ee67 7a86 	vmul.f32	s15, s15, s12
 801caba:	6025      	str	r5, [r4, #0]
 801cabc:	edc6 6a00 	vstr	s13, [r6]
 801cac0:	ed86 7a01 	vstr	s14, [r6, #4]
 801cac4:	edc6 7a02 	vstr	s15, [r6, #8]
 801cac8:	b00e      	add	sp, #56	; 0x38
 801caca:	bcf0      	pop	{r4, r5, r6, r7}
 801cacc:	4770      	bx	lr
 801cace:	bf00      	nop
 801cad0:	20004620 	.word	0x20004620
 801cad4:	3b03126f 	.word	0x3b03126f

0801cad8 <MotionGR_Update>:
 801cad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cadc:	ed2d 8b10 	vpush	{d8-d15}
 801cae0:	4d04      	ldr	r5, [pc, #16]	; (801caf4 <MotionGR_Update+0x1c>)
 801cae2:	b0d7      	sub	sp, #348	; 0x15c
 801cae4:	782b      	ldrb	r3, [r5, #0]
 801cae6:	9111      	str	r1, [sp, #68]	; 0x44
 801cae8:	b943      	cbnz	r3, 801cafc <MotionGR_Update+0x24>
 801caea:	b057      	add	sp, #348	; 0x15c
 801caec:	ecbd 8b10 	vpop	{d8-d15}
 801caf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801caf4:	20004a70 	.word	0x20004a70
 801caf8:	411cf5c3 	.word	0x411cf5c3
 801cafc:	f995 3008 	ldrsb.w	r3, [r5, #8]
 801cb00:	ed5f 5a03 	vldr	s11, [pc, #-12]	; 801caf8 <MotionGR_Update+0x20>
 801cb04:	ed90 6a01 	vldr	s12, [r0, #4]
 801cb08:	f995 400a 	ldrsb.w	r4, [r5, #10]
 801cb0c:	edd0 6a00 	vldr	s13, [r0]
 801cb10:	f995 2006 	ldrsb.w	r2, [r5, #6]
 801cb14:	f995 1009 	ldrsb.w	r1, [r5, #9]
 801cb18:	ed90 7a02 	vldr	s14, [r0, #8]
 801cb1c:	ee08 3a90 	vmov	s17, r3
 801cb20:	f995 3005 	ldrsb.w	r3, [r5, #5]
 801cb24:	ee07 3a90 	vmov	s15, r3
 801cb28:	f995 3007 	ldrsb.w	r3, [r5, #7]
 801cb2c:	ee04 3a90 	vmov	s9, r3
 801cb30:	f995 300b 	ldrsb.w	r3, [r5, #11]
 801cb34:	ee08 3a10 	vmov	s16, r3
 801cb38:	ee26 6a25 	vmul.f32	s12, s12, s11
 801cb3c:	f995 3004 	ldrsb.w	r3, [r5, #4]
 801cb40:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801cb44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cb48:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801cb4c:	ee05 3a10 	vmov	s10, r3
 801cb50:	ee68 8a86 	vmul.f32	s17, s17, s12
 801cb54:	ee67 7a86 	vmul.f32	s15, s15, s12
 801cb58:	ee28 8a06 	vmul.f32	s16, s16, s12
 801cb5c:	ee06 4a10 	vmov	s12, r4
 801cb60:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801cb64:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801cb68:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801cb6c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801cb70:	eee6 7a85 	vfma.f32	s15, s13, s10
 801cb74:	f995 300c 	ldrsb.w	r3, [r5, #12]
 801cb78:	eea6 8a86 	vfma.f32	s16, s13, s12
 801cb7c:	ee06 2a10 	vmov	s12, r2
 801cb80:	eee6 8aa4 	vfma.f32	s17, s13, s9
 801cb84:	ee06 1a90 	vmov	s13, r1
 801cb88:	ee27 7a25 	vmul.f32	s14, s14, s11
 801cb8c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801cb90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cb94:	eee7 7a06 	vfma.f32	s15, s14, s12
 801cb98:	eee7 8a26 	vfma.f32	s17, s14, s13
 801cb9c:	ee06 3a90 	vmov	s13, r3
 801cba0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cba4:	ee17 0a90 	vmov	r0, s15
 801cba8:	eea7 8a26 	vfma.f32	s16, s14, s13
 801cbac:	f7e3 fc9c 	bl	80004e8 <__aeabi_f2d>
 801cbb0:	f20f 630c 	addw	r3, pc, #1548	; 0x60c
 801cbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbb8:	f7e3 fcee 	bl	8000598 <__aeabi_dmul>
 801cbbc:	4602      	mov	r2, r0
 801cbbe:	460b      	mov	r3, r1
 801cbc0:	ee18 0a90 	vmov	r0, s17
 801cbc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801cbc8:	f7e3 fc8e 	bl	80004e8 <__aeabi_f2d>
 801cbcc:	f20f 53f0 	addw	r3, pc, #1520	; 0x5f0
 801cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbd4:	f7e3 fce0 	bl	8000598 <__aeabi_dmul>
 801cbd8:	4602      	mov	r2, r0
 801cbda:	460b      	mov	r3, r1
 801cbdc:	ee18 0a10 	vmov	r0, s16
 801cbe0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cbe4:	f7e3 fc80 	bl	80004e8 <__aeabi_f2d>
 801cbe8:	f20f 53d4 	addw	r3, pc, #1492	; 0x5d4
 801cbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbf0:	f7e3 fcd2 	bl	8000598 <__aeabi_dmul>
 801cbf4:	692b      	ldr	r3, [r5, #16]
 801cbf6:	3301      	adds	r3, #1
 801cbf8:	2b01      	cmp	r3, #1
 801cbfa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cbfe:	9310      	str	r3, [sp, #64]	; 0x40
 801cc00:	612b      	str	r3, [r5, #16]
 801cc02:	f001 8008 	beq.w	801dc16 <MotionGR_Update+0x113e>
 801cc06:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
 801cc0a:	f8d5 4278 	ldr.w	r4, [r5, #632]	; 0x278
 801cc0e:	930e      	str	r3, [sp, #56]	; 0x38
 801cc10:	ed95 7ba6 	vldr	d7, [r5, #664]	; 0x298
 801cc14:	f20f 53b0 	addw	r3, pc, #1456	; 0x5b0
 801cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc1c:	e9d5 01aa 	ldrd	r0, r1, [r5, #680]	; 0x2a8
 801cc20:	ed8d 7b00 	vstr	d7, [sp]
 801cc24:	f7e3 fcb8 	bl	8000598 <__aeabi_dmul>
 801cc28:	f20f 53a4 	addw	r3, pc, #1444	; 0x5a4
 801cc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc30:	4606      	mov	r6, r0
 801cc32:	460f      	mov	r7, r1
 801cc34:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cc38:	f7e3 fcae 	bl	8000598 <__aeabi_dmul>
 801cc3c:	ed95 7bb2 	vldr	d7, [r5, #712]	; 0x2c8
 801cc40:	4602      	mov	r2, r0
 801cc42:	460b      	mov	r3, r1
 801cc44:	4630      	mov	r0, r6
 801cc46:	4639      	mov	r1, r7
 801cc48:	ed8d 7b06 	vstr	d7, [sp, #24]
 801cc4c:	f7e3 faee 	bl	800022c <__adddf3>
 801cc50:	f20f 5384 	addw	r3, pc, #1412	; 0x584
 801cc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc58:	4606      	mov	r6, r0
 801cc5a:	460f      	mov	r7, r1
 801cc5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cc60:	f7e3 fc9a 	bl	8000598 <__aeabi_dmul>
 801cc64:	4602      	mov	r2, r0
 801cc66:	460b      	mov	r3, r1
 801cc68:	4630      	mov	r0, r6
 801cc6a:	4639      	mov	r1, r7
 801cc6c:	f7e3 fadc 	bl	8000228 <__aeabi_dsub>
 801cc70:	f20f 536c 	addw	r3, pc, #1388	; 0x56c
 801cc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc78:	4606      	mov	r6, r0
 801cc7a:	460f      	mov	r7, r1
 801cc7c:	e9d5 01b6 	ldrd	r0, r1, [r5, #728]	; 0x2d8
 801cc80:	f7e3 fc8a 	bl	8000598 <__aeabi_dmul>
 801cc84:	4602      	mov	r2, r0
 801cc86:	460b      	mov	r3, r1
 801cc88:	4630      	mov	r0, r6
 801cc8a:	4639      	mov	r1, r7
 801cc8c:	f7e3 facc 	bl	8000228 <__aeabi_dsub>
 801cc90:	ed9d 9b02 	vldr	d9, [sp, #8]
 801cc94:	f20f 5330 	addw	r3, pc, #1328	; 0x530
 801cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc9c:	4606      	mov	r6, r0
 801cc9e:	460f      	mov	r7, r1
 801cca0:	ec51 0b19 	vmov	r0, r1, d9
 801cca4:	f7e3 fc78 	bl	8000598 <__aeabi_dmul>
 801cca8:	4602      	mov	r2, r0
 801ccaa:	460b      	mov	r3, r1
 801ccac:	4630      	mov	r0, r6
 801ccae:	4639      	mov	r1, r7
 801ccb0:	f7e3 fabc 	bl	800022c <__adddf3>
 801ccb4:	ed95 7ba8 	vldr	d7, [r5, #672]	; 0x2a0
 801ccb8:	4682      	mov	sl, r0
 801ccba:	468b      	mov	fp, r1
 801ccbc:	f20f 5308 	addw	r3, pc, #1288	; 0x508
 801ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccc4:	e9d5 01ac 	ldrd	r0, r1, [r5, #688]	; 0x2b0
 801ccc8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801cccc:	f7e3 fc64 	bl	8000598 <__aeabi_dmul>
 801ccd0:	f20f 43fc 	addw	r3, pc, #1276	; 0x4fc
 801ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccd8:	4606      	mov	r6, r0
 801ccda:	460f      	mov	r7, r1
 801ccdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cce0:	f7e3 fc5a 	bl	8000598 <__aeabi_dmul>
 801cce4:	ed95 7bb4 	vldr	d7, [r5, #720]	; 0x2d0
 801cce8:	4602      	mov	r2, r0
 801ccea:	460b      	mov	r3, r1
 801ccec:	4630      	mov	r0, r6
 801ccee:	4639      	mov	r1, r7
 801ccf0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801ccf4:	f7e3 fa9a 	bl	800022c <__adddf3>
 801ccf8:	f20f 43dc 	addw	r3, pc, #1244	; 0x4dc
 801ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd00:	4606      	mov	r6, r0
 801cd02:	460f      	mov	r7, r1
 801cd04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cd08:	f7e3 fc46 	bl	8000598 <__aeabi_dmul>
 801cd0c:	4602      	mov	r2, r0
 801cd0e:	460b      	mov	r3, r1
 801cd10:	4630      	mov	r0, r6
 801cd12:	4639      	mov	r1, r7
 801cd14:	f7e3 fa88 	bl	8000228 <__aeabi_dsub>
 801cd18:	f20f 43c4 	addw	r3, pc, #1220	; 0x4c4
 801cd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd20:	4606      	mov	r6, r0
 801cd22:	460f      	mov	r7, r1
 801cd24:	e9d5 01b8 	ldrd	r0, r1, [r5, #736]	; 0x2e0
 801cd28:	f7e3 fc36 	bl	8000598 <__aeabi_dmul>
 801cd2c:	4602      	mov	r2, r0
 801cd2e:	460b      	mov	r3, r1
 801cd30:	4630      	mov	r0, r6
 801cd32:	4639      	mov	r1, r7
 801cd34:	f7e3 fa78 	bl	8000228 <__aeabi_dsub>
 801cd38:	ed9d 8b08 	vldr	d8, [sp, #32]
 801cd3c:	f20f 4388 	addw	r3, pc, #1160	; 0x488
 801cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd44:	4606      	mov	r6, r0
 801cd46:	460f      	mov	r7, r1
 801cd48:	ec51 0b18 	vmov	r0, r1, d8
 801cd4c:	f7e3 fc24 	bl	8000598 <__aeabi_dmul>
 801cd50:	4602      	mov	r2, r0
 801cd52:	460b      	mov	r3, r1
 801cd54:	4630      	mov	r0, r6
 801cd56:	4639      	mov	r1, r7
 801cd58:	f7e3 fa68 	bl	800022c <__adddf3>
 801cd5c:	ed9d 7b00 	vldr	d7, [sp]
 801cd60:	ed85 7baa 	vstr	d7, [r5, #680]	; 0x2a8
 801cd64:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801cd68:	ed85 7bac 	vstr	d7, [r5, #688]	; 0x2b0
 801cd6c:	ed9d 7b06 	vldr	d7, [sp, #24]
 801cd70:	ed85 7bb6 	vstr	d7, [r5, #728]	; 0x2d8
 801cd74:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801cd78:	4606      	mov	r6, r0
 801cd7a:	460f      	mov	r7, r1
 801cd7c:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
 801cd80:	4602      	mov	r2, r0
 801cd82:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801cd86:	e9c5 abb2 	strd	sl, fp, [r5, #712]	; 0x2c8
 801cd8a:	ed85 9ba6 	vstr	d9, [r5, #664]	; 0x298
 801cd8e:	ed85 8ba8 	vstr	d8, [r5, #672]	; 0x2a0
 801cd92:	ed85 7bb8 	vstr	d7, [r5, #736]	; 0x2e0
 801cd96:	e9c5 67b4 	strd	r6, r7, [r5, #720]	; 0x2d0
 801cd9a:	4650      	mov	r0, sl
 801cd9c:	4649      	mov	r1, r9
 801cd9e:	f7e3 fe8b 	bl	8000ab8 <__aeabi_dcmpgt>
 801cda2:	b908      	cbnz	r0, 801cda8 <MotionGR_Update+0x2d0>
 801cda4:	46b2      	mov	sl, r6
 801cda6:	46bb      	mov	fp, r7
 801cda8:	4659      	mov	r1, fp
 801cdaa:	4650      	mov	r0, sl
 801cdac:	f7e3 feec 	bl	8000b88 <__aeabi_d2f>
 801cdb0:	ee07 0a90 	vmov	s15, r0
 801cdb4:	eef0 7ae7 	vabs.f32	s15, s15
 801cdb8:	ee17 0a90 	vmov	r0, s15
 801cdbc:	f7e3 fb94 	bl	80004e8 <__aeabi_f2d>
 801cdc0:	f20f 4324 	addw	r3, pc, #1060	; 0x424
 801cdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdc8:	4606      	mov	r6, r0
 801cdca:	460f      	mov	r7, r1
 801cdcc:	f7e3 fe6a 	bl	8000aa4 <__aeabi_dcmpge>
 801cdd0:	b110      	cbz	r0, 801cdd8 <MotionGR_Update+0x300>
 801cdd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cdd4:	f8c5 328c 	str.w	r3, [r5, #652]	; 0x28c
 801cdd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	f340 86c5 	ble.w	801db6a <MotionGR_Update+0x1092>
 801cde0:	3b01      	subs	r3, #1
 801cde2:	2c02      	cmp	r4, #2
 801cde4:	f8c5 3294 	str.w	r3, [r5, #660]	; 0x294
 801cde8:	f000 86eb 	beq.w	801dbc2 <MotionGR_Update+0x10ea>
 801cdec:	2c01      	cmp	r4, #1
 801cdee:	f041 87d9 	bne.w	801eda4 <MotionGR_Update+0x22cc>
 801cdf2:	e9d5 239c 	ldrd	r2, r3, [r5, #624]	; 0x270
 801cdf6:	4650      	mov	r0, sl
 801cdf8:	4659      	mov	r1, fp
 801cdfa:	f7e3 fbcd 	bl	8000598 <__aeabi_dmul>
 801cdfe:	2200      	movs	r2, #0
 801ce00:	2300      	movs	r3, #0
 801ce02:	f7e3 fe3b 	bl	8000a7c <__aeabi_dcmplt>
 801ce06:	2800      	cmp	r0, #0
 801ce08:	f041 868d 	bne.w	801eb26 <MotionGR_Update+0x204e>
 801ce0c:	e9d5 04a0 	ldrd	r0, r4, [r5, #640]	; 0x280
 801ce10:	4652      	mov	r2, sl
 801ce12:	f024 4100 	bic.w	r1, r4, #2147483648	; 0x80000000
 801ce16:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ce1a:	f7e3 fe2f 	bl	8000a7c <__aeabi_dcmplt>
 801ce1e:	2800      	cmp	r0, #0
 801ce20:	f001 85cd 	beq.w	801e9be <MotionGR_Update+0x1ee6>
 801ce24:	e9c5 aba0 	strd	sl, fp, [r5, #640]	; 0x280
 801ce28:	2300      	movs	r3, #0
 801ce2a:	9338      	str	r3, [sp, #224]	; 0xe0
 801ce2c:	2401      	movs	r4, #1
 801ce2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ce30:	616c      	str	r4, [r5, #20]
 801ce32:	2b01      	cmp	r3, #1
 801ce34:	e9c5 ab9c 	strd	sl, fp, [r5, #624]	; 0x270
 801ce38:	f000 8708 	beq.w	801dc4c <MotionGR_Update+0x1174>
 801ce3c:	ed95 7bc0 	vldr	d7, [r5, #768]	; 0x300
 801ce40:	eeb0 da47 	vmov.f32	s26, s14
 801ce44:	eef0 da67 	vmov.f32	s27, s15
 801ce48:	ed95 7bc2 	vldr	d7, [r5, #776]	; 0x308
 801ce4c:	eeb0 ea47 	vmov.f32	s28, s14
 801ce50:	eef0 ea67 	vmov.f32	s29, s15
 801ce54:	ed95 7bc4 	vldr	d7, [r5, #784]	; 0x310
 801ce58:	f8d5 22f8 	ldr.w	r2, [r5, #760]	; 0x2f8
 801ce5c:	9224      	str	r2, [sp, #144]	; 0x90
 801ce5e:	f8d5 2330 	ldr.w	r2, [r5, #816]	; 0x330
 801ce62:	921a      	str	r2, [sp, #104]	; 0x68
 801ce64:	eeb0 fa47 	vmov.f32	s30, s14
 801ce68:	eef0 fa67 	vmov.f32	s31, s15
 801ce6c:	e9d5 b2ce 	ldrd	fp, r2, [r5, #824]	; 0x338
 801ce70:	ed95 7bc6 	vldr	d7, [r5, #792]	; 0x318
 801ce74:	f8d5 0334 	ldr.w	r0, [r5, #820]	; 0x334
 801ce78:	4bcf      	ldr	r3, [pc, #828]	; (801d1b8 <MotionGR_Update+0x6e0>)
 801ce7a:	9206      	str	r2, [sp, #24]
 801ce7c:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 801ce80:	f8d5 2340 	ldr.w	r2, [r5, #832]	; 0x340
 801ce84:	921e      	str	r2, [sp, #120]	; 0x78
 801ce86:	ed95 7bc8 	vldr	d7, [r5, #800]	; 0x320
 801ce8a:	1c42      	adds	r2, r0, #1
 801ce8c:	fb83 1302 	smull	r1, r3, r3, r2
 801ce90:	17d1      	asrs	r1, r2, #31
 801ce92:	ebc1 03e3 	rsb	r3, r1, r3, asr #3
 801ce96:	ed8d 7b28 	vstr	d7, [sp, #160]	; 0xa0
 801ce9a:	ed95 7bca 	vldr	d7, [r5, #808]	; 0x328
 801ce9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cea2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cea6:	0041      	lsls	r1, r0, #1
 801cea8:	1ad3      	subs	r3, r2, r3
 801ceaa:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801ceae:	932a      	str	r3, [sp, #168]	; 0xa8
 801ceb0:	1c4b      	adds	r3, r1, #1
 801ceb2:	9000      	str	r0, [sp, #0]
 801ceb4:	910a      	str	r1, [sp, #40]	; 0x28
 801ceb6:	931c      	str	r3, [sp, #112]	; 0x70
 801ceb8:	ed9d bb02 	vldr	d11, [sp, #8]
 801cebc:	a3b4      	add	r3, pc, #720	; (adr r3, 801d190 <MotionGR_Update+0x6b8>)
 801cebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cec2:	ec51 0b1b 	vmov	r0, r1, d11
 801cec6:	f7e3 fb67 	bl	8000598 <__aeabi_dmul>
 801ceca:	4cbc      	ldr	r4, [pc, #752]	; (801d1bc <MotionGR_Update+0x6e4>)
 801cecc:	4606      	mov	r6, r0
 801cece:	ed94 7b00 	vldr	d7, [r4]
 801ced2:	460f      	mov	r7, r1
 801ced4:	ec47 6b18 	vmov	d8, r6, r7
 801ced8:	a3ad      	add	r3, pc, #692	; (adr r3, 801d190 <MotionGR_Update+0x6b8>)
 801ceda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cede:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 801cee2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801cee6:	ed8d 8b20 	vstr	d8, [sp, #128]	; 0x80
 801ceea:	f7e3 fb55 	bl	8000598 <__aeabi_dmul>
 801ceee:	a3aa      	add	r3, pc, #680	; (adr r3, 801d198 <MotionGR_Update+0x6c0>)
 801cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cef4:	4606      	mov	r6, r0
 801cef6:	460f      	mov	r7, r1
 801cef8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801cefc:	f7e3 fb4c 	bl	8000598 <__aeabi_dmul>
 801cf00:	46a0      	mov	r8, r4
 801cf02:	4602      	mov	r2, r0
 801cf04:	460b      	mov	r3, r1
 801cf06:	4630      	mov	r0, r6
 801cf08:	4639      	mov	r1, r7
 801cf0a:	e9f8 9a0c 	ldrd	r9, sl, [r8, #48]!	; 0x30
 801cf0e:	f7e3 f98d 	bl	800022c <__adddf3>
 801cf12:	a3a3      	add	r3, pc, #652	; (adr r3, 801d1a0 <MotionGR_Update+0x6c8>)
 801cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf18:	4606      	mov	r6, r0
 801cf1a:	460f      	mov	r7, r1
 801cf1c:	4648      	mov	r0, r9
 801cf1e:	4651      	mov	r1, sl
 801cf20:	e9cd 9a22 	strd	r9, sl, [sp, #136]	; 0x88
 801cf24:	f7e3 fb38 	bl	8000598 <__aeabi_dmul>
 801cf28:	4602      	mov	r2, r0
 801cf2a:	460b      	mov	r3, r1
 801cf2c:	4630      	mov	r0, r6
 801cf2e:	4639      	mov	r1, r7
 801cf30:	f7e3 f97a 	bl	8000228 <__aeabi_dsub>
 801cf34:	a39c      	add	r3, pc, #624	; (adr r3, 801d1a8 <MotionGR_Update+0x6d0>)
 801cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf3a:	4606      	mov	r6, r0
 801cf3c:	460f      	mov	r7, r1
 801cf3e:	e9d8 0106 	ldrd	r0, r1, [r8, #24]
 801cf42:	f7e3 fb29 	bl	8000598 <__aeabi_dmul>
 801cf46:	4602      	mov	r2, r0
 801cf48:	460b      	mov	r3, r1
 801cf4a:	4630      	mov	r0, r6
 801cf4c:	4639      	mov	r1, r7
 801cf4e:	f7e3 f96b 	bl	8000228 <__aeabi_dsub>
 801cf52:	ec53 2b18 	vmov	r2, r3, d8
 801cf56:	f7e3 f969 	bl	800022c <__adddf3>
 801cf5a:	ed9d ab04 	vldr	d10, [sp, #16]
 801cf5e:	4606      	mov	r6, r0
 801cf60:	460f      	mov	r7, r1
 801cf62:	a38b      	add	r3, pc, #556	; (adr r3, 801d190 <MotionGR_Update+0x6b8>)
 801cf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf68:	ec51 0b1a 	vmov	r0, r1, d10
 801cf6c:	f7e3 fb14 	bl	8000598 <__aeabi_dmul>
 801cf70:	ec47 6b1c 	vmov	d12, r6, r7
 801cf74:	ed94 6b02 	vldr	d6, [r4, #8]
 801cf78:	4606      	mov	r6, r0
 801cf7a:	460f      	mov	r7, r1
 801cf7c:	ec47 6b18 	vmov	d8, r6, r7
 801cf80:	a383      	add	r3, pc, #524	; (adr r3, 801d190 <MotionGR_Update+0x6b8>)
 801cf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf86:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 801cf8a:	ed8d 6b12 	vstr	d6, [sp, #72]	; 0x48
 801cf8e:	ed8d 8b34 	vstr	d8, [sp, #208]	; 0xd0
 801cf92:	f7e3 fb01 	bl	8000598 <__aeabi_dmul>
 801cf96:	a380      	add	r3, pc, #512	; (adr r3, 801d198 <MotionGR_Update+0x6c0>)
 801cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf9c:	4606      	mov	r6, r0
 801cf9e:	460f      	mov	r7, r1
 801cfa0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801cfa4:	f7e3 faf8 	bl	8000598 <__aeabi_dmul>
 801cfa8:	ed98 6b02 	vldr	d6, [r8, #8]
 801cfac:	4602      	mov	r2, r0
 801cfae:	460b      	mov	r3, r1
 801cfb0:	4630      	mov	r0, r6
 801cfb2:	4639      	mov	r1, r7
 801cfb4:	ed8d 6b14 	vstr	d6, [sp, #80]	; 0x50
 801cfb8:	f7e3 f938 	bl	800022c <__adddf3>
 801cfbc:	a378      	add	r3, pc, #480	; (adr r3, 801d1a0 <MotionGR_Update+0x6c8>)
 801cfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfc2:	4606      	mov	r6, r0
 801cfc4:	460f      	mov	r7, r1
 801cfc6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801cfca:	f7e3 fae5 	bl	8000598 <__aeabi_dmul>
 801cfce:	4602      	mov	r2, r0
 801cfd0:	460b      	mov	r3, r1
 801cfd2:	4630      	mov	r0, r6
 801cfd4:	4639      	mov	r1, r7
 801cfd6:	f7e3 f927 	bl	8000228 <__aeabi_dsub>
 801cfda:	a373      	add	r3, pc, #460	; (adr r3, 801d1a8 <MotionGR_Update+0x6d0>)
 801cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfe0:	4606      	mov	r6, r0
 801cfe2:	460f      	mov	r7, r1
 801cfe4:	e9d8 0108 	ldrd	r0, r1, [r8, #32]
 801cfe8:	f7e3 fad6 	bl	8000598 <__aeabi_dmul>
 801cfec:	4602      	mov	r2, r0
 801cfee:	460b      	mov	r3, r1
 801cff0:	4630      	mov	r0, r6
 801cff2:	4639      	mov	r1, r7
 801cff4:	f7e3 f918 	bl	8000228 <__aeabi_dsub>
 801cff8:	ec53 2b18 	vmov	r2, r3, d8
 801cffc:	f7e3 f916 	bl	800022c <__adddf3>
 801d000:	ed9d 9b08 	vldr	d9, [sp, #32]
 801d004:	4606      	mov	r6, r0
 801d006:	460f      	mov	r7, r1
 801d008:	a361      	add	r3, pc, #388	; (adr r3, 801d190 <MotionGR_Update+0x6b8>)
 801d00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d00e:	ec51 0b19 	vmov	r0, r1, d9
 801d012:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 801d016:	f7e3 fabf 	bl	8000598 <__aeabi_dmul>
 801d01a:	4606      	mov	r6, r0
 801d01c:	460f      	mov	r7, r1
 801d01e:	ec47 6b18 	vmov	d8, r6, r7
 801d022:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 801d026:	a35a      	add	r3, pc, #360	; (adr r3, 801d190 <MotionGR_Update+0x6b8>)
 801d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d02c:	e9d4 9a04 	ldrd	r9, sl, [r4, #16]
 801d030:	ed8d 8b36 	vstr	d8, [sp, #216]	; 0xd8
 801d034:	f7e3 fab0 	bl	8000598 <__aeabi_dmul>
 801d038:	a357      	add	r3, pc, #348	; (adr r3, 801d198 <MotionGR_Update+0x6c0>)
 801d03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d03e:	4606      	mov	r6, r0
 801d040:	460f      	mov	r7, r1
 801d042:	4648      	mov	r0, r9
 801d044:	4651      	mov	r1, sl
 801d046:	f7e3 faa7 	bl	8000598 <__aeabi_dmul>
 801d04a:	ed98 6b04 	vldr	d6, [r8, #16]
 801d04e:	4602      	mov	r2, r0
 801d050:	460b      	mov	r3, r1
 801d052:	4630      	mov	r0, r6
 801d054:	4639      	mov	r1, r7
 801d056:	ed8d 6b16 	vstr	d6, [sp, #88]	; 0x58
 801d05a:	f7e3 f8e7 	bl	800022c <__adddf3>
 801d05e:	a350      	add	r3, pc, #320	; (adr r3, 801d1a0 <MotionGR_Update+0x6c8>)
 801d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d064:	4606      	mov	r6, r0
 801d066:	460f      	mov	r7, r1
 801d068:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 801d06c:	f7e3 fa94 	bl	8000598 <__aeabi_dmul>
 801d070:	4602      	mov	r2, r0
 801d072:	460b      	mov	r3, r1
 801d074:	4630      	mov	r0, r6
 801d076:	4639      	mov	r1, r7
 801d078:	f7e3 f8d6 	bl	8000228 <__aeabi_dsub>
 801d07c:	a34a      	add	r3, pc, #296	; (adr r3, 801d1a8 <MotionGR_Update+0x6d0>)
 801d07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d082:	4606      	mov	r6, r0
 801d084:	460f      	mov	r7, r1
 801d086:	e9d8 010a 	ldrd	r0, r1, [r8, #40]	; 0x28
 801d08a:	f7e3 fa85 	bl	8000598 <__aeabi_dmul>
 801d08e:	4602      	mov	r2, r0
 801d090:	460b      	mov	r3, r1
 801d092:	4630      	mov	r0, r6
 801d094:	4639      	mov	r1, r7
 801d096:	f7e3 f8c7 	bl	8000228 <__aeabi_dsub>
 801d09a:	ec53 2b18 	vmov	r2, r3, d8
 801d09e:	f7e3 f8c5 	bl	800022c <__adddf3>
 801d0a2:	ed9d 6b22 	vldr	d6, [sp, #136]	; 0x88
 801d0a6:	ed88 6b06 	vstr	d6, [r8, #24]
 801d0aa:	ed9d 6b14 	vldr	d6, [sp, #80]	; 0x50
 801d0ae:	ed88 6b08 	vstr	d6, [r8, #32]
 801d0b2:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 801d0b6:	ed88 6b0a 	vstr	d6, [r8, #40]	; 0x28
 801d0ba:	ed9d 6b18 	vldr	d6, [sp, #96]	; 0x60
 801d0be:	ed88 6b02 	vstr	d6, [r8, #8]
 801d0c2:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801d0c6:	ed84 6b06 	vstr	d6, [r4, #24]
 801d0ca:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 801d0ce:	4606      	mov	r6, r0
 801d0d0:	460f      	mov	r7, r1
 801d0d2:	ed84 6b08 	vstr	d6, [r4, #32]
 801d0d6:	e9c8 6704 	strd	r6, r7, [r8, #16]
 801d0da:	ec53 2b1c 	vmov	r2, r3, d12
 801d0de:	ed88 cb00 	vstr	d12, [r8]
 801d0e2:	e9c4 9a0a 	strd	r9, sl, [r4, #40]	; 0x28
 801d0e6:	ed84 bb00 	vstr	d11, [r4]
 801d0ea:	ed84 ab02 	vstr	d10, [r4, #8]
 801d0ee:	ed84 9b04 	vstr	d9, [r4, #16]
 801d0f2:	ec51 0b1c 	vmov	r0, r1, d12
 801d0f6:	f7e3 fa4f 	bl	8000598 <__aeabi_dmul>
 801d0fa:	4632      	mov	r2, r6
 801d0fc:	463b      	mov	r3, r7
 801d0fe:	4680      	mov	r8, r0
 801d100:	4689      	mov	r9, r1
 801d102:	4630      	mov	r0, r6
 801d104:	4639      	mov	r1, r7
 801d106:	f7e3 fa47 	bl	8000598 <__aeabi_dmul>
 801d10a:	4602      	mov	r2, r0
 801d10c:	460b      	mov	r3, r1
 801d10e:	4640      	mov	r0, r8
 801d110:	4649      	mov	r1, r9
 801d112:	f7e3 f88b 	bl	800022c <__adddf3>
 801d116:	f004 fb57 	bl	80217c8 <sqrt>
 801d11a:	4602      	mov	r2, r0
 801d11c:	460b      	mov	r3, r1
 801d11e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 801d122:	f7e3 fb63 	bl	80007ec <__aeabi_ddiv>
 801d126:	f7e3 fd2f 	bl	8000b88 <__aeabi_d2f>
 801d12a:	f004 f99f 	bl	802146c <atanf>
 801d12e:	f7e3 f9db 	bl	80004e8 <__aeabi_f2d>
 801d132:	a31f      	add	r3, pc, #124	; (adr r3, 801d1b0 <MotionGR_Update+0x6d8>)
 801d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d138:	4680      	mov	r8, r0
 801d13a:	4689      	mov	r9, r1
 801d13c:	e9cd 892c 	strd	r8, r9, [sp, #176]	; 0xb0
 801d140:	f7e3 fa2a 	bl	8000598 <__aeabi_dmul>
 801d144:	4632      	mov	r2, r6
 801d146:	463b      	mov	r3, r7
 801d148:	4680      	mov	r8, r0
 801d14a:	4689      	mov	r9, r1
 801d14c:	ec51 0b1c 	vmov	r0, r1, d12
 801d150:	f7e3 fb4c 	bl	80007ec <__aeabi_ddiv>
 801d154:	f003 fec0 	bl	8020ed8 <atan>
 801d158:	f7e3 fd16 	bl	8000b88 <__aeabi_d2f>
 801d15c:	ee07 0a90 	vmov	s15, r0
 801d160:	eef0 7ae7 	vabs.f32	s15, s15
 801d164:	ee17 0a90 	vmov	r0, s15
 801d168:	f7e3 f9be 	bl	80004e8 <__aeabi_f2d>
 801d16c:	a310      	add	r3, pc, #64	; (adr r3, 801d1b0 <MotionGR_Update+0x6d8>)
 801d16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d172:	4606      	mov	r6, r0
 801d174:	460f      	mov	r7, r1
 801d176:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
 801d17a:	f7e3 fa0d 	bl	8000598 <__aeabi_dmul>
 801d17e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d180:	2b01      	cmp	r3, #1
 801d182:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d186:	ec49 8b1b 	vmov	d11, r8, r9
 801d18a:	f001 818d 	beq.w	801e4a8 <MotionGR_Update+0x19d0>
 801d18e:	e02f      	b.n	801d1f0 <MotionGR_Update+0x718>
 801d190:	b18a26fa 	.word	0xb18a26fa
 801d194:	3f57ed02 	.word	0x3f57ed02
 801d198:	b18a26fa 	.word	0xb18a26fa
 801d19c:	3f67ed02 	.word	0x3f67ed02
 801d1a0:	c010fc75 	.word	0xc010fc75
 801d1a4:	bffe397a 	.word	0xbffe397a
 801d1a8:	85850d65 	.word	0x85850d65
 801d1ac:	3feca2cf 	.word	0x3feca2cf
 801d1b0:	1a63c1f5 	.word	0x1a63c1f5
 801d1b4:	404ca5dc 	.word	0x404ca5dc
 801d1b8:	51eb851f 	.word	0x51eb851f
 801d1bc:	20004f68 	.word	0x20004f68
 801d1c0:	d0fac687 	.word	0xd0fac687
 801d1c4:	bfba1f58 	.word	0xbfba1f58
 801d1c8:	9355de47 	.word	0x9355de47
 801d1cc:	3fef4c06 	.word	0x3fef4c06
 801d1d0:	9355de47 	.word	0x9355de47
 801d1d4:	bfff4c06 	.word	0xbfff4c06
 801d1d8:	68aec1d8 	.word	0x68aec1d8
 801d1dc:	bfff4a0c 	.word	0xbfff4a0c
 801d1e0:	7bf9f584 	.word	0x7bf9f584
 801d1e4:	3fee9c01 	.word	0x3fee9c01
 801d1e8:	9999999a 	.word	0x9999999a
 801d1ec:	3fd99999 	.word	0x3fd99999
 801d1f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d1f4:	ec53 2b1d 	vmov	r2, r3, d13
 801d1f8:	4640      	mov	r0, r8
 801d1fa:	4649      	mov	r1, r9
 801d1fc:	f7e3 f816 	bl	800022c <__adddf3>
 801d200:	4606      	mov	r6, r0
 801d202:	460f      	mov	r7, r1
 801d204:	ec47 6b17 	vmov	d7, r6, r7
 801d208:	ec53 2b1e 	vmov	r2, r3, d14
 801d20c:	ed85 7bc0 	vstr	d7, [r5, #768]	; 0x300
 801d210:	ec51 0b1a 	vmov	r0, r1, d10
 801d214:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 801d218:	f7e3 f808 	bl	800022c <__adddf3>
 801d21c:	4606      	mov	r6, r0
 801d21e:	460f      	mov	r7, r1
 801d220:	ec47 6b17 	vmov	d7, r6, r7
 801d224:	4642      	mov	r2, r8
 801d226:	ed85 7bc2 	vstr	d7, [r5, #776]	; 0x308
 801d22a:	464b      	mov	r3, r9
 801d22c:	4640      	mov	r0, r8
 801d22e:	4649      	mov	r1, r9
 801d230:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 801d234:	f7e3 f9b0 	bl	8000598 <__aeabi_dmul>
 801d238:	ec53 2b1f 	vmov	r2, r3, d15
 801d23c:	f7e2 fff6 	bl	800022c <__adddf3>
 801d240:	4606      	mov	r6, r0
 801d242:	460f      	mov	r7, r1
 801d244:	ec47 6b17 	vmov	d7, r6, r7
 801d248:	ec53 2b1a 	vmov	r2, r3, d10
 801d24c:	ed85 7bc4 	vstr	d7, [r5, #784]	; 0x310
 801d250:	ec51 0b1a 	vmov	r0, r1, d10
 801d254:	e9cd 6724 	strd	r6, r7, [sp, #144]	; 0x90
 801d258:	f7e3 f99e 	bl	8000598 <__aeabi_dmul>
 801d25c:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 801d260:	f7e2 ffe4 	bl	800022c <__adddf3>
 801d264:	4606      	mov	r6, r0
 801d266:	460f      	mov	r7, r1
 801d268:	ec47 6b17 	vmov	d7, r6, r7
 801d26c:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 801d270:	ed85 7bc6 	vstr	d7, [r5, #792]	; 0x318
 801d274:	ec51 0b1b 	vmov	r0, r1, d11
 801d278:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
 801d27c:	f7e2 ffd6 	bl	800022c <__adddf3>
 801d280:	4606      	mov	r6, r0
 801d282:	460f      	mov	r7, r1
 801d284:	ec47 6b17 	vmov	d7, r6, r7
 801d288:	ec53 2b1b 	vmov	r2, r3, d11
 801d28c:	ed85 7bc8 	vstr	d7, [r5, #800]	; 0x320
 801d290:	ec51 0b1b 	vmov	r0, r1, d11
 801d294:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 801d298:	f7e3 f97e 	bl	8000598 <__aeabi_dmul>
 801d29c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d2a0:	f7e2 ffc4 	bl	800022c <__adddf3>
 801d2a4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801d2a6:	4606      	mov	r6, r0
 801d2a8:	460f      	mov	r7, r1
 801d2aa:	ec47 6b17 	vmov	d7, r6, r7
 801d2ae:	eb05 1304 	add.w	r3, r5, r4, lsl #4
 801d2b2:	e9d3 23d2 	ldrd	r2, r3, [r3, #840]	; 0x348
 801d2b6:	ed85 7bca 	vstr	d7, [r5, #808]	; 0x328
 801d2ba:	4640      	mov	r0, r8
 801d2bc:	4649      	mov	r1, r9
 801d2be:	e9cd 6726 	strd	r6, r7, [sp, #152]	; 0x98
 801d2c2:	f7e3 fbf9 	bl	8000ab8 <__aeabi_dcmpgt>
 801d2c6:	0063      	lsls	r3, r4, #1
 801d2c8:	930c      	str	r3, [sp, #48]	; 0x30
 801d2ca:	b120      	cbz	r0, 801d2d6 <MotionGR_Update+0x7fe>
 801d2cc:	9b00      	ldr	r3, [sp, #0]
 801d2ce:	f8c5 3330 	str.w	r3, [r5, #816]	; 0x330
 801d2d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2d4:	930c      	str	r3, [sp, #48]	; 0x30
 801d2d6:	eb05 130b 	add.w	r3, r5, fp, lsl #4
 801d2da:	e9d3 23d2 	ldrd	r2, r3, [r3, #840]	; 0x348
 801d2de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d2e2:	f7e3 fbcb 	bl	8000a7c <__aeabi_dcmplt>
 801d2e6:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801d2ea:	9316      	str	r3, [sp, #88]	; 0x58
 801d2ec:	b120      	cbz	r0, 801d2f8 <MotionGR_Update+0x820>
 801d2ee:	9b00      	ldr	r3, [sp, #0]
 801d2f0:	f8c5 3338 	str.w	r3, [r5, #824]	; 0x338
 801d2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2f6:	9316      	str	r3, [sp, #88]	; 0x58
 801d2f8:	9b06      	ldr	r3, [sp, #24]
 801d2fa:	005c      	lsls	r4, r3, #1
 801d2fc:	3401      	adds	r4, #1
 801d2fe:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801d302:	e9d3 23d2 	ldrd	r2, r3, [r3, #840]	; 0x348
 801d306:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d30a:	f7e3 fbd5 	bl	8000ab8 <__aeabi_dcmpgt>
 801d30e:	b118      	cbz	r0, 801d318 <MotionGR_Update+0x840>
 801d310:	9b00      	ldr	r3, [sp, #0]
 801d312:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801d314:	f8c5 333c 	str.w	r3, [r5, #828]	; 0x33c
 801d318:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d31a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801d31e:	e9d3 23d4 	ldrd	r2, r3, [r3, #848]	; 0x350
 801d322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d326:	f7e3 fba9 	bl	8000a7c <__aeabi_dcmplt>
 801d32a:	b110      	cbz	r0, 801d332 <MotionGR_Update+0x85a>
 801d32c:	9b00      	ldr	r3, [sp, #0]
 801d32e:	f8c5 3340 	str.w	r3, [r5, #832]	; 0x340
 801d332:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d334:	4ac8      	ldr	r2, [pc, #800]	; (801d658 <MotionGR_Update+0xb80>)
 801d336:	f8c5 3334 	str.w	r3, [r5, #820]	; 0x334
 801d33a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d340:	981c      	ldr	r0, [sp, #112]	; 0x70
 801d342:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801d346:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801d34a:	ed83 7bd2 	vstr	d7, [r3, #840]	; 0x348
 801d34e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 801d352:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801d356:	ed81 bb00 	vstr	d11, [r1]
 801d35a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d35c:	ed82 7b00 	vstr	d7, [r2]
 801d360:	ed9d 7b04 	vldr	d7, [sp, #16]
 801d364:	eb05 07c0 	add.w	r7, r5, r0, lsl #3
 801d368:	2b19      	cmp	r3, #25
 801d36a:	ed87 7bd2 	vstr	d7, [r7, #840]	; 0x348
 801d36e:	f001 8695 	beq.w	801f09c <MotionGR_Update+0x25c4>
 801d372:	2300      	movs	r3, #0
 801d374:	9355      	str	r3, [sp, #340]	; 0x154
 801d376:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d378:	2b01      	cmp	r3, #1
 801d37a:	f000 87f2 	beq.w	801e362 <MotionGR_Update+0x188a>
 801d37e:	f8d5 16ec 	ldr.w	r1, [r5, #1772]	; 0x6ec
 801d382:	f8d5 26e8 	ldr.w	r2, [r5, #1768]	; 0x6e8
 801d386:	920c      	str	r2, [sp, #48]	; 0x30
 801d388:	4bb4      	ldr	r3, [pc, #720]	; (801d65c <MotionGR_Update+0xb84>)
 801d38a:	f8d5 2750 	ldr.w	r2, [r5, #1872]	; 0x750
 801d38e:	9233      	str	r2, [sp, #204]	; 0xcc
 801d390:	1c4a      	adds	r2, r1, #1
 801d392:	fb83 0302 	smull	r0, r3, r3, r2
 801d396:	17d0      	asrs	r0, r2, #31
 801d398:	ebc0 03e3 	rsb	r3, r0, r3, asr #3
 801d39c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d3a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d3a4:	4fae      	ldr	r7, [pc, #696]	; (801d660 <MotionGR_Update+0xb88>)
 801d3a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d3aa:	1ad3      	subs	r3, r2, r3
 801d3ac:	9350      	str	r3, [sp, #320]	; 0x140
 801d3ae:	1c4b      	adds	r3, r1, #1
 801d3b0:	9131      	str	r1, [sp, #196]	; 0xc4
 801d3b2:	9332      	str	r3, [sp, #200]	; 0xc8
 801d3b4:	1c8b      	adds	r3, r1, #2
 801d3b6:	4639      	mov	r1, r7
 801d3b8:	9339      	str	r3, [sp, #228]	; 0xe4
 801d3ba:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 801d3be:	9124      	str	r1, [sp, #144]	; 0x90
 801d3c0:	4639      	mov	r1, r7
 801d3c2:	e9cd 233c 	strd	r2, r3, [sp, #240]	; 0xf0
 801d3c6:	e9f1 2304 	ldrd	r2, r3, [r1, #16]!
 801d3ca:	9126      	str	r1, [sp, #152]	; 0x98
 801d3cc:	4639      	mov	r1, r7
 801d3ce:	e9cd 233e 	strd	r2, r3, [sp, #248]	; 0xf8
 801d3d2:	e9f1 2306 	ldrd	r2, r3, [r1, #24]!
 801d3d6:	9128      	str	r1, [sp, #160]	; 0xa0
 801d3d8:	4639      	mov	r1, r7
 801d3da:	e9cd 2340 	strd	r2, r3, [sp, #256]	; 0x100
 801d3de:	e9f1 2308 	ldrd	r2, r3, [r1, #32]!
 801d3e2:	912a      	str	r1, [sp, #168]	; 0xa8
 801d3e4:	4639      	mov	r1, r7
 801d3e6:	e9cd 2342 	strd	r2, r3, [sp, #264]	; 0x108
 801d3ea:	e9f1 230a 	ldrd	r2, r3, [r1, #40]!	; 0x28
 801d3ee:	9151      	str	r1, [sp, #324]	; 0x144
 801d3f0:	4639      	mov	r1, r7
 801d3f2:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
 801d3f6:	e9f1 230c 	ldrd	r2, r3, [r1, #48]!	; 0x30
 801d3fa:	9152      	str	r1, [sp, #328]	; 0x148
 801d3fc:	4639      	mov	r1, r7
 801d3fe:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
 801d402:	e9f1 230e 	ldrd	r2, r3, [r1, #56]!	; 0x38
 801d406:	912c      	str	r1, [sp, #176]	; 0xb0
 801d408:	4639      	mov	r1, r7
 801d40a:	e9cd 2348 	strd	r2, r3, [sp, #288]	; 0x120
 801d40e:	e9f1 2310 	ldrd	r2, r3, [r1, #64]!	; 0x40
 801d412:	e9cd 234a 	strd	r2, r3, [sp, #296]	; 0x128
 801d416:	912e      	str	r1, [sp, #184]	; 0xb8
 801d418:	4639      	mov	r1, r7
 801d41a:	e9f1 2312 	ldrd	r2, r3, [r1, #72]!	; 0x48
 801d41e:	9130      	str	r1, [sp, #192]	; 0xc0
 801d420:	4639      	mov	r1, r7
 801d422:	e9cd 234c 	strd	r2, r3, [sp, #304]	; 0x130
 801d426:	e9f1 2314 	ldrd	r2, r3, [r1, #80]!	; 0x50
 801d42a:	9153      	str	r1, [sp, #332]	; 0x14c
 801d42c:	4639      	mov	r1, r7
 801d42e:	e9cd 234e 	strd	r2, r3, [sp, #312]	; 0x138
 801d432:	ed97 7b00 	vldr	d7, [r7]
 801d436:	e9f1 2316 	ldrd	r2, r3, [r1, #88]!	; 0x58
 801d43a:	ed8d 7b3a 	vstr	d7, [sp, #232]	; 0xe8
 801d43e:	e9cd 2300 	strd	r2, r3, [sp]
 801d442:	9154      	str	r1, [sp, #336]	; 0x150
 801d444:	4c87      	ldr	r4, [pc, #540]	; (801d664 <MotionGR_Update+0xb8c>)
 801d446:	ed94 7b00 	vldr	d7, [r4]
 801d44a:	a37b      	add	r3, pc, #492	; (adr r3, 801d638 <MotionGR_Update+0xb60>)
 801d44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d450:	eeb0 ba47 	vmov.f32	s22, s14
 801d454:	eef0 ba67 	vmov.f32	s23, s15
 801d458:	ec51 0b17 	vmov	r0, r1, d7
 801d45c:	f7e3 f89c 	bl	8000598 <__aeabi_dmul>
 801d460:	ed94 8b06 	vldr	d8, [r4, #24]
 801d464:	a376      	add	r3, pc, #472	; (adr r3, 801d640 <MotionGR_Update+0xb68>)
 801d466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d46a:	eeb0 ca48 	vmov.f32	s24, s16
 801d46e:	eef0 ca68 	vmov.f32	s25, s17
 801d472:	4680      	mov	r8, r0
 801d474:	4689      	mov	r9, r1
 801d476:	ec51 0b18 	vmov	r0, r1, d8
 801d47a:	f7e3 f88d 	bl	8000598 <__aeabi_dmul>
 801d47e:	46a2      	mov	sl, r4
 801d480:	4602      	mov	r2, r0
 801d482:	460b      	mov	r3, r1
 801d484:	4640      	mov	r0, r8
 801d486:	4649      	mov	r1, r9
 801d488:	e9fa 890c 	ldrd	r8, r9, [sl, #48]!	; 0x30
 801d48c:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801d490:	f7e2 fecc 	bl	800022c <__adddf3>
 801d494:	a36c      	add	r3, pc, #432	; (adr r3, 801d648 <MotionGR_Update+0xb70>)
 801d496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d49a:	4680      	mov	r8, r0
 801d49c:	4689      	mov	r9, r1
 801d49e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801d4a2:	f7e3 f879 	bl	8000598 <__aeabi_dmul>
 801d4a6:	4602      	mov	r2, r0
 801d4a8:	460b      	mov	r3, r1
 801d4aa:	4640      	mov	r0, r8
 801d4ac:	4649      	mov	r1, r9
 801d4ae:	f7e2 febb 	bl	8000228 <__aeabi_dsub>
 801d4b2:	a367      	add	r3, pc, #412	; (adr r3, 801d650 <MotionGR_Update+0xb78>)
 801d4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4b8:	4680      	mov	r8, r0
 801d4ba:	4689      	mov	r9, r1
 801d4bc:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 801d4c0:	f7e3 f86a 	bl	8000598 <__aeabi_dmul>
 801d4c4:	4602      	mov	r2, r0
 801d4c6:	460b      	mov	r3, r1
 801d4c8:	4640      	mov	r0, r8
 801d4ca:	4649      	mov	r1, r9
 801d4cc:	f7e2 feac 	bl	8000228 <__aeabi_dsub>
 801d4d0:	a35b      	add	r3, pc, #364	; (adr r3, 801d640 <MotionGR_Update+0xb68>)
 801d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4d6:	4680      	mov	r8, r0
 801d4d8:	4689      	mov	r9, r1
 801d4da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d4de:	f7e3 f85b 	bl	8000598 <__aeabi_dmul>
 801d4e2:	4602      	mov	r2, r0
 801d4e4:	460b      	mov	r3, r1
 801d4e6:	4640      	mov	r0, r8
 801d4e8:	4649      	mov	r1, r9
 801d4ea:	f7e2 fe9f 	bl	800022c <__adddf3>
 801d4ee:	ed94 6b02 	vldr	d6, [r4, #8]
 801d4f2:	ed94 5b08 	vldr	d5, [r4, #32]
 801d4f6:	eeb0 aa46 	vmov.f32	s20, s12
 801d4fa:	eef0 aa66 	vmov.f32	s21, s13
 801d4fe:	4680      	mov	r8, r0
 801d500:	4689      	mov	r9, r1
 801d502:	a34d      	add	r3, pc, #308	; (adr r3, 801d638 <MotionGR_Update+0xb60>)
 801d504:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d508:	eeb0 8a45 	vmov.f32	s16, s10
 801d50c:	eef0 8a65 	vmov.f32	s17, s11
 801d510:	ec51 0b16 	vmov	r0, r1, d6
 801d514:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801d518:	f7e3 f83e 	bl	8000598 <__aeabi_dmul>
 801d51c:	a348      	add	r3, pc, #288	; (adr r3, 801d640 <MotionGR_Update+0xb68>)
 801d51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d522:	4680      	mov	r8, r0
 801d524:	4689      	mov	r9, r1
 801d526:	ec51 0b18 	vmov	r0, r1, d8
 801d52a:	f7e3 f835 	bl	8000598 <__aeabi_dmul>
 801d52e:	ed9a 5b02 	vldr	d5, [sl, #8]
 801d532:	4602      	mov	r2, r0
 801d534:	460b      	mov	r3, r1
 801d536:	4640      	mov	r0, r8
 801d538:	4649      	mov	r1, r9
 801d53a:	ed8d 5b14 	vstr	d5, [sp, #80]	; 0x50
 801d53e:	f7e2 fe75 	bl	800022c <__adddf3>
 801d542:	a341      	add	r3, pc, #260	; (adr r3, 801d648 <MotionGR_Update+0xb70>)
 801d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d548:	4680      	mov	r8, r0
 801d54a:	4689      	mov	r9, r1
 801d54c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801d550:	f7e3 f822 	bl	8000598 <__aeabi_dmul>
 801d554:	4602      	mov	r2, r0
 801d556:	460b      	mov	r3, r1
 801d558:	4640      	mov	r0, r8
 801d55a:	4649      	mov	r1, r9
 801d55c:	f7e2 fe64 	bl	8000228 <__aeabi_dsub>
 801d560:	a33b      	add	r3, pc, #236	; (adr r3, 801d650 <MotionGR_Update+0xb78>)
 801d562:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d566:	4680      	mov	r8, r0
 801d568:	4689      	mov	r9, r1
 801d56a:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 801d56e:	f7e3 f813 	bl	8000598 <__aeabi_dmul>
 801d572:	4602      	mov	r2, r0
 801d574:	460b      	mov	r3, r1
 801d576:	4640      	mov	r0, r8
 801d578:	4649      	mov	r1, r9
 801d57a:	f7e2 fe55 	bl	8000228 <__aeabi_dsub>
 801d57e:	a330      	add	r3, pc, #192	; (adr r3, 801d640 <MotionGR_Update+0xb68>)
 801d580:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d584:	4680      	mov	r8, r0
 801d586:	4689      	mov	r9, r1
 801d588:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d58c:	f7e3 f804 	bl	8000598 <__aeabi_dmul>
 801d590:	4602      	mov	r2, r0
 801d592:	460b      	mov	r3, r1
 801d594:	4640      	mov	r0, r8
 801d596:	4649      	mov	r1, r9
 801d598:	f7e2 fe48 	bl	800022c <__adddf3>
 801d59c:	ed94 5b04 	vldr	d5, [r4, #16]
 801d5a0:	ed94 4b0a 	vldr	d4, [r4, #40]	; 0x28
 801d5a4:	eeb0 9a45 	vmov.f32	s18, s10
 801d5a8:	eef0 9a65 	vmov.f32	s19, s11
 801d5ac:	4680      	mov	r8, r0
 801d5ae:	4689      	mov	r9, r1
 801d5b0:	a321      	add	r3, pc, #132	; (adr r3, 801d638 <MotionGR_Update+0xb60>)
 801d5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5b6:	eeb0 fa44 	vmov.f32	s30, s8
 801d5ba:	eef0 fa64 	vmov.f32	s31, s9
 801d5be:	ec51 0b15 	vmov	r0, r1, d5
 801d5c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801d5c6:	f7e2 ffe7 	bl	8000598 <__aeabi_dmul>
 801d5ca:	a31d      	add	r3, pc, #116	; (adr r3, 801d640 <MotionGR_Update+0xb68>)
 801d5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5d0:	4680      	mov	r8, r0
 801d5d2:	4689      	mov	r9, r1
 801d5d4:	ec51 0b1f 	vmov	r0, r1, d15
 801d5d8:	f7e2 ffde 	bl	8000598 <__aeabi_dmul>
 801d5dc:	ed9a 4b04 	vldr	d4, [sl, #16]
 801d5e0:	4602      	mov	r2, r0
 801d5e2:	460b      	mov	r3, r1
 801d5e4:	4640      	mov	r0, r8
 801d5e6:	4649      	mov	r1, r9
 801d5e8:	ed8d 4b16 	vstr	d4, [sp, #88]	; 0x58
 801d5ec:	f7e2 fe1e 	bl	800022c <__adddf3>
 801d5f0:	a315      	add	r3, pc, #84	; (adr r3, 801d648 <MotionGR_Update+0xb70>)
 801d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5f6:	4680      	mov	r8, r0
 801d5f8:	4689      	mov	r9, r1
 801d5fa:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 801d5fe:	f7e2 ffcb 	bl	8000598 <__aeabi_dmul>
 801d602:	4602      	mov	r2, r0
 801d604:	460b      	mov	r3, r1
 801d606:	4640      	mov	r0, r8
 801d608:	4649      	mov	r1, r9
 801d60a:	f7e2 fe0d 	bl	8000228 <__aeabi_dsub>
 801d60e:	a310      	add	r3, pc, #64	; (adr r3, 801d650 <MotionGR_Update+0xb78>)
 801d610:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d614:	4680      	mov	r8, r0
 801d616:	4689      	mov	r9, r1
 801d618:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 801d61c:	f7e2 ffbc 	bl	8000598 <__aeabi_dmul>
 801d620:	4602      	mov	r2, r0
 801d622:	460b      	mov	r3, r1
 801d624:	4640      	mov	r0, r8
 801d626:	4649      	mov	r1, r9
 801d628:	f7e2 fdfe 	bl	8000228 <__aeabi_dsub>
 801d62c:	ed9d eb08 	vldr	d14, [sp, #32]
 801d630:	e01a      	b.n	801d668 <MotionGR_Update+0xb90>
 801d632:	bf00      	nop
 801d634:	f3af 8000 	nop.w
 801d638:	2c844008 	.word	0x2c844008
 801d63c:	3f31e48a 	.word	0x3f31e48a
 801d640:	2c843ff6 	.word	0x2c843ff6
 801d644:	3f21e48a 	.word	0x3f21e48a
 801d648:	e675bd18 	.word	0xe675bd18
 801d64c:	bfff7786 	.word	0xbfff7786
 801d650:	ef769b19 	.word	0xef769b19
 801d654:	3feef386 	.word	0x3feef386
 801d658:	20004fc8 	.word	0x20004fc8
 801d65c:	51eb851f 	.word	0x51eb851f
 801d660:	20005160 	.word	0x20005160
 801d664:	200051f8 	.word	0x200051f8
 801d668:	f20f 6398 	addw	r3, pc, #1688	; 0x698
 801d66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d670:	4680      	mov	r8, r0
 801d672:	4689      	mov	r9, r1
 801d674:	ec51 0b1e 	vmov	r0, r1, d14
 801d678:	f7e2 ff8e 	bl	8000598 <__aeabi_dmul>
 801d67c:	4602      	mov	r2, r0
 801d67e:	460b      	mov	r3, r1
 801d680:	4640      	mov	r0, r8
 801d682:	4649      	mov	r1, r9
 801d684:	f7e2 fdd2 	bl	800022c <__adddf3>
 801d688:	4680      	mov	r8, r0
 801d68a:	4689      	mov	r9, r1
 801d68c:	ec49 8b1d 	vmov	d13, r8, r9
 801d690:	f20f 6378 	addw	r3, pc, #1656	; 0x678
 801d694:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d698:	ec51 0b1b 	vmov	r0, r1, d11
 801d69c:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 801d6a0:	f7e2 ff7a 	bl	8000598 <__aeabi_dmul>
 801d6a4:	f20f 636c 	addw	r3, pc, #1644	; 0x66c
 801d6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6ac:	4680      	mov	r8, r0
 801d6ae:	4689      	mov	r9, r1
 801d6b0:	ec51 0b1c 	vmov	r0, r1, d12
 801d6b4:	f7e2 ff70 	bl	8000598 <__aeabi_dmul>
 801d6b8:	4626      	mov	r6, r4
 801d6ba:	e9f6 bc18 	ldrd	fp, ip, [r6, #96]!	; 0x60
 801d6be:	4602      	mov	r2, r0
 801d6c0:	460b      	mov	r3, r1
 801d6c2:	4640      	mov	r0, r8
 801d6c4:	4649      	mov	r1, r9
 801d6c6:	e9cd bc18 	strd	fp, ip, [sp, #96]	; 0x60
 801d6ca:	f7e2 fdaf 	bl	800022c <__adddf3>
 801d6ce:	f20f 634c 	addw	r3, pc, #1612	; 0x64c
 801d6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6d6:	4680      	mov	r8, r0
 801d6d8:	4689      	mov	r9, r1
 801d6da:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 801d6de:	f7e2 ff5b 	bl	8000598 <__aeabi_dmul>
 801d6e2:	4602      	mov	r2, r0
 801d6e4:	460b      	mov	r3, r1
 801d6e6:	4640      	mov	r0, r8
 801d6e8:	4649      	mov	r1, r9
 801d6ea:	f7e2 fd9d 	bl	8000228 <__aeabi_dsub>
 801d6ee:	f20f 6334 	addw	r3, pc, #1588	; 0x634
 801d6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6f6:	4680      	mov	r8, r0
 801d6f8:	4689      	mov	r9, r1
 801d6fa:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 801d6fe:	f7e2 ff4b 	bl	8000598 <__aeabi_dmul>
 801d702:	4602      	mov	r2, r0
 801d704:	460b      	mov	r3, r1
 801d706:	4640      	mov	r0, r8
 801d708:	4649      	mov	r1, r9
 801d70a:	f7e2 fd8d 	bl	8000228 <__aeabi_dsub>
 801d70e:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 801d712:	f7e2 fd8b 	bl	800022c <__adddf3>
 801d716:	4680      	mov	r8, r0
 801d718:	4689      	mov	r9, r1
 801d71a:	ec49 8b1c 	vmov	d12, r8, r9
 801d71e:	f20f 53ec 	addw	r3, pc, #1516	; 0x5ec
 801d722:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d726:	ec51 0b1a 	vmov	r0, r1, d10
 801d72a:	ed8d cb1a 	vstr	d12, [sp, #104]	; 0x68
 801d72e:	f7e2 ff33 	bl	8000598 <__aeabi_dmul>
 801d732:	f20f 53e0 	addw	r3, pc, #1504	; 0x5e0
 801d736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d73a:	4680      	mov	r8, r0
 801d73c:	4689      	mov	r9, r1
 801d73e:	ec51 0b18 	vmov	r0, r1, d8
 801d742:	f7e2 ff29 	bl	8000598 <__aeabi_dmul>
 801d746:	ed96 4b02 	vldr	d4, [r6, #8]
 801d74a:	4602      	mov	r2, r0
 801d74c:	460b      	mov	r3, r1
 801d74e:	4640      	mov	r0, r8
 801d750:	4649      	mov	r1, r9
 801d752:	ed8d 4b1c 	vstr	d4, [sp, #112]	; 0x70
 801d756:	f7e2 fd69 	bl	800022c <__adddf3>
 801d75a:	f20f 53c0 	addw	r3, pc, #1472	; 0x5c0
 801d75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d762:	4680      	mov	r8, r0
 801d764:	4689      	mov	r9, r1
 801d766:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 801d76a:	f7e2 ff15 	bl	8000598 <__aeabi_dmul>
 801d76e:	4602      	mov	r2, r0
 801d770:	460b      	mov	r3, r1
 801d772:	4640      	mov	r0, r8
 801d774:	4649      	mov	r1, r9
 801d776:	f7e2 fd57 	bl	8000228 <__aeabi_dsub>
 801d77a:	f20f 53a8 	addw	r3, pc, #1448	; 0x5a8
 801d77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d782:	4680      	mov	r8, r0
 801d784:	4689      	mov	r9, r1
 801d786:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 801d78a:	f7e2 ff05 	bl	8000598 <__aeabi_dmul>
 801d78e:	4602      	mov	r2, r0
 801d790:	460b      	mov	r3, r1
 801d792:	4640      	mov	r0, r8
 801d794:	4649      	mov	r1, r9
 801d796:	f7e2 fd47 	bl	8000228 <__aeabi_dsub>
 801d79a:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 801d79e:	f7e2 fd45 	bl	800022c <__adddf3>
 801d7a2:	4680      	mov	r8, r0
 801d7a4:	4689      	mov	r9, r1
 801d7a6:	ec49 8b18 	vmov	d8, r8, r9
 801d7aa:	f20f 5360 	addw	r3, pc, #1376	; 0x560
 801d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7b2:	ec51 0b19 	vmov	r0, r1, d9
 801d7b6:	ed8d 8b1e 	vstr	d8, [sp, #120]	; 0x78
 801d7ba:	f7e2 feed 	bl	8000598 <__aeabi_dmul>
 801d7be:	f20f 5354 	addw	r3, pc, #1364	; 0x554
 801d7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7c6:	4680      	mov	r8, r0
 801d7c8:	4689      	mov	r9, r1
 801d7ca:	ec51 0b1f 	vmov	r0, r1, d15
 801d7ce:	f7e2 fee3 	bl	8000598 <__aeabi_dmul>
 801d7d2:	ed96 4b04 	vldr	d4, [r6, #16]
 801d7d6:	4602      	mov	r2, r0
 801d7d8:	460b      	mov	r3, r1
 801d7da:	4640      	mov	r0, r8
 801d7dc:	4649      	mov	r1, r9
 801d7de:	ed8d 4b20 	vstr	d4, [sp, #128]	; 0x80
 801d7e2:	f7e2 fd23 	bl	800022c <__adddf3>
 801d7e6:	f20f 5334 	addw	r3, pc, #1332	; 0x534
 801d7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7ee:	4680      	mov	r8, r0
 801d7f0:	4689      	mov	r9, r1
 801d7f2:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 801d7f6:	f7e2 fecf 	bl	8000598 <__aeabi_dmul>
 801d7fa:	4602      	mov	r2, r0
 801d7fc:	460b      	mov	r3, r1
 801d7fe:	4640      	mov	r0, r8
 801d800:	4649      	mov	r1, r9
 801d802:	f7e2 fd11 	bl	8000228 <__aeabi_dsub>
 801d806:	f20f 531c 	addw	r3, pc, #1308	; 0x51c
 801d80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d80e:	4680      	mov	r8, r0
 801d810:	4689      	mov	r9, r1
 801d812:	e9d6 010a 	ldrd	r0, r1, [r6, #40]	; 0x28
 801d816:	f7e2 febf 	bl	8000598 <__aeabi_dmul>
 801d81a:	4602      	mov	r2, r0
 801d81c:	460b      	mov	r3, r1
 801d81e:	4640      	mov	r0, r8
 801d820:	4649      	mov	r1, r9
 801d822:	f7e2 fd01 	bl	8000228 <__aeabi_dsub>
 801d826:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 801d82a:	f7e2 fcff 	bl	800022c <__adddf3>
 801d82e:	ed9d 4b12 	vldr	d4, [sp, #72]	; 0x48
 801d832:	ed8a 4b06 	vstr	d4, [sl, #24]
 801d836:	ed9d 4b14 	vldr	d4, [sp, #80]	; 0x50
 801d83a:	ed8a 4b08 	vstr	d4, [sl, #32]
 801d83e:	ed9d 4b1c 	vldr	d4, [sp, #112]	; 0x70
 801d842:	ed86 4b08 	vstr	d4, [r6, #32]
 801d846:	ed9d 4b16 	vldr	d4, [sp, #88]	; 0x58
 801d84a:	ed8a 4b0a 	vstr	d4, [sl, #40]	; 0x28
 801d84e:	ed9d 4b20 	vldr	d4, [sp, #128]	; 0x80
 801d852:	ed86 4b0a 	vstr	d4, [r6, #40]	; 0x28
 801d856:	ed9d 4b0a 	vldr	d4, [sp, #40]	; 0x28
 801d85a:	ed8a 4b00 	vstr	d4, [sl]
 801d85e:	ed9d 4b18 	vldr	d4, [sp, #96]	; 0x60
 801d862:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
 801d866:	ed86 4b06 	vstr	d4, [r6, #24]
 801d86a:	ed86 cb00 	vstr	d12, [r6]
 801d86e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d872:	ed9d 4b06 	vldr	d4, [sp, #24]
 801d876:	ed84 7b00 	vstr	d7, [r4]
 801d87a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d87c:	ed9d 7b04 	vldr	d7, [sp, #16]
 801d880:	2b01      	cmp	r3, #1
 801d882:	ed8a 4b02 	vstr	d4, [sl, #8]
 801d886:	ed86 8b02 	vstr	d8, [r6, #8]
 801d88a:	ed8a db04 	vstr	d13, [sl, #16]
 801d88e:	ed84 bb06 	vstr	d11, [r4, #24]
 801d892:	ed84 ab08 	vstr	d10, [r4, #32]
 801d896:	ed84 9b0a 	vstr	d9, [r4, #40]	; 0x28
 801d89a:	e9c6 0104 	strd	r0, r1, [r6, #16]
 801d89e:	ed84 7b02 	vstr	d7, [r4, #8]
 801d8a2:	ed84 eb04 	vstr	d14, [r4, #16]
 801d8a6:	f000 8245 	beq.w	801dd34 <MotionGR_Update+0x125c>
 801d8aa:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 801d8ae:	4682      	mov	sl, r0
 801d8b0:	468b      	mov	fp, r1
 801d8b2:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 801d8b6:	4640      	mov	r0, r8
 801d8b8:	4649      	mov	r1, r9
 801d8ba:	f7e2 fcb7 	bl	800022c <__adddf3>
 801d8be:	ed9d bb06 	vldr	d11, [sp, #24]
 801d8c2:	e9dd 233c 	ldrd	r2, r3, [sp, #240]	; 0xf0
 801d8c6:	e9c7 0100 	strd	r0, r1, [r7]
 801d8ca:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 801d8ce:	ec51 0b1b 	vmov	r0, r1, d11
 801d8d2:	f7e2 fcab 	bl	800022c <__adddf3>
 801d8d6:	4606      	mov	r6, r0
 801d8d8:	460f      	mov	r7, r1
 801d8da:	ec47 6b17 	vmov	d7, r6, r7
 801d8de:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d8e0:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 801d8e4:	ed81 7b00 	vstr	d7, [r1]
 801d8e8:	ec51 0b1d 	vmov	r0, r1, d13
 801d8ec:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 801d8f0:	f7e2 fc9c 	bl	800022c <__adddf3>
 801d8f4:	4606      	mov	r6, r0
 801d8f6:	460f      	mov	r7, r1
 801d8f8:	ec47 6b17 	vmov	d7, r6, r7
 801d8fc:	9926      	ldr	r1, [sp, #152]	; 0x98
 801d8fe:	e9dd 2340 	ldrd	r2, r3, [sp, #256]	; 0x100
 801d902:	ed81 7b00 	vstr	d7, [r1]
 801d906:	ec51 0b1c 	vmov	r0, r1, d12
 801d90a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801d90e:	f7e2 fc8d 	bl	800022c <__adddf3>
 801d912:	4606      	mov	r6, r0
 801d914:	460f      	mov	r7, r1
 801d916:	ec47 6b17 	vmov	d7, r6, r7
 801d91a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d91c:	e9dd 2342 	ldrd	r2, r3, [sp, #264]	; 0x108
 801d920:	ed81 7b00 	vstr	d7, [r1]
 801d924:	ec51 0b18 	vmov	r0, r1, d8
 801d928:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801d92c:	f7e2 fc7e 	bl	800022c <__adddf3>
 801d930:	4606      	mov	r6, r0
 801d932:	460f      	mov	r7, r1
 801d934:	ec47 6b17 	vmov	d7, r6, r7
 801d938:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801d93a:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	; 0x110
 801d93e:	ed81 7b00 	vstr	d7, [r1]
 801d942:	4650      	mov	r0, sl
 801d944:	4659      	mov	r1, fp
 801d946:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 801d94a:	f7e2 fc6f 	bl	800022c <__adddf3>
 801d94e:	4606      	mov	r6, r0
 801d950:	460f      	mov	r7, r1
 801d952:	ec47 6b17 	vmov	d7, r6, r7
 801d956:	9951      	ldr	r1, [sp, #324]	; 0x144
 801d958:	4642      	mov	r2, r8
 801d95a:	ed81 7b00 	vstr	d7, [r1]
 801d95e:	464b      	mov	r3, r9
 801d960:	4640      	mov	r0, r8
 801d962:	4649      	mov	r1, r9
 801d964:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 801d968:	f7e2 fe16 	bl	8000598 <__aeabi_dmul>
 801d96c:	e9dd 2346 	ldrd	r2, r3, [sp, #280]	; 0x118
 801d970:	4680      	mov	r8, r0
 801d972:	4689      	mov	r9, r1
 801d974:	e9cd 892a 	strd	r8, r9, [sp, #168]	; 0xa8
 801d978:	f7e2 fc58 	bl	800022c <__adddf3>
 801d97c:	4606      	mov	r6, r0
 801d97e:	460f      	mov	r7, r1
 801d980:	ec47 6b17 	vmov	d7, r6, r7
 801d984:	9952      	ldr	r1, [sp, #328]	; 0x148
 801d986:	ec53 2b1b 	vmov	r2, r3, d11
 801d98a:	ed81 7b00 	vstr	d7, [r1]
 801d98e:	ec51 0b1b 	vmov	r0, r1, d11
 801d992:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 801d996:	f7e2 fdff 	bl	8000598 <__aeabi_dmul>
 801d99a:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 801d99e:	f7e2 fc45 	bl	800022c <__adddf3>
 801d9a2:	4606      	mov	r6, r0
 801d9a4:	460f      	mov	r7, r1
 801d9a6:	ec47 6b17 	vmov	d7, r6, r7
 801d9aa:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801d9ac:	ec53 2b1d 	vmov	r2, r3, d13
 801d9b0:	ed81 7b00 	vstr	d7, [r1]
 801d9b4:	ec51 0b1d 	vmov	r0, r1, d13
 801d9b8:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
 801d9bc:	f7e2 fdec 	bl	8000598 <__aeabi_dmul>
 801d9c0:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 801d9c4:	4680      	mov	r8, r0
 801d9c6:	4689      	mov	r9, r1
 801d9c8:	e9cd 892c 	strd	r8, r9, [sp, #176]	; 0xb0
 801d9cc:	f7e2 fc2e 	bl	800022c <__adddf3>
 801d9d0:	4606      	mov	r6, r0
 801d9d2:	460f      	mov	r7, r1
 801d9d4:	ec47 6b17 	vmov	d7, r6, r7
 801d9d8:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801d9da:	e9cd 6724 	strd	r6, r7, [sp, #144]	; 0x90
 801d9de:	ec53 2b1c 	vmov	r2, r3, d12
 801d9e2:	ed81 7b00 	vstr	d7, [r1]
 801d9e6:	ec51 0b1c 	vmov	r0, r1, d12
 801d9ea:	f7e2 fdd5 	bl	8000598 <__aeabi_dmul>
 801d9ee:	e9dd 234c 	ldrd	r2, r3, [sp, #304]	; 0x130
 801d9f2:	f7e2 fc1b 	bl	800022c <__adddf3>
 801d9f6:	4606      	mov	r6, r0
 801d9f8:	460f      	mov	r7, r1
 801d9fa:	ec47 6b17 	vmov	d7, r6, r7
 801d9fe:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801da00:	ec53 2b18 	vmov	r2, r3, d8
 801da04:	ed81 7b00 	vstr	d7, [r1]
 801da08:	ec51 0b18 	vmov	r0, r1, d8
 801da0c:	e9cd 6726 	strd	r6, r7, [sp, #152]	; 0x98
 801da10:	f7e2 fdc2 	bl	8000598 <__aeabi_dmul>
 801da14:	e9dd 234e 	ldrd	r2, r3, [sp, #312]	; 0x138
 801da18:	f7e2 fc08 	bl	800022c <__adddf3>
 801da1c:	4606      	mov	r6, r0
 801da1e:	460f      	mov	r7, r1
 801da20:	ec47 6b17 	vmov	d7, r6, r7
 801da24:	9953      	ldr	r1, [sp, #332]	; 0x14c
 801da26:	4652      	mov	r2, sl
 801da28:	ed81 7b00 	vstr	d7, [r1]
 801da2c:	465b      	mov	r3, fp
 801da2e:	4650      	mov	r0, sl
 801da30:	4659      	mov	r1, fp
 801da32:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
 801da36:	f7e2 fdaf 	bl	8000598 <__aeabi_dmul>
 801da3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801da3e:	f7e2 fbf5 	bl	800022c <__adddf3>
 801da42:	9b54      	ldr	r3, [sp, #336]	; 0x150
 801da44:	4680      	mov	r8, r0
 801da46:	4689      	mov	r9, r1
 801da48:	e9c3 8900 	strd	r8, r9, [r3]
 801da4c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801da4e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 801da52:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801da54:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 801da58:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801da5a:	f104 0690 	add.w	r6, r4, #144	; 0x90
 801da5e:	00df      	lsls	r7, r3, #3
 801da60:	f504 743a 	add.w	r4, r4, #744	; 0x2e8
 801da64:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801da68:	eb06 020b 	add.w	r2, r6, fp
 801da6c:	ed82 7b00 	vstr	d7, [r2]
 801da70:	ed9d 7b1a 	vldr	d7, [sp, #104]	; 0x68
 801da74:	44a3      	add	fp, r4
 801da76:	ed8b 7b00 	vstr	d7, [fp]
 801da7a:	ed9d 7b06 	vldr	d7, [sp, #24]
 801da7e:	9b50      	ldr	r3, [sp, #320]	; 0x140
 801da80:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 801da84:	eb06 030a 	add.w	r3, r6, sl
 801da88:	ed83 7b00 	vstr	d7, [r3]
 801da8c:	ed9d 7b1e 	vldr	d7, [sp, #120]	; 0x78
 801da90:	44a2      	add	sl, r4
 801da92:	ed8a 7b00 	vstr	d7, [sl]
 801da96:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 801da9a:	443e      	add	r6, r7
 801da9c:	ed86 7b00 	vstr	d7, [r6]
 801daa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801daa2:	ed9d 7b22 	vldr	d7, [sp, #136]	; 0x88
 801daa6:	443c      	add	r4, r7
 801daa8:	2b19      	cmp	r3, #25
 801daaa:	ed84 7b00 	vstr	d7, [r4]
 801daae:	d103      	bne.n	801dab8 <MotionGR_Update+0xfe0>
 801dab0:	2301      	movs	r3, #1
 801dab2:	f8c5 36e8 	str.w	r3, [r5, #1768]	; 0x6e8
 801dab6:	930c      	str	r3, [sp, #48]	; 0x30
 801dab8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801dabc:	f7e3 f864 	bl	8000b88 <__aeabi_d2f>
 801dac0:	ee07 0a90 	vmov	s15, r0
 801dac4:	eef0 7ae7 	vabs.f32	s15, s15
 801dac8:	ee17 0a90 	vmov	r0, s15
 801dacc:	f7e2 fd0c 	bl	80004e8 <__aeabi_f2d>
 801dad0:	a396      	add	r3, pc, #600	; (adr r3, 801dd2c <MotionGR_Update+0x1254>)
 801dad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dad6:	f7e2 ffef 	bl	8000ab8 <__aeabi_dcmpgt>
 801dada:	f8d5 7cd4 	ldr.w	r7, [r5, #3284]	; 0xcd4
 801dade:	4b86      	ldr	r3, [pc, #536]	; (801dcf8 <MotionGR_Update+0x1220>)
 801dae0:	2800      	cmp	r0, #0
 801dae2:	d07d      	beq.n	801dbe0 <MotionGR_Update+0x1108>
 801dae4:	f8d5 1cd0 	ldr.w	r1, [r5, #3280]	; 0xcd0
 801dae8:	f8d5 2ccc 	ldr.w	r2, [r5, #3276]	; 0xccc
 801daec:	f8d5 6cc8 	ldr.w	r6, [r5, #3272]	; 0xcc8
 801daf0:	f8d5 0cd8 	ldr.w	r0, [r5, #3288]	; 0xcd8
 801daf4:	ea03 0447 	and.w	r4, r3, r7, lsl #1
 801daf8:	eb04 7461 	add.w	r4, r4, r1, asr #29
 801dafc:	ea03 0141 	and.w	r1, r3, r1, lsl #1
 801db00:	ea03 0040 	and.w	r0, r3, r0, lsl #1
 801db04:	eb01 7162 	add.w	r1, r1, r2, asr #29
 801db08:	ea03 0242 	and.w	r2, r3, r2, lsl #1
 801db0c:	ea03 0346 	and.w	r3, r3, r6, lsl #1
 801db10:	eb00 7067 	add.w	r0, r0, r7, asr #29
 801db14:	eb02 7266 	add.w	r2, r2, r6, asr #29
 801db18:	3301      	adds	r3, #1
 801db1a:	f8c5 3cc8 	str.w	r3, [r5, #3272]	; 0xcc8
 801db1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801db20:	f8c5 0cd8 	str.w	r0, [r5, #3288]	; 0xcd8
 801db24:	2b01      	cmp	r3, #1
 801db26:	f8c5 4cd4 	str.w	r4, [r5, #3284]	; 0xcd4
 801db2a:	f8c5 1cd0 	str.w	r1, [r5, #3280]	; 0xcd0
 801db2e:	f8c5 2ccc 	str.w	r2, [r5, #3276]	; 0xccc
 801db32:	f000 8282 	beq.w	801e03a <MotionGR_Update+0x1562>
 801db36:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 801dce8 <MotionGR_Update+0x1210>
 801db3a:	ed8d 7b00 	vstr	d7, [sp]
 801db3e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801db40:	2b01      	cmp	r3, #1
 801db42:	f000 86d8 	beq.w	801e8f6 <MotionGR_Update+0x1e1e>
 801db46:	2400      	movs	r4, #0
 801db48:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d043      	beq.n	801dbd6 <MotionGR_Update+0x10fe>
 801db4e:	b2dc      	uxtb	r4, r3
 801db50:	496a      	ldr	r1, [pc, #424]	; (801dcfc <MotionGR_Update+0x1224>)
 801db52:	f44f 7215 	mov.w	r2, #596	; 0x254
 801db56:	1d08      	adds	r0, r1, #4
 801db58:	f005 f900 	bl	8022d5c <memmove>
 801db5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801db5e:	701c      	strb	r4, [r3, #0]
 801db60:	b057      	add	sp, #348	; 0x15c
 801db62:	ecbd 8b10 	vpop	{d8-d15}
 801db66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db6a:	2c02      	cmp	r4, #2
 801db6c:	d029      	beq.n	801dbc2 <MotionGR_Update+0x10ea>
 801db6e:	2300      	movs	r3, #0
 801db70:	f8c5 3278 	str.w	r3, [r5, #632]	; 0x278
 801db74:	f8c5 3288 	str.w	r3, [r5, #648]	; 0x288
 801db78:	f8c5 3290 	str.w	r3, [r5, #656]	; 0x290
 801db7c:	a35c      	add	r3, pc, #368	; (adr r3, 801dcf0 <MotionGR_Update+0x1218>)
 801db7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db82:	4630      	mov	r0, r6
 801db84:	4639      	mov	r1, r7
 801db86:	f7e2 ff97 	bl	8000ab8 <__aeabi_dcmpgt>
 801db8a:	b1a0      	cbz	r0, 801dbb6 <MotionGR_Update+0x10de>
 801db8c:	2401      	movs	r4, #1
 801db8e:	2632      	movs	r6, #50	; 0x32
 801db90:	2200      	movs	r2, #0
 801db92:	2300      	movs	r3, #0
 801db94:	4650      	mov	r0, sl
 801db96:	4659      	mov	r1, fp
 801db98:	f8c5 4278 	str.w	r4, [r5, #632]	; 0x278
 801db9c:	f8c5 6294 	str.w	r6, [r5, #660]	; 0x294
 801dba0:	f7e2 ff8a 	bl	8000ab8 <__aeabi_dcmpgt>
 801dba4:	2800      	cmp	r0, #0
 801dba6:	f001 8102 	beq.w	801edae <MotionGR_Update+0x22d6>
 801dbaa:	f04f 33ff 	mov.w	r3, #4294967295
 801dbae:	f8c5 3288 	str.w	r3, [r5, #648]	; 0x288
 801dbb2:	f7ff b92b 	b.w	801ce0c <MotionGR_Update+0x334>
 801dbb6:	9038      	str	r0, [sp, #224]	; 0xe0
 801dbb8:	4604      	mov	r4, r0
 801dbba:	e9c5 aba0 	strd	sl, fp, [r5, #640]	; 0x280
 801dbbe:	f7ff b936 	b.w	801ce2e <MotionGR_Update+0x356>
 801dbc2:	f8d5 328c 	ldr.w	r3, [r5, #652]	; 0x28c
 801dbc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dbc8:	1ad3      	subs	r3, r2, r3
 801dbca:	2b09      	cmp	r3, #9
 801dbcc:	dccf      	bgt.n	801db6e <MotionGR_Update+0x1096>
 801dbce:	2402      	movs	r4, #2
 801dbd0:	2300      	movs	r3, #0
 801dbd2:	9338      	str	r3, [sp, #224]	; 0xe0
 801dbd4:	e7f1      	b.n	801dbba <MotionGR_Update+0x10e2>
 801dbd6:	9b55      	ldr	r3, [sp, #340]	; 0x154
 801dbd8:	005e      	lsls	r6, r3, #1
 801dbda:	bf18      	it	ne
 801dbdc:	b2f4      	uxtbne	r4, r6
 801dbde:	e7b7      	b.n	801db50 <MotionGR_Update+0x1078>
 801dbe0:	f8d5 1cd0 	ldr.w	r1, [r5, #3280]	; 0xcd0
 801dbe4:	f8d5 2ccc 	ldr.w	r2, [r5, #3276]	; 0xccc
 801dbe8:	f8d5 0cd8 	ldr.w	r0, [r5, #3288]	; 0xcd8
 801dbec:	f8d5 6cc8 	ldr.w	r6, [r5, #3272]	; 0xcc8
 801dbf0:	ea03 0447 	and.w	r4, r3, r7, lsl #1
 801dbf4:	eb04 7461 	add.w	r4, r4, r1, asr #29
 801dbf8:	ea03 0141 	and.w	r1, r3, r1, lsl #1
 801dbfc:	ea03 0040 	and.w	r0, r3, r0, lsl #1
 801dc00:	eb01 7162 	add.w	r1, r1, r2, asr #29
 801dc04:	ea03 0242 	and.w	r2, r3, r2, lsl #1
 801dc08:	eb00 7067 	add.w	r0, r0, r7, asr #29
 801dc0c:	eb02 7266 	add.w	r2, r2, r6, asr #29
 801dc10:	ea03 0346 	and.w	r3, r3, r6, lsl #1
 801dc14:	e781      	b.n	801db1a <MotionGR_Update+0x1042>
 801dc16:	f44f 7216 	mov.w	r2, #600	; 0x258
 801dc1a:	2100      	movs	r1, #0
 801dc1c:	f105 0014 	add.w	r0, r5, #20
 801dc20:	f005 f8b6 	bl	8022d90 <memset>
 801dc24:	2300      	movs	r3, #0
 801dc26:	2000      	movs	r0, #0
 801dc28:	2100      	movs	r1, #0
 801dc2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dc2c:	f8c5 228c 	str.w	r2, [r5, #652]	; 0x28c
 801dc30:	e9c5 33a4 	strd	r3, r3, [r5, #656]	; 0x290
 801dc34:	e9c5 019c 	strd	r0, r1, [r5, #624]	; 0x270
 801dc38:	e9c5 01a0 	strd	r0, r1, [r5, #640]	; 0x280
 801dc3c:	461c      	mov	r4, r3
 801dc3e:	f8c5 3278 	str.w	r3, [r5, #632]	; 0x278
 801dc42:	f8c5 3288 	str.w	r3, [r5, #648]	; 0x288
 801dc46:	930e      	str	r3, [sp, #56]	; 0x38
 801dc48:	f7fe bfe2 	b.w	801cc10 <MotionGR_Update+0x138>
 801dc4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dc50:	ed85 7bd2 	vstr	d7, [r5, #840]	; 0x348
 801dc54:	ed9d 7b04 	vldr	d7, [sp, #16]
 801dc58:	2300      	movs	r3, #0
 801dc5a:	2200      	movs	r2, #0
 801dc5c:	4928      	ldr	r1, [pc, #160]	; (801dd00 <MotionGR_Update+0x1228>)
 801dc5e:	461f      	mov	r7, r3
 801dc60:	4616      	mov	r6, r2
 801dc62:	ed85 7bd4 	vstr	d7, [r5, #848]	; 0x350
 801dc66:	e9c5 23c4 	strd	r2, r3, [r5, #784]	; 0x310
 801dc6a:	ec47 6b17 	vmov	d7, r6, r7
 801dc6e:	e9c5 23c2 	strd	r2, r3, [r5, #776]	; 0x308
 801dc72:	eeb0 fa47 	vmov.f32	s30, s14
 801dc76:	eef0 fa67 	vmov.f32	s31, s15
 801dc7a:	eeb0 ea47 	vmov.f32	s28, s14
 801dc7e:	eef0 ea67 	vmov.f32	s29, s15
 801dc82:	e9c5 23c6 	strd	r2, r3, [r5, #792]	; 0x318
 801dc86:	eeb0 da47 	vmov.f32	s26, s14
 801dc8a:	eef0 da67 	vmov.f32	s27, s15
 801dc8e:	e9c5 23c8 	strd	r2, r3, [r5, #800]	; 0x320
 801dc92:	e9c5 23ca 	strd	r2, r3, [r5, #808]	; 0x328
 801dc96:	e9c1 2300 	strd	r2, r3, [r1]
 801dc9a:	2300      	movs	r3, #0
 801dc9c:	e9c5 33ce 	strd	r3, r3, [r5, #824]	; 0x338
 801dca0:	930a      	str	r3, [sp, #40]	; 0x28
 801dca2:	f8c5 32f8 	str.w	r3, [r5, #760]	; 0x2f8
 801dca6:	f8c5 3330 	str.w	r3, [r5, #816]	; 0x330
 801dcaa:	f8c5 3340 	str.w	r3, [r5, #832]	; 0x340
 801dcae:	f8c5 3334 	str.w	r3, [r5, #820]	; 0x334
 801dcb2:	f8c5 34d8 	str.w	r3, [r5, #1240]	; 0x4d8
 801dcb6:	f8c5 34e8 	str.w	r3, [r5, #1256]	; 0x4e8
 801dcba:	f8c5 34ec 	str.w	r3, [r5, #1260]	; 0x4ec
 801dcbe:	f8c5 34f0 	str.w	r3, [r5, #1264]	; 0x4f0
 801dcc2:	f8c5 34f4 	str.w	r3, [r5, #1268]	; 0x4f4
 801dcc6:	931e      	str	r3, [sp, #120]	; 0x78
 801dcc8:	9306      	str	r3, [sp, #24]
 801dcca:	9300      	str	r3, [sp, #0]
 801dccc:	931a      	str	r3, [sp, #104]	; 0x68
 801dcce:	9324      	str	r3, [sp, #144]	; 0x90
 801dcd0:	469b      	mov	fp, r3
 801dcd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dcd4:	931c      	str	r3, [sp, #112]	; 0x70
 801dcd6:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 801dcda:	ed8d 7b28 	vstr	d7, [sp, #160]	; 0xa0
 801dcde:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 801dce2:	932a      	str	r3, [sp, #168]	; 0xa8
 801dce4:	f7ff b8e8 	b.w	801ceb8 <MotionGR_Update+0x3e0>
	...
 801dcf0:	33333333 	.word	0x33333333
 801dcf4:	3fe33333 	.word	0x3fe33333
 801dcf8:	3ffffffe 	.word	0x3ffffffe
 801dcfc:	20004a84 	.word	0x20004a84
 801dd00:	20004f50 	.word	0x20004f50
 801dd04:	2c843ff6 	.word	0x2c843ff6
 801dd08:	3f21e48a 	.word	0x3f21e48a
 801dd0c:	b18a26fa 	.word	0xb18a26fa
 801dd10:	3f67ed02 	.word	0x3f67ed02
 801dd14:	b18a26fa 	.word	0xb18a26fa
 801dd18:	3f57ed02 	.word	0x3f57ed02
 801dd1c:	c010fc75 	.word	0xc010fc75
 801dd20:	bffe397a 	.word	0xbffe397a
 801dd24:	85850d65 	.word	0x85850d65
 801dd28:	3feca2cf 	.word	0x3feca2cf
 801dd2c:	66666666 	.word	0x66666666
 801dd30:	3fee6666 	.word	0x3fee6666
 801dd34:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801dd36:	eeb0 ca4d 	vmov.f32	s24, s26
 801dd3a:	eef0 ca6d 	vmov.f32	s25, s27
 801dd3e:	f104 0690 	add.w	r6, r4, #144	; 0x90
 801dd42:	ec41 0b19 	vmov	d9, r0, r1
 801dd46:	eeb0 aa48 	vmov.f32	s20, s16
 801dd4a:	eef0 aa68 	vmov.f32	s21, s17
 801dd4e:	ed9d eb0a 	vldr	d14, [sp, #40]	; 0x28
 801dd52:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 801dd56:	e9d1 8900 	ldrd	r8, r9, [r1]
 801dd5a:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
 801dd5e:	ec51 0b1e 	vmov	r0, r1, d14
 801dd62:	f7e2 fa63 	bl	800022c <__adddf3>
 801dd66:	4642      	mov	r2, r8
 801dd68:	464b      	mov	r3, r9
 801dd6a:	f7e2 fa5d 	bl	8000228 <__aeabi_dsub>
 801dd6e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801dd70:	4682      	mov	sl, r0
 801dd72:	468b      	mov	fp, r1
 801dd74:	ec4b ab17 	vmov	d7, sl, fp
 801dd78:	ed9d db06 	vldr	d13, [sp, #24]
 801dd7c:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 801dd80:	ed87 7b00 	vstr	d7, [r7]
 801dd84:	ed91 7b00 	vldr	d7, [r1]
 801dd88:	e9dd 233c 	ldrd	r2, r3, [sp, #240]	; 0xf0
 801dd8c:	eeb0 8a47 	vmov.f32	s16, s14
 801dd90:	eef0 8a67 	vmov.f32	s17, s15
 801dd94:	ec51 0b1d 	vmov	r0, r1, d13
 801dd98:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
 801dd9c:	f7e2 fa46 	bl	800022c <__adddf3>
 801dda0:	ec53 2b18 	vmov	r2, r3, d8
 801dda4:	ed8d 8b20 	vstr	d8, [sp, #128]	; 0x80
 801dda8:	f7e2 fa3e 	bl	8000228 <__aeabi_dsub>
 801ddac:	9f39      	ldr	r7, [sp, #228]	; 0xe4
 801ddae:	4682      	mov	sl, r0
 801ddb0:	468b      	mov	fp, r1
 801ddb2:	9824      	ldr	r0, [sp, #144]	; 0x90
 801ddb4:	ec4b ab17 	vmov	d7, sl, fp
 801ddb8:	eb06 01c7 	add.w	r1, r6, r7, lsl #3
 801ddbc:	ed80 7b00 	vstr	d7, [r0]
 801ddc0:	ed91 7b00 	vldr	d7, [r1]
 801ddc4:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 801ddc8:	eeb0 8a47 	vmov.f32	s16, s14
 801ddcc:	eef0 8a67 	vmov.f32	s17, s15
 801ddd0:	ec51 0b1c 	vmov	r0, r1, d12
 801ddd4:	e9cd ab18 	strd	sl, fp, [sp, #96]	; 0x60
 801ddd8:	f7e2 fa28 	bl	800022c <__adddf3>
 801dddc:	ec53 2b18 	vmov	r2, r3, d8
 801dde0:	ed8d 8b24 	vstr	d8, [sp, #144]	; 0x90
 801dde4:	f7e2 fa20 	bl	8000228 <__aeabi_dsub>
 801dde8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801ddea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ddee:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ddf2:	f504 743a 	add.w	r4, r4, #744	; 0x2e8
 801ddf6:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 801ddfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ddfc:	ed9d bb1a 	vldr	d11, [sp, #104]	; 0x68
 801de00:	eb04 010b 	add.w	r1, r4, fp
 801de04:	ed83 7b00 	vstr	d7, [r3]
 801de08:	ed91 7b00 	vldr	d7, [r1]
 801de0c:	e9dd 2340 	ldrd	r2, r3, [sp, #256]	; 0x100
 801de10:	eeb0 8a47 	vmov.f32	s16, s14
 801de14:	eef0 8a67 	vmov.f32	s17, s15
 801de18:	ec51 0b1b 	vmov	r0, r1, d11
 801de1c:	f7e2 fa06 	bl	800022c <__adddf3>
 801de20:	ec53 2b18 	vmov	r2, r3, d8
 801de24:	ed8d 8b26 	vstr	d8, [sp, #152]	; 0x98
 801de28:	f7e2 f9fe 	bl	8000228 <__aeabi_dsub>
 801de2c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801de2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801de32:	ed9d 7b04 	vldr	d7, [sp, #16]
 801de36:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 801de3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801de3c:	eb04 010a 	add.w	r1, r4, sl
 801de40:	ed83 7b00 	vstr	d7, [r3]
 801de44:	e9dd 2342 	ldrd	r2, r3, [sp, #264]	; 0x108
 801de48:	ed91 7b00 	vldr	d7, [r1]
 801de4c:	ec51 0b1a 	vmov	r0, r1, d10
 801de50:	eeb0 8a47 	vmov.f32	s16, s14
 801de54:	eef0 8a67 	vmov.f32	s17, s15
 801de58:	f7e2 f9e8 	bl	800022c <__adddf3>
 801de5c:	ec53 2b18 	vmov	r2, r3, d8
 801de60:	f7e2 f9e2 	bl	8000228 <__aeabi_dsub>
 801de64:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 801de68:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 801de6c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801de6e:	00ff      	lsls	r7, r7, #3
 801de70:	19e1      	adds	r1, r4, r7
 801de72:	ed83 7b00 	vstr	d7, [r3]
 801de76:	ed91 7b00 	vldr	d7, [r1]
 801de7a:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	; 0x110
 801de7e:	eeb0 fa47 	vmov.f32	s30, s14
 801de82:	eef0 fa67 	vmov.f32	s31, s15
 801de86:	ec51 0b19 	vmov	r0, r1, d9
 801de8a:	f7e2 f9cf 	bl	800022c <__adddf3>
 801de8e:	ec53 2b1f 	vmov	r2, r3, d15
 801de92:	f7e2 f9c9 	bl	8000228 <__aeabi_dsub>
 801de96:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 801de9a:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 801de9e:	9951      	ldr	r1, [sp, #324]	; 0x144
 801dea0:	ec53 2b1e 	vmov	r2, r3, d14
 801dea4:	ed81 7b00 	vstr	d7, [r1]
 801dea8:	ec51 0b1e 	vmov	r0, r1, d14
 801deac:	f7e2 fb74 	bl	8000598 <__aeabi_dmul>
 801deb0:	e9dd 2346 	ldrd	r2, r3, [sp, #280]	; 0x118
 801deb4:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
 801deb8:	f7e2 f9b8 	bl	800022c <__adddf3>
 801debc:	4642      	mov	r2, r8
 801debe:	464b      	mov	r3, r9
 801dec0:	4680      	mov	r8, r0
 801dec2:	4689      	mov	r9, r1
 801dec4:	4610      	mov	r0, r2
 801dec6:	4619      	mov	r1, r3
 801dec8:	f7e2 fb66 	bl	8000598 <__aeabi_dmul>
 801decc:	4602      	mov	r2, r0
 801dece:	460b      	mov	r3, r1
 801ded0:	4640      	mov	r0, r8
 801ded2:	4649      	mov	r1, r9
 801ded4:	f7e2 f9a8 	bl	8000228 <__aeabi_dsub>
 801ded8:	4680      	mov	r8, r0
 801deda:	4689      	mov	r9, r1
 801dedc:	ec49 8b17 	vmov	d7, r8, r9
 801dee0:	9952      	ldr	r1, [sp, #328]	; 0x148
 801dee2:	ec53 2b1d 	vmov	r2, r3, d13
 801dee6:	ed81 7b00 	vstr	d7, [r1]
 801deea:	ec51 0b1d 	vmov	r0, r1, d13
 801deee:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 801def2:	f7e2 fb51 	bl	8000598 <__aeabi_dmul>
 801def6:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 801defa:	f7e2 f997 	bl	800022c <__adddf3>
 801defe:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 801df02:	4680      	mov	r8, r0
 801df04:	4689      	mov	r9, r1
 801df06:	4610      	mov	r0, r2
 801df08:	4619      	mov	r1, r3
 801df0a:	f7e2 fb45 	bl	8000598 <__aeabi_dmul>
 801df0e:	4602      	mov	r2, r0
 801df10:	460b      	mov	r3, r1
 801df12:	4640      	mov	r0, r8
 801df14:	4649      	mov	r1, r9
 801df16:	f7e2 f987 	bl	8000228 <__aeabi_dsub>
 801df1a:	4680      	mov	r8, r0
 801df1c:	4689      	mov	r9, r1
 801df1e:	ec49 8b17 	vmov	d7, r8, r9
 801df22:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801df24:	ec53 2b1c 	vmov	r2, r3, d12
 801df28:	ed81 7b00 	vstr	d7, [r1]
 801df2c:	ec51 0b1c 	vmov	r0, r1, d12
 801df30:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 801df34:	f7e2 fb30 	bl	8000598 <__aeabi_dmul>
 801df38:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 801df3c:	4680      	mov	r8, r0
 801df3e:	4689      	mov	r9, r1
 801df40:	e9cd 892c 	strd	r8, r9, [sp, #176]	; 0xb0
 801df44:	f7e2 f972 	bl	800022c <__adddf3>
 801df48:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 801df4c:	4680      	mov	r8, r0
 801df4e:	4689      	mov	r9, r1
 801df50:	4610      	mov	r0, r2
 801df52:	4619      	mov	r1, r3
 801df54:	f7e2 fb20 	bl	8000598 <__aeabi_dmul>
 801df58:	4602      	mov	r2, r0
 801df5a:	460b      	mov	r3, r1
 801df5c:	4640      	mov	r0, r8
 801df5e:	4649      	mov	r1, r9
 801df60:	f7e2 f962 	bl	8000228 <__aeabi_dsub>
 801df64:	4680      	mov	r8, r0
 801df66:	4689      	mov	r9, r1
 801df68:	ec49 8b17 	vmov	d7, r8, r9
 801df6c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801df6e:	e9cd 8924 	strd	r8, r9, [sp, #144]	; 0x90
 801df72:	ec53 2b1b 	vmov	r2, r3, d11
 801df76:	ed81 7b00 	vstr	d7, [r1]
 801df7a:	ec51 0b1b 	vmov	r0, r1, d11
 801df7e:	f7e2 fb0b 	bl	8000598 <__aeabi_dmul>
 801df82:	e9dd 234c 	ldrd	r2, r3, [sp, #304]	; 0x130
 801df86:	f7e2 f951 	bl	800022c <__adddf3>
 801df8a:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 801df8e:	4680      	mov	r8, r0
 801df90:	4689      	mov	r9, r1
 801df92:	4610      	mov	r0, r2
 801df94:	4619      	mov	r1, r3
 801df96:	f7e2 faff 	bl	8000598 <__aeabi_dmul>
 801df9a:	4602      	mov	r2, r0
 801df9c:	460b      	mov	r3, r1
 801df9e:	4640      	mov	r0, r8
 801dfa0:	4649      	mov	r1, r9
 801dfa2:	f7e2 f941 	bl	8000228 <__aeabi_dsub>
 801dfa6:	4680      	mov	r8, r0
 801dfa8:	4689      	mov	r9, r1
 801dfaa:	ec49 8b17 	vmov	d7, r8, r9
 801dfae:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801dfb0:	ec53 2b1a 	vmov	r2, r3, d10
 801dfb4:	ed81 7b00 	vstr	d7, [r1]
 801dfb8:	ec51 0b1a 	vmov	r0, r1, d10
 801dfbc:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
 801dfc0:	f7e2 faea 	bl	8000598 <__aeabi_dmul>
 801dfc4:	e9dd 234e 	ldrd	r2, r3, [sp, #312]	; 0x138
 801dfc8:	f7e2 f930 	bl	800022c <__adddf3>
 801dfcc:	ec53 2b18 	vmov	r2, r3, d8
 801dfd0:	4680      	mov	r8, r0
 801dfd2:	4689      	mov	r9, r1
 801dfd4:	ee18 0a10 	vmov	r0, s16
 801dfd8:	4619      	mov	r1, r3
 801dfda:	f7e2 fadd 	bl	8000598 <__aeabi_dmul>
 801dfde:	4602      	mov	r2, r0
 801dfe0:	460b      	mov	r3, r1
 801dfe2:	4640      	mov	r0, r8
 801dfe4:	4649      	mov	r1, r9
 801dfe6:	f7e2 f91f 	bl	8000228 <__aeabi_dsub>
 801dfea:	4680      	mov	r8, r0
 801dfec:	4689      	mov	r9, r1
 801dfee:	ec49 8b17 	vmov	d7, r8, r9
 801dff2:	9953      	ldr	r1, [sp, #332]	; 0x14c
 801dff4:	ec53 2b19 	vmov	r2, r3, d9
 801dff8:	ed81 7b00 	vstr	d7, [r1]
 801dffc:	ec51 0b19 	vmov	r0, r1, d9
 801e000:	e9cd 8928 	strd	r8, r9, [sp, #160]	; 0xa0
 801e004:	f7e2 fac8 	bl	8000598 <__aeabi_dmul>
 801e008:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e00c:	f7e2 f90e 	bl	800022c <__adddf3>
 801e010:	ec53 2b1f 	vmov	r2, r3, d15
 801e014:	4680      	mov	r8, r0
 801e016:	4689      	mov	r9, r1
 801e018:	ee1f 0a10 	vmov	r0, s30
 801e01c:	4619      	mov	r1, r3
 801e01e:	f7e2 fabb 	bl	8000598 <__aeabi_dmul>
 801e022:	460b      	mov	r3, r1
 801e024:	4602      	mov	r2, r0
 801e026:	4649      	mov	r1, r9
 801e028:	4640      	mov	r0, r8
 801e02a:	f7e2 f8fd 	bl	8000228 <__aeabi_dsub>
 801e02e:	9b54      	ldr	r3, [sp, #336]	; 0x150
 801e030:	4680      	mov	r8, r0
 801e032:	4689      	mov	r9, r1
 801e034:	e9c3 8900 	strd	r8, r9, [r3]
 801e038:	e514      	b.n	801da64 <MotionGR_Update+0xf8c>
 801e03a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e03e:	4610      	mov	r0, r2
 801e040:	4619      	mov	r1, r3
 801e042:	f7e2 faa9 	bl	8000598 <__aeabi_dmul>
 801e046:	f20f 434c 	addw	r3, pc, #1100	; 0x44c
 801e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e04e:	f7e2 faa3 	bl	8000598 <__aeabi_dmul>
 801e052:	4602      	mov	r2, r0
 801e054:	460b      	mov	r3, r1
 801e056:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 801e05a:	f7e2 f8e5 	bl	8000228 <__aeabi_dsub>
 801e05e:	f20f 433c 	addw	r3, pc, #1084	; 0x43c
 801e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e066:	f7e2 fa97 	bl	8000598 <__aeabi_dmul>
 801e06a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801e06e:	4606      	mov	r6, r0
 801e070:	460f      	mov	r7, r1
 801e072:	4610      	mov	r0, r2
 801e074:	4619      	mov	r1, r3
 801e076:	f7e2 fa8f 	bl	8000598 <__aeabi_dmul>
 801e07a:	f20f 4318 	addw	r3, pc, #1048	; 0x418
 801e07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e082:	f7e2 fa89 	bl	8000598 <__aeabi_dmul>
 801e086:	4602      	mov	r2, r0
 801e088:	460b      	mov	r3, r1
 801e08a:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 801e08e:	f7e2 f8cb 	bl	8000228 <__aeabi_dsub>
 801e092:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 801e096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e09a:	f7e2 fa7d 	bl	8000598 <__aeabi_dmul>
 801e09e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801e0a2:	ec47 6b19 	vmov	d9, r6, r7
 801e0a6:	4606      	mov	r6, r0
 801e0a8:	460f      	mov	r7, r1
 801e0aa:	4610      	mov	r0, r2
 801e0ac:	4619      	mov	r1, r3
 801e0ae:	f7e2 fa73 	bl	8000598 <__aeabi_dmul>
 801e0b2:	a3f8      	add	r3, pc, #992	; (adr r3, 801e494 <MotionGR_Update+0x19bc>)
 801e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0b8:	f7e2 fa6e 	bl	8000598 <__aeabi_dmul>
 801e0bc:	4602      	mov	r2, r0
 801e0be:	460b      	mov	r3, r1
 801e0c0:	4640      	mov	r0, r8
 801e0c2:	4649      	mov	r1, r9
 801e0c4:	f7e2 f8b0 	bl	8000228 <__aeabi_dsub>
 801e0c8:	a3f4      	add	r3, pc, #976	; (adr r3, 801e49c <MotionGR_Update+0x19c4>)
 801e0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0ce:	f7e2 fa63 	bl	8000598 <__aeabi_dmul>
 801e0d2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801e0d6:	ec47 6b18 	vmov	d8, r6, r7
 801e0da:	4606      	mov	r6, r0
 801e0dc:	460f      	mov	r7, r1
 801e0de:	4610      	mov	r0, r2
 801e0e0:	4619      	mov	r1, r3
 801e0e2:	f7e2 fa59 	bl	8000598 <__aeabi_dmul>
 801e0e6:	a3eb      	add	r3, pc, #940	; (adr r3, 801e494 <MotionGR_Update+0x19bc>)
 801e0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0ec:	f7e2 fa54 	bl	8000598 <__aeabi_dmul>
 801e0f0:	4602      	mov	r2, r0
 801e0f2:	460b      	mov	r3, r1
 801e0f4:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 801e0f8:	f7e2 f896 	bl	8000228 <__aeabi_dsub>
 801e0fc:	a3e7      	add	r3, pc, #924	; (adr r3, 801e49c <MotionGR_Update+0x19c4>)
 801e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e102:	f7e2 fa49 	bl	8000598 <__aeabi_dmul>
 801e106:	ec53 2b19 	vmov	r2, r3, d9
 801e10a:	f7e2 f88d 	bl	8000228 <__aeabi_dsub>
 801e10e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e112:	4680      	mov	r8, r0
 801e114:	4689      	mov	r9, r1
 801e116:	4610      	mov	r0, r2
 801e118:	4619      	mov	r1, r3
 801e11a:	f7e2 fa3d 	bl	8000598 <__aeabi_dmul>
 801e11e:	a3dd      	add	r3, pc, #884	; (adr r3, 801e494 <MotionGR_Update+0x19bc>)
 801e120:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e124:	f7e2 fa38 	bl	8000598 <__aeabi_dmul>
 801e128:	4602      	mov	r2, r0
 801e12a:	460b      	mov	r3, r1
 801e12c:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 801e130:	f7e2 f87a 	bl	8000228 <__aeabi_dsub>
 801e134:	a3d9      	add	r3, pc, #868	; (adr r3, 801e49c <MotionGR_Update+0x19c4>)
 801e136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e13a:	f7e2 fa2d 	bl	8000598 <__aeabi_dmul>
 801e13e:	4632      	mov	r2, r6
 801e140:	463b      	mov	r3, r7
 801e142:	f7e2 f871 	bl	8000228 <__aeabi_dsub>
 801e146:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
 801e14a:	4602      	mov	r2, r0
 801e14c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e150:	4640      	mov	r0, r8
 801e152:	4659      	mov	r1, fp
 801e154:	f7e2 f86a 	bl	800022c <__adddf3>
 801e158:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801e15c:	4680      	mov	r8, r0
 801e15e:	4689      	mov	r9, r1
 801e160:	4610      	mov	r0, r2
 801e162:	4619      	mov	r1, r3
 801e164:	f7e2 fa18 	bl	8000598 <__aeabi_dmul>
 801e168:	a3ca      	add	r3, pc, #808	; (adr r3, 801e494 <MotionGR_Update+0x19bc>)
 801e16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e16e:	f7e2 fa13 	bl	8000598 <__aeabi_dmul>
 801e172:	4602      	mov	r2, r0
 801e174:	460b      	mov	r3, r1
 801e176:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 801e17a:	f7e2 f855 	bl	8000228 <__aeabi_dsub>
 801e17e:	a3c7      	add	r3, pc, #796	; (adr r3, 801e49c <MotionGR_Update+0x19c4>)
 801e180:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e184:	f7e2 fa08 	bl	8000598 <__aeabi_dmul>
 801e188:	ec53 2b18 	vmov	r2, r3, d8
 801e18c:	f7e2 f84c 	bl	8000228 <__aeabi_dsub>
 801e190:	4602      	mov	r2, r0
 801e192:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e196:	4640      	mov	r0, r8
 801e198:	4649      	mov	r1, r9
 801e19a:	f7e2 f847 	bl	800022c <__adddf3>
 801e19e:	ec53 2b18 	vmov	r2, r3, d8
 801e1a2:	4680      	mov	r8, r0
 801e1a4:	4689      	mov	r9, r1
 801e1a6:	ec51 0b19 	vmov	r0, r1, d9
 801e1aa:	e9cd 8900 	strd	r8, r9, [sp]
 801e1ae:	f7e2 f83d 	bl	800022c <__adddf3>
 801e1b2:	4632      	mov	r2, r6
 801e1b4:	463b      	mov	r3, r7
 801e1b6:	f7e2 f839 	bl	800022c <__adddf3>
 801e1ba:	4ab1      	ldr	r2, [pc, #708]	; (801e480 <MotionGR_Update+0x19a8>)
 801e1bc:	f8d5 4778 	ldr.w	r4, [r5, #1912]	; 0x778
 801e1c0:	9402      	str	r4, [sp, #8]
 801e1c2:	e8e2 010a 	strd	r0, r1, [r2], #40	; 0x28
 801e1c6:	ec49 8b17 	vmov	d7, r8, r9
 801e1ca:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 801e1ce:	ed83 7b00 	vstr	d7, [r3]
 801e1d2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801e1d4:	9204      	str	r2, [sp, #16]
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	f040 844c 	bne.w	801ea74 <MotionGR_Update+0x1f9c>
 801e1dc:	f8d5 377c 	ldr.w	r3, [r5, #1916]	; 0x77c
 801e1e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801e1e4:	e9d3 6700 	ldrd	r6, r7, [r3]
 801e1e8:	4640      	mov	r0, r8
 801e1ea:	4649      	mov	r1, r9
 801e1ec:	4632      	mov	r2, r6
 801e1ee:	463b      	mov	r3, r7
 801e1f0:	f7e2 fc44 	bl	8000a7c <__aeabi_dcmplt>
 801e1f4:	b118      	cbz	r0, 801e1fe <MotionGR_Update+0x1726>
 801e1f6:	f8c5 477c 	str.w	r4, [r5, #1916]	; 0x77c
 801e1fa:	4646      	mov	r6, r8
 801e1fc:	464f      	mov	r7, r9
 801e1fe:	9b02      	ldr	r3, [sp, #8]
 801e200:	49a0      	ldr	r1, [pc, #640]	; (801e484 <MotionGR_Update+0x19ac>)
 801e202:	3301      	adds	r3, #1
 801e204:	fb81 2103 	smull	r2, r1, r1, r3
 801e208:	17da      	asrs	r2, r3, #31
 801e20a:	ebc2 1221 	rsb	r2, r2, r1, asr #4
 801e20e:	2196      	movs	r1, #150	; 0x96
 801e210:	fb01 3312 	mls	r3, r1, r2, r3
 801e214:	f8c5 3778 	str.w	r3, [r5, #1912]	; 0x778
 801e218:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e21a:	2baf      	cmp	r3, #175	; 0xaf
 801e21c:	f47f ac93 	bne.w	801db46 <MotionGR_Update+0x106e>
 801e220:	2301      	movs	r3, #1
 801e222:	f8c5 3750 	str.w	r3, [r5, #1872]	; 0x750
 801e226:	a38a      	add	r3, pc, #552	; (adr r3, 801e450 <MotionGR_Update+0x1978>)
 801e228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e22c:	4630      	mov	r0, r6
 801e22e:	4639      	mov	r1, r7
 801e230:	f7e2 fc24 	bl	8000a7c <__aeabi_dcmplt>
 801e234:	2800      	cmp	r0, #0
 801e236:	f000 844a 	beq.w	801eace <MotionGR_Update+0x1ff6>
 801e23a:	f8d5 4cd8 	ldr.w	r4, [r5, #3288]	; 0xcd8
 801e23e:	1764      	asrs	r4, r4, #29
 801e240:	2c01      	cmp	r4, #1
 801e242:	f000 8453 	beq.w	801eaec <MotionGR_Update+0x2014>
 801e246:	2402      	movs	r4, #2
 801e248:	f8c5 4764 	str.w	r4, [r5, #1892]	; 0x764
 801e24c:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 801e250:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 801e254:	f7e1 ffea 	bl	800022c <__adddf3>
 801e258:	f003 fab6 	bl	80217c8 <sqrt>
 801e25c:	4602      	mov	r2, r0
 801e25e:	460b      	mov	r3, r1
 801e260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e264:	f7e2 fac2 	bl	80007ec <__aeabi_ddiv>
 801e268:	f7e2 fc8e 	bl	8000b88 <__aeabi_d2f>
 801e26c:	f003 f8fe 	bl	802146c <atanf>
 801e270:	f7e2 f93a 	bl	80004e8 <__aeabi_f2d>
 801e274:	a378      	add	r3, pc, #480	; (adr r3, 801e458 <MotionGR_Update+0x1980>)
 801e276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e27a:	4606      	mov	r6, r0
 801e27c:	460f      	mov	r7, r1
 801e27e:	f7e2 f98b 	bl	8000598 <__aeabi_dmul>
 801e282:	a377      	add	r3, pc, #476	; (adr r3, 801e460 <MotionGR_Update+0x1988>)
 801e284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e288:	4680      	mov	r8, r0
 801e28a:	4689      	mov	r9, r1
 801e28c:	4630      	mov	r0, r6
 801e28e:	4639      	mov	r1, r7
 801e290:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801e294:	f7e2 fbf2 	bl	8000a7c <__aeabi_dcmplt>
 801e298:	b148      	cbz	r0, 801e2ae <MotionGR_Update+0x17d6>
 801e29a:	a373      	add	r3, pc, #460	; (adr r3, 801e468 <MotionGR_Update+0x1990>)
 801e29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2a0:	4630      	mov	r0, r6
 801e2a2:	4639      	mov	r1, r7
 801e2a4:	f7e2 fc08 	bl	8000ab8 <__aeabi_dcmpgt>
 801e2a8:	2800      	cmp	r0, #0
 801e2aa:	f040 85d1 	bne.w	801ee50 <MotionGR_Update+0x2378>
 801e2ae:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 801e4a4 <MotionGR_Update+0x19cc>
 801e2b2:	4a75      	ldr	r2, [pc, #468]	; (801e488 <MotionGR_Update+0x19b0>)
 801e2b4:	f8da 00c0 	ldr.w	r0, [sl, #192]	; 0xc0
 801e2b8:	e9da 3131 	ldrd	r3, r1, [sl, #196]	; 0xc4
 801e2bc:	ea02 0141 	and.w	r1, r2, r1, lsl #1
 801e2c0:	eb01 7163 	add.w	r1, r1, r3, asr #29
 801e2c4:	ea02 0343 	and.w	r3, r2, r3, lsl #1
 801e2c8:	eb03 7360 	add.w	r3, r3, r0, asr #29
 801e2cc:	e9ca 3131 	strd	r3, r1, [sl, #196]	; 0xc4
 801e2d0:	ea02 0240 	and.w	r2, r2, r0, lsl #1
 801e2d4:	f8ca 20c0 	str.w	r2, [sl, #192]	; 0xc0
 801e2d8:	f8d5 6774 	ldr.w	r6, [r5, #1908]	; 0x774
 801e2dc:	2e00      	cmp	r6, #0
 801e2de:	dd09      	ble.n	801e2f4 <MotionGR_Update+0x181c>
 801e2e0:	a363      	add	r3, pc, #396	; (adr r3, 801e470 <MotionGR_Update+0x1998>)
 801e2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e2ea:	f7e2 fbc7 	bl	8000a7c <__aeabi_dcmplt>
 801e2ee:	2800      	cmp	r0, #0
 801e2f0:	f040 8589 	bne.w	801ee06 <MotionGR_Update+0x232e>
 801e2f4:	f8d5 8770 	ldr.w	r8, [r5, #1904]	; 0x770
 801e2f8:	f1b8 0f00 	cmp.w	r8, #0
 801e2fc:	bfc4      	itt	gt
 801e2fe:	f108 38ff 	addgt.w	r8, r8, #4294967295
 801e302:	f8c5 8770 	strgt.w	r8, [r5, #1904]	; 0x770
 801e306:	2c01      	cmp	r4, #1
 801e308:	f000 844b 	beq.w	801eba2 <MotionGR_Update+0x20ca>
 801e30c:	f8d5 7768 	ldr.w	r7, [r5, #1896]	; 0x768
 801e310:	ea57 0b06 	orrs.w	fp, r7, r6
 801e314:	f040 82c6 	bne.w	801e8a4 <MotionGR_Update+0x1dcc>
 801e318:	2c02      	cmp	r4, #2
 801e31a:	f040 8681 	bne.w	801f020 <MotionGR_Update+0x2548>
 801e31e:	a356      	add	r3, pc, #344	; (adr r3, 801e478 <MotionGR_Update+0x19a0>)
 801e320:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e324:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e328:	f7e2 fbc6 	bl	8000ab8 <__aeabi_dcmpgt>
 801e32c:	2800      	cmp	r0, #0
 801e32e:	f000 8681 	beq.w	801f034 <MotionGR_Update+0x255c>
 801e332:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e336:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e338:	4c54      	ldr	r4, [pc, #336]	; (801e48c <MotionGR_Update+0x19b4>)
 801e33a:	f8d5 976c 	ldr.w	r9, [r5, #1900]	; 0x76c
 801e33e:	f8c5 3760 	str.w	r3, [r5, #1888]	; 0x760
 801e342:	2301      	movs	r3, #1
 801e344:	ed84 7b00 	vstr	d7, [r4]
 801e348:	f8c5 3768 	str.w	r3, [r5, #1896]	; 0x768
 801e34c:	f1b9 0f00 	cmp.w	r9, #0
 801e350:	f000 85d5 	beq.w	801eefe <MotionGR_Update+0x2426>
 801e354:	f8d5 3760 	ldr.w	r3, [r5, #1888]	; 0x760
 801e358:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e35a:	1ad3      	subs	r3, r2, r3
 801e35c:	9302      	str	r3, [sp, #8]
 801e35e:	f000 be43 	b.w	801efe8 <MotionGR_Update+0x2510>
 801e362:	494b      	ldr	r1, [pc, #300]	; (801e490 <MotionGR_Update+0x19b8>)
 801e364:	9152      	str	r1, [sp, #328]	; 0x148
 801e366:	2300      	movs	r3, #0
 801e368:	2200      	movs	r2, #0
 801e36a:	460c      	mov	r4, r1
 801e36c:	468c      	mov	ip, r1
 801e36e:	e8e4 230e 	strd	r2, r3, [r4], #56	; 0x38
 801e372:	e96c 230a 	strd	r2, r3, [ip, #-40]!	; 0x28
 801e376:	e9c4 2300 	strd	r2, r3, [r4]
 801e37a:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
 801e37e:	460c      	mov	r4, r1
 801e380:	468c      	mov	ip, r1
 801e382:	e9ec 2302 	strd	r2, r3, [ip, #8]!
 801e386:	e964 2306 	strd	r2, r3, [r4, #-24]!
 801e38a:	f8cd c0b0 	str.w	ip, [sp, #176]	; 0xb0
 801e38e:	9428      	str	r4, [sp, #160]	; 0xa0
 801e390:	468c      	mov	ip, r1
 801e392:	460c      	mov	r4, r1
 801e394:	e96c 2308 	strd	r2, r3, [ip, #-32]!
 801e398:	e9e4 2306 	strd	r2, r3, [r4, #24]!
 801e39c:	460f      	mov	r7, r1
 801e39e:	4608      	mov	r0, r1
 801e3a0:	460e      	mov	r6, r1
 801e3a2:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 801e3a6:	9430      	str	r4, [sp, #192]	; 0xc0
 801e3a8:	468c      	mov	ip, r1
 801e3aa:	460c      	mov	r4, r1
 801e3ac:	e9e7 2308 	strd	r2, r3, [r7, #32]!
 801e3b0:	e9ec 2304 	strd	r2, r3, [ip, #16]!
 801e3b4:	e964 2304 	strd	r2, r3, [r4, #-16]!
 801e3b8:	e966 2302 	strd	r2, r3, [r6, #-8]!
 801e3bc:	e9e0 230a 	strd	r2, r3, [r0, #40]!	; 0x28
 801e3c0:	4699      	mov	r9, r3
 801e3c2:	4690      	mov	r8, r2
 801e3c4:	ec49 8b17 	vmov	d7, r8, r9
 801e3c8:	2300      	movs	r3, #0
 801e3ca:	9753      	str	r7, [sp, #332]	; 0x14c
 801e3cc:	e9cd 8900 	strd	r8, r9, [sp]
 801e3d0:	ed8d 7b4e 	vstr	d7, [sp, #312]	; 0x138
 801e3d4:	ed8d 7b4c 	vstr	d7, [sp, #304]	; 0x130
 801e3d8:	ed8d 7b4a 	vstr	d7, [sp, #296]	; 0x128
 801e3dc:	ed8d 7b48 	vstr	d7, [sp, #288]	; 0x120
 801e3e0:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
 801e3e4:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
 801e3e8:	ed8d 7b42 	vstr	d7, [sp, #264]	; 0x108
 801e3ec:	ed8d 7b40 	vstr	d7, [sp, #256]	; 0x100
 801e3f0:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
 801e3f4:	942a      	str	r4, [sp, #168]	; 0xa8
 801e3f6:	9651      	str	r6, [sp, #324]	; 0x144
 801e3f8:	9054      	str	r0, [sp, #336]	; 0x150
 801e3fa:	ed8d 7b3e 	vstr	d7, [sp, #248]	; 0xf8
 801e3fe:	9333      	str	r3, [sp, #204]	; 0xcc
 801e400:	f8c5 36e8 	str.w	r3, [r5, #1768]	; 0x6e8
 801e404:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 801e408:	f8c5 3760 	str.w	r3, [r5, #1888]	; 0x760
 801e40c:	f8c5 3764 	str.w	r3, [r5, #1892]	; 0x764
 801e410:	f8c5 3768 	str.w	r3, [r5, #1896]	; 0x768
 801e414:	f8c5 376c 	str.w	r3, [r5, #1900]	; 0x76c
 801e418:	f8c5 3770 	str.w	r3, [r5, #1904]	; 0x770
 801e41c:	f8c5 3774 	str.w	r3, [r5, #1908]	; 0x774
 801e420:	f8c5 3750 	str.w	r3, [r5, #1872]	; 0x750
 801e424:	f8c5 3778 	str.w	r3, [r5, #1912]	; 0x778
 801e428:	f8c5 377c 	str.w	r3, [r5, #1916]	; 0x77c
 801e42c:	f8c5 3780 	str.w	r3, [r5, #1920]	; 0x780
 801e430:	9331      	str	r3, [sp, #196]	; 0xc4
 801e432:	930c      	str	r3, [sp, #48]	; 0x30
 801e434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e436:	9350      	str	r3, [sp, #320]	; 0x140
 801e438:	9332      	str	r3, [sp, #200]	; 0xc8
 801e43a:	2302      	movs	r3, #2
 801e43c:	ed8d 7b3c 	vstr	d7, [sp, #240]	; 0xf0
 801e440:	ed8d 7b3a 	vstr	d7, [sp, #232]	; 0xe8
 801e444:	f1a1 0730 	sub.w	r7, r1, #48	; 0x30
 801e448:	9339      	str	r3, [sp, #228]	; 0xe4
 801e44a:	f7fe bffb 	b.w	801d444 <MotionGR_Update+0x96c>
 801e44e:	bf00      	nop
 801e450:	9abcaf48 	.word	0x9abcaf48
 801e454:	3e7ad7f2 	.word	0x3e7ad7f2
 801e458:	1a63c1f5 	.word	0x1a63c1f5
 801e45c:	404ca5dc 	.word	0x404ca5dc
 801e460:	4ae74489 	.word	0x4ae74489
 801e464:	bfc65718 	.word	0xbfc65718
 801e468:	15d4afa0 	.word	0x15d4afa0
 801e46c:	bff5c81e 	.word	0xbff5c81e
 801e470:	9999999a 	.word	0x9999999a
 801e474:	3fa99999 	.word	0x3fa99999
 801e478:	47ae147b 	.word	0x47ae147b
 801e47c:	3f847ae1 	.word	0x3f847ae1
 801e480:	20005750 	.word	0x20005750
 801e484:	1b4e81b5 	.word	0x1b4e81b5
 801e488:	3ffffffe 	.word	0x3ffffffe
 801e48c:	200051c8 	.word	0x200051c8
 801e490:	20005190 	.word	0x20005190
 801e494:	47ae147b 	.word	0x47ae147b
 801e498:	3fa47ae1 	.word	0x3fa47ae1
 801e49c:	55555555 	.word	0x55555555
 801e4a0:	3fa55555 	.word	0x3fa55555
 801e4a4:	20005b68 	.word	0x20005b68
 801e4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e4aa:	eeb0 9a4a 	vmov.f32	s18, s20
 801e4ae:	eef0 9a6a 	vmov.f32	s19, s21
 801e4b2:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801e4b6:	ed9d ab02 	vldr	d10, [sp, #8]
 801e4ba:	e9d1 89d2 	ldrd	r8, r9, [r1, #840]	; 0x348
 801e4be:	ec53 2b1d 	vmov	r2, r3, d13
 801e4c2:	9116      	str	r1, [sp, #88]	; 0x58
 801e4c4:	ec51 0b1a 	vmov	r0, r1, d10
 801e4c8:	f7e1 feb0 	bl	800022c <__adddf3>
 801e4cc:	4642      	mov	r2, r8
 801e4ce:	464b      	mov	r3, r9
 801e4d0:	f7e1 feaa 	bl	8000228 <__aeabi_dsub>
 801e4d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801e4d6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 801e4da:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 801e4de:	eb05 0ac2 	add.w	sl, r5, r2, lsl #3
 801e4e2:	e9da 67d2 	ldrd	r6, r7, [sl, #840]	; 0x348
 801e4e6:	ed85 7bc0 	vstr	d7, [r5, #768]	; 0x300
 801e4ea:	ec53 2b1e 	vmov	r2, r3, d14
 801e4ee:	ec51 0b19 	vmov	r0, r1, d9
 801e4f2:	f7e1 fe9b 	bl	800022c <__adddf3>
 801e4f6:	4632      	mov	r2, r6
 801e4f8:	463b      	mov	r3, r7
 801e4fa:	f7e1 fe95 	bl	8000228 <__aeabi_dsub>
 801e4fe:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 801e502:	ed9d 7b18 	vldr	d7, [sp, #96]	; 0x60
 801e506:	ec53 2b1a 	vmov	r2, r3, d10
 801e50a:	ed85 7bc2 	vstr	d7, [r5, #776]	; 0x308
 801e50e:	ec51 0b1a 	vmov	r0, r1, d10
 801e512:	f7e2 f841 	bl	8000598 <__aeabi_dmul>
 801e516:	ec53 2b1f 	vmov	r2, r3, d15
 801e51a:	f7e1 fe87 	bl	800022c <__adddf3>
 801e51e:	4642      	mov	r2, r8
 801e520:	464b      	mov	r3, r9
 801e522:	4680      	mov	r8, r0
 801e524:	4689      	mov	r9, r1
 801e526:	4610      	mov	r0, r2
 801e528:	4619      	mov	r1, r3
 801e52a:	f7e2 f835 	bl	8000598 <__aeabi_dmul>
 801e52e:	4602      	mov	r2, r0
 801e530:	460b      	mov	r3, r1
 801e532:	4640      	mov	r0, r8
 801e534:	4649      	mov	r1, r9
 801e536:	f7e1 fe77 	bl	8000228 <__aeabi_dsub>
 801e53a:	4680      	mov	r8, r0
 801e53c:	4689      	mov	r9, r1
 801e53e:	ec49 8b17 	vmov	d7, r8, r9
 801e542:	ec53 2b19 	vmov	r2, r3, d9
 801e546:	ed85 7bc4 	vstr	d7, [r5, #784]	; 0x310
 801e54a:	ec51 0b19 	vmov	r0, r1, d9
 801e54e:	e9cd 8924 	strd	r8, r9, [sp, #144]	; 0x90
 801e552:	f7e2 f821 	bl	8000598 <__aeabi_dmul>
 801e556:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 801e55a:	f7e1 fe67 	bl	800022c <__adddf3>
 801e55e:	4632      	mov	r2, r6
 801e560:	463b      	mov	r3, r7
 801e562:	4680      	mov	r8, r0
 801e564:	4689      	mov	r9, r1
 801e566:	4630      	mov	r0, r6
 801e568:	4639      	mov	r1, r7
 801e56a:	f7e2 f815 	bl	8000598 <__aeabi_dmul>
 801e56e:	4602      	mov	r2, r0
 801e570:	460b      	mov	r3, r1
 801e572:	4640      	mov	r0, r8
 801e574:	4649      	mov	r1, r9
 801e576:	f7e1 fe57 	bl	8000228 <__aeabi_dsub>
 801e57a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e57c:	f104 0760 	add.w	r7, r4, #96	; 0x60
 801e580:	00f6      	lsls	r6, r6, #3
 801e582:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
 801e586:	443e      	add	r6, r7
 801e588:	e9d6 8900 	ldrd	r8, r9, [r6]
 801e58c:	ed9d 7b22 	vldr	d7, [sp, #136]	; 0x88
 801e590:	4642      	mov	r2, r8
 801e592:	ed85 7bc6 	vstr	d7, [r5, #792]	; 0x318
 801e596:	464b      	mov	r3, r9
 801e598:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 801e59c:	f7e1 fe44 	bl	8000228 <__aeabi_dsub>
 801e5a0:	ec53 2b1b 	vmov	r2, r3, d11
 801e5a4:	f7e1 fe42 	bl	800022c <__adddf3>
 801e5a8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 801e5ac:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 801e5b0:	4642      	mov	r2, r8
 801e5b2:	ed85 7bc8 	vstr	d7, [r5, #800]	; 0x320
 801e5b6:	464b      	mov	r3, r9
 801e5b8:	4640      	mov	r0, r8
 801e5ba:	4649      	mov	r1, r9
 801e5bc:	f7e1 ffec 	bl	8000598 <__aeabi_dmul>
 801e5c0:	4602      	mov	r2, r0
 801e5c2:	460b      	mov	r3, r1
 801e5c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e5c8:	f7e1 fe2e 	bl	8000228 <__aeabi_dsub>
 801e5cc:	ec53 2b1b 	vmov	r2, r3, d11
 801e5d0:	4680      	mov	r8, r0
 801e5d2:	4689      	mov	r9, r1
 801e5d4:	ec51 0b1b 	vmov	r0, r1, d11
 801e5d8:	f7e1 ffde 	bl	8000598 <__aeabi_dmul>
 801e5dc:	4602      	mov	r2, r0
 801e5de:	460b      	mov	r3, r1
 801e5e0:	4640      	mov	r0, r8
 801e5e2:	4649      	mov	r1, r9
 801e5e4:	f7e1 fe22 	bl	800022c <__adddf3>
 801e5e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801e5ea:	4689      	mov	r9, r1
 801e5ec:	4680      	mov	r8, r0
 801e5ee:	ec49 8b17 	vmov	d7, r8, r9
 801e5f2:	00d3      	lsls	r3, r2, #3
 801e5f4:	441f      	add	r7, r3
 801e5f6:	ed85 7bca 	vstr	d7, [r5, #808]	; 0x328
 801e5fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e5fc:	9a00      	ldr	r2, [sp, #0]
 801e5fe:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e600:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 801e604:	4293      	cmp	r3, r2
 801e606:	ed81 abd2 	vstr	d10, [r1, #840]	; 0x348
 801e60a:	ed86 bb00 	vstr	d11, [r6]
 801e60e:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
 801e612:	ed87 7b00 	vstr	d7, [r7]
 801e616:	ed8a 9bd2 	vstr	d9, [sl, #840]	; 0x348
 801e61a:	f000 831c 	beq.w	801ec56 <MotionGR_Update+0x217e>
 801e61e:	461c      	mov	r4, r3
 801e620:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801e624:	e9d3 23d2 	ldrd	r2, r3, [r3, #840]	; 0x348
 801e628:	ec51 0b1a 	vmov	r0, r1, d10
 801e62c:	f7e2 fa44 	bl	8000ab8 <__aeabi_dcmpgt>
 801e630:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e632:	2800      	cmp	r0, #0
 801e634:	ea4f 0244 	mov.w	r2, r4, lsl #1
 801e638:	bf18      	it	ne
 801e63a:	460a      	movne	r2, r1
 801e63c:	920c      	str	r2, [sp, #48]	; 0x30
 801e63e:	9a00      	ldr	r2, [sp, #0]
 801e640:	4623      	mov	r3, r4
 801e642:	bf18      	it	ne
 801e644:	4613      	movne	r3, r2
 801e646:	931a      	str	r3, [sp, #104]	; 0x68
 801e648:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e64a:	f8c5 3330 	str.w	r3, [r5, #816]	; 0x330
 801e64e:	9b00      	ldr	r3, [sp, #0]
 801e650:	455b      	cmp	r3, fp
 801e652:	f000 82e2 	beq.w	801ec1a <MotionGR_Update+0x2142>
 801e656:	eb05 130b 	add.w	r3, r5, fp, lsl #4
 801e65a:	e9d3 23d2 	ldrd	r2, r3, [r3, #840]	; 0x348
 801e65e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e662:	f7e2 fa0b 	bl	8000a7c <__aeabi_dcmplt>
 801e666:	ea4f 024b 	mov.w	r2, fp, lsl #1
 801e66a:	2800      	cmp	r0, #0
 801e66c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e66e:	bf08      	it	eq
 801e670:	4613      	moveq	r3, r2
 801e672:	9316      	str	r3, [sp, #88]	; 0x58
 801e674:	9b00      	ldr	r3, [sp, #0]
 801e676:	bf18      	it	ne
 801e678:	469b      	movne	fp, r3
 801e67a:	9b00      	ldr	r3, [sp, #0]
 801e67c:	9a06      	ldr	r2, [sp, #24]
 801e67e:	f8c5 b338 	str.w	fp, [r5, #824]	; 0x338
 801e682:	4293      	cmp	r3, r2
 801e684:	f000 8335 	beq.w	801ecf2 <MotionGR_Update+0x221a>
 801e688:	eb05 1402 	add.w	r4, r5, r2, lsl #4
 801e68c:	e9d4 23d4 	ldrd	r2, r3, [r4, #848]	; 0x350
 801e690:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e694:	3408      	adds	r4, #8
 801e696:	f7e2 fa0f 	bl	8000ab8 <__aeabi_dcmpgt>
 801e69a:	2800      	cmp	r0, #0
 801e69c:	f040 837b 	bne.w	801ed96 <MotionGR_Update+0x22be>
 801e6a0:	ed94 7bd2 	vldr	d7, [r4, #840]	; 0x348
 801e6a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801e6a8:	9b06      	ldr	r3, [sp, #24]
 801e6aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e6ac:	f8c5 333c 	str.w	r3, [r5, #828]	; 0x33c
 801e6b0:	9b00      	ldr	r3, [sp, #0]
 801e6b2:	4293      	cmp	r3, r2
 801e6b4:	f000 82fa 	beq.w	801ecac <MotionGR_Update+0x21d4>
 801e6b8:	eb05 1402 	add.w	r4, r5, r2, lsl #4
 801e6bc:	4616      	mov	r6, r2
 801e6be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e6c2:	e9d4 23d4 	ldrd	r2, r3, [r4, #848]	; 0x350
 801e6c6:	3408      	adds	r4, #8
 801e6c8:	f7e2 f9d8 	bl	8000a7c <__aeabi_dcmplt>
 801e6cc:	2800      	cmp	r0, #0
 801e6ce:	f040 835d 	bne.w	801ed8c <MotionGR_Update+0x22b4>
 801e6d2:	ed94 7bd2 	vldr	d7, [r4, #840]	; 0x348
 801e6d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e6da:	9600      	str	r6, [sp, #0]
 801e6dc:	9b00      	ldr	r3, [sp, #0]
 801e6de:	f8c5 3340 	str.w	r3, [r5, #832]	; 0x340
 801e6e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e6e4:	f8c5 3334 	str.w	r3, [r5, #820]	; 0x334
 801e6e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e6ea:	2b19      	cmp	r3, #25
 801e6ec:	d102      	bne.n	801e6f4 <MotionGR_Update+0x1c1c>
 801e6ee:	2301      	movs	r3, #1
 801e6f0:	f8c5 32f8 	str.w	r3, [r5, #760]	; 0x2f8
 801e6f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e6f6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801e6fa:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
 801e6fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e700:	4602      	mov	r2, r0
 801e702:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801e706:	460b      	mov	r3, r1
 801e708:	f7e1 ff46 	bl	8000598 <__aeabi_dmul>
 801e70c:	a3c2      	add	r3, pc, #776	; (adr r3, 801ea18 <MotionGR_Update+0x1f40>)
 801e70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e712:	f7e1 ff41 	bl	8000598 <__aeabi_dmul>
 801e716:	4602      	mov	r2, r0
 801e718:	460b      	mov	r3, r1
 801e71a:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 801e71e:	f7e1 fd83 	bl	8000228 <__aeabi_dsub>
 801e722:	e9d4 89d2 	ldrd	r8, r9, [r4, #840]	; 0x348
 801e726:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801e72a:	4cc9      	ldr	r4, [pc, #804]	; (801ea50 <MotionGR_Update+0x1f78>)
 801e72c:	460f      	mov	r7, r1
 801e72e:	f8d5 14d8 	ldr.w	r1, [r5, #1240]	; 0x4d8
 801e732:	ea04 0441 	and.w	r4, r4, r1, lsl #1
 801e736:	e9d6 abd2 	ldrd	sl, fp, [r6, #840]	; 0x348
 801e73a:	4619      	mov	r1, r3
 801e73c:	4606      	mov	r6, r0
 801e73e:	f8c5 44d8 	str.w	r4, [r5, #1240]	; 0x4d8
 801e742:	4610      	mov	r0, r2
 801e744:	f7e1 ff28 	bl	8000598 <__aeabi_dmul>
 801e748:	a3b3      	add	r3, pc, #716	; (adr r3, 801ea18 <MotionGR_Update+0x1f40>)
 801e74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e74e:	f7e1 ff23 	bl	8000598 <__aeabi_dmul>
 801e752:	4602      	mov	r2, r0
 801e754:	460b      	mov	r3, r1
 801e756:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 801e75a:	f7e1 fd65 	bl	8000228 <__aeabi_dsub>
 801e75e:	a3b0      	add	r3, pc, #704	; (adr r3, 801ea20 <MotionGR_Update+0x1f48>)
 801e760:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e764:	f7e2 f98a 	bl	8000a7c <__aeabi_dcmplt>
 801e768:	b1c0      	cbz	r0, 801e79c <MotionGR_Update+0x1cc4>
 801e76a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801e76e:	4610      	mov	r0, r2
 801e770:	4619      	mov	r1, r3
 801e772:	f7e1 ff11 	bl	8000598 <__aeabi_dmul>
 801e776:	a3a8      	add	r3, pc, #672	; (adr r3, 801ea18 <MotionGR_Update+0x1f40>)
 801e778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e77c:	f7e1 ff0c 	bl	8000598 <__aeabi_dmul>
 801e780:	4602      	mov	r2, r0
 801e782:	460b      	mov	r3, r1
 801e784:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 801e788:	f7e1 fd4e 	bl	8000228 <__aeabi_dsub>
 801e78c:	a3a4      	add	r3, pc, #656	; (adr r3, 801ea20 <MotionGR_Update+0x1f48>)
 801e78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e792:	f7e2 f973 	bl	8000a7c <__aeabi_dcmplt>
 801e796:	2800      	cmp	r0, #0
 801e798:	f040 833a 	bne.w	801ee10 <MotionGR_Update+0x2338>
 801e79c:	4bad      	ldr	r3, [pc, #692]	; (801ea54 <MotionGR_Update+0x1f7c>)
 801e79e:	4630      	mov	r0, r6
 801e7a0:	4639      	mov	r1, r7
 801e7a2:	2200      	movs	r2, #0
 801e7a4:	f7e2 f96a 	bl	8000a7c <__aeabi_dcmplt>
 801e7a8:	2800      	cmp	r0, #0
 801e7aa:	f000 810c 	beq.w	801e9c6 <MotionGR_Update+0x1eee>
 801e7ae:	a39a      	add	r3, pc, #616	; (adr r3, 801ea18 <MotionGR_Update+0x1f40>)
 801e7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7b4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801e7b8:	f7e1 feee 	bl	8000598 <__aeabi_dmul>
 801e7bc:	4ba6      	ldr	r3, [pc, #664]	; (801ea58 <MotionGR_Update+0x1f80>)
 801e7be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e7c0:	f8c5 24e8 	str.w	r2, [r5, #1256]	; 0x4e8
 801e7c4:	e9c3 0100 	strd	r0, r1, [r3]
 801e7c8:	2000      	movs	r0, #0
 801e7ca:	f8d5 34f0 	ldr.w	r3, [r5, #1264]	; 0x4f0
 801e7ce:	f8d5 64f4 	ldr.w	r6, [r5, #1268]	; 0x4f4
 801e7d2:	2b00      	cmp	r3, #0
 801e7d4:	bfc4      	itt	gt
 801e7d6:	f103 33ff 	addgt.w	r3, r3, #4294967295
 801e7da:	f8c5 34f0 	strgt.w	r3, [r5, #1264]	; 0x4f0
 801e7de:	2e00      	cmp	r6, #0
 801e7e0:	bfc4      	itt	gt
 801e7e2:	f106 36ff 	addgt.w	r6, r6, #4294967295
 801e7e6:	f8c5 64f4 	strgt.w	r6, [r5, #1268]	; 0x4f4
 801e7ea:	2801      	cmp	r0, #1
 801e7ec:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
 801e7f0:	f000 81c3 	beq.w	801eb7a <MotionGR_Update+0x20a2>
 801e7f4:	2b01      	cmp	r3, #1
 801e7f6:	f040 82bb 	bne.w	801ed70 <MotionGR_Update+0x2298>
 801e7fa:	4b98      	ldr	r3, [pc, #608]	; (801ea5c <MotionGR_Update+0x1f84>)
 801e7fc:	429c      	cmp	r4, r3
 801e7fe:	f47e adb8 	bne.w	801d372 <MotionGR_Update+0x89a>
 801e802:	23c8      	movs	r3, #200	; 0xc8
 801e804:	f8c5 34f0 	str.w	r3, [r5, #1264]	; 0x4f0
 801e808:	2303      	movs	r3, #3
 801e80a:	f8c5 34ec 	str.w	r3, [r5, #1260]	; 0x4ec
 801e80e:	e9dd 782c 	ldrd	r7, r8, [sp, #176]	; 0xb0
 801e812:	a385      	add	r3, pc, #532	; (adr r3, 801ea28 <MotionGR_Update+0x1f50>)
 801e814:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e818:	4638      	mov	r0, r7
 801e81a:	4641      	mov	r1, r8
 801e81c:	f7e2 f92e 	bl	8000a7c <__aeabi_dcmplt>
 801e820:	2800      	cmp	r0, #0
 801e822:	f000 82ac 	beq.w	801ed7e <MotionGR_Update+0x22a6>
 801e826:	a382      	add	r3, pc, #520	; (adr r3, 801ea30 <MotionGR_Update+0x1f58>)
 801e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e82c:	4638      	mov	r0, r7
 801e82e:	4641      	mov	r1, r8
 801e830:	f7e2 f942 	bl	8000ab8 <__aeabi_dcmpgt>
 801e834:	2800      	cmp	r0, #0
 801e836:	f000 82a2 	beq.w	801ed7e <MotionGR_Update+0x22a6>
 801e83a:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	; 0xb8
 801e83e:	a37e      	add	r3, pc, #504	; (adr r3, 801ea38 <MotionGR_Update+0x1f60>)
 801e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e844:	f7e2 f91a 	bl	8000a7c <__aeabi_dcmplt>
 801e848:	2800      	cmp	r0, #0
 801e84a:	f000 8298 	beq.w	801ed7e <MotionGR_Update+0x22a6>
 801e84e:	2e00      	cmp	r6, #0
 801e850:	f040 8295 	bne.w	801ed7e <MotionGR_Update+0x22a6>
 801e854:	4982      	ldr	r1, [pc, #520]	; (801ea60 <MotionGR_Update+0x1f88>)
 801e856:	f8d5 3260 	ldr.w	r3, [r5, #608]	; 0x260
 801e85a:	e9d5 0499 	ldrd	r0, r4, [r5, #612]	; 0x264
 801e85e:	f5a1 7c13 	sub.w	ip, r1, #588	; 0x24c
 801e862:	e003      	b.n	801e86c <MotionGR_Update+0x1d94>
 801e864:	458c      	cmp	ip, r1
 801e866:	4626      	mov	r6, r4
 801e868:	d00b      	beq.n	801e882 <MotionGR_Update+0x1daa>
 801e86a:	4614      	mov	r4, r2
 801e86c:	1902      	adds	r2, r0, r4
 801e86e:	441a      	add	r2, r3
 801e870:	461f      	mov	r7, r3
 801e872:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801e876:	42da      	cmn	r2, r3
 801e878:	4602      	mov	r2, r0
 801e87a:	4638      	mov	r0, r7
 801e87c:	d1f2      	bne.n	801e864 <MotionGR_Update+0x1d8c>
 801e87e:	2e00      	cmp	r6, #0
 801e880:	d0f0      	beq.n	801e864 <MotionGR_Update+0x1d8c>
 801e882:	1eb1      	subs	r1, r6, #2
 801e884:	f04f 0200 	mov.w	r2, #0
 801e888:	f04f 03c8 	mov.w	r3, #200	; 0xc8
 801e88c:	bf18      	it	ne
 801e88e:	2101      	movne	r1, #1
 801e890:	9155      	str	r1, [sp, #340]	; 0x154
 801e892:	f8c5 24f0 	str.w	r2, [r5, #1264]	; 0x4f0
 801e896:	f8c5 34f4 	str.w	r3, [r5, #1268]	; 0x4f4
 801e89a:	2300      	movs	r3, #0
 801e89c:	f8c5 34ec 	str.w	r3, [r5, #1260]	; 0x4ec
 801e8a0:	f7fe bd69 	b.w	801d376 <MotionGR_Update+0x89e>
 801e8a4:	f8d5 976c 	ldr.w	r9, [r5, #1900]	; 0x76c
 801e8a8:	f1b9 0f00 	cmp.w	r9, #0
 801e8ac:	f040 8252 	bne.w	801ed54 <MotionGR_Update+0x227c>
 801e8b0:	2e00      	cmp	r6, #0
 801e8b2:	f000 83a6 	beq.w	801f002 <MotionGR_Update+0x252a>
 801e8b6:	f04f 0b00 	mov.w	fp, #0
 801e8ba:	2f01      	cmp	r7, #1
 801e8bc:	f000 831e 	beq.w	801eefc <MotionGR_Update+0x2424>
 801e8c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e8c4:	a35e      	add	r3, pc, #376	; (adr r3, 801ea40 <MotionGR_Update+0x1f68>)
 801e8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8ca:	f7e2 f8f5 	bl	8000ab8 <__aeabi_dcmpgt>
 801e8ce:	b110      	cbz	r0, 801e8d6 <MotionGR_Update+0x1dfe>
 801e8d0:	f8d5 3774 	ldr.w	r3, [r5, #1908]	; 0x774
 801e8d4:	b1bb      	cbz	r3, 801e906 <MotionGR_Update+0x1e2e>
 801e8d6:	f8d5 3780 	ldr.w	r3, [r5, #1920]	; 0x780
 801e8da:	2b00      	cmp	r3, #0
 801e8dc:	dc16      	bgt.n	801e90c <MotionGR_Update+0x1e34>
 801e8de:	f1bb 0f01 	cmp.w	fp, #1
 801e8e2:	d04e      	beq.n	801e982 <MotionGR_Update+0x1eaa>
 801e8e4:	2400      	movs	r4, #0
 801e8e6:	495f      	ldr	r1, [pc, #380]	; (801ea64 <MotionGR_Update+0x1f8c>)
 801e8e8:	2220      	movs	r2, #32
 801e8ea:	f101 0008 	add.w	r0, r1, #8
 801e8ee:	f004 fa35 	bl	8022d5c <memmove>
 801e8f2:	f7ff b929 	b.w	801db48 <MotionGR_Update+0x1070>
 801e8f6:	4b5c      	ldr	r3, [pc, #368]	; (801ea68 <MotionGR_Update+0x1f90>)
 801e8f8:	f8d5 277c 	ldr.w	r2, [r5, #1916]	; 0x77c
 801e8fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e900:	e9d3 6700 	ldrd	r6, r7, [r3]
 801e904:	e48f      	b.n	801e226 <MotionGR_Update+0x174e>
 801e906:	2364      	movs	r3, #100	; 0x64
 801e908:	f8c5 3780 	str.w	r3, [r5, #1920]	; 0x780
 801e90c:	4c55      	ldr	r4, [pc, #340]	; (801ea64 <MotionGR_Update+0x1f8c>)
 801e90e:	e9d4 8900 	ldrd	r8, r9, [r4]
 801e912:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801e916:	4642      	mov	r2, r8
 801e918:	464b      	mov	r3, r9
 801e91a:	4630      	mov	r0, r6
 801e91c:	4639      	mov	r1, r7
 801e91e:	f7e2 f8c1 	bl	8000aa4 <__aeabi_dcmpge>
 801e922:	2800      	cmp	r0, #0
 801e924:	f000 826c 	beq.w	801ee00 <MotionGR_Update+0x2328>
 801e928:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
 801e92c:	4632      	mov	r2, r6
 801e92e:	463b      	mov	r3, r7
 801e930:	4640      	mov	r0, r8
 801e932:	4649      	mov	r1, r9
 801e934:	f7e2 f8b6 	bl	8000aa4 <__aeabi_dcmpge>
 801e938:	2800      	cmp	r0, #0
 801e93a:	f000 825e 	beq.w	801edfa <MotionGR_Update+0x2322>
 801e93e:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 801e942:	4642      	mov	r2, r8
 801e944:	464b      	mov	r3, r9
 801e946:	4630      	mov	r0, r6
 801e948:	4639      	mov	r1, r7
 801e94a:	f7e2 f8ab 	bl	8000aa4 <__aeabi_dcmpge>
 801e94e:	2800      	cmp	r0, #0
 801e950:	f000 8250 	beq.w	801edf4 <MotionGR_Update+0x231c>
 801e954:	e9d4 8908 	ldrd	r8, r9, [r4, #32]
 801e958:	4632      	mov	r2, r6
 801e95a:	463b      	mov	r3, r7
 801e95c:	4640      	mov	r0, r8
 801e95e:	4649      	mov	r1, r9
 801e960:	f7e2 f8a0 	bl	8000aa4 <__aeabi_dcmpge>
 801e964:	2800      	cmp	r0, #0
 801e966:	f000 8226 	beq.w	801edb6 <MotionGR_Update+0x22de>
 801e96a:	a32b      	add	r3, pc, #172	; (adr r3, 801ea18 <MotionGR_Update+0x1f40>)
 801e96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e970:	4640      	mov	r0, r8
 801e972:	4649      	mov	r1, r9
 801e974:	f7e2 f882 	bl	8000a7c <__aeabi_dcmplt>
 801e978:	2800      	cmp	r0, #0
 801e97a:	d0b0      	beq.n	801e8de <MotionGR_Update+0x1e06>
 801e97c:	2300      	movs	r3, #0
 801e97e:	f8c5 3780 	str.w	r3, [r5, #1920]	; 0x780
 801e982:	4b3a      	ldr	r3, [pc, #232]	; (801ea6c <MotionGR_Update+0x1f94>)
 801e984:	22c8      	movs	r2, #200	; 0xc8
 801e986:	f8c5 2774 	str.w	r2, [r5, #1908]	; 0x774
 801e98a:	f1a3 01c4 	sub.w	r1, r3, #196	; 0xc4
 801e98e:	2200      	movs	r2, #0
 801e990:	e002      	b.n	801e998 <MotionGR_Update+0x1ec0>
 801e992:	4299      	cmp	r1, r3
 801e994:	f000 836a 	beq.w	801f06c <MotionGR_Update+0x2594>
 801e998:	4610      	mov	r0, r2
 801e99a:	f853 2904 	ldr.w	r2, [r3], #-4
 801e99e:	2a00      	cmp	r2, #0
 801e9a0:	d1f7      	bne.n	801e992 <MotionGR_Update+0x1eba>
 801e9a2:	f8da 30c8 	ldr.w	r3, [sl, #200]	; 0xc8
 801e9a6:	175b      	asrs	r3, r3, #29
 801e9a8:	2200      	movs	r2, #0
 801e9aa:	2b01      	cmp	r3, #1
 801e9ac:	f8c5 2768 	str.w	r2, [r5, #1896]	; 0x768
 801e9b0:	f8c5 276c 	str.w	r2, [r5, #1900]	; 0x76c
 801e9b4:	d096      	beq.n	801e8e4 <MotionGR_Update+0x1e0c>
 801e9b6:	2802      	cmp	r0, #2
 801e9b8:	d094      	beq.n	801e8e4 <MotionGR_Update+0x1e0c>
 801e9ba:	2401      	movs	r4, #1
 801e9bc:	e793      	b.n	801e8e6 <MotionGR_Update+0x1e0e>
 801e9be:	9038      	str	r0, [sp, #224]	; 0xe0
 801e9c0:	2401      	movs	r4, #1
 801e9c2:	f7fe ba34 	b.w	801ce2e <MotionGR_Update+0x356>
 801e9c6:	4b24      	ldr	r3, [pc, #144]	; (801ea58 <MotionGR_Update+0x1f80>)
 801e9c8:	ec51 0b1b 	vmov	r0, r1, d11
 801e9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9d0:	f7e1 fc2a 	bl	8000228 <__aeabi_dsub>
 801e9d4:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801e9d8:	4b25      	ldr	r3, [pc, #148]	; (801ea70 <MotionGR_Update+0x1f98>)
 801e9da:	4639      	mov	r1, r7
 801e9dc:	2200      	movs	r2, #0
 801e9de:	4606      	mov	r6, r0
 801e9e0:	f7e2 f86a 	bl	8000ab8 <__aeabi_dcmpgt>
 801e9e4:	2800      	cmp	r0, #0
 801e9e6:	f43f aef0 	beq.w	801e7ca <MotionGR_Update+0x1cf2>
 801e9ea:	f8d5 04e8 	ldr.w	r0, [r5, #1256]	; 0x4e8
 801e9ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9f0:	1a18      	subs	r0, r3, r0
 801e9f2:	f43f aeea 	beq.w	801e7ca <MotionGR_Update+0x1cf2>
 801e9f6:	f7e1 fd65 	bl	80004c4 <__aeabi_i2d>
 801e9fa:	4602      	mov	r2, r0
 801e9fc:	460b      	mov	r3, r1
 801e9fe:	4630      	mov	r0, r6
 801ea00:	4639      	mov	r1, r7
 801ea02:	f7e1 fef3 	bl	80007ec <__aeabi_ddiv>
 801ea06:	a310      	add	r3, pc, #64	; (adr r3, 801ea48 <MotionGR_Update+0x1f70>)
 801ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea0c:	f7e2 f854 	bl	8000ab8 <__aeabi_dcmpgt>
 801ea10:	3800      	subs	r0, #0
 801ea12:	bf18      	it	ne
 801ea14:	2001      	movne	r0, #1
 801ea16:	e6d8      	b.n	801e7ca <MotionGR_Update+0x1cf2>
 801ea18:	47ae147b 	.word	0x47ae147b
 801ea1c:	3fa47ae1 	.word	0x3fa47ae1
 801ea20:	eb851eb9 	.word	0xeb851eb9
 801ea24:	3fdeb851 	.word	0x3fdeb851
 801ea28:	4ae74489 	.word	0x4ae74489
 801ea2c:	bfc65718 	.word	0xbfc65718
 801ea30:	15d4afa0 	.word	0x15d4afa0
 801ea34:	bff5c81e 	.word	0xbff5c81e
 801ea38:	be6956ee 	.word	0xbe6956ee
 801ea3c:	3fea3fef 	.word	0x3fea3fef
 801ea40:	1eb851ec 	.word	0x1eb851ec
 801ea44:	3fb1eb85 	.word	0x3fb1eb85
 801ea48:	9999999a 	.word	0x9999999a
 801ea4c:	3fe99999 	.word	0x3fe99999
 801ea50:	000ffffe 	.word	0x000ffffe
 801ea54:	40768000 	.word	0x40768000
 801ea58:	20004f50 	.word	0x20004f50
 801ea5c:	000fffff 	.word	0x000fffff
 801ea60:	20004cd0 	.word	0x20004cd0
 801ea64:	20005750 	.word	0x20005750
 801ea68:	20005778 	.word	0x20005778
 801ea6c:	20004b48 	.word	0x20004b48
 801ea70:	402e0000 	.word	0x402e0000
 801ea74:	f8d5 b77c 	ldr.w	fp, [r5, #1916]	; 0x77c
 801ea78:	455c      	cmp	r4, fp
 801ea7a:	f000 82e1 	beq.w	801f040 <MotionGR_Update+0x2568>
 801ea7e:	eb05 03cb 	add.w	r3, r5, fp, lsl #3
 801ea82:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 801ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea8a:	4640      	mov	r0, r8
 801ea8c:	4649      	mov	r1, r9
 801ea8e:	f7e1 fff5 	bl	8000a7c <__aeabi_dcmplt>
 801ea92:	9b02      	ldr	r3, [sp, #8]
 801ea94:	2800      	cmp	r0, #0
 801ea96:	bf18      	it	ne
 801ea98:	469b      	movne	fp, r3
 801ea9a:	9a02      	ldr	r2, [sp, #8]
 801ea9c:	49d0      	ldr	r1, [pc, #832]	; (801ede0 <MotionGR_Update+0x2308>)
 801ea9e:	f8c5 b77c 	str.w	fp, [r5, #1916]	; 0x77c
 801eaa2:	3201      	adds	r2, #1
 801eaa4:	fb81 3102 	smull	r3, r1, r1, r2
 801eaa8:	17d3      	asrs	r3, r2, #31
 801eaaa:	ebc3 1321 	rsb	r3, r3, r1, asr #4
 801eaae:	2196      	movs	r1, #150	; 0x96
 801eab0:	fb01 2313 	mls	r3, r1, r3, r2
 801eab4:	f8c5 3778 	str.w	r3, [r5, #1912]	; 0x778
 801eab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eaba:	2baf      	cmp	r3, #175	; 0xaf
 801eabc:	f47f a83f 	bne.w	801db3e <MotionGR_Update+0x1066>
 801eac0:	9b04      	ldr	r3, [sp, #16]
 801eac2:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
 801eac6:	e9db 6700 	ldrd	r6, r7, [fp]
 801eaca:	f7ff bba9 	b.w	801e220 <MotionGR_Update+0x1748>
 801eace:	a3bc      	add	r3, pc, #752	; (adr r3, 801edc0 <MotionGR_Update+0x22e8>)
 801ead0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ead4:	4630      	mov	r0, r6
 801ead6:	4639      	mov	r1, r7
 801ead8:	f7e1 ffd0 	bl	8000a7c <__aeabi_dcmplt>
 801eadc:	2800      	cmp	r0, #0
 801eade:	f47f abb2 	bne.w	801e246 <MotionGR_Update+0x176e>
 801eae2:	2403      	movs	r4, #3
 801eae4:	f8c5 4764 	str.w	r4, [r5, #1892]	; 0x764
 801eae8:	f7ff bbb0 	b.w	801e24c <MotionGR_Update+0x1774>
 801eaec:	f8df a2fc 	ldr.w	sl, [pc, #764]	; 801edec <MotionGR_Update+0x2314>
 801eaf0:	4abc      	ldr	r2, [pc, #752]	; (801ede4 <MotionGR_Update+0x230c>)
 801eaf2:	f8da 00c0 	ldr.w	r0, [sl, #192]	; 0xc0
 801eaf6:	f8c5 4764 	str.w	r4, [r5, #1892]	; 0x764
 801eafa:	e9da 3131 	ldrd	r3, r1, [sl, #196]	; 0xc4
 801eafe:	ed9f 7bb2 	vldr	d7, [pc, #712]	; 801edc8 <MotionGR_Update+0x22f0>
 801eb02:	ea02 0141 	and.w	r1, r2, r1, lsl #1
 801eb06:	eb01 7163 	add.w	r1, r1, r3, asr #29
 801eb0a:	ea02 0343 	and.w	r3, r2, r3, lsl #1
 801eb0e:	eb03 7360 	add.w	r3, r3, r0, asr #29
 801eb12:	ea02 0240 	and.w	r2, r2, r0, lsl #1
 801eb16:	e9ca 3131 	strd	r3, r1, [sl, #196]	; 0xc4
 801eb1a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801eb1e:	f8ca 20c0 	str.w	r2, [sl, #192]	; 0xc0
 801eb22:	f7ff bbd9 	b.w	801e2d8 <MotionGR_Update+0x1800>
 801eb26:	f8d5 4290 	ldr.w	r4, [r5, #656]	; 0x290
 801eb2a:	3401      	adds	r4, #1
 801eb2c:	2332      	movs	r3, #50	; 0x32
 801eb2e:	2c01      	cmp	r4, #1
 801eb30:	e9c5 43a4 	strd	r4, r3, [r5, #656]	; 0x290
 801eb34:	f340 81d6 	ble.w	801eee4 <MotionGR_Update+0x240c>
 801eb38:	f8d5 8288 	ldr.w	r8, [r5, #648]	; 0x288
 801eb3c:	f1b8 0f01 	cmp.w	r8, #1
 801eb40:	f000 82a1 	beq.w	801f086 <MotionGR_Update+0x25ae>
 801eb44:	4640      	mov	r0, r8
 801eb46:	f7e1 fcbd 	bl	80004c4 <__aeabi_i2d>
 801eb4a:	e9d5 23a0 	ldrd	r2, r3, [r5, #640]	; 0x280
 801eb4e:	f7e1 ff95 	bl	8000a7c <__aeabi_dcmplt>
 801eb52:	2800      	cmp	r0, #0
 801eb54:	f040 828c 	bne.w	801f070 <MotionGR_Update+0x2598>
 801eb58:	f1c8 0300 	rsb	r3, r8, #0
 801eb5c:	2c04      	cmp	r4, #4
 801eb5e:	f8c5 3288 	str.w	r3, [r5, #648]	; 0x288
 801eb62:	f040 81bf 	bne.w	801eee4 <MotionGR_Update+0x240c>
 801eb66:	2300      	movs	r3, #0
 801eb68:	2402      	movs	r4, #2
 801eb6a:	f8c5 3290 	str.w	r3, [r5, #656]	; 0x290
 801eb6e:	2303      	movs	r3, #3
 801eb70:	f8c5 4278 	str.w	r4, [r5, #632]	; 0x278
 801eb74:	9338      	str	r3, [sp, #224]	; 0xe0
 801eb76:	f7ff b820 	b.w	801dbba <MotionGR_Update+0x10e2>
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	f040 81aa 	bne.w	801eed4 <MotionGR_Update+0x23fc>
 801eb80:	2e00      	cmp	r6, #0
 801eb82:	f47e abf6 	bne.w	801d372 <MotionGR_Update+0x89a>
 801eb86:	4b98      	ldr	r3, [pc, #608]	; (801ede8 <MotionGR_Update+0x2310>)
 801eb88:	f8c5 04ec 	str.w	r0, [r5, #1260]	; 0x4ec
 801eb8c:	429c      	cmp	r4, r3
 801eb8e:	f47e abf0 	bne.w	801d372 <MotionGR_Update+0x89a>
 801eb92:	2202      	movs	r2, #2
 801eb94:	23c8      	movs	r3, #200	; 0xc8
 801eb96:	f8c5 24ec 	str.w	r2, [r5, #1260]	; 0x4ec
 801eb9a:	f8c5 34f0 	str.w	r3, [r5, #1264]	; 0x4f0
 801eb9e:	f7fe bbe8 	b.w	801d372 <MotionGR_Update+0x89a>
 801eba2:	a38b      	add	r3, pc, #556	; (adr r3, 801edd0 <MotionGR_Update+0x22f8>)
 801eba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ebac:	f7e1 ff84 	bl	8000ab8 <__aeabi_dcmpgt>
 801ebb0:	2800      	cmp	r0, #0
 801ebb2:	f040 817f 	bne.w	801eeb4 <MotionGR_Update+0x23dc>
 801ebb6:	f8d5 7768 	ldr.w	r7, [r5, #1896]	; 0x768
 801ebba:	ea57 0b06 	orrs.w	fp, r7, r6
 801ebbe:	f47f ae71 	bne.w	801e8a4 <MotionGR_Update+0x1dcc>
 801ebc2:	f8d5 976c 	ldr.w	r9, [r5, #1900]	; 0x76c
 801ebc6:	f1b9 0f00 	cmp.w	r9, #0
 801ebca:	f040 80c8 	bne.w	801ed5e <MotionGR_Update+0x2286>
 801ebce:	a382      	add	r3, pc, #520	; (adr r3, 801edd8 <MotionGR_Update+0x2300>)
 801ebd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ebd8:	f7e1 ff6e 	bl	8000ab8 <__aeabi_dcmpgt>
 801ebdc:	2800      	cmp	r0, #0
 801ebde:	f43f ae6f 	beq.w	801e8c0 <MotionGR_Update+0x1de8>
 801ebe2:	464f      	mov	r7, r9
 801ebe4:	2201      	movs	r2, #1
 801ebe6:	23c8      	movs	r3, #200	; 0xc8
 801ebe8:	4297      	cmp	r7, r2
 801ebea:	f8c5 276c 	str.w	r2, [r5, #1900]	; 0x76c
 801ebee:	f8c5 3770 	str.w	r3, [r5, #1904]	; 0x770
 801ebf2:	f000 8200 	beq.w	801eff6 <MotionGR_Update+0x251e>
 801ebf6:	f04f 0b00 	mov.w	fp, #0
 801ebfa:	a371      	add	r3, pc, #452	; (adr r3, 801edc0 <MotionGR_Update+0x22e8>)
 801ebfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec00:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ec04:	f7e1 ff3a 	bl	8000a7c <__aeabi_dcmplt>
 801ec08:	2800      	cmp	r0, #0
 801ec0a:	f43f ae59 	beq.w	801e8c0 <MotionGR_Update+0x1de8>
 801ec0e:	2300      	movs	r3, #0
 801ec10:	f8c5 376c 	str.w	r3, [r5, #1900]	; 0x76c
 801ec14:	f04f 0b01 	mov.w	fp, #1
 801ec18:	e652      	b.n	801e8c0 <MotionGR_Update+0x1de8>
 801ec1a:	f04f 0b00 	mov.w	fp, #0
 801ec1e:	e9d5 89d2 	ldrd	r8, r9, [r5, #840]	; 0x348
 801ec22:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 801edf0 <MotionGR_Update+0x2318>
 801ec26:	465c      	mov	r4, fp
 801ec28:	e006      	b.n	801ec38 <MotionGR_Update+0x2160>
 801ec2a:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801ec2e:	3401      	adds	r4, #1
 801ec30:	2c19      	cmp	r4, #25
 801ec32:	f10a 0a10 	add.w	sl, sl, #16
 801ec36:	d031      	beq.n	801ec9c <MotionGR_Update+0x21c4>
 801ec38:	e9da 6700 	ldrd	r6, r7, [sl]
 801ec3c:	464b      	mov	r3, r9
 801ec3e:	4642      	mov	r2, r8
 801ec40:	4630      	mov	r0, r6
 801ec42:	4639      	mov	r1, r7
 801ec44:	f7e1 ff1a 	bl	8000a7c <__aeabi_dcmplt>
 801ec48:	0063      	lsls	r3, r4, #1
 801ec4a:	2800      	cmp	r0, #0
 801ec4c:	d0ed      	beq.n	801ec2a <MotionGR_Update+0x2152>
 801ec4e:	46b0      	mov	r8, r6
 801ec50:	46b9      	mov	r9, r7
 801ec52:	46a3      	mov	fp, r4
 801ec54:	e7eb      	b.n	801ec2e <MotionGR_Update+0x2156>
 801ec56:	2300      	movs	r3, #0
 801ec58:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801ec5c:	e9d5 67d2 	ldrd	r6, r7, [r5, #840]	; 0x348
 801ec60:	f5a4 74d8 	sub.w	r4, r4, #432	; 0x1b0
 801ec64:	469a      	mov	sl, r3
 801ec66:	469b      	mov	fp, r3
 801ec68:	e008      	b.n	801ec7c <MotionGR_Update+0x21a4>
 801ec6a:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801ec6e:	f10a 0a01 	add.w	sl, sl, #1
 801ec72:	f1ba 0f19 	cmp.w	sl, #25
 801ec76:	f104 0410 	add.w	r4, r4, #16
 801ec7a:	d011      	beq.n	801eca0 <MotionGR_Update+0x21c8>
 801ec7c:	e9d4 8900 	ldrd	r8, r9, [r4]
 801ec80:	463b      	mov	r3, r7
 801ec82:	4632      	mov	r2, r6
 801ec84:	4640      	mov	r0, r8
 801ec86:	4649      	mov	r1, r9
 801ec88:	f7e1 ff16 	bl	8000ab8 <__aeabi_dcmpgt>
 801ec8c:	ea4f 034a 	mov.w	r3, sl, lsl #1
 801ec90:	2800      	cmp	r0, #0
 801ec92:	d0ea      	beq.n	801ec6a <MotionGR_Update+0x2192>
 801ec94:	4646      	mov	r6, r8
 801ec96:	464f      	mov	r7, r9
 801ec98:	46d3      	mov	fp, sl
 801ec9a:	e7e8      	b.n	801ec6e <MotionGR_Update+0x2196>
 801ec9c:	9316      	str	r3, [sp, #88]	; 0x58
 801ec9e:	e4ec      	b.n	801e67a <MotionGR_Update+0x1ba2>
 801eca0:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
 801eca4:	930c      	str	r3, [sp, #48]	; 0x30
 801eca6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801ecaa:	e4cd      	b.n	801e648 <MotionGR_Update+0x1b70>
 801ecac:	2300      	movs	r3, #0
 801ecae:	e9d5 89d4 	ldrd	r8, r9, [r5, #848]	; 0x350
 801ecb2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 801edf0 <MotionGR_Update+0x2318>
 801ecb6:	9300      	str	r3, [sp, #0]
 801ecb8:	461c      	mov	r4, r3
 801ecba:	f04f 0a01 	mov.w	sl, #1
 801ecbe:	e007      	b.n	801ecd0 <MotionGR_Update+0x21f8>
 801ecc0:	1c53      	adds	r3, r2, #1
 801ecc2:	3401      	adds	r4, #1
 801ecc4:	2c19      	cmp	r4, #25
 801ecc6:	f10b 0b10 	add.w	fp, fp, #16
 801ecca:	f10a 0a02 	add.w	sl, sl, #2
 801ecce:	d033      	beq.n	801ed38 <MotionGR_Update+0x2260>
 801ecd0:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801ecd4:	4642      	mov	r2, r8
 801ecd6:	464b      	mov	r3, r9
 801ecd8:	4630      	mov	r0, r6
 801ecda:	4639      	mov	r1, r7
 801ecdc:	f7e1 fece 	bl	8000a7c <__aeabi_dcmplt>
 801ece0:	9b00      	ldr	r3, [sp, #0]
 801ece2:	005a      	lsls	r2, r3, #1
 801ece4:	4653      	mov	r3, sl
 801ece6:	2800      	cmp	r0, #0
 801ece8:	d0ea      	beq.n	801ecc0 <MotionGR_Update+0x21e8>
 801ecea:	46b0      	mov	r8, r6
 801ecec:	46b9      	mov	r9, r7
 801ecee:	9400      	str	r4, [sp, #0]
 801ecf0:	e7e7      	b.n	801ecc2 <MotionGR_Update+0x21ea>
 801ecf2:	2300      	movs	r3, #0
 801ecf4:	e9d5 89d4 	ldrd	r8, r9, [r5, #848]	; 0x350
 801ecf8:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 801edf0 <MotionGR_Update+0x2318>
 801ecfc:	9306      	str	r3, [sp, #24]
 801ecfe:	461c      	mov	r4, r3
 801ed00:	f04f 0a01 	mov.w	sl, #1
 801ed04:	e007      	b.n	801ed16 <MotionGR_Update+0x223e>
 801ed06:	1c53      	adds	r3, r2, #1
 801ed08:	3401      	adds	r4, #1
 801ed0a:	2c19      	cmp	r4, #25
 801ed0c:	f10b 0b10 	add.w	fp, fp, #16
 801ed10:	f10a 0a02 	add.w	sl, sl, #2
 801ed14:	d017      	beq.n	801ed46 <MotionGR_Update+0x226e>
 801ed16:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801ed1a:	4642      	mov	r2, r8
 801ed1c:	464b      	mov	r3, r9
 801ed1e:	4630      	mov	r0, r6
 801ed20:	4639      	mov	r1, r7
 801ed22:	f7e1 fec9 	bl	8000ab8 <__aeabi_dcmpgt>
 801ed26:	9b06      	ldr	r3, [sp, #24]
 801ed28:	005a      	lsls	r2, r3, #1
 801ed2a:	4653      	mov	r3, sl
 801ed2c:	2800      	cmp	r0, #0
 801ed2e:	d0ea      	beq.n	801ed06 <MotionGR_Update+0x222e>
 801ed30:	46b0      	mov	r8, r6
 801ed32:	46b9      	mov	r9, r7
 801ed34:	9406      	str	r4, [sp, #24]
 801ed36:	e7e7      	b.n	801ed08 <MotionGR_Update+0x2230>
 801ed38:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801ed3c:	ed93 7bd2 	vldr	d7, [r3, #840]	; 0x348
 801ed40:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ed44:	e4ca      	b.n	801e6dc <MotionGR_Update+0x1c04>
 801ed46:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801ed4a:	ed93 7bd2 	vldr	d7, [r3, #840]	; 0x348
 801ed4e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801ed52:	e4a9      	b.n	801e6a8 <MotionGR_Update+0x1bd0>
 801ed54:	f04f 0b00 	mov.w	fp, #0
 801ed58:	2f01      	cmp	r7, #1
 801ed5a:	f000 8150 	beq.w	801effe <MotionGR_Update+0x2526>
 801ed5e:	f1b9 0f01 	cmp.w	r9, #1
 801ed62:	f47f adad 	bne.w	801e8c0 <MotionGR_Update+0x1de8>
 801ed66:	f1b8 0f00 	cmp.w	r8, #0
 801ed6a:	f43f ada9 	beq.w	801e8c0 <MotionGR_Update+0x1de8>
 801ed6e:	e744      	b.n	801ebfa <MotionGR_Update+0x2122>
 801ed70:	2b02      	cmp	r3, #2
 801ed72:	f43f ad49 	beq.w	801e808 <MotionGR_Update+0x1d30>
 801ed76:	2b03      	cmp	r3, #3
 801ed78:	f47e aafb 	bne.w	801d372 <MotionGR_Update+0x89a>
 801ed7c:	e547      	b.n	801e80e <MotionGR_Update+0x1d36>
 801ed7e:	f8d5 34f0 	ldr.w	r3, [r5, #1264]	; 0x4f0
 801ed82:	9355      	str	r3, [sp, #340]	; 0x154
 801ed84:	2b00      	cmp	r3, #0
 801ed86:	f47e aaf4 	bne.w	801d372 <MotionGR_Update+0x89a>
 801ed8a:	e586      	b.n	801e89a <MotionGR_Update+0x1dc2>
 801ed8c:	ed9d 7b04 	vldr	d7, [sp, #16]
 801ed90:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ed94:	e4a2      	b.n	801e6dc <MotionGR_Update+0x1c04>
 801ed96:	ed9d 7b04 	vldr	d7, [sp, #16]
 801ed9a:	9b00      	ldr	r3, [sp, #0]
 801ed9c:	9306      	str	r3, [sp, #24]
 801ed9e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801eda2:	e481      	b.n	801e6a8 <MotionGR_Update+0x1bd0>
 801eda4:	2c00      	cmp	r4, #0
 801eda6:	f47e af13 	bne.w	801dbd0 <MotionGR_Update+0x10f8>
 801edaa:	f7fe bee7 	b.w	801db7c <MotionGR_Update+0x10a4>
 801edae:	f8c5 4288 	str.w	r4, [r5, #648]	; 0x288
 801edb2:	f7fe b82b 	b.w	801ce0c <MotionGR_Update+0x334>
 801edb6:	46b0      	mov	r8, r6
 801edb8:	46b9      	mov	r9, r7
 801edba:	e5d6      	b.n	801e96a <MotionGR_Update+0x1e92>
 801edbc:	f3af 8000 	nop.w
 801edc0:	eb1c432d 	.word	0xeb1c432d
 801edc4:	3f1a36e2 	.word	0x3f1a36e2
	...
 801edd0:	47ae147b 	.word	0x47ae147b
 801edd4:	3f947ae1 	.word	0x3f947ae1
 801edd8:	bc6a7efa 	.word	0xbc6a7efa
 801eddc:	3f689374 	.word	0x3f689374
 801ede0:	1b4e81b5 	.word	0x1b4e81b5
 801ede4:	3ffffffe 	.word	0x3ffffffe
 801ede8:	000fffff 	.word	0x000fffff
 801edec:	20005b68 	.word	0x20005b68
 801edf0:	20004db8 	.word	0x20004db8
 801edf4:	4646      	mov	r6, r8
 801edf6:	464f      	mov	r7, r9
 801edf8:	e5ac      	b.n	801e954 <MotionGR_Update+0x1e7c>
 801edfa:	46b0      	mov	r8, r6
 801edfc:	46b9      	mov	r9, r7
 801edfe:	e59e      	b.n	801e93e <MotionGR_Update+0x1e66>
 801ee00:	4646      	mov	r6, r8
 801ee02:	464f      	mov	r7, r9
 801ee04:	e590      	b.n	801e928 <MotionGR_Update+0x1e50>
 801ee06:	3e01      	subs	r6, #1
 801ee08:	f8c5 6774 	str.w	r6, [r5, #1908]	; 0x774
 801ee0c:	f7ff ba72 	b.w	801e2f4 <MotionGR_Update+0x181c>
 801ee10:	4642      	mov	r2, r8
 801ee12:	464b      	mov	r3, r9
 801ee14:	4650      	mov	r0, sl
 801ee16:	4659      	mov	r1, fp
 801ee18:	f7e1 fa06 	bl	8000228 <__aeabi_dsub>
 801ee1c:	a3b6      	add	r3, pc, #728	; (adr r3, 801f0f8 <MotionGR_Update+0x2620>)
 801ee1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee22:	f7e1 fe2b 	bl	8000a7c <__aeabi_dcmplt>
 801ee26:	2800      	cmp	r0, #0
 801ee28:	f43f acb8 	beq.w	801e79c <MotionGR_Update+0x1cc4>
 801ee2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ee30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ee34:	f7e1 f9f8 	bl	8000228 <__aeabi_dsub>
 801ee38:	a3af      	add	r3, pc, #700	; (adr r3, 801f0f8 <MotionGR_Update+0x2620>)
 801ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee3e:	f7e1 fe1d 	bl	8000a7c <__aeabi_dcmplt>
 801ee42:	2800      	cmp	r0, #0
 801ee44:	f43f acaa 	beq.w	801e79c <MotionGR_Update+0x1cc4>
 801ee48:	3401      	adds	r4, #1
 801ee4a:	f8c5 44d8 	str.w	r4, [r5, #1240]	; 0x4d8
 801ee4e:	e4a5      	b.n	801e79c <MotionGR_Update+0x1cc4>
 801ee50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801ee54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ee58:	f7e1 fcc8 	bl	80007ec <__aeabi_ddiv>
 801ee5c:	f002 f83c 	bl	8020ed8 <atan>
 801ee60:	f7e1 fe92 	bl	8000b88 <__aeabi_d2f>
 801ee64:	ee07 0a90 	vmov	s15, r0
 801ee68:	eef0 7ae7 	vabs.f32	s15, s15
 801ee6c:	ee17 0a90 	vmov	r0, s15
 801ee70:	f7e1 fb3a 	bl	80004e8 <__aeabi_f2d>
 801ee74:	a3a2      	add	r3, pc, #648	; (adr r3, 801f100 <MotionGR_Update+0x2628>)
 801ee76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee7a:	f7e1 fdff 	bl	8000a7c <__aeabi_dcmplt>
 801ee7e:	2800      	cmp	r0, #0
 801ee80:	f43f aa15 	beq.w	801e2ae <MotionGR_Update+0x17d6>
 801ee84:	f8df a280 	ldr.w	sl, [pc, #640]	; 801f108 <MotionGR_Update+0x2630>
 801ee88:	4b95      	ldr	r3, [pc, #596]	; (801f0e0 <MotionGR_Update+0x2608>)
 801ee8a:	f8da 00c0 	ldr.w	r0, [sl, #192]	; 0xc0
 801ee8e:	e9da 2131 	ldrd	r2, r1, [sl, #196]	; 0xc4
 801ee92:	ea03 0141 	and.w	r1, r3, r1, lsl #1
 801ee96:	eb01 7162 	add.w	r1, r1, r2, asr #29
 801ee9a:	ea03 0242 	and.w	r2, r3, r2, lsl #1
 801ee9e:	ea03 0340 	and.w	r3, r3, r0, lsl #1
 801eea2:	eb02 7260 	add.w	r2, r2, r0, asr #29
 801eea6:	3301      	adds	r3, #1
 801eea8:	e9ca 2131 	strd	r2, r1, [sl, #196]	; 0xc4
 801eeac:	f8ca 30c0 	str.w	r3, [sl, #192]	; 0xc0
 801eeb0:	f7ff ba12 	b.w	801e2d8 <MotionGR_Update+0x1800>
 801eeb4:	2e00      	cmp	r6, #0
 801eeb6:	f47f ae7e 	bne.w	801ebb6 <MotionGR_Update+0x20de>
 801eeba:	f8d5 976c 	ldr.w	r9, [r5, #1900]	; 0x76c
 801eebe:	f8d5 7768 	ldr.w	r7, [r5, #1896]	; 0x768
 801eec2:	23c8      	movs	r3, #200	; 0xc8
 801eec4:	f8c5 3774 	str.w	r3, [r5, #1908]	; 0x774
 801eec8:	46a3      	mov	fp, r4
 801eeca:	f1b9 0f00 	cmp.w	r9, #0
 801eece:	f43f acf4 	beq.w	801e8ba <MotionGR_Update+0x1de2>
 801eed2:	e741      	b.n	801ed58 <MotionGR_Update+0x2280>
 801eed4:	2b01      	cmp	r3, #1
 801eed6:	f47f af4e 	bne.w	801ed76 <MotionGR_Update+0x229e>
 801eeda:	4b82      	ldr	r3, [pc, #520]	; (801f0e4 <MotionGR_Update+0x260c>)
 801eedc:	429c      	cmp	r4, r3
 801eede:	f47e aa48 	bne.w	801d372 <MotionGR_Update+0x89a>
 801eee2:	e656      	b.n	801eb92 <MotionGR_Update+0x20ba>
 801eee4:	f8d5 4278 	ldr.w	r4, [r5, #632]	; 0x278
 801eee8:	e9c5 aba0 	strd	sl, fp, [r5, #640]	; 0x280
 801eeec:	2c00      	cmp	r4, #0
 801eeee:	f43e ae45 	beq.w	801db7c <MotionGR_Update+0x10a4>
 801eef2:	2c01      	cmp	r4, #1
 801eef4:	f47e ae6c 	bne.w	801dbd0 <MotionGR_Update+0x10f8>
 801eef8:	f7fd bf88 	b.w	801ce0c <MotionGR_Update+0x334>
 801eefc:	4c7a      	ldr	r4, [pc, #488]	; (801f0e8 <MotionGR_Update+0x2610>)
 801eefe:	f04f 0900 	mov.w	r9, #0
 801ef02:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ef06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef0a:	f7e1 f98d 	bl	8000228 <__aeabi_dsub>
 801ef0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ef12:	460f      	mov	r7, r1
 801ef14:	2200      	movs	r2, #0
 801ef16:	4619      	mov	r1, r3
 801ef18:	4b74      	ldr	r3, [pc, #464]	; (801f0ec <MotionGR_Update+0x2614>)
 801ef1a:	4606      	mov	r6, r0
 801ef1c:	f7e1 fdcc 	bl	8000ab8 <__aeabi_dcmpgt>
 801ef20:	2800      	cmp	r0, #0
 801ef22:	f43f aa17 	beq.w	801e354 <MotionGR_Update+0x187c>
 801ef26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef28:	f8d5 3760 	ldr.w	r3, [r5, #1888]	; 0x760
 801ef2c:	4639      	mov	r1, r7
 801ef2e:	1ad3      	subs	r3, r2, r3
 801ef30:	4630      	mov	r0, r6
 801ef32:	461c      	mov	r4, r3
 801ef34:	9302      	str	r3, [sp, #8]
 801ef36:	f7e1 fe27 	bl	8000b88 <__aeabi_d2f>
 801ef3a:	ee07 4a90 	vmov	s15, r4
 801ef3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ef42:	ee07 0a90 	vmov	s15, r0
 801ef46:	eef0 7ae7 	vabs.f32	s15, s15
 801ef4a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 801ef4e:	ee17 0a90 	vmov	r0, s15
 801ef52:	f7e1 fac9 	bl	80004e8 <__aeabi_f2d>
 801ef56:	a35a      	add	r3, pc, #360	; (adr r3, 801f0c0 <MotionGR_Update+0x25e8>)
 801ef58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef5c:	f7e1 fdac 	bl	8000ab8 <__aeabi_dcmpgt>
 801ef60:	2800      	cmp	r0, #0
 801ef62:	d041      	beq.n	801efe8 <MotionGR_Update+0x2510>
 801ef64:	4c62      	ldr	r4, [pc, #392]	; (801f0f0 <MotionGR_Update+0x2618>)
 801ef66:	e9d4 6700 	ldrd	r6, r7, [r4]
 801ef6a:	ed94 7b02 	vldr	d7, [r4, #8]
 801ef6e:	4632      	mov	r2, r6
 801ef70:	ec51 0b17 	vmov	r0, r1, d7
 801ef74:	eeb0 8a47 	vmov.f32	s16, s14
 801ef78:	eef0 8a67 	vmov.f32	s17, s15
 801ef7c:	463b      	mov	r3, r7
 801ef7e:	f7e1 fd91 	bl	8000aa4 <__aeabi_dcmpge>
 801ef82:	b908      	cbnz	r0, 801ef88 <MotionGR_Update+0x24b0>
 801ef84:	ec47 6b18 	vmov	d8, r6, r7
 801ef88:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
 801ef8c:	ec53 2b18 	vmov	r2, r3, d8
 801ef90:	4630      	mov	r0, r6
 801ef92:	4639      	mov	r1, r7
 801ef94:	f7e1 fd86 	bl	8000aa4 <__aeabi_dcmpge>
 801ef98:	b908      	cbnz	r0, 801ef9e <MotionGR_Update+0x24c6>
 801ef9a:	ec57 6b18 	vmov	r6, r7, d8
 801ef9e:	ed94 7b06 	vldr	d7, [r4, #24]
 801efa2:	4632      	mov	r2, r6
 801efa4:	ec51 0b17 	vmov	r0, r1, d7
 801efa8:	eeb0 8a47 	vmov.f32	s16, s14
 801efac:	eef0 8a67 	vmov.f32	s17, s15
 801efb0:	463b      	mov	r3, r7
 801efb2:	f7e1 fd77 	bl	8000aa4 <__aeabi_dcmpge>
 801efb6:	b908      	cbnz	r0, 801efbc <MotionGR_Update+0x24e4>
 801efb8:	ec47 6b18 	vmov	d8, r6, r7
 801efbc:	e9d4 6708 	ldrd	r6, r7, [r4, #32]
 801efc0:	ec53 2b18 	vmov	r2, r3, d8
 801efc4:	4630      	mov	r0, r6
 801efc6:	4639      	mov	r1, r7
 801efc8:	f7e1 fd6c 	bl	8000aa4 <__aeabi_dcmpge>
 801efcc:	b908      	cbnz	r0, 801efd2 <MotionGR_Update+0x24fa>
 801efce:	ec57 6b18 	vmov	r6, r7, d8
 801efd2:	a33d      	add	r3, pc, #244	; (adr r3, 801f0c8 <MotionGR_Update+0x25f0>)
 801efd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efd8:	4630      	mov	r0, r6
 801efda:	4639      	mov	r1, r7
 801efdc:	f7e1 fd4e 	bl	8000a7c <__aeabi_dcmplt>
 801efe0:	2800      	cmp	r0, #0
 801efe2:	bf18      	it	ne
 801efe4:	f04f 0b01 	movne.w	fp, #1
 801efe8:	9b02      	ldr	r3, [sp, #8]
 801efea:	2bc8      	cmp	r3, #200	; 0xc8
 801efec:	bfc4      	itt	gt
 801efee:	2300      	movgt	r3, #0
 801eff0:	f8c5 3768 	strgt.w	r3, [r5, #1896]	; 0x768
 801eff4:	e6b3      	b.n	801ed5e <MotionGR_Update+0x2286>
 801eff6:	46b9      	mov	r9, r7
 801eff8:	4698      	mov	r8, r3
 801effa:	f04f 0b00 	mov.w	fp, #0
 801effe:	4c3a      	ldr	r4, [pc, #232]	; (801f0e8 <MotionGR_Update+0x2610>)
 801f000:	e77f      	b.n	801ef02 <MotionGR_Update+0x242a>
 801f002:	2c01      	cmp	r4, #1
 801f004:	f47f ac57 	bne.w	801e8b6 <MotionGR_Update+0x1dde>
 801f008:	a331      	add	r3, pc, #196	; (adr r3, 801f0d0 <MotionGR_Update+0x25f8>)
 801f00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f00e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f012:	f7e1 fd51 	bl	8000ab8 <__aeabi_dcmpgt>
 801f016:	2800      	cmp	r0, #0
 801f018:	f47f ade4 	bne.w	801ebe4 <MotionGR_Update+0x210c>
 801f01c:	4683      	mov	fp, r0
 801f01e:	e44c      	b.n	801e8ba <MotionGR_Update+0x1de2>
 801f020:	a32d      	add	r3, pc, #180	; (adr r3, 801f0d8 <MotionGR_Update+0x2600>)
 801f022:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f026:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f02a:	f7e1 fd45 	bl	8000ab8 <__aeabi_dcmpgt>
 801f02e:	2800      	cmp	r0, #0
 801f030:	f47f a97f 	bne.w	801e332 <MotionGR_Update+0x185a>
 801f034:	f8d5 776c 	ldr.w	r7, [r5, #1900]	; 0x76c
 801f038:	2f00      	cmp	r7, #0
 801f03a:	d0e2      	beq.n	801f002 <MotionGR_Update+0x252a>
 801f03c:	46b9      	mov	r9, r7
 801f03e:	e68e      	b.n	801ed5e <MotionGR_Update+0x2286>
 801f040:	e9d2 8900 	ldrd	r8, r9, [r2]
 801f044:	f04f 0b00 	mov.w	fp, #0
 801f048:	465c      	mov	r4, fp
 801f04a:	4692      	mov	sl, r2
 801f04c:	e8fa 6702 	ldrd	r6, r7, [sl], #8
 801f050:	4642      	mov	r2, r8
 801f052:	464b      	mov	r3, r9
 801f054:	4630      	mov	r0, r6
 801f056:	4639      	mov	r1, r7
 801f058:	f7e1 fd10 	bl	8000a7c <__aeabi_dcmplt>
 801f05c:	b110      	cbz	r0, 801f064 <MotionGR_Update+0x258c>
 801f05e:	46b0      	mov	r8, r6
 801f060:	46b9      	mov	r9, r7
 801f062:	46a3      	mov	fp, r4
 801f064:	3401      	adds	r4, #1
 801f066:	2c96      	cmp	r4, #150	; 0x96
 801f068:	d1f0      	bne.n	801f04c <MotionGR_Update+0x2574>
 801f06a:	e516      	b.n	801ea9a <MotionGR_Update+0x1fc2>
 801f06c:	4610      	mov	r0, r2
 801f06e:	e498      	b.n	801e9a2 <MotionGR_Update+0x1eca>
 801f070:	2300      	movs	r3, #0
 801f072:	e9c5 aba0 	strd	sl, fp, [r5, #640]	; 0x280
 801f076:	f8c5 3278 	str.w	r3, [r5, #632]	; 0x278
 801f07a:	f8c5 3290 	str.w	r3, [r5, #656]	; 0x290
 801f07e:	f8c5 3288 	str.w	r3, [r5, #648]	; 0x288
 801f082:	f7fe bd7b 	b.w	801db7c <MotionGR_Update+0x10a4>
 801f086:	e9d5 01a0 	ldrd	r0, r1, [r5, #640]	; 0x280
 801f08a:	4b1a      	ldr	r3, [pc, #104]	; (801f0f4 <MotionGR_Update+0x261c>)
 801f08c:	2200      	movs	r2, #0
 801f08e:	f7e1 fcf5 	bl	8000a7c <__aeabi_dcmplt>
 801f092:	2800      	cmp	r0, #0
 801f094:	d1ec      	bne.n	801f070 <MotionGR_Update+0x2598>
 801f096:	f04f 33ff 	mov.w	r3, #4294967295
 801f09a:	e55f      	b.n	801eb5c <MotionGR_Update+0x2084>
 801f09c:	f8d5 3340 	ldr.w	r3, [r5, #832]	; 0x340
 801f0a0:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801f0a4:	ed93 7bd4 	vldr	d7, [r3, #848]	; 0x350
 801f0a8:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 801f0ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f0b0:	ed94 7bd2 	vldr	d7, [r4, #840]	; 0x348
 801f0b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801f0b8:	f7ff bb19 	b.w	801e6ee <MotionGR_Update+0x1c16>
 801f0bc:	f3af 8000 	nop.w
 801f0c0:	47ae147b 	.word	0x47ae147b
 801f0c4:	3fb47ae1 	.word	0x3fb47ae1
 801f0c8:	47ae147b 	.word	0x47ae147b
 801f0cc:	3fa47ae1 	.word	0x3fa47ae1
 801f0d0:	bc6a7efa 	.word	0xbc6a7efa
 801f0d4:	3f689374 	.word	0x3f689374
 801f0d8:	9999999a 	.word	0x9999999a
 801f0dc:	3fa99999 	.word	0x3fa99999
 801f0e0:	3ffffffe 	.word	0x3ffffffe
 801f0e4:	000fffff 	.word	0x000fffff
 801f0e8:	200051c8 	.word	0x200051c8
 801f0ec:	40240000 	.word	0x40240000
 801f0f0:	20005750 	.word	0x20005750
 801f0f4:	3ff00000 	.word	0x3ff00000
 801f0f8:	66666666 	.word	0x66666666
 801f0fc:	3fd66666 	.word	0x3fd66666
 801f100:	be6956ee 	.word	0xbe6956ee
 801f104:	3fea3fef 	.word	0x3fea3fef
 801f108:	20005b68 	.word	0x20005b68
 801f10c:	00000000 	.word	0x00000000

0801f110 <MotionID_Update>:
 801f110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f114:	4cc0      	ldr	r4, [pc, #768]	; (801f418 <MotionID_Update+0x308>)
 801f116:	7823      	ldrb	r3, [r4, #0]
 801f118:	ed2d 8b06 	vpush	{d8-d10}
 801f11c:	460d      	mov	r5, r1
 801f11e:	b923      	cbnz	r3, 801f12a <MotionID_Update+0x1a>
 801f120:	702b      	strb	r3, [r5, #0]
 801f122:	ecbd 8b06 	vpop	{d8-d10}
 801f126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f12a:	7866      	ldrb	r6, [r4, #1]
 801f12c:	f8d0 a000 	ldr.w	sl, [r0]
 801f130:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801f134:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801f138:	b316      	cbz	r6, 801f180 <MotionID_Update+0x70>
 801f13a:	78a2      	ldrb	r2, [r4, #2]
 801f13c:	4bb7      	ldr	r3, [pc, #732]	; (801f41c <MotionID_Update+0x30c>)
 801f13e:	1c57      	adds	r7, r2, #1
 801f140:	fba3 1307 	umull	r1, r3, r3, r7
 801f144:	095b      	lsrs	r3, r3, #5
 801f146:	78e1      	ldrb	r1, [r4, #3]
 801f148:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f14c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f150:	eba7 1303 	sub.w	r3, r7, r3, lsl #4
 801f154:	1c4e      	adds	r6, r1, #1
 801f156:	2001      	movs	r0, #1
 801f158:	f8c2 a004 	str.w	sl, [r2, #4]
 801f15c:	f8c2 90c4 	str.w	r9, [r2, #196]	; 0xc4
 801f160:	f8c2 8184 	str.w	r8, [r2, #388]	; 0x184
 801f164:	b2df      	uxtb	r7, r3
 801f166:	f006 061f 	and.w	r6, r6, #31
 801f16a:	7060      	strb	r0, [r4, #1]
 801f16c:	b321      	cbz	r1, 801f1b8 <MotionID_Update+0xa8>
 801f16e:	f894 3244 	ldrb.w	r3, [r4, #580]	; 0x244
 801f172:	702b      	strb	r3, [r5, #0]
 801f174:	ecbd 8b06 	vpop	{d8-d10}
 801f178:	70a7      	strb	r7, [r4, #2]
 801f17a:	70e6      	strb	r6, [r4, #3]
 801f17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f180:	4631      	mov	r1, r6
 801f182:	22bc      	movs	r2, #188	; 0xbc
 801f184:	f104 0008 	add.w	r0, r4, #8
 801f188:	f003 fe02 	bl	8022d90 <memset>
 801f18c:	4631      	mov	r1, r6
 801f18e:	22bc      	movs	r2, #188	; 0xbc
 801f190:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 801f194:	f003 fdfc 	bl	8022d90 <memset>
 801f198:	4631      	mov	r1, r6
 801f19a:	22bc      	movs	r2, #188	; 0xbc
 801f19c:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 801f1a0:	f003 fdf6 	bl	8022d90 <memset>
 801f1a4:	2301      	movs	r3, #1
 801f1a6:	461e      	mov	r6, r3
 801f1a8:	f8c4 a004 	str.w	sl, [r4, #4]
 801f1ac:	f8c4 90c4 	str.w	r9, [r4, #196]	; 0xc4
 801f1b0:	f8c4 8184 	str.w	r8, [r4, #388]	; 0x184
 801f1b4:	7063      	strb	r3, [r4, #1]
 801f1b6:	461f      	mov	r7, r3
 801f1b8:	4b99      	ldr	r3, [pc, #612]	; (801f420 <MotionID_Update+0x310>)
 801f1ba:	ed9f 8a9a 	vldr	s16, [pc, #616]	; 801f424 <MotionID_Update+0x314>
 801f1be:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 801f1c2:	eef0 8a48 	vmov.f32	s17, s16
 801f1c6:	eeb0 9a48 	vmov.f32	s18, s16
 801f1ca:	eef0 9a48 	vmov.f32	s19, s16
 801f1ce:	eeb0 aa48 	vmov.f32	s20, s16
 801f1d2:	eeb0 6a48 	vmov.f32	s12, s16
 801f1d6:	4610      	mov	r0, r2
 801f1d8:	f503 71c0 	add.w	r1, r3, #384	; 0x180
 801f1dc:	ecf3 6a01 	vldmia	r3!, {s13}
 801f1e0:	ecb2 7a01 	vldmia	r2!, {s14}
 801f1e4:	ecf1 7a01 	vldmia	r1!, {s15}
 801f1e8:	4283      	cmp	r3, r0
 801f1ea:	eea6 9aa6 	vfma.f32	s18, s13, s13
 801f1ee:	eee7 8a07 	vfma.f32	s17, s14, s14
 801f1f2:	eea7 8aa7 	vfma.f32	s16, s15, s15
 801f1f6:	ee36 6a26 	vadd.f32	s12, s12, s13
 801f1fa:	ee3a aa07 	vadd.f32	s20, s20, s14
 801f1fe:	ee79 9aa7 	vadd.f32	s19, s19, s15
 801f202:	d1eb      	bne.n	801f1dc <MotionID_Update+0xcc>
 801f204:	ee16 0a10 	vmov	r0, s12
 801f208:	f7e1 f96e 	bl	80004e8 <__aeabi_f2d>
 801f20c:	a372      	add	r3, pc, #456	; (adr r3, 801f3d8 <MotionID_Update+0x2c8>)
 801f20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f212:	f7e1 f9c1 	bl	8000598 <__aeabi_dmul>
 801f216:	f7e1 fcb7 	bl	8000b88 <__aeabi_d2f>
 801f21a:	4603      	mov	r3, r0
 801f21c:	ee1a 0a10 	vmov	r0, s20
 801f220:	ee0a 3a10 	vmov	s20, r3
 801f224:	f7e1 f960 	bl	80004e8 <__aeabi_f2d>
 801f228:	a36b      	add	r3, pc, #428	; (adr r3, 801f3d8 <MotionID_Update+0x2c8>)
 801f22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f22e:	f7e1 f9b3 	bl	8000598 <__aeabi_dmul>
 801f232:	f7e1 fca9 	bl	8000b88 <__aeabi_d2f>
 801f236:	4603      	mov	r3, r0
 801f238:	ee19 0a90 	vmov	r0, s19
 801f23c:	ee09 3a90 	vmov	s19, r3
 801f240:	f7e1 f952 	bl	80004e8 <__aeabi_f2d>
 801f244:	a364      	add	r3, pc, #400	; (adr r3, 801f3d8 <MotionID_Update+0x2c8>)
 801f246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f24a:	f7e1 f9a5 	bl	8000598 <__aeabi_dmul>
 801f24e:	f7e1 fc9b 	bl	8000b88 <__aeabi_d2f>
 801f252:	4603      	mov	r3, r0
 801f254:	ee19 0a10 	vmov	r0, s18
 801f258:	ee09 3a10 	vmov	s18, r3
 801f25c:	f7e1 f944 	bl	80004e8 <__aeabi_f2d>
 801f260:	a35d      	add	r3, pc, #372	; (adr r3, 801f3d8 <MotionID_Update+0x2c8>)
 801f262:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f266:	f7e1 f997 	bl	8000598 <__aeabi_dmul>
 801f26a:	ee6a 7a0a 	vmul.f32	s15, s20, s20
 801f26e:	4680      	mov	r8, r0
 801f270:	ee17 0a90 	vmov	r0, s15
 801f274:	4689      	mov	r9, r1
 801f276:	f7e1 f937 	bl	80004e8 <__aeabi_f2d>
 801f27a:	4602      	mov	r2, r0
 801f27c:	460b      	mov	r3, r1
 801f27e:	4640      	mov	r0, r8
 801f280:	4649      	mov	r1, r9
 801f282:	f7e0 ffd1 	bl	8000228 <__aeabi_dsub>
 801f286:	f7e1 fc7f 	bl	8000b88 <__aeabi_d2f>
 801f28a:	4603      	mov	r3, r0
 801f28c:	ee18 0a90 	vmov	r0, s17
 801f290:	ee08 3a90 	vmov	s17, r3
 801f294:	f7e1 f928 	bl	80004e8 <__aeabi_f2d>
 801f298:	a34f      	add	r3, pc, #316	; (adr r3, 801f3d8 <MotionID_Update+0x2c8>)
 801f29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f29e:	f7e1 f97b 	bl	8000598 <__aeabi_dmul>
 801f2a2:	ee69 7aa9 	vmul.f32	s15, s19, s19
 801f2a6:	4680      	mov	r8, r0
 801f2a8:	ee17 0a90 	vmov	r0, s15
 801f2ac:	4689      	mov	r9, r1
 801f2ae:	f7e1 f91b 	bl	80004e8 <__aeabi_f2d>
 801f2b2:	4602      	mov	r2, r0
 801f2b4:	460b      	mov	r3, r1
 801f2b6:	4640      	mov	r0, r8
 801f2b8:	4649      	mov	r1, r9
 801f2ba:	f7e0 ffb5 	bl	8000228 <__aeabi_dsub>
 801f2be:	f7e1 fc63 	bl	8000b88 <__aeabi_d2f>
 801f2c2:	ee07 0a90 	vmov	s15, r0
 801f2c6:	ee18 0a10 	vmov	r0, s16
 801f2ca:	ee78 8aa7 	vadd.f32	s17, s17, s15
 801f2ce:	f7e1 f90b 	bl	80004e8 <__aeabi_f2d>
 801f2d2:	a341      	add	r3, pc, #260	; (adr r3, 801f3d8 <MotionID_Update+0x2c8>)
 801f2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2d8:	f7e1 f95e 	bl	8000598 <__aeabi_dmul>
 801f2dc:	ee69 7a09 	vmul.f32	s15, s18, s18
 801f2e0:	4680      	mov	r8, r0
 801f2e2:	ee17 0a90 	vmov	r0, s15
 801f2e6:	4689      	mov	r9, r1
 801f2e8:	f7e1 f8fe 	bl	80004e8 <__aeabi_f2d>
 801f2ec:	4602      	mov	r2, r0
 801f2ee:	460b      	mov	r3, r1
 801f2f0:	4640      	mov	r0, r8
 801f2f2:	4649      	mov	r1, r9
 801f2f4:	f7e0 ff98 	bl	8000228 <__aeabi_dsub>
 801f2f8:	f7e1 fc46 	bl	8000b88 <__aeabi_d2f>
 801f2fc:	ee07 0a90 	vmov	s15, r0
 801f300:	ee78 8aa7 	vadd.f32	s17, s17, s15
 801f304:	ee18 0a90 	vmov	r0, s17
 801f308:	f7e1 f8ee 	bl	80004e8 <__aeabi_f2d>
 801f30c:	a334      	add	r3, pc, #208	; (adr r3, 801f3e0 <MotionID_Update+0x2d0>)
 801f30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f312:	4680      	mov	r8, r0
 801f314:	4689      	mov	r9, r1
 801f316:	f7e1 fbb1 	bl	8000a7c <__aeabi_dcmplt>
 801f31a:	b118      	cbz	r0, 801f324 <MotionID_Update+0x214>
 801f31c:	2300      	movs	r3, #0
 801f31e:	f884 3244 	strb.w	r3, [r4, #580]	; 0x244
 801f322:	e726      	b.n	801f172 <MotionID_Update+0x62>
 801f324:	a330      	add	r3, pc, #192	; (adr r3, 801f3e8 <MotionID_Update+0x2d8>)
 801f326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f32a:	4640      	mov	r0, r8
 801f32c:	4649      	mov	r1, r9
 801f32e:	f7e1 fba5 	bl	8000a7c <__aeabi_dcmplt>
 801f332:	2800      	cmp	r0, #0
 801f334:	d140      	bne.n	801f3b8 <MotionID_Update+0x2a8>
 801f336:	a32e      	add	r3, pc, #184	; (adr r3, 801f3f0 <MotionID_Update+0x2e0>)
 801f338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f33c:	4640      	mov	r0, r8
 801f33e:	4649      	mov	r1, r9
 801f340:	f7e1 fb9c 	bl	8000a7c <__aeabi_dcmplt>
 801f344:	2800      	cmp	r0, #0
 801f346:	d139      	bne.n	801f3bc <MotionID_Update+0x2ac>
 801f348:	a32b      	add	r3, pc, #172	; (adr r3, 801f3f8 <MotionID_Update+0x2e8>)
 801f34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f34e:	4640      	mov	r0, r8
 801f350:	4649      	mov	r1, r9
 801f352:	f7e1 fb93 	bl	8000a7c <__aeabi_dcmplt>
 801f356:	bb98      	cbnz	r0, 801f3c0 <MotionID_Update+0x2b0>
 801f358:	a329      	add	r3, pc, #164	; (adr r3, 801f400 <MotionID_Update+0x2f0>)
 801f35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f35e:	4640      	mov	r0, r8
 801f360:	4649      	mov	r1, r9
 801f362:	f7e1 fb8b 	bl	8000a7c <__aeabi_dcmplt>
 801f366:	bb68      	cbnz	r0, 801f3c4 <MotionID_Update+0x2b4>
 801f368:	a327      	add	r3, pc, #156	; (adr r3, 801f408 <MotionID_Update+0x2f8>)
 801f36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f36e:	4640      	mov	r0, r8
 801f370:	4649      	mov	r1, r9
 801f372:	f7e1 fb83 	bl	8000a7c <__aeabi_dcmplt>
 801f376:	bb38      	cbnz	r0, 801f3c8 <MotionID_Update+0x2b8>
 801f378:	a325      	add	r3, pc, #148	; (adr r3, 801f410 <MotionID_Update+0x300>)
 801f37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f37e:	4640      	mov	r0, r8
 801f380:	4649      	mov	r1, r9
 801f382:	f7e1 fb7b 	bl	8000a7c <__aeabi_dcmplt>
 801f386:	bb08      	cbnz	r0, 801f3cc <MotionID_Update+0x2bc>
 801f388:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f38c:	eef4 8ae7 	vcmpe.f32	s17, s15
 801f390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f394:	d41c      	bmi.n	801f3d0 <MotionID_Update+0x2c0>
 801f396:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801f39a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801f39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3a2:	d417      	bmi.n	801f3d4 <MotionID_Update+0x2c4>
 801f3a4:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 801f3a8:	eef4 8ae7 	vcmpe.f32	s17, s15
 801f3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3b0:	bf4c      	ite	mi
 801f3b2:	2309      	movmi	r3, #9
 801f3b4:	230a      	movpl	r3, #10
 801f3b6:	e7b2      	b.n	801f31e <MotionID_Update+0x20e>
 801f3b8:	2301      	movs	r3, #1
 801f3ba:	e7b0      	b.n	801f31e <MotionID_Update+0x20e>
 801f3bc:	2302      	movs	r3, #2
 801f3be:	e7ae      	b.n	801f31e <MotionID_Update+0x20e>
 801f3c0:	2303      	movs	r3, #3
 801f3c2:	e7ac      	b.n	801f31e <MotionID_Update+0x20e>
 801f3c4:	2304      	movs	r3, #4
 801f3c6:	e7aa      	b.n	801f31e <MotionID_Update+0x20e>
 801f3c8:	2305      	movs	r3, #5
 801f3ca:	e7a8      	b.n	801f31e <MotionID_Update+0x20e>
 801f3cc:	2306      	movs	r3, #6
 801f3ce:	e7a6      	b.n	801f31e <MotionID_Update+0x20e>
 801f3d0:	2307      	movs	r3, #7
 801f3d2:	e7a4      	b.n	801f31e <MotionID_Update+0x20e>
 801f3d4:	2308      	movs	r3, #8
 801f3d6:	e7a2      	b.n	801f31e <MotionID_Update+0x20e>
 801f3d8:	55555555 	.word	0x55555555
 801f3dc:	3f955555 	.word	0x3f955555
 801f3e0:	7110e454 	.word	0x7110e454
 801f3e4:	3ec92a73 	.word	0x3ec92a73
 801f3e8:	eb1c432d 	.word	0xeb1c432d
 801f3ec:	3f1a36e2 	.word	0x3f1a36e2
 801f3f0:	30553261 	.word	0x30553261
 801f3f4:	3f33a92a 	.word	0x3f33a92a
 801f3f8:	eb1c432d 	.word	0xeb1c432d
 801f3fc:	3f4a36e2 	.word	0x3f4a36e2
 801f400:	d2f1a9fc 	.word	0xd2f1a9fc
 801f404:	3f50624d 	.word	0x3f50624d
 801f408:	47ae147b 	.word	0x47ae147b
 801f40c:	3f847ae1 	.word	0x3f847ae1
 801f410:	33333333 	.word	0x33333333
 801f414:	3fd33333 	.word	0x3fd33333
 801f418:	20005c34 	.word	0x20005c34
 801f41c:	aaaaaaab 	.word	0xaaaaaaab
 801f420:	20005c38 	.word	0x20005c38
 801f424:	00000000 	.word	0x00000000

0801f428 <MotionPM_Update>:
 801f428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f42c:	ed2d 8b0e 	vpush	{d8-d14}
 801f430:	4c8b      	ldr	r4, [pc, #556]	; (801f660 <MotionPM_Update+0x238>)
 801f432:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
 801f436:	7823      	ldrb	r3, [r4, #0]
 801f438:	9104      	str	r1, [sp, #16]
 801f43a:	b92b      	cbnz	r3, 801f448 <MotionPM_Update+0x20>
 801f43c:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
 801f440:	ecbd 8b0e 	vpop	{d8-d14}
 801f444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f448:	f894 3760 	ldrb.w	r3, [r4, #1888]	; 0x760
 801f44c:	6807      	ldr	r7, [r0, #0]
 801f44e:	6846      	ldr	r6, [r0, #4]
 801f450:	6885      	ldr	r5, [r0, #8]
 801f452:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801f456:	f502 70eb 	add.w	r0, r2, #470	; 0x1d6
 801f45a:	f202 11d7 	addw	r1, r2, #471	; 0x1d7
 801f45e:	3301      	adds	r3, #1
 801f460:	f502 72ec 	add.w	r2, r2, #472	; 0x1d8
 801f464:	b2db      	uxtb	r3, r3
 801f466:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801f46a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801f46e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f472:	2b32      	cmp	r3, #50	; 0x32
 801f474:	60c7      	str	r7, [r0, #12]
 801f476:	f884 3760 	strb.w	r3, [r4, #1888]	; 0x760
 801f47a:	60ce      	str	r6, [r1, #12]
 801f47c:	60d5      	str	r5, [r2, #12]
 801f47e:	d01f      	beq.n	801f4c0 <MotionPM_Update+0x98>
 801f480:	f8d4 3364 	ldr.w	r3, [r4, #868]	; 0x364
 801f484:	f8d4 2a1c 	ldr.w	r2, [r4, #2588]	; 0xa1c
 801f488:	9904      	ldr	r1, [sp, #16]
 801f48a:	429a      	cmp	r2, r3
 801f48c:	604b      	str	r3, [r1, #4]
 801f48e:	f001 8176 	beq.w	802077e <MotionPM_Update+0x1356>
 801f492:	edd4 7ac8 	vldr	s15, [r4, #800]	; 0x320
 801f496:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801f664 <MotionPM_Update+0x23c>
 801f49a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f49e:	2100      	movs	r1, #0
 801f4a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f4a4:	f884 1a20 	strb.w	r1, [r4, #2592]	; 0xa20
 801f4a8:	ee17 2a90 	vmov	r2, s15
 801f4ac:	9904      	ldr	r1, [sp, #16]
 801f4ae:	700a      	strb	r2, [r1, #0]
 801f4b0:	f8c4 3a1c 	str.w	r3, [r4, #2588]	; 0xa1c
 801f4b4:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
 801f4b8:	ecbd 8b0e 	vpop	{d8-d14}
 801f4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4c0:	ed9f 6a69 	vldr	s12, [pc, #420]	; 801f668 <MotionPM_Update+0x240>
 801f4c4:	eddf 2a69 	vldr	s5, [pc, #420]	; 801f66c <MotionPM_Update+0x244>
 801f4c8:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 801f4cc:	2300      	movs	r3, #0
 801f4ce:	f504 6c20 	add.w	ip, r4, #2560	; 0xa00
 801f4d2:	f604 270c 	addw	r7, r4, #2572	; 0xa0c
 801f4d6:	f604 2604 	addw	r6, r4, #2564	; 0xa04
 801f4da:	f504 6521 	add.w	r5, r4, #2576	; 0xa10
 801f4de:	f604 2008 	addw	r0, r4, #2568	; 0xa08
 801f4e2:	f604 2114 	addw	r1, r4, #2580	; 0xa14
 801f4e6:	933d      	str	r3, [sp, #244]	; 0xf4
 801f4e8:	f884 3760 	strb.w	r3, [r4, #1888]	; 0x760
 801f4ec:	f8ad 30fc 	strh.w	r3, [sp, #252]	; 0xfc
 801f4f0:	9341      	str	r3, [sp, #260]	; 0x104
 801f4f2:	f8ad 310c 	strh.w	r3, [sp, #268]	; 0x10c
 801f4f6:	9345      	str	r3, [sp, #276]	; 0x114
 801f4f8:	f8ad 311c 	strh.w	r3, [sp, #284]	; 0x11c
 801f4fc:	9349      	str	r3, [sp, #292]	; 0x124
 801f4fe:	f8ad 312c 	strh.w	r3, [sp, #300]	; 0x12c
 801f502:	934d      	str	r3, [sp, #308]	; 0x134
 801f504:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 801f508:	9351      	str	r3, [sp, #324]	; 0x144
 801f50a:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
 801f50e:	9355      	str	r3, [sp, #340]	; 0x154
 801f510:	f8ad 315c 	strh.w	r3, [sp, #348]	; 0x15c
 801f514:	9359      	str	r3, [sp, #356]	; 0x164
 801f516:	f8ad 316c 	strh.w	r3, [sp, #364]	; 0x16c
 801f51a:	ed8d 6a40 	vstr	s12, [sp, #256]	; 0x100
 801f51e:	ed8d 6a42 	vstr	s12, [sp, #264]	; 0x108
 801f522:	ed8d 6a44 	vstr	s12, [sp, #272]	; 0x110
 801f526:	ed8d 6a46 	vstr	s12, [sp, #280]	; 0x118
 801f52a:	ed8d 6a48 	vstr	s12, [sp, #288]	; 0x120
 801f52e:	ed8d 6a4a 	vstr	s12, [sp, #296]	; 0x128
 801f532:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 801f536:	ed8d 6a4e 	vstr	s12, [sp, #312]	; 0x138
 801f53a:	ed8d 6a50 	vstr	s12, [sp, #320]	; 0x140
 801f53e:	ed8d 6a52 	vstr	s12, [sp, #328]	; 0x148
 801f542:	ed8d 6a54 	vstr	s12, [sp, #336]	; 0x150
 801f546:	ed8d 6a56 	vstr	s12, [sp, #344]	; 0x158
 801f54a:	ed8d 6a58 	vstr	s12, [sp, #352]	; 0x160
 801f54e:	ed8d 6a5a 	vstr	s12, [sp, #360]	; 0x168
 801f552:	f504 62b8 	add.w	r2, r4, #1472	; 0x5c0
 801f556:	ed8d 6a5c 	vstr	s12, [sp, #368]	; 0x170
 801f55a:	f204 7a64 	addw	sl, r4, #1892	; 0x764
 801f55e:	eddc 3a00 	vldr	s7, [ip]
 801f562:	edd7 6a00 	vldr	s13, [r7]
 801f566:	ed96 4a00 	vldr	s8, [r6]
 801f56a:	ed95 7a00 	vldr	s14, [r5]
 801f56e:	edd0 4a00 	vldr	s9, [r0]
 801f572:	edd1 7a00 	vldr	s15, [r1]
 801f576:	ed9f 3a3e 	vldr	s6, [pc, #248]	; 801f670 <MotionPM_Update+0x248>
 801f57a:	935d      	str	r3, [sp, #372]	; 0x174
 801f57c:	f8ad 317c 	strh.w	r3, [sp, #380]	; 0x17c
 801f580:	9361      	str	r3, [sp, #388]	; 0x184
 801f582:	f8ad 318c 	strh.w	r3, [sp, #396]	; 0x18c
 801f586:	eef0 ba46 	vmov.f32	s23, s12
 801f58a:	ed8d 6a5e 	vstr	s12, [sp, #376]	; 0x178
 801f58e:	ed8d 6a60 	vstr	s12, [sp, #384]	; 0x180
 801f592:	ed8d 6a62 	vstr	s12, [sp, #392]	; 0x188
 801f596:	ed8d 6a64 	vstr	s12, [sp, #400]	; 0x190
 801f59a:	ed82 6a00 	vstr	s12, [r2]
 801f59e:	4653      	mov	r3, sl
 801f5a0:	f504 6e1b 	add.w	lr, r4, #2480	; 0x9b0
 801f5a4:	ed93 5a00 	vldr	s10, [r3]
 801f5a8:	edd3 5a01 	vldr	s11, [r3, #4]
 801f5ac:	ed93 6a02 	vldr	s12, [r3, #8]
 801f5b0:	ee75 5ac4 	vsub.f32	s11, s11, s8
 801f5b4:	ee35 5a63 	vsub.f32	s10, s10, s7
 801f5b8:	ee36 6a64 	vsub.f32	s12, s12, s9
 801f5bc:	ee25 2aa2 	vmul.f32	s4, s11, s5
 801f5c0:	ee65 1a22 	vmul.f32	s3, s10, s5
 801f5c4:	eea5 7a82 	vfma.f32	s14, s11, s4
 801f5c8:	330c      	adds	r3, #12
 801f5ca:	4573      	cmp	r3, lr
 801f5cc:	ee66 5a22 	vmul.f32	s11, s12, s5
 801f5d0:	eee5 6a21 	vfma.f32	s13, s10, s3
 801f5d4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f5d8:	ee66 6a83 	vmul.f32	s13, s13, s6
 801f5dc:	ee27 7a03 	vmul.f32	s14, s14, s6
 801f5e0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801f5e4:	ee26 6a87 	vmul.f32	s12, s13, s14
 801f5e8:	ee73 3aa1 	vadd.f32	s7, s7, s3
 801f5ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 801f5f0:	ee34 4a02 	vadd.f32	s8, s8, s4
 801f5f4:	eee6 ba06 	vfma.f32	s23, s12, s12
 801f5f8:	ee74 4aa5 	vadd.f32	s9, s9, s11
 801f5fc:	d1d2      	bne.n	801f5a4 <MotionPM_Update+0x17c>
 801f5fe:	4b1d      	ldr	r3, [pc, #116]	; (801f674 <MotionPM_Update+0x24c>)
 801f600:	edc2 ba00 	vstr	s23, [r2]
 801f604:	461a      	mov	r2, r3
 801f606:	3b08      	subs	r3, #8
 801f608:	9301      	str	r3, [sp, #4]
 801f60a:	f894 3a18 	ldrb.w	r3, [r4, #2584]	; 0xa18
 801f60e:	f8d4 915c 	ldr.w	r9, [r4, #348]	; 0x15c
 801f612:	9307      	str	r3, [sp, #28]
 801f614:	f502 6381 	add.w	r3, r2, #1032	; 0x408
 801f618:	9306      	str	r3, [sp, #24]
 801f61a:	2300      	movs	r3, #0
 801f61c:	ed86 4a00 	vstr	s8, [r6]
 801f620:	ed85 7a00 	vstr	s14, [r5]
 801f624:	edd2 9a00 	vldr	s19, [r2]
 801f628:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 801f62c:	edd4 8a90 	vldr	s17, [r4, #576]	; 0x240
 801f630:	ed94 ba91 	vldr	s22, [r4, #580]	; 0x244
 801f634:	edd4 aa92 	vldr	s21, [r4, #584]	; 0x248
 801f638:	ed94 aa93 	vldr	s20, [r4, #588]	; 0x24c
 801f63c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801f668 <MotionPM_Update+0x240>
 801f640:	ed9f ca0d 	vldr	s24, [pc, #52]	; 801f678 <MotionPM_Update+0x250>
 801f644:	edcc 3a00 	vstr	s7, [ip]
 801f648:	edc7 6a00 	vstr	s13, [r7]
 801f64c:	edc0 4a00 	vstr	s9, [r0]
 801f650:	edc1 7a00 	vstr	s15, [r1]
 801f654:	f502 6b88 	add.w	fp, r2, #1088	; 0x440
 801f658:	9303      	str	r3, [sp, #12]
 801f65a:	464e      	mov	r6, r9
 801f65c:	e0f3      	b.n	801f846 <MotionPM_Update+0x41e>
 801f65e:	bf00      	nop
 801f660:	20005e80 	.word	0x20005e80
 801f664:	42700000 	.word	0x42700000
 801f668:	00000000 	.word	0x00000000
 801f66c:	3c23d70a 	.word	0x3c23d70a
 801f670:	3f7d70a4 	.word	0x3f7d70a4
 801f674:	20006434 	.word	0x20006434
 801f678:	3f933333 	.word	0x3f933333
 801f67c:	3cde5ab2 	.word	0x3cde5ab2
 801f680:	3eb33333 	.word	0x3eb33333
 801f684:	3c1ba5e3 	.word	0x3c1ba5e3
 801f688:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 801f67c <MotionPM_Update+0x254>
 801f68c:	f8b4 375a 	ldrh.w	r3, [r4, #1882]	; 0x75a
 801f690:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801f694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f698:	bfcc      	ite	gt
 801f69a:	ed5f 7a07 	vldrgt	s15, [pc, #-28]	; 801f680 <MotionPM_Update+0x258>
 801f69e:	ed5f 7a07 	vldrle	s15, [pc, #-28]	; 801f684 <MotionPM_Update+0x25c>
 801f6a2:	f103 0301 	add.w	r3, r3, #1
 801f6a6:	bfc8      	it	gt
 801f6a8:	ee69 7a27 	vmulgt.f32	s15, s18, s15
 801f6ac:	b29b      	uxth	r3, r3
 801f6ae:	2101      	movs	r1, #1
 801f6b0:	2200      	movs	r2, #0
 801f6b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801f6b6:	edcb 7a00 	vstr	s15, [fp]
 801f6ba:	f884 1758 	strb.w	r1, [r4, #1880]	; 0x758
 801f6be:	f8c4 25c4 	str.w	r2, [r4, #1476]	; 0x5c4
 801f6c2:	f240 8471 	bls.w	801ffa8 <MotionPM_Update+0xb80>
 801f6c6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801f6ca:	f8a4 375a 	strh.w	r3, [r4, #1882]	; 0x75a
 801f6ce:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 801f6d2:	48f4      	ldr	r0, [pc, #976]	; (801faa4 <MotionPM_Update+0x67c>)
 801f6d4:	edd4 8ac8 	vldr	s17, [r4, #800]	; 0x320
 801f6d8:	ed94 daca 	vldr	s26, [r4, #808]	; 0x328
 801f6dc:	3b01      	subs	r3, #1
 801f6de:	b2db      	uxtb	r3, r3
 801f6e0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 801f6e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f6e8:	ed92 7a02 	vldr	s14, [r2, #8]
 801f6ec:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801f6f0:	f103 0c60 	add.w	ip, r3, #96	; 0x60
 801f6f4:	ed81 7a58 	vstr	s14, [r1, #352]	; 0x160
 801f6f8:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 801f6fc:	ed9c 5a02 	vldr	s10, [ip, #8]
 801f700:	f106 0806 	add.w	r8, r6, #6
 801f704:	f106 0e05 	add.w	lr, r6, #5
 801f708:	f103 0765 	add.w	r7, r3, #101	; 0x65
 801f70c:	ed82 5a02 	vstr	s10, [r2, #8]
 801f710:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 801f714:	fba0 2908 	umull	r2, r9, r0, r8
 801f718:	fba0 200e 	umull	r2, r0, r0, lr
 801f71c:	edd7 4a02 	vldr	s9, [r7, #8]
 801f720:	eba8 0109 	sub.w	r1, r8, r9
 801f724:	ebae 0200 	sub.w	r2, lr, r0
 801f728:	eb09 0151 	add.w	r1, r9, r1, lsr #1
 801f72c:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 801f730:	edcc 4a02 	vstr	s9, [ip, #8]
 801f734:	0889      	lsrs	r1, r1, #2
 801f736:	0892      	lsrs	r2, r2, #2
 801f738:	f103 0c6a 	add.w	ip, r3, #106	; 0x6a
 801f73c:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 801f740:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801f744:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801f748:	eddc 6a02 	vldr	s13, [ip, #8]
 801f74c:	eba8 0101 	sub.w	r1, r8, r1
 801f750:	ebae 0202 	sub.w	r2, lr, r2
 801f754:	f103 096f 	add.w	r9, r3, #111	; 0x6f
 801f758:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801f75c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801f760:	edc7 6a02 	vstr	s13, [r7, #8]
 801f764:	eb04 0989 	add.w	r9, r4, r9, lsl #2
 801f768:	4419      	add	r1, r3
 801f76a:	441a      	add	r2, r3
 801f76c:	edd9 5a02 	vldr	s11, [r9, #8]
 801f770:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801f774:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f778:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801f77c:	ed91 6a34 	vldr	s12, [r1, #208]	; 0xd0
 801f780:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 801f784:	edcc 5a02 	vstr	s11, [ip, #8]
 801f788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f78c:	eef4 6ae5 	vcmpe.f32	s13, s11
 801f790:	ee76 7a67 	vsub.f32	s15, s12, s15
 801f794:	bfb4      	ite	lt
 801f796:	eef0 3a45 	vmovlt.f32	s7, s10
 801f79a:	eef0 3a47 	vmovge.f32	s7, s14
 801f79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7a2:	bfb4      	ite	lt
 801f7a4:	eeb0 4a65 	vmovlt.f32	s8, s11
 801f7a8:	eeb0 4a66 	vmovge.f32	s8, s13
 801f7ac:	eef4 7ac4 	vcmpe.f32	s15, s8
 801f7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7b4:	eef4 3ae4 	vcmpe.f32	s7, s9
 801f7b8:	bfa8      	it	ge
 801f7ba:	eeb0 4a67 	vmovge.f32	s8, s15
 801f7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7c2:	bfb8      	it	lt
 801f7c4:	eef0 3a64 	vmovlt.f32	s7, s9
 801f7c8:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 801f7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7d0:	edc9 7a02 	vstr	s15, [r9, #8]
 801f7d4:	f100 83bf 	bmi.w	801ff56 <MotionPM_Update+0xb2e>
 801f7d8:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 801f7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7e0:	f100 84a2 	bmi.w	8020128 <MotionPM_Update+0xd00>
 801f7e4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801f7e8:	ed92 7a7b 	vldr	s14, [r2, #492]	; 0x1ec
 801f7ec:	eddf 7aae 	vldr	s15, [pc, #696]	; 801faa8 <MotionPM_Update+0x680>
 801f7f0:	ee36 6a47 	vsub.f32	s12, s12, s14
 801f7f4:	eeb0 6ac6 	vabs.f32	s12, s12
 801f7f8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801f7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f800:	f340 837f 	ble.w	801ff02 <MotionPM_Update+0xada>
 801f804:	f8d4 2330 	ldr.w	r2, [r4, #816]	; 0x330
 801f808:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f80c:	ed83 8a76 	vstr	s16, [r3, #472]	; 0x1d8
 801f810:	1aab      	subs	r3, r5, r2
 801f812:	2b32      	cmp	r3, #50	; 0x32
 801f814:	d909      	bls.n	801f82a <MotionPM_Update+0x402>
 801f816:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
 801f81a:	f8c4 5330 	str.w	r5, [r4, #816]	; 0x330
 801f81e:	2b00      	cmp	r3, #0
 801f820:	bfc4      	itt	gt
 801f822:	f103 33ff 	addgt.w	r3, r3, #4294967295
 801f826:	f8c4 335c 	strgt.w	r3, [r4, #860]	; 0x35c
 801f82a:	9b06      	ldr	r3, [sp, #24]
 801f82c:	f10a 0a0c 	add.w	sl, sl, #12
 801f830:	459a      	cmp	sl, r3
 801f832:	eef0 8a4b 	vmov.f32	s17, s22
 801f836:	eeb0 ba6a 	vmov.f32	s22, s21
 801f83a:	eef0 aa4a 	vmov.f32	s21, s20
 801f83e:	f000 8539 	beq.w	80202b4 <MotionPM_Update+0xe8c>
 801f842:	eeb0 aa6c 	vmov.f32	s20, s25
 801f846:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f84a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801f84e:	9502      	str	r5, [sp, #8]
 801f850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f854:	f105 0501 	add.w	r5, r5, #1
 801f858:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 801f85c:	f280 83f7 	bge.w	802004e <MotionPM_Update+0xc26>
 801f860:	9b01      	ldr	r3, [sp, #4]
 801f862:	ed93 da00 	vldr	s26, [r3]
 801f866:	4b91      	ldr	r3, [pc, #580]	; (801faac <MotionPM_Update+0x684>)
 801f868:	edd3 9a00 	vldr	s19, [r3]
 801f86c:	9b07      	ldr	r3, [sp, #28]
 801f86e:	2b00      	cmp	r3, #0
 801f870:	f040 83a4 	bne.w	801ffbc <MotionPM_Update+0xb94>
 801f874:	edda 7a01 	vldr	s15, [sl, #4]
 801f878:	edda 6a00 	vldr	s13, [sl]
 801f87c:	ed9a 7a02 	vldr	s14, [sl, #8]
 801f880:	498b      	ldr	r1, [pc, #556]	; (801fab0 <MotionPM_Update+0x688>)
 801f882:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f886:	1f08      	subs	r0, r1, #4
 801f888:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801f88c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 801f890:	eee7 7a07 	vfma.f32	s15, s14, s14
 801f894:	eef1 cae7 	vsqrt.f32	s25, s15
 801f898:	f003 fa60 	bl	8022d5c <memmove>
 801f89c:	9802      	ldr	r0, [sp, #8]
 801f89e:	4b85      	ldr	r3, [pc, #532]	; (801fab4 <MotionPM_Update+0x68c>)
 801f8a0:	4a85      	ldr	r2, [pc, #532]	; (801fab8 <MotionPM_Update+0x690>)
 801f8a2:	4601      	mov	r1, r0
 801f8a4:	fba3 1301 	umull	r1, r3, r3, r1
 801f8a8:	095b      	lsrs	r3, r3, #5
 801f8aa:	2164      	movs	r1, #100	; 0x64
 801f8ac:	fb01 0313 	mls	r3, r1, r3, r0
 801f8b0:	4982      	ldr	r1, [pc, #520]	; (801fabc <MotionPM_Update+0x694>)
 801f8b2:	4883      	ldr	r0, [pc, #524]	; (801fac0 <MotionPM_Update+0x698>)
 801f8b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f8b8:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 801f8bc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801f8c0:	fb01 f105 	mul.w	r1, r1, r5
 801f8c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f8c8:	ebb2 0f71 	cmp.w	r2, r1, ror #1
 801f8cc:	edc0 ca00 	vstr	s25, [r0]
 801f8d0:	edc3 7a02 	vstr	s15, [r3, #8]
 801f8d4:	f080 836c 	bcs.w	801ffb0 <MotionPM_Update+0xb88>
 801f8d8:	f5a0 73d6 	sub.w	r3, r0, #428	; 0x1ac
 801f8dc:	ed93 9a00 	vldr	s18, [r3]
 801f8e0:	4f70      	ldr	r7, [pc, #448]	; (801faa4 <MotionPM_Update+0x67c>)
 801f8e2:	ed9f 5a78 	vldr	s10, [pc, #480]	; 801fac4 <MotionPM_Update+0x69c>
 801f8e6:	eddf 7a78 	vldr	s15, [pc, #480]	; 801fac8 <MotionPM_Update+0x6a0>
 801f8ea:	ed9f 7a78 	vldr	s14, [pc, #480]	; 801facc <MotionPM_Update+0x6a4>
 801f8ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 801fad0 <MotionPM_Update+0x6a8>
 801f8f2:	ed9f 6a78 	vldr	s12, [pc, #480]	; 801fad4 <MotionPM_Update+0x6ac>
 801f8f6:	edc4 8a8f 	vstr	s17, [r4, #572]	; 0x23c
 801f8fa:	f106 0c06 	add.w	ip, r6, #6
 801f8fe:	fba7 2306 	umull	r2, r3, r7, r6
 801f902:	fba7 1e0c 	umull	r1, lr, r7, ip
 801f906:	1af2      	subs	r2, r6, r3
 801f908:	ebac 010e 	sub.w	r1, ip, lr
 801f90c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801f910:	eb0e 0e51 	add.w	lr, lr, r1, lsr #1
 801f914:	1d72      	adds	r2, r6, #5
 801f916:	089b      	lsrs	r3, r3, #2
 801f918:	fba7 1002 	umull	r1, r0, r7, r2
 801f91c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801f920:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801f924:	1af3      	subs	r3, r6, r3
 801f926:	1a11      	subs	r1, r2, r0
 801f928:	ebce 0ece 	rsb	lr, lr, lr, lsl #3
 801f92c:	ebac 0e0e 	sub.w	lr, ip, lr
 801f930:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 801f934:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801f938:	edc1 ca2d 	vstr	s25, [r1, #180]	; 0xb4
 801f93c:	0880      	lsrs	r0, r0, #2
 801f93e:	eb04 018e 	add.w	r1, r4, lr, lsl #2
 801f942:	edd1 6a2d 	vldr	s13, [r1, #180]	; 0xb4
 801f946:	4964      	ldr	r1, [pc, #400]	; (801fad8 <MotionPM_Update+0x6b0>)
 801f948:	ed84 ba90 	vstr	s22, [r4, #576]	; 0x240
 801f94c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801f950:	1a10      	subs	r0, r2, r0
 801f952:	ee66 6a85 	vmul.f32	s13, s13, s10
 801f956:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 801f95a:	ed92 5a2d 	vldr	s10, [r2, #180]	; 0xb4
 801f95e:	edc4 aa91 	vstr	s21, [r4, #580]	; 0x244
 801f962:	eef0 4a66 	vmov.f32	s9, s13
 801f966:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801f96a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f96e:	f106 0c04 	add.w	ip, r6, #4
 801f972:	eee5 4a27 	vfma.f32	s9, s10, s15
 801f976:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 801f97a:	fba7 820c 	umull	r8, r2, r7, ip
 801f97e:	edc3 6a34 	vstr	s13, [r3, #208]	; 0xd0
 801f982:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 801f986:	edde 6a34 	vldr	s13, [lr, #208]	; 0xd0
 801f98a:	ed9f 5a54 	vldr	s10, [pc, #336]	; 801fadc <MotionPM_Update+0x6b4>
 801f98e:	ed84 aa92 	vstr	s20, [r4, #584]	; 0x248
 801f992:	ebac 0e02 	sub.w	lr, ip, r2
 801f996:	eb02 025e 	add.w	r2, r2, lr, lsr #1
 801f99a:	eef0 7a64 	vmov.f32	s15, s9
 801f99e:	0892      	lsrs	r2, r2, #2
 801f9a0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801f9a4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801f9a8:	ebac 0202 	sub.w	r2, ip, r2
 801f9ac:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 801f9b0:	ed9c 7a2d 	vldr	s14, [ip, #180]	; 0xb4
 801f9b4:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 801f9b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801f9bc:	f106 0c03 	add.w	ip, r6, #3
 801f9c0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801f9c4:	edd0 6a34 	vldr	s13, [r0, #208]	; 0xd0
 801f9c8:	edc4 ca93 	vstr	s25, [r4, #588]	; 0x24c
 801f9cc:	fba7 e00c 	umull	lr, r0, r7, ip
 801f9d0:	ee27 7a25 	vmul.f32	s14, s14, s11
 801f9d4:	ebac 0e00 	sub.w	lr, ip, r0
 801f9d8:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801f9dc:	eb00 005e 	add.w	r0, r0, lr, lsr #1
 801f9e0:	0880      	lsrs	r0, r0, #2
 801f9e2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801f9e6:	ebac 0000 	sub.w	r0, ip, r0
 801f9ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f9ee:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 801f9f2:	eddc 7a2d 	vldr	s15, [ip, #180]	; 0xb4
 801f9f6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801fae0 <MotionPM_Update+0x6b8>
 801f9fa:	ed83 7a34 	vstr	s14, [r3, #208]	; 0xd0
 801f9fe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fa02:	f106 0c02 	add.w	ip, r6, #2
 801fa06:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fa0a:	ed92 6a34 	vldr	s12, [r2, #208]	; 0xd0
 801fa0e:	eddf 6a35 	vldr	s13, [pc, #212]	; 801fae4 <MotionPM_Update+0x6bc>
 801fa12:	fba7 e20c 	umull	lr, r2, r7, ip
 801fa16:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801fa1a:	ebac 0e02 	sub.w	lr, ip, r2
 801fa1e:	eee6 7a66 	vfms.f32	s15, s12, s13
 801fa22:	eb02 025e 	add.w	r2, r2, lr, lsr #1
 801fa26:	0892      	lsrs	r2, r2, #2
 801fa28:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801fa2c:	ebac 0202 	sub.w	r2, ip, r2
 801fa30:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fa34:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 801fa38:	ed9c 7a2d 	vldr	s14, [ip, #180]	; 0xb4
 801fa3c:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 801fa40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801fa44:	f106 0c01 	add.w	ip, r6, #1
 801fa48:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801fa4c:	ed90 6a34 	vldr	s12, [r0, #208]	; 0xd0
 801fa50:	eddf 6a25 	vldr	s13, [pc, #148]	; 801fae8 <MotionPM_Update+0x6c0>
 801fa54:	eddf 5a25 	vldr	s11, [pc, #148]	; 801faec <MotionPM_Update+0x6c4>
 801fa58:	fba7 070c 	umull	r0, r7, r7, ip
 801fa5c:	ee27 7a05 	vmul.f32	s14, s14, s10
 801fa60:	ebac 0607 	sub.w	r6, ip, r7
 801fa64:	eea6 7a66 	vfms.f32	s14, s12, s13
 801fa68:	eb07 0756 	add.w	r7, r7, r6, lsr #1
 801fa6c:	08be      	lsrs	r6, r7, #2
 801fa6e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 801fa72:	ebac 0606 	sub.w	r6, ip, r6
 801fa76:	ee37 7a27 	vadd.f32	s14, s14, s15
 801fa7a:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 801fa7e:	edd0 7a2d 	vldr	s15, [r0, #180]	; 0xb4
 801fa82:	ed83 7a34 	vstr	s14, [r3, #208]	; 0xd0
 801fa86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801fa8a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fa8e:	ed92 6a34 	vldr	s12, [r2, #208]	; 0xd0
 801fa92:	eddf 6a17 	vldr	s13, [pc, #92]	; 801faf0 <MotionPM_Update+0x6c8>
 801fa96:	f8c4 615c 	str.w	r6, [r4, #348]	; 0x15c
 801fa9a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801fa9e:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 801faa2:	e033      	b.n	801fb0c <MotionPM_Update+0x6e4>
 801faa4:	24924925 	.word	0x24924925
 801faa8:	3ca3d70a 	.word	0x3ca3d70a
 801faac:	20006430 	.word	0x20006430
 801fab0:	2000644c 	.word	0x2000644c
 801fab4:	51eb851f 	.word	0x51eb851f
 801fab8:	051eb851 	.word	0x051eb851
 801fabc:	c28f5c29 	.word	0xc28f5c29
 801fac0:	200065d4 	.word	0x200065d4
 801fac4:	39d71d89 	.word	0x39d71d89
 801fac8:	3998b9a0 	.word	0x3998b9a0
 801facc:	c0b3adc1 	.word	0xc0b3adc1
 801fad0:	bb432de8 	.word	0xbb432de8
 801fad4:	4153e833 	.word	0x4153e833
 801fad8:	200060d4 	.word	0x200060d4
 801fadc:	b9ebfb66 	.word	0xb9ebfb66
 801fae0:	3b4a1e9d 	.word	0x3b4a1e9d
 801fae4:	c1865d78 	.word	0xc1865d78
 801fae8:	41413d47 	.word	0x41413d47
 801faec:	b9bb53ff 	.word	0xb9bb53ff
 801faf0:	c0956c45 	.word	0xc0956c45
 801faf4:	3f422ab1 	.word	0x3f422ab1
 801faf8:	3e4ccccd 	.word	0x3e4ccccd
 801fafc:	3d1ba5e3 	.word	0x3d1ba5e3
 801fb00:	3c59e83e 	.word	0x3c59e83e
 801fb04:	3b59e83e 	.word	0x3b59e83e
 801fb08:	3d4ccccd 	.word	0x3d4ccccd
 801fb0c:	eee6 7a66 	vfms.f32	s15, s12, s13
 801fb10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fb14:	1f08      	subs	r0, r1, #4
 801fb16:	ed5f 6a09 	vldr	s13, [pc, #-36]	; 801faf4 <MotionPM_Update+0x6cc>
 801fb1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fb1e:	ee7d 9a69 	vsub.f32	s19, s26, s19
 801fb22:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 801fb26:	ed92 7a34 	vldr	s14, [r2, #208]	; 0xd0
 801fb2a:	edc0 9ad9 	vstr	s19, [r0, #868]	; 0x364
 801fb2e:	eee7 7a66 	vfms.f32	s15, s14, s13
 801fb32:	22c4      	movs	r2, #196	; 0xc4
 801fb34:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 801fb38:	f003 f910 	bl	8022d5c <memmove>
 801fb3c:	ee7a 7a28 	vadd.f32	s15, s20, s17
 801fb40:	ed5f 6a13 	vldr	s13, [pc, #-76]	; 801faf8 <MotionPM_Update+0x6d0>
 801fb44:	ed9b 7a00 	vldr	s14, [fp]
 801fb48:	ee77 7a8b 	vadd.f32	s15, s15, s22
 801fb4c:	eeb4 7ac9 	vcmpe.f32	s14, s18
 801fb50:	ee77 7aaa 	vadd.f32	s15, s15, s21
 801fb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb58:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 801fb5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801fb60:	edc4 7ac5 	vstr	s15, [r4, #788]	; 0x314
 801fb64:	f53f ad90 	bmi.w	801f688 <MotionPM_Update+0x260>
 801fb68:	f8d4 35c4 	ldr.w	r3, [r4, #1476]	; 0x5c4
 801fb6c:	2b31      	cmp	r3, #49	; 0x31
 801fb6e:	f200 81cf 	bhi.w	801ff10 <MotionPM_Update+0xae8>
 801fb72:	ed5f 7a1e 	vldr	s15, [pc, #-120]	; 801fafc <MotionPM_Update+0x6d4>
 801fb76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb7e:	f280 81c4 	bge.w	801ff0a <MotionPM_Update+0xae2>
 801fb82:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 801fb00 <MotionPM_Update+0x6d8>
 801fb86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb8e:	f300 82e1 	bgt.w	8020154 <MotionPM_Update+0xd2c>
 801fb92:	ed1f 7a24 	vldr	s14, [pc, #-144]	; 801fb04 <MotionPM_Update+0x6dc>
 801fb96:	ed8b 7a00 	vstr	s14, [fp]
 801fb9a:	2200      	movs	r2, #0
 801fb9c:	f884 2758 	strb.w	r2, [r4, #1880]	; 0x758
 801fba0:	3301      	adds	r3, #1
 801fba2:	f240 22ee 	movw	r2, #750	; 0x2ee
 801fba6:	2100      	movs	r1, #0
 801fba8:	4293      	cmp	r3, r2
 801fbaa:	f8a4 175a 	strh.w	r1, [r4, #1882]	; 0x75a
 801fbae:	f241 818c 	bls.w	8020eca <MotionPM_Update+0x1aa2>
 801fbb2:	f8c4 25c4 	str.w	r2, [r4, #1476]	; 0x5c4
 801fbb6:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 801fbba:	2201      	movs	r2, #1
 801fbbc:	1aeb      	subs	r3, r5, r3
 801fbbe:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
 801fbc2:	e626      	b.n	801f812 <MotionPM_Update+0x3ea>
 801fbc4:	2700      	movs	r7, #0
 801fbc6:	9b02      	ldr	r3, [sp, #8]
 801fbc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fbca:	f1a3 0035 	sub.w	r0, r3, #53	; 0x35
 801fbce:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
 801fbd2:	4410      	add	r0, r2
 801fbd4:	4418      	add	r0, r3
 801fbd6:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 801fbda:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801fbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbe2:	d508      	bpl.n	801fbf6 <MotionPM_Update+0x7ce>
 801fbe4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801fbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbec:	bfb4      	ite	lt
 801fbee:	eef0 da48 	vmovlt.f32	s27, s16
 801fbf2:	eef0 da46 	vmovge.f32	s27, s12
 801fbf6:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801fbfa:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801fbfe:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc06:	d506      	bpl.n	801fc16 <MotionPM_Update+0x7ee>
 801fc08:	eef4 dae7 	vcmpe.f32	s27, s15
 801fc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc10:	bfb8      	it	lt
 801fc12:	eef0 da67 	vmovlt.f32	s27, s15
 801fc16:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801fc1a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801fc1e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc26:	d506      	bpl.n	801fc36 <MotionPM_Update+0x80e>
 801fc28:	eef4 dae7 	vcmpe.f32	s27, s15
 801fc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc30:	bfb8      	it	lt
 801fc32:	eef0 da67 	vmovlt.f32	s27, s15
 801fc36:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801fc3a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801fc3e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc46:	d506      	bpl.n	801fc56 <MotionPM_Update+0x82e>
 801fc48:	eef4 dae7 	vcmpe.f32	s27, s15
 801fc4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc50:	bfb8      	it	lt
 801fc52:	eef0 da67 	vmovlt.f32	s27, s15
 801fc56:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801fc5a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801fc5e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc66:	d506      	bpl.n	801fc76 <MotionPM_Update+0x84e>
 801fc68:	eef4 dae7 	vcmpe.f32	s27, s15
 801fc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc70:	bfb8      	it	lt
 801fc72:	eef0 da67 	vmovlt.f32	s27, s15
 801fc76:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801fc7a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801fc7e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc86:	d506      	bpl.n	801fc96 <MotionPM_Update+0x86e>
 801fc88:	eef4 dae7 	vcmpe.f32	s27, s15
 801fc8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc90:	bfb8      	it	lt
 801fc92:	eef0 da67 	vmovlt.f32	s27, s15
 801fc96:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801fc9a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801fc9e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fca6:	d506      	bpl.n	801fcb6 <MotionPM_Update+0x88e>
 801fca8:	eef4 dae7 	vcmpe.f32	s27, s15
 801fcac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcb0:	bfb8      	it	lt
 801fcb2:	eef0 da67 	vmovlt.f32	s27, s15
 801fcb6:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 801fcba:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801fcbe:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fcc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcc6:	d506      	bpl.n	801fcd6 <MotionPM_Update+0x8ae>
 801fcc8:	eef4 dae7 	vcmpe.f32	s27, s15
 801fccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcd0:	bfb8      	it	lt
 801fcd2:	eef0 da67 	vmovlt.f32	s27, s15
 801fcd6:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 801fcda:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801fcde:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fce6:	d506      	bpl.n	801fcf6 <MotionPM_Update+0x8ce>
 801fce8:	eef4 dae7 	vcmpe.f32	s27, s15
 801fcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcf0:	bfb8      	it	lt
 801fcf2:	eef0 da67 	vmovlt.f32	s27, s15
 801fcf6:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 801fcfa:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801fcfe:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd06:	d506      	bpl.n	801fd16 <MotionPM_Update+0x8ee>
 801fd08:	eef4 dae7 	vcmpe.f32	s27, s15
 801fd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd10:	bfb8      	it	lt
 801fd12:	eef0 da67 	vmovlt.f32	s27, s15
 801fd16:	eeb4 7aed 	vcmpe.f32	s14, s27
 801fd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd1e:	f140 80f0 	bpl.w	801ff02 <MotionPM_Update+0xada>
 801fd22:	ee7d 7ac7 	vsub.f32	s15, s27, s14
 801fd26:	ed5f 6a88 	vldr	s13, [pc, #-544]	; 801fb08 <MotionPM_Update+0x6e0>
 801fd2a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd32:	f340 80e6 	ble.w	801ff02 <MotionPM_Update+0xada>
 801fd36:	eef0 7a0e 	vmov.f32	s15, #14	; 0x40700000  3.750
 801fd3a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801fd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd42:	f140 80de 	bpl.w	801ff02 <MotionPM_Update+0xada>
 801fd46:	4ae0      	ldr	r2, [pc, #896]	; (80200c8 <MotionPM_Update+0xca0>)
 801fd48:	edd2 7a00 	vldr	s15, [r2]
 801fd4c:	eef4 7ae8 	vcmpe.f32	s15, s17
 801fd50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd54:	f140 80d5 	bpl.w	801ff02 <MotionPM_Update+0xada>
 801fd58:	1a2b      	subs	r3, r5, r0
 801fd5a:	f5c3 71e8 	rsb	r1, r3, #464	; 0x1d0
 801fd5e:	3101      	adds	r1, #1
 801fd60:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801fd64:	edd1 7a02 	vldr	s15, [r1, #8]
 801fd68:	f5c3 71e9 	rsb	r1, r3, #466	; 0x1d2
 801fd6c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801fd70:	ed91 5a02 	vldr	s10, [r1, #8]
 801fd74:	f5c3 77e9 	rsb	r7, r3, #466	; 0x1d2
 801fd78:	f202 4204 	addw	r2, r2, #1028	; 0x404
 801fd7c:	3701      	adds	r7, #1
 801fd7e:	edc2 da00 	vstr	s27, [r2]
 801fd82:	f5c3 72eb 	rsb	r2, r3, #470	; 0x1d6
 801fd86:	eef4 7ac5 	vcmpe.f32	s15, s10
 801fd8a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 801fd8e:	3201      	adds	r2, #1
 801fd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd94:	edd7 5a02 	vldr	s11, [r7, #8]
 801fd98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fd9c:	bf48      	it	mi
 801fd9e:	eef0 7a45 	vmovmi.f32	s15, s10
 801fda2:	edd2 4a02 	vldr	s9, [r2, #8]
 801fda6:	f5c3 71ea 	rsb	r1, r3, #468	; 0x1d4
 801fdaa:	f5c3 72ea 	rsb	r2, r3, #468	; 0x1d4
 801fdae:	f5c3 73eb 	rsb	r3, r3, #470	; 0x1d6
 801fdb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801fdb6:	eef4 7ae5 	vcmpe.f32	s15, s11
 801fdba:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fdbe:	ed93 7a02 	vldr	s14, [r3, #8]
 801fdc2:	ed92 6a02 	vldr	s12, [r2, #8]
 801fdc6:	9a03      	ldr	r2, [sp, #12]
 801fdc8:	bf4c      	ite	mi
 801fdca:	2301      	movmi	r3, #1
 801fdcc:	2300      	movpl	r3, #0
 801fdce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdd2:	bf48      	it	mi
 801fdd4:	eef0 7a65 	vmovmi.f32	s15, s11
 801fdd8:	f101 0101 	add.w	r1, r1, #1
 801fddc:	eef4 7ac6 	vcmpe.f32	s15, s12
 801fde0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801fde4:	bf48      	it	mi
 801fde6:	2302      	movmi	r3, #2
 801fde8:	edd1 6a02 	vldr	s13, [r1, #8]
 801fdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdf0:	bf48      	it	mi
 801fdf2:	eef0 7a46 	vmovmi.f32	s15, s12
 801fdf6:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fdfa:	bf48      	it	mi
 801fdfc:	2303      	movmi	r3, #3
 801fdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe02:	bf48      	it	mi
 801fe04:	eef0 7a66 	vmovmi.f32	s15, s13
 801fe08:	eef4 7ac7 	vcmpe.f32	s15, s14
 801fe0c:	bf48      	it	mi
 801fe0e:	2304      	movmi	r3, #4
 801fe10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe14:	bf48      	it	mi
 801fe16:	eef0 7a47 	vmovmi.f32	s15, s14
 801fe1a:	eef4 7a64 	vcmp.f32	s15, s9
 801fe1e:	bf48      	it	mi
 801fe20:	2305      	movmi	r3, #5
 801fe22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe26:	bf48      	it	mi
 801fe28:	2306      	movmi	r3, #6
 801fe2a:	b142      	cbz	r2, 801fe3e <MotionPM_Update+0xa16>
 801fe2c:	3a01      	subs	r2, #1
 801fe2e:	2a02      	cmp	r2, #2
 801fe30:	f201 803f 	bhi.w	8020eb2 <MotionPM_Update+0x1a8a>
 801fe34:	f8d4 235c 	ldr.w	r2, [r4, #860]	; 0x35c
 801fe38:	2a01      	cmp	r2, #1
 801fe3a:	f341 803a 	ble.w	8020eb2 <MotionPM_Update+0x1a8a>
 801fe3e:	ed94 7ac9 	vldr	s14, [r4, #804]	; 0x324
 801fe42:	4aa2      	ldr	r2, [pc, #648]	; (80200cc <MotionPM_Update+0xca4>)
 801fe44:	f8d4 735c 	ldr.w	r7, [r4, #860]	; 0x35c
 801fe48:	eddf 6aa1 	vldr	s13, [pc, #644]	; 80200d0 <MotionPM_Update+0xca8>
 801fe4c:	eec8 7a87 	vdiv.f32	s15, s17, s14
 801fe50:	3803      	subs	r0, #3
 801fe52:	18c1      	adds	r1, r0, r3
 801fe54:	fba2 2301 	umull	r2, r3, r2, r1
 801fe58:	9a03      	ldr	r2, [sp, #12]
 801fe5a:	f8c4 131c 	str.w	r1, [r4, #796]	; 0x31c
 801fe5e:	f10d 0cf0 	add.w	ip, sp, #240	; 0xf0
 801fe62:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
 801fe66:	9903      	ldr	r1, [sp, #12]
 801fe68:	091b      	lsrs	r3, r3, #4
 801fe6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801fe6e:	fb00 f303 	mul.w	r3, r0, r3
 801fe72:	6053      	str	r3, [r2, #4]
 801fe74:	ee07 7a10 	vmov	s14, r7
 801fe78:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fe7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fe80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe84:	f101 0101 	add.w	r1, r1, #1
 801fe88:	edc2 8a02 	vstr	s17, [r2, #8]
 801fe8c:	ed82 7a04 	vstr	s14, [r2, #16]
 801fe90:	dd36      	ble.n	801ff00 <MotionPM_Update+0xad8>
 801fe92:	eddf 6a90 	vldr	s13, [pc, #576]	; 80200d4 <MotionPM_Update+0xcac>
 801fe96:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fe9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe9e:	d52f      	bpl.n	801ff00 <MotionPM_Update+0xad8>
 801fea0:	2f02      	cmp	r7, #2
 801fea2:	dd2d      	ble.n	801ff00 <MotionPM_Update+0xad8>
 801fea4:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80200d8 <MotionPM_Update+0xcb0>
 801fea8:	ed9f 6a8c 	vldr	s12, [pc, #560]	; 80200dc <MotionPM_Update+0xcb4>
 801feac:	eec6 7aa8 	vdiv.f32	s15, s13, s17
 801feb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801feb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801feb8:	ee17 0a90 	vmov	r0, s15
 801febc:	eef4 6ac6 	vcmpe.f32	s13, s12
 801fec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fec4:	eba3 0000 	sub.w	r0, r3, r0
 801fec8:	d51a      	bpl.n	801ff00 <MotionPM_Update+0xad8>
 801feca:	eddf 7a85 	vldr	s15, [pc, #532]	; 80200e0 <MotionPM_Update+0xcb8>
 801fece:	eef4 6ae7 	vcmpe.f32	s13, s15
 801fed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fed6:	dd13      	ble.n	801ff00 <MotionPM_Update+0xad8>
 801fed8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801fedc:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 801fee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fee4:	edc1 8a02 	vstr	s17, [r1, #8]
 801fee8:	edc1 7a04 	vstr	s15, [r1, #16]
 801feec:	6050      	str	r0, [r2, #4]
 801feee:	604b      	str	r3, [r1, #4]
 801fef0:	9903      	ldr	r1, [sp, #12]
 801fef2:	edc4 8ac9 	vstr	s17, [r4, #804]	; 0x324
 801fef6:	edc4 8ad4 	vstr	s17, [r4, #848]	; 0x350
 801fefa:	f8c4 331c 	str.w	r3, [r4, #796]	; 0x31c
 801fefe:	3102      	adds	r1, #2
 801ff00:	9103      	str	r1, [sp, #12]
 801ff02:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 801ff06:	1aeb      	subs	r3, r5, r3
 801ff08:	e483      	b.n	801f812 <MotionPM_Update+0x3ea>
 801ff0a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80200e4 <MotionPM_Update+0xcbc>
 801ff0e:	e642      	b.n	801fb96 <MotionPM_Update+0x76e>
 801ff10:	2200      	movs	r2, #0
 801ff12:	2b64      	cmp	r3, #100	; 0x64
 801ff14:	f884 2758 	strb.w	r2, [r4, #1880]	; 0x758
 801ff18:	f040 80f6 	bne.w	8020108 <MotionPM_Update+0xce0>
 801ff1c:	4972      	ldr	r1, [pc, #456]	; (80200e8 <MotionPM_Update+0xcc0>)
 801ff1e:	4873      	ldr	r0, [pc, #460]	; (80200ec <MotionPM_Update+0xcc4>)
 801ff20:	f884 20b1 	strb.w	r2, [r4, #177]	; 0xb1
 801ff24:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 801ff28:	f8cb 0000 	str.w	r0, [fp]
 801ff2c:	ed81 8a00 	vstr	s16, [r1]
 801ff30:	f8c4 2324 	str.w	r2, [r4, #804]	; 0x324
 801ff34:	f8c4 2320 	str.w	r2, [r4, #800]	; 0x320
 801ff38:	3301      	adds	r3, #1
 801ff3a:	2200      	movs	r2, #0
 801ff3c:	f8c4 35c4 	str.w	r3, [r4, #1476]	; 0x5c4
 801ff40:	f8a4 275a 	strh.w	r2, [r4, #1882]	; 0x75a
 801ff44:	f240 22ee 	movw	r2, #750	; 0x2ee
 801ff48:	4293      	cmp	r3, r2
 801ff4a:	f43f ae34 	beq.w	801fbb6 <MotionPM_Update+0x78e>
 801ff4e:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 801ff52:	1aeb      	subs	r3, r5, r3
 801ff54:	e45d      	b.n	801f812 <MotionPM_Update+0x3ea>
 801ff56:	eef4 6ae5 	vcmpe.f32	s13, s11
 801ff5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff5e:	bf88      	it	hi
 801ff60:	eef0 6a65 	vmovhi.f32	s13, s11
 801ff64:	eef4 7ae6 	vcmpe.f32	s15, s13
 801ff68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff6c:	bf88      	it	hi
 801ff6e:	eef0 7a66 	vmovhi.f32	s15, s13
 801ff72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ff76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff7a:	f77f ac2d 	ble.w	801f7d8 <MotionPM_Update+0x3b0>
 801ff7e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff82:	f103 0174 	add.w	r1, r3, #116	; 0x74
 801ff86:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ff8a:	edd1 da02 	vldr	s27, [r1, #8]
 801ff8e:	eef5 da40 	vcmp.f32	s27, #0.0
 801ff92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff96:	f000 80e2 	beq.w	802015e <MotionPM_Update+0xd36>
 801ff9a:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 801ff9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801ffa2:	1aeb      	subs	r3, r5, r3
 801ffa4:	608a      	str	r2, [r1, #8]
 801ffa6:	e434      	b.n	801f812 <MotionPM_Update+0x3ea>
 801ffa8:	f8a4 375a 	strh.w	r3, [r4, #1882]	; 0x75a
 801ffac:	f7ff bb8f 	b.w	801f6ce <MotionPM_Update+0x2a6>
 801ffb0:	2d64      	cmp	r5, #100	; 0x64
 801ffb2:	d85f      	bhi.n	8020074 <MotionPM_Update+0xc4c>
 801ffb4:	4b4e      	ldr	r3, [pc, #312]	; (80200f0 <MotionPM_Update+0xcc8>)
 801ffb6:	ed93 9a00 	vldr	s18, [r3]
 801ffba:	e491      	b.n	801f8e0 <MotionPM_Update+0x4b8>
 801ffbc:	2300      	movs	r3, #0
 801ffbe:	ed8d 8a3e 	vstr	s16, [sp, #248]	; 0xf8
 801ffc2:	ed8d 8a40 	vstr	s16, [sp, #256]	; 0x100
 801ffc6:	ed8d 8a42 	vstr	s16, [sp, #264]	; 0x108
 801ffca:	ed8d 8a44 	vstr	s16, [sp, #272]	; 0x110
 801ffce:	ed8d 8a46 	vstr	s16, [sp, #280]	; 0x118
 801ffd2:	ed8d 8a48 	vstr	s16, [sp, #288]	; 0x120
 801ffd6:	ed8d 8a4a 	vstr	s16, [sp, #296]	; 0x128
 801ffda:	ed8d 8a4c 	vstr	s16, [sp, #304]	; 0x130
 801ffde:	ed8d 8a4e 	vstr	s16, [sp, #312]	; 0x138
 801ffe2:	ed8d 8a50 	vstr	s16, [sp, #320]	; 0x140
 801ffe6:	ed8d 8a52 	vstr	s16, [sp, #328]	; 0x148
 801ffea:	ed8d 8a54 	vstr	s16, [sp, #336]	; 0x150
 801ffee:	ed8d 8a56 	vstr	s16, [sp, #344]	; 0x158
 801fff2:	ed8d 8a58 	vstr	s16, [sp, #352]	; 0x160
 801fff6:	ed8d 8a5a 	vstr	s16, [sp, #360]	; 0x168
 801fffa:	ed8d 8a5c 	vstr	s16, [sp, #368]	; 0x170
 801fffe:	933d      	str	r3, [sp, #244]	; 0xf4
 8020000:	f8ad 30fc 	strh.w	r3, [sp, #252]	; 0xfc
 8020004:	9341      	str	r3, [sp, #260]	; 0x104
 8020006:	f8ad 310c 	strh.w	r3, [sp, #268]	; 0x10c
 802000a:	9345      	str	r3, [sp, #276]	; 0x114
 802000c:	f8ad 311c 	strh.w	r3, [sp, #284]	; 0x11c
 8020010:	9349      	str	r3, [sp, #292]	; 0x124
 8020012:	f8ad 312c 	strh.w	r3, [sp, #300]	; 0x12c
 8020016:	934d      	str	r3, [sp, #308]	; 0x134
 8020018:	f8ad 313c 	strh.w	r3, [sp, #316]	; 0x13c
 802001c:	9351      	str	r3, [sp, #324]	; 0x144
 802001e:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
 8020022:	9355      	str	r3, [sp, #340]	; 0x154
 8020024:	f8ad 315c 	strh.w	r3, [sp, #348]	; 0x15c
 8020028:	9359      	str	r3, [sp, #356]	; 0x164
 802002a:	f8ad 316c 	strh.w	r3, [sp, #364]	; 0x16c
 802002e:	935d      	str	r3, [sp, #372]	; 0x174
 8020030:	f8ad 317c 	strh.w	r3, [sp, #380]	; 0x17c
 8020034:	9361      	str	r3, [sp, #388]	; 0x184
 8020036:	f8ad 318c 	strh.w	r3, [sp, #396]	; 0x18c
 802003a:	9303      	str	r3, [sp, #12]
 802003c:	ed8d 8a5e 	vstr	s16, [sp, #376]	; 0x178
 8020040:	ed8d 8a60 	vstr	s16, [sp, #384]	; 0x180
 8020044:	ed8d 8a62 	vstr	s16, [sp, #392]	; 0x188
 8020048:	ed8d 8a64 	vstr	s16, [sp, #400]	; 0x190
 802004c:	e412      	b.n	801f874 <MotionPM_Update+0x44c>
 802004e:	9b01      	ldr	r3, [sp, #4]
 8020050:	4a1d      	ldr	r2, [pc, #116]	; (80200c8 <MotionPM_Update+0xca0>)
 8020052:	4928      	ldr	r1, [pc, #160]	; (80200f4 <MotionPM_Update+0xccc>)
 8020054:	ed83 8a00 	vstr	s16, [r3]
 8020058:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 802005c:	2301      	movs	r3, #1
 802005e:	ed9f da26 	vldr	s26, [pc, #152]	; 80200f8 <MotionPM_Update+0xcd0>
 8020062:	ed42 7a02 	vstr	s15, [r2, #-8]
 8020066:	eef0 9a67 	vmov.f32	s19, s15
 802006a:	6011      	str	r1, [r2, #0]
 802006c:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 8020070:	f7ff bbfc 	b.w	801f86c <MotionPM_Update+0x444>
 8020074:	4b21      	ldr	r3, [pc, #132]	; (80200fc <MotionPM_Update+0xcd4>)
 8020076:	ed9f 9a20 	vldr	s18, [pc, #128]	; 80200f8 <MotionPM_Update+0xcd0>
 802007a:	ed83 8a64 	vstr	s16, [r3, #400]	; 0x190
 802007e:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 8020082:	ecf3 7a01 	vldmia	r3!, {s15}
 8020086:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802008a:	eeb4 dae7 	vcmpe.f32	s26, s15
 802008e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020092:	eef4 9ae7 	vcmpe.f32	s19, s15
 8020096:	bfb8      	it	lt
 8020098:	eeb0 da67 	vmovlt.f32	s26, s15
 802009c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200a0:	bf88      	it	hi
 80200a2:	eef0 9a67 	vmovhi.f32	s19, s15
 80200a6:	4293      	cmp	r3, r2
 80200a8:	ee39 9a27 	vadd.f32	s18, s18, s15
 80200ac:	d1e9      	bne.n	8020082 <MotionPM_Update+0xc5a>
 80200ae:	9b01      	ldr	r3, [sp, #4]
 80200b0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8020100 <MotionPM_Update+0xcd8>
 80200b4:	ed83 da00 	vstr	s26, [r3]
 80200b8:	ee29 9a27 	vmul.f32	s18, s18, s15
 80200bc:	4b11      	ldr	r3, [pc, #68]	; (8020104 <MotionPM_Update+0xcdc>)
 80200be:	edc3 9a00 	vstr	s19, [r3]
 80200c2:	ed03 9a02 	vstr	s18, [r3, #-8]
 80200c6:	e40b      	b.n	801f8e0 <MotionPM_Update+0x4b8>
 80200c8:	20006438 	.word	0x20006438
 80200cc:	51eb851f 	.word	0x51eb851f
 80200d0:	3feccccd 	.word	0x3feccccd
 80200d4:	4009999a 	.word	0x4009999a
 80200d8:	47435000 	.word	0x47435000
 80200dc:	47240fff 	.word	0x47240fff
 80200e0:	45dabfff 	.word	0x45dabfff
 80200e4:	3c1ba5e3 	.word	0x3c1ba5e3
 80200e8:	200065dc 	.word	0x200065dc
 80200ec:	3b9ba5e3 	.word	0x3b9ba5e3
 80200f0:	20006428 	.word	0x20006428
 80200f4:	3f866666 	.word	0x3f866666
 80200f8:	00000000 	.word	0x00000000
 80200fc:	20006298 	.word	0x20006298
 8020100:	3c23d70a 	.word	0x3c23d70a
 8020104:	20006430 	.word	0x20006430
 8020108:	2bfa      	cmp	r3, #250	; 0xfa
 802010a:	f47f ad49 	bne.w	801fba0 <MotionPM_Update+0x778>
 802010e:	f884 20b1 	strb.w	r2, [r4, #177]	; 0xb1
 8020112:	4a60      	ldr	r2, [pc, #384]	; (8020294 <MotionPM_Update+0xe6c>)
 8020114:	4960      	ldr	r1, [pc, #384]	; (8020298 <MotionPM_Update+0xe70>)
 8020116:	ed84 8ac9 	vstr	s16, [r4, #804]	; 0x324
 802011a:	ed84 8ac8 	vstr	s16, [r4, #800]	; 0x320
 802011e:	f8cb 1000 	str.w	r1, [fp]
 8020122:	ed82 8a00 	vstr	s16, [r2]
 8020126:	e707      	b.n	801ff38 <MotionPM_Update+0xb10>
 8020128:	eeb4 7ac5 	vcmpe.f32	s14, s10
 802012c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020130:	bf88      	it	hi
 8020132:	eeb0 7a45 	vmovhi.f32	s14, s10
 8020136:	eeb4 7ae4 	vcmpe.f32	s14, s9
 802013a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802013e:	bf88      	it	hi
 8020140:	eeb0 7a64 	vmovhi.f32	s14, s9
 8020144:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8020148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802014c:	f77f ab4a 	ble.w	801f7e4 <MotionPM_Update+0x3bc>
 8020150:	2001      	movs	r0, #1
 8020152:	e716      	b.n	801ff82 <MotionPM_Update+0xb5a>
 8020154:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8020158:	ee27 7a27 	vmul.f32	s14, s14, s15
 802015c:	e51b      	b.n	801fb96 <MotionPM_Update+0x76e>
 802015e:	4f4f      	ldr	r7, [pc, #316]	; (802029c <MotionPM_Update+0xe74>)
 8020160:	1d32      	adds	r2, r6, #4
 8020162:	fba7 c702 	umull	ip, r7, r7, r2
 8020166:	eba2 0c07 	sub.w	ip, r2, r7
 802016a:	eb07 075c 	add.w	r7, r7, ip, lsr #1
 802016e:	08bf      	lsrs	r7, r7, #2
 8020170:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8020174:	1bd7      	subs	r7, r2, r7
 8020176:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 802017a:	18fa      	adds	r2, r7, r3
 802017c:	eb04 0882 	add.w	r8, r4, r2, lsl #2
 8020180:	9a02      	ldr	r2, [sp, #8]
 8020182:	f103 073c 	add.w	r7, r3, #60	; 0x3c
 8020186:	f1a2 0e02 	sub.w	lr, r2, #2
 802018a:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 802018e:	ee07 ea90 	vmov	s15, lr
 8020192:	eb04 0cc3 	add.w	ip, r4, r3, lsl #3
 8020196:	f8d8 20d0 	ldr.w	r2, [r8, #208]	; 0xd0
 802019a:	ed9c 6a7c 	vldr	s12, [ip, #496]	; 0x1f0
 802019e:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80201a2:	60fa      	str	r2, [r7, #12]
 80201a4:	3341      	adds	r3, #65	; 0x41
 80201a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80201aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80201ae:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80201b2:	608a      	str	r2, [r1, #8]
 80201b4:	1c42      	adds	r2, r0, #1
 80201b6:	f8c3 800c 	str.w	r8, [r3, #12]
 80201ba:	edcc 7a7c 	vstr	s15, [ip, #496]	; 0x1f0
 80201be:	ed8c 6a86 	vstr	s12, [ip, #536]	; 0x218
 80201c2:	f040 8490 	bne.w	8020ae6 <MotionPM_Update+0x16be>
 80201c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80201ca:	edd7 6a03 	vldr	s13, [r7, #12]
 80201ce:	4b34      	ldr	r3, [pc, #208]	; (80202a0 <MotionPM_Update+0xe78>)
 80201d0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80201d4:	edd3 6a00 	vldr	s13, [r3]
 80201d8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80201dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201e0:	dd12      	ble.n	8020208 <MotionPM_Update+0xde0>
 80201e2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80201e6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80202a4 <MotionPM_Update+0xe7c>
 80201ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80201ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201f2:	d509      	bpl.n	8020208 <MotionPM_Update+0xde0>
 80201f4:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80201f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80201fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020200:	dd02      	ble.n	8020208 <MotionPM_Update+0xde0>
 8020202:	2daf      	cmp	r5, #175	; 0xaf
 8020204:	f200 836c 	bhi.w	80208e0 <MotionPM_Update+0x14b8>
 8020208:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 802020c:	ed94 7ac9 	vldr	s14, [r4, #804]	; 0x324
 8020210:	1aeb      	subs	r3, r5, r3
 8020212:	eec8 7a87 	vdiv.f32	s15, s17, s14
 8020216:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80202a8 <MotionPM_Update+0xe80>
 802021a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802021e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020222:	f77f aaf6 	ble.w	801f812 <MotionPM_Update+0x3ea>
 8020226:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80202ac <MotionPM_Update+0xe84>
 802022a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802022e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020232:	f57f aaee 	bpl.w	801f812 <MotionPM_Update+0x3ea>
 8020236:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80202b0 <MotionPM_Update+0xe88>
 802023a:	9a03      	ldr	r2, [sp, #12]
 802023c:	edd4 6ad7 	vldr	s13, [r4, #860]	; 0x35c
 8020240:	edc4 8ac9 	vstr	s17, [r4, #804]	; 0x324
 8020244:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8020248:	a83c      	add	r0, sp, #240	; 0xf0
 802024a:	eb00 1102 	add.w	r1, r0, r2, lsl #4
 802024e:	3201      	adds	r2, #1
 8020250:	9203      	str	r2, [sp, #12]
 8020252:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8020256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802025a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 802025e:	ee17 2a90 	vmov	r2, s15
 8020262:	b212      	sxth	r2, r2
 8020264:	ee07 2a90 	vmov	s15, r2
 8020268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802026c:	edc4 8ad4 	vstr	s17, [r4, #848]	; 0x350
 8020270:	ee77 7a8d 	vadd.f32	s15, s15, s26
 8020274:	edc1 8a02 	vstr	s17, [r1, #8]
 8020278:	ee27 7a87 	vmul.f32	s14, s15, s14
 802027c:	edc4 7aca 	vstr	s15, [r4, #808]	; 0x328
 8020280:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8020284:	edc1 6a04 	vstr	s13, [r1, #16]
 8020288:	edc4 7ac7 	vstr	s15, [r4, #796]	; 0x31c
 802028c:	edc1 7a01 	vstr	s15, [r1, #4]
 8020290:	f7ff babf 	b.w	801f812 <MotionPM_Update+0x3ea>
 8020294:	200065dc 	.word	0x200065dc
 8020298:	3b9ba5e3 	.word	0x3b9ba5e3
 802029c:	24924925 	.word	0x24924925
 80202a0:	2000643c 	.word	0x2000643c
 80202a4:	42280000 	.word	0x42280000
 80202a8:	3feccccd 	.word	0x3feccccd
 80202ac:	4009999a 	.word	0x4009999a
 80202b0:	42480000 	.word	0x42480000
 80202b4:	9d03      	ldr	r5, [sp, #12]
 80202b6:	953c      	str	r5, [sp, #240]	; 0xf0
 80202b8:	a93c      	add	r1, sp, #240	; 0xf0
 80202ba:	22a4      	movs	r2, #164	; 0xa4
 80202bc:	a896      	add	r0, sp, #600	; 0x258
 80202be:	f002 fd3f 	bl	8022d40 <memcpy>
 80202c2:	a996      	add	r1, sp, #600	; 0x258
 80202c4:	22a4      	movs	r2, #164	; 0xa4
 80202c6:	a865      	add	r0, sp, #404	; 0x194
 80202c8:	9596      	str	r5, [sp, #600]	; 0x258
 80202ca:	f002 fd39 	bl	8022d40 <memcpy>
 80202ce:	2d00      	cmp	r5, #0
 80202d0:	f43f a8d6 	beq.w	801f480 <MotionPM_Update+0x58>
 80202d4:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 80202d8:	2b00      	cmp	r3, #0
 80202da:	f000 8269 	beq.w	80207b0 <MotionPM_Update+0x1388>
 80202de:	4be2      	ldr	r3, [pc, #904]	; (8020668 <MotionPM_Update+0x1240>)
 80202e0:	eddf 7ae2 	vldr	s15, [pc, #904]	; 802066c <MotionPM_Update+0x1244>
 80202e4:	edd3 3a00 	vldr	s7, [r3]
 80202e8:	ed93 5a01 	vldr	s10, [r3, #4]
 80202ec:	ed93 4a02 	vldr	s8, [r3, #8]
 80202f0:	ed94 7ace 	vldr	s14, [r4, #824]	; 0x338
 80202f4:	ed94 2acd 	vldr	s4, [r4, #820]	; 0x334
 80202f8:	edd3 5a03 	vldr	s11, [r3, #12]
 80202fc:	ed53 6a02 	vldr	s13, [r3, #-8]
 8020300:	edd4 2acf 	vldr	s5, [r4, #828]	; 0x33c
 8020304:	ed13 3a05 	vldr	s6, [r3, #-20]	; 0xffffffec
 8020308:	edd4 4ad0 	vldr	s9, [r4, #832]	; 0x340
 802030c:	ed94 6ad1 	vldr	s12, [r4, #836]	; 0x344
 8020310:	ed43 3a01 	vstr	s7, [r3, #-4]
 8020314:	eef4 3ae7 	vcmpe.f32	s7, s15
 8020318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802031c:	bf98      	it	ls
 802031e:	eef0 7a63 	vmovls.f32	s15, s7
 8020322:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8020326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802032a:	bf98      	it	ls
 802032c:	eef0 7a45 	vmovls.f32	s15, s10
 8020330:	eeb4 4ae7 	vcmpe.f32	s8, s15
 8020334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020338:	bf98      	it	ls
 802033a:	eef0 7a44 	vmovls.f32	s15, s8
 802033e:	ee37 7a02 	vadd.f32	s14, s14, s4
 8020342:	eef4 5ae7 	vcmpe.f32	s11, s15
 8020346:	ee76 6aa6 	vadd.f32	s13, s13, s13
 802034a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802034e:	ee37 7a22 	vadd.f32	s14, s14, s5
 8020352:	eef4 6ac3 	vcmpe.f32	s13, s6
 8020356:	bf98      	it	ls
 8020358:	eef0 7a65 	vmovls.f32	s15, s11
 802035c:	ee37 7a24 	vadd.f32	s14, s14, s9
 8020360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020364:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020368:	bf88      	it	hi
 802036a:	eef0 6a43 	vmovhi.f32	s13, s6
 802036e:	2200      	movs	r2, #0
 8020370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020374:	f1a3 0108 	sub.w	r1, r3, #8
 8020378:	ee37 7a06 	vadd.f32	s14, s14, s12
 802037c:	ed83 5a00 	vstr	s10, [r3]
 8020380:	ed83 4a01 	vstr	s8, [r3, #4]
 8020384:	edc3 5a02 	vstr	s11, [r3, #8]
 8020388:	edc3 6a03 	vstr	s13, [r3, #12]
 802038c:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
 8020390:	f340 82ba 	ble.w	8020908 <MotionPM_Update+0x14e0>
 8020394:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
 8020398:	2b01      	cmp	r3, #1
 802039a:	f340 82b5 	ble.w	8020908 <MotionPM_Update+0x14e0>
 802039e:	ee33 6a85 	vadd.f32	s12, s7, s10
 80203a2:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8020688 <MotionPM_Update+0x1260>
 80203a6:	eddf 2ab2 	vldr	s5, [pc, #712]	; 8020670 <MotionPM_Update+0x1248>
 80203aa:	eddf 1ab2 	vldr	s3, [pc, #712]	; 8020674 <MotionPM_Update+0x124c>
 80203ae:	ee36 6a04 	vadd.f32	s12, s12, s8
 80203b2:	ee35 6a86 	vadd.f32	s12, s11, s12
 80203b6:	ee36 6a86 	vadd.f32	s12, s13, s12
 80203ba:	ee26 6a02 	vmul.f32	s12, s12, s4
 80203be:	ee74 4a46 	vsub.f32	s9, s8, s12
 80203c2:	ee35 5a46 	vsub.f32	s10, s10, s12
 80203c6:	ee64 4aa4 	vmul.f32	s9, s9, s9
 80203ca:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80203ce:	eee5 4a05 	vfma.f32	s9, s10, s10
 80203d2:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80203d6:	eee5 4aa5 	vfma.f32	s9, s11, s11
 80203da:	ee66 5a22 	vmul.f32	s11, s12, s5
 80203de:	eee6 4aa6 	vfma.f32	s9, s13, s13
 80203e2:	ee33 6ac6 	vsub.f32	s12, s7, s12
 80203e6:	eee7 5aa1 	vfma.f32	s11, s15, s3
 80203ea:	eef0 7a64 	vmov.f32	s15, s9
 80203ee:	eee6 7a06 	vfma.f32	s15, s12, s12
 80203f2:	ee65 6aa1 	vmul.f32	s13, s11, s3
 80203f6:	ee67 7a82 	vmul.f32	s15, s15, s4
 80203fa:	edc1 6a00 	vstr	s13, [r1]
 80203fe:	eef2 6a06 	vmov.f32	s13, #38	; 0x41300000  11.0
 8020402:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8020406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802040a:	d521      	bpl.n	8020450 <MotionPM_Update+0x1028>
 802040c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8020678 <MotionPM_Update+0x1250>
 8020410:	eef4 bac7 	vcmpe.f32	s23, s14
 8020414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020418:	f57f a832 	bpl.w	801f480 <MotionPM_Update+0x58>
 802041c:	ee69 9aa9 	vmul.f32	s19, s19, s19
 8020420:	ed9f 7a96 	vldr	s14, [pc, #600]	; 802067c <MotionPM_Update+0x1254>
 8020424:	eec7 6aa9 	vdiv.f32	s13, s15, s19
 8020428:	eef4 6ac7 	vcmpe.f32	s13, s14
 802042c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020430:	f57f a826 	bpl.w	801f480 <MotionPM_Update+0x58>
 8020434:	ee73 7a44 	vsub.f32	s15, s6, s8
 8020438:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802043c:	eef0 7ae7 	vabs.f32	s15, s15
 8020440:	eec7 6a83 	vdiv.f32	s13, s15, s6
 8020444:	eef4 6ac7 	vcmpe.f32	s13, s14
 8020448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802044c:	f57f a818 	bpl.w	801f480 <MotionPM_Update+0x58>
 8020450:	eddd 6a67 	vldr	s13, [sp, #412]	; 0x19c
 8020454:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8020680 <MotionPM_Update+0x1258>
 8020458:	f8d4 336c 	ldr.w	r3, [r4, #876]	; 0x36c
 802045c:	9866      	ldr	r0, [sp, #408]	; 0x198
 802045e:	f8b4 1368 	ldrh.w	r1, [r4, #872]	; 0x368
 8020462:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8020466:	1c5a      	adds	r2, r3, #1
 8020468:	eb04 1502 	add.w	r5, r4, r2, lsl #4
 802046c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8020470:	3337      	adds	r3, #55	; 0x37
 8020472:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8020476:	f8c5 0360 	str.w	r0, [r5, #864]	; 0x360
 802047a:	edc5 6ad9 	vstr	s13, [r5, #868]	; 0x364
 802047e:	ee17 5a10 	vmov	r5, s14
 8020482:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 8020484:	811d      	strh	r5, [r3, #8]
 8020486:	3101      	adds	r1, #1
 8020488:	f8b4 536a 	ldrh.w	r5, [r4, #874]	; 0x36a
 802048c:	60d8      	str	r0, [r3, #12]
 802048e:	b289      	uxth	r1, r1
 8020490:	9803      	ldr	r0, [sp, #12]
 8020492:	fbb2 f3f5 	udiv	r3, r2, r5
 8020496:	42a9      	cmp	r1, r5
 8020498:	bf28      	it	cs
 802049a:	4629      	movcs	r1, r5
 802049c:	2801      	cmp	r0, #1
 802049e:	fb05 2213 	mls	r2, r5, r3, r2
 80204a2:	f8d4 3364 	ldr.w	r3, [r4, #868]	; 0x364
 80204a6:	f240 8160 	bls.w	802076a <MotionPM_Update+0x1342>
 80204aa:	eddd 6a6b 	vldr	s13, [sp, #428]	; 0x1ac
 80204ae:	986a      	ldr	r0, [sp, #424]	; 0x1a8
 80204b0:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
 80204b4:	1c56      	adds	r6, r2, #1
 80204b6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80204ba:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 80204be:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80204c2:	3101      	adds	r1, #1
 80204c4:	b289      	uxth	r1, r1
 80204c6:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 80204ca:	3237      	adds	r2, #55	; 0x37
 80204cc:	9803      	ldr	r0, [sp, #12]
 80204ce:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 80204d2:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80204d6:	42a9      	cmp	r1, r5
 80204d8:	ee17 7a10 	vmov	r7, s14
 80204dc:	bf28      	it	cs
 80204de:	4629      	movcs	r1, r5
 80204e0:	2802      	cmp	r0, #2
 80204e2:	f8c2 c00c 	str.w	ip, [r2, #12]
 80204e6:	8117      	strh	r7, [r2, #8]
 80204e8:	fbb6 f2f5 	udiv	r2, r6, r5
 80204ec:	fb05 6212 	mls	r2, r5, r2, r6
 80204f0:	f000 813b 	beq.w	802076a <MotionPM_Update+0x1342>
 80204f4:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 80204f8:	986e      	ldr	r0, [sp, #440]	; 0x1b8
 80204fa:	f8dd c1c4 	ldr.w	ip, [sp, #452]	; 0x1c4
 80204fe:	1c56      	adds	r6, r2, #1
 8020500:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8020504:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 8020508:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 802050c:	3101      	adds	r1, #1
 802050e:	b289      	uxth	r1, r1
 8020510:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 8020514:	3237      	adds	r2, #55	; 0x37
 8020516:	9803      	ldr	r0, [sp, #12]
 8020518:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 802051c:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8020520:	42a9      	cmp	r1, r5
 8020522:	ee17 7a10 	vmov	r7, s14
 8020526:	bf28      	it	cs
 8020528:	4629      	movcs	r1, r5
 802052a:	2803      	cmp	r0, #3
 802052c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8020530:	8117      	strh	r7, [r2, #8]
 8020532:	fbb6 f2f5 	udiv	r2, r6, r5
 8020536:	fb05 6212 	mls	r2, r5, r2, r6
 802053a:	f000 8116 	beq.w	802076a <MotionPM_Update+0x1342>
 802053e:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 8020542:	9872      	ldr	r0, [sp, #456]	; 0x1c8
 8020544:	f8dd c1d4 	ldr.w	ip, [sp, #468]	; 0x1d4
 8020548:	1c56      	adds	r6, r2, #1
 802054a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802054e:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 8020552:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8020556:	3101      	adds	r1, #1
 8020558:	b289      	uxth	r1, r1
 802055a:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 802055e:	3237      	adds	r2, #55	; 0x37
 8020560:	9803      	ldr	r0, [sp, #12]
 8020562:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 8020566:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 802056a:	42a9      	cmp	r1, r5
 802056c:	ee17 7a10 	vmov	r7, s14
 8020570:	bf28      	it	cs
 8020572:	4629      	movcs	r1, r5
 8020574:	2804      	cmp	r0, #4
 8020576:	f8c2 c00c 	str.w	ip, [r2, #12]
 802057a:	8117      	strh	r7, [r2, #8]
 802057c:	fbb6 f2f5 	udiv	r2, r6, r5
 8020580:	fb05 6212 	mls	r2, r5, r2, r6
 8020584:	f000 80f1 	beq.w	802076a <MotionPM_Update+0x1342>
 8020588:	eddd 6a77 	vldr	s13, [sp, #476]	; 0x1dc
 802058c:	9876      	ldr	r0, [sp, #472]	; 0x1d8
 802058e:	f8dd c1e4 	ldr.w	ip, [sp, #484]	; 0x1e4
 8020592:	1c56      	adds	r6, r2, #1
 8020594:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8020598:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 802059c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80205a0:	3101      	adds	r1, #1
 80205a2:	b289      	uxth	r1, r1
 80205a4:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 80205a8:	3237      	adds	r2, #55	; 0x37
 80205aa:	9803      	ldr	r0, [sp, #12]
 80205ac:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 80205b0:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80205b4:	42a9      	cmp	r1, r5
 80205b6:	ee17 7a10 	vmov	r7, s14
 80205ba:	bf28      	it	cs
 80205bc:	4629      	movcs	r1, r5
 80205be:	2805      	cmp	r0, #5
 80205c0:	f8c2 c00c 	str.w	ip, [r2, #12]
 80205c4:	8117      	strh	r7, [r2, #8]
 80205c6:	fbb6 f2f5 	udiv	r2, r6, r5
 80205ca:	fb05 6212 	mls	r2, r5, r2, r6
 80205ce:	f000 80cc 	beq.w	802076a <MotionPM_Update+0x1342>
 80205d2:	eddd 6a7b 	vldr	s13, [sp, #492]	; 0x1ec
 80205d6:	987a      	ldr	r0, [sp, #488]	; 0x1e8
 80205d8:	f8dd c1f4 	ldr.w	ip, [sp, #500]	; 0x1f4
 80205dc:	1c56      	adds	r6, r2, #1
 80205de:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80205e2:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 80205e6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80205ea:	3101      	adds	r1, #1
 80205ec:	b289      	uxth	r1, r1
 80205ee:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 80205f2:	3237      	adds	r2, #55	; 0x37
 80205f4:	9803      	ldr	r0, [sp, #12]
 80205f6:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 80205fa:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80205fe:	42a9      	cmp	r1, r5
 8020600:	ee17 7a10 	vmov	r7, s14
 8020604:	bf28      	it	cs
 8020606:	4629      	movcs	r1, r5
 8020608:	2806      	cmp	r0, #6
 802060a:	f8c2 c00c 	str.w	ip, [r2, #12]
 802060e:	8117      	strh	r7, [r2, #8]
 8020610:	fbb6 f2f5 	udiv	r2, r6, r5
 8020614:	fb05 6212 	mls	r2, r5, r2, r6
 8020618:	f000 80a7 	beq.w	802076a <MotionPM_Update+0x1342>
 802061c:	eddd 6a7f 	vldr	s13, [sp, #508]	; 0x1fc
 8020620:	987e      	ldr	r0, [sp, #504]	; 0x1f8
 8020622:	f8dd c204 	ldr.w	ip, [sp, #516]	; 0x204
 8020626:	1c56      	adds	r6, r2, #1
 8020628:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802062c:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 8020630:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8020634:	3101      	adds	r1, #1
 8020636:	b289      	uxth	r1, r1
 8020638:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 802063c:	3237      	adds	r2, #55	; 0x37
 802063e:	9803      	ldr	r0, [sp, #12]
 8020640:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 8020644:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8020648:	42a9      	cmp	r1, r5
 802064a:	ee17 7a10 	vmov	r7, s14
 802064e:	bf28      	it	cs
 8020650:	4629      	movcs	r1, r5
 8020652:	2807      	cmp	r0, #7
 8020654:	f8c2 c00c 	str.w	ip, [r2, #12]
 8020658:	8117      	strh	r7, [r2, #8]
 802065a:	fbb6 f2f5 	udiv	r2, r6, r5
 802065e:	fb05 6212 	mls	r2, r5, r2, r6
 8020662:	f000 8082 	beq.w	802076a <MotionPM_Update+0x1342>
 8020666:	e017      	b.n	8020698 <MotionPM_Update+0x1270>
 8020668:	20006850 	.word	0x20006850
 802066c:	42c80000 	.word	0x42c80000
 8020670:	3eb33333 	.word	0x3eb33333
 8020674:	3f266666 	.word	0x3f266666
 8020678:	43480000 	.word	0x43480000
 802067c:	3e99999a 	.word	0x3e99999a
 8020680:	42700000 	.word	0x42700000
 8020684:	3f4ccccd 	.word	0x3f4ccccd
 8020688:	3e4ccccd 	.word	0x3e4ccccd
 802068c:	3dcccccd 	.word	0x3dcccccd
 8020690:	00000000 	.word	0x00000000
 8020694:	42160000 	.word	0x42160000
 8020698:	eddd 6a83 	vldr	s13, [sp, #524]	; 0x20c
 802069c:	9882      	ldr	r0, [sp, #520]	; 0x208
 802069e:	f8dd c214 	ldr.w	ip, [sp, #532]	; 0x214
 80206a2:	1c56      	adds	r6, r2, #1
 80206a4:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80206a8:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 80206ac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80206b0:	3101      	adds	r1, #1
 80206b2:	b289      	uxth	r1, r1
 80206b4:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 80206b8:	3237      	adds	r2, #55	; 0x37
 80206ba:	9803      	ldr	r0, [sp, #12]
 80206bc:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 80206c0:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80206c4:	42a9      	cmp	r1, r5
 80206c6:	ee17 7a10 	vmov	r7, s14
 80206ca:	bf28      	it	cs
 80206cc:	4629      	movcs	r1, r5
 80206ce:	2808      	cmp	r0, #8
 80206d0:	f8c2 c00c 	str.w	ip, [r2, #12]
 80206d4:	8117      	strh	r7, [r2, #8]
 80206d6:	fbb6 f2f5 	udiv	r2, r6, r5
 80206da:	fb05 6212 	mls	r2, r5, r2, r6
 80206de:	d044      	beq.n	802076a <MotionPM_Update+0x1342>
 80206e0:	eddd 6a87 	vldr	s13, [sp, #540]	; 0x21c
 80206e4:	9886      	ldr	r0, [sp, #536]	; 0x218
 80206e6:	f8dd c224 	ldr.w	ip, [sp, #548]	; 0x224
 80206ea:	1c56      	adds	r6, r2, #1
 80206ec:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80206f0:	eb04 1706 	add.w	r7, r4, r6, lsl #4
 80206f4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80206f8:	3101      	adds	r1, #1
 80206fa:	b289      	uxth	r1, r1
 80206fc:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 8020700:	3237      	adds	r2, #55	; 0x37
 8020702:	9803      	ldr	r0, [sp, #12]
 8020704:	edc7 6ad9 	vstr	s13, [r7, #868]	; 0x364
 8020708:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 802070c:	42a9      	cmp	r1, r5
 802070e:	ee17 7a10 	vmov	r7, s14
 8020712:	bf28      	it	cs
 8020714:	4629      	movcs	r1, r5
 8020716:	2809      	cmp	r0, #9
 8020718:	f8c2 c00c 	str.w	ip, [r2, #12]
 802071c:	8117      	strh	r7, [r2, #8]
 802071e:	fbb6 f2f5 	udiv	r2, r6, r5
 8020722:	fb05 6212 	mls	r2, r5, r2, r6
 8020726:	d020      	beq.n	802076a <MotionPM_Update+0x1342>
 8020728:	ed9d 7a8b 	vldr	s14, [sp, #556]	; 0x22c
 802072c:	9e8a      	ldr	r6, [sp, #552]	; 0x228
 802072e:	f8dd c234 	ldr.w	ip, [sp, #564]	; 0x234
 8020732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020736:	1c50      	adds	r0, r2, #1
 8020738:	eb04 1700 	add.w	r7, r4, r0, lsl #4
 802073c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020740:	3237      	adds	r2, #55	; 0x37
 8020742:	3101      	adds	r1, #1
 8020744:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8020748:	b289      	uxth	r1, r1
 802074a:	f8c7 6360 	str.w	r6, [r7, #864]	; 0x360
 802074e:	ee17 6a90 	vmov	r6, s15
 8020752:	42a9      	cmp	r1, r5
 8020754:	f8c2 c00c 	str.w	ip, [r2, #12]
 8020758:	8116      	strh	r6, [r2, #8]
 802075a:	bf28      	it	cs
 802075c:	4629      	movcs	r1, r5
 802075e:	fbb0 f2f5 	udiv	r2, r0, r5
 8020762:	ed87 7ad9 	vstr	s14, [r7, #868]	; 0x364
 8020766:	fb05 0212 	mls	r2, r5, r2, r0
 802076a:	9803      	ldr	r0, [sp, #12]
 802076c:	f8a4 1368 	strh.w	r1, [r4, #872]	; 0x368
 8020770:	4403      	add	r3, r0
 8020772:	f8c4 3364 	str.w	r3, [r4, #868]	; 0x364
 8020776:	f8c4 236c 	str.w	r2, [r4, #876]	; 0x36c
 802077a:	f7fe be83 	b.w	801f484 <MotionPM_Update+0x5c>
 802077e:	f894 2a20 	ldrb.w	r2, [r4, #2592]	; 0xa20
 8020782:	2a96      	cmp	r2, #150	; 0x96
 8020784:	d903      	bls.n	802078e <MotionPM_Update+0x1366>
 8020786:	2200      	movs	r2, #0
 8020788:	700a      	strb	r2, [r1, #0]
 802078a:	f7fe be91 	b.w	801f4b0 <MotionPM_Update+0x88>
 802078e:	edd4 7ac8 	vldr	s15, [r4, #800]	; 0x320
 8020792:	ed1f 7a45 	vldr	s14, [pc, #-276]	; 8020680 <MotionPM_Update+0x1258>
 8020796:	ee67 7a87 	vmul.f32	s15, s15, s14
 802079a:	3201      	adds	r2, #1
 802079c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80207a0:	f884 2a20 	strb.w	r2, [r4, #2592]	; 0xa20
 80207a4:	ee17 1a90 	vmov	r1, s15
 80207a8:	9a04      	ldr	r2, [sp, #16]
 80207aa:	7011      	strb	r1, [r2, #0]
 80207ac:	f7fe be80 	b.w	801f4b0 <MotionPM_Update+0x88>
 80207b0:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80207b4:	ed94 7acd 	vldr	s14, [r4, #820]	; 0x334
 80207b8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	; 8020684 <MotionPM_Update+0x125c>
 80207bc:	9a03      	ldr	r2, [sp, #12]
 80207be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80207c2:	4413      	add	r3, r2
 80207c4:	b2db      	uxtb	r3, r3
 80207c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207ca:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 80207ce:	f77e ae57 	ble.w	801f480 <MotionPM_Update+0x58>
 80207d2:	edd4 6ace 	vldr	s13, [r4, #824]	; 0x338
 80207d6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80207da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207de:	f77e ae4f 	ble.w	801f480 <MotionPM_Update+0x58>
 80207e2:	ed94 6acf 	vldr	s12, [r4, #828]	; 0x33c
 80207e6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80207ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207ee:	f77e ae47 	ble.w	801f480 <MotionPM_Update+0x58>
 80207f2:	edd4 5ad0 	vldr	s11, [r4, #832]	; 0x340
 80207f6:	eef4 5ae7 	vcmpe.f32	s11, s15
 80207fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207fe:	f77e ae3f 	ble.w	801f480 <MotionPM_Update+0x58>
 8020802:	ed94 4ad1 	vldr	s8, [r4, #836]	; 0x344
 8020806:	eeb4 4ae7 	vcmpe.f32	s8, s15
 802080a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802080e:	f77e ae37 	ble.w	801f480 <MotionPM_Update+0x58>
 8020812:	ee77 4a26 	vadd.f32	s9, s14, s13
 8020816:	ed1f 5a64 	vldr	s10, [pc, #-400]	; 8020688 <MotionPM_Update+0x1260>
 802081a:	ee76 4a24 	vadd.f32	s9, s12, s9
 802081e:	eef6 3a04 	vmov.f32	s7, #100	; 0x3f200000  0.625
 8020822:	ee75 4aa4 	vadd.f32	s9, s11, s9
 8020826:	ee74 4a24 	vadd.f32	s9, s8, s9
 802082a:	ee24 5a85 	vmul.f32	s10, s9, s10
 802082e:	ee36 6a45 	vsub.f32	s12, s12, s10
 8020832:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8020836:	ee26 6a06 	vmul.f32	s12, s12, s12
 802083a:	ee75 5ac5 	vsub.f32	s11, s11, s10
 802083e:	eef0 7a46 	vmov.f32	s15, s12
 8020842:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8020846:	ee34 4a45 	vsub.f32	s8, s8, s10
 802084a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802084e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8020852:	eee4 7a04 	vfma.f32	s15, s8, s8
 8020856:	eee7 7a07 	vfma.f32	s15, s14, s14
 802085a:	eef4 7ae3 	vcmpe.f32	s15, s7
 802085e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020862:	f140 811c 	bpl.w	8020a9e <MotionPM_Update+0x1676>
 8020866:	ed5f 7a77 	vldr	s15, [pc, #-476]	; 802068c <MotionPM_Update+0x1264>
 802086a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 802086e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020872:	f340 8114 	ble.w	8020a9e <MotionPM_Update+0x1676>
 8020876:	ee89 7a05 	vdiv.f32	s14, s18, s10
 802087a:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 802087e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020886:	f140 810a 	bpl.w	8020a9e <MotionPM_Update+0x1676>
 802088a:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 802088e:	eef4 4ae7 	vcmpe.f32	s9, s15
 8020892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020896:	f340 8102 	ble.w	8020a9e <MotionPM_Update+0x1676>
 802089a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 802089e:	ee25 5a27 	vmul.f32	s10, s10, s15
 80208a2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80208a6:	eefc 7ac5 	vcvt.u32.f32	s15, s10
 80208aa:	edcd 7a01 	vstr	s15, [sp, #4]
 80208ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80208b2:	1ad3      	subs	r3, r2, r3
 80208b4:	ee07 3a90 	vmov	s15, r3
 80208b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80208bc:	eef0 7ae7 	vabs.f32	s15, s15
 80208c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80208c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208c8:	f200 80e9 	bhi.w	8020a9e <MotionPM_Update+0x1676>
 80208cc:	f8d4 3364 	ldr.w	r3, [r4, #868]	; 0x364
 80208d0:	3301      	adds	r3, #1
 80208d2:	4413      	add	r3, r2
 80208d4:	2201      	movs	r2, #1
 80208d6:	f8c4 3364 	str.w	r3, [r4, #868]	; 0x364
 80208da:	f884 20b1 	strb.w	r2, [r4, #177]	; 0xb1
 80208de:	e4fe      	b.n	80202de <MotionPM_Update+0xeb6>
 80208e0:	eeb5 da40 	vcmp.f32	s26, #0.0
 80208e4:	2300      	movs	r3, #0
 80208e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208ea:	f884 3318 	strb.w	r3, [r4, #792]	; 0x318
 80208ee:	d111      	bne.n	8020914 <MotionPM_Update+0x14ec>
 80208f0:	ee07 5a90 	vmov	s15, r5
 80208f4:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 80208f8:	ed94 7ac9 	vldr	s14, [r4, #804]	; 0x324
 80208fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020900:	1aeb      	subs	r3, r5, r3
 8020902:	edc4 7aca 	vstr	s15, [r4, #808]	; 0x328
 8020906:	e484      	b.n	8020212 <MotionPM_Update+0xdea>
 8020908:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 802090c:	ed5f 7aa0 	vldr	s15, [pc, #-640]	; 8020690 <MotionPM_Update+0x1268>
 8020910:	600b      	str	r3, [r1, #0]
 8020912:	e574      	b.n	80203fe <MotionPM_Update+0xfd6>
 8020914:	ee07 5a90 	vmov	s15, r5
 8020918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802091c:	ed1f 7aa3 	vldr	s14, [pc, #-652]	; 8020694 <MotionPM_Update+0x126c>
 8020920:	edc4 7aca 	vstr	s15, [r4, #808]	; 0x328
 8020924:	ee77 7acd 	vsub.f32	s15, s15, s26
 8020928:	f8d4 732c 	ldr.w	r7, [r4, #812]	; 0x32c
 802092c:	f8d4 035c 	ldr.w	r0, [r4, #860]	; 0x35c
 8020930:	ee87 ea27 	vdiv.f32	s28, s14, s15
 8020934:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8020938:	3001      	adds	r0, #1
 802093a:	2805      	cmp	r0, #5
 802093c:	ed93 7acc 	vldr	s14, [r3, #816]	; 0x330
 8020940:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8020944:	eea7 ea27 	vfma.f32	s28, s14, s15
 8020948:	f300 80a4 	bgt.w	8020a94 <MotionPM_Update+0x166c>
 802094c:	f7df fdba 	bl	80004c4 <__aeabi_i2d>
 8020950:	4680      	mov	r8, r0
 8020952:	4689      	mov	r9, r1
 8020954:	1c7b      	adds	r3, r7, #1
 8020956:	2b08      	cmp	r3, #8
 8020958:	d864      	bhi.n	8020a24 <MotionPM_Update+0x15fc>
 802095a:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 802095e:	ed84 eac9 	vstr	s28, [r4, #804]	; 0x324
 8020962:	f000 80a1 	beq.w	8020aa8 <MotionPM_Update+0x1680>
 8020966:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 802096a:	ed87 eacd 	vstr	s28, [r7, #820]	; 0x334
 802096e:	b32b      	cbz	r3, 80209bc <MotionPM_Update+0x1594>
 8020970:	2b01      	cmp	r3, #1
 8020972:	edd4 dacd 	vldr	s27, [r4, #820]	; 0x334
 8020976:	d021      	beq.n	80209bc <MotionPM_Update+0x1594>
 8020978:	edd4 7ace 	vldr	s15, [r4, #824]	; 0x338
 802097c:	2b02      	cmp	r3, #2
 802097e:	ee7d daa7 	vadd.f32	s27, s27, s15
 8020982:	d01b      	beq.n	80209bc <MotionPM_Update+0x1594>
 8020984:	edd4 7acf 	vldr	s15, [r4, #828]	; 0x33c
 8020988:	2b03      	cmp	r3, #3
 802098a:	ee7d daa7 	vadd.f32	s27, s27, s15
 802098e:	d015      	beq.n	80209bc <MotionPM_Update+0x1594>
 8020990:	edd4 7ad0 	vldr	s15, [r4, #832]	; 0x340
 8020994:	2b04      	cmp	r3, #4
 8020996:	ee7d daa7 	vadd.f32	s27, s27, s15
 802099a:	d00f      	beq.n	80209bc <MotionPM_Update+0x1594>
 802099c:	edd4 7ad1 	vldr	s15, [r4, #836]	; 0x344
 80209a0:	2b05      	cmp	r3, #5
 80209a2:	ee7d daa7 	vadd.f32	s27, s27, s15
 80209a6:	d009      	beq.n	80209bc <MotionPM_Update+0x1594>
 80209a8:	edd4 7ad2 	vldr	s15, [r4, #840]	; 0x348
 80209ac:	2b07      	cmp	r3, #7
 80209ae:	ee7d daa7 	vadd.f32	s27, s27, s15
 80209b2:	bf04      	itt	eq
 80209b4:	edd4 7ad3 	vldreq	s15, [r4, #844]	; 0x34c
 80209b8:	ee7d daa7 	vaddeq.f32	s27, s27, s15
 80209bc:	ee07 3a90 	vmov	s15, r3
 80209c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80209c4:	eecd 7a87 	vdiv.f32	s15, s27, s14
 80209c8:	edc4 7ac8 	vstr	s15, [r4, #800]	; 0x320
 80209cc:	ee77 7ace 	vsub.f32	s15, s15, s28
 80209d0:	eef0 7ae7 	vabs.f32	s15, s15
 80209d4:	ee17 0a90 	vmov	r0, s15
 80209d8:	f7df fd86 	bl	80004e8 <__aeabi_f2d>
 80209dc:	a3e3      	add	r3, pc, #908	; (adr r3, 8020d6c <MotionPM_Update+0x1944>)
 80209de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209e2:	f7df fdd9 	bl	8000598 <__aeabi_dmul>
 80209e6:	f000 fc8b 	bl	8021300 <floor>
 80209ea:	460b      	mov	r3, r1
 80209ec:	4602      	mov	r2, r0
 80209ee:	4649      	mov	r1, r9
 80209f0:	4640      	mov	r0, r8
 80209f2:	f7df fc19 	bl	8000228 <__aeabi_dsub>
 80209f6:	f7e0 f87f 	bl	8000af8 <__aeabi_d2iz>
 80209fa:	eec8 7a8e 	vdiv.f32	s15, s17, s28
 80209fe:	2800      	cmp	r0, #0
 8020a00:	bfb6      	itet	lt
 8020a02:	2300      	movlt	r3, #0
 8020a04:	f8c4 035c 	strge.w	r0, [r4, #860]	; 0x35c
 8020a08:	f8c4 335c 	strlt.w	r3, [r4, #860]	; 0x35c
 8020a0c:	f8c4 5330 	str.w	r5, [r4, #816]	; 0x330
 8020a10:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8020d60 <MotionPM_Update+0x1938>
 8020a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a1c:	f77e af05 	ble.w	801f82a <MotionPM_Update+0x402>
 8020a20:	2300      	movs	r3, #0
 8020a22:	e400      	b.n	8020226 <MotionPM_Update+0xdfe>
 8020a24:	ed94 7ace 	vldr	s14, [r4, #824]	; 0x338
 8020a28:	edd4 4acf 	vldr	s9, [r4, #828]	; 0x33c
 8020a2c:	edd4 7ad0 	vldr	s15, [r4, #832]	; 0x340
 8020a30:	ed94 5ad1 	vldr	s10, [r4, #836]	; 0x344
 8020a34:	edd4 5ad2 	vldr	s11, [r4, #840]	; 0x348
 8020a38:	ed94 6ad3 	vldr	s12, [r4, #844]	; 0x34c
 8020a3c:	edd4 6ad4 	vldr	s13, [r4, #848]	; 0x350
 8020a40:	ed84 eac9 	vstr	s28, [r4, #804]	; 0x324
 8020a44:	2308      	movs	r3, #8
 8020a46:	ed84 7acd 	vstr	s14, [r4, #820]	; 0x334
 8020a4a:	edc4 4ace 	vstr	s9, [r4, #824]	; 0x338
 8020a4e:	edc4 7acf 	vstr	s15, [r4, #828]	; 0x33c
 8020a52:	ed84 5ad0 	vstr	s10, [r4, #832]	; 0x340
 8020a56:	edc4 5ad1 	vstr	s11, [r4, #836]	; 0x344
 8020a5a:	ed84 6ad2 	vstr	s12, [r4, #840]	; 0x348
 8020a5e:	edc4 6ad3 	vstr	s13, [r4, #844]	; 0x34c
 8020a62:	ed84 ead4 	vstr	s28, [r4, #848]	; 0x350
 8020a66:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 8020a6a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8020a6e:	eef4 4a00 	vmov.f32	s9, #64	; 0x3e000000  0.125
 8020a72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020a76:	ee77 7a85 	vadd.f32	s15, s15, s10
 8020a7a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8020a7e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8020a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020a86:	ee7e 7a27 	vadd.f32	s15, s28, s15
 8020a8a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8020a8e:	edc4 7ac8 	vstr	s15, [r4, #800]	; 0x320
 8020a92:	e79b      	b.n	80209cc <MotionPM_Update+0x15a4>
 8020a94:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8020d74 <MotionPM_Update+0x194c>
 8020a98:	f04f 0800 	mov.w	r8, #0
 8020a9c:	e75a      	b.n	8020954 <MotionPM_Update+0x152c>
 8020a9e:	2300      	movs	r3, #0
 8020aa0:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 8020aa4:	f7fe bcec 	b.w	801f480 <MotionPM_Update+0x58>
 8020aa8:	ed94 7ace 	vldr	s14, [r4, #824]	; 0x338
 8020aac:	edd4 4acf 	vldr	s9, [r4, #828]	; 0x33c
 8020ab0:	edd4 7ad0 	vldr	s15, [r4, #832]	; 0x340
 8020ab4:	ed94 5ad1 	vldr	s10, [r4, #836]	; 0x344
 8020ab8:	edd4 5ad2 	vldr	s11, [r4, #840]	; 0x348
 8020abc:	ed94 6ad3 	vldr	s12, [r4, #844]	; 0x34c
 8020ac0:	edd4 6ad4 	vldr	s13, [r4, #848]	; 0x350
 8020ac4:	ed84 7acd 	vstr	s14, [r4, #820]	; 0x334
 8020ac8:	edc4 4ace 	vstr	s9, [r4, #824]	; 0x338
 8020acc:	edc4 7acf 	vstr	s15, [r4, #828]	; 0x33c
 8020ad0:	ed84 5ad0 	vstr	s10, [r4, #832]	; 0x340
 8020ad4:	edc4 5ad1 	vstr	s11, [r4, #836]	; 0x344
 8020ad8:	ed84 6ad2 	vstr	s12, [r4, #840]	; 0x348
 8020adc:	edc4 6ad3 	vstr	s13, [r4, #844]	; 0x34c
 8020ae0:	ed84 ead4 	vstr	s28, [r4, #848]	; 0x350
 8020ae4:	e7c1      	b.n	8020a6a <MotionPM_Update+0x1642>
 8020ae6:	f994 3318 	ldrsb.w	r3, [r4, #792]	; 0x318
 8020aea:	3301      	adds	r3, #1
 8020aec:	f43f aa09 	beq.w	801ff02 <MotionPM_Update+0xada>
 8020af0:	2801      	cmp	r0, #1
 8020af2:	f47f aa06 	bne.w	801ff02 <MotionPM_Update+0xada>
 8020af6:	f8d4 131c 	ldr.w	r1, [r4, #796]	; 0x31c
 8020afa:	1a6b      	subs	r3, r5, r1
 8020afc:	9308      	str	r3, [sp, #32]
 8020afe:	330a      	adds	r3, #10
 8020b00:	22ff      	movs	r2, #255	; 0xff
 8020b02:	2b31      	cmp	r3, #49	; 0x31
 8020b04:	f884 2318 	strb.w	r2, [r4, #792]	; 0x318
 8020b08:	f200 8124 	bhi.w	8020d54 <MotionPM_Update+0x192c>
 8020b0c:	313c      	adds	r1, #60	; 0x3c
 8020b0e:	1b4b      	subs	r3, r1, r5
 8020b10:	1e5a      	subs	r2, r3, #1
 8020b12:	b292      	uxth	r2, r2
 8020b14:	2a31      	cmp	r2, #49	; 0x31
 8020b16:	9309      	str	r3, [sp, #36]	; 0x24
 8020b18:	d80f      	bhi.n	8020b3a <MotionPM_Update+0x1712>
 8020b1a:	1a69      	subs	r1, r5, r1
 8020b1c:	3101      	adds	r1, #1
 8020b1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020b22:	afc8      	add	r7, sp, #800	; 0x320
 8020b24:	f8d3 0250 	ldr.w	r0, [r3, #592]	; 0x250
 8020b28:	1853      	adds	r3, r2, r1
 8020b2a:	3201      	adds	r2, #1
 8020b2c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8020b30:	b292      	uxth	r2, r2
 8020b32:	2a32      	cmp	r2, #50	; 0x32
 8020b34:	f843 0cc8 	str.w	r0, [r3, #-200]
 8020b38:	d1f1      	bne.n	8020b1e <MotionPM_Update+0x16f6>
 8020b3a:	2228      	movs	r2, #40	; 0x28
 8020b3c:	2100      	movs	r1, #0
 8020b3e:	a80a      	add	r0, sp, #40	; 0x28
 8020b40:	f002 f926 	bl	8022d90 <memset>
 8020b44:	f10d 0878 	add.w	r8, sp, #120	; 0x78
 8020b48:	2228      	movs	r2, #40	; 0x28
 8020b4a:	2100      	movs	r1, #0
 8020b4c:	a814      	add	r0, sp, #80	; 0x50
 8020b4e:	f002 f91f 	bl	8022d90 <memset>
 8020b52:	2228      	movs	r2, #40	; 0x28
 8020b54:	2100      	movs	r1, #0
 8020b56:	4640      	mov	r0, r8
 8020b58:	f002 f91a 	bl	8022d90 <memset>
 8020b5c:	af32      	add	r7, sp, #200	; 0xc8
 8020b5e:	2228      	movs	r2, #40	; 0x28
 8020b60:	2100      	movs	r1, #0
 8020b62:	a828      	add	r0, sp, #160	; 0xa0
 8020b64:	f002 f914 	bl	8022d90 <memset>
 8020b68:	2228      	movs	r2, #40	; 0x28
 8020b6a:	2100      	movs	r1, #0
 8020b6c:	4638      	mov	r0, r7
 8020b6e:	f002 f90f 	bl	8022d90 <memset>
 8020b72:	4b7c      	ldr	r3, [pc, #496]	; (8020d64 <MotionPM_Update+0x193c>)
 8020b74:	ed9d 7a96 	vldr	s14, [sp, #600]	; 0x258
 8020b78:	ed93 6a00 	vldr	s12, [r3]
 8020b7c:	f50d 7e16 	add.w	lr, sp, #600	; 0x258
 8020b80:	f50d 79ca 	add.w	r9, sp, #404	; 0x194
 8020b84:	eef0 6a47 	vmov.f32	s13, s14
 8020b88:	464b      	mov	r3, r9
 8020b8a:	4671      	mov	r1, lr
 8020b8c:	2200      	movs	r2, #0
 8020b8e:	edd1 7a01 	vldr	s15, [r1, #4]
 8020b92:	3108      	adds	r1, #8
 8020b94:	ee77 5ae6 	vsub.f32	s11, s15, s13
 8020b98:	edd1 6a00 	vldr	s13, [r1]
 8020b9c:	edc3 5a00 	vstr	s11, [r3]
 8020ba0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8020ba4:	3202      	adds	r2, #2
 8020ba6:	2a30      	cmp	r2, #48	; 0x30
 8020ba8:	edc3 7a01 	vstr	s15, [r3, #4]
 8020bac:	f103 0308 	add.w	r3, r3, #8
 8020bb0:	d1ed      	bne.n	8020b8e <MotionPM_Update+0x1766>
 8020bb2:	eddd 7ac7 	vldr	s15, [sp, #796]	; 0x31c
 8020bb6:	eddd 6ac6 	vldr	s13, [sp, #792]	; 0x318
 8020bba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8020bbe:	aa97      	add	r2, sp, #604	; 0x25c
 8020bc0:	2300      	movs	r3, #0
 8020bc2:	edcd 7a95 	vstr	s15, [sp, #596]	; 0x254
 8020bc6:	4694      	mov	ip, r2
 8020bc8:	4619      	mov	r1, r3
 8020bca:	a865      	add	r0, sp, #404	; 0x194
 8020bcc:	9205      	str	r2, [sp, #20]
 8020bce:	e006      	b.n	8020bde <MotionPM_Update+0x17b6>
 8020bd0:	292f      	cmp	r1, #47	; 0x2f
 8020bd2:	f10c 0c04 	add.w	ip, ip, #4
 8020bd6:	d027      	beq.n	8020c28 <MotionPM_Update+0x1800>
 8020bd8:	2b0a      	cmp	r3, #10
 8020bda:	f000 813f 	beq.w	8020e5c <MotionPM_Update+0x1a34>
 8020bde:	ecf0 7a01 	vldmia	r0!, {s15}
 8020be2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bea:	f101 0101 	add.w	r1, r1, #1
 8020bee:	d5ef      	bpl.n	8020bd0 <MotionPM_Update+0x17a8>
 8020bf0:	edd0 7a00 	vldr	s15, [r0]
 8020bf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bfc:	dde8      	ble.n	8020bd0 <MotionPM_Update+0x17a8>
 8020bfe:	eddc 7a00 	vldr	s15, [ip]
 8020c02:	eef4 7acc 	vcmpe.f32	s15, s24
 8020c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c0a:	d5e1      	bpl.n	8020bd0 <MotionPM_Update+0x17a8>
 8020c0c:	aa28      	add	r2, sp, #160	; 0xa0
 8020c0e:	292f      	cmp	r1, #47	; 0x2f
 8020c10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8020c14:	aa14      	add	r2, sp, #80	; 0x50
 8020c16:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8020c1a:	edc2 7a00 	vstr	s15, [r2]
 8020c1e:	f103 0301 	add.w	r3, r3, #1
 8020c22:	f10c 0c04 	add.w	ip, ip, #4
 8020c26:	d1d7      	bne.n	8020bd8 <MotionPM_Update+0x17b0>
 8020c28:	9a05      	ldr	r2, [sp, #20]
 8020c2a:	b9d3      	cbnz	r3, 8020c62 <MotionPM_Update+0x183a>
 8020c2c:	eef0 6a47 	vmov.f32	s13, s14
 8020c30:	4610      	mov	r0, r2
 8020c32:	2101      	movs	r1, #1
 8020c34:	ecf0 7a01 	vldmia	r0!, {s15}
 8020c38:	eef4 7ae6 	vcmpe.f32	s15, s13
 8020c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c40:	fa1f fc81 	uxth.w	ip, r1
 8020c44:	f101 0101 	add.w	r1, r1, #1
 8020c48:	bf44      	itt	mi
 8020c4a:	eef0 6a67 	vmovmi.f32	s13, s15
 8020c4e:	4663      	movmi	r3, ip
 8020c50:	2932      	cmp	r1, #50	; 0x32
 8020c52:	d1ef      	bne.n	8020c34 <MotionPM_Update+0x180c>
 8020c54:	a9c8      	add	r1, sp, #800	; 0x320
 8020c56:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8020c5a:	9328      	str	r3, [sp, #160]	; 0xa0
 8020c5c:	f851 1cc8 	ldr.w	r1, [r1, #-200]
 8020c60:	9114      	str	r1, [sp, #80]	; 0x50
 8020c62:	2100      	movs	r1, #0
 8020c64:	460b      	mov	r3, r1
 8020c66:	4610      	mov	r0, r2
 8020c68:	e006      	b.n	8020c78 <MotionPM_Update+0x1850>
 8020c6a:	292f      	cmp	r1, #47	; 0x2f
 8020c6c:	f100 0004 	add.w	r0, r0, #4
 8020c70:	d027      	beq.n	8020cc2 <MotionPM_Update+0x189a>
 8020c72:	2b0a      	cmp	r3, #10
 8020c74:	f000 80f4 	beq.w	8020e60 <MotionPM_Update+0x1a38>
 8020c78:	ecf9 7a01 	vldmia	r9!, {s15}
 8020c7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c84:	f101 0101 	add.w	r1, r1, #1
 8020c88:	ddef      	ble.n	8020c6a <MotionPM_Update+0x1842>
 8020c8a:	edd9 7a00 	vldr	s15, [r9]
 8020c8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c96:	d5e8      	bpl.n	8020c6a <MotionPM_Update+0x1842>
 8020c98:	edd0 7a00 	vldr	s15, [r0]
 8020c9c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8020ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ca4:	d5e1      	bpl.n	8020c6a <MotionPM_Update+0x1842>
 8020ca6:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8020caa:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8020cae:	292f      	cmp	r1, #47	; 0x2f
 8020cb0:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
 8020cb4:	edcc 7a00 	vstr	s15, [ip]
 8020cb8:	f103 0301 	add.w	r3, r3, #1
 8020cbc:	f100 0004 	add.w	r0, r0, #4
 8020cc0:	d1d7      	bne.n	8020c72 <MotionPM_Update+0x184a>
 8020cc2:	2101      	movs	r1, #1
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	f040 80f7 	bne.w	8020eb8 <MotionPM_Update+0x1a90>
 8020cca:	ecf2 7a01 	vldmia	r2!, {s15}
 8020cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cd6:	b288      	uxth	r0, r1
 8020cd8:	f101 0101 	add.w	r1, r1, #1
 8020cdc:	bfc4      	itt	gt
 8020cde:	eeb0 7a67 	vmovgt.f32	s14, s15
 8020ce2:	4603      	movgt	r3, r0
 8020ce4:	2932      	cmp	r1, #50	; 0x32
 8020ce6:	d1f0      	bne.n	8020cca <MotionPM_Update+0x18a2>
 8020ce8:	aac8      	add	r2, sp, #800	; 0x320
 8020cea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8020cee:	ed12 6a32 	vldr	s12, [r2, #-200]	; 0xffffff38
 8020cf2:	f8c8 3000 	str.w	r3, [r8]
 8020cf6:	2201      	movs	r2, #1
 8020cf8:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 8020cfc:	4613      	mov	r3, r2
 8020cfe:	eef0 7a6d 	vmov.f32	s15, s27
 8020d02:	a9c8      	add	r1, sp, #800	; 0x320
 8020d04:	ecbe 7a01 	vldmia	lr!, {s14}
 8020d08:	458e      	cmp	lr, r1
 8020d0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020d0e:	d1f9      	bne.n	8020d04 <MotionPM_Update+0x18dc>
 8020d10:	9908      	ldr	r1, [sp, #32]
 8020d12:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8020d68 <MotionPM_Update+0x1940>
 8020d16:	2964      	cmp	r1, #100	; 0x64
 8020d18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020d1c:	d930      	bls.n	8020d80 <MotionPM_Update+0x1958>
 8020d1e:	2a01      	cmp	r2, #1
 8020d20:	f43e af50 	beq.w	801fbc4 <MotionPM_Update+0x79c>
 8020d24:	2301      	movs	r3, #1
 8020d26:	eef0 6a46 	vmov.f32	s13, s12
 8020d2a:	4619      	mov	r1, r3
 8020d2c:	a80b      	add	r0, sp, #44	; 0x2c
 8020d2e:	2700      	movs	r7, #0
 8020d30:	ecf0 7a01 	vldmia	r0!, {s15}
 8020d34:	eef4 7ae6 	vcmpe.f32	s15, s13
 8020d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d3c:	f103 0301 	add.w	r3, r3, #1
 8020d40:	bfc8      	it	gt
 8020d42:	460f      	movgt	r7, r1
 8020d44:	b299      	uxth	r1, r3
 8020d46:	bfc8      	it	gt
 8020d48:	eef0 6a67 	vmovgt.f32	s13, s15
 8020d4c:	428a      	cmp	r2, r1
 8020d4e:	d8ef      	bhi.n	8020d30 <MotionPM_Update+0x1908>
 8020d50:	f7fe bf39 	b.w	801fbc6 <MotionPM_Update+0x79e>
 8020d54:	2100      	movs	r1, #0
 8020d56:	9009      	str	r0, [sp, #36]	; 0x24
 8020d58:	460a      	mov	r2, r1
 8020d5a:	e6e0      	b.n	8020b1e <MotionPM_Update+0x16f6>
 8020d5c:	f3af 8000 	nop.w
 8020d60:	3feccccd 	.word	0x3feccccd
 8020d64:	20006848 	.word	0x20006848
 8020d68:	3ca3d70a 	.word	0x3ca3d70a
 8020d6c:	79add3c4 	.word	0x79add3c4
 8020d70:	4001c71c 	.word	0x4001c71c
 8020d74:	40140000 	.word	0x40140000
 8020d78:	42480000 	.word	0x42480000
 8020d7c:	3ccccccd 	.word	0x3ccccccd
 8020d80:	f1a1 0c32 	sub.w	ip, r1, #50	; 0x32
 8020d84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020d86:	2000      	movs	r0, #0
 8020d88:	448c      	add	ip, r1
 8020d8a:	f858 1020 	ldr.w	r1, [r8, r0, lsl #2]
 8020d8e:	f100 0e01 	add.w	lr, r0, #1
 8020d92:	4461      	add	r1, ip
 8020d94:	f847 1020 	str.w	r1, [r7, r0, lsl #2]
 8020d98:	fa1f f08e 	uxth.w	r0, lr
 8020d9c:	4298      	cmp	r0, r3
 8020d9e:	d3f4      	bcc.n	8020d8a <MotionPM_Update+0x1962>
 8020da0:	ed5f 7a0b 	vldr	s15, [pc, #-44]	; 8020d78 <MotionPM_Update+0x1950>
 8020da4:	eec7 6aa8 	vdiv.f32	s13, s15, s17
 8020da8:	2100      	movs	r1, #0
 8020daa:	eb07 0081 	add.w	r0, r7, r1, lsl #2
 8020dae:	f101 0c01 	add.w	ip, r1, #1
 8020db2:	edd0 7a00 	vldr	s15, [r0]
 8020db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020dba:	a865      	add	r0, sp, #404	; 0x194
 8020dbc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8020dc0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8020dc4:	fa1f f18c 	uxth.w	r1, ip
 8020dc8:	eef0 7ae7 	vabs.f32	s15, s15
 8020dcc:	4299      	cmp	r1, r3
 8020dce:	edc0 7a00 	vstr	s15, [r0]
 8020dd2:	d3ea      	bcc.n	8020daa <MotionPM_Update+0x1982>
 8020dd4:	2a01      	cmp	r2, #1
 8020dd6:	eddd 6a65 	vldr	s13, [sp, #404]	; 0x194
 8020dda:	d063      	beq.n	8020ea4 <MotionPM_Update+0x1a7c>
 8020ddc:	2001      	movs	r0, #1
 8020dde:	4607      	mov	r7, r0
 8020de0:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
 8020de4:	2100      	movs	r1, #0
 8020de6:	ecfc 7a01 	vldmia	ip!, {s15}
 8020dea:	eef4 7ae6 	vcmpe.f32	s15, s13
 8020dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020df2:	f100 0001 	add.w	r0, r0, #1
 8020df6:	bf48      	it	mi
 8020df8:	4639      	movmi	r1, r7
 8020dfa:	b287      	uxth	r7, r0
 8020dfc:	bf48      	it	mi
 8020dfe:	eef0 6a67 	vmovmi.f32	s13, s15
 8020e02:	42ba      	cmp	r2, r7
 8020e04:	d8ef      	bhi.n	8020de6 <MotionPM_Update+0x19be>
 8020e06:	b379      	cbz	r1, 8020e68 <MotionPM_Update+0x1a40>
 8020e08:	1e4f      	subs	r7, r1, #1
 8020e0a:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8020e0e:	f858 9027 	ldr.w	r9, [r8, r7, lsl #2]
 8020e12:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8020e16:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 8020e1a:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8020e1e:	eba0 0c09 	sub.w	ip, r0, r9
 8020e22:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8020e26:	f1bc 0f0e 	cmp.w	ip, #14
 8020e2a:	edd7 5a00 	vldr	s11, [r7]
 8020e2e:	edde 7a00 	vldr	s15, [lr]
 8020e32:	460a      	mov	r2, r1
 8020e34:	d832      	bhi.n	8020e9c <MotionPM_Update+0x1a74>
 8020e36:	ee75 6ae7 	vsub.f32	s13, s11, s15
 8020e3a:	ed1f 5a30 	vldr	s10, [pc, #-192]	; 8020d7c <MotionPM_Update+0x1954>
 8020e3e:	eef4 6ac5 	vcmpe.f32	s13, s10
 8020e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e46:	dd29      	ble.n	8020e9c <MotionPM_Update+0x1a74>
 8020e48:	4299      	cmp	r1, r3
 8020e4a:	d339      	bcc.n	8020ec0 <MotionPM_Update+0x1a98>
 8020e4c:	4648      	mov	r0, r9
 8020e4e:	9b02      	ldr	r3, [sp, #8]
 8020e50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e52:	3b35      	subs	r3, #53	; 0x35
 8020e54:	4413      	add	r3, r2
 8020e56:	4418      	add	r0, r3
 8020e58:	f7fe bebd 	b.w	801fbd6 <MotionPM_Update+0x7ae>
 8020e5c:	9a05      	ldr	r2, [sp, #20]
 8020e5e:	e700      	b.n	8020c62 <MotionPM_Update+0x183a>
 8020e60:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 8020e64:	461a      	mov	r2, r3
 8020e66:	e74a      	b.n	8020cfe <MotionPM_Update+0x18d6>
 8020e68:	f8d8 0000 	ldr.w	r0, [r8]
 8020e6c:	eef0 7a46 	vmov.f32	s15, s12
 8020e70:	2201      	movs	r2, #1
 8020e72:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8020e76:	1a19      	subs	r1, r3, r0
 8020e78:	290e      	cmp	r1, #14
 8020e7a:	d8e8      	bhi.n	8020e4e <MotionPM_Update+0x1a26>
 8020e7c:	a90a      	add	r1, sp, #40	; 0x28
 8020e7e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8020e82:	edd2 6a00 	vldr	s13, [r2]
 8020e86:	ed5f 5a43 	vldr	s11, [pc, #-268]	; 8020d7c <MotionPM_Update+0x1954>
 8020e8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8020e8e:	eef4 7a65 	vcmp.f32	s15, s11
 8020e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e96:	bfc8      	it	gt
 8020e98:	4618      	movgt	r0, r3
 8020e9a:	e7d8      	b.n	8020e4e <MotionPM_Update+0x1a26>
 8020e9c:	3201      	adds	r2, #1
 8020e9e:	4293      	cmp	r3, r2
 8020ea0:	d9d5      	bls.n	8020e4e <MotionPM_Update+0x1a26>
 8020ea2:	e7e6      	b.n	8020e72 <MotionPM_Update+0x1a4a>
 8020ea4:	2b01      	cmp	r3, #1
 8020ea6:	f8d8 0000 	ldr.w	r0, [r8]
 8020eaa:	d0d0      	beq.n	8020e4e <MotionPM_Update+0x1a26>
 8020eac:	eef0 7a46 	vmov.f32	s15, s12
 8020eb0:	e7df      	b.n	8020e72 <MotionPM_Update+0x1a4a>
 8020eb2:	9903      	ldr	r1, [sp, #12]
 8020eb4:	f7ff b824 	b.w	801ff00 <MotionPM_Update+0xad8>
 8020eb8:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 8020ebc:	b29a      	uxth	r2, r3
 8020ebe:	e71e      	b.n	8020cfe <MotionPM_Update+0x18d6>
 8020ec0:	4603      	mov	r3, r0
 8020ec2:	eef0 7a65 	vmov.f32	s15, s11
 8020ec6:	4648      	mov	r0, r9
 8020ec8:	e7d8      	b.n	8020e7c <MotionPM_Update+0x1a54>
 8020eca:	f8c4 35c4 	str.w	r3, [r4, #1476]	; 0x5c4
 8020ece:	f7ff b839 	b.w	801ff44 <MotionPM_Update+0xb1c>
 8020ed2:	bf00      	nop
 8020ed4:	0000      	movs	r0, r0
	...

08020ed8 <atan>:
 8020ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020edc:	4bbc      	ldr	r3, [pc, #752]	; (80211d0 <atan+0x2f8>)
 8020ede:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8020ee2:	429e      	cmp	r6, r3
 8020ee4:	4604      	mov	r4, r0
 8020ee6:	460d      	mov	r5, r1
 8020ee8:	468b      	mov	fp, r1
 8020eea:	dd18      	ble.n	8020f1e <atan+0x46>
 8020eec:	4bb9      	ldr	r3, [pc, #740]	; (80211d4 <atan+0x2fc>)
 8020eee:	429e      	cmp	r6, r3
 8020ef0:	dc01      	bgt.n	8020ef6 <atan+0x1e>
 8020ef2:	d109      	bne.n	8020f08 <atan+0x30>
 8020ef4:	b140      	cbz	r0, 8020f08 <atan+0x30>
 8020ef6:	4622      	mov	r2, r4
 8020ef8:	462b      	mov	r3, r5
 8020efa:	4620      	mov	r0, r4
 8020efc:	4629      	mov	r1, r5
 8020efe:	f7df f995 	bl	800022c <__adddf3>
 8020f02:	4604      	mov	r4, r0
 8020f04:	460d      	mov	r5, r1
 8020f06:	e006      	b.n	8020f16 <atan+0x3e>
 8020f08:	f1bb 0f00 	cmp.w	fp, #0
 8020f0c:	f300 8123 	bgt.w	8021156 <atan+0x27e>
 8020f10:	a593      	add	r5, pc, #588	; (adr r5, 8021160 <atan+0x288>)
 8020f12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8020f16:	4620      	mov	r0, r4
 8020f18:	4629      	mov	r1, r5
 8020f1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f1e:	4bae      	ldr	r3, [pc, #696]	; (80211d8 <atan+0x300>)
 8020f20:	429e      	cmp	r6, r3
 8020f22:	dc11      	bgt.n	8020f48 <atan+0x70>
 8020f24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8020f28:	429e      	cmp	r6, r3
 8020f2a:	dc0a      	bgt.n	8020f42 <atan+0x6a>
 8020f2c:	a38e      	add	r3, pc, #568	; (adr r3, 8021168 <atan+0x290>)
 8020f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f32:	f7df f97b 	bl	800022c <__adddf3>
 8020f36:	4ba9      	ldr	r3, [pc, #676]	; (80211dc <atan+0x304>)
 8020f38:	2200      	movs	r2, #0
 8020f3a:	f7df fdbd 	bl	8000ab8 <__aeabi_dcmpgt>
 8020f3e:	2800      	cmp	r0, #0
 8020f40:	d1e9      	bne.n	8020f16 <atan+0x3e>
 8020f42:	f04f 3aff 	mov.w	sl, #4294967295
 8020f46:	e027      	b.n	8020f98 <atan+0xc0>
 8020f48:	f000 f9d6 	bl	80212f8 <fabs>
 8020f4c:	4ba4      	ldr	r3, [pc, #656]	; (80211e0 <atan+0x308>)
 8020f4e:	429e      	cmp	r6, r3
 8020f50:	4604      	mov	r4, r0
 8020f52:	460d      	mov	r5, r1
 8020f54:	f300 80b8 	bgt.w	80210c8 <atan+0x1f0>
 8020f58:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8020f5c:	429e      	cmp	r6, r3
 8020f5e:	f300 809c 	bgt.w	802109a <atan+0x1c2>
 8020f62:	4602      	mov	r2, r0
 8020f64:	460b      	mov	r3, r1
 8020f66:	f7df f961 	bl	800022c <__adddf3>
 8020f6a:	4b9c      	ldr	r3, [pc, #624]	; (80211dc <atan+0x304>)
 8020f6c:	2200      	movs	r2, #0
 8020f6e:	f7df f95b 	bl	8000228 <__aeabi_dsub>
 8020f72:	2200      	movs	r2, #0
 8020f74:	4606      	mov	r6, r0
 8020f76:	460f      	mov	r7, r1
 8020f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020f7c:	4620      	mov	r0, r4
 8020f7e:	4629      	mov	r1, r5
 8020f80:	f7df f954 	bl	800022c <__adddf3>
 8020f84:	4602      	mov	r2, r0
 8020f86:	460b      	mov	r3, r1
 8020f88:	4630      	mov	r0, r6
 8020f8a:	4639      	mov	r1, r7
 8020f8c:	f7df fc2e 	bl	80007ec <__aeabi_ddiv>
 8020f90:	f04f 0a00 	mov.w	sl, #0
 8020f94:	4604      	mov	r4, r0
 8020f96:	460d      	mov	r5, r1
 8020f98:	4622      	mov	r2, r4
 8020f9a:	462b      	mov	r3, r5
 8020f9c:	4620      	mov	r0, r4
 8020f9e:	4629      	mov	r1, r5
 8020fa0:	f7df fafa 	bl	8000598 <__aeabi_dmul>
 8020fa4:	4602      	mov	r2, r0
 8020fa6:	460b      	mov	r3, r1
 8020fa8:	4680      	mov	r8, r0
 8020faa:	4689      	mov	r9, r1
 8020fac:	f7df faf4 	bl	8000598 <__aeabi_dmul>
 8020fb0:	a36f      	add	r3, pc, #444	; (adr r3, 8021170 <atan+0x298>)
 8020fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fb6:	4606      	mov	r6, r0
 8020fb8:	460f      	mov	r7, r1
 8020fba:	f7df faed 	bl	8000598 <__aeabi_dmul>
 8020fbe:	a36e      	add	r3, pc, #440	; (adr r3, 8021178 <atan+0x2a0>)
 8020fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fc4:	f7df f932 	bl	800022c <__adddf3>
 8020fc8:	4632      	mov	r2, r6
 8020fca:	463b      	mov	r3, r7
 8020fcc:	f7df fae4 	bl	8000598 <__aeabi_dmul>
 8020fd0:	a36b      	add	r3, pc, #428	; (adr r3, 8021180 <atan+0x2a8>)
 8020fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fd6:	f7df f929 	bl	800022c <__adddf3>
 8020fda:	4632      	mov	r2, r6
 8020fdc:	463b      	mov	r3, r7
 8020fde:	f7df fadb 	bl	8000598 <__aeabi_dmul>
 8020fe2:	a369      	add	r3, pc, #420	; (adr r3, 8021188 <atan+0x2b0>)
 8020fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fe8:	f7df f920 	bl	800022c <__adddf3>
 8020fec:	4632      	mov	r2, r6
 8020fee:	463b      	mov	r3, r7
 8020ff0:	f7df fad2 	bl	8000598 <__aeabi_dmul>
 8020ff4:	a366      	add	r3, pc, #408	; (adr r3, 8021190 <atan+0x2b8>)
 8020ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ffa:	f7df f917 	bl	800022c <__adddf3>
 8020ffe:	4632      	mov	r2, r6
 8021000:	463b      	mov	r3, r7
 8021002:	f7df fac9 	bl	8000598 <__aeabi_dmul>
 8021006:	a364      	add	r3, pc, #400	; (adr r3, 8021198 <atan+0x2c0>)
 8021008:	e9d3 2300 	ldrd	r2, r3, [r3]
 802100c:	f7df f90e 	bl	800022c <__adddf3>
 8021010:	4642      	mov	r2, r8
 8021012:	464b      	mov	r3, r9
 8021014:	f7df fac0 	bl	8000598 <__aeabi_dmul>
 8021018:	a361      	add	r3, pc, #388	; (adr r3, 80211a0 <atan+0x2c8>)
 802101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802101e:	4680      	mov	r8, r0
 8021020:	4689      	mov	r9, r1
 8021022:	4630      	mov	r0, r6
 8021024:	4639      	mov	r1, r7
 8021026:	f7df fab7 	bl	8000598 <__aeabi_dmul>
 802102a:	a35f      	add	r3, pc, #380	; (adr r3, 80211a8 <atan+0x2d0>)
 802102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021030:	f7df f8fa 	bl	8000228 <__aeabi_dsub>
 8021034:	4632      	mov	r2, r6
 8021036:	463b      	mov	r3, r7
 8021038:	f7df faae 	bl	8000598 <__aeabi_dmul>
 802103c:	a35c      	add	r3, pc, #368	; (adr r3, 80211b0 <atan+0x2d8>)
 802103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021042:	f7df f8f1 	bl	8000228 <__aeabi_dsub>
 8021046:	4632      	mov	r2, r6
 8021048:	463b      	mov	r3, r7
 802104a:	f7df faa5 	bl	8000598 <__aeabi_dmul>
 802104e:	a35a      	add	r3, pc, #360	; (adr r3, 80211b8 <atan+0x2e0>)
 8021050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021054:	f7df f8e8 	bl	8000228 <__aeabi_dsub>
 8021058:	4632      	mov	r2, r6
 802105a:	463b      	mov	r3, r7
 802105c:	f7df fa9c 	bl	8000598 <__aeabi_dmul>
 8021060:	a357      	add	r3, pc, #348	; (adr r3, 80211c0 <atan+0x2e8>)
 8021062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021066:	f7df f8df 	bl	8000228 <__aeabi_dsub>
 802106a:	4632      	mov	r2, r6
 802106c:	463b      	mov	r3, r7
 802106e:	f7df fa93 	bl	8000598 <__aeabi_dmul>
 8021072:	4602      	mov	r2, r0
 8021074:	460b      	mov	r3, r1
 8021076:	4640      	mov	r0, r8
 8021078:	4649      	mov	r1, r9
 802107a:	f7df f8d7 	bl	800022c <__adddf3>
 802107e:	4622      	mov	r2, r4
 8021080:	462b      	mov	r3, r5
 8021082:	f7df fa89 	bl	8000598 <__aeabi_dmul>
 8021086:	f1ba 3fff 	cmp.w	sl, #4294967295
 802108a:	4602      	mov	r2, r0
 802108c:	460b      	mov	r3, r1
 802108e:	d144      	bne.n	802111a <atan+0x242>
 8021090:	4620      	mov	r0, r4
 8021092:	4629      	mov	r1, r5
 8021094:	f7df f8c8 	bl	8000228 <__aeabi_dsub>
 8021098:	e733      	b.n	8020f02 <atan+0x2a>
 802109a:	4b50      	ldr	r3, [pc, #320]	; (80211dc <atan+0x304>)
 802109c:	2200      	movs	r2, #0
 802109e:	f7df f8c3 	bl	8000228 <__aeabi_dsub>
 80210a2:	4b4e      	ldr	r3, [pc, #312]	; (80211dc <atan+0x304>)
 80210a4:	4606      	mov	r6, r0
 80210a6:	460f      	mov	r7, r1
 80210a8:	2200      	movs	r2, #0
 80210aa:	4620      	mov	r0, r4
 80210ac:	4629      	mov	r1, r5
 80210ae:	f7df f8bd 	bl	800022c <__adddf3>
 80210b2:	4602      	mov	r2, r0
 80210b4:	460b      	mov	r3, r1
 80210b6:	4630      	mov	r0, r6
 80210b8:	4639      	mov	r1, r7
 80210ba:	f7df fb97 	bl	80007ec <__aeabi_ddiv>
 80210be:	f04f 0a01 	mov.w	sl, #1
 80210c2:	4604      	mov	r4, r0
 80210c4:	460d      	mov	r5, r1
 80210c6:	e767      	b.n	8020f98 <atan+0xc0>
 80210c8:	4b46      	ldr	r3, [pc, #280]	; (80211e4 <atan+0x30c>)
 80210ca:	429e      	cmp	r6, r3
 80210cc:	da1a      	bge.n	8021104 <atan+0x22c>
 80210ce:	4b46      	ldr	r3, [pc, #280]	; (80211e8 <atan+0x310>)
 80210d0:	2200      	movs	r2, #0
 80210d2:	f7df f8a9 	bl	8000228 <__aeabi_dsub>
 80210d6:	4b44      	ldr	r3, [pc, #272]	; (80211e8 <atan+0x310>)
 80210d8:	4606      	mov	r6, r0
 80210da:	460f      	mov	r7, r1
 80210dc:	2200      	movs	r2, #0
 80210de:	4620      	mov	r0, r4
 80210e0:	4629      	mov	r1, r5
 80210e2:	f7df fa59 	bl	8000598 <__aeabi_dmul>
 80210e6:	4b3d      	ldr	r3, [pc, #244]	; (80211dc <atan+0x304>)
 80210e8:	2200      	movs	r2, #0
 80210ea:	f7df f89f 	bl	800022c <__adddf3>
 80210ee:	4602      	mov	r2, r0
 80210f0:	460b      	mov	r3, r1
 80210f2:	4630      	mov	r0, r6
 80210f4:	4639      	mov	r1, r7
 80210f6:	f7df fb79 	bl	80007ec <__aeabi_ddiv>
 80210fa:	f04f 0a02 	mov.w	sl, #2
 80210fe:	4604      	mov	r4, r0
 8021100:	460d      	mov	r5, r1
 8021102:	e749      	b.n	8020f98 <atan+0xc0>
 8021104:	4602      	mov	r2, r0
 8021106:	460b      	mov	r3, r1
 8021108:	2000      	movs	r0, #0
 802110a:	4938      	ldr	r1, [pc, #224]	; (80211ec <atan+0x314>)
 802110c:	f7df fb6e 	bl	80007ec <__aeabi_ddiv>
 8021110:	f04f 0a03 	mov.w	sl, #3
 8021114:	4604      	mov	r4, r0
 8021116:	460d      	mov	r5, r1
 8021118:	e73e      	b.n	8020f98 <atan+0xc0>
 802111a:	4b35      	ldr	r3, [pc, #212]	; (80211f0 <atan+0x318>)
 802111c:	4e35      	ldr	r6, [pc, #212]	; (80211f4 <atan+0x31c>)
 802111e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8021122:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8021126:	e9da 2300 	ldrd	r2, r3, [sl]
 802112a:	f7df f87d 	bl	8000228 <__aeabi_dsub>
 802112e:	4622      	mov	r2, r4
 8021130:	462b      	mov	r3, r5
 8021132:	f7df f879 	bl	8000228 <__aeabi_dsub>
 8021136:	4602      	mov	r2, r0
 8021138:	460b      	mov	r3, r1
 802113a:	e9d6 0100 	ldrd	r0, r1, [r6]
 802113e:	f7df f873 	bl	8000228 <__aeabi_dsub>
 8021142:	f1bb 0f00 	cmp.w	fp, #0
 8021146:	4604      	mov	r4, r0
 8021148:	460d      	mov	r5, r1
 802114a:	f6bf aee4 	bge.w	8020f16 <atan+0x3e>
 802114e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021152:	461d      	mov	r5, r3
 8021154:	e6df      	b.n	8020f16 <atan+0x3e>
 8021156:	a51c      	add	r5, pc, #112	; (adr r5, 80211c8 <atan+0x2f0>)
 8021158:	e9d5 4500 	ldrd	r4, r5, [r5]
 802115c:	e6db      	b.n	8020f16 <atan+0x3e>
 802115e:	bf00      	nop
 8021160:	54442d18 	.word	0x54442d18
 8021164:	bff921fb 	.word	0xbff921fb
 8021168:	8800759c 	.word	0x8800759c
 802116c:	7e37e43c 	.word	0x7e37e43c
 8021170:	e322da11 	.word	0xe322da11
 8021174:	3f90ad3a 	.word	0x3f90ad3a
 8021178:	24760deb 	.word	0x24760deb
 802117c:	3fa97b4b 	.word	0x3fa97b4b
 8021180:	a0d03d51 	.word	0xa0d03d51
 8021184:	3fb10d66 	.word	0x3fb10d66
 8021188:	c54c206e 	.word	0xc54c206e
 802118c:	3fb745cd 	.word	0x3fb745cd
 8021190:	920083ff 	.word	0x920083ff
 8021194:	3fc24924 	.word	0x3fc24924
 8021198:	5555550d 	.word	0x5555550d
 802119c:	3fd55555 	.word	0x3fd55555
 80211a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80211a4:	bfa2b444 	.word	0xbfa2b444
 80211a8:	52defd9a 	.word	0x52defd9a
 80211ac:	3fadde2d 	.word	0x3fadde2d
 80211b0:	af749a6d 	.word	0xaf749a6d
 80211b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80211b8:	fe231671 	.word	0xfe231671
 80211bc:	3fbc71c6 	.word	0x3fbc71c6
 80211c0:	9998ebc4 	.word	0x9998ebc4
 80211c4:	3fc99999 	.word	0x3fc99999
 80211c8:	54442d18 	.word	0x54442d18
 80211cc:	3ff921fb 	.word	0x3ff921fb
 80211d0:	440fffff 	.word	0x440fffff
 80211d4:	7ff00000 	.word	0x7ff00000
 80211d8:	3fdbffff 	.word	0x3fdbffff
 80211dc:	3ff00000 	.word	0x3ff00000
 80211e0:	3ff2ffff 	.word	0x3ff2ffff
 80211e4:	40038000 	.word	0x40038000
 80211e8:	3ff80000 	.word	0x3ff80000
 80211ec:	bff00000 	.word	0xbff00000
 80211f0:	08025c08 	.word	0x08025c08
 80211f4:	08025be8 	.word	0x08025be8

080211f8 <ceil>:
 80211f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80211fc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8021200:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8021204:	2e13      	cmp	r6, #19
 8021206:	4602      	mov	r2, r0
 8021208:	460b      	mov	r3, r1
 802120a:	460c      	mov	r4, r1
 802120c:	4605      	mov	r5, r0
 802120e:	4680      	mov	r8, r0
 8021210:	dc31      	bgt.n	8021276 <ceil+0x7e>
 8021212:	2e00      	cmp	r6, #0
 8021214:	da12      	bge.n	802123c <ceil+0x44>
 8021216:	a334      	add	r3, pc, #208	; (adr r3, 80212e8 <ceil+0xf0>)
 8021218:	e9d3 2300 	ldrd	r2, r3, [r3]
 802121c:	f7df f806 	bl	800022c <__adddf3>
 8021220:	2200      	movs	r2, #0
 8021222:	2300      	movs	r3, #0
 8021224:	f7df fc48 	bl	8000ab8 <__aeabi_dcmpgt>
 8021228:	b128      	cbz	r0, 8021236 <ceil+0x3e>
 802122a:	2c00      	cmp	r4, #0
 802122c:	db55      	blt.n	80212da <ceil+0xe2>
 802122e:	432c      	orrs	r4, r5
 8021230:	d057      	beq.n	80212e2 <ceil+0xea>
 8021232:	4c2f      	ldr	r4, [pc, #188]	; (80212f0 <ceil+0xf8>)
 8021234:	2500      	movs	r5, #0
 8021236:	4623      	mov	r3, r4
 8021238:	462a      	mov	r2, r5
 802123a:	e025      	b.n	8021288 <ceil+0x90>
 802123c:	4f2d      	ldr	r7, [pc, #180]	; (80212f4 <ceil+0xfc>)
 802123e:	4137      	asrs	r7, r6
 8021240:	ea01 0c07 	and.w	ip, r1, r7
 8021244:	ea5c 0c00 	orrs.w	ip, ip, r0
 8021248:	d01e      	beq.n	8021288 <ceil+0x90>
 802124a:	a327      	add	r3, pc, #156	; (adr r3, 80212e8 <ceil+0xf0>)
 802124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021250:	f7de ffec 	bl	800022c <__adddf3>
 8021254:	2200      	movs	r2, #0
 8021256:	2300      	movs	r3, #0
 8021258:	f7df fc2e 	bl	8000ab8 <__aeabi_dcmpgt>
 802125c:	2800      	cmp	r0, #0
 802125e:	d0ea      	beq.n	8021236 <ceil+0x3e>
 8021260:	2c00      	cmp	r4, #0
 8021262:	bfc2      	ittt	gt
 8021264:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8021268:	fa43 f606 	asrgt.w	r6, r3, r6
 802126c:	19a4      	addgt	r4, r4, r6
 802126e:	ea24 0407 	bic.w	r4, r4, r7
 8021272:	2500      	movs	r5, #0
 8021274:	e7df      	b.n	8021236 <ceil+0x3e>
 8021276:	2e33      	cmp	r6, #51	; 0x33
 8021278:	dd0a      	ble.n	8021290 <ceil+0x98>
 802127a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802127e:	d103      	bne.n	8021288 <ceil+0x90>
 8021280:	f7de ffd4 	bl	800022c <__adddf3>
 8021284:	4602      	mov	r2, r0
 8021286:	460b      	mov	r3, r1
 8021288:	4610      	mov	r0, r2
 802128a:	4619      	mov	r1, r3
 802128c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021290:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8021294:	f04f 3cff 	mov.w	ip, #4294967295
 8021298:	fa2c f707 	lsr.w	r7, ip, r7
 802129c:	4207      	tst	r7, r0
 802129e:	d0f3      	beq.n	8021288 <ceil+0x90>
 80212a0:	a311      	add	r3, pc, #68	; (adr r3, 80212e8 <ceil+0xf0>)
 80212a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212a6:	f7de ffc1 	bl	800022c <__adddf3>
 80212aa:	2200      	movs	r2, #0
 80212ac:	2300      	movs	r3, #0
 80212ae:	f7df fc03 	bl	8000ab8 <__aeabi_dcmpgt>
 80212b2:	2800      	cmp	r0, #0
 80212b4:	d0bf      	beq.n	8021236 <ceil+0x3e>
 80212b6:	2c00      	cmp	r4, #0
 80212b8:	dd02      	ble.n	80212c0 <ceil+0xc8>
 80212ba:	2e14      	cmp	r6, #20
 80212bc:	d103      	bne.n	80212c6 <ceil+0xce>
 80212be:	3401      	adds	r4, #1
 80212c0:	ea25 0507 	bic.w	r5, r5, r7
 80212c4:	e7b7      	b.n	8021236 <ceil+0x3e>
 80212c6:	2301      	movs	r3, #1
 80212c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80212cc:	fa03 f606 	lsl.w	r6, r3, r6
 80212d0:	4435      	add	r5, r6
 80212d2:	4545      	cmp	r5, r8
 80212d4:	bf38      	it	cc
 80212d6:	18e4      	addcc	r4, r4, r3
 80212d8:	e7f2      	b.n	80212c0 <ceil+0xc8>
 80212da:	2500      	movs	r5, #0
 80212dc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80212e0:	e7a9      	b.n	8021236 <ceil+0x3e>
 80212e2:	4625      	mov	r5, r4
 80212e4:	e7a7      	b.n	8021236 <ceil+0x3e>
 80212e6:	bf00      	nop
 80212e8:	8800759c 	.word	0x8800759c
 80212ec:	7e37e43c 	.word	0x7e37e43c
 80212f0:	3ff00000 	.word	0x3ff00000
 80212f4:	000fffff 	.word	0x000fffff

080212f8 <fabs>:
 80212f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80212fc:	4770      	bx	lr
	...

08021300 <floor>:
 8021300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021304:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8021308:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 802130c:	2e13      	cmp	r6, #19
 802130e:	4602      	mov	r2, r0
 8021310:	460b      	mov	r3, r1
 8021312:	460c      	mov	r4, r1
 8021314:	4605      	mov	r5, r0
 8021316:	4680      	mov	r8, r0
 8021318:	dc33      	bgt.n	8021382 <floor+0x82>
 802131a:	2e00      	cmp	r6, #0
 802131c:	da14      	bge.n	8021348 <floor+0x48>
 802131e:	a334      	add	r3, pc, #208	; (adr r3, 80213f0 <floor+0xf0>)
 8021320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021324:	f7de ff82 	bl	800022c <__adddf3>
 8021328:	2200      	movs	r2, #0
 802132a:	2300      	movs	r3, #0
 802132c:	f7df fbc4 	bl	8000ab8 <__aeabi_dcmpgt>
 8021330:	b138      	cbz	r0, 8021342 <floor+0x42>
 8021332:	2c00      	cmp	r4, #0
 8021334:	da57      	bge.n	80213e6 <floor+0xe6>
 8021336:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802133a:	431d      	orrs	r5, r3
 802133c:	d001      	beq.n	8021342 <floor+0x42>
 802133e:	4c2e      	ldr	r4, [pc, #184]	; (80213f8 <floor+0xf8>)
 8021340:	2500      	movs	r5, #0
 8021342:	4623      	mov	r3, r4
 8021344:	462a      	mov	r2, r5
 8021346:	e025      	b.n	8021394 <floor+0x94>
 8021348:	4f2c      	ldr	r7, [pc, #176]	; (80213fc <floor+0xfc>)
 802134a:	4137      	asrs	r7, r6
 802134c:	ea01 0c07 	and.w	ip, r1, r7
 8021350:	ea5c 0c00 	orrs.w	ip, ip, r0
 8021354:	d01e      	beq.n	8021394 <floor+0x94>
 8021356:	a326      	add	r3, pc, #152	; (adr r3, 80213f0 <floor+0xf0>)
 8021358:	e9d3 2300 	ldrd	r2, r3, [r3]
 802135c:	f7de ff66 	bl	800022c <__adddf3>
 8021360:	2200      	movs	r2, #0
 8021362:	2300      	movs	r3, #0
 8021364:	f7df fba8 	bl	8000ab8 <__aeabi_dcmpgt>
 8021368:	2800      	cmp	r0, #0
 802136a:	d0ea      	beq.n	8021342 <floor+0x42>
 802136c:	2c00      	cmp	r4, #0
 802136e:	bfbe      	ittt	lt
 8021370:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8021374:	fa43 f606 	asrlt.w	r6, r3, r6
 8021378:	19a4      	addlt	r4, r4, r6
 802137a:	ea24 0407 	bic.w	r4, r4, r7
 802137e:	2500      	movs	r5, #0
 8021380:	e7df      	b.n	8021342 <floor+0x42>
 8021382:	2e33      	cmp	r6, #51	; 0x33
 8021384:	dd0a      	ble.n	802139c <floor+0x9c>
 8021386:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802138a:	d103      	bne.n	8021394 <floor+0x94>
 802138c:	f7de ff4e 	bl	800022c <__adddf3>
 8021390:	4602      	mov	r2, r0
 8021392:	460b      	mov	r3, r1
 8021394:	4610      	mov	r0, r2
 8021396:	4619      	mov	r1, r3
 8021398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802139c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80213a0:	f04f 3cff 	mov.w	ip, #4294967295
 80213a4:	fa2c f707 	lsr.w	r7, ip, r7
 80213a8:	4207      	tst	r7, r0
 80213aa:	d0f3      	beq.n	8021394 <floor+0x94>
 80213ac:	a310      	add	r3, pc, #64	; (adr r3, 80213f0 <floor+0xf0>)
 80213ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213b2:	f7de ff3b 	bl	800022c <__adddf3>
 80213b6:	2200      	movs	r2, #0
 80213b8:	2300      	movs	r3, #0
 80213ba:	f7df fb7d 	bl	8000ab8 <__aeabi_dcmpgt>
 80213be:	2800      	cmp	r0, #0
 80213c0:	d0bf      	beq.n	8021342 <floor+0x42>
 80213c2:	2c00      	cmp	r4, #0
 80213c4:	da02      	bge.n	80213cc <floor+0xcc>
 80213c6:	2e14      	cmp	r6, #20
 80213c8:	d103      	bne.n	80213d2 <floor+0xd2>
 80213ca:	3401      	adds	r4, #1
 80213cc:	ea25 0507 	bic.w	r5, r5, r7
 80213d0:	e7b7      	b.n	8021342 <floor+0x42>
 80213d2:	2301      	movs	r3, #1
 80213d4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80213d8:	fa03 f606 	lsl.w	r6, r3, r6
 80213dc:	4435      	add	r5, r6
 80213de:	4545      	cmp	r5, r8
 80213e0:	bf38      	it	cc
 80213e2:	18e4      	addcc	r4, r4, r3
 80213e4:	e7f2      	b.n	80213cc <floor+0xcc>
 80213e6:	2500      	movs	r5, #0
 80213e8:	462c      	mov	r4, r5
 80213ea:	e7aa      	b.n	8021342 <floor+0x42>
 80213ec:	f3af 8000 	nop.w
 80213f0:	8800759c 	.word	0x8800759c
 80213f4:	7e37e43c 	.word	0x7e37e43c
 80213f8:	bff00000 	.word	0xbff00000
 80213fc:	000fffff 	.word	0x000fffff

08021400 <trunc>:
 8021400:	e92d 4b78 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, fp, lr}
 8021404:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8021408:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 802140c:	2c13      	cmp	r4, #19
 802140e:	4602      	mov	r2, r0
 8021410:	460b      	mov	r3, r1
 8021412:	4683      	mov	fp, r0
 8021414:	468c      	mov	ip, r1
 8021416:	dc11      	bgt.n	802143c <trunc+0x3c>
 8021418:	2c00      	cmp	r4, #0
 802141a:	bfa7      	ittee	ge
 802141c:	4b12      	ldrge	r3, [pc, #72]	; (8021468 <trunc+0x68>)
 802141e:	fa43 f404 	asrge.w	r4, r3, r4
 8021422:	2200      	movlt	r2, #0
 8021424:	f001 4300 	andlt.w	r3, r1, #2147483648	; 0x80000000
 8021428:	bfa4      	itt	ge
 802142a:	2200      	movge	r2, #0
 802142c:	ea21 0304 	bicge.w	r3, r1, r4
 8021430:	4693      	mov	fp, r2
 8021432:	469c      	mov	ip, r3
 8021434:	4658      	mov	r0, fp
 8021436:	4661      	mov	r1, ip
 8021438:	e8bd 8b78 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, fp, pc}
 802143c:	2c33      	cmp	r4, #51	; 0x33
 802143e:	dd09      	ble.n	8021454 <trunc+0x54>
 8021440:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8021444:	d1f6      	bne.n	8021434 <trunc+0x34>
 8021446:	4602      	mov	r2, r0
 8021448:	460b      	mov	r3, r1
 802144a:	f7de feef 	bl	800022c <__adddf3>
 802144e:	4683      	mov	fp, r0
 8021450:	468c      	mov	ip, r1
 8021452:	e7ef      	b.n	8021434 <trunc+0x34>
 8021454:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8021458:	f04f 33ff 	mov.w	r3, #4294967295
 802145c:	fa23 f505 	lsr.w	r5, r3, r5
 8021460:	ea20 0805 	bic.w	r8, r0, r5
 8021464:	46c3      	mov	fp, r8
 8021466:	e7e5      	b.n	8021434 <trunc+0x34>
 8021468:	000fffff 	.word	0x000fffff

0802146c <atanf>:
 802146c:	b538      	push	{r3, r4, r5, lr}
 802146e:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8021472:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8021476:	ee07 0a90 	vmov	s15, r0
 802147a:	4605      	mov	r5, r0
 802147c:	db10      	blt.n	80214a0 <atanf+0x34>
 802147e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8021482:	dd04      	ble.n	802148e <atanf+0x22>
 8021484:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8021488:	ee17 0a90 	vmov	r0, s15
 802148c:	bd38      	pop	{r3, r4, r5, pc}
 802148e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80215cc <atanf+0x160>
 8021492:	eddf 7a4f 	vldr	s15, [pc, #316]	; 80215d0 <atanf+0x164>
 8021496:	2800      	cmp	r0, #0
 8021498:	bfc8      	it	gt
 802149a:	eef0 7a47 	vmovgt.f32	s15, s14
 802149e:	e7f3      	b.n	8021488 <atanf+0x1c>
 80214a0:	4b4c      	ldr	r3, [pc, #304]	; (80215d4 <atanf+0x168>)
 80214a2:	429c      	cmp	r4, r3
 80214a4:	dc10      	bgt.n	80214c8 <atanf+0x5c>
 80214a6:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80214aa:	da0a      	bge.n	80214c2 <atanf+0x56>
 80214ac:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80215d8 <atanf+0x16c>
 80214b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80214b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80214b8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80214bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214c0:	dce2      	bgt.n	8021488 <atanf+0x1c>
 80214c2:	f04f 33ff 	mov.w	r3, #4294967295
 80214c6:	e015      	b.n	80214f4 <atanf+0x88>
 80214c8:	f000 f8e6 	bl	8021698 <fabsf>
 80214cc:	4b43      	ldr	r3, [pc, #268]	; (80215dc <atanf+0x170>)
 80214ce:	429c      	cmp	r4, r3
 80214d0:	ee07 0a10 	vmov	s14, r0
 80214d4:	dc4f      	bgt.n	8021576 <atanf+0x10a>
 80214d6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80214da:	429c      	cmp	r4, r3
 80214dc:	dc41      	bgt.n	8021562 <atanf+0xf6>
 80214de:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80214e2:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80214e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80214ea:	2300      	movs	r3, #0
 80214ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80214f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80214f4:	1c5a      	adds	r2, r3, #1
 80214f6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80214fa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80215e0 <atanf+0x174>
 80214fe:	eddf 5a39 	vldr	s11, [pc, #228]	; 80215e4 <atanf+0x178>
 8021502:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80215e8 <atanf+0x17c>
 8021506:	ee66 6a06 	vmul.f32	s13, s12, s12
 802150a:	eee6 5a87 	vfma.f32	s11, s13, s14
 802150e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80215ec <atanf+0x180>
 8021512:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8021516:	eddf 5a36 	vldr	s11, [pc, #216]	; 80215f0 <atanf+0x184>
 802151a:	eee7 5a26 	vfma.f32	s11, s14, s13
 802151e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80215f4 <atanf+0x188>
 8021522:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8021526:	eddf 5a34 	vldr	s11, [pc, #208]	; 80215f8 <atanf+0x18c>
 802152a:	eee7 5a26 	vfma.f32	s11, s14, s13
 802152e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80215fc <atanf+0x190>
 8021532:	eea6 5a87 	vfma.f32	s10, s13, s14
 8021536:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8021600 <atanf+0x194>
 802153a:	eea5 7a26 	vfma.f32	s14, s10, s13
 802153e:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8021604 <atanf+0x198>
 8021542:	eea7 5a26 	vfma.f32	s10, s14, s13
 8021546:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8021608 <atanf+0x19c>
 802154a:	eea5 7a26 	vfma.f32	s14, s10, s13
 802154e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8021552:	eea5 7a86 	vfma.f32	s14, s11, s12
 8021556:	ee27 7a87 	vmul.f32	s14, s15, s14
 802155a:	d121      	bne.n	80215a0 <atanf+0x134>
 802155c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021560:	e792      	b.n	8021488 <atanf+0x1c>
 8021562:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021566:	ee77 6a67 	vsub.f32	s13, s14, s15
 802156a:	ee37 7a27 	vadd.f32	s14, s14, s15
 802156e:	2301      	movs	r3, #1
 8021570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021574:	e7be      	b.n	80214f4 <atanf+0x88>
 8021576:	4b25      	ldr	r3, [pc, #148]	; (802160c <atanf+0x1a0>)
 8021578:	429c      	cmp	r4, r3
 802157a:	dc0b      	bgt.n	8021594 <atanf+0x128>
 802157c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8021580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021584:	eee7 6a27 	vfma.f32	s13, s14, s15
 8021588:	2302      	movs	r3, #2
 802158a:	ee37 6a67 	vsub.f32	s12, s14, s15
 802158e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8021592:	e7af      	b.n	80214f4 <atanf+0x88>
 8021594:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8021598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802159c:	2303      	movs	r3, #3
 802159e:	e7a9      	b.n	80214f4 <atanf+0x88>
 80215a0:	4a1b      	ldr	r2, [pc, #108]	; (8021610 <atanf+0x1a4>)
 80215a2:	491c      	ldr	r1, [pc, #112]	; (8021614 <atanf+0x1a8>)
 80215a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80215a8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80215ac:	edd3 6a00 	vldr	s13, [r3]
 80215b0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80215b4:	2d00      	cmp	r5, #0
 80215b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80215ba:	ed92 7a00 	vldr	s14, [r2]
 80215be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80215c2:	bfb8      	it	lt
 80215c4:	eef1 7a67 	vneglt.f32	s15, s15
 80215c8:	e75e      	b.n	8021488 <atanf+0x1c>
 80215ca:	bf00      	nop
 80215cc:	3fc90fdb 	.word	0x3fc90fdb
 80215d0:	bfc90fdb 	.word	0xbfc90fdb
 80215d4:	3edfffff 	.word	0x3edfffff
 80215d8:	7149f2ca 	.word	0x7149f2ca
 80215dc:	3f97ffff 	.word	0x3f97ffff
 80215e0:	3c8569d7 	.word	0x3c8569d7
 80215e4:	3d4bda59 	.word	0x3d4bda59
 80215e8:	bd6ef16b 	.word	0xbd6ef16b
 80215ec:	3d886b35 	.word	0x3d886b35
 80215f0:	3dba2e6e 	.word	0x3dba2e6e
 80215f4:	3e124925 	.word	0x3e124925
 80215f8:	3eaaaaab 	.word	0x3eaaaaab
 80215fc:	bd15a221 	.word	0xbd15a221
 8021600:	bd9d8795 	.word	0xbd9d8795
 8021604:	bde38e38 	.word	0xbde38e38
 8021608:	be4ccccd 	.word	0xbe4ccccd
 802160c:	401bffff 	.word	0x401bffff
 8021610:	08025c28 	.word	0x08025c28
 8021614:	08025c38 	.word	0x08025c38

08021618 <cosf>:
 8021618:	b507      	push	{r0, r1, r2, lr}
 802161a:	4a1e      	ldr	r2, [pc, #120]	; (8021694 <cosf+0x7c>)
 802161c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8021620:	4293      	cmp	r3, r2
 8021622:	ee07 0a90 	vmov	s15, r0
 8021626:	dc05      	bgt.n	8021634 <cosf+0x1c>
 8021628:	2100      	movs	r1, #0
 802162a:	b003      	add	sp, #12
 802162c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021630:	f000 be8e 	b.w	8022350 <__kernel_cosf>
 8021634:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021638:	db06      	blt.n	8021648 <cosf+0x30>
 802163a:	ee77 7ae7 	vsub.f32	s15, s15, s15
 802163e:	ee17 0a90 	vmov	r0, s15
 8021642:	b003      	add	sp, #12
 8021644:	f85d fb04 	ldr.w	pc, [sp], #4
 8021648:	4669      	mov	r1, sp
 802164a:	f000 fd4f 	bl	80220ec <__ieee754_rem_pio2f>
 802164e:	f000 0203 	and.w	r2, r0, #3
 8021652:	2a01      	cmp	r2, #1
 8021654:	d009      	beq.n	802166a <cosf+0x52>
 8021656:	2a02      	cmp	r2, #2
 8021658:	d010      	beq.n	802167c <cosf+0x64>
 802165a:	b9a2      	cbnz	r2, 8021686 <cosf+0x6e>
 802165c:	9901      	ldr	r1, [sp, #4]
 802165e:	9800      	ldr	r0, [sp, #0]
 8021660:	f000 fe76 	bl	8022350 <__kernel_cosf>
 8021664:	ee07 0a90 	vmov	s15, r0
 8021668:	e7e9      	b.n	802163e <cosf+0x26>
 802166a:	9901      	ldr	r1, [sp, #4]
 802166c:	9800      	ldr	r0, [sp, #0]
 802166e:	f001 f94f 	bl	8022910 <__kernel_sinf>
 8021672:	ee07 0a90 	vmov	s15, r0
 8021676:	eef1 7a67 	vneg.f32	s15, s15
 802167a:	e7e0      	b.n	802163e <cosf+0x26>
 802167c:	9901      	ldr	r1, [sp, #4]
 802167e:	9800      	ldr	r0, [sp, #0]
 8021680:	f000 fe66 	bl	8022350 <__kernel_cosf>
 8021684:	e7f5      	b.n	8021672 <cosf+0x5a>
 8021686:	9901      	ldr	r1, [sp, #4]
 8021688:	9800      	ldr	r0, [sp, #0]
 802168a:	2201      	movs	r2, #1
 802168c:	f001 f940 	bl	8022910 <__kernel_sinf>
 8021690:	e7e8      	b.n	8021664 <cosf+0x4c>
 8021692:	bf00      	nop
 8021694:	3f490fd8 	.word	0x3f490fd8

08021698 <fabsf>:
 8021698:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802169c:	4770      	bx	lr
	...

080216a0 <roundf>:
 80216a0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80216a4:	3a7f      	subs	r2, #127	; 0x7f
 80216a6:	2a16      	cmp	r2, #22
 80216a8:	ee07 0a90 	vmov	s15, r0
 80216ac:	dc15      	bgt.n	80216da <roundf+0x3a>
 80216ae:	2a00      	cmp	r2, #0
 80216b0:	da08      	bge.n	80216c4 <roundf+0x24>
 80216b2:	3201      	adds	r2, #1
 80216b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80216b8:	d101      	bne.n	80216be <roundf+0x1e>
 80216ba:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80216be:	ee07 3a90 	vmov	s15, r3
 80216c2:	e00e      	b.n	80216e2 <roundf+0x42>
 80216c4:	4908      	ldr	r1, [pc, #32]	; (80216e8 <roundf+0x48>)
 80216c6:	4111      	asrs	r1, r2
 80216c8:	4208      	tst	r0, r1
 80216ca:	d00a      	beq.n	80216e2 <roundf+0x42>
 80216cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80216d0:	4113      	asrs	r3, r2
 80216d2:	4403      	add	r3, r0
 80216d4:	ea23 0301 	bic.w	r3, r3, r1
 80216d8:	e7f1      	b.n	80216be <roundf+0x1e>
 80216da:	2a80      	cmp	r2, #128	; 0x80
 80216dc:	d101      	bne.n	80216e2 <roundf+0x42>
 80216de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80216e2:	ee17 0a90 	vmov	r0, s15
 80216e6:	4770      	bx	lr
 80216e8:	007fffff 	.word	0x007fffff

080216ec <sinf>:
 80216ec:	b507      	push	{r0, r1, r2, lr}
 80216ee:	4a1f      	ldr	r2, [pc, #124]	; (802176c <sinf+0x80>)
 80216f0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80216f4:	4293      	cmp	r3, r2
 80216f6:	ee07 0a90 	vmov	s15, r0
 80216fa:	dc06      	bgt.n	802170a <sinf+0x1e>
 80216fc:	2200      	movs	r2, #0
 80216fe:	2100      	movs	r1, #0
 8021700:	b003      	add	sp, #12
 8021702:	f85d eb04 	ldr.w	lr, [sp], #4
 8021706:	f001 b903 	b.w	8022910 <__kernel_sinf>
 802170a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802170e:	db06      	blt.n	802171e <sinf+0x32>
 8021710:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8021714:	ee17 0a90 	vmov	r0, s15
 8021718:	b003      	add	sp, #12
 802171a:	f85d fb04 	ldr.w	pc, [sp], #4
 802171e:	4669      	mov	r1, sp
 8021720:	f000 fce4 	bl	80220ec <__ieee754_rem_pio2f>
 8021724:	f000 0003 	and.w	r0, r0, #3
 8021728:	2801      	cmp	r0, #1
 802172a:	d00a      	beq.n	8021742 <sinf+0x56>
 802172c:	2802      	cmp	r0, #2
 802172e:	d00d      	beq.n	802174c <sinf+0x60>
 8021730:	b9b0      	cbnz	r0, 8021760 <sinf+0x74>
 8021732:	9901      	ldr	r1, [sp, #4]
 8021734:	9800      	ldr	r0, [sp, #0]
 8021736:	2201      	movs	r2, #1
 8021738:	f001 f8ea 	bl	8022910 <__kernel_sinf>
 802173c:	ee07 0a90 	vmov	s15, r0
 8021740:	e7e8      	b.n	8021714 <sinf+0x28>
 8021742:	9901      	ldr	r1, [sp, #4]
 8021744:	9800      	ldr	r0, [sp, #0]
 8021746:	f000 fe03 	bl	8022350 <__kernel_cosf>
 802174a:	e7f7      	b.n	802173c <sinf+0x50>
 802174c:	9901      	ldr	r1, [sp, #4]
 802174e:	9800      	ldr	r0, [sp, #0]
 8021750:	2201      	movs	r2, #1
 8021752:	f001 f8dd 	bl	8022910 <__kernel_sinf>
 8021756:	ee07 0a90 	vmov	s15, r0
 802175a:	eef1 7a67 	vneg.f32	s15, s15
 802175e:	e7d9      	b.n	8021714 <sinf+0x28>
 8021760:	9901      	ldr	r1, [sp, #4]
 8021762:	9800      	ldr	r0, [sp, #0]
 8021764:	f000 fdf4 	bl	8022350 <__kernel_cosf>
 8021768:	e7f5      	b.n	8021756 <sinf+0x6a>
 802176a:	bf00      	nop
 802176c:	3f490fd8 	.word	0x3f490fd8

08021770 <tanf>:
 8021770:	b507      	push	{r0, r1, r2, lr}
 8021772:	4a13      	ldr	r2, [pc, #76]	; (80217c0 <tanf+0x50>)
 8021774:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8021778:	4293      	cmp	r3, r2
 802177a:	ee07 0a90 	vmov	s15, r0
 802177e:	dc06      	bgt.n	802178e <tanf+0x1e>
 8021780:	2201      	movs	r2, #1
 8021782:	2100      	movs	r1, #0
 8021784:	b003      	add	sp, #12
 8021786:	f85d eb04 	ldr.w	lr, [sp], #4
 802178a:	f001 b90d 	b.w	80229a8 <__kernel_tanf>
 802178e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021792:	db06      	blt.n	80217a2 <tanf+0x32>
 8021794:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8021798:	ee17 0a90 	vmov	r0, s15
 802179c:	b003      	add	sp, #12
 802179e:	f85d fb04 	ldr.w	pc, [sp], #4
 80217a2:	4669      	mov	r1, sp
 80217a4:	f000 fca2 	bl	80220ec <__ieee754_rem_pio2f>
 80217a8:	0040      	lsls	r0, r0, #1
 80217aa:	f000 0202 	and.w	r2, r0, #2
 80217ae:	9901      	ldr	r1, [sp, #4]
 80217b0:	9800      	ldr	r0, [sp, #0]
 80217b2:	f1c2 0201 	rsb	r2, r2, #1
 80217b6:	f001 f8f7 	bl	80229a8 <__kernel_tanf>
 80217ba:	ee07 0a90 	vmov	s15, r0
 80217be:	e7eb      	b.n	8021798 <tanf+0x28>
 80217c0:	3f490fda 	.word	0x3f490fda

080217c4 <atan2>:
 80217c4:	f000 b880 	b.w	80218c8 <__ieee754_atan2>

080217c8 <sqrt>:
 80217c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80217ca:	4606      	mov	r6, r0
 80217cc:	460f      	mov	r7, r1
 80217ce:	f000 f94d 	bl	8021a6c <__ieee754_sqrt>
 80217d2:	4632      	mov	r2, r6
 80217d4:	4604      	mov	r4, r0
 80217d6:	460d      	mov	r5, r1
 80217d8:	463b      	mov	r3, r7
 80217da:	4630      	mov	r0, r6
 80217dc:	4639      	mov	r1, r7
 80217de:	f7df f975 	bl	8000acc <__aeabi_dcmpun>
 80217e2:	b990      	cbnz	r0, 802180a <sqrt+0x42>
 80217e4:	2200      	movs	r2, #0
 80217e6:	2300      	movs	r3, #0
 80217e8:	4630      	mov	r0, r6
 80217ea:	4639      	mov	r1, r7
 80217ec:	f7df f946 	bl	8000a7c <__aeabi_dcmplt>
 80217f0:	b158      	cbz	r0, 802180a <sqrt+0x42>
 80217f2:	f001 fa7b 	bl	8022cec <__errno>
 80217f6:	2321      	movs	r3, #33	; 0x21
 80217f8:	6003      	str	r3, [r0, #0]
 80217fa:	2200      	movs	r2, #0
 80217fc:	2300      	movs	r3, #0
 80217fe:	4610      	mov	r0, r2
 8021800:	4619      	mov	r1, r3
 8021802:	f7de fff3 	bl	80007ec <__aeabi_ddiv>
 8021806:	4604      	mov	r4, r0
 8021808:	460d      	mov	r5, r1
 802180a:	4620      	mov	r0, r4
 802180c:	4629      	mov	r1, r5
 802180e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08021810 <acosf>:
 8021810:	b510      	push	{r4, lr}
 8021812:	ed2d 8b02 	vpush	{d8}
 8021816:	ee08 0a10 	vmov	s16, r0
 802181a:	f000 f9d5 	bl	8021bc8 <__ieee754_acosf>
 802181e:	eeb4 8a48 	vcmp.f32	s16, s16
 8021822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021826:	4604      	mov	r4, r0
 8021828:	d617      	bvs.n	802185a <acosf+0x4a>
 802182a:	ee18 0a10 	vmov	r0, s16
 802182e:	f7ff ff33 	bl	8021698 <fabsf>
 8021832:	ee07 0a10 	vmov	s14, r0
 8021836:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802183a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021842:	dd0a      	ble.n	802185a <acosf+0x4a>
 8021844:	f001 fa52 	bl	8022cec <__errno>
 8021848:	ecbd 8b02 	vpop	{d8}
 802184c:	2321      	movs	r3, #33	; 0x21
 802184e:	6003      	str	r3, [r0, #0]
 8021850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021854:	4803      	ldr	r0, [pc, #12]	; (8021864 <acosf+0x54>)
 8021856:	f001 b9cf 	b.w	8022bf8 <nanf>
 802185a:	ecbd 8b02 	vpop	{d8}
 802185e:	4620      	mov	r0, r4
 8021860:	bd10      	pop	{r4, pc}
 8021862:	bf00      	nop
 8021864:	080260c9 	.word	0x080260c9

08021868 <asinf>:
 8021868:	b510      	push	{r4, lr}
 802186a:	ed2d 8b02 	vpush	{d8}
 802186e:	ee08 0a10 	vmov	s16, r0
 8021872:	f000 faa7 	bl	8021dc4 <__ieee754_asinf>
 8021876:	eeb4 8a48 	vcmp.f32	s16, s16
 802187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802187e:	4604      	mov	r4, r0
 8021880:	d617      	bvs.n	80218b2 <asinf+0x4a>
 8021882:	ee18 0a10 	vmov	r0, s16
 8021886:	f7ff ff07 	bl	8021698 <fabsf>
 802188a:	ee07 0a10 	vmov	s14, r0
 802188e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021892:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802189a:	dd0a      	ble.n	80218b2 <asinf+0x4a>
 802189c:	f001 fa26 	bl	8022cec <__errno>
 80218a0:	ecbd 8b02 	vpop	{d8}
 80218a4:	2321      	movs	r3, #33	; 0x21
 80218a6:	6003      	str	r3, [r0, #0]
 80218a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80218ac:	4803      	ldr	r0, [pc, #12]	; (80218bc <asinf+0x54>)
 80218ae:	f001 b9a3 	b.w	8022bf8 <nanf>
 80218b2:	ecbd 8b02 	vpop	{d8}
 80218b6:	4620      	mov	r0, r4
 80218b8:	bd10      	pop	{r4, pc}
 80218ba:	bf00      	nop
 80218bc:	080260c9 	.word	0x080260c9

080218c0 <atan2f>:
 80218c0:	f000 bb72 	b.w	8021fa8 <__ieee754_atan2f>
 80218c4:	0000      	movs	r0, r0
	...

080218c8 <__ieee754_atan2>:
 80218c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218cc:	4690      	mov	r8, r2
 80218ce:	4699      	mov	r9, r3
 80218d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80218d4:	461f      	mov	r7, r3
 80218d6:	f1c8 0300 	rsb	r3, r8, #0
 80218da:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8021a68 <__ieee754_atan2+0x1a0>
 80218de:	ea43 0308 	orr.w	r3, r3, r8
 80218e2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80218e6:	4573      	cmp	r3, lr
 80218e8:	4604      	mov	r4, r0
 80218ea:	460d      	mov	r5, r1
 80218ec:	d808      	bhi.n	8021900 <__ieee754_atan2+0x38>
 80218ee:	4246      	negs	r6, r0
 80218f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80218f4:	4306      	orrs	r6, r0
 80218f6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80218fa:	4576      	cmp	r6, lr
 80218fc:	468c      	mov	ip, r1
 80218fe:	d908      	bls.n	8021912 <__ieee754_atan2+0x4a>
 8021900:	4642      	mov	r2, r8
 8021902:	464b      	mov	r3, r9
 8021904:	4620      	mov	r0, r4
 8021906:	4629      	mov	r1, r5
 8021908:	f7de fc90 	bl	800022c <__adddf3>
 802190c:	4604      	mov	r4, r0
 802190e:	460d      	mov	r5, r1
 8021910:	e019      	b.n	8021946 <__ieee754_atan2+0x7e>
 8021912:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8021916:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 802191a:	ea56 0608 	orrs.w	r6, r6, r8
 802191e:	d103      	bne.n	8021928 <__ieee754_atan2+0x60>
 8021920:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021924:	f7ff bad8 	b.w	8020ed8 <atan>
 8021928:	17be      	asrs	r6, r7, #30
 802192a:	f006 0602 	and.w	r6, r6, #2
 802192e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8021932:	ea53 0100 	orrs.w	r1, r3, r0
 8021936:	d10a      	bne.n	802194e <__ieee754_atan2+0x86>
 8021938:	2e02      	cmp	r6, #2
 802193a:	d067      	beq.n	8021a0c <__ieee754_atan2+0x144>
 802193c:	2e03      	cmp	r6, #3
 802193e:	d102      	bne.n	8021946 <__ieee754_atan2+0x7e>
 8021940:	a545      	add	r5, pc, #276	; (adr r5, 8021a58 <__ieee754_atan2+0x190>)
 8021942:	e9d5 4500 	ldrd	r4, r5, [r5]
 8021946:	4620      	mov	r0, r4
 8021948:	4629      	mov	r1, r5
 802194a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802194e:	ea52 0108 	orrs.w	r1, r2, r8
 8021952:	d106      	bne.n	8021962 <__ieee754_atan2+0x9a>
 8021954:	f1bc 0f00 	cmp.w	ip, #0
 8021958:	da63      	bge.n	8021a22 <__ieee754_atan2+0x15a>
 802195a:	a541      	add	r5, pc, #260	; (adr r5, 8021a60 <__ieee754_atan2+0x198>)
 802195c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8021960:	e7f1      	b.n	8021946 <__ieee754_atan2+0x7e>
 8021962:	4572      	cmp	r2, lr
 8021964:	d10f      	bne.n	8021986 <__ieee754_atan2+0xbe>
 8021966:	4293      	cmp	r3, r2
 8021968:	f106 36ff 	add.w	r6, r6, #4294967295
 802196c:	d107      	bne.n	802197e <__ieee754_atan2+0xb6>
 802196e:	2e02      	cmp	r6, #2
 8021970:	d850      	bhi.n	8021a14 <__ieee754_atan2+0x14c>
 8021972:	4b37      	ldr	r3, [pc, #220]	; (8021a50 <__ieee754_atan2+0x188>)
 8021974:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8021978:	e9d6 4500 	ldrd	r4, r5, [r6]
 802197c:	e7e3      	b.n	8021946 <__ieee754_atan2+0x7e>
 802197e:	2e02      	cmp	r6, #2
 8021980:	d84c      	bhi.n	8021a1c <__ieee754_atan2+0x154>
 8021982:	4b34      	ldr	r3, [pc, #208]	; (8021a54 <__ieee754_atan2+0x18c>)
 8021984:	e7f6      	b.n	8021974 <__ieee754_atan2+0xac>
 8021986:	4573      	cmp	r3, lr
 8021988:	d0e4      	beq.n	8021954 <__ieee754_atan2+0x8c>
 802198a:	1a9b      	subs	r3, r3, r2
 802198c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8021990:	ea4f 5223 	mov.w	r2, r3, asr #20
 8021994:	da20      	bge.n	80219d8 <__ieee754_atan2+0x110>
 8021996:	2f00      	cmp	r7, #0
 8021998:	da01      	bge.n	802199e <__ieee754_atan2+0xd6>
 802199a:	323c      	adds	r2, #60	; 0x3c
 802199c:	db20      	blt.n	80219e0 <__ieee754_atan2+0x118>
 802199e:	4642      	mov	r2, r8
 80219a0:	464b      	mov	r3, r9
 80219a2:	4620      	mov	r0, r4
 80219a4:	4629      	mov	r1, r5
 80219a6:	f7de ff21 	bl	80007ec <__aeabi_ddiv>
 80219aa:	f7ff fca5 	bl	80212f8 <fabs>
 80219ae:	f7ff fa93 	bl	8020ed8 <atan>
 80219b2:	4604      	mov	r4, r0
 80219b4:	460d      	mov	r5, r1
 80219b6:	2e01      	cmp	r6, #1
 80219b8:	d015      	beq.n	80219e6 <__ieee754_atan2+0x11e>
 80219ba:	2e02      	cmp	r6, #2
 80219bc:	d017      	beq.n	80219ee <__ieee754_atan2+0x126>
 80219be:	2e00      	cmp	r6, #0
 80219c0:	d0c1      	beq.n	8021946 <__ieee754_atan2+0x7e>
 80219c2:	a31b      	add	r3, pc, #108	; (adr r3, 8021a30 <__ieee754_atan2+0x168>)
 80219c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219c8:	4620      	mov	r0, r4
 80219ca:	4629      	mov	r1, r5
 80219cc:	f7de fc2c 	bl	8000228 <__aeabi_dsub>
 80219d0:	a319      	add	r3, pc, #100	; (adr r3, 8021a38 <__ieee754_atan2+0x170>)
 80219d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219d6:	e016      	b.n	8021a06 <__ieee754_atan2+0x13e>
 80219d8:	a519      	add	r5, pc, #100	; (adr r5, 8021a40 <__ieee754_atan2+0x178>)
 80219da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80219de:	e7ea      	b.n	80219b6 <__ieee754_atan2+0xee>
 80219e0:	2400      	movs	r4, #0
 80219e2:	2500      	movs	r5, #0
 80219e4:	e7e7      	b.n	80219b6 <__ieee754_atan2+0xee>
 80219e6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80219ea:	461d      	mov	r5, r3
 80219ec:	e7ab      	b.n	8021946 <__ieee754_atan2+0x7e>
 80219ee:	a310      	add	r3, pc, #64	; (adr r3, 8021a30 <__ieee754_atan2+0x168>)
 80219f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219f4:	4620      	mov	r0, r4
 80219f6:	4629      	mov	r1, r5
 80219f8:	f7de fc16 	bl	8000228 <__aeabi_dsub>
 80219fc:	4602      	mov	r2, r0
 80219fe:	460b      	mov	r3, r1
 8021a00:	a10d      	add	r1, pc, #52	; (adr r1, 8021a38 <__ieee754_atan2+0x170>)
 8021a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021a06:	f7de fc0f 	bl	8000228 <__aeabi_dsub>
 8021a0a:	e77f      	b.n	802190c <__ieee754_atan2+0x44>
 8021a0c:	a50a      	add	r5, pc, #40	; (adr r5, 8021a38 <__ieee754_atan2+0x170>)
 8021a0e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8021a12:	e798      	b.n	8021946 <__ieee754_atan2+0x7e>
 8021a14:	a50c      	add	r5, pc, #48	; (adr r5, 8021a48 <__ieee754_atan2+0x180>)
 8021a16:	e9d5 4500 	ldrd	r4, r5, [r5]
 8021a1a:	e794      	b.n	8021946 <__ieee754_atan2+0x7e>
 8021a1c:	2400      	movs	r4, #0
 8021a1e:	2500      	movs	r5, #0
 8021a20:	e791      	b.n	8021946 <__ieee754_atan2+0x7e>
 8021a22:	a507      	add	r5, pc, #28	; (adr r5, 8021a40 <__ieee754_atan2+0x178>)
 8021a24:	e9d5 4500 	ldrd	r4, r5, [r5]
 8021a28:	e78d      	b.n	8021946 <__ieee754_atan2+0x7e>
 8021a2a:	bf00      	nop
 8021a2c:	f3af 8000 	nop.w
 8021a30:	33145c07 	.word	0x33145c07
 8021a34:	3ca1a626 	.word	0x3ca1a626
 8021a38:	54442d18 	.word	0x54442d18
 8021a3c:	400921fb 	.word	0x400921fb
 8021a40:	54442d18 	.word	0x54442d18
 8021a44:	3ff921fb 	.word	0x3ff921fb
 8021a48:	54442d18 	.word	0x54442d18
 8021a4c:	3fe921fb 	.word	0x3fe921fb
 8021a50:	08025c48 	.word	0x08025c48
 8021a54:	08025c60 	.word	0x08025c60
 8021a58:	54442d18 	.word	0x54442d18
 8021a5c:	c00921fb 	.word	0xc00921fb
 8021a60:	54442d18 	.word	0x54442d18
 8021a64:	bff921fb 	.word	0xbff921fb
 8021a68:	7ff00000 	.word	0x7ff00000

08021a6c <__ieee754_sqrt>:
 8021a6c:	f8df c154 	ldr.w	ip, [pc, #340]	; 8021bc4 <__ieee754_sqrt+0x158>
 8021a70:	ea3c 0c01 	bics.w	ip, ip, r1
 8021a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a78:	460a      	mov	r2, r1
 8021a7a:	4604      	mov	r4, r0
 8021a7c:	460d      	mov	r5, r1
 8021a7e:	460e      	mov	r6, r1
 8021a80:	4607      	mov	r7, r0
 8021a82:	4603      	mov	r3, r0
 8021a84:	d10f      	bne.n	8021aa6 <__ieee754_sqrt+0x3a>
 8021a86:	4602      	mov	r2, r0
 8021a88:	460b      	mov	r3, r1
 8021a8a:	f7de fd85 	bl	8000598 <__aeabi_dmul>
 8021a8e:	4602      	mov	r2, r0
 8021a90:	460b      	mov	r3, r1
 8021a92:	4620      	mov	r0, r4
 8021a94:	4629      	mov	r1, r5
 8021a96:	f7de fbc9 	bl	800022c <__adddf3>
 8021a9a:	4604      	mov	r4, r0
 8021a9c:	460d      	mov	r5, r1
 8021a9e:	4620      	mov	r0, r4
 8021aa0:	4629      	mov	r1, r5
 8021aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021aa6:	2900      	cmp	r1, #0
 8021aa8:	dc0e      	bgt.n	8021ac8 <__ieee754_sqrt+0x5c>
 8021aaa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8021aae:	ea5c 0707 	orrs.w	r7, ip, r7
 8021ab2:	d0f4      	beq.n	8021a9e <__ieee754_sqrt+0x32>
 8021ab4:	b141      	cbz	r1, 8021ac8 <__ieee754_sqrt+0x5c>
 8021ab6:	4602      	mov	r2, r0
 8021ab8:	460b      	mov	r3, r1
 8021aba:	f7de fbb5 	bl	8000228 <__aeabi_dsub>
 8021abe:	4602      	mov	r2, r0
 8021ac0:	460b      	mov	r3, r1
 8021ac2:	f7de fe93 	bl	80007ec <__aeabi_ddiv>
 8021ac6:	e7e8      	b.n	8021a9a <__ieee754_sqrt+0x2e>
 8021ac8:	1531      	asrs	r1, r6, #20
 8021aca:	d074      	beq.n	8021bb6 <__ieee754_sqrt+0x14a>
 8021acc:	07cc      	lsls	r4, r1, #31
 8021ace:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8021ad2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8021ad6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8021ada:	bf5e      	ittt	pl
 8021adc:	0fd9      	lsrpl	r1, r3, #31
 8021ade:	005b      	lslpl	r3, r3, #1
 8021ae0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8021ae4:	2400      	movs	r4, #0
 8021ae6:	0fd9      	lsrs	r1, r3, #31
 8021ae8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8021aec:	107f      	asrs	r7, r7, #1
 8021aee:	005b      	lsls	r3, r3, #1
 8021af0:	2516      	movs	r5, #22
 8021af2:	4620      	mov	r0, r4
 8021af4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8021af8:	1846      	adds	r6, r0, r1
 8021afa:	4296      	cmp	r6, r2
 8021afc:	bfde      	ittt	le
 8021afe:	1b92      	suble	r2, r2, r6
 8021b00:	1870      	addle	r0, r6, r1
 8021b02:	1864      	addle	r4, r4, r1
 8021b04:	0052      	lsls	r2, r2, #1
 8021b06:	3d01      	subs	r5, #1
 8021b08:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8021b0c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8021b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021b14:	d1f0      	bne.n	8021af8 <__ieee754_sqrt+0x8c>
 8021b16:	4629      	mov	r1, r5
 8021b18:	f04f 0e20 	mov.w	lr, #32
 8021b1c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8021b20:	4282      	cmp	r2, r0
 8021b22:	eb06 0c05 	add.w	ip, r6, r5
 8021b26:	dc02      	bgt.n	8021b2e <__ieee754_sqrt+0xc2>
 8021b28:	d113      	bne.n	8021b52 <__ieee754_sqrt+0xe6>
 8021b2a:	459c      	cmp	ip, r3
 8021b2c:	d811      	bhi.n	8021b52 <__ieee754_sqrt+0xe6>
 8021b2e:	f1bc 0f00 	cmp.w	ip, #0
 8021b32:	eb0c 0506 	add.w	r5, ip, r6
 8021b36:	da43      	bge.n	8021bc0 <__ieee754_sqrt+0x154>
 8021b38:	2d00      	cmp	r5, #0
 8021b3a:	db41      	blt.n	8021bc0 <__ieee754_sqrt+0x154>
 8021b3c:	f100 0801 	add.w	r8, r0, #1
 8021b40:	1a12      	subs	r2, r2, r0
 8021b42:	459c      	cmp	ip, r3
 8021b44:	bf88      	it	hi
 8021b46:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8021b4a:	eba3 030c 	sub.w	r3, r3, ip
 8021b4e:	4431      	add	r1, r6
 8021b50:	4640      	mov	r0, r8
 8021b52:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8021b56:	f1be 0e01 	subs.w	lr, lr, #1
 8021b5a:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8021b5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021b62:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8021b66:	d1db      	bne.n	8021b20 <__ieee754_sqrt+0xb4>
 8021b68:	4313      	orrs	r3, r2
 8021b6a:	d006      	beq.n	8021b7a <__ieee754_sqrt+0x10e>
 8021b6c:	1c48      	adds	r0, r1, #1
 8021b6e:	bf13      	iteet	ne
 8021b70:	3101      	addne	r1, #1
 8021b72:	3401      	addeq	r4, #1
 8021b74:	4671      	moveq	r1, lr
 8021b76:	f021 0101 	bicne.w	r1, r1, #1
 8021b7a:	1063      	asrs	r3, r4, #1
 8021b7c:	0849      	lsrs	r1, r1, #1
 8021b7e:	07e2      	lsls	r2, r4, #31
 8021b80:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8021b84:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8021b88:	bf48      	it	mi
 8021b8a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8021b8e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8021b92:	460c      	mov	r4, r1
 8021b94:	e783      	b.n	8021a9e <__ieee754_sqrt+0x32>
 8021b96:	0ada      	lsrs	r2, r3, #11
 8021b98:	3815      	subs	r0, #21
 8021b9a:	055b      	lsls	r3, r3, #21
 8021b9c:	2a00      	cmp	r2, #0
 8021b9e:	d0fa      	beq.n	8021b96 <__ieee754_sqrt+0x12a>
 8021ba0:	02d5      	lsls	r5, r2, #11
 8021ba2:	d50a      	bpl.n	8021bba <__ieee754_sqrt+0x14e>
 8021ba4:	f1c1 0420 	rsb	r4, r1, #32
 8021ba8:	fa23 f404 	lsr.w	r4, r3, r4
 8021bac:	1e4d      	subs	r5, r1, #1
 8021bae:	408b      	lsls	r3, r1
 8021bb0:	4322      	orrs	r2, r4
 8021bb2:	1b41      	subs	r1, r0, r5
 8021bb4:	e78a      	b.n	8021acc <__ieee754_sqrt+0x60>
 8021bb6:	4608      	mov	r0, r1
 8021bb8:	e7f0      	b.n	8021b9c <__ieee754_sqrt+0x130>
 8021bba:	0052      	lsls	r2, r2, #1
 8021bbc:	3101      	adds	r1, #1
 8021bbe:	e7ef      	b.n	8021ba0 <__ieee754_sqrt+0x134>
 8021bc0:	4680      	mov	r8, r0
 8021bc2:	e7bd      	b.n	8021b40 <__ieee754_sqrt+0xd4>
 8021bc4:	7ff00000 	.word	0x7ff00000

08021bc8 <__ieee754_acosf>:
 8021bc8:	b508      	push	{r3, lr}
 8021bca:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8021bce:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8021bd2:	ed2d 8b0c 	vpush	{d8-d13}
 8021bd6:	ee08 0a10 	vmov	s16, r0
 8021bda:	d10c      	bne.n	8021bf6 <__ieee754_acosf+0x2e>
 8021bdc:	eddf 7a68 	vldr	s15, [pc, #416]	; 8021d80 <__ieee754_acosf+0x1b8>
 8021be0:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8021d84 <__ieee754_acosf+0x1bc>
 8021be4:	2800      	cmp	r0, #0
 8021be6:	bfd8      	it	le
 8021be8:	eef0 7a48 	vmovle.f32	s15, s16
 8021bec:	ecbd 8b0c 	vpop	{d8-d13}
 8021bf0:	ee17 0a90 	vmov	r0, s15
 8021bf4:	bd08      	pop	{r3, pc}
 8021bf6:	dd04      	ble.n	8021c02 <__ieee754_acosf+0x3a>
 8021bf8:	ee38 8a48 	vsub.f32	s16, s16, s16
 8021bfc:	eec8 7a08 	vdiv.f32	s15, s16, s16
 8021c00:	e7f4      	b.n	8021bec <__ieee754_acosf+0x24>
 8021c02:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8021c06:	da3c      	bge.n	8021c82 <__ieee754_acosf+0xba>
 8021c08:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8021c0c:	f340 80b5 	ble.w	8021d7a <__ieee754_acosf+0x1b2>
 8021c10:	ee68 7a08 	vmul.f32	s15, s16, s16
 8021c14:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8021d88 <__ieee754_acosf+0x1c0>
 8021c18:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8021d8c <__ieee754_acosf+0x1c4>
 8021c1c:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8021d90 <__ieee754_acosf+0x1c8>
 8021c20:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8021c24:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8021d94 <__ieee754_acosf+0x1cc>
 8021c28:	eee7 6a27 	vfma.f32	s13, s14, s15
 8021c2c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8021d98 <__ieee754_acosf+0x1d0>
 8021c30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8021c34:	eddf 6a59 	vldr	s13, [pc, #356]	; 8021d9c <__ieee754_acosf+0x1d4>
 8021c38:	eee7 6a27 	vfma.f32	s13, s14, s15
 8021c3c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8021da0 <__ieee754_acosf+0x1d8>
 8021c40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8021c44:	eddf 6a57 	vldr	s13, [pc, #348]	; 8021da4 <__ieee754_acosf+0x1dc>
 8021c48:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8021c4c:	eddf 6a56 	vldr	s13, [pc, #344]	; 8021da8 <__ieee754_acosf+0x1e0>
 8021c50:	eee6 6a27 	vfma.f32	s13, s12, s15
 8021c54:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8021dac <__ieee754_acosf+0x1e4>
 8021c58:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8021c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021c60:	eee6 6a27 	vfma.f32	s13, s12, s15
 8021c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8021c68:	eddf 7a51 	vldr	s15, [pc, #324]	; 8021db0 <__ieee754_acosf+0x1e8>
 8021c6c:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8021c70:	eee8 7a46 	vfms.f32	s15, s16, s12
 8021c74:	ee38 8a67 	vsub.f32	s16, s16, s15
 8021c78:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8021db4 <__ieee754_acosf+0x1ec>
 8021c7c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8021c80:	e7b4      	b.n	8021bec <__ieee754_acosf+0x24>
 8021c82:	2800      	cmp	r0, #0
 8021c84:	eddf da40 	vldr	s27, [pc, #256]	; 8021d88 <__ieee754_acosf+0x1c0>
 8021c88:	eddf ca40 	vldr	s25, [pc, #256]	; 8021d8c <__ieee754_acosf+0x1c4>
 8021c8c:	ed9f ca41 	vldr	s24, [pc, #260]	; 8021d94 <__ieee754_acosf+0x1cc>
 8021c90:	eddf ba41 	vldr	s23, [pc, #260]	; 8021d98 <__ieee754_acosf+0x1d0>
 8021c94:	ed9f ba41 	vldr	s22, [pc, #260]	; 8021d9c <__ieee754_acosf+0x1d4>
 8021c98:	eddf 8a41 	vldr	s17, [pc, #260]	; 8021da0 <__ieee754_acosf+0x1d8>
 8021c9c:	ed9f da41 	vldr	s26, [pc, #260]	; 8021da4 <__ieee754_acosf+0x1dc>
 8021ca0:	eddf aa3b 	vldr	s21, [pc, #236]	; 8021d90 <__ieee754_acosf+0x1c8>
 8021ca4:	ed9f aa40 	vldr	s20, [pc, #256]	; 8021da8 <__ieee754_acosf+0x1e0>
 8021ca8:	eddf 9a40 	vldr	s19, [pc, #256]	; 8021dac <__ieee754_acosf+0x1e4>
 8021cac:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8021cb0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8021cb4:	da2c      	bge.n	8021d10 <__ieee754_acosf+0x148>
 8021cb6:	ee38 8a09 	vadd.f32	s16, s16, s18
 8021cba:	ee28 8a27 	vmul.f32	s16, s16, s15
 8021cbe:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8021cc2:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8021cc6:	eeac ca88 	vfma.f32	s24, s25, s16
 8021cca:	eeaa aa88 	vfma.f32	s20, s21, s16
 8021cce:	eeec ba08 	vfma.f32	s23, s24, s16
 8021cd2:	eeea 9a08 	vfma.f32	s19, s20, s16
 8021cd6:	eeab ba88 	vfma.f32	s22, s23, s16
 8021cda:	eea9 9a88 	vfma.f32	s18, s19, s16
 8021cde:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8021ce2:	ee18 0a10 	vmov	r0, s16
 8021ce6:	ee68 8a88 	vmul.f32	s17, s17, s16
 8021cea:	f000 fb29 	bl	8022340 <__ieee754_sqrtf>
 8021cee:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8021cf2:	ee07 0a90 	vmov	s15, r0
 8021cf6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8021db8 <__ieee754_acosf+0x1f0>
 8021cfa:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8021cfe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8021d02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021d06:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8021dbc <__ieee754_acosf+0x1f4>
 8021d0a:	eee7 7a66 	vfms.f32	s15, s14, s13
 8021d0e:	e76d      	b.n	8021bec <__ieee754_acosf+0x24>
 8021d10:	ee39 8a48 	vsub.f32	s16, s18, s16
 8021d14:	ee28 8a27 	vmul.f32	s16, s16, s15
 8021d18:	ee18 0a10 	vmov	r0, s16
 8021d1c:	f000 fb10 	bl	8022340 <__ieee754_sqrtf>
 8021d20:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8021d24:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8021d28:	f023 030f 	bic.w	r3, r3, #15
 8021d2c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8021d30:	eeac ca88 	vfma.f32	s24, s25, s16
 8021d34:	eeaa aa88 	vfma.f32	s20, s21, s16
 8021d38:	eeec ba08 	vfma.f32	s23, s24, s16
 8021d3c:	eeea 9a08 	vfma.f32	s19, s20, s16
 8021d40:	eeab ba88 	vfma.f32	s22, s23, s16
 8021d44:	ee07 3a10 	vmov	s14, r3
 8021d48:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8021d4c:	eef0 5a48 	vmov.f32	s11, s16
 8021d50:	ee06 0a90 	vmov	s13, r0
 8021d54:	eee7 5a47 	vfms.f32	s11, s14, s14
 8021d58:	eea9 9a88 	vfma.f32	s18, s19, s16
 8021d5c:	ee36 6a87 	vadd.f32	s12, s13, s14
 8021d60:	ee68 8a88 	vmul.f32	s17, s17, s16
 8021d64:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8021d68:	ee88 6a89 	vdiv.f32	s12, s17, s18
 8021d6c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8021d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021d74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8021d78:	e738      	b.n	8021bec <__ieee754_acosf+0x24>
 8021d7a:	eddf 7a11 	vldr	s15, [pc, #68]	; 8021dc0 <__ieee754_acosf+0x1f8>
 8021d7e:	e735      	b.n	8021bec <__ieee754_acosf+0x24>
 8021d80:	00000000 	.word	0x00000000
 8021d84:	40490fdb 	.word	0x40490fdb
 8021d88:	3811ef08 	.word	0x3811ef08
 8021d8c:	3a4f7f04 	.word	0x3a4f7f04
 8021d90:	bf303361 	.word	0xbf303361
 8021d94:	bd241146 	.word	0xbd241146
 8021d98:	3e4e0aa8 	.word	0x3e4e0aa8
 8021d9c:	bea6b090 	.word	0xbea6b090
 8021da0:	3e2aaaab 	.word	0x3e2aaaab
 8021da4:	3d9dc62e 	.word	0x3d9dc62e
 8021da8:	4001572d 	.word	0x4001572d
 8021dac:	c019d139 	.word	0xc019d139
 8021db0:	33a22168 	.word	0x33a22168
 8021db4:	3fc90fda 	.word	0x3fc90fda
 8021db8:	b3a22168 	.word	0xb3a22168
 8021dbc:	40490fda 	.word	0x40490fda
 8021dc0:	3fc90fdb 	.word	0x3fc90fdb

08021dc4 <__ieee754_asinf>:
 8021dc4:	b538      	push	{r3, r4, r5, lr}
 8021dc6:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8021dca:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8021dce:	ed2d 8b04 	vpush	{d8-d9}
 8021dd2:	ee07 0a90 	vmov	s15, r0
 8021dd6:	4605      	mov	r5, r0
 8021dd8:	d10e      	bne.n	8021df8 <__ieee754_asinf+0x34>
 8021dda:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8021f68 <__ieee754_asinf+0x1a4>
 8021dde:	eddf 6a63 	vldr	s13, [pc, #396]	; 8021f6c <__ieee754_asinf+0x1a8>
 8021de2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8021de6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8021dea:	eef0 7a47 	vmov.f32	s15, s14
 8021dee:	ecbd 8b04 	vpop	{d8-d9}
 8021df2:	ee17 0a90 	vmov	r0, s15
 8021df6:	bd38      	pop	{r3, r4, r5, pc}
 8021df8:	dd04      	ble.n	8021e04 <__ieee754_asinf+0x40>
 8021dfa:	ee37 7ae7 	vsub.f32	s14, s15, s15
 8021dfe:	eec7 7a07 	vdiv.f32	s15, s14, s14
 8021e02:	e7f4      	b.n	8021dee <__ieee754_asinf+0x2a>
 8021e04:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8021e08:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8021e0c:	da0b      	bge.n	8021e26 <__ieee754_asinf+0x62>
 8021e0e:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8021e12:	da5a      	bge.n	8021eca <__ieee754_asinf+0x106>
 8021e14:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8021f70 <__ieee754_asinf+0x1ac>
 8021e18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021e1c:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8021e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e24:	dce3      	bgt.n	8021dee <__ieee754_asinf+0x2a>
 8021e26:	ee17 0a90 	vmov	r0, s15
 8021e2a:	f7ff fc35 	bl	8021698 <fabsf>
 8021e2e:	ee07 0a90 	vmov	s15, r0
 8021e32:	ee38 8ae7 	vsub.f32	s16, s17, s15
 8021e36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8021e3a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8021e3e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8021f74 <__ieee754_asinf+0x1b0>
 8021e42:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8021f78 <__ieee754_asinf+0x1b4>
 8021e46:	ed9f 9a4d 	vldr	s18, [pc, #308]	; 8021f7c <__ieee754_asinf+0x1b8>
 8021e4a:	eea8 7a27 	vfma.f32	s14, s16, s15
 8021e4e:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8021f80 <__ieee754_asinf+0x1bc>
 8021e52:	eee7 7a08 	vfma.f32	s15, s14, s16
 8021e56:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8021f84 <__ieee754_asinf+0x1c0>
 8021e5a:	eea7 7a88 	vfma.f32	s14, s15, s16
 8021e5e:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8021f88 <__ieee754_asinf+0x1c4>
 8021e62:	eee7 7a08 	vfma.f32	s15, s14, s16
 8021e66:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8021f8c <__ieee754_asinf+0x1c8>
 8021e6a:	eea7 9a88 	vfma.f32	s18, s15, s16
 8021e6e:	eddf 7a48 	vldr	s15, [pc, #288]	; 8021f90 <__ieee754_asinf+0x1cc>
 8021e72:	eee8 7a07 	vfma.f32	s15, s16, s14
 8021e76:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8021f94 <__ieee754_asinf+0x1d0>
 8021e7a:	eea7 7a88 	vfma.f32	s14, s15, s16
 8021e7e:	eddf 7a46 	vldr	s15, [pc, #280]	; 8021f98 <__ieee754_asinf+0x1d4>
 8021e82:	eee7 7a08 	vfma.f32	s15, s14, s16
 8021e86:	ee18 0a10 	vmov	r0, s16
 8021e8a:	eee7 8a88 	vfma.f32	s17, s15, s16
 8021e8e:	f000 fa57 	bl	8022340 <__ieee754_sqrtf>
 8021e92:	4b42      	ldr	r3, [pc, #264]	; (8021f9c <__ieee754_asinf+0x1d8>)
 8021e94:	ee29 9a08 	vmul.f32	s18, s18, s16
 8021e98:	429c      	cmp	r4, r3
 8021e9a:	eec9 7a28 	vdiv.f32	s15, s18, s17
 8021e9e:	ee07 0a10 	vmov	s14, r0
 8021ea2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8021ea6:	dd3f      	ble.n	8021f28 <__ieee754_asinf+0x164>
 8021ea8:	eea7 7a27 	vfma.f32	s14, s14, s15
 8021eac:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8021fa0 <__ieee754_asinf+0x1dc>
 8021eb0:	eee7 7a25 	vfma.f32	s15, s14, s11
 8021eb4:	eef0 6a67 	vmov.f32	s13, s15
 8021eb8:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8021f6c <__ieee754_asinf+0x1a8>
 8021ebc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021ec0:	2d00      	cmp	r5, #0
 8021ec2:	bfd8      	it	le
 8021ec4:	eef1 7a67 	vnegle.f32	s15, s15
 8021ec8:	e791      	b.n	8021dee <__ieee754_asinf+0x2a>
 8021eca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8021ece:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8021f78 <__ieee754_asinf+0x1b4>
 8021ed2:	eddf 6a28 	vldr	s13, [pc, #160]	; 8021f74 <__ieee754_asinf+0x1b0>
 8021ed6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8021f8c <__ieee754_asinf+0x1c8>
 8021eda:	eee7 6a06 	vfma.f32	s13, s14, s12
 8021ede:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8021f80 <__ieee754_asinf+0x1bc>
 8021ee2:	eea6 6a87 	vfma.f32	s12, s13, s14
 8021ee6:	eddf 6a27 	vldr	s13, [pc, #156]	; 8021f84 <__ieee754_asinf+0x1c0>
 8021eea:	eee6 6a07 	vfma.f32	s13, s12, s14
 8021eee:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8021f88 <__ieee754_asinf+0x1c4>
 8021ef2:	eea6 6a87 	vfma.f32	s12, s13, s14
 8021ef6:	eddf 6a21 	vldr	s13, [pc, #132]	; 8021f7c <__ieee754_asinf+0x1b8>
 8021efa:	eee6 6a07 	vfma.f32	s13, s12, s14
 8021efe:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8021f90 <__ieee754_asinf+0x1cc>
 8021f02:	eea7 6a25 	vfma.f32	s12, s14, s11
 8021f06:	eddf 5a23 	vldr	s11, [pc, #140]	; 8021f94 <__ieee754_asinf+0x1d0>
 8021f0a:	eee6 5a07 	vfma.f32	s11, s12, s14
 8021f0e:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8021f98 <__ieee754_asinf+0x1d4>
 8021f12:	eea5 6a87 	vfma.f32	s12, s11, s14
 8021f16:	ee66 6a87 	vmul.f32	s13, s13, s14
 8021f1a:	eee6 8a07 	vfma.f32	s17, s12, s14
 8021f1e:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 8021f22:	eee7 7a87 	vfma.f32	s15, s15, s14
 8021f26:	e762      	b.n	8021dee <__ieee754_asinf+0x2a>
 8021f28:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8021f2c:	f023 030f 	bic.w	r3, r3, #15
 8021f30:	ee06 3a10 	vmov	s12, r3
 8021f34:	eea6 8a46 	vfms.f32	s16, s12, s12
 8021f38:	ee77 6a06 	vadd.f32	s13, s14, s12
 8021f3c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8021f40:	ee88 5a26 	vdiv.f32	s10, s16, s13
 8021f44:	eddf 6a08 	vldr	s13, [pc, #32]	; 8021f68 <__ieee754_asinf+0x1a4>
 8021f48:	eee5 6a65 	vfms.f32	s13, s10, s11
 8021f4c:	eed7 6a27 	vfnms.f32	s13, s14, s15
 8021f50:	eddf 7a14 	vldr	s15, [pc, #80]	; 8021fa4 <__ieee754_asinf+0x1e0>
 8021f54:	eeb0 7a67 	vmov.f32	s14, s15
 8021f58:	eea6 7a65 	vfms.f32	s14, s12, s11
 8021f5c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8021f60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021f64:	e7ac      	b.n	8021ec0 <__ieee754_asinf+0xfc>
 8021f66:	bf00      	nop
 8021f68:	b33bbd2e 	.word	0xb33bbd2e
 8021f6c:	3fc90fdb 	.word	0x3fc90fdb
 8021f70:	7149f2ca 	.word	0x7149f2ca
 8021f74:	3a4f7f04 	.word	0x3a4f7f04
 8021f78:	3811ef08 	.word	0x3811ef08
 8021f7c:	3e2aaaab 	.word	0x3e2aaaab
 8021f80:	bd241146 	.word	0xbd241146
 8021f84:	3e4e0aa8 	.word	0x3e4e0aa8
 8021f88:	bea6b090 	.word	0xbea6b090
 8021f8c:	3d9dc62e 	.word	0x3d9dc62e
 8021f90:	bf303361 	.word	0xbf303361
 8021f94:	4001572d 	.word	0x4001572d
 8021f98:	c019d139 	.word	0xc019d139
 8021f9c:	3f799999 	.word	0x3f799999
 8021fa0:	333bbd2e 	.word	0x333bbd2e
 8021fa4:	3f490fdb 	.word	0x3f490fdb

08021fa8 <__ieee754_atan2f>:
 8021fa8:	ee07 1a10 	vmov	s14, r1
 8021fac:	460a      	mov	r2, r1
 8021fae:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8021fb2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8021fb6:	b538      	push	{r3, r4, r5, lr}
 8021fb8:	ee07 0a90 	vmov	s15, r0
 8021fbc:	dc05      	bgt.n	8021fca <__ieee754_atan2f+0x22>
 8021fbe:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8021fc2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021fc6:	4605      	mov	r5, r0
 8021fc8:	dd04      	ble.n	8021fd4 <__ieee754_atan2f+0x2c>
 8021fca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021fce:	ee17 0a90 	vmov	r0, s15
 8021fd2:	bd38      	pop	{r3, r4, r5, pc}
 8021fd4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8021fd8:	d103      	bne.n	8021fe2 <__ieee754_atan2f+0x3a>
 8021fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021fde:	f7ff ba45 	b.w	802146c <atanf>
 8021fe2:	1794      	asrs	r4, r2, #30
 8021fe4:	f004 0402 	and.w	r4, r4, #2
 8021fe8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8021fec:	b943      	cbnz	r3, 8022000 <__ieee754_atan2f+0x58>
 8021fee:	2c02      	cmp	r4, #2
 8021ff0:	d060      	beq.n	80220b4 <__ieee754_atan2f+0x10c>
 8021ff2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80220c8 <__ieee754_atan2f+0x120>
 8021ff6:	2c03      	cmp	r4, #3
 8021ff8:	bf08      	it	eq
 8021ffa:	eef0 7a47 	vmoveq.f32	s15, s14
 8021ffe:	e7e6      	b.n	8021fce <__ieee754_atan2f+0x26>
 8022000:	b941      	cbnz	r1, 8022014 <__ieee754_atan2f+0x6c>
 8022002:	eddf 7a32 	vldr	s15, [pc, #200]	; 80220cc <__ieee754_atan2f+0x124>
 8022006:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80220d0 <__ieee754_atan2f+0x128>
 802200a:	2d00      	cmp	r5, #0
 802200c:	bfb8      	it	lt
 802200e:	eef0 7a47 	vmovlt.f32	s15, s14
 8022012:	e7dc      	b.n	8021fce <__ieee754_atan2f+0x26>
 8022014:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022018:	d110      	bne.n	802203c <__ieee754_atan2f+0x94>
 802201a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802201e:	f104 34ff 	add.w	r4, r4, #4294967295
 8022022:	d107      	bne.n	8022034 <__ieee754_atan2f+0x8c>
 8022024:	2c02      	cmp	r4, #2
 8022026:	d848      	bhi.n	80220ba <__ieee754_atan2f+0x112>
 8022028:	4b2a      	ldr	r3, [pc, #168]	; (80220d4 <__ieee754_atan2f+0x12c>)
 802202a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802202e:	edd4 7a00 	vldr	s15, [r4]
 8022032:	e7cc      	b.n	8021fce <__ieee754_atan2f+0x26>
 8022034:	2c02      	cmp	r4, #2
 8022036:	d843      	bhi.n	80220c0 <__ieee754_atan2f+0x118>
 8022038:	4b27      	ldr	r3, [pc, #156]	; (80220d8 <__ieee754_atan2f+0x130>)
 802203a:	e7f6      	b.n	802202a <__ieee754_atan2f+0x82>
 802203c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022040:	d0df      	beq.n	8022002 <__ieee754_atan2f+0x5a>
 8022042:	1a5b      	subs	r3, r3, r1
 8022044:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8022048:	ea4f 51e3 	mov.w	r1, r3, asr #23
 802204c:	da1c      	bge.n	8022088 <__ieee754_atan2f+0xe0>
 802204e:	2a00      	cmp	r2, #0
 8022050:	da01      	bge.n	8022056 <__ieee754_atan2f+0xae>
 8022052:	313c      	adds	r1, #60	; 0x3c
 8022054:	db1b      	blt.n	802208e <__ieee754_atan2f+0xe6>
 8022056:	eec7 7a87 	vdiv.f32	s15, s15, s14
 802205a:	ee17 0a90 	vmov	r0, s15
 802205e:	f7ff fb1b 	bl	8021698 <fabsf>
 8022062:	f7ff fa03 	bl	802146c <atanf>
 8022066:	ee07 0a90 	vmov	s15, r0
 802206a:	2c01      	cmp	r4, #1
 802206c:	d012      	beq.n	8022094 <__ieee754_atan2f+0xec>
 802206e:	2c02      	cmp	r4, #2
 8022070:	d017      	beq.n	80220a2 <__ieee754_atan2f+0xfa>
 8022072:	2c00      	cmp	r4, #0
 8022074:	d0ab      	beq.n	8021fce <__ieee754_atan2f+0x26>
 8022076:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80220dc <__ieee754_atan2f+0x134>
 802207a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802207e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80220e0 <__ieee754_atan2f+0x138>
 8022082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022086:	e7a2      	b.n	8021fce <__ieee754_atan2f+0x26>
 8022088:	eddf 7a10 	vldr	s15, [pc, #64]	; 80220cc <__ieee754_atan2f+0x124>
 802208c:	e7ed      	b.n	802206a <__ieee754_atan2f+0xc2>
 802208e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80220e4 <__ieee754_atan2f+0x13c>
 8022092:	e7ea      	b.n	802206a <__ieee754_atan2f+0xc2>
 8022094:	ee17 3a90 	vmov	r3, s15
 8022098:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802209c:	ee07 3a90 	vmov	s15, r3
 80220a0:	e795      	b.n	8021fce <__ieee754_atan2f+0x26>
 80220a2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80220dc <__ieee754_atan2f+0x134>
 80220a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80220aa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80220e0 <__ieee754_atan2f+0x138>
 80220ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80220b2:	e78c      	b.n	8021fce <__ieee754_atan2f+0x26>
 80220b4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80220e0 <__ieee754_atan2f+0x138>
 80220b8:	e789      	b.n	8021fce <__ieee754_atan2f+0x26>
 80220ba:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80220e8 <__ieee754_atan2f+0x140>
 80220be:	e786      	b.n	8021fce <__ieee754_atan2f+0x26>
 80220c0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80220e4 <__ieee754_atan2f+0x13c>
 80220c4:	e783      	b.n	8021fce <__ieee754_atan2f+0x26>
 80220c6:	bf00      	nop
 80220c8:	c0490fdb 	.word	0xc0490fdb
 80220cc:	3fc90fdb 	.word	0x3fc90fdb
 80220d0:	bfc90fdb 	.word	0xbfc90fdb
 80220d4:	08025c78 	.word	0x08025c78
 80220d8:	08025c84 	.word	0x08025c84
 80220dc:	33bbbd2e 	.word	0x33bbbd2e
 80220e0:	40490fdb 	.word	0x40490fdb
 80220e4:	00000000 	.word	0x00000000
 80220e8:	3f490fdb 	.word	0x3f490fdb

080220ec <__ieee754_rem_pio2f>:
 80220ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80220ee:	4b86      	ldr	r3, [pc, #536]	; (8022308 <__ieee754_rem_pio2f+0x21c>)
 80220f0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80220f4:	429d      	cmp	r5, r3
 80220f6:	ee07 0a90 	vmov	s15, r0
 80220fa:	b087      	sub	sp, #28
 80220fc:	460c      	mov	r4, r1
 80220fe:	4606      	mov	r6, r0
 8022100:	dc04      	bgt.n	802210c <__ieee754_rem_pio2f+0x20>
 8022102:	2300      	movs	r3, #0
 8022104:	6008      	str	r0, [r1, #0]
 8022106:	604b      	str	r3, [r1, #4]
 8022108:	2000      	movs	r0, #0
 802210a:	e020      	b.n	802214e <__ieee754_rem_pio2f+0x62>
 802210c:	4b7f      	ldr	r3, [pc, #508]	; (802230c <__ieee754_rem_pio2f+0x220>)
 802210e:	429d      	cmp	r5, r3
 8022110:	dc38      	bgt.n	8022184 <__ieee754_rem_pio2f+0x98>
 8022112:	2800      	cmp	r0, #0
 8022114:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8022310 <__ieee754_rem_pio2f+0x224>
 8022118:	4b7e      	ldr	r3, [pc, #504]	; (8022314 <__ieee754_rem_pio2f+0x228>)
 802211a:	f025 050f 	bic.w	r5, r5, #15
 802211e:	dd18      	ble.n	8022152 <__ieee754_rem_pio2f+0x66>
 8022120:	429d      	cmp	r5, r3
 8022122:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022126:	bf09      	itett	eq
 8022128:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8022318 <__ieee754_rem_pio2f+0x22c>
 802212c:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 802231c <__ieee754_rem_pio2f+0x230>
 8022130:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8022134:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 8022320 <__ieee754_rem_pio2f+0x234>
 8022138:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802213c:	2001      	movs	r0, #1
 802213e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8022142:	edc1 6a00 	vstr	s13, [r1]
 8022146:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802214a:	edc1 7a01 	vstr	s15, [r1, #4]
 802214e:	b007      	add	sp, #28
 8022150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022152:	429d      	cmp	r5, r3
 8022154:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022158:	bf09      	itett	eq
 802215a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8022318 <__ieee754_rem_pio2f+0x22c>
 802215e:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 802231c <__ieee754_rem_pio2f+0x230>
 8022162:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8022166:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 8022320 <__ieee754_rem_pio2f+0x234>
 802216a:	ee77 6a87 	vadd.f32	s13, s15, s14
 802216e:	f04f 30ff 	mov.w	r0, #4294967295
 8022172:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8022176:	edc1 6a00 	vstr	s13, [r1]
 802217a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802217e:	edc1 7a01 	vstr	s15, [r1, #4]
 8022182:	e7e4      	b.n	802214e <__ieee754_rem_pio2f+0x62>
 8022184:	4b67      	ldr	r3, [pc, #412]	; (8022324 <__ieee754_rem_pio2f+0x238>)
 8022186:	429d      	cmp	r5, r3
 8022188:	dc74      	bgt.n	8022274 <__ieee754_rem_pio2f+0x188>
 802218a:	f7ff fa85 	bl	8021698 <fabsf>
 802218e:	eddf 6a66 	vldr	s13, [pc, #408]	; 8022328 <__ieee754_rem_pio2f+0x23c>
 8022192:	ee07 0a90 	vmov	s15, r0
 8022196:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802219a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 802219e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80221a2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80221a6:	ee17 0a10 	vmov	r0, s14
 80221aa:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8022310 <__ieee754_rem_pio2f+0x224>
 80221ae:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80221b2:	281f      	cmp	r0, #31
 80221b4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 802231c <__ieee754_rem_pio2f+0x230>
 80221b8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80221bc:	eef1 5a66 	vneg.f32	s11, s13
 80221c0:	ee37 6ac7 	vsub.f32	s12, s15, s14
 80221c4:	ee16 2a10 	vmov	r2, s12
 80221c8:	dc1c      	bgt.n	8022204 <__ieee754_rem_pio2f+0x118>
 80221ca:	4958      	ldr	r1, [pc, #352]	; (802232c <__ieee754_rem_pio2f+0x240>)
 80221cc:	1e47      	subs	r7, r0, #1
 80221ce:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80221d2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80221d6:	428b      	cmp	r3, r1
 80221d8:	d014      	beq.n	8022204 <__ieee754_rem_pio2f+0x118>
 80221da:	6022      	str	r2, [r4, #0]
 80221dc:	edd4 6a00 	vldr	s13, [r4]
 80221e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80221e4:	2e00      	cmp	r6, #0
 80221e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80221ea:	edc4 7a01 	vstr	s15, [r4, #4]
 80221ee:	daae      	bge.n	802214e <__ieee754_rem_pio2f+0x62>
 80221f0:	eef1 6a66 	vneg.f32	s13, s13
 80221f4:	edc4 6a00 	vstr	s13, [r4]
 80221f8:	eef1 7a67 	vneg.f32	s15, s15
 80221fc:	edc4 7a01 	vstr	s15, [r4, #4]
 8022200:	4240      	negs	r0, r0
 8022202:	e7a4      	b.n	802214e <__ieee754_rem_pio2f+0x62>
 8022204:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8022208:	15eb      	asrs	r3, r5, #23
 802220a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802220e:	2d08      	cmp	r5, #8
 8022210:	dde3      	ble.n	80221da <__ieee754_rem_pio2f+0xee>
 8022212:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8022318 <__ieee754_rem_pio2f+0x22c>
 8022216:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8022320 <__ieee754_rem_pio2f+0x234>
 802221a:	eeb0 6a67 	vmov.f32	s12, s15
 802221e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8022222:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8022226:	eee5 7a87 	vfma.f32	s15, s11, s14
 802222a:	eed6 7a85 	vfnms.f32	s15, s13, s10
 802222e:	eeb0 7a67 	vmov.f32	s14, s15
 8022232:	ee76 7a67 	vsub.f32	s15, s12, s15
 8022236:	ee17 2a90 	vmov	r2, s15
 802223a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802223e:	1a5b      	subs	r3, r3, r1
 8022240:	2b19      	cmp	r3, #25
 8022242:	dc04      	bgt.n	802224e <__ieee754_rem_pio2f+0x162>
 8022244:	edc4 7a00 	vstr	s15, [r4]
 8022248:	eef0 7a46 	vmov.f32	s15, s12
 802224c:	e7c6      	b.n	80221dc <__ieee754_rem_pio2f+0xf0>
 802224e:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8022330 <__ieee754_rem_pio2f+0x244>
 8022252:	eef0 7a46 	vmov.f32	s15, s12
 8022256:	eee5 7a85 	vfma.f32	s15, s11, s10
 802225a:	ee36 7a67 	vsub.f32	s14, s12, s15
 802225e:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8022334 <__ieee754_rem_pio2f+0x248>
 8022262:	eea5 7a85 	vfma.f32	s14, s11, s10
 8022266:	ee96 7a86 	vfnms.f32	s14, s13, s12
 802226a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802226e:	edc4 6a00 	vstr	s13, [r4]
 8022272:	e7b3      	b.n	80221dc <__ieee754_rem_pio2f+0xf0>
 8022274:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8022278:	db06      	blt.n	8022288 <__ieee754_rem_pio2f+0x19c>
 802227a:	ee77 7ae7 	vsub.f32	s15, s15, s15
 802227e:	edc1 7a01 	vstr	s15, [r1, #4]
 8022282:	edc1 7a00 	vstr	s15, [r1]
 8022286:	e73f      	b.n	8022108 <__ieee754_rem_pio2f+0x1c>
 8022288:	15ea      	asrs	r2, r5, #23
 802228a:	3a86      	subs	r2, #134	; 0x86
 802228c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8022290:	ee07 3a90 	vmov	s15, r3
 8022294:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8022298:	eddf 6a27 	vldr	s13, [pc, #156]	; 8022338 <__ieee754_rem_pio2f+0x24c>
 802229c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80222a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80222a4:	ed8d 7a03 	vstr	s14, [sp, #12]
 80222a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80222ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80222b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80222b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80222b8:	ed8d 7a04 	vstr	s14, [sp, #16]
 80222bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80222c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80222c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222c8:	edcd 7a05 	vstr	s15, [sp, #20]
 80222cc:	d11a      	bne.n	8022304 <__ieee754_rem_pio2f+0x218>
 80222ce:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80222d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222d6:	bf14      	ite	ne
 80222d8:	2302      	movne	r3, #2
 80222da:	2301      	moveq	r3, #1
 80222dc:	4917      	ldr	r1, [pc, #92]	; (802233c <__ieee754_rem_pio2f+0x250>)
 80222de:	9101      	str	r1, [sp, #4]
 80222e0:	2102      	movs	r1, #2
 80222e2:	9100      	str	r1, [sp, #0]
 80222e4:	a803      	add	r0, sp, #12
 80222e6:	4621      	mov	r1, r4
 80222e8:	f000 f896 	bl	8022418 <__kernel_rem_pio2f>
 80222ec:	2e00      	cmp	r6, #0
 80222ee:	f6bf af2e 	bge.w	802214e <__ieee754_rem_pio2f+0x62>
 80222f2:	edd4 7a00 	vldr	s15, [r4]
 80222f6:	eef1 7a67 	vneg.f32	s15, s15
 80222fa:	edc4 7a00 	vstr	s15, [r4]
 80222fe:	edd4 7a01 	vldr	s15, [r4, #4]
 8022302:	e779      	b.n	80221f8 <__ieee754_rem_pio2f+0x10c>
 8022304:	2303      	movs	r3, #3
 8022306:	e7e9      	b.n	80222dc <__ieee754_rem_pio2f+0x1f0>
 8022308:	3f490fd8 	.word	0x3f490fd8
 802230c:	4016cbe3 	.word	0x4016cbe3
 8022310:	3fc90f80 	.word	0x3fc90f80
 8022314:	3fc90fd0 	.word	0x3fc90fd0
 8022318:	37354400 	.word	0x37354400
 802231c:	37354443 	.word	0x37354443
 8022320:	2e85a308 	.word	0x2e85a308
 8022324:	43490f80 	.word	0x43490f80
 8022328:	3f22f984 	.word	0x3f22f984
 802232c:	08025c90 	.word	0x08025c90
 8022330:	2e85a300 	.word	0x2e85a300
 8022334:	248d3132 	.word	0x248d3132
 8022338:	43800000 	.word	0x43800000
 802233c:	08025d10 	.word	0x08025d10

08022340 <__ieee754_sqrtf>:
 8022340:	ee07 0a90 	vmov	s15, r0
 8022344:	eef1 7ae7 	vsqrt.f32	s15, s15
 8022348:	ee17 0a90 	vmov	r0, s15
 802234c:	4770      	bx	lr
	...

08022350 <__kernel_cosf>:
 8022350:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8022354:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8022358:	ee05 0a10 	vmov	s10, r0
 802235c:	ee07 1a10 	vmov	s14, r1
 8022360:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8022364:	da05      	bge.n	8022372 <__kernel_cosf+0x22>
 8022366:	eefd 7ac5 	vcvt.s32.f32	s15, s10
 802236a:	ee17 2a90 	vmov	r2, s15
 802236e:	2a00      	cmp	r2, #0
 8022370:	d03f      	beq.n	80223f2 <__kernel_cosf+0xa2>
 8022372:	ee65 5a05 	vmul.f32	s11, s10, s10
 8022376:	eddf 7a20 	vldr	s15, [pc, #128]	; 80223f8 <__kernel_cosf+0xa8>
 802237a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80223fc <__kernel_cosf+0xac>
 802237e:	4a20      	ldr	r2, [pc, #128]	; (8022400 <__kernel_cosf+0xb0>)
 8022380:	eee5 6aa7 	vfma.f32	s13, s11, s15
 8022384:	4293      	cmp	r3, r2
 8022386:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8022404 <__kernel_cosf+0xb4>
 802238a:	eee6 7aa5 	vfma.f32	s15, s13, s11
 802238e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8022408 <__kernel_cosf+0xb8>
 8022392:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8022396:	eddf 7a1d 	vldr	s15, [pc, #116]	; 802240c <__kernel_cosf+0xbc>
 802239a:	eee6 7aa5 	vfma.f32	s15, s13, s11
 802239e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8022410 <__kernel_cosf+0xc0>
 80223a2:	eee7 6aa5 	vfma.f32	s13, s15, s11
 80223a6:	ee27 7a45 	vnmul.f32	s14, s14, s10
 80223aa:	eef0 4a66 	vmov.f32	s9, s13
 80223ae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80223b2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80223b6:	ee64 6aa5 	vmul.f32	s13, s9, s11
 80223ba:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80223be:	dc06      	bgt.n	80223ce <__kernel_cosf+0x7e>
 80223c0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80223c4:	ee76 7a47 	vsub.f32	s15, s12, s14
 80223c8:	ee17 0a90 	vmov	r0, s15
 80223cc:	4770      	bx	lr
 80223ce:	4a11      	ldr	r2, [pc, #68]	; (8022414 <__kernel_cosf+0xc4>)
 80223d0:	4293      	cmp	r3, r2
 80223d2:	bfda      	itte	le
 80223d4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80223d8:	ee06 3a90 	vmovle	s13, r3
 80223dc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80223e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80223e4:	ee36 6a66 	vsub.f32	s12, s12, s13
 80223e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80223ec:	ee76 7a67 	vsub.f32	s15, s12, s15
 80223f0:	e7ea      	b.n	80223c8 <__kernel_cosf+0x78>
 80223f2:	eef0 7a46 	vmov.f32	s15, s12
 80223f6:	e7e7      	b.n	80223c8 <__kernel_cosf+0x78>
 80223f8:	ad47d74e 	.word	0xad47d74e
 80223fc:	310f74f6 	.word	0x310f74f6
 8022400:	3e999999 	.word	0x3e999999
 8022404:	b493f27c 	.word	0xb493f27c
 8022408:	37d00d01 	.word	0x37d00d01
 802240c:	bab60b61 	.word	0xbab60b61
 8022410:	3d2aaaab 	.word	0x3d2aaaab
 8022414:	3f480000 	.word	0x3f480000

08022418 <__kernel_rem_pio2f>:
 8022418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802241c:	ed2d 8b04 	vpush	{d8-d9}
 8022420:	b0d9      	sub	sp, #356	; 0x164
 8022422:	4691      	mov	r9, r2
 8022424:	4688      	mov	r8, r1
 8022426:	4abc      	ldr	r2, [pc, #752]	; (8022718 <__kernel_rem_pio2f+0x300>)
 8022428:	9966      	ldr	r1, [sp, #408]	; 0x198
 802242a:	f8dd c19c 	ldr.w	ip, [sp, #412]	; 0x19c
 802242e:	f852 b021 	ldr.w	fp, [r2, r1, lsl #2]
 8022432:	9002      	str	r0, [sp, #8]
 8022434:	f119 0f04 	cmn.w	r9, #4
 8022438:	9301      	str	r3, [sp, #4]
 802243a:	f103 32ff 	add.w	r2, r3, #4294967295
 802243e:	db25      	blt.n	802248c <__kernel_rem_pio2f+0x74>
 8022440:	f1b9 0103 	subs.w	r1, r9, #3
 8022444:	bf48      	it	mi
 8022446:	f109 0104 	addmi.w	r1, r9, #4
 802244a:	10c9      	asrs	r1, r1, #3
 802244c:	1c4d      	adds	r5, r1, #1
 802244e:	00e8      	lsls	r0, r5, #3
 8022450:	1a8e      	subs	r6, r1, r2
 8022452:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8022728 <__kernel_rem_pio2f+0x310>
 8022456:	9003      	str	r0, [sp, #12]
 8022458:	eba9 05c5 	sub.w	r5, r9, r5, lsl #3
 802245c:	eb0b 0702 	add.w	r7, fp, r2
 8022460:	ac1c      	add	r4, sp, #112	; 0x70
 8022462:	eb0c 0e86 	add.w	lr, ip, r6, lsl #2
 8022466:	2000      	movs	r0, #0
 8022468:	42b8      	cmp	r0, r7
 802246a:	dd11      	ble.n	8022490 <__kernel_rem_pio2f+0x78>
 802246c:	9b01      	ldr	r3, [sp, #4]
 802246e:	a81c      	add	r0, sp, #112	; 0x70
 8022470:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8022474:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 8022478:	2700      	movs	r7, #0
 802247a:	455f      	cmp	r7, fp
 802247c:	dc26      	bgt.n	80224cc <__kernel_rem_pio2f+0xb4>
 802247e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8022482:	eddf 7aa9 	vldr	s15, [pc, #676]	; 8022728 <__kernel_rem_pio2f+0x310>
 8022486:	4606      	mov	r6, r0
 8022488:	2400      	movs	r4, #0
 802248a:	e016      	b.n	80224ba <__kernel_rem_pio2f+0xa2>
 802248c:	2100      	movs	r1, #0
 802248e:	e7dd      	b.n	802244c <__kernel_rem_pio2f+0x34>
 8022490:	42c6      	cmn	r6, r0
 8022492:	bf5d      	ittte	pl
 8022494:	f85e 3020 	ldrpl.w	r3, [lr, r0, lsl #2]
 8022498:	ee07 3a90 	vmovpl	s15, r3
 802249c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80224a0:	eef0 7a47 	vmovmi.f32	s15, s14
 80224a4:	ece4 7a01 	vstmia	r4!, {s15}
 80224a8:	3001      	adds	r0, #1
 80224aa:	e7dd      	b.n	8022468 <__kernel_rem_pio2f+0x50>
 80224ac:	ecfe 6a01 	vldmia	lr!, {s13}
 80224b0:	ed96 7a00 	vldr	s14, [r6]
 80224b4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80224b8:	3401      	adds	r4, #1
 80224ba:	4294      	cmp	r4, r2
 80224bc:	f1a6 0604 	sub.w	r6, r6, #4
 80224c0:	ddf4      	ble.n	80224ac <__kernel_rem_pio2f+0x94>
 80224c2:	ecea 7a01 	vstmia	sl!, {s15}
 80224c6:	3701      	adds	r7, #1
 80224c8:	3004      	adds	r0, #4
 80224ca:	e7d6      	b.n	802247a <__kernel_rem_pio2f+0x62>
 80224cc:	ab08      	add	r3, sp, #32
 80224ce:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 80224d2:	9305      	str	r3, [sp, #20]
 80224d4:	eddf 8a93 	vldr	s17, [pc, #588]	; 8022724 <__kernel_rem_pio2f+0x30c>
 80224d8:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8022720 <__kernel_rem_pio2f+0x308>
 80224dc:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
 80224e0:	9304      	str	r3, [sp, #16]
 80224e2:	465e      	mov	r6, fp
 80224e4:	00b3      	lsls	r3, r6, #2
 80224e6:	9306      	str	r3, [sp, #24]
 80224e8:	ab58      	add	r3, sp, #352	; 0x160
 80224ea:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 80224ee:	ac08      	add	r4, sp, #32
 80224f0:	ab44      	add	r3, sp, #272	; 0x110
 80224f2:	ed51 7a14 	vldr	s15, [r1, #-80]	; 0xffffffb0
 80224f6:	4627      	mov	r7, r4
 80224f8:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 80224fc:	4630      	mov	r0, r6
 80224fe:	2800      	cmp	r0, #0
 8022500:	f1a1 0104 	sub.w	r1, r1, #4
 8022504:	dc53      	bgt.n	80225ae <__kernel_rem_pio2f+0x196>
 8022506:	ee17 0a90 	vmov	r0, s15
 802250a:	4629      	mov	r1, r5
 802250c:	9207      	str	r2, [sp, #28]
 802250e:	f000 fb77 	bl	8022c00 <scalbnf>
 8022512:	ee08 0a10 	vmov	s16, r0
 8022516:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 802251a:	ee68 7a27 	vmul.f32	s15, s16, s15
 802251e:	ee17 0a90 	vmov	r0, s15
 8022522:	f000 fb23 	bl	8022b6c <floorf>
 8022526:	ee07 0a10 	vmov	s14, r0
 802252a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802252e:	eea7 8a67 	vfms.f32	s16, s14, s15
 8022532:	2d00      	cmp	r5, #0
 8022534:	9a07      	ldr	r2, [sp, #28]
 8022536:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802253a:	ee17 aa90 	vmov	sl, s15
 802253e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022542:	ee38 8a67 	vsub.f32	s16, s16, s15
 8022546:	dd44      	ble.n	80225d2 <__kernel_rem_pio2f+0x1ba>
 8022548:	1e70      	subs	r0, r6, #1
 802254a:	ab08      	add	r3, sp, #32
 802254c:	f1c5 0c08 	rsb	ip, r5, #8
 8022550:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8022554:	fa47 f10c 	asr.w	r1, r7, ip
 8022558:	448a      	add	sl, r1
 802255a:	fa01 f10c 	lsl.w	r1, r1, ip
 802255e:	1a7f      	subs	r7, r7, r1
 8022560:	f1c5 0107 	rsb	r1, r5, #7
 8022564:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8022568:	410f      	asrs	r7, r1
 802256a:	2f00      	cmp	r7, #0
 802256c:	dd40      	ble.n	80225f0 <__kernel_rem_pio2f+0x1d8>
 802256e:	2000      	movs	r0, #0
 8022570:	f10a 0a01 	add.w	sl, sl, #1
 8022574:	4603      	mov	r3, r0
 8022576:	4286      	cmp	r6, r0
 8022578:	dc6e      	bgt.n	8022658 <__kernel_rem_pio2f+0x240>
 802257a:	2d00      	cmp	r5, #0
 802257c:	dd04      	ble.n	8022588 <__kernel_rem_pio2f+0x170>
 802257e:	2d01      	cmp	r5, #1
 8022580:	d07a      	beq.n	8022678 <__kernel_rem_pio2f+0x260>
 8022582:	2d02      	cmp	r5, #2
 8022584:	f000 8082 	beq.w	802268c <__kernel_rem_pio2f+0x274>
 8022588:	2f02      	cmp	r7, #2
 802258a:	d131      	bne.n	80225f0 <__kernel_rem_pio2f+0x1d8>
 802258c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022590:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8022594:	b363      	cbz	r3, 80225f0 <__kernel_rem_pio2f+0x1d8>
 8022596:	ee17 0a90 	vmov	r0, s15
 802259a:	4629      	mov	r1, r5
 802259c:	9207      	str	r2, [sp, #28]
 802259e:	f000 fb2f 	bl	8022c00 <scalbnf>
 80225a2:	ee07 0a90 	vmov	s15, r0
 80225a6:	9a07      	ldr	r2, [sp, #28]
 80225a8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80225ac:	e020      	b.n	80225f0 <__kernel_rem_pio2f+0x1d8>
 80225ae:	ee27 7aa8 	vmul.f32	s14, s15, s17
 80225b2:	3801      	subs	r0, #1
 80225b4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80225b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80225bc:	eee7 7a49 	vfms.f32	s15, s14, s18
 80225c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80225c4:	ece7 7a01 	vstmia	r7!, {s15}
 80225c8:	edd1 7a00 	vldr	s15, [r1]
 80225cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80225d0:	e795      	b.n	80224fe <__kernel_rem_pio2f+0xe6>
 80225d2:	d105      	bne.n	80225e0 <__kernel_rem_pio2f+0x1c8>
 80225d4:	1e71      	subs	r1, r6, #1
 80225d6:	ab08      	add	r3, sp, #32
 80225d8:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
 80225dc:	11ff      	asrs	r7, r7, #7
 80225de:	e7c4      	b.n	802256a <__kernel_rem_pio2f+0x152>
 80225e0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80225e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80225e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225ec:	da32      	bge.n	8022654 <__kernel_rem_pio2f+0x23c>
 80225ee:	2700      	movs	r7, #0
 80225f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80225f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225f8:	f040 8098 	bne.w	802272c <__kernel_rem_pio2f+0x314>
 80225fc:	1e74      	subs	r4, r6, #1
 80225fe:	4621      	mov	r1, r4
 8022600:	2000      	movs	r0, #0
 8022602:	4559      	cmp	r1, fp
 8022604:	da49      	bge.n	802269a <__kernel_rem_pio2f+0x282>
 8022606:	2800      	cmp	r0, #0
 8022608:	d078      	beq.n	80226fc <__kernel_rem_pio2f+0x2e4>
 802260a:	ab08      	add	r3, sp, #32
 802260c:	3d08      	subs	r5, #8
 802260e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8022612:	2b00      	cmp	r3, #0
 8022614:	d07d      	beq.n	8022712 <__kernel_rem_pio2f+0x2fa>
 8022616:	4629      	mov	r1, r5
 8022618:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 802261c:	f000 faf0 	bl	8022c00 <scalbnf>
 8022620:	00a5      	lsls	r5, r4, #2
 8022622:	aa44      	add	r2, sp, #272	; 0x110
 8022624:	1d2b      	adds	r3, r5, #4
 8022626:	ee07 0a90 	vmov	s15, r0
 802262a:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8022724 <__kernel_rem_pio2f+0x30c>
 802262e:	18d1      	adds	r1, r2, r3
 8022630:	4622      	mov	r2, r4
 8022632:	2a00      	cmp	r2, #0
 8022634:	f280 80ad 	bge.w	8022792 <__kernel_rem_pio2f+0x37a>
 8022638:	4622      	mov	r2, r4
 802263a:	2a00      	cmp	r2, #0
 802263c:	f2c0 80cb 	blt.w	80227d6 <__kernel_rem_pio2f+0x3be>
 8022640:	a944      	add	r1, sp, #272	; 0x110
 8022642:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8022646:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 802271c <__kernel_rem_pio2f+0x304>
 802264a:	eddf 7a37 	vldr	s15, [pc, #220]	; 8022728 <__kernel_rem_pio2f+0x310>
 802264e:	2000      	movs	r0, #0
 8022650:	1aa1      	subs	r1, r4, r2
 8022652:	e0b5      	b.n	80227c0 <__kernel_rem_pio2f+0x3a8>
 8022654:	2702      	movs	r7, #2
 8022656:	e78a      	b.n	802256e <__kernel_rem_pio2f+0x156>
 8022658:	6821      	ldr	r1, [r4, #0]
 802265a:	b943      	cbnz	r3, 802266e <__kernel_rem_pio2f+0x256>
 802265c:	b119      	cbz	r1, 8022666 <__kernel_rem_pio2f+0x24e>
 802265e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8022662:	6021      	str	r1, [r4, #0]
 8022664:	2101      	movs	r1, #1
 8022666:	3001      	adds	r0, #1
 8022668:	3404      	adds	r4, #4
 802266a:	460b      	mov	r3, r1
 802266c:	e783      	b.n	8022576 <__kernel_rem_pio2f+0x15e>
 802266e:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8022672:	6021      	str	r1, [r4, #0]
 8022674:	4619      	mov	r1, r3
 8022676:	e7f6      	b.n	8022666 <__kernel_rem_pio2f+0x24e>
 8022678:	1e70      	subs	r0, r6, #1
 802267a:	a908      	add	r1, sp, #32
 802267c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8022680:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8022684:	ac08      	add	r4, sp, #32
 8022686:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 802268a:	e77d      	b.n	8022588 <__kernel_rem_pio2f+0x170>
 802268c:	1e70      	subs	r0, r6, #1
 802268e:	a908      	add	r1, sp, #32
 8022690:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8022694:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8022698:	e7f4      	b.n	8022684 <__kernel_rem_pio2f+0x26c>
 802269a:	ab08      	add	r3, sp, #32
 802269c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80226a0:	3901      	subs	r1, #1
 80226a2:	4318      	orrs	r0, r3
 80226a4:	e7ad      	b.n	8022602 <__kernel_rem_pio2f+0x1ea>
 80226a6:	3701      	adds	r7, #1
 80226a8:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 80226ac:	2800      	cmp	r0, #0
 80226ae:	d0fa      	beq.n	80226a6 <__kernel_rem_pio2f+0x28e>
 80226b0:	9b06      	ldr	r3, [sp, #24]
 80226b2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80226b6:	eb0d 0103 	add.w	r1, sp, r3
 80226ba:	9b01      	ldr	r3, [sp, #4]
 80226bc:	18f0      	adds	r0, r6, r3
 80226be:	ab1c      	add	r3, sp, #112	; 0x70
 80226c0:	1c74      	adds	r4, r6, #1
 80226c2:	394c      	subs	r1, #76	; 0x4c
 80226c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80226c8:	443e      	add	r6, r7
 80226ca:	42a6      	cmp	r6, r4
 80226cc:	f6ff af0a 	blt.w	80224e4 <__kernel_rem_pio2f+0xcc>
 80226d0:	9b04      	ldr	r3, [sp, #16]
 80226d2:	f8dd c008 	ldr.w	ip, [sp, #8]
 80226d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80226da:	9306      	str	r3, [sp, #24]
 80226dc:	ee07 3a90 	vmov	s15, r3
 80226e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80226e4:	2700      	movs	r7, #0
 80226e6:	ece0 7a01 	vstmia	r0!, {s15}
 80226ea:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8022728 <__kernel_rem_pio2f+0x310>
 80226ee:	4686      	mov	lr, r0
 80226f0:	4297      	cmp	r7, r2
 80226f2:	dd06      	ble.n	8022702 <__kernel_rem_pio2f+0x2ea>
 80226f4:	ece1 7a01 	vstmia	r1!, {s15}
 80226f8:	3401      	adds	r4, #1
 80226fa:	e7e6      	b.n	80226ca <__kernel_rem_pio2f+0x2b2>
 80226fc:	9905      	ldr	r1, [sp, #20]
 80226fe:	2701      	movs	r7, #1
 8022700:	e7d2      	b.n	80226a8 <__kernel_rem_pio2f+0x290>
 8022702:	ecfc 6a01 	vldmia	ip!, {s13}
 8022706:	ed3e 7a01 	vldmdb	lr!, {s14}
 802270a:	3701      	adds	r7, #1
 802270c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8022710:	e7ee      	b.n	80226f0 <__kernel_rem_pio2f+0x2d8>
 8022712:	3c01      	subs	r4, #1
 8022714:	e779      	b.n	802260a <__kernel_rem_pio2f+0x1f2>
 8022716:	bf00      	nop
 8022718:	08026054 	.word	0x08026054
 802271c:	08026028 	.word	0x08026028
 8022720:	43800000 	.word	0x43800000
 8022724:	3b800000 	.word	0x3b800000
 8022728:	00000000 	.word	0x00000000
 802272c:	9b03      	ldr	r3, [sp, #12]
 802272e:	ee18 0a10 	vmov	r0, s16
 8022732:	eba3 0109 	sub.w	r1, r3, r9
 8022736:	f000 fa63 	bl	8022c00 <scalbnf>
 802273a:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8022720 <__kernel_rem_pio2f+0x308>
 802273e:	ee07 0a90 	vmov	s15, r0
 8022742:	eef4 7ae6 	vcmpe.f32	s15, s13
 8022746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802274a:	db19      	blt.n	8022780 <__kernel_rem_pio2f+0x368>
 802274c:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8022724 <__kernel_rem_pio2f+0x30c>
 8022750:	ee27 7a87 	vmul.f32	s14, s15, s14
 8022754:	aa08      	add	r2, sp, #32
 8022756:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 802275a:	1c74      	adds	r4, r6, #1
 802275c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8022760:	3508      	adds	r5, #8
 8022762:	eee7 7a66 	vfms.f32	s15, s14, s13
 8022766:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 802276a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802276e:	ee17 3a90 	vmov	r3, s15
 8022772:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8022776:	ee17 3a10 	vmov	r3, s14
 802277a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 802277e:	e74a      	b.n	8022616 <__kernel_rem_pio2f+0x1fe>
 8022780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022784:	aa08      	add	r2, sp, #32
 8022786:	ee17 3a90 	vmov	r3, s15
 802278a:	4634      	mov	r4, r6
 802278c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8022790:	e741      	b.n	8022616 <__kernel_rem_pio2f+0x1fe>
 8022792:	a808      	add	r0, sp, #32
 8022794:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8022798:	9001      	str	r0, [sp, #4]
 802279a:	ee07 0a10 	vmov	s14, r0
 802279e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80227a2:	3a01      	subs	r2, #1
 80227a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80227a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80227ac:	ed21 7a01 	vstmdb	r1!, {s14}
 80227b0:	e73f      	b.n	8022632 <__kernel_rem_pio2f+0x21a>
 80227b2:	ecfc 6a01 	vldmia	ip!, {s13}
 80227b6:	ecb6 7a01 	vldmia	r6!, {s14}
 80227ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80227be:	3001      	adds	r0, #1
 80227c0:	4558      	cmp	r0, fp
 80227c2:	dc01      	bgt.n	80227c8 <__kernel_rem_pio2f+0x3b0>
 80227c4:	4288      	cmp	r0, r1
 80227c6:	ddf4      	ble.n	80227b2 <__kernel_rem_pio2f+0x39a>
 80227c8:	a858      	add	r0, sp, #352	; 0x160
 80227ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80227ce:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80227d2:	3a01      	subs	r2, #1
 80227d4:	e731      	b.n	802263a <__kernel_rem_pio2f+0x222>
 80227d6:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80227d8:	2a02      	cmp	r2, #2
 80227da:	dc09      	bgt.n	80227f0 <__kernel_rem_pio2f+0x3d8>
 80227dc:	2a00      	cmp	r2, #0
 80227de:	dc2a      	bgt.n	8022836 <__kernel_rem_pio2f+0x41e>
 80227e0:	d043      	beq.n	802286a <__kernel_rem_pio2f+0x452>
 80227e2:	f00a 0007 	and.w	r0, sl, #7
 80227e6:	b059      	add	sp, #356	; 0x164
 80227e8:	ecbd 8b04 	vpop	{d8-d9}
 80227ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227f0:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80227f2:	2b03      	cmp	r3, #3
 80227f4:	d1f5      	bne.n	80227e2 <__kernel_rem_pio2f+0x3ca>
 80227f6:	ab30      	add	r3, sp, #192	; 0xc0
 80227f8:	442b      	add	r3, r5
 80227fa:	461a      	mov	r2, r3
 80227fc:	4619      	mov	r1, r3
 80227fe:	4620      	mov	r0, r4
 8022800:	2800      	cmp	r0, #0
 8022802:	f1a1 0104 	sub.w	r1, r1, #4
 8022806:	dc51      	bgt.n	80228ac <__kernel_rem_pio2f+0x494>
 8022808:	4621      	mov	r1, r4
 802280a:	2901      	cmp	r1, #1
 802280c:	f1a2 0204 	sub.w	r2, r2, #4
 8022810:	dc5c      	bgt.n	80228cc <__kernel_rem_pio2f+0x4b4>
 8022812:	ed5f 7a3b 	vldr	s15, [pc, #-236]	; 8022728 <__kernel_rem_pio2f+0x310>
 8022816:	3304      	adds	r3, #4
 8022818:	2c01      	cmp	r4, #1
 802281a:	dc67      	bgt.n	80228ec <__kernel_rem_pio2f+0x4d4>
 802281c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8022820:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8022824:	2f00      	cmp	r7, #0
 8022826:	d167      	bne.n	80228f8 <__kernel_rem_pio2f+0x4e0>
 8022828:	edc8 6a00 	vstr	s13, [r8]
 802282c:	ed88 7a01 	vstr	s14, [r8, #4]
 8022830:	edc8 7a02 	vstr	s15, [r8, #8]
 8022834:	e7d5      	b.n	80227e2 <__kernel_rem_pio2f+0x3ca>
 8022836:	aa30      	add	r2, sp, #192	; 0xc0
 8022838:	ed1f 7a45 	vldr	s14, [pc, #-276]	; 8022728 <__kernel_rem_pio2f+0x310>
 802283c:	4413      	add	r3, r2
 802283e:	4622      	mov	r2, r4
 8022840:	2a00      	cmp	r2, #0
 8022842:	da24      	bge.n	802288e <__kernel_rem_pio2f+0x476>
 8022844:	b34f      	cbz	r7, 802289a <__kernel_rem_pio2f+0x482>
 8022846:	eef1 7a47 	vneg.f32	s15, s14
 802284a:	edc8 7a00 	vstr	s15, [r8]
 802284e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8022852:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022856:	aa31      	add	r2, sp, #196	; 0xc4
 8022858:	2301      	movs	r3, #1
 802285a:	429c      	cmp	r4, r3
 802285c:	da20      	bge.n	80228a0 <__kernel_rem_pio2f+0x488>
 802285e:	b10f      	cbz	r7, 8022864 <__kernel_rem_pio2f+0x44c>
 8022860:	eef1 7a67 	vneg.f32	s15, s15
 8022864:	edc8 7a01 	vstr	s15, [r8, #4]
 8022868:	e7bb      	b.n	80227e2 <__kernel_rem_pio2f+0x3ca>
 802286a:	aa30      	add	r2, sp, #192	; 0xc0
 802286c:	ed5f 7a52 	vldr	s15, [pc, #-328]	; 8022728 <__kernel_rem_pio2f+0x310>
 8022870:	4413      	add	r3, r2
 8022872:	2c00      	cmp	r4, #0
 8022874:	da05      	bge.n	8022882 <__kernel_rem_pio2f+0x46a>
 8022876:	b10f      	cbz	r7, 802287c <__kernel_rem_pio2f+0x464>
 8022878:	eef1 7a67 	vneg.f32	s15, s15
 802287c:	edc8 7a00 	vstr	s15, [r8]
 8022880:	e7af      	b.n	80227e2 <__kernel_rem_pio2f+0x3ca>
 8022882:	ed33 7a01 	vldmdb	r3!, {s14}
 8022886:	3c01      	subs	r4, #1
 8022888:	ee77 7a87 	vadd.f32	s15, s15, s14
 802288c:	e7f1      	b.n	8022872 <__kernel_rem_pio2f+0x45a>
 802288e:	ed73 7a01 	vldmdb	r3!, {s15}
 8022892:	3a01      	subs	r2, #1
 8022894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8022898:	e7d2      	b.n	8022840 <__kernel_rem_pio2f+0x428>
 802289a:	eef0 7a47 	vmov.f32	s15, s14
 802289e:	e7d4      	b.n	802284a <__kernel_rem_pio2f+0x432>
 80228a0:	ecb2 7a01 	vldmia	r2!, {s14}
 80228a4:	3301      	adds	r3, #1
 80228a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80228aa:	e7d6      	b.n	802285a <__kernel_rem_pio2f+0x442>
 80228ac:	edd1 7a00 	vldr	s15, [r1]
 80228b0:	edd1 6a01 	vldr	s13, [r1, #4]
 80228b4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80228b8:	3801      	subs	r0, #1
 80228ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80228be:	ed81 7a00 	vstr	s14, [r1]
 80228c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80228c6:	edc1 7a01 	vstr	s15, [r1, #4]
 80228ca:	e799      	b.n	8022800 <__kernel_rem_pio2f+0x3e8>
 80228cc:	edd2 7a00 	vldr	s15, [r2]
 80228d0:	edd2 6a01 	vldr	s13, [r2, #4]
 80228d4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80228d8:	3901      	subs	r1, #1
 80228da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80228de:	ed82 7a00 	vstr	s14, [r2]
 80228e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80228e6:	edc2 7a01 	vstr	s15, [r2, #4]
 80228ea:	e78e      	b.n	802280a <__kernel_rem_pio2f+0x3f2>
 80228ec:	ed33 7a01 	vldmdb	r3!, {s14}
 80228f0:	3c01      	subs	r4, #1
 80228f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80228f6:	e78f      	b.n	8022818 <__kernel_rem_pio2f+0x400>
 80228f8:	eef1 6a66 	vneg.f32	s13, s13
 80228fc:	eeb1 7a47 	vneg.f32	s14, s14
 8022900:	edc8 6a00 	vstr	s13, [r8]
 8022904:	ed88 7a01 	vstr	s14, [r8, #4]
 8022908:	eef1 7a67 	vneg.f32	s15, s15
 802290c:	e790      	b.n	8022830 <__kernel_rem_pio2f+0x418>
 802290e:	bf00      	nop

08022910 <__kernel_sinf>:
 8022910:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8022914:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8022918:	ee07 0a90 	vmov	s15, r0
 802291c:	ee07 1a10 	vmov	s14, r1
 8022920:	da04      	bge.n	802292c <__kernel_sinf+0x1c>
 8022922:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8022926:	ee16 3a90 	vmov	r3, s13
 802292a:	b1e3      	cbz	r3, 8022966 <__kernel_sinf+0x56>
 802292c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8022930:	eddf 6a16 	vldr	s13, [pc, #88]	; 802298c <__kernel_sinf+0x7c>
 8022934:	ed9f 5a16 	vldr	s10, [pc, #88]	; 8022990 <__kernel_sinf+0x80>
 8022938:	eea6 5a26 	vfma.f32	s10, s12, s13
 802293c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8022994 <__kernel_sinf+0x84>
 8022940:	eee5 6a06 	vfma.f32	s13, s10, s12
 8022944:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8022998 <__kernel_sinf+0x88>
 8022948:	eea6 5a86 	vfma.f32	s10, s13, s12
 802294c:	eddf 6a13 	vldr	s13, [pc, #76]	; 802299c <__kernel_sinf+0x8c>
 8022950:	ee67 5a86 	vmul.f32	s11, s15, s12
 8022954:	eee5 6a06 	vfma.f32	s13, s10, s12
 8022958:	b942      	cbnz	r2, 802296c <__kernel_sinf+0x5c>
 802295a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80229a0 <__kernel_sinf+0x90>
 802295e:	eea6 7a26 	vfma.f32	s14, s12, s13
 8022962:	eee7 7a25 	vfma.f32	s15, s14, s11
 8022966:	ee17 0a90 	vmov	r0, s15
 802296a:	4770      	bx	lr
 802296c:	ee66 6ae5 	vnmul.f32	s13, s13, s11
 8022970:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8022974:	eee7 6a05 	vfma.f32	s13, s14, s10
 8022978:	ee96 7a86 	vfnms.f32	s14, s13, s12
 802297c:	eddf 6a09 	vldr	s13, [pc, #36]	; 80229a4 <__kernel_sinf+0x94>
 8022980:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8022984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022988:	e7ed      	b.n	8022966 <__kernel_sinf+0x56>
 802298a:	bf00      	nop
 802298c:	2f2ec9d3 	.word	0x2f2ec9d3
 8022990:	b2d72f34 	.word	0xb2d72f34
 8022994:	3638ef1b 	.word	0x3638ef1b
 8022998:	b9500d01 	.word	0xb9500d01
 802299c:	3c088889 	.word	0x3c088889
 80229a0:	be2aaaab 	.word	0xbe2aaaab
 80229a4:	3e2aaaab 	.word	0x3e2aaaab

080229a8 <__kernel_tanf>:
 80229a8:	ee07 1a10 	vmov	s14, r1
 80229ac:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80229b0:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80229b4:	b510      	push	{r4, lr}
 80229b6:	ee07 0a90 	vmov	s15, r0
 80229ba:	4603      	mov	r3, r0
 80229bc:	da17      	bge.n	80229ee <__kernel_tanf+0x46>
 80229be:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80229c2:	ee16 4a90 	vmov	r4, s13
 80229c6:	bb44      	cbnz	r4, 8022a1a <__kernel_tanf+0x72>
 80229c8:	1c53      	adds	r3, r2, #1
 80229ca:	430b      	orrs	r3, r1
 80229cc:	d10a      	bne.n	80229e4 <__kernel_tanf+0x3c>
 80229ce:	f7fe fe63 	bl	8021698 <fabsf>
 80229d2:	ee07 0a90 	vmov	s15, r0
 80229d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80229da:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80229de:	ee17 0a90 	vmov	r0, s15
 80229e2:	bd10      	pop	{r4, pc}
 80229e4:	2a01      	cmp	r2, #1
 80229e6:	d0fa      	beq.n	80229de <__kernel_tanf+0x36>
 80229e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80229ec:	e7f5      	b.n	80229da <__kernel_tanf+0x32>
 80229ee:	484d      	ldr	r0, [pc, #308]	; (8022b24 <__kernel_tanf+0x17c>)
 80229f0:	4281      	cmp	r1, r0
 80229f2:	db12      	blt.n	8022a1a <__kernel_tanf+0x72>
 80229f4:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8022b28 <__kernel_tanf+0x180>
 80229f8:	2b00      	cmp	r3, #0
 80229fa:	bfb8      	it	lt
 80229fc:	eef1 7a67 	vneglt.f32	s15, s15
 8022a00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8022a04:	eddf 6a49 	vldr	s13, [pc, #292]	; 8022b2c <__kernel_tanf+0x184>
 8022a08:	bfb8      	it	lt
 8022a0a:	eeb1 7a47 	vneglt.f32	s14, s14
 8022a0e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8022a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022a16:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8022b30 <__kernel_tanf+0x188>
 8022a1a:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8022b34 <__kernel_tanf+0x18c>
 8022a1e:	eddf 5a46 	vldr	s11, [pc, #280]	; 8022b38 <__kernel_tanf+0x190>
 8022a22:	eddf 4a46 	vldr	s9, [pc, #280]	; 8022b3c <__kernel_tanf+0x194>
 8022a26:	483f      	ldr	r0, [pc, #252]	; (8022b24 <__kernel_tanf+0x17c>)
 8022a28:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8022a2c:	4281      	cmp	r1, r0
 8022a2e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8022a32:	eee6 5a85 	vfma.f32	s11, s13, s10
 8022a36:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8022b40 <__kernel_tanf+0x198>
 8022a3a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8022a3e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8022b44 <__kernel_tanf+0x19c>
 8022a42:	eee5 5a26 	vfma.f32	s11, s10, s13
 8022a46:	ed9f 5a40 	vldr	s10, [pc, #256]	; 8022b48 <__kernel_tanf+0x1a0>
 8022a4a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8022a4e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8022b4c <__kernel_tanf+0x1a4>
 8022a52:	eee5 5a26 	vfma.f32	s11, s10, s13
 8022a56:	ed9f 5a3e 	vldr	s10, [pc, #248]	; 8022b50 <__kernel_tanf+0x1a8>
 8022a5a:	eea6 5aa4 	vfma.f32	s10, s13, s9
 8022a5e:	eddf 4a3d 	vldr	s9, [pc, #244]	; 8022b54 <__kernel_tanf+0x1ac>
 8022a62:	eee5 4a26 	vfma.f32	s9, s10, s13
 8022a66:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8022b58 <__kernel_tanf+0x1b0>
 8022a6a:	eea4 5aa6 	vfma.f32	s10, s9, s13
 8022a6e:	eddf 4a3b 	vldr	s9, [pc, #236]	; 8022b5c <__kernel_tanf+0x1b4>
 8022a72:	eee5 4a26 	vfma.f32	s9, s10, s13
 8022a76:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8022b60 <__kernel_tanf+0x1b8>
 8022a7a:	eea4 5aa6 	vfma.f32	s10, s9, s13
 8022a7e:	eef0 6a65 	vmov.f32	s13, s11
 8022a82:	eee5 6a06 	vfma.f32	s13, s10, s12
 8022a86:	ee67 4a86 	vmul.f32	s9, s15, s12
 8022a8a:	eef0 5a47 	vmov.f32	s11, s14
 8022a8e:	eee6 5aa4 	vfma.f32	s11, s13, s9
 8022a92:	eddf 6a34 	vldr	s13, [pc, #208]	; 8022b64 <__kernel_tanf+0x1bc>
 8022a96:	eea5 7a86 	vfma.f32	s14, s11, s12
 8022a9a:	eea4 7aa6 	vfma.f32	s14, s9, s13
 8022a9e:	ee37 6a87 	vadd.f32	s12, s15, s14
 8022aa2:	db1d      	blt.n	8022ae0 <__kernel_tanf+0x138>
 8022aa4:	ee06 2a90 	vmov	s13, r2
 8022aa8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8022aac:	ee26 5a06 	vmul.f32	s10, s12, s12
 8022ab0:	ee36 6a26 	vadd.f32	s12, s12, s13
 8022ab4:	179b      	asrs	r3, r3, #30
 8022ab6:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8022aba:	f003 0302 	and.w	r3, r3, #2
 8022abe:	f1c3 0301 	rsb	r3, r3, #1
 8022ac2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8022ac6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022aca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8022ace:	eee7 6ac7 	vfms.f32	s13, s15, s14
 8022ad2:	ee07 3a90 	vmov	s15, r3
 8022ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022ada:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022ade:	e77e      	b.n	80229de <__kernel_tanf+0x36>
 8022ae0:	2a01      	cmp	r2, #1
 8022ae2:	d01b      	beq.n	8022b1c <__kernel_tanf+0x174>
 8022ae4:	4b20      	ldr	r3, [pc, #128]	; (8022b68 <__kernel_tanf+0x1c0>)
 8022ae6:	ee16 2a10 	vmov	r2, s12
 8022aea:	401a      	ands	r2, r3
 8022aec:	ee05 2a10 	vmov	s10, r2
 8022af0:	ee75 7a67 	vsub.f32	s15, s10, s15
 8022af4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022af8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8022afc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8022b00:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8022b04:	ee15 2a90 	vmov	r2, s11
 8022b08:	4013      	ands	r3, r2
 8022b0a:	ee07 3a90 	vmov	s15, r3
 8022b0e:	eee5 6a27 	vfma.f32	s13, s10, s15
 8022b12:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022b16:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8022b1a:	e760      	b.n	80229de <__kernel_tanf+0x36>
 8022b1c:	eef0 7a46 	vmov.f32	s15, s12
 8022b20:	e75d      	b.n	80229de <__kernel_tanf+0x36>
 8022b22:	bf00      	nop
 8022b24:	3f2ca140 	.word	0x3f2ca140
 8022b28:	3f490fda 	.word	0x3f490fda
 8022b2c:	33222168 	.word	0x33222168
 8022b30:	00000000 	.word	0x00000000
 8022b34:	b79bae5f 	.word	0xb79bae5f
 8022b38:	38a3f445 	.word	0x38a3f445
 8022b3c:	37d95384 	.word	0x37d95384
 8022b40:	3a1a26c8 	.word	0x3a1a26c8
 8022b44:	3b6b6916 	.word	0x3b6b6916
 8022b48:	3cb327a4 	.word	0x3cb327a4
 8022b4c:	3e088889 	.word	0x3e088889
 8022b50:	3895c07a 	.word	0x3895c07a
 8022b54:	398137b9 	.word	0x398137b9
 8022b58:	3abede48 	.word	0x3abede48
 8022b5c:	3c11371f 	.word	0x3c11371f
 8022b60:	3d5d0dd1 	.word	0x3d5d0dd1
 8022b64:	3eaaaaab 	.word	0x3eaaaaab
 8022b68:	fffff000 	.word	0xfffff000

08022b6c <floorf>:
 8022b6c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8022b70:	3a7f      	subs	r2, #127	; 0x7f
 8022b72:	2a16      	cmp	r2, #22
 8022b74:	ee07 0a90 	vmov	s15, r0
 8022b78:	4603      	mov	r3, r0
 8022b7a:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8022b7e:	dc2a      	bgt.n	8022bd6 <floorf+0x6a>
 8022b80:	2a00      	cmp	r2, #0
 8022b82:	da11      	bge.n	8022ba8 <floorf+0x3c>
 8022b84:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8022bec <floorf+0x80>
 8022b88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022b8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b94:	dd05      	ble.n	8022ba2 <floorf+0x36>
 8022b96:	2800      	cmp	r0, #0
 8022b98:	da25      	bge.n	8022be6 <floorf+0x7a>
 8022b9a:	4a15      	ldr	r2, [pc, #84]	; (8022bf0 <floorf+0x84>)
 8022b9c:	2900      	cmp	r1, #0
 8022b9e:	bf18      	it	ne
 8022ba0:	4613      	movne	r3, r2
 8022ba2:	ee07 3a90 	vmov	s15, r3
 8022ba6:	e01b      	b.n	8022be0 <floorf+0x74>
 8022ba8:	4912      	ldr	r1, [pc, #72]	; (8022bf4 <floorf+0x88>)
 8022baa:	4111      	asrs	r1, r2
 8022bac:	4208      	tst	r0, r1
 8022bae:	d017      	beq.n	8022be0 <floorf+0x74>
 8022bb0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8022bec <floorf+0x80>
 8022bb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022bb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bc0:	ddef      	ble.n	8022ba2 <floorf+0x36>
 8022bc2:	2800      	cmp	r0, #0
 8022bc4:	bfbe      	ittt	lt
 8022bc6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8022bca:	fa40 f202 	asrlt.w	r2, r0, r2
 8022bce:	189b      	addlt	r3, r3, r2
 8022bd0:	ea23 0301 	bic.w	r3, r3, r1
 8022bd4:	e7e5      	b.n	8022ba2 <floorf+0x36>
 8022bd6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022bda:	d301      	bcc.n	8022be0 <floorf+0x74>
 8022bdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8022be0:	ee17 0a90 	vmov	r0, s15
 8022be4:	4770      	bx	lr
 8022be6:	2300      	movs	r3, #0
 8022be8:	e7db      	b.n	8022ba2 <floorf+0x36>
 8022bea:	bf00      	nop
 8022bec:	7149f2ca 	.word	0x7149f2ca
 8022bf0:	bf800000 	.word	0xbf800000
 8022bf4:	007fffff 	.word	0x007fffff

08022bf8 <nanf>:
 8022bf8:	4800      	ldr	r0, [pc, #0]	; (8022bfc <nanf+0x4>)
 8022bfa:	4770      	bx	lr
 8022bfc:	7fc00000 	.word	0x7fc00000

08022c00 <scalbnf>:
 8022c00:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8022c04:	ee07 0a90 	vmov	s15, r0
 8022c08:	4603      	mov	r3, r0
 8022c0a:	d004      	beq.n	8022c16 <scalbnf+0x16>
 8022c0c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8022c10:	d304      	bcc.n	8022c1c <scalbnf+0x1c>
 8022c12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8022c16:	ee17 0a90 	vmov	r0, s15
 8022c1a:	4770      	bx	lr
 8022c1c:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8022c20:	d122      	bne.n	8022c68 <scalbnf+0x68>
 8022c22:	4b2b      	ldr	r3, [pc, #172]	; (8022cd0 <scalbnf+0xd0>)
 8022c24:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8022cd4 <scalbnf+0xd4>
 8022c28:	4299      	cmp	r1, r3
 8022c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022c2e:	db16      	blt.n	8022c5e <scalbnf+0x5e>
 8022c30:	ee17 3a90 	vmov	r3, s15
 8022c34:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8022c38:	3a19      	subs	r2, #25
 8022c3a:	440a      	add	r2, r1
 8022c3c:	2afe      	cmp	r2, #254	; 0xfe
 8022c3e:	dd15      	ble.n	8022c6c <scalbnf+0x6c>
 8022c40:	ee17 3a90 	vmov	r3, s15
 8022c44:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8022cd8 <scalbnf+0xd8>
 8022c48:	eddf 7a24 	vldr	s15, [pc, #144]	; 8022cdc <scalbnf+0xdc>
 8022c4c:	2b00      	cmp	r3, #0
 8022c4e:	eef0 6a47 	vmov.f32	s13, s14
 8022c52:	bfb8      	it	lt
 8022c54:	eeb0 7a67 	vmovlt.f32	s14, s15
 8022c58:	ee67 7a26 	vmul.f32	s15, s14, s13
 8022c5c:	e7db      	b.n	8022c16 <scalbnf+0x16>
 8022c5e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8022ce0 <scalbnf+0xe0>
 8022c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022c66:	e7d6      	b.n	8022c16 <scalbnf+0x16>
 8022c68:	0dd2      	lsrs	r2, r2, #23
 8022c6a:	e7e6      	b.n	8022c3a <scalbnf+0x3a>
 8022c6c:	2a00      	cmp	r2, #0
 8022c6e:	dd06      	ble.n	8022c7e <scalbnf+0x7e>
 8022c70:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022c74:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8022c78:	ee07 3a90 	vmov	s15, r3
 8022c7c:	e7cb      	b.n	8022c16 <scalbnf+0x16>
 8022c7e:	f112 0f16 	cmn.w	r2, #22
 8022c82:	da1a      	bge.n	8022cba <scalbnf+0xba>
 8022c84:	f24c 3350 	movw	r3, #50000	; 0xc350
 8022c88:	4299      	cmp	r1, r3
 8022c8a:	ee17 3a90 	vmov	r3, s15
 8022c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8022c92:	dd0a      	ble.n	8022caa <scalbnf+0xaa>
 8022c94:	eddf 7a10 	vldr	s15, [pc, #64]	; 8022cd8 <scalbnf+0xd8>
 8022c98:	eddf 6a10 	vldr	s13, [pc, #64]	; 8022cdc <scalbnf+0xdc>
 8022c9c:	eeb0 7a67 	vmov.f32	s14, s15
 8022ca0:	2b00      	cmp	r3, #0
 8022ca2:	bf18      	it	ne
 8022ca4:	eef0 7a66 	vmovne.f32	s15, s13
 8022ca8:	e7db      	b.n	8022c62 <scalbnf+0x62>
 8022caa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8022ce0 <scalbnf+0xe0>
 8022cae:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8022ce4 <scalbnf+0xe4>
 8022cb2:	eeb0 7a67 	vmov.f32	s14, s15
 8022cb6:	2b00      	cmp	r3, #0
 8022cb8:	e7f3      	b.n	8022ca2 <scalbnf+0xa2>
 8022cba:	3219      	adds	r2, #25
 8022cbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022cc0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8022cc4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8022ce8 <scalbnf+0xe8>
 8022cc8:	ee07 3a90 	vmov	s15, r3
 8022ccc:	e7c9      	b.n	8022c62 <scalbnf+0x62>
 8022cce:	bf00      	nop
 8022cd0:	ffff3cb0 	.word	0xffff3cb0
 8022cd4:	4c000000 	.word	0x4c000000
 8022cd8:	7149f2ca 	.word	0x7149f2ca
 8022cdc:	f149f2ca 	.word	0xf149f2ca
 8022ce0:	0da24260 	.word	0x0da24260
 8022ce4:	8da24260 	.word	0x8da24260
 8022ce8:	33000000 	.word	0x33000000

08022cec <__errno>:
 8022cec:	4b01      	ldr	r3, [pc, #4]	; (8022cf4 <__errno+0x8>)
 8022cee:	6818      	ldr	r0, [r3, #0]
 8022cf0:	4770      	bx	lr
 8022cf2:	bf00      	nop
 8022cf4:	200002f4 	.word	0x200002f4

08022cf8 <__libc_init_array>:
 8022cf8:	b570      	push	{r4, r5, r6, lr}
 8022cfa:	4d0d      	ldr	r5, [pc, #52]	; (8022d30 <__libc_init_array+0x38>)
 8022cfc:	4c0d      	ldr	r4, [pc, #52]	; (8022d34 <__libc_init_array+0x3c>)
 8022cfe:	1b64      	subs	r4, r4, r5
 8022d00:	10a4      	asrs	r4, r4, #2
 8022d02:	2600      	movs	r6, #0
 8022d04:	42a6      	cmp	r6, r4
 8022d06:	d109      	bne.n	8022d1c <__libc_init_array+0x24>
 8022d08:	4d0b      	ldr	r5, [pc, #44]	; (8022d38 <__libc_init_array+0x40>)
 8022d0a:	4c0c      	ldr	r4, [pc, #48]	; (8022d3c <__libc_init_array+0x44>)
 8022d0c:	f001 f88a 	bl	8023e24 <_init>
 8022d10:	1b64      	subs	r4, r4, r5
 8022d12:	10a4      	asrs	r4, r4, #2
 8022d14:	2600      	movs	r6, #0
 8022d16:	42a6      	cmp	r6, r4
 8022d18:	d105      	bne.n	8022d26 <__libc_init_array+0x2e>
 8022d1a:	bd70      	pop	{r4, r5, r6, pc}
 8022d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8022d20:	4798      	blx	r3
 8022d22:	3601      	adds	r6, #1
 8022d24:	e7ee      	b.n	8022d04 <__libc_init_array+0xc>
 8022d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8022d2a:	4798      	blx	r3
 8022d2c:	3601      	adds	r6, #1
 8022d2e:	e7f2      	b.n	8022d16 <__libc_init_array+0x1e>
 8022d30:	08026100 	.word	0x08026100
 8022d34:	08026100 	.word	0x08026100
 8022d38:	08026100 	.word	0x08026100
 8022d3c:	08026104 	.word	0x08026104

08022d40 <memcpy>:
 8022d40:	440a      	add	r2, r1
 8022d42:	4291      	cmp	r1, r2
 8022d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8022d48:	d100      	bne.n	8022d4c <memcpy+0xc>
 8022d4a:	4770      	bx	lr
 8022d4c:	b510      	push	{r4, lr}
 8022d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022d56:	4291      	cmp	r1, r2
 8022d58:	d1f9      	bne.n	8022d4e <memcpy+0xe>
 8022d5a:	bd10      	pop	{r4, pc}

08022d5c <memmove>:
 8022d5c:	4288      	cmp	r0, r1
 8022d5e:	b510      	push	{r4, lr}
 8022d60:	eb01 0402 	add.w	r4, r1, r2
 8022d64:	d902      	bls.n	8022d6c <memmove+0x10>
 8022d66:	4284      	cmp	r4, r0
 8022d68:	4623      	mov	r3, r4
 8022d6a:	d807      	bhi.n	8022d7c <memmove+0x20>
 8022d6c:	1e43      	subs	r3, r0, #1
 8022d6e:	42a1      	cmp	r1, r4
 8022d70:	d008      	beq.n	8022d84 <memmove+0x28>
 8022d72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022d76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022d7a:	e7f8      	b.n	8022d6e <memmove+0x12>
 8022d7c:	4402      	add	r2, r0
 8022d7e:	4601      	mov	r1, r0
 8022d80:	428a      	cmp	r2, r1
 8022d82:	d100      	bne.n	8022d86 <memmove+0x2a>
 8022d84:	bd10      	pop	{r4, pc}
 8022d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022d8e:	e7f7      	b.n	8022d80 <memmove+0x24>

08022d90 <memset>:
 8022d90:	4402      	add	r2, r0
 8022d92:	4603      	mov	r3, r0
 8022d94:	4293      	cmp	r3, r2
 8022d96:	d100      	bne.n	8022d9a <memset+0xa>
 8022d98:	4770      	bx	lr
 8022d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8022d9e:	e7f9      	b.n	8022d94 <memset+0x4>

08022da0 <iprintf>:
 8022da0:	b40f      	push	{r0, r1, r2, r3}
 8022da2:	4b0a      	ldr	r3, [pc, #40]	; (8022dcc <iprintf+0x2c>)
 8022da4:	b513      	push	{r0, r1, r4, lr}
 8022da6:	681c      	ldr	r4, [r3, #0]
 8022da8:	b124      	cbz	r4, 8022db4 <iprintf+0x14>
 8022daa:	69a3      	ldr	r3, [r4, #24]
 8022dac:	b913      	cbnz	r3, 8022db4 <iprintf+0x14>
 8022dae:	4620      	mov	r0, r4
 8022db0:	f000 fa66 	bl	8023280 <__sinit>
 8022db4:	ab05      	add	r3, sp, #20
 8022db6:	9a04      	ldr	r2, [sp, #16]
 8022db8:	68a1      	ldr	r1, [r4, #8]
 8022dba:	9301      	str	r3, [sp, #4]
 8022dbc:	4620      	mov	r0, r4
 8022dbe:	f000 fc6f 	bl	80236a0 <_vfiprintf_r>
 8022dc2:	b002      	add	sp, #8
 8022dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022dc8:	b004      	add	sp, #16
 8022dca:	4770      	bx	lr
 8022dcc:	200002f4 	.word	0x200002f4

08022dd0 <_puts_r>:
 8022dd0:	b570      	push	{r4, r5, r6, lr}
 8022dd2:	460e      	mov	r6, r1
 8022dd4:	4605      	mov	r5, r0
 8022dd6:	b118      	cbz	r0, 8022de0 <_puts_r+0x10>
 8022dd8:	6983      	ldr	r3, [r0, #24]
 8022dda:	b90b      	cbnz	r3, 8022de0 <_puts_r+0x10>
 8022ddc:	f000 fa50 	bl	8023280 <__sinit>
 8022de0:	69ab      	ldr	r3, [r5, #24]
 8022de2:	68ac      	ldr	r4, [r5, #8]
 8022de4:	b913      	cbnz	r3, 8022dec <_puts_r+0x1c>
 8022de6:	4628      	mov	r0, r5
 8022de8:	f000 fa4a 	bl	8023280 <__sinit>
 8022dec:	4b2c      	ldr	r3, [pc, #176]	; (8022ea0 <_puts_r+0xd0>)
 8022dee:	429c      	cmp	r4, r3
 8022df0:	d120      	bne.n	8022e34 <_puts_r+0x64>
 8022df2:	686c      	ldr	r4, [r5, #4]
 8022df4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022df6:	07db      	lsls	r3, r3, #31
 8022df8:	d405      	bmi.n	8022e06 <_puts_r+0x36>
 8022dfa:	89a3      	ldrh	r3, [r4, #12]
 8022dfc:	0598      	lsls	r0, r3, #22
 8022dfe:	d402      	bmi.n	8022e06 <_puts_r+0x36>
 8022e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022e02:	f000 fadb 	bl	80233bc <__retarget_lock_acquire_recursive>
 8022e06:	89a3      	ldrh	r3, [r4, #12]
 8022e08:	0719      	lsls	r1, r3, #28
 8022e0a:	d51d      	bpl.n	8022e48 <_puts_r+0x78>
 8022e0c:	6923      	ldr	r3, [r4, #16]
 8022e0e:	b1db      	cbz	r3, 8022e48 <_puts_r+0x78>
 8022e10:	3e01      	subs	r6, #1
 8022e12:	68a3      	ldr	r3, [r4, #8]
 8022e14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022e18:	3b01      	subs	r3, #1
 8022e1a:	60a3      	str	r3, [r4, #8]
 8022e1c:	bb39      	cbnz	r1, 8022e6e <_puts_r+0x9e>
 8022e1e:	2b00      	cmp	r3, #0
 8022e20:	da38      	bge.n	8022e94 <_puts_r+0xc4>
 8022e22:	4622      	mov	r2, r4
 8022e24:	210a      	movs	r1, #10
 8022e26:	4628      	mov	r0, r5
 8022e28:	f000 f850 	bl	8022ecc <__swbuf_r>
 8022e2c:	3001      	adds	r0, #1
 8022e2e:	d011      	beq.n	8022e54 <_puts_r+0x84>
 8022e30:	250a      	movs	r5, #10
 8022e32:	e011      	b.n	8022e58 <_puts_r+0x88>
 8022e34:	4b1b      	ldr	r3, [pc, #108]	; (8022ea4 <_puts_r+0xd4>)
 8022e36:	429c      	cmp	r4, r3
 8022e38:	d101      	bne.n	8022e3e <_puts_r+0x6e>
 8022e3a:	68ac      	ldr	r4, [r5, #8]
 8022e3c:	e7da      	b.n	8022df4 <_puts_r+0x24>
 8022e3e:	4b1a      	ldr	r3, [pc, #104]	; (8022ea8 <_puts_r+0xd8>)
 8022e40:	429c      	cmp	r4, r3
 8022e42:	bf08      	it	eq
 8022e44:	68ec      	ldreq	r4, [r5, #12]
 8022e46:	e7d5      	b.n	8022df4 <_puts_r+0x24>
 8022e48:	4621      	mov	r1, r4
 8022e4a:	4628      	mov	r0, r5
 8022e4c:	f000 f890 	bl	8022f70 <__swsetup_r>
 8022e50:	2800      	cmp	r0, #0
 8022e52:	d0dd      	beq.n	8022e10 <_puts_r+0x40>
 8022e54:	f04f 35ff 	mov.w	r5, #4294967295
 8022e58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022e5a:	07da      	lsls	r2, r3, #31
 8022e5c:	d405      	bmi.n	8022e6a <_puts_r+0x9a>
 8022e5e:	89a3      	ldrh	r3, [r4, #12]
 8022e60:	059b      	lsls	r3, r3, #22
 8022e62:	d402      	bmi.n	8022e6a <_puts_r+0x9a>
 8022e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022e66:	f000 faaa 	bl	80233be <__retarget_lock_release_recursive>
 8022e6a:	4628      	mov	r0, r5
 8022e6c:	bd70      	pop	{r4, r5, r6, pc}
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	da04      	bge.n	8022e7c <_puts_r+0xac>
 8022e72:	69a2      	ldr	r2, [r4, #24]
 8022e74:	429a      	cmp	r2, r3
 8022e76:	dc06      	bgt.n	8022e86 <_puts_r+0xb6>
 8022e78:	290a      	cmp	r1, #10
 8022e7a:	d004      	beq.n	8022e86 <_puts_r+0xb6>
 8022e7c:	6823      	ldr	r3, [r4, #0]
 8022e7e:	1c5a      	adds	r2, r3, #1
 8022e80:	6022      	str	r2, [r4, #0]
 8022e82:	7019      	strb	r1, [r3, #0]
 8022e84:	e7c5      	b.n	8022e12 <_puts_r+0x42>
 8022e86:	4622      	mov	r2, r4
 8022e88:	4628      	mov	r0, r5
 8022e8a:	f000 f81f 	bl	8022ecc <__swbuf_r>
 8022e8e:	3001      	adds	r0, #1
 8022e90:	d1bf      	bne.n	8022e12 <_puts_r+0x42>
 8022e92:	e7df      	b.n	8022e54 <_puts_r+0x84>
 8022e94:	6823      	ldr	r3, [r4, #0]
 8022e96:	250a      	movs	r5, #10
 8022e98:	1c5a      	adds	r2, r3, #1
 8022e9a:	6022      	str	r2, [r4, #0]
 8022e9c:	701d      	strb	r5, [r3, #0]
 8022e9e:	e7db      	b.n	8022e58 <_puts_r+0x88>
 8022ea0:	08026084 	.word	0x08026084
 8022ea4:	080260a4 	.word	0x080260a4
 8022ea8:	08026064 	.word	0x08026064

08022eac <puts>:
 8022eac:	4b02      	ldr	r3, [pc, #8]	; (8022eb8 <puts+0xc>)
 8022eae:	4601      	mov	r1, r0
 8022eb0:	6818      	ldr	r0, [r3, #0]
 8022eb2:	f7ff bf8d 	b.w	8022dd0 <_puts_r>
 8022eb6:	bf00      	nop
 8022eb8:	200002f4 	.word	0x200002f4

08022ebc <strcpy>:
 8022ebc:	4603      	mov	r3, r0
 8022ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022ec2:	f803 2b01 	strb.w	r2, [r3], #1
 8022ec6:	2a00      	cmp	r2, #0
 8022ec8:	d1f9      	bne.n	8022ebe <strcpy+0x2>
 8022eca:	4770      	bx	lr

08022ecc <__swbuf_r>:
 8022ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ece:	460e      	mov	r6, r1
 8022ed0:	4614      	mov	r4, r2
 8022ed2:	4605      	mov	r5, r0
 8022ed4:	b118      	cbz	r0, 8022ede <__swbuf_r+0x12>
 8022ed6:	6983      	ldr	r3, [r0, #24]
 8022ed8:	b90b      	cbnz	r3, 8022ede <__swbuf_r+0x12>
 8022eda:	f000 f9d1 	bl	8023280 <__sinit>
 8022ede:	4b21      	ldr	r3, [pc, #132]	; (8022f64 <__swbuf_r+0x98>)
 8022ee0:	429c      	cmp	r4, r3
 8022ee2:	d12b      	bne.n	8022f3c <__swbuf_r+0x70>
 8022ee4:	686c      	ldr	r4, [r5, #4]
 8022ee6:	69a3      	ldr	r3, [r4, #24]
 8022ee8:	60a3      	str	r3, [r4, #8]
 8022eea:	89a3      	ldrh	r3, [r4, #12]
 8022eec:	071a      	lsls	r2, r3, #28
 8022eee:	d52f      	bpl.n	8022f50 <__swbuf_r+0x84>
 8022ef0:	6923      	ldr	r3, [r4, #16]
 8022ef2:	b36b      	cbz	r3, 8022f50 <__swbuf_r+0x84>
 8022ef4:	6923      	ldr	r3, [r4, #16]
 8022ef6:	6820      	ldr	r0, [r4, #0]
 8022ef8:	1ac0      	subs	r0, r0, r3
 8022efa:	6963      	ldr	r3, [r4, #20]
 8022efc:	b2f6      	uxtb	r6, r6
 8022efe:	4283      	cmp	r3, r0
 8022f00:	4637      	mov	r7, r6
 8022f02:	dc04      	bgt.n	8022f0e <__swbuf_r+0x42>
 8022f04:	4621      	mov	r1, r4
 8022f06:	4628      	mov	r0, r5
 8022f08:	f000 f926 	bl	8023158 <_fflush_r>
 8022f0c:	bb30      	cbnz	r0, 8022f5c <__swbuf_r+0x90>
 8022f0e:	68a3      	ldr	r3, [r4, #8]
 8022f10:	3b01      	subs	r3, #1
 8022f12:	60a3      	str	r3, [r4, #8]
 8022f14:	6823      	ldr	r3, [r4, #0]
 8022f16:	1c5a      	adds	r2, r3, #1
 8022f18:	6022      	str	r2, [r4, #0]
 8022f1a:	701e      	strb	r6, [r3, #0]
 8022f1c:	6963      	ldr	r3, [r4, #20]
 8022f1e:	3001      	adds	r0, #1
 8022f20:	4283      	cmp	r3, r0
 8022f22:	d004      	beq.n	8022f2e <__swbuf_r+0x62>
 8022f24:	89a3      	ldrh	r3, [r4, #12]
 8022f26:	07db      	lsls	r3, r3, #31
 8022f28:	d506      	bpl.n	8022f38 <__swbuf_r+0x6c>
 8022f2a:	2e0a      	cmp	r6, #10
 8022f2c:	d104      	bne.n	8022f38 <__swbuf_r+0x6c>
 8022f2e:	4621      	mov	r1, r4
 8022f30:	4628      	mov	r0, r5
 8022f32:	f000 f911 	bl	8023158 <_fflush_r>
 8022f36:	b988      	cbnz	r0, 8022f5c <__swbuf_r+0x90>
 8022f38:	4638      	mov	r0, r7
 8022f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022f3c:	4b0a      	ldr	r3, [pc, #40]	; (8022f68 <__swbuf_r+0x9c>)
 8022f3e:	429c      	cmp	r4, r3
 8022f40:	d101      	bne.n	8022f46 <__swbuf_r+0x7a>
 8022f42:	68ac      	ldr	r4, [r5, #8]
 8022f44:	e7cf      	b.n	8022ee6 <__swbuf_r+0x1a>
 8022f46:	4b09      	ldr	r3, [pc, #36]	; (8022f6c <__swbuf_r+0xa0>)
 8022f48:	429c      	cmp	r4, r3
 8022f4a:	bf08      	it	eq
 8022f4c:	68ec      	ldreq	r4, [r5, #12]
 8022f4e:	e7ca      	b.n	8022ee6 <__swbuf_r+0x1a>
 8022f50:	4621      	mov	r1, r4
 8022f52:	4628      	mov	r0, r5
 8022f54:	f000 f80c 	bl	8022f70 <__swsetup_r>
 8022f58:	2800      	cmp	r0, #0
 8022f5a:	d0cb      	beq.n	8022ef4 <__swbuf_r+0x28>
 8022f5c:	f04f 37ff 	mov.w	r7, #4294967295
 8022f60:	e7ea      	b.n	8022f38 <__swbuf_r+0x6c>
 8022f62:	bf00      	nop
 8022f64:	08026084 	.word	0x08026084
 8022f68:	080260a4 	.word	0x080260a4
 8022f6c:	08026064 	.word	0x08026064

08022f70 <__swsetup_r>:
 8022f70:	4b32      	ldr	r3, [pc, #200]	; (802303c <__swsetup_r+0xcc>)
 8022f72:	b570      	push	{r4, r5, r6, lr}
 8022f74:	681d      	ldr	r5, [r3, #0]
 8022f76:	4606      	mov	r6, r0
 8022f78:	460c      	mov	r4, r1
 8022f7a:	b125      	cbz	r5, 8022f86 <__swsetup_r+0x16>
 8022f7c:	69ab      	ldr	r3, [r5, #24]
 8022f7e:	b913      	cbnz	r3, 8022f86 <__swsetup_r+0x16>
 8022f80:	4628      	mov	r0, r5
 8022f82:	f000 f97d 	bl	8023280 <__sinit>
 8022f86:	4b2e      	ldr	r3, [pc, #184]	; (8023040 <__swsetup_r+0xd0>)
 8022f88:	429c      	cmp	r4, r3
 8022f8a:	d10f      	bne.n	8022fac <__swsetup_r+0x3c>
 8022f8c:	686c      	ldr	r4, [r5, #4]
 8022f8e:	89a3      	ldrh	r3, [r4, #12]
 8022f90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022f94:	0719      	lsls	r1, r3, #28
 8022f96:	d42c      	bmi.n	8022ff2 <__swsetup_r+0x82>
 8022f98:	06dd      	lsls	r5, r3, #27
 8022f9a:	d411      	bmi.n	8022fc0 <__swsetup_r+0x50>
 8022f9c:	2309      	movs	r3, #9
 8022f9e:	6033      	str	r3, [r6, #0]
 8022fa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022fa4:	81a3      	strh	r3, [r4, #12]
 8022fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8022faa:	e03e      	b.n	802302a <__swsetup_r+0xba>
 8022fac:	4b25      	ldr	r3, [pc, #148]	; (8023044 <__swsetup_r+0xd4>)
 8022fae:	429c      	cmp	r4, r3
 8022fb0:	d101      	bne.n	8022fb6 <__swsetup_r+0x46>
 8022fb2:	68ac      	ldr	r4, [r5, #8]
 8022fb4:	e7eb      	b.n	8022f8e <__swsetup_r+0x1e>
 8022fb6:	4b24      	ldr	r3, [pc, #144]	; (8023048 <__swsetup_r+0xd8>)
 8022fb8:	429c      	cmp	r4, r3
 8022fba:	bf08      	it	eq
 8022fbc:	68ec      	ldreq	r4, [r5, #12]
 8022fbe:	e7e6      	b.n	8022f8e <__swsetup_r+0x1e>
 8022fc0:	0758      	lsls	r0, r3, #29
 8022fc2:	d512      	bpl.n	8022fea <__swsetup_r+0x7a>
 8022fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022fc6:	b141      	cbz	r1, 8022fda <__swsetup_r+0x6a>
 8022fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022fcc:	4299      	cmp	r1, r3
 8022fce:	d002      	beq.n	8022fd6 <__swsetup_r+0x66>
 8022fd0:	4630      	mov	r0, r6
 8022fd2:	f000 fa5b 	bl	802348c <_free_r>
 8022fd6:	2300      	movs	r3, #0
 8022fd8:	6363      	str	r3, [r4, #52]	; 0x34
 8022fda:	89a3      	ldrh	r3, [r4, #12]
 8022fdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022fe0:	81a3      	strh	r3, [r4, #12]
 8022fe2:	2300      	movs	r3, #0
 8022fe4:	6063      	str	r3, [r4, #4]
 8022fe6:	6923      	ldr	r3, [r4, #16]
 8022fe8:	6023      	str	r3, [r4, #0]
 8022fea:	89a3      	ldrh	r3, [r4, #12]
 8022fec:	f043 0308 	orr.w	r3, r3, #8
 8022ff0:	81a3      	strh	r3, [r4, #12]
 8022ff2:	6923      	ldr	r3, [r4, #16]
 8022ff4:	b94b      	cbnz	r3, 802300a <__swsetup_r+0x9a>
 8022ff6:	89a3      	ldrh	r3, [r4, #12]
 8022ff8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023000:	d003      	beq.n	802300a <__swsetup_r+0x9a>
 8023002:	4621      	mov	r1, r4
 8023004:	4630      	mov	r0, r6
 8023006:	f000 fa01 	bl	802340c <__smakebuf_r>
 802300a:	89a0      	ldrh	r0, [r4, #12]
 802300c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023010:	f010 0301 	ands.w	r3, r0, #1
 8023014:	d00a      	beq.n	802302c <__swsetup_r+0xbc>
 8023016:	2300      	movs	r3, #0
 8023018:	60a3      	str	r3, [r4, #8]
 802301a:	6963      	ldr	r3, [r4, #20]
 802301c:	425b      	negs	r3, r3
 802301e:	61a3      	str	r3, [r4, #24]
 8023020:	6923      	ldr	r3, [r4, #16]
 8023022:	b943      	cbnz	r3, 8023036 <__swsetup_r+0xc6>
 8023024:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023028:	d1ba      	bne.n	8022fa0 <__swsetup_r+0x30>
 802302a:	bd70      	pop	{r4, r5, r6, pc}
 802302c:	0781      	lsls	r1, r0, #30
 802302e:	bf58      	it	pl
 8023030:	6963      	ldrpl	r3, [r4, #20]
 8023032:	60a3      	str	r3, [r4, #8]
 8023034:	e7f4      	b.n	8023020 <__swsetup_r+0xb0>
 8023036:	2000      	movs	r0, #0
 8023038:	e7f7      	b.n	802302a <__swsetup_r+0xba>
 802303a:	bf00      	nop
 802303c:	200002f4 	.word	0x200002f4
 8023040:	08026084 	.word	0x08026084
 8023044:	080260a4 	.word	0x080260a4
 8023048:	08026064 	.word	0x08026064

0802304c <__sflush_r>:
 802304c:	898a      	ldrh	r2, [r1, #12]
 802304e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023052:	4605      	mov	r5, r0
 8023054:	0710      	lsls	r0, r2, #28
 8023056:	460c      	mov	r4, r1
 8023058:	d458      	bmi.n	802310c <__sflush_r+0xc0>
 802305a:	684b      	ldr	r3, [r1, #4]
 802305c:	2b00      	cmp	r3, #0
 802305e:	dc05      	bgt.n	802306c <__sflush_r+0x20>
 8023060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023062:	2b00      	cmp	r3, #0
 8023064:	dc02      	bgt.n	802306c <__sflush_r+0x20>
 8023066:	2000      	movs	r0, #0
 8023068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802306c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802306e:	2e00      	cmp	r6, #0
 8023070:	d0f9      	beq.n	8023066 <__sflush_r+0x1a>
 8023072:	2300      	movs	r3, #0
 8023074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023078:	682f      	ldr	r7, [r5, #0]
 802307a:	602b      	str	r3, [r5, #0]
 802307c:	d032      	beq.n	80230e4 <__sflush_r+0x98>
 802307e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023080:	89a3      	ldrh	r3, [r4, #12]
 8023082:	075a      	lsls	r2, r3, #29
 8023084:	d505      	bpl.n	8023092 <__sflush_r+0x46>
 8023086:	6863      	ldr	r3, [r4, #4]
 8023088:	1ac0      	subs	r0, r0, r3
 802308a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802308c:	b10b      	cbz	r3, 8023092 <__sflush_r+0x46>
 802308e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023090:	1ac0      	subs	r0, r0, r3
 8023092:	2300      	movs	r3, #0
 8023094:	4602      	mov	r2, r0
 8023096:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023098:	6a21      	ldr	r1, [r4, #32]
 802309a:	4628      	mov	r0, r5
 802309c:	47b0      	blx	r6
 802309e:	1c43      	adds	r3, r0, #1
 80230a0:	89a3      	ldrh	r3, [r4, #12]
 80230a2:	d106      	bne.n	80230b2 <__sflush_r+0x66>
 80230a4:	6829      	ldr	r1, [r5, #0]
 80230a6:	291d      	cmp	r1, #29
 80230a8:	d82c      	bhi.n	8023104 <__sflush_r+0xb8>
 80230aa:	4a2a      	ldr	r2, [pc, #168]	; (8023154 <__sflush_r+0x108>)
 80230ac:	40ca      	lsrs	r2, r1
 80230ae:	07d6      	lsls	r6, r2, #31
 80230b0:	d528      	bpl.n	8023104 <__sflush_r+0xb8>
 80230b2:	2200      	movs	r2, #0
 80230b4:	6062      	str	r2, [r4, #4]
 80230b6:	04d9      	lsls	r1, r3, #19
 80230b8:	6922      	ldr	r2, [r4, #16]
 80230ba:	6022      	str	r2, [r4, #0]
 80230bc:	d504      	bpl.n	80230c8 <__sflush_r+0x7c>
 80230be:	1c42      	adds	r2, r0, #1
 80230c0:	d101      	bne.n	80230c6 <__sflush_r+0x7a>
 80230c2:	682b      	ldr	r3, [r5, #0]
 80230c4:	b903      	cbnz	r3, 80230c8 <__sflush_r+0x7c>
 80230c6:	6560      	str	r0, [r4, #84]	; 0x54
 80230c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80230ca:	602f      	str	r7, [r5, #0]
 80230cc:	2900      	cmp	r1, #0
 80230ce:	d0ca      	beq.n	8023066 <__sflush_r+0x1a>
 80230d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80230d4:	4299      	cmp	r1, r3
 80230d6:	d002      	beq.n	80230de <__sflush_r+0x92>
 80230d8:	4628      	mov	r0, r5
 80230da:	f000 f9d7 	bl	802348c <_free_r>
 80230de:	2000      	movs	r0, #0
 80230e0:	6360      	str	r0, [r4, #52]	; 0x34
 80230e2:	e7c1      	b.n	8023068 <__sflush_r+0x1c>
 80230e4:	6a21      	ldr	r1, [r4, #32]
 80230e6:	2301      	movs	r3, #1
 80230e8:	4628      	mov	r0, r5
 80230ea:	47b0      	blx	r6
 80230ec:	1c41      	adds	r1, r0, #1
 80230ee:	d1c7      	bne.n	8023080 <__sflush_r+0x34>
 80230f0:	682b      	ldr	r3, [r5, #0]
 80230f2:	2b00      	cmp	r3, #0
 80230f4:	d0c4      	beq.n	8023080 <__sflush_r+0x34>
 80230f6:	2b1d      	cmp	r3, #29
 80230f8:	d001      	beq.n	80230fe <__sflush_r+0xb2>
 80230fa:	2b16      	cmp	r3, #22
 80230fc:	d101      	bne.n	8023102 <__sflush_r+0xb6>
 80230fe:	602f      	str	r7, [r5, #0]
 8023100:	e7b1      	b.n	8023066 <__sflush_r+0x1a>
 8023102:	89a3      	ldrh	r3, [r4, #12]
 8023104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023108:	81a3      	strh	r3, [r4, #12]
 802310a:	e7ad      	b.n	8023068 <__sflush_r+0x1c>
 802310c:	690f      	ldr	r7, [r1, #16]
 802310e:	2f00      	cmp	r7, #0
 8023110:	d0a9      	beq.n	8023066 <__sflush_r+0x1a>
 8023112:	0793      	lsls	r3, r2, #30
 8023114:	680e      	ldr	r6, [r1, #0]
 8023116:	bf08      	it	eq
 8023118:	694b      	ldreq	r3, [r1, #20]
 802311a:	600f      	str	r7, [r1, #0]
 802311c:	bf18      	it	ne
 802311e:	2300      	movne	r3, #0
 8023120:	eba6 0807 	sub.w	r8, r6, r7
 8023124:	608b      	str	r3, [r1, #8]
 8023126:	f1b8 0f00 	cmp.w	r8, #0
 802312a:	dd9c      	ble.n	8023066 <__sflush_r+0x1a>
 802312c:	6a21      	ldr	r1, [r4, #32]
 802312e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023130:	4643      	mov	r3, r8
 8023132:	463a      	mov	r2, r7
 8023134:	4628      	mov	r0, r5
 8023136:	47b0      	blx	r6
 8023138:	2800      	cmp	r0, #0
 802313a:	dc06      	bgt.n	802314a <__sflush_r+0xfe>
 802313c:	89a3      	ldrh	r3, [r4, #12]
 802313e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023142:	81a3      	strh	r3, [r4, #12]
 8023144:	f04f 30ff 	mov.w	r0, #4294967295
 8023148:	e78e      	b.n	8023068 <__sflush_r+0x1c>
 802314a:	4407      	add	r7, r0
 802314c:	eba8 0800 	sub.w	r8, r8, r0
 8023150:	e7e9      	b.n	8023126 <__sflush_r+0xda>
 8023152:	bf00      	nop
 8023154:	20400001 	.word	0x20400001

08023158 <_fflush_r>:
 8023158:	b538      	push	{r3, r4, r5, lr}
 802315a:	690b      	ldr	r3, [r1, #16]
 802315c:	4605      	mov	r5, r0
 802315e:	460c      	mov	r4, r1
 8023160:	b913      	cbnz	r3, 8023168 <_fflush_r+0x10>
 8023162:	2500      	movs	r5, #0
 8023164:	4628      	mov	r0, r5
 8023166:	bd38      	pop	{r3, r4, r5, pc}
 8023168:	b118      	cbz	r0, 8023172 <_fflush_r+0x1a>
 802316a:	6983      	ldr	r3, [r0, #24]
 802316c:	b90b      	cbnz	r3, 8023172 <_fflush_r+0x1a>
 802316e:	f000 f887 	bl	8023280 <__sinit>
 8023172:	4b14      	ldr	r3, [pc, #80]	; (80231c4 <_fflush_r+0x6c>)
 8023174:	429c      	cmp	r4, r3
 8023176:	d11b      	bne.n	80231b0 <_fflush_r+0x58>
 8023178:	686c      	ldr	r4, [r5, #4]
 802317a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802317e:	2b00      	cmp	r3, #0
 8023180:	d0ef      	beq.n	8023162 <_fflush_r+0xa>
 8023182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023184:	07d0      	lsls	r0, r2, #31
 8023186:	d404      	bmi.n	8023192 <_fflush_r+0x3a>
 8023188:	0599      	lsls	r1, r3, #22
 802318a:	d402      	bmi.n	8023192 <_fflush_r+0x3a>
 802318c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802318e:	f000 f915 	bl	80233bc <__retarget_lock_acquire_recursive>
 8023192:	4628      	mov	r0, r5
 8023194:	4621      	mov	r1, r4
 8023196:	f7ff ff59 	bl	802304c <__sflush_r>
 802319a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802319c:	07da      	lsls	r2, r3, #31
 802319e:	4605      	mov	r5, r0
 80231a0:	d4e0      	bmi.n	8023164 <_fflush_r+0xc>
 80231a2:	89a3      	ldrh	r3, [r4, #12]
 80231a4:	059b      	lsls	r3, r3, #22
 80231a6:	d4dd      	bmi.n	8023164 <_fflush_r+0xc>
 80231a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80231aa:	f000 f908 	bl	80233be <__retarget_lock_release_recursive>
 80231ae:	e7d9      	b.n	8023164 <_fflush_r+0xc>
 80231b0:	4b05      	ldr	r3, [pc, #20]	; (80231c8 <_fflush_r+0x70>)
 80231b2:	429c      	cmp	r4, r3
 80231b4:	d101      	bne.n	80231ba <_fflush_r+0x62>
 80231b6:	68ac      	ldr	r4, [r5, #8]
 80231b8:	e7df      	b.n	802317a <_fflush_r+0x22>
 80231ba:	4b04      	ldr	r3, [pc, #16]	; (80231cc <_fflush_r+0x74>)
 80231bc:	429c      	cmp	r4, r3
 80231be:	bf08      	it	eq
 80231c0:	68ec      	ldreq	r4, [r5, #12]
 80231c2:	e7da      	b.n	802317a <_fflush_r+0x22>
 80231c4:	08026084 	.word	0x08026084
 80231c8:	080260a4 	.word	0x080260a4
 80231cc:	08026064 	.word	0x08026064

080231d0 <std>:
 80231d0:	2300      	movs	r3, #0
 80231d2:	b510      	push	{r4, lr}
 80231d4:	4604      	mov	r4, r0
 80231d6:	e9c0 3300 	strd	r3, r3, [r0]
 80231da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80231de:	6083      	str	r3, [r0, #8]
 80231e0:	8181      	strh	r1, [r0, #12]
 80231e2:	6643      	str	r3, [r0, #100]	; 0x64
 80231e4:	81c2      	strh	r2, [r0, #14]
 80231e6:	6183      	str	r3, [r0, #24]
 80231e8:	4619      	mov	r1, r3
 80231ea:	2208      	movs	r2, #8
 80231ec:	305c      	adds	r0, #92	; 0x5c
 80231ee:	f7ff fdcf 	bl	8022d90 <memset>
 80231f2:	4b05      	ldr	r3, [pc, #20]	; (8023208 <std+0x38>)
 80231f4:	6263      	str	r3, [r4, #36]	; 0x24
 80231f6:	4b05      	ldr	r3, [pc, #20]	; (802320c <std+0x3c>)
 80231f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80231fa:	4b05      	ldr	r3, [pc, #20]	; (8023210 <std+0x40>)
 80231fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80231fe:	4b05      	ldr	r3, [pc, #20]	; (8023214 <std+0x44>)
 8023200:	6224      	str	r4, [r4, #32]
 8023202:	6323      	str	r3, [r4, #48]	; 0x30
 8023204:	bd10      	pop	{r4, pc}
 8023206:	bf00      	nop
 8023208:	08023c49 	.word	0x08023c49
 802320c:	08023c6b 	.word	0x08023c6b
 8023210:	08023ca3 	.word	0x08023ca3
 8023214:	08023cc7 	.word	0x08023cc7

08023218 <_cleanup_r>:
 8023218:	4901      	ldr	r1, [pc, #4]	; (8023220 <_cleanup_r+0x8>)
 802321a:	f000 b8af 	b.w	802337c <_fwalk_reent>
 802321e:	bf00      	nop
 8023220:	08023159 	.word	0x08023159

08023224 <__sfmoreglue>:
 8023224:	b570      	push	{r4, r5, r6, lr}
 8023226:	2268      	movs	r2, #104	; 0x68
 8023228:	1e4d      	subs	r5, r1, #1
 802322a:	4355      	muls	r5, r2
 802322c:	460e      	mov	r6, r1
 802322e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023232:	f000 f997 	bl	8023564 <_malloc_r>
 8023236:	4604      	mov	r4, r0
 8023238:	b140      	cbz	r0, 802324c <__sfmoreglue+0x28>
 802323a:	2100      	movs	r1, #0
 802323c:	e9c0 1600 	strd	r1, r6, [r0]
 8023240:	300c      	adds	r0, #12
 8023242:	60a0      	str	r0, [r4, #8]
 8023244:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023248:	f7ff fda2 	bl	8022d90 <memset>
 802324c:	4620      	mov	r0, r4
 802324e:	bd70      	pop	{r4, r5, r6, pc}

08023250 <__sfp_lock_acquire>:
 8023250:	4801      	ldr	r0, [pc, #4]	; (8023258 <__sfp_lock_acquire+0x8>)
 8023252:	f000 b8b3 	b.w	80233bc <__retarget_lock_acquire_recursive>
 8023256:	bf00      	nop
 8023258:	200068a2 	.word	0x200068a2

0802325c <__sfp_lock_release>:
 802325c:	4801      	ldr	r0, [pc, #4]	; (8023264 <__sfp_lock_release+0x8>)
 802325e:	f000 b8ae 	b.w	80233be <__retarget_lock_release_recursive>
 8023262:	bf00      	nop
 8023264:	200068a2 	.word	0x200068a2

08023268 <__sinit_lock_acquire>:
 8023268:	4801      	ldr	r0, [pc, #4]	; (8023270 <__sinit_lock_acquire+0x8>)
 802326a:	f000 b8a7 	b.w	80233bc <__retarget_lock_acquire_recursive>
 802326e:	bf00      	nop
 8023270:	200068a3 	.word	0x200068a3

08023274 <__sinit_lock_release>:
 8023274:	4801      	ldr	r0, [pc, #4]	; (802327c <__sinit_lock_release+0x8>)
 8023276:	f000 b8a2 	b.w	80233be <__retarget_lock_release_recursive>
 802327a:	bf00      	nop
 802327c:	200068a3 	.word	0x200068a3

08023280 <__sinit>:
 8023280:	b510      	push	{r4, lr}
 8023282:	4604      	mov	r4, r0
 8023284:	f7ff fff0 	bl	8023268 <__sinit_lock_acquire>
 8023288:	69a3      	ldr	r3, [r4, #24]
 802328a:	b11b      	cbz	r3, 8023294 <__sinit+0x14>
 802328c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023290:	f7ff bff0 	b.w	8023274 <__sinit_lock_release>
 8023294:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023298:	6523      	str	r3, [r4, #80]	; 0x50
 802329a:	4b13      	ldr	r3, [pc, #76]	; (80232e8 <__sinit+0x68>)
 802329c:	4a13      	ldr	r2, [pc, #76]	; (80232ec <__sinit+0x6c>)
 802329e:	681b      	ldr	r3, [r3, #0]
 80232a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80232a2:	42a3      	cmp	r3, r4
 80232a4:	bf04      	itt	eq
 80232a6:	2301      	moveq	r3, #1
 80232a8:	61a3      	streq	r3, [r4, #24]
 80232aa:	4620      	mov	r0, r4
 80232ac:	f000 f820 	bl	80232f0 <__sfp>
 80232b0:	6060      	str	r0, [r4, #4]
 80232b2:	4620      	mov	r0, r4
 80232b4:	f000 f81c 	bl	80232f0 <__sfp>
 80232b8:	60a0      	str	r0, [r4, #8]
 80232ba:	4620      	mov	r0, r4
 80232bc:	f000 f818 	bl	80232f0 <__sfp>
 80232c0:	2200      	movs	r2, #0
 80232c2:	60e0      	str	r0, [r4, #12]
 80232c4:	2104      	movs	r1, #4
 80232c6:	6860      	ldr	r0, [r4, #4]
 80232c8:	f7ff ff82 	bl	80231d0 <std>
 80232cc:	68a0      	ldr	r0, [r4, #8]
 80232ce:	2201      	movs	r2, #1
 80232d0:	2109      	movs	r1, #9
 80232d2:	f7ff ff7d 	bl	80231d0 <std>
 80232d6:	68e0      	ldr	r0, [r4, #12]
 80232d8:	2202      	movs	r2, #2
 80232da:	2112      	movs	r1, #18
 80232dc:	f7ff ff78 	bl	80231d0 <std>
 80232e0:	2301      	movs	r3, #1
 80232e2:	61a3      	str	r3, [r4, #24]
 80232e4:	e7d2      	b.n	802328c <__sinit+0xc>
 80232e6:	bf00      	nop
 80232e8:	08026060 	.word	0x08026060
 80232ec:	08023219 	.word	0x08023219

080232f0 <__sfp>:
 80232f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232f2:	4607      	mov	r7, r0
 80232f4:	f7ff ffac 	bl	8023250 <__sfp_lock_acquire>
 80232f8:	4b1e      	ldr	r3, [pc, #120]	; (8023374 <__sfp+0x84>)
 80232fa:	681e      	ldr	r6, [r3, #0]
 80232fc:	69b3      	ldr	r3, [r6, #24]
 80232fe:	b913      	cbnz	r3, 8023306 <__sfp+0x16>
 8023300:	4630      	mov	r0, r6
 8023302:	f7ff ffbd 	bl	8023280 <__sinit>
 8023306:	3648      	adds	r6, #72	; 0x48
 8023308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802330c:	3b01      	subs	r3, #1
 802330e:	d503      	bpl.n	8023318 <__sfp+0x28>
 8023310:	6833      	ldr	r3, [r6, #0]
 8023312:	b30b      	cbz	r3, 8023358 <__sfp+0x68>
 8023314:	6836      	ldr	r6, [r6, #0]
 8023316:	e7f7      	b.n	8023308 <__sfp+0x18>
 8023318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802331c:	b9d5      	cbnz	r5, 8023354 <__sfp+0x64>
 802331e:	4b16      	ldr	r3, [pc, #88]	; (8023378 <__sfp+0x88>)
 8023320:	60e3      	str	r3, [r4, #12]
 8023322:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023326:	6665      	str	r5, [r4, #100]	; 0x64
 8023328:	f000 f847 	bl	80233ba <__retarget_lock_init_recursive>
 802332c:	f7ff ff96 	bl	802325c <__sfp_lock_release>
 8023330:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023334:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023338:	6025      	str	r5, [r4, #0]
 802333a:	61a5      	str	r5, [r4, #24]
 802333c:	2208      	movs	r2, #8
 802333e:	4629      	mov	r1, r5
 8023340:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023344:	f7ff fd24 	bl	8022d90 <memset>
 8023348:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802334c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023350:	4620      	mov	r0, r4
 8023352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023354:	3468      	adds	r4, #104	; 0x68
 8023356:	e7d9      	b.n	802330c <__sfp+0x1c>
 8023358:	2104      	movs	r1, #4
 802335a:	4638      	mov	r0, r7
 802335c:	f7ff ff62 	bl	8023224 <__sfmoreglue>
 8023360:	4604      	mov	r4, r0
 8023362:	6030      	str	r0, [r6, #0]
 8023364:	2800      	cmp	r0, #0
 8023366:	d1d5      	bne.n	8023314 <__sfp+0x24>
 8023368:	f7ff ff78 	bl	802325c <__sfp_lock_release>
 802336c:	230c      	movs	r3, #12
 802336e:	603b      	str	r3, [r7, #0]
 8023370:	e7ee      	b.n	8023350 <__sfp+0x60>
 8023372:	bf00      	nop
 8023374:	08026060 	.word	0x08026060
 8023378:	ffff0001 	.word	0xffff0001

0802337c <_fwalk_reent>:
 802337c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023380:	4606      	mov	r6, r0
 8023382:	4688      	mov	r8, r1
 8023384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023388:	2700      	movs	r7, #0
 802338a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802338e:	f1b9 0901 	subs.w	r9, r9, #1
 8023392:	d505      	bpl.n	80233a0 <_fwalk_reent+0x24>
 8023394:	6824      	ldr	r4, [r4, #0]
 8023396:	2c00      	cmp	r4, #0
 8023398:	d1f7      	bne.n	802338a <_fwalk_reent+0xe>
 802339a:	4638      	mov	r0, r7
 802339c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80233a0:	89ab      	ldrh	r3, [r5, #12]
 80233a2:	2b01      	cmp	r3, #1
 80233a4:	d907      	bls.n	80233b6 <_fwalk_reent+0x3a>
 80233a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80233aa:	3301      	adds	r3, #1
 80233ac:	d003      	beq.n	80233b6 <_fwalk_reent+0x3a>
 80233ae:	4629      	mov	r1, r5
 80233b0:	4630      	mov	r0, r6
 80233b2:	47c0      	blx	r8
 80233b4:	4307      	orrs	r7, r0
 80233b6:	3568      	adds	r5, #104	; 0x68
 80233b8:	e7e9      	b.n	802338e <_fwalk_reent+0x12>

080233ba <__retarget_lock_init_recursive>:
 80233ba:	4770      	bx	lr

080233bc <__retarget_lock_acquire_recursive>:
 80233bc:	4770      	bx	lr

080233be <__retarget_lock_release_recursive>:
 80233be:	4770      	bx	lr

080233c0 <__swhatbuf_r>:
 80233c0:	b570      	push	{r4, r5, r6, lr}
 80233c2:	460e      	mov	r6, r1
 80233c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80233c8:	2900      	cmp	r1, #0
 80233ca:	b096      	sub	sp, #88	; 0x58
 80233cc:	4614      	mov	r4, r2
 80233ce:	461d      	mov	r5, r3
 80233d0:	da08      	bge.n	80233e4 <__swhatbuf_r+0x24>
 80233d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80233d6:	2200      	movs	r2, #0
 80233d8:	602a      	str	r2, [r5, #0]
 80233da:	061a      	lsls	r2, r3, #24
 80233dc:	d410      	bmi.n	8023400 <__swhatbuf_r+0x40>
 80233de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80233e2:	e00e      	b.n	8023402 <__swhatbuf_r+0x42>
 80233e4:	466a      	mov	r2, sp
 80233e6:	f000 fc95 	bl	8023d14 <_fstat_r>
 80233ea:	2800      	cmp	r0, #0
 80233ec:	dbf1      	blt.n	80233d2 <__swhatbuf_r+0x12>
 80233ee:	9a01      	ldr	r2, [sp, #4]
 80233f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80233f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80233f8:	425a      	negs	r2, r3
 80233fa:	415a      	adcs	r2, r3
 80233fc:	602a      	str	r2, [r5, #0]
 80233fe:	e7ee      	b.n	80233de <__swhatbuf_r+0x1e>
 8023400:	2340      	movs	r3, #64	; 0x40
 8023402:	2000      	movs	r0, #0
 8023404:	6023      	str	r3, [r4, #0]
 8023406:	b016      	add	sp, #88	; 0x58
 8023408:	bd70      	pop	{r4, r5, r6, pc}
	...

0802340c <__smakebuf_r>:
 802340c:	898b      	ldrh	r3, [r1, #12]
 802340e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023410:	079d      	lsls	r5, r3, #30
 8023412:	4606      	mov	r6, r0
 8023414:	460c      	mov	r4, r1
 8023416:	d507      	bpl.n	8023428 <__smakebuf_r+0x1c>
 8023418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802341c:	6023      	str	r3, [r4, #0]
 802341e:	6123      	str	r3, [r4, #16]
 8023420:	2301      	movs	r3, #1
 8023422:	6163      	str	r3, [r4, #20]
 8023424:	b002      	add	sp, #8
 8023426:	bd70      	pop	{r4, r5, r6, pc}
 8023428:	ab01      	add	r3, sp, #4
 802342a:	466a      	mov	r2, sp
 802342c:	f7ff ffc8 	bl	80233c0 <__swhatbuf_r>
 8023430:	9900      	ldr	r1, [sp, #0]
 8023432:	4605      	mov	r5, r0
 8023434:	4630      	mov	r0, r6
 8023436:	f000 f895 	bl	8023564 <_malloc_r>
 802343a:	b948      	cbnz	r0, 8023450 <__smakebuf_r+0x44>
 802343c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023440:	059a      	lsls	r2, r3, #22
 8023442:	d4ef      	bmi.n	8023424 <__smakebuf_r+0x18>
 8023444:	f023 0303 	bic.w	r3, r3, #3
 8023448:	f043 0302 	orr.w	r3, r3, #2
 802344c:	81a3      	strh	r3, [r4, #12]
 802344e:	e7e3      	b.n	8023418 <__smakebuf_r+0xc>
 8023450:	4b0d      	ldr	r3, [pc, #52]	; (8023488 <__smakebuf_r+0x7c>)
 8023452:	62b3      	str	r3, [r6, #40]	; 0x28
 8023454:	89a3      	ldrh	r3, [r4, #12]
 8023456:	6020      	str	r0, [r4, #0]
 8023458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802345c:	81a3      	strh	r3, [r4, #12]
 802345e:	9b00      	ldr	r3, [sp, #0]
 8023460:	6163      	str	r3, [r4, #20]
 8023462:	9b01      	ldr	r3, [sp, #4]
 8023464:	6120      	str	r0, [r4, #16]
 8023466:	b15b      	cbz	r3, 8023480 <__smakebuf_r+0x74>
 8023468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802346c:	4630      	mov	r0, r6
 802346e:	f000 fc63 	bl	8023d38 <_isatty_r>
 8023472:	b128      	cbz	r0, 8023480 <__smakebuf_r+0x74>
 8023474:	89a3      	ldrh	r3, [r4, #12]
 8023476:	f023 0303 	bic.w	r3, r3, #3
 802347a:	f043 0301 	orr.w	r3, r3, #1
 802347e:	81a3      	strh	r3, [r4, #12]
 8023480:	89a0      	ldrh	r0, [r4, #12]
 8023482:	4305      	orrs	r5, r0
 8023484:	81a5      	strh	r5, [r4, #12]
 8023486:	e7cd      	b.n	8023424 <__smakebuf_r+0x18>
 8023488:	08023219 	.word	0x08023219

0802348c <_free_r>:
 802348c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802348e:	2900      	cmp	r1, #0
 8023490:	d044      	beq.n	802351c <_free_r+0x90>
 8023492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023496:	9001      	str	r0, [sp, #4]
 8023498:	2b00      	cmp	r3, #0
 802349a:	f1a1 0404 	sub.w	r4, r1, #4
 802349e:	bfb8      	it	lt
 80234a0:	18e4      	addlt	r4, r4, r3
 80234a2:	f000 fc6b 	bl	8023d7c <__malloc_lock>
 80234a6:	4a1e      	ldr	r2, [pc, #120]	; (8023520 <_free_r+0x94>)
 80234a8:	9801      	ldr	r0, [sp, #4]
 80234aa:	6813      	ldr	r3, [r2, #0]
 80234ac:	b933      	cbnz	r3, 80234bc <_free_r+0x30>
 80234ae:	6063      	str	r3, [r4, #4]
 80234b0:	6014      	str	r4, [r2, #0]
 80234b2:	b003      	add	sp, #12
 80234b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80234b8:	f000 bc66 	b.w	8023d88 <__malloc_unlock>
 80234bc:	42a3      	cmp	r3, r4
 80234be:	d908      	bls.n	80234d2 <_free_r+0x46>
 80234c0:	6825      	ldr	r5, [r4, #0]
 80234c2:	1961      	adds	r1, r4, r5
 80234c4:	428b      	cmp	r3, r1
 80234c6:	bf01      	itttt	eq
 80234c8:	6819      	ldreq	r1, [r3, #0]
 80234ca:	685b      	ldreq	r3, [r3, #4]
 80234cc:	1949      	addeq	r1, r1, r5
 80234ce:	6021      	streq	r1, [r4, #0]
 80234d0:	e7ed      	b.n	80234ae <_free_r+0x22>
 80234d2:	461a      	mov	r2, r3
 80234d4:	685b      	ldr	r3, [r3, #4]
 80234d6:	b10b      	cbz	r3, 80234dc <_free_r+0x50>
 80234d8:	42a3      	cmp	r3, r4
 80234da:	d9fa      	bls.n	80234d2 <_free_r+0x46>
 80234dc:	6811      	ldr	r1, [r2, #0]
 80234de:	1855      	adds	r5, r2, r1
 80234e0:	42a5      	cmp	r5, r4
 80234e2:	d10b      	bne.n	80234fc <_free_r+0x70>
 80234e4:	6824      	ldr	r4, [r4, #0]
 80234e6:	4421      	add	r1, r4
 80234e8:	1854      	adds	r4, r2, r1
 80234ea:	42a3      	cmp	r3, r4
 80234ec:	6011      	str	r1, [r2, #0]
 80234ee:	d1e0      	bne.n	80234b2 <_free_r+0x26>
 80234f0:	681c      	ldr	r4, [r3, #0]
 80234f2:	685b      	ldr	r3, [r3, #4]
 80234f4:	6053      	str	r3, [r2, #4]
 80234f6:	4421      	add	r1, r4
 80234f8:	6011      	str	r1, [r2, #0]
 80234fa:	e7da      	b.n	80234b2 <_free_r+0x26>
 80234fc:	d902      	bls.n	8023504 <_free_r+0x78>
 80234fe:	230c      	movs	r3, #12
 8023500:	6003      	str	r3, [r0, #0]
 8023502:	e7d6      	b.n	80234b2 <_free_r+0x26>
 8023504:	6825      	ldr	r5, [r4, #0]
 8023506:	1961      	adds	r1, r4, r5
 8023508:	428b      	cmp	r3, r1
 802350a:	bf04      	itt	eq
 802350c:	6819      	ldreq	r1, [r3, #0]
 802350e:	685b      	ldreq	r3, [r3, #4]
 8023510:	6063      	str	r3, [r4, #4]
 8023512:	bf04      	itt	eq
 8023514:	1949      	addeq	r1, r1, r5
 8023516:	6021      	streq	r1, [r4, #0]
 8023518:	6054      	str	r4, [r2, #4]
 802351a:	e7ca      	b.n	80234b2 <_free_r+0x26>
 802351c:	b003      	add	sp, #12
 802351e:	bd30      	pop	{r4, r5, pc}
 8023520:	200068a4 	.word	0x200068a4

08023524 <sbrk_aligned>:
 8023524:	b570      	push	{r4, r5, r6, lr}
 8023526:	4e0e      	ldr	r6, [pc, #56]	; (8023560 <sbrk_aligned+0x3c>)
 8023528:	460c      	mov	r4, r1
 802352a:	6831      	ldr	r1, [r6, #0]
 802352c:	4605      	mov	r5, r0
 802352e:	b911      	cbnz	r1, 8023536 <sbrk_aligned+0x12>
 8023530:	f000 fb7a 	bl	8023c28 <_sbrk_r>
 8023534:	6030      	str	r0, [r6, #0]
 8023536:	4621      	mov	r1, r4
 8023538:	4628      	mov	r0, r5
 802353a:	f000 fb75 	bl	8023c28 <_sbrk_r>
 802353e:	1c43      	adds	r3, r0, #1
 8023540:	d00a      	beq.n	8023558 <sbrk_aligned+0x34>
 8023542:	1cc4      	adds	r4, r0, #3
 8023544:	f024 0403 	bic.w	r4, r4, #3
 8023548:	42a0      	cmp	r0, r4
 802354a:	d007      	beq.n	802355c <sbrk_aligned+0x38>
 802354c:	1a21      	subs	r1, r4, r0
 802354e:	4628      	mov	r0, r5
 8023550:	f000 fb6a 	bl	8023c28 <_sbrk_r>
 8023554:	3001      	adds	r0, #1
 8023556:	d101      	bne.n	802355c <sbrk_aligned+0x38>
 8023558:	f04f 34ff 	mov.w	r4, #4294967295
 802355c:	4620      	mov	r0, r4
 802355e:	bd70      	pop	{r4, r5, r6, pc}
 8023560:	200068a8 	.word	0x200068a8

08023564 <_malloc_r>:
 8023564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023568:	1ccd      	adds	r5, r1, #3
 802356a:	f025 0503 	bic.w	r5, r5, #3
 802356e:	3508      	adds	r5, #8
 8023570:	2d0c      	cmp	r5, #12
 8023572:	bf38      	it	cc
 8023574:	250c      	movcc	r5, #12
 8023576:	2d00      	cmp	r5, #0
 8023578:	4607      	mov	r7, r0
 802357a:	db01      	blt.n	8023580 <_malloc_r+0x1c>
 802357c:	42a9      	cmp	r1, r5
 802357e:	d905      	bls.n	802358c <_malloc_r+0x28>
 8023580:	230c      	movs	r3, #12
 8023582:	603b      	str	r3, [r7, #0]
 8023584:	2600      	movs	r6, #0
 8023586:	4630      	mov	r0, r6
 8023588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802358c:	4e2e      	ldr	r6, [pc, #184]	; (8023648 <_malloc_r+0xe4>)
 802358e:	f000 fbf5 	bl	8023d7c <__malloc_lock>
 8023592:	6833      	ldr	r3, [r6, #0]
 8023594:	461c      	mov	r4, r3
 8023596:	bb34      	cbnz	r4, 80235e6 <_malloc_r+0x82>
 8023598:	4629      	mov	r1, r5
 802359a:	4638      	mov	r0, r7
 802359c:	f7ff ffc2 	bl	8023524 <sbrk_aligned>
 80235a0:	1c43      	adds	r3, r0, #1
 80235a2:	4604      	mov	r4, r0
 80235a4:	d14d      	bne.n	8023642 <_malloc_r+0xde>
 80235a6:	6834      	ldr	r4, [r6, #0]
 80235a8:	4626      	mov	r6, r4
 80235aa:	2e00      	cmp	r6, #0
 80235ac:	d140      	bne.n	8023630 <_malloc_r+0xcc>
 80235ae:	6823      	ldr	r3, [r4, #0]
 80235b0:	4631      	mov	r1, r6
 80235b2:	4638      	mov	r0, r7
 80235b4:	eb04 0803 	add.w	r8, r4, r3
 80235b8:	f000 fb36 	bl	8023c28 <_sbrk_r>
 80235bc:	4580      	cmp	r8, r0
 80235be:	d13a      	bne.n	8023636 <_malloc_r+0xd2>
 80235c0:	6821      	ldr	r1, [r4, #0]
 80235c2:	3503      	adds	r5, #3
 80235c4:	1a6d      	subs	r5, r5, r1
 80235c6:	f025 0503 	bic.w	r5, r5, #3
 80235ca:	3508      	adds	r5, #8
 80235cc:	2d0c      	cmp	r5, #12
 80235ce:	bf38      	it	cc
 80235d0:	250c      	movcc	r5, #12
 80235d2:	4629      	mov	r1, r5
 80235d4:	4638      	mov	r0, r7
 80235d6:	f7ff ffa5 	bl	8023524 <sbrk_aligned>
 80235da:	3001      	adds	r0, #1
 80235dc:	d02b      	beq.n	8023636 <_malloc_r+0xd2>
 80235de:	6823      	ldr	r3, [r4, #0]
 80235e0:	442b      	add	r3, r5
 80235e2:	6023      	str	r3, [r4, #0]
 80235e4:	e00e      	b.n	8023604 <_malloc_r+0xa0>
 80235e6:	6822      	ldr	r2, [r4, #0]
 80235e8:	1b52      	subs	r2, r2, r5
 80235ea:	d41e      	bmi.n	802362a <_malloc_r+0xc6>
 80235ec:	2a0b      	cmp	r2, #11
 80235ee:	d916      	bls.n	802361e <_malloc_r+0xba>
 80235f0:	1961      	adds	r1, r4, r5
 80235f2:	42a3      	cmp	r3, r4
 80235f4:	6025      	str	r5, [r4, #0]
 80235f6:	bf18      	it	ne
 80235f8:	6059      	strne	r1, [r3, #4]
 80235fa:	6863      	ldr	r3, [r4, #4]
 80235fc:	bf08      	it	eq
 80235fe:	6031      	streq	r1, [r6, #0]
 8023600:	5162      	str	r2, [r4, r5]
 8023602:	604b      	str	r3, [r1, #4]
 8023604:	4638      	mov	r0, r7
 8023606:	f104 060b 	add.w	r6, r4, #11
 802360a:	f000 fbbd 	bl	8023d88 <__malloc_unlock>
 802360e:	f026 0607 	bic.w	r6, r6, #7
 8023612:	1d23      	adds	r3, r4, #4
 8023614:	1af2      	subs	r2, r6, r3
 8023616:	d0b6      	beq.n	8023586 <_malloc_r+0x22>
 8023618:	1b9b      	subs	r3, r3, r6
 802361a:	50a3      	str	r3, [r4, r2]
 802361c:	e7b3      	b.n	8023586 <_malloc_r+0x22>
 802361e:	6862      	ldr	r2, [r4, #4]
 8023620:	42a3      	cmp	r3, r4
 8023622:	bf0c      	ite	eq
 8023624:	6032      	streq	r2, [r6, #0]
 8023626:	605a      	strne	r2, [r3, #4]
 8023628:	e7ec      	b.n	8023604 <_malloc_r+0xa0>
 802362a:	4623      	mov	r3, r4
 802362c:	6864      	ldr	r4, [r4, #4]
 802362e:	e7b2      	b.n	8023596 <_malloc_r+0x32>
 8023630:	4634      	mov	r4, r6
 8023632:	6876      	ldr	r6, [r6, #4]
 8023634:	e7b9      	b.n	80235aa <_malloc_r+0x46>
 8023636:	230c      	movs	r3, #12
 8023638:	603b      	str	r3, [r7, #0]
 802363a:	4638      	mov	r0, r7
 802363c:	f000 fba4 	bl	8023d88 <__malloc_unlock>
 8023640:	e7a1      	b.n	8023586 <_malloc_r+0x22>
 8023642:	6025      	str	r5, [r4, #0]
 8023644:	e7de      	b.n	8023604 <_malloc_r+0xa0>
 8023646:	bf00      	nop
 8023648:	200068a4 	.word	0x200068a4

0802364c <__sfputc_r>:
 802364c:	6893      	ldr	r3, [r2, #8]
 802364e:	3b01      	subs	r3, #1
 8023650:	2b00      	cmp	r3, #0
 8023652:	b410      	push	{r4}
 8023654:	6093      	str	r3, [r2, #8]
 8023656:	da08      	bge.n	802366a <__sfputc_r+0x1e>
 8023658:	6994      	ldr	r4, [r2, #24]
 802365a:	42a3      	cmp	r3, r4
 802365c:	db01      	blt.n	8023662 <__sfputc_r+0x16>
 802365e:	290a      	cmp	r1, #10
 8023660:	d103      	bne.n	802366a <__sfputc_r+0x1e>
 8023662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023666:	f7ff bc31 	b.w	8022ecc <__swbuf_r>
 802366a:	6813      	ldr	r3, [r2, #0]
 802366c:	1c58      	adds	r0, r3, #1
 802366e:	6010      	str	r0, [r2, #0]
 8023670:	7019      	strb	r1, [r3, #0]
 8023672:	4608      	mov	r0, r1
 8023674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023678:	4770      	bx	lr

0802367a <__sfputs_r>:
 802367a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802367c:	4606      	mov	r6, r0
 802367e:	460f      	mov	r7, r1
 8023680:	4614      	mov	r4, r2
 8023682:	18d5      	adds	r5, r2, r3
 8023684:	42ac      	cmp	r4, r5
 8023686:	d101      	bne.n	802368c <__sfputs_r+0x12>
 8023688:	2000      	movs	r0, #0
 802368a:	e007      	b.n	802369c <__sfputs_r+0x22>
 802368c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023690:	463a      	mov	r2, r7
 8023692:	4630      	mov	r0, r6
 8023694:	f7ff ffda 	bl	802364c <__sfputc_r>
 8023698:	1c43      	adds	r3, r0, #1
 802369a:	d1f3      	bne.n	8023684 <__sfputs_r+0xa>
 802369c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080236a0 <_vfiprintf_r>:
 80236a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236a4:	460d      	mov	r5, r1
 80236a6:	b09d      	sub	sp, #116	; 0x74
 80236a8:	4614      	mov	r4, r2
 80236aa:	4698      	mov	r8, r3
 80236ac:	4606      	mov	r6, r0
 80236ae:	b118      	cbz	r0, 80236b8 <_vfiprintf_r+0x18>
 80236b0:	6983      	ldr	r3, [r0, #24]
 80236b2:	b90b      	cbnz	r3, 80236b8 <_vfiprintf_r+0x18>
 80236b4:	f7ff fde4 	bl	8023280 <__sinit>
 80236b8:	4b89      	ldr	r3, [pc, #548]	; (80238e0 <_vfiprintf_r+0x240>)
 80236ba:	429d      	cmp	r5, r3
 80236bc:	d11b      	bne.n	80236f6 <_vfiprintf_r+0x56>
 80236be:	6875      	ldr	r5, [r6, #4]
 80236c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80236c2:	07d9      	lsls	r1, r3, #31
 80236c4:	d405      	bmi.n	80236d2 <_vfiprintf_r+0x32>
 80236c6:	89ab      	ldrh	r3, [r5, #12]
 80236c8:	059a      	lsls	r2, r3, #22
 80236ca:	d402      	bmi.n	80236d2 <_vfiprintf_r+0x32>
 80236cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80236ce:	f7ff fe75 	bl	80233bc <__retarget_lock_acquire_recursive>
 80236d2:	89ab      	ldrh	r3, [r5, #12]
 80236d4:	071b      	lsls	r3, r3, #28
 80236d6:	d501      	bpl.n	80236dc <_vfiprintf_r+0x3c>
 80236d8:	692b      	ldr	r3, [r5, #16]
 80236da:	b9eb      	cbnz	r3, 8023718 <_vfiprintf_r+0x78>
 80236dc:	4629      	mov	r1, r5
 80236de:	4630      	mov	r0, r6
 80236e0:	f7ff fc46 	bl	8022f70 <__swsetup_r>
 80236e4:	b1c0      	cbz	r0, 8023718 <_vfiprintf_r+0x78>
 80236e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80236e8:	07dc      	lsls	r4, r3, #31
 80236ea:	d50e      	bpl.n	802370a <_vfiprintf_r+0x6a>
 80236ec:	f04f 30ff 	mov.w	r0, #4294967295
 80236f0:	b01d      	add	sp, #116	; 0x74
 80236f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236f6:	4b7b      	ldr	r3, [pc, #492]	; (80238e4 <_vfiprintf_r+0x244>)
 80236f8:	429d      	cmp	r5, r3
 80236fa:	d101      	bne.n	8023700 <_vfiprintf_r+0x60>
 80236fc:	68b5      	ldr	r5, [r6, #8]
 80236fe:	e7df      	b.n	80236c0 <_vfiprintf_r+0x20>
 8023700:	4b79      	ldr	r3, [pc, #484]	; (80238e8 <_vfiprintf_r+0x248>)
 8023702:	429d      	cmp	r5, r3
 8023704:	bf08      	it	eq
 8023706:	68f5      	ldreq	r5, [r6, #12]
 8023708:	e7da      	b.n	80236c0 <_vfiprintf_r+0x20>
 802370a:	89ab      	ldrh	r3, [r5, #12]
 802370c:	0598      	lsls	r0, r3, #22
 802370e:	d4ed      	bmi.n	80236ec <_vfiprintf_r+0x4c>
 8023710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023712:	f7ff fe54 	bl	80233be <__retarget_lock_release_recursive>
 8023716:	e7e9      	b.n	80236ec <_vfiprintf_r+0x4c>
 8023718:	2300      	movs	r3, #0
 802371a:	9309      	str	r3, [sp, #36]	; 0x24
 802371c:	2320      	movs	r3, #32
 802371e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023722:	f8cd 800c 	str.w	r8, [sp, #12]
 8023726:	2330      	movs	r3, #48	; 0x30
 8023728:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80238ec <_vfiprintf_r+0x24c>
 802372c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023730:	f04f 0901 	mov.w	r9, #1
 8023734:	4623      	mov	r3, r4
 8023736:	469a      	mov	sl, r3
 8023738:	f813 2b01 	ldrb.w	r2, [r3], #1
 802373c:	b10a      	cbz	r2, 8023742 <_vfiprintf_r+0xa2>
 802373e:	2a25      	cmp	r2, #37	; 0x25
 8023740:	d1f9      	bne.n	8023736 <_vfiprintf_r+0x96>
 8023742:	ebba 0b04 	subs.w	fp, sl, r4
 8023746:	d00b      	beq.n	8023760 <_vfiprintf_r+0xc0>
 8023748:	465b      	mov	r3, fp
 802374a:	4622      	mov	r2, r4
 802374c:	4629      	mov	r1, r5
 802374e:	4630      	mov	r0, r6
 8023750:	f7ff ff93 	bl	802367a <__sfputs_r>
 8023754:	3001      	adds	r0, #1
 8023756:	f000 80aa 	beq.w	80238ae <_vfiprintf_r+0x20e>
 802375a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802375c:	445a      	add	r2, fp
 802375e:	9209      	str	r2, [sp, #36]	; 0x24
 8023760:	f89a 3000 	ldrb.w	r3, [sl]
 8023764:	2b00      	cmp	r3, #0
 8023766:	f000 80a2 	beq.w	80238ae <_vfiprintf_r+0x20e>
 802376a:	2300      	movs	r3, #0
 802376c:	f04f 32ff 	mov.w	r2, #4294967295
 8023770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023774:	f10a 0a01 	add.w	sl, sl, #1
 8023778:	9304      	str	r3, [sp, #16]
 802377a:	9307      	str	r3, [sp, #28]
 802377c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023780:	931a      	str	r3, [sp, #104]	; 0x68
 8023782:	4654      	mov	r4, sl
 8023784:	2205      	movs	r2, #5
 8023786:	f814 1b01 	ldrb.w	r1, [r4], #1
 802378a:	4858      	ldr	r0, [pc, #352]	; (80238ec <_vfiprintf_r+0x24c>)
 802378c:	f7dc fcf8 	bl	8000180 <memchr>
 8023790:	9a04      	ldr	r2, [sp, #16]
 8023792:	b9d8      	cbnz	r0, 80237cc <_vfiprintf_r+0x12c>
 8023794:	06d1      	lsls	r1, r2, #27
 8023796:	bf44      	itt	mi
 8023798:	2320      	movmi	r3, #32
 802379a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802379e:	0713      	lsls	r3, r2, #28
 80237a0:	bf44      	itt	mi
 80237a2:	232b      	movmi	r3, #43	; 0x2b
 80237a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80237a8:	f89a 3000 	ldrb.w	r3, [sl]
 80237ac:	2b2a      	cmp	r3, #42	; 0x2a
 80237ae:	d015      	beq.n	80237dc <_vfiprintf_r+0x13c>
 80237b0:	9a07      	ldr	r2, [sp, #28]
 80237b2:	4654      	mov	r4, sl
 80237b4:	2000      	movs	r0, #0
 80237b6:	f04f 0c0a 	mov.w	ip, #10
 80237ba:	4621      	mov	r1, r4
 80237bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80237c0:	3b30      	subs	r3, #48	; 0x30
 80237c2:	2b09      	cmp	r3, #9
 80237c4:	d94e      	bls.n	8023864 <_vfiprintf_r+0x1c4>
 80237c6:	b1b0      	cbz	r0, 80237f6 <_vfiprintf_r+0x156>
 80237c8:	9207      	str	r2, [sp, #28]
 80237ca:	e014      	b.n	80237f6 <_vfiprintf_r+0x156>
 80237cc:	eba0 0308 	sub.w	r3, r0, r8
 80237d0:	fa09 f303 	lsl.w	r3, r9, r3
 80237d4:	4313      	orrs	r3, r2
 80237d6:	9304      	str	r3, [sp, #16]
 80237d8:	46a2      	mov	sl, r4
 80237da:	e7d2      	b.n	8023782 <_vfiprintf_r+0xe2>
 80237dc:	9b03      	ldr	r3, [sp, #12]
 80237de:	1d19      	adds	r1, r3, #4
 80237e0:	681b      	ldr	r3, [r3, #0]
 80237e2:	9103      	str	r1, [sp, #12]
 80237e4:	2b00      	cmp	r3, #0
 80237e6:	bfbb      	ittet	lt
 80237e8:	425b      	neglt	r3, r3
 80237ea:	f042 0202 	orrlt.w	r2, r2, #2
 80237ee:	9307      	strge	r3, [sp, #28]
 80237f0:	9307      	strlt	r3, [sp, #28]
 80237f2:	bfb8      	it	lt
 80237f4:	9204      	strlt	r2, [sp, #16]
 80237f6:	7823      	ldrb	r3, [r4, #0]
 80237f8:	2b2e      	cmp	r3, #46	; 0x2e
 80237fa:	d10c      	bne.n	8023816 <_vfiprintf_r+0x176>
 80237fc:	7863      	ldrb	r3, [r4, #1]
 80237fe:	2b2a      	cmp	r3, #42	; 0x2a
 8023800:	d135      	bne.n	802386e <_vfiprintf_r+0x1ce>
 8023802:	9b03      	ldr	r3, [sp, #12]
 8023804:	1d1a      	adds	r2, r3, #4
 8023806:	681b      	ldr	r3, [r3, #0]
 8023808:	9203      	str	r2, [sp, #12]
 802380a:	2b00      	cmp	r3, #0
 802380c:	bfb8      	it	lt
 802380e:	f04f 33ff 	movlt.w	r3, #4294967295
 8023812:	3402      	adds	r4, #2
 8023814:	9305      	str	r3, [sp, #20]
 8023816:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80238fc <_vfiprintf_r+0x25c>
 802381a:	7821      	ldrb	r1, [r4, #0]
 802381c:	2203      	movs	r2, #3
 802381e:	4650      	mov	r0, sl
 8023820:	f7dc fcae 	bl	8000180 <memchr>
 8023824:	b140      	cbz	r0, 8023838 <_vfiprintf_r+0x198>
 8023826:	2340      	movs	r3, #64	; 0x40
 8023828:	eba0 000a 	sub.w	r0, r0, sl
 802382c:	fa03 f000 	lsl.w	r0, r3, r0
 8023830:	9b04      	ldr	r3, [sp, #16]
 8023832:	4303      	orrs	r3, r0
 8023834:	3401      	adds	r4, #1
 8023836:	9304      	str	r3, [sp, #16]
 8023838:	f814 1b01 	ldrb.w	r1, [r4], #1
 802383c:	482c      	ldr	r0, [pc, #176]	; (80238f0 <_vfiprintf_r+0x250>)
 802383e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023842:	2206      	movs	r2, #6
 8023844:	f7dc fc9c 	bl	8000180 <memchr>
 8023848:	2800      	cmp	r0, #0
 802384a:	d03f      	beq.n	80238cc <_vfiprintf_r+0x22c>
 802384c:	4b29      	ldr	r3, [pc, #164]	; (80238f4 <_vfiprintf_r+0x254>)
 802384e:	bb1b      	cbnz	r3, 8023898 <_vfiprintf_r+0x1f8>
 8023850:	9b03      	ldr	r3, [sp, #12]
 8023852:	3307      	adds	r3, #7
 8023854:	f023 0307 	bic.w	r3, r3, #7
 8023858:	3308      	adds	r3, #8
 802385a:	9303      	str	r3, [sp, #12]
 802385c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802385e:	443b      	add	r3, r7
 8023860:	9309      	str	r3, [sp, #36]	; 0x24
 8023862:	e767      	b.n	8023734 <_vfiprintf_r+0x94>
 8023864:	fb0c 3202 	mla	r2, ip, r2, r3
 8023868:	460c      	mov	r4, r1
 802386a:	2001      	movs	r0, #1
 802386c:	e7a5      	b.n	80237ba <_vfiprintf_r+0x11a>
 802386e:	2300      	movs	r3, #0
 8023870:	3401      	adds	r4, #1
 8023872:	9305      	str	r3, [sp, #20]
 8023874:	4619      	mov	r1, r3
 8023876:	f04f 0c0a 	mov.w	ip, #10
 802387a:	4620      	mov	r0, r4
 802387c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023880:	3a30      	subs	r2, #48	; 0x30
 8023882:	2a09      	cmp	r2, #9
 8023884:	d903      	bls.n	802388e <_vfiprintf_r+0x1ee>
 8023886:	2b00      	cmp	r3, #0
 8023888:	d0c5      	beq.n	8023816 <_vfiprintf_r+0x176>
 802388a:	9105      	str	r1, [sp, #20]
 802388c:	e7c3      	b.n	8023816 <_vfiprintf_r+0x176>
 802388e:	fb0c 2101 	mla	r1, ip, r1, r2
 8023892:	4604      	mov	r4, r0
 8023894:	2301      	movs	r3, #1
 8023896:	e7f0      	b.n	802387a <_vfiprintf_r+0x1da>
 8023898:	ab03      	add	r3, sp, #12
 802389a:	9300      	str	r3, [sp, #0]
 802389c:	462a      	mov	r2, r5
 802389e:	4b16      	ldr	r3, [pc, #88]	; (80238f8 <_vfiprintf_r+0x258>)
 80238a0:	a904      	add	r1, sp, #16
 80238a2:	4630      	mov	r0, r6
 80238a4:	f3af 8000 	nop.w
 80238a8:	4607      	mov	r7, r0
 80238aa:	1c78      	adds	r0, r7, #1
 80238ac:	d1d6      	bne.n	802385c <_vfiprintf_r+0x1bc>
 80238ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80238b0:	07d9      	lsls	r1, r3, #31
 80238b2:	d405      	bmi.n	80238c0 <_vfiprintf_r+0x220>
 80238b4:	89ab      	ldrh	r3, [r5, #12]
 80238b6:	059a      	lsls	r2, r3, #22
 80238b8:	d402      	bmi.n	80238c0 <_vfiprintf_r+0x220>
 80238ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80238bc:	f7ff fd7f 	bl	80233be <__retarget_lock_release_recursive>
 80238c0:	89ab      	ldrh	r3, [r5, #12]
 80238c2:	065b      	lsls	r3, r3, #25
 80238c4:	f53f af12 	bmi.w	80236ec <_vfiprintf_r+0x4c>
 80238c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80238ca:	e711      	b.n	80236f0 <_vfiprintf_r+0x50>
 80238cc:	ab03      	add	r3, sp, #12
 80238ce:	9300      	str	r3, [sp, #0]
 80238d0:	462a      	mov	r2, r5
 80238d2:	4b09      	ldr	r3, [pc, #36]	; (80238f8 <_vfiprintf_r+0x258>)
 80238d4:	a904      	add	r1, sp, #16
 80238d6:	4630      	mov	r0, r6
 80238d8:	f000 f880 	bl	80239dc <_printf_i>
 80238dc:	e7e4      	b.n	80238a8 <_vfiprintf_r+0x208>
 80238de:	bf00      	nop
 80238e0:	08026084 	.word	0x08026084
 80238e4:	080260a4 	.word	0x080260a4
 80238e8:	08026064 	.word	0x08026064
 80238ec:	080260c4 	.word	0x080260c4
 80238f0:	080260ce 	.word	0x080260ce
 80238f4:	00000000 	.word	0x00000000
 80238f8:	0802367b 	.word	0x0802367b
 80238fc:	080260ca 	.word	0x080260ca

08023900 <_printf_common>:
 8023900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023904:	4616      	mov	r6, r2
 8023906:	4699      	mov	r9, r3
 8023908:	688a      	ldr	r2, [r1, #8]
 802390a:	690b      	ldr	r3, [r1, #16]
 802390c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023910:	4293      	cmp	r3, r2
 8023912:	bfb8      	it	lt
 8023914:	4613      	movlt	r3, r2
 8023916:	6033      	str	r3, [r6, #0]
 8023918:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802391c:	4607      	mov	r7, r0
 802391e:	460c      	mov	r4, r1
 8023920:	b10a      	cbz	r2, 8023926 <_printf_common+0x26>
 8023922:	3301      	adds	r3, #1
 8023924:	6033      	str	r3, [r6, #0]
 8023926:	6823      	ldr	r3, [r4, #0]
 8023928:	0699      	lsls	r1, r3, #26
 802392a:	bf42      	ittt	mi
 802392c:	6833      	ldrmi	r3, [r6, #0]
 802392e:	3302      	addmi	r3, #2
 8023930:	6033      	strmi	r3, [r6, #0]
 8023932:	6825      	ldr	r5, [r4, #0]
 8023934:	f015 0506 	ands.w	r5, r5, #6
 8023938:	d106      	bne.n	8023948 <_printf_common+0x48>
 802393a:	f104 0a19 	add.w	sl, r4, #25
 802393e:	68e3      	ldr	r3, [r4, #12]
 8023940:	6832      	ldr	r2, [r6, #0]
 8023942:	1a9b      	subs	r3, r3, r2
 8023944:	42ab      	cmp	r3, r5
 8023946:	dc26      	bgt.n	8023996 <_printf_common+0x96>
 8023948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802394c:	1e13      	subs	r3, r2, #0
 802394e:	6822      	ldr	r2, [r4, #0]
 8023950:	bf18      	it	ne
 8023952:	2301      	movne	r3, #1
 8023954:	0692      	lsls	r2, r2, #26
 8023956:	d42b      	bmi.n	80239b0 <_printf_common+0xb0>
 8023958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802395c:	4649      	mov	r1, r9
 802395e:	4638      	mov	r0, r7
 8023960:	47c0      	blx	r8
 8023962:	3001      	adds	r0, #1
 8023964:	d01e      	beq.n	80239a4 <_printf_common+0xa4>
 8023966:	6823      	ldr	r3, [r4, #0]
 8023968:	68e5      	ldr	r5, [r4, #12]
 802396a:	6832      	ldr	r2, [r6, #0]
 802396c:	f003 0306 	and.w	r3, r3, #6
 8023970:	2b04      	cmp	r3, #4
 8023972:	bf08      	it	eq
 8023974:	1aad      	subeq	r5, r5, r2
 8023976:	68a3      	ldr	r3, [r4, #8]
 8023978:	6922      	ldr	r2, [r4, #16]
 802397a:	bf0c      	ite	eq
 802397c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023980:	2500      	movne	r5, #0
 8023982:	4293      	cmp	r3, r2
 8023984:	bfc4      	itt	gt
 8023986:	1a9b      	subgt	r3, r3, r2
 8023988:	18ed      	addgt	r5, r5, r3
 802398a:	2600      	movs	r6, #0
 802398c:	341a      	adds	r4, #26
 802398e:	42b5      	cmp	r5, r6
 8023990:	d11a      	bne.n	80239c8 <_printf_common+0xc8>
 8023992:	2000      	movs	r0, #0
 8023994:	e008      	b.n	80239a8 <_printf_common+0xa8>
 8023996:	2301      	movs	r3, #1
 8023998:	4652      	mov	r2, sl
 802399a:	4649      	mov	r1, r9
 802399c:	4638      	mov	r0, r7
 802399e:	47c0      	blx	r8
 80239a0:	3001      	adds	r0, #1
 80239a2:	d103      	bne.n	80239ac <_printf_common+0xac>
 80239a4:	f04f 30ff 	mov.w	r0, #4294967295
 80239a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80239ac:	3501      	adds	r5, #1
 80239ae:	e7c6      	b.n	802393e <_printf_common+0x3e>
 80239b0:	18e1      	adds	r1, r4, r3
 80239b2:	1c5a      	adds	r2, r3, #1
 80239b4:	2030      	movs	r0, #48	; 0x30
 80239b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80239ba:	4422      	add	r2, r4
 80239bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80239c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80239c4:	3302      	adds	r3, #2
 80239c6:	e7c7      	b.n	8023958 <_printf_common+0x58>
 80239c8:	2301      	movs	r3, #1
 80239ca:	4622      	mov	r2, r4
 80239cc:	4649      	mov	r1, r9
 80239ce:	4638      	mov	r0, r7
 80239d0:	47c0      	blx	r8
 80239d2:	3001      	adds	r0, #1
 80239d4:	d0e6      	beq.n	80239a4 <_printf_common+0xa4>
 80239d6:	3601      	adds	r6, #1
 80239d8:	e7d9      	b.n	802398e <_printf_common+0x8e>
	...

080239dc <_printf_i>:
 80239dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80239e0:	7e0f      	ldrb	r7, [r1, #24]
 80239e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80239e4:	2f78      	cmp	r7, #120	; 0x78
 80239e6:	4691      	mov	r9, r2
 80239e8:	4680      	mov	r8, r0
 80239ea:	460c      	mov	r4, r1
 80239ec:	469a      	mov	sl, r3
 80239ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80239f2:	d807      	bhi.n	8023a04 <_printf_i+0x28>
 80239f4:	2f62      	cmp	r7, #98	; 0x62
 80239f6:	d80a      	bhi.n	8023a0e <_printf_i+0x32>
 80239f8:	2f00      	cmp	r7, #0
 80239fa:	f000 80d8 	beq.w	8023bae <_printf_i+0x1d2>
 80239fe:	2f58      	cmp	r7, #88	; 0x58
 8023a00:	f000 80a3 	beq.w	8023b4a <_printf_i+0x16e>
 8023a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023a08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023a0c:	e03a      	b.n	8023a84 <_printf_i+0xa8>
 8023a0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023a12:	2b15      	cmp	r3, #21
 8023a14:	d8f6      	bhi.n	8023a04 <_printf_i+0x28>
 8023a16:	a101      	add	r1, pc, #4	; (adr r1, 8023a1c <_printf_i+0x40>)
 8023a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023a1c:	08023a75 	.word	0x08023a75
 8023a20:	08023a89 	.word	0x08023a89
 8023a24:	08023a05 	.word	0x08023a05
 8023a28:	08023a05 	.word	0x08023a05
 8023a2c:	08023a05 	.word	0x08023a05
 8023a30:	08023a05 	.word	0x08023a05
 8023a34:	08023a89 	.word	0x08023a89
 8023a38:	08023a05 	.word	0x08023a05
 8023a3c:	08023a05 	.word	0x08023a05
 8023a40:	08023a05 	.word	0x08023a05
 8023a44:	08023a05 	.word	0x08023a05
 8023a48:	08023b95 	.word	0x08023b95
 8023a4c:	08023ab9 	.word	0x08023ab9
 8023a50:	08023b77 	.word	0x08023b77
 8023a54:	08023a05 	.word	0x08023a05
 8023a58:	08023a05 	.word	0x08023a05
 8023a5c:	08023bb7 	.word	0x08023bb7
 8023a60:	08023a05 	.word	0x08023a05
 8023a64:	08023ab9 	.word	0x08023ab9
 8023a68:	08023a05 	.word	0x08023a05
 8023a6c:	08023a05 	.word	0x08023a05
 8023a70:	08023b7f 	.word	0x08023b7f
 8023a74:	682b      	ldr	r3, [r5, #0]
 8023a76:	1d1a      	adds	r2, r3, #4
 8023a78:	681b      	ldr	r3, [r3, #0]
 8023a7a:	602a      	str	r2, [r5, #0]
 8023a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023a84:	2301      	movs	r3, #1
 8023a86:	e0a3      	b.n	8023bd0 <_printf_i+0x1f4>
 8023a88:	6820      	ldr	r0, [r4, #0]
 8023a8a:	6829      	ldr	r1, [r5, #0]
 8023a8c:	0606      	lsls	r6, r0, #24
 8023a8e:	f101 0304 	add.w	r3, r1, #4
 8023a92:	d50a      	bpl.n	8023aaa <_printf_i+0xce>
 8023a94:	680e      	ldr	r6, [r1, #0]
 8023a96:	602b      	str	r3, [r5, #0]
 8023a98:	2e00      	cmp	r6, #0
 8023a9a:	da03      	bge.n	8023aa4 <_printf_i+0xc8>
 8023a9c:	232d      	movs	r3, #45	; 0x2d
 8023a9e:	4276      	negs	r6, r6
 8023aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023aa4:	485e      	ldr	r0, [pc, #376]	; (8023c20 <_printf_i+0x244>)
 8023aa6:	230a      	movs	r3, #10
 8023aa8:	e019      	b.n	8023ade <_printf_i+0x102>
 8023aaa:	680e      	ldr	r6, [r1, #0]
 8023aac:	602b      	str	r3, [r5, #0]
 8023aae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023ab2:	bf18      	it	ne
 8023ab4:	b236      	sxthne	r6, r6
 8023ab6:	e7ef      	b.n	8023a98 <_printf_i+0xbc>
 8023ab8:	682b      	ldr	r3, [r5, #0]
 8023aba:	6820      	ldr	r0, [r4, #0]
 8023abc:	1d19      	adds	r1, r3, #4
 8023abe:	6029      	str	r1, [r5, #0]
 8023ac0:	0601      	lsls	r1, r0, #24
 8023ac2:	d501      	bpl.n	8023ac8 <_printf_i+0xec>
 8023ac4:	681e      	ldr	r6, [r3, #0]
 8023ac6:	e002      	b.n	8023ace <_printf_i+0xf2>
 8023ac8:	0646      	lsls	r6, r0, #25
 8023aca:	d5fb      	bpl.n	8023ac4 <_printf_i+0xe8>
 8023acc:	881e      	ldrh	r6, [r3, #0]
 8023ace:	4854      	ldr	r0, [pc, #336]	; (8023c20 <_printf_i+0x244>)
 8023ad0:	2f6f      	cmp	r7, #111	; 0x6f
 8023ad2:	bf0c      	ite	eq
 8023ad4:	2308      	moveq	r3, #8
 8023ad6:	230a      	movne	r3, #10
 8023ad8:	2100      	movs	r1, #0
 8023ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023ade:	6865      	ldr	r5, [r4, #4]
 8023ae0:	60a5      	str	r5, [r4, #8]
 8023ae2:	2d00      	cmp	r5, #0
 8023ae4:	bfa2      	ittt	ge
 8023ae6:	6821      	ldrge	r1, [r4, #0]
 8023ae8:	f021 0104 	bicge.w	r1, r1, #4
 8023aec:	6021      	strge	r1, [r4, #0]
 8023aee:	b90e      	cbnz	r6, 8023af4 <_printf_i+0x118>
 8023af0:	2d00      	cmp	r5, #0
 8023af2:	d04d      	beq.n	8023b90 <_printf_i+0x1b4>
 8023af4:	4615      	mov	r5, r2
 8023af6:	fbb6 f1f3 	udiv	r1, r6, r3
 8023afa:	fb03 6711 	mls	r7, r3, r1, r6
 8023afe:	5dc7      	ldrb	r7, [r0, r7]
 8023b00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023b04:	4637      	mov	r7, r6
 8023b06:	42bb      	cmp	r3, r7
 8023b08:	460e      	mov	r6, r1
 8023b0a:	d9f4      	bls.n	8023af6 <_printf_i+0x11a>
 8023b0c:	2b08      	cmp	r3, #8
 8023b0e:	d10b      	bne.n	8023b28 <_printf_i+0x14c>
 8023b10:	6823      	ldr	r3, [r4, #0]
 8023b12:	07de      	lsls	r6, r3, #31
 8023b14:	d508      	bpl.n	8023b28 <_printf_i+0x14c>
 8023b16:	6923      	ldr	r3, [r4, #16]
 8023b18:	6861      	ldr	r1, [r4, #4]
 8023b1a:	4299      	cmp	r1, r3
 8023b1c:	bfde      	ittt	le
 8023b1e:	2330      	movle	r3, #48	; 0x30
 8023b20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023b24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023b28:	1b52      	subs	r2, r2, r5
 8023b2a:	6122      	str	r2, [r4, #16]
 8023b2c:	f8cd a000 	str.w	sl, [sp]
 8023b30:	464b      	mov	r3, r9
 8023b32:	aa03      	add	r2, sp, #12
 8023b34:	4621      	mov	r1, r4
 8023b36:	4640      	mov	r0, r8
 8023b38:	f7ff fee2 	bl	8023900 <_printf_common>
 8023b3c:	3001      	adds	r0, #1
 8023b3e:	d14c      	bne.n	8023bda <_printf_i+0x1fe>
 8023b40:	f04f 30ff 	mov.w	r0, #4294967295
 8023b44:	b004      	add	sp, #16
 8023b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b4a:	4835      	ldr	r0, [pc, #212]	; (8023c20 <_printf_i+0x244>)
 8023b4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023b50:	6829      	ldr	r1, [r5, #0]
 8023b52:	6823      	ldr	r3, [r4, #0]
 8023b54:	f851 6b04 	ldr.w	r6, [r1], #4
 8023b58:	6029      	str	r1, [r5, #0]
 8023b5a:	061d      	lsls	r5, r3, #24
 8023b5c:	d514      	bpl.n	8023b88 <_printf_i+0x1ac>
 8023b5e:	07df      	lsls	r7, r3, #31
 8023b60:	bf44      	itt	mi
 8023b62:	f043 0320 	orrmi.w	r3, r3, #32
 8023b66:	6023      	strmi	r3, [r4, #0]
 8023b68:	b91e      	cbnz	r6, 8023b72 <_printf_i+0x196>
 8023b6a:	6823      	ldr	r3, [r4, #0]
 8023b6c:	f023 0320 	bic.w	r3, r3, #32
 8023b70:	6023      	str	r3, [r4, #0]
 8023b72:	2310      	movs	r3, #16
 8023b74:	e7b0      	b.n	8023ad8 <_printf_i+0xfc>
 8023b76:	6823      	ldr	r3, [r4, #0]
 8023b78:	f043 0320 	orr.w	r3, r3, #32
 8023b7c:	6023      	str	r3, [r4, #0]
 8023b7e:	2378      	movs	r3, #120	; 0x78
 8023b80:	4828      	ldr	r0, [pc, #160]	; (8023c24 <_printf_i+0x248>)
 8023b82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023b86:	e7e3      	b.n	8023b50 <_printf_i+0x174>
 8023b88:	0659      	lsls	r1, r3, #25
 8023b8a:	bf48      	it	mi
 8023b8c:	b2b6      	uxthmi	r6, r6
 8023b8e:	e7e6      	b.n	8023b5e <_printf_i+0x182>
 8023b90:	4615      	mov	r5, r2
 8023b92:	e7bb      	b.n	8023b0c <_printf_i+0x130>
 8023b94:	682b      	ldr	r3, [r5, #0]
 8023b96:	6826      	ldr	r6, [r4, #0]
 8023b98:	6961      	ldr	r1, [r4, #20]
 8023b9a:	1d18      	adds	r0, r3, #4
 8023b9c:	6028      	str	r0, [r5, #0]
 8023b9e:	0635      	lsls	r5, r6, #24
 8023ba0:	681b      	ldr	r3, [r3, #0]
 8023ba2:	d501      	bpl.n	8023ba8 <_printf_i+0x1cc>
 8023ba4:	6019      	str	r1, [r3, #0]
 8023ba6:	e002      	b.n	8023bae <_printf_i+0x1d2>
 8023ba8:	0670      	lsls	r0, r6, #25
 8023baa:	d5fb      	bpl.n	8023ba4 <_printf_i+0x1c8>
 8023bac:	8019      	strh	r1, [r3, #0]
 8023bae:	2300      	movs	r3, #0
 8023bb0:	6123      	str	r3, [r4, #16]
 8023bb2:	4615      	mov	r5, r2
 8023bb4:	e7ba      	b.n	8023b2c <_printf_i+0x150>
 8023bb6:	682b      	ldr	r3, [r5, #0]
 8023bb8:	1d1a      	adds	r2, r3, #4
 8023bba:	602a      	str	r2, [r5, #0]
 8023bbc:	681d      	ldr	r5, [r3, #0]
 8023bbe:	6862      	ldr	r2, [r4, #4]
 8023bc0:	2100      	movs	r1, #0
 8023bc2:	4628      	mov	r0, r5
 8023bc4:	f7dc fadc 	bl	8000180 <memchr>
 8023bc8:	b108      	cbz	r0, 8023bce <_printf_i+0x1f2>
 8023bca:	1b40      	subs	r0, r0, r5
 8023bcc:	6060      	str	r0, [r4, #4]
 8023bce:	6863      	ldr	r3, [r4, #4]
 8023bd0:	6123      	str	r3, [r4, #16]
 8023bd2:	2300      	movs	r3, #0
 8023bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023bd8:	e7a8      	b.n	8023b2c <_printf_i+0x150>
 8023bda:	6923      	ldr	r3, [r4, #16]
 8023bdc:	462a      	mov	r2, r5
 8023bde:	4649      	mov	r1, r9
 8023be0:	4640      	mov	r0, r8
 8023be2:	47d0      	blx	sl
 8023be4:	3001      	adds	r0, #1
 8023be6:	d0ab      	beq.n	8023b40 <_printf_i+0x164>
 8023be8:	6823      	ldr	r3, [r4, #0]
 8023bea:	079b      	lsls	r3, r3, #30
 8023bec:	d413      	bmi.n	8023c16 <_printf_i+0x23a>
 8023bee:	68e0      	ldr	r0, [r4, #12]
 8023bf0:	9b03      	ldr	r3, [sp, #12]
 8023bf2:	4298      	cmp	r0, r3
 8023bf4:	bfb8      	it	lt
 8023bf6:	4618      	movlt	r0, r3
 8023bf8:	e7a4      	b.n	8023b44 <_printf_i+0x168>
 8023bfa:	2301      	movs	r3, #1
 8023bfc:	4632      	mov	r2, r6
 8023bfe:	4649      	mov	r1, r9
 8023c00:	4640      	mov	r0, r8
 8023c02:	47d0      	blx	sl
 8023c04:	3001      	adds	r0, #1
 8023c06:	d09b      	beq.n	8023b40 <_printf_i+0x164>
 8023c08:	3501      	adds	r5, #1
 8023c0a:	68e3      	ldr	r3, [r4, #12]
 8023c0c:	9903      	ldr	r1, [sp, #12]
 8023c0e:	1a5b      	subs	r3, r3, r1
 8023c10:	42ab      	cmp	r3, r5
 8023c12:	dcf2      	bgt.n	8023bfa <_printf_i+0x21e>
 8023c14:	e7eb      	b.n	8023bee <_printf_i+0x212>
 8023c16:	2500      	movs	r5, #0
 8023c18:	f104 0619 	add.w	r6, r4, #25
 8023c1c:	e7f5      	b.n	8023c0a <_printf_i+0x22e>
 8023c1e:	bf00      	nop
 8023c20:	080260d5 	.word	0x080260d5
 8023c24:	080260e6 	.word	0x080260e6

08023c28 <_sbrk_r>:
 8023c28:	b538      	push	{r3, r4, r5, lr}
 8023c2a:	4d06      	ldr	r5, [pc, #24]	; (8023c44 <_sbrk_r+0x1c>)
 8023c2c:	2300      	movs	r3, #0
 8023c2e:	4604      	mov	r4, r0
 8023c30:	4608      	mov	r0, r1
 8023c32:	602b      	str	r3, [r5, #0]
 8023c34:	f000 f8e8 	bl	8023e08 <_sbrk>
 8023c38:	1c43      	adds	r3, r0, #1
 8023c3a:	d102      	bne.n	8023c42 <_sbrk_r+0x1a>
 8023c3c:	682b      	ldr	r3, [r5, #0]
 8023c3e:	b103      	cbz	r3, 8023c42 <_sbrk_r+0x1a>
 8023c40:	6023      	str	r3, [r4, #0]
 8023c42:	bd38      	pop	{r3, r4, r5, pc}
 8023c44:	200068ac 	.word	0x200068ac

08023c48 <__sread>:
 8023c48:	b510      	push	{r4, lr}
 8023c4a:	460c      	mov	r4, r1
 8023c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023c50:	f000 f8a0 	bl	8023d94 <_read_r>
 8023c54:	2800      	cmp	r0, #0
 8023c56:	bfab      	itete	ge
 8023c58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8023c5c:	181b      	addge	r3, r3, r0
 8023c5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023c62:	bfac      	ite	ge
 8023c64:	6563      	strge	r3, [r4, #84]	; 0x54
 8023c66:	81a3      	strhlt	r3, [r4, #12]
 8023c68:	bd10      	pop	{r4, pc}

08023c6a <__swrite>:
 8023c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023c6e:	461f      	mov	r7, r3
 8023c70:	898b      	ldrh	r3, [r1, #12]
 8023c72:	05db      	lsls	r3, r3, #23
 8023c74:	4605      	mov	r5, r0
 8023c76:	460c      	mov	r4, r1
 8023c78:	4616      	mov	r6, r2
 8023c7a:	d505      	bpl.n	8023c88 <__swrite+0x1e>
 8023c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023c80:	2302      	movs	r3, #2
 8023c82:	2200      	movs	r2, #0
 8023c84:	f000 f868 	bl	8023d58 <_lseek_r>
 8023c88:	89a3      	ldrh	r3, [r4, #12]
 8023c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023c92:	81a3      	strh	r3, [r4, #12]
 8023c94:	4632      	mov	r2, r6
 8023c96:	463b      	mov	r3, r7
 8023c98:	4628      	mov	r0, r5
 8023c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023c9e:	f000 b817 	b.w	8023cd0 <_write_r>

08023ca2 <__sseek>:
 8023ca2:	b510      	push	{r4, lr}
 8023ca4:	460c      	mov	r4, r1
 8023ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023caa:	f000 f855 	bl	8023d58 <_lseek_r>
 8023cae:	1c43      	adds	r3, r0, #1
 8023cb0:	89a3      	ldrh	r3, [r4, #12]
 8023cb2:	bf15      	itete	ne
 8023cb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8023cb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023cba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023cbe:	81a3      	strheq	r3, [r4, #12]
 8023cc0:	bf18      	it	ne
 8023cc2:	81a3      	strhne	r3, [r4, #12]
 8023cc4:	bd10      	pop	{r4, pc}

08023cc6 <__sclose>:
 8023cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023cca:	f000 b813 	b.w	8023cf4 <_close_r>
	...

08023cd0 <_write_r>:
 8023cd0:	b538      	push	{r3, r4, r5, lr}
 8023cd2:	4d07      	ldr	r5, [pc, #28]	; (8023cf0 <_write_r+0x20>)
 8023cd4:	4604      	mov	r4, r0
 8023cd6:	4608      	mov	r0, r1
 8023cd8:	4611      	mov	r1, r2
 8023cda:	2200      	movs	r2, #0
 8023cdc:	602a      	str	r2, [r5, #0]
 8023cde:	461a      	mov	r2, r3
 8023ce0:	f7ea fa98 	bl	800e214 <_write>
 8023ce4:	1c43      	adds	r3, r0, #1
 8023ce6:	d102      	bne.n	8023cee <_write_r+0x1e>
 8023ce8:	682b      	ldr	r3, [r5, #0]
 8023cea:	b103      	cbz	r3, 8023cee <_write_r+0x1e>
 8023cec:	6023      	str	r3, [r4, #0]
 8023cee:	bd38      	pop	{r3, r4, r5, pc}
 8023cf0:	200068ac 	.word	0x200068ac

08023cf4 <_close_r>:
 8023cf4:	b538      	push	{r3, r4, r5, lr}
 8023cf6:	4d06      	ldr	r5, [pc, #24]	; (8023d10 <_close_r+0x1c>)
 8023cf8:	2300      	movs	r3, #0
 8023cfa:	4604      	mov	r4, r0
 8023cfc:	4608      	mov	r0, r1
 8023cfe:	602b      	str	r3, [r5, #0]
 8023d00:	f000 f85a 	bl	8023db8 <_close>
 8023d04:	1c43      	adds	r3, r0, #1
 8023d06:	d102      	bne.n	8023d0e <_close_r+0x1a>
 8023d08:	682b      	ldr	r3, [r5, #0]
 8023d0a:	b103      	cbz	r3, 8023d0e <_close_r+0x1a>
 8023d0c:	6023      	str	r3, [r4, #0]
 8023d0e:	bd38      	pop	{r3, r4, r5, pc}
 8023d10:	200068ac 	.word	0x200068ac

08023d14 <_fstat_r>:
 8023d14:	b538      	push	{r3, r4, r5, lr}
 8023d16:	4d07      	ldr	r5, [pc, #28]	; (8023d34 <_fstat_r+0x20>)
 8023d18:	2300      	movs	r3, #0
 8023d1a:	4604      	mov	r4, r0
 8023d1c:	4608      	mov	r0, r1
 8023d1e:	4611      	mov	r1, r2
 8023d20:	602b      	str	r3, [r5, #0]
 8023d22:	f000 f851 	bl	8023dc8 <_fstat>
 8023d26:	1c43      	adds	r3, r0, #1
 8023d28:	d102      	bne.n	8023d30 <_fstat_r+0x1c>
 8023d2a:	682b      	ldr	r3, [r5, #0]
 8023d2c:	b103      	cbz	r3, 8023d30 <_fstat_r+0x1c>
 8023d2e:	6023      	str	r3, [r4, #0]
 8023d30:	bd38      	pop	{r3, r4, r5, pc}
 8023d32:	bf00      	nop
 8023d34:	200068ac 	.word	0x200068ac

08023d38 <_isatty_r>:
 8023d38:	b538      	push	{r3, r4, r5, lr}
 8023d3a:	4d06      	ldr	r5, [pc, #24]	; (8023d54 <_isatty_r+0x1c>)
 8023d3c:	2300      	movs	r3, #0
 8023d3e:	4604      	mov	r4, r0
 8023d40:	4608      	mov	r0, r1
 8023d42:	602b      	str	r3, [r5, #0]
 8023d44:	f000 f848 	bl	8023dd8 <_isatty>
 8023d48:	1c43      	adds	r3, r0, #1
 8023d4a:	d102      	bne.n	8023d52 <_isatty_r+0x1a>
 8023d4c:	682b      	ldr	r3, [r5, #0]
 8023d4e:	b103      	cbz	r3, 8023d52 <_isatty_r+0x1a>
 8023d50:	6023      	str	r3, [r4, #0]
 8023d52:	bd38      	pop	{r3, r4, r5, pc}
 8023d54:	200068ac 	.word	0x200068ac

08023d58 <_lseek_r>:
 8023d58:	b538      	push	{r3, r4, r5, lr}
 8023d5a:	4d07      	ldr	r5, [pc, #28]	; (8023d78 <_lseek_r+0x20>)
 8023d5c:	4604      	mov	r4, r0
 8023d5e:	4608      	mov	r0, r1
 8023d60:	4611      	mov	r1, r2
 8023d62:	2200      	movs	r2, #0
 8023d64:	602a      	str	r2, [r5, #0]
 8023d66:	461a      	mov	r2, r3
 8023d68:	f000 f83e 	bl	8023de8 <_lseek>
 8023d6c:	1c43      	adds	r3, r0, #1
 8023d6e:	d102      	bne.n	8023d76 <_lseek_r+0x1e>
 8023d70:	682b      	ldr	r3, [r5, #0]
 8023d72:	b103      	cbz	r3, 8023d76 <_lseek_r+0x1e>
 8023d74:	6023      	str	r3, [r4, #0]
 8023d76:	bd38      	pop	{r3, r4, r5, pc}
 8023d78:	200068ac 	.word	0x200068ac

08023d7c <__malloc_lock>:
 8023d7c:	4801      	ldr	r0, [pc, #4]	; (8023d84 <__malloc_lock+0x8>)
 8023d7e:	f7ff bb1d 	b.w	80233bc <__retarget_lock_acquire_recursive>
 8023d82:	bf00      	nop
 8023d84:	200068a1 	.word	0x200068a1

08023d88 <__malloc_unlock>:
 8023d88:	4801      	ldr	r0, [pc, #4]	; (8023d90 <__malloc_unlock+0x8>)
 8023d8a:	f7ff bb18 	b.w	80233be <__retarget_lock_release_recursive>
 8023d8e:	bf00      	nop
 8023d90:	200068a1 	.word	0x200068a1

08023d94 <_read_r>:
 8023d94:	b538      	push	{r3, r4, r5, lr}
 8023d96:	4d07      	ldr	r5, [pc, #28]	; (8023db4 <_read_r+0x20>)
 8023d98:	4604      	mov	r4, r0
 8023d9a:	4608      	mov	r0, r1
 8023d9c:	4611      	mov	r1, r2
 8023d9e:	2200      	movs	r2, #0
 8023da0:	602a      	str	r2, [r5, #0]
 8023da2:	461a      	mov	r2, r3
 8023da4:	f000 f828 	bl	8023df8 <_read>
 8023da8:	1c43      	adds	r3, r0, #1
 8023daa:	d102      	bne.n	8023db2 <_read_r+0x1e>
 8023dac:	682b      	ldr	r3, [r5, #0]
 8023dae:	b103      	cbz	r3, 8023db2 <_read_r+0x1e>
 8023db0:	6023      	str	r3, [r4, #0]
 8023db2:	bd38      	pop	{r3, r4, r5, pc}
 8023db4:	200068ac 	.word	0x200068ac

08023db8 <_close>:
 8023db8:	4b02      	ldr	r3, [pc, #8]	; (8023dc4 <_close+0xc>)
 8023dba:	2258      	movs	r2, #88	; 0x58
 8023dbc:	601a      	str	r2, [r3, #0]
 8023dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8023dc2:	4770      	bx	lr
 8023dc4:	200068ac 	.word	0x200068ac

08023dc8 <_fstat>:
 8023dc8:	4b02      	ldr	r3, [pc, #8]	; (8023dd4 <_fstat+0xc>)
 8023dca:	2258      	movs	r2, #88	; 0x58
 8023dcc:	601a      	str	r2, [r3, #0]
 8023dce:	f04f 30ff 	mov.w	r0, #4294967295
 8023dd2:	4770      	bx	lr
 8023dd4:	200068ac 	.word	0x200068ac

08023dd8 <_isatty>:
 8023dd8:	4b02      	ldr	r3, [pc, #8]	; (8023de4 <_isatty+0xc>)
 8023dda:	2258      	movs	r2, #88	; 0x58
 8023ddc:	601a      	str	r2, [r3, #0]
 8023dde:	2000      	movs	r0, #0
 8023de0:	4770      	bx	lr
 8023de2:	bf00      	nop
 8023de4:	200068ac 	.word	0x200068ac

08023de8 <_lseek>:
 8023de8:	4b02      	ldr	r3, [pc, #8]	; (8023df4 <_lseek+0xc>)
 8023dea:	2258      	movs	r2, #88	; 0x58
 8023dec:	601a      	str	r2, [r3, #0]
 8023dee:	f04f 30ff 	mov.w	r0, #4294967295
 8023df2:	4770      	bx	lr
 8023df4:	200068ac 	.word	0x200068ac

08023df8 <_read>:
 8023df8:	4b02      	ldr	r3, [pc, #8]	; (8023e04 <_read+0xc>)
 8023dfa:	2258      	movs	r2, #88	; 0x58
 8023dfc:	601a      	str	r2, [r3, #0]
 8023dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8023e02:	4770      	bx	lr
 8023e04:	200068ac 	.word	0x200068ac

08023e08 <_sbrk>:
 8023e08:	4a04      	ldr	r2, [pc, #16]	; (8023e1c <_sbrk+0x14>)
 8023e0a:	6811      	ldr	r1, [r2, #0]
 8023e0c:	4603      	mov	r3, r0
 8023e0e:	b909      	cbnz	r1, 8023e14 <_sbrk+0xc>
 8023e10:	4903      	ldr	r1, [pc, #12]	; (8023e20 <_sbrk+0x18>)
 8023e12:	6011      	str	r1, [r2, #0]
 8023e14:	6810      	ldr	r0, [r2, #0]
 8023e16:	4403      	add	r3, r0
 8023e18:	6013      	str	r3, [r2, #0]
 8023e1a:	4770      	bx	lr
 8023e1c:	200068b0 	.word	0x200068b0
 8023e20:	20006cdc 	.word	0x20006cdc

08023e24 <_init>:
 8023e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023e26:	bf00      	nop
 8023e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023e2a:	bc08      	pop	{r3}
 8023e2c:	469e      	mov	lr, r3
 8023e2e:	4770      	bx	lr

08023e30 <_fini>:
 8023e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023e32:	bf00      	nop
 8023e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023e36:	bc08      	pop	{r3}
 8023e38:	469e      	mov	lr, r3
 8023e3a:	4770      	bx	lr
 8023e3c:	0000      	movs	r0, r0
	...
