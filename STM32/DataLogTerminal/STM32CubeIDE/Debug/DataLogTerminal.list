
DataLogTerminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800b848  0800b848  0001b848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bba0  0800bba0  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  0800bba0  0800bba0  0001bba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bba8  0800bba8  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bba8  0800bba8  0001bba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbac  0800bbac  0001bbac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  0800bbb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000154  0800bd04  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  0800bd04  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001af28  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00029592  00000000  00000000  0003b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003296  00000000  00000000  0006463e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002180  00000000  00000000  000678d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000986bf  00000000  00000000  00069a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002078  00000000  00000000  00102118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018cf7  00000000  00000000  00104190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ce87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009eec  00000000  00000000  0011ced8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b82c 	.word	0x0800b82c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	0800b82c 	.word	0x0800b82c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f76:	f005 fe59 	bl	8006c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f008 fb61 	bl	8009640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f000 fab5 	bl	80014ec <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8000f90:	0800bbb0 	.word	0x0800bbb0
  ldr r2, =_sbss
 8000f94:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8000f98:	2000045c 	.word	0x2000045c

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>

08000f9e <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS01A3_DataLogTerminal_Init(void);
static void MX_IKS01A3_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Init_PreTreatment */

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */
  MX_IKS01A3_DataLogTerminal_Init();
 8000fa2:	f000 f809 	bl	8000fb8 <MX_IKS01A3_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS01A3_DataLogTerminal_Process();
 8000fae:	f000 f919 	bl	80011e4 <MX_IKS01A3_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <MX_IKS01A3_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Init(void)
{
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 fbba 	bl	8001738 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 fc0a 	bl	80017e0 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 fc5b 	bl	8001888 <BSP_PB_GetState>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b70      	ldr	r3, [pc, #448]	; (80011a4 <MX_IKS01A3_DataLogTerminal_Init+0x1ec>)
 8000fe2:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f000 fcb1 	bl	800194c <BSP_COM_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 8000fea:	2103      	movs	r1, #3
 8000fec:	2000      	movs	r0, #0
 8000fee:	f005 faaf 	bl	8006550 <IKS01A3_MOTION_SENSOR_Init>
  // IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f005 faab 	bl	8006550 <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f005 faa7 	bl	8006550 <IKS01A3_MOTION_SENSOR_Init>

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	e0c3      	b.n	8001190 <MX_IKS01A3_DataLogTerminal_Init+0x1d8>
  {
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	4613      	mov	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4a64      	ldr	r2, [pc, #400]	; (80011a8 <MX_IKS01A3_DataLogTerminal_Init+0x1f0>)
 8001016:	4413      	add	r3, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f005 fb95 	bl	8006748 <IKS01A3_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800101e:	4962      	ldr	r1, [pc, #392]	; (80011a8 <MX_IKS01A3_DataLogTerminal_Init+0x1f0>)
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800102e:	4618      	mov	r0, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001030:	495d      	ldr	r1, [pc, #372]	; (80011a8 <MX_IKS01A3_DataLogTerminal_Init+0x1f0>)
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4613      	mov	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	3301      	adds	r3, #1
 8001040:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001042:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001044:	4958      	ldr	r1, [pc, #352]	; (80011a8 <MX_IKS01A3_DataLogTerminal_Init+0x1f0>)
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	3302      	adds	r3, #2
 8001054:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001056:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001058:	4953      	ldr	r1, [pc, #332]	; (80011a8 <MX_IKS01A3_DataLogTerminal_Init+0x1f0>)
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3303      	adds	r3, #3
 8001068:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800106a:	9303      	str	r3, [sp, #12]
 800106c:	9502      	str	r5, [sp, #8]
 800106e:	9401      	str	r4, [sp, #4]
 8001070:	9000      	str	r0, [sp, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4a4d      	ldr	r2, [pc, #308]	; (80011ac <MX_IKS01A3_DataLogTerminal_Init+0x1f4>)
 8001076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107a:	484d      	ldr	r0, [pc, #308]	; (80011b0 <MX_IKS01A3_DataLogTerminal_Init+0x1f8>)
 800107c:	f008 fb24 	bl	80096c8 <sniprintf>
    printf("%s", dataOut);
 8001080:	494b      	ldr	r1, [pc, #300]	; (80011b0 <MX_IKS01A3_DataLogTerminal_Init+0x1f8>)
 8001082:	484c      	ldr	r0, [pc, #304]	; (80011b4 <MX_IKS01A3_DataLogTerminal_Init+0x1fc>)
 8001084:	f008 fb08 	bl	8009698 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 8001088:	4947      	ldr	r1, [pc, #284]	; (80011a8 <MX_IKS01A3_DataLogTerminal_Init+0x1f0>)
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	3314      	adds	r3, #20
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	463b      	mov	r3, r7
 800109e:	2103      	movs	r1, #3
 80010a0:	4618      	mov	r0, r3
 80010a2:	eeb0 0a67 	vmov.f32	s0, s15
 80010a6:	f000 f8fb 	bl	80012a0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 80010ae:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80010b0:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 80010b2:	493d      	ldr	r1, [pc, #244]	; (80011a8 <MX_IKS01A3_DataLogTerminal_Init+0x1f0>)
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3308      	adds	r3, #8
 80010c2:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	9000      	str	r0, [sp, #0]
 80010c8:	4623      	mov	r3, r4
 80010ca:	4a3b      	ldr	r2, [pc, #236]	; (80011b8 <MX_IKS01A3_DataLogTerminal_Init+0x200>)
 80010cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d0:	4837      	ldr	r0, [pc, #220]	; (80011b0 <MX_IKS01A3_DataLogTerminal_Init+0x1f8>)
 80010d2:	f008 faf9 	bl	80096c8 <sniprintf>
    printf("%s", dataOut);
 80010d6:	4936      	ldr	r1, [pc, #216]	; (80011b0 <MX_IKS01A3_DataLogTerminal_Init+0x1f8>)
 80010d8:	4836      	ldr	r0, [pc, #216]	; (80011b4 <MX_IKS01A3_DataLogTerminal_Init+0x1fc>)
 80010da:	f008 fadd 	bl	8009698 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 80010de:	4932      	ldr	r1, [pc, #200]	; (80011a8 <MX_IKS01A3_DataLogTerminal_Init+0x1f0>)
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	4613      	mov	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	3310      	adds	r3, #16
 80010ee:	edd3 7a00 	vldr	s15, [r3]
 80010f2:	463b      	mov	r3, r7
 80010f4:	2103      	movs	r1, #3
 80010f6:	4618      	mov	r0, r3
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	f000 f8d0 	bl	80012a0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8001104:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8001106:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8001108:	4927      	ldr	r1, [pc, #156]	; (80011a8 <MX_IKS01A3_DataLogTerminal_Init+0x1f0>)
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	1a9b      	subs	r3, r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	3304      	adds	r3, #4
 8001118:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	9000      	str	r0, [sp, #0]
 800111e:	4623      	mov	r3, r4
 8001120:	4a26      	ldr	r2, [pc, #152]	; (80011bc <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 8001122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001126:	4822      	ldr	r0, [pc, #136]	; (80011b0 <MX_IKS01A3_DataLogTerminal_Init+0x1f8>)
 8001128:	f008 face 	bl	80096c8 <sniprintf>
    printf("%s", dataOut);
 800112c:	4920      	ldr	r1, [pc, #128]	; (80011b0 <MX_IKS01A3_DataLogTerminal_Init+0x1f8>)
 800112e:	4821      	ldr	r0, [pc, #132]	; (80011b4 <MX_IKS01A3_DataLogTerminal_Init+0x1fc>)
 8001130:	f008 fab2 	bl	8009698 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 8001134:	491c      	ldr	r1, [pc, #112]	; (80011a8 <MX_IKS01A3_DataLogTerminal_Init+0x1f0>)
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	3318      	adds	r3, #24
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	463b      	mov	r3, r7
 800114a:	2103      	movs	r1, #3
 800114c:	4618      	mov	r0, r3
 800114e:	eeb0 0a67 	vmov.f32	s0, s15
 8001152:	f000 f8a5 	bl	80012a0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800115a:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800115c:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800115e:	4912      	ldr	r1, [pc, #72]	; (80011a8 <MX_IKS01A3_DataLogTerminal_Init+0x1f0>)
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	330c      	adds	r3, #12
 800116e:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	9000      	str	r0, [sp, #0]
 8001174:	4623      	mov	r3, r4
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_IKS01A3_DataLogTerminal_Init+0x208>)
 8001178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_IKS01A3_DataLogTerminal_Init+0x1f8>)
 800117e:	f008 faa3 	bl	80096c8 <sniprintf>
    printf("%s", dataOut);
 8001182:	490b      	ldr	r1, [pc, #44]	; (80011b0 <MX_IKS01A3_DataLogTerminal_Init+0x1f8>)
 8001184:	480b      	ldr	r0, [pc, #44]	; (80011b4 <MX_IKS01A3_DataLogTerminal_Init+0x1fc>)
 8001186:	f008 fa87 	bl	8009698 <iprintf>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3301      	adds	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b02      	cmp	r3, #2
 8001194:	f67f af38 	bls.w	8001008 <MX_IKS01A3_DataLogTerminal_Init+0x50>
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bdb0      	pop	{r4, r5, r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200002c8 	.word	0x200002c8
 80011a8:	20000174 	.word	0x20000174
 80011ac:	0800b848 	.word	0x0800b848
 80011b0:	200001c8 	.word	0x200001c8
 80011b4:	0800b8bc 	.word	0x0800b8bc
 80011b8:	0800b8c0 	.word	0x0800b8c0
 80011bc:	0800b8ec 	.word	0x0800b8ec
 80011c0:	0800b91c 	.word	0x0800b91c

080011c4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <BSP_PB_Callback+0x1c>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000170 	.word	0x20000170

080011e4 <MX_IKS01A3_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Process(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  int i;

  if (PushButtonDetected != 0U)
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <MX_IKS01A3_DataLogTerminal_Process+0xb0>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d011      	beq.n	8001218 <MX_IKS01A3_DataLogTerminal_Process+0x34>
  {
    /* Debouncing */
    HAL_Delay(50);
 80011f4:	2032      	movs	r0, #50	; 0x32
 80011f6:	f005 fd9d 	bl	8006d34 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 80011fa:	bf00      	nop
 80011fc:	2000      	movs	r0, #0
 80011fe:	f000 fb43 	bl	8001888 <BSP_PB_GetState>
 8001202:	4602      	mov	r2, r0
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <MX_IKS01A3_DataLogTerminal_Process+0xb4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d0f7      	beq.n	80011fc <MX_IKS01A3_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 800120c:	2032      	movs	r0, #50	; 0x32
 800120e:	f005 fd91 	bl	8006d34 <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <MX_IKS01A3_DataLogTerminal_Process+0xb0>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]

    /* Do nothing */
  }

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	e02e      	b.n	800127c <MX_IKS01A3_DataLogTerminal_Process+0x98>
  {
    if(MotionCapabilities[i].Acc)
 800121e:	491f      	ldr	r1, [pc, #124]	; (800129c <MX_IKS01A3_DataLogTerminal_Process+0xb8>)
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	1a9b      	subs	r3, r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <MX_IKS01A3_DataLogTerminal_Process+0x56>
    {
      Accelero_Sensor_Handler(i);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 f8bd 	bl	80013b4 <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 800123a:	4918      	ldr	r1, [pc, #96]	; (800129c <MX_IKS01A3_DataLogTerminal_Process+0xb8>)
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3301      	adds	r3, #1
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <MX_IKS01A3_DataLogTerminal_Process+0x74>
    {
      Gyro_Sensor_Handler(i);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f8e2 	bl	800141c <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 8001258:	4910      	ldr	r1, [pc, #64]	; (800129c <MX_IKS01A3_DataLogTerminal_Process+0xb8>)
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	3302      	adds	r3, #2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <MX_IKS01A3_DataLogTerminal_Process+0x92>
    {
      Magneto_Sensor_Handler(i);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f907 	bl	8001484 <Magneto_Sensor_Handler>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3301      	adds	r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d9cd      	bls.n	800121e <MX_IKS01A3_DataLogTerminal_Process+0x3a>
    }
  }

  HAL_Delay( 1000 );
 8001282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001286:	f005 fd55 	bl	8006d34 <HAL_Delay>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000170 	.word	0x20000170
 8001298:	200002c8 	.word	0x200002c8
 800129c:	20000174 	.word	0x20000174

080012a0 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80012aa:	60b8      	str	r0, [r7, #8]
 80012ac:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 80012ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	db03      	blt.n	80012c4 <floatToInt+0x24>
  {
    out_value->sign = 0;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e008      	b.n	80012d6 <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
    in = -in;
 80012ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ce:	eef1 7a67 	vneg.f32	s15, s15
 80012d2:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff f936 	bl	8000548 <__aeabi_f2d>
 80012dc:	4604      	mov	r4, r0
 80012de:	460d      	mov	r5, r1
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff f91f 	bl	8000524 <__aeabi_i2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	ec43 2b11 	vmov	d1, r2, r3
 80012ee:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 80013a8 <floatToInt+0x108>
 80012f2:	f009 fb81 	bl	800a9f8 <pow>
 80012f6:	ec53 2b10 	vmov	r2, r3, d0
 80012fa:	f04f 0000 	mov.w	r0, #0
 80012fe:	492c      	ldr	r1, [pc, #176]	; (80013b0 <floatToInt+0x110>)
 8001300:	f7ff faa4 	bl	800084c <__aeabi_ddiv>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4620      	mov	r0, r4
 800130a:	4629      	mov	r1, r5
 800130c:	f7fe ffbe 	bl	800028c <__adddf3>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fc46 	bl	8000ba8 <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 8001320:	edd7 7a03 	vldr	s15, [r7, #12]
 8001324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001328:	ee17 2a90 	vmov	r2, s15
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800133c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001344:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f7ff f8fd 	bl	8000548 <__aeabi_f2d>
 800134e:	4604      	mov	r4, r0
 8001350:	460d      	mov	r5, r1
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff f8e6 	bl	8000524 <__aeabi_i2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	ec43 2b11 	vmov	d1, r2, r3
 8001360:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80013a8 <floatToInt+0x108>
 8001364:	f009 fb48 	bl	800a9f8 <pow>
 8001368:	ec53 2b10 	vmov	r2, r3, d0
 800136c:	4620      	mov	r0, r4
 800136e:	4629      	mov	r1, r5
 8001370:	f7ff f942 	bl	80005f8 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	ec43 2b17 	vmov	d7, r2, r3
 800137c:	eeb0 0a47 	vmov.f32	s0, s14
 8001380:	eef0 0a67 	vmov.f32	s1, s15
 8001384:	f009 fb06 	bl	800a994 <trunc>
 8001388:	ec53 2b10 	vmov	r2, r3, d0
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fbe2 	bl	8000b58 <__aeabi_d2iz>
 8001394:	4603      	mov	r3, r0
 8001396:	461a      	mov	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	609a      	str	r2, [r3, #8]
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bdb0      	pop	{r4, r5, r7, pc}
 80013a4:	f3af 8000 	nop.w
 80013a8:	00000000 	.word	0x00000000
 80013ac:	40240000 	.word	0x40240000
 80013b0:	3fe00000 	.word	0x3fe00000

080013b4 <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af04      	add	r7, sp, #16
 80013ba:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	461a      	mov	r2, r3
 80013c2:	2102      	movs	r1, #2
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f005 f9e9 	bl	800679c <IKS01A3_MOTION_SENSOR_GetAxes>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d007      	beq.n	80013e0 <Accelero_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <Accelero_Sensor_Handler+0x58>)
 80013d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <Accelero_Sensor_Handler+0x5c>)
 80013da:	f008 f975 	bl	80096c8 <sniprintf>
 80013de:	e00d      	b.n	80013fc <Accelero_Sensor_Handler+0x48>
  }
  else
  {
//    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
//             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
	    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC,%d,%d,%d,%d\r\n", (int)Instance,
 80013e0:	6878      	ldr	r0, [r7, #4]
	             (int)acceleration.x, (int)acceleration.y, (int)acceleration.z);
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	69f9      	ldr	r1, [r7, #28]
	    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC,%d,%d,%d,%d\r\n", (int)Instance,
 80013e8:	9102      	str	r1, [sp, #8]
 80013ea:	9201      	str	r2, [sp, #4]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a08      	ldr	r2, [pc, #32]	; (8001414 <Accelero_Sensor_Handler+0x60>)
 80013f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <Accelero_Sensor_Handler+0x5c>)
 80013f8:	f008 f966 	bl	80096c8 <sniprintf>
  }

  printf("%s", dataOut);
 80013fc:	4904      	ldr	r1, [pc, #16]	; (8001410 <Accelero_Sensor_Handler+0x5c>)
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <Accelero_Sensor_Handler+0x64>)
 8001400:	f008 f94a 	bl	8009698 <iprintf>
}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	0800b948 	.word	0x0800b948
 8001410:	200001c8 	.word	0x200001c8
 8001414:	0800b95c 	.word	0x0800b95c
 8001418:	0800b8bc 	.word	0x0800b8bc

0800141c <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	; 0x30
 8001420:	af04      	add	r7, sp, #16
 8001422:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	461a      	mov	r2, r3
 800142a:	2101      	movs	r1, #1
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f005 f9b5 	bl	800679c <IKS01A3_MOTION_SENSOR_GetAxes>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d007      	beq.n	8001448 <Gyro_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <Gyro_Sensor_Handler+0x58>)
 800143c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <Gyro_Sensor_Handler+0x5c>)
 8001442:	f008 f941 	bl	80096c8 <sniprintf>
 8001446:	e00d      	b.n	8001464 <Gyro_Sensor_Handler+0x48>
  }
  else
  {
//    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
//             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
	    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR,%d,%d,%d,%d\r\n", (int)Instance,
 8001448:	6878      	ldr	r0, [r7, #4]
	             (int)angular_velocity.x, (int)angular_velocity.y, (int)angular_velocity.z);
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	69f9      	ldr	r1, [r7, #28]
	    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR,%d,%d,%d,%d\r\n", (int)Instance,
 8001450:	9102      	str	r1, [sp, #8]
 8001452:	9201      	str	r2, [sp, #4]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	4603      	mov	r3, r0
 8001458:	4a08      	ldr	r2, [pc, #32]	; (800147c <Gyro_Sensor_Handler+0x60>)
 800145a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145e:	4806      	ldr	r0, [pc, #24]	; (8001478 <Gyro_Sensor_Handler+0x5c>)
 8001460:	f008 f932 	bl	80096c8 <sniprintf>
  }

  printf("%s", dataOut);
 8001464:	4904      	ldr	r1, [pc, #16]	; (8001478 <Gyro_Sensor_Handler+0x5c>)
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <Gyro_Sensor_Handler+0x64>)
 8001468:	f008 f916 	bl	8009698 <iprintf>
}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	0800b970 	.word	0x0800b970
 8001478:	200001c8 	.word	0x200001c8
 800147c:	0800b984 	.word	0x0800b984
 8001480:	0800b8bc 	.word	0x0800b8bc

08001484 <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af04      	add	r7, sp, #16
 800148a:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	461a      	mov	r2, r3
 8001492:	2104      	movs	r1, #4
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f005 f981 	bl	800679c <IKS01A3_MOTION_SENSOR_GetAxes>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d007      	beq.n	80014b0 <Magneto_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <Magneto_Sensor_Handler+0x58>)
 80014a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <Magneto_Sensor_Handler+0x5c>)
 80014aa:	f008 f90d 	bl	80096c8 <sniprintf>
 80014ae:	e00d      	b.n	80014cc <Magneto_Sensor_Handler+0x48>
  }
  else
  {
   // snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
   //          (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG,%d,%d,%d,%d\r\n", (int)Instance,
 80014b0:	6878      	ldr	r0, [r7, #4]
                 (int)magnetic_field.x, (int)magnetic_field.y, (int)magnetic_field.z);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	69f9      	ldr	r1, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG,%d,%d,%d,%d\r\n", (int)Instance,
 80014b8:	9102      	str	r1, [sp, #8]
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	4603      	mov	r3, r0
 80014c0:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <Magneto_Sensor_Handler+0x60>)
 80014c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <Magneto_Sensor_Handler+0x5c>)
 80014c8:	f008 f8fe 	bl	80096c8 <sniprintf>
  }

   printf("%s", dataOut);
 80014cc:	4904      	ldr	r1, [pc, #16]	; (80014e0 <Magneto_Sensor_Handler+0x5c>)
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <Magneto_Sensor_Handler+0x64>)
 80014d0:	f008 f8e2 	bl	8009698 <iprintf>

}
 80014d4:	bf00      	nop
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	0800b998 	.word	0x0800b998
 80014e0:	200001c8 	.word	0x200001c8
 80014e4:	0800b9ac 	.word	0x0800b9ac
 80014e8:	0800b8bc 	.word	0x0800b8bc

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f0:	f005 fbae 	bl	8006c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f4:	f000 f808 	bl	8001508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f8:	f000 f872 	bl	80015e0 <MX_GPIO_Init>
  MX_MEMS_Init();
 80014fc:	f7ff fd4f 	bl	8000f9e <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8001500:	f7ff fd53 	bl	8000faa <MX_MEMS_Process>
 8001504:	e7fc      	b.n	8001500 <main+0x14>
	...

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	; 0x50
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	2230      	movs	r2, #48	; 0x30
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f008 f8b6 	bl	8009688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <SystemClock_Config+0xd0>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <SystemClock_Config+0xd0>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <SystemClock_Config+0xd0>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <SystemClock_Config+0xd4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001554:	4a21      	ldr	r2, [pc, #132]	; (80015dc <SystemClock_Config+0xd4>)
 8001556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <SystemClock_Config+0xd4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001568:	2302      	movs	r3, #2
 800156a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156c:	2301      	movs	r3, #1
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001570:	2310      	movs	r3, #16
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001574:	2302      	movs	r3, #2
 8001576:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001578:	2300      	movs	r3, #0
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800157c:	2310      	movs	r3, #16
 800157e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001580:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001586:	2304      	movs	r3, #4
 8001588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800158a:	2307      	movs	r3, #7
 800158c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158e:	f107 0320 	add.w	r3, r7, #32
 8001592:	4618      	mov	r0, r3
 8001594:	f007 f80e 	bl	80085b4 <HAL_RCC_OscConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800159e:	f000 f869 	bl	8001674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a2:	230f      	movs	r3, #15
 80015a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a6:	2302      	movs	r3, #2
 80015a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2102      	movs	r1, #2
 80015be:	4618      	mov	r0, r3
 80015c0:	f007 fa70 	bl	8008aa4 <HAL_RCC_ClockConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015ca:	f000 f853 	bl	8001674 <Error_Handler>
  }
}
 80015ce:	bf00      	nop
 80015d0:	3750      	adds	r7, #80	; 0x50
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <MX_GPIO_Init+0x90>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a20      	ldr	r2, [pc, #128]	; (8001670 <MX_GPIO_Init+0x90>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <MX_GPIO_Init+0x90>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_GPIO_Init+0x90>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a19      	ldr	r2, [pc, #100]	; (8001670 <MX_GPIO_Init+0x90>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <MX_GPIO_Init+0x90>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <MX_GPIO_Init+0x90>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <MX_GPIO_Init+0x90>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <MX_GPIO_Init+0x90>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_GPIO_Init+0x90>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <MX_GPIO_Init+0x90>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_GPIO_Init+0x90>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2028      	movs	r0, #40	; 0x28
 800165c:	f005 fc69 	bl	8006f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001660:	2028      	movs	r0, #40	; 0x28
 8001662:	f005 fc82 	bl	8006f6a <HAL_NVIC_EnableIRQ>

}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800167c:	e7fe      	b.n	800167c <Error_Handler+0x8>
	...

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_MspInit+0x4c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <HAL_MspInit+0x4c>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_MspInit+0x4c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_MspInit+0x4c>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_MspInit+0x4c>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_MspInit+0x4c>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016be:	2007      	movs	r0, #7
 80016c0:	f005 fc2c 	bl	8006f1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <NMI_Handler+0x4>

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171c:	f005 faea 	bl	8006cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <EXTI15_10_IRQHandler+0x10>)
 800172a:	f005 fc67 	bl	8006ffc <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000004 	.word	0x20000004

08001738 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <BSP_LED_Init+0x20>)
 8001746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	0800baa8 	.word	0x0800baa8

0800175c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <LED_USER_GPIO_Init+0x7c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a1b      	ldr	r2, [pc, #108]	; (80017d8 <LED_USER_GPIO_Init+0x7c>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <LED_USER_GPIO_Init+0x7c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <LED_USER_GPIO_Init+0x7c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <LED_USER_GPIO_Init+0x7c>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <LED_USER_GPIO_Init+0x7c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2120      	movs	r1, #32
 80017ae:	480b      	ldr	r0, [pc, #44]	; (80017dc <LED_USER_GPIO_Init+0x80>)
 80017b0:	f005 fec8 	bl	8007544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80017b4:	2320      	movs	r3, #32
 80017b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	4619      	mov	r1, r3
 80017ca:	4804      	ldr	r0, [pc, #16]	; (80017dc <LED_USER_GPIO_Init+0x80>)
 80017cc:	f005 fc3a 	bl	8007044 <HAL_GPIO_Init>

}
 80017d0:	bf00      	nop
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000

080017e0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	460a      	mov	r2, r1
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	4613      	mov	r3, r2
 80017ee:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <BSP_PB_Init+0x94>)
 80017f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fc:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80017fe:	79bb      	ldrb	r3, [r7, #6]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d132      	bne.n	800186a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <BSP_PB_Init+0x98>)
 800180a:	441a      	add	r2, r3
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	491b      	ldr	r1, [pc, #108]	; (800187c <BSP_PB_Init+0x9c>)
 8001810:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001814:	4619      	mov	r1, r3
 8001816:	4610      	mov	r0, r2
 8001818:	f005 fbdb 	bl	8006fd2 <HAL_EXTI_GetHandle>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001822:	f06f 0303 	mvn.w	r3, #3
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e01f      	b.n	800186a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <BSP_PB_Init+0x98>)
 8001830:	1898      	adds	r0, r3, r2
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4a12      	ldr	r2, [pc, #72]	; (8001880 <BSP_PB_Init+0xa0>)
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	461a      	mov	r2, r3
 800183c:	2100      	movs	r1, #0
 800183e:	f005 fbae 	bl	8006f9e <HAL_EXTI_RegisterCallback>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001848:	f06f 0303 	mvn.w	r3, #3
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	e00c      	b.n	800186a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001850:	2028      	movs	r0, #40	; 0x28
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <BSP_PB_Init+0xa4>)
 8001856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185a:	2200      	movs	r2, #0
 800185c:	4619      	mov	r1, r3
 800185e:	f005 fb68 	bl	8006f32 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001862:	2328      	movs	r3, #40	; 0x28
 8001864:	4618      	mov	r0, r3
 8001866:	f005 fb80 	bl	8006f6a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	0800baac 	.word	0x0800baac
 8001878:	20000004 	.word	0x20000004
 800187c:	0800bab0 	.word	0x0800bab0
 8001880:	0800bab4 	.word	0x0800bab4
 8001884:	0800bab8 	.word	0x0800bab8

08001888 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4a09      	ldr	r2, [pc, #36]	; (80018bc <BSP_PB_GetState+0x34>)
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f005 fe37 	bl	8007514 <HAL_GPIO_ReadPin>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000

080018c0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f7ff fc7d 	bl	80011c4 <BSP_PB_Callback>
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <BUTTON_USER_GPIO_Init+0x70>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <BUTTON_USER_GPIO_Init+0x70>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <BUTTON_USER_GPIO_Init+0x70>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <BUTTON_USER_GPIO_Init+0x70>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <BUTTON_USER_GPIO_Init+0x70>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <BUTTON_USER_GPIO_Init+0x70>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800191e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <BUTTON_USER_GPIO_Init+0x74>)
 8001926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	4619      	mov	r1, r3
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <BUTTON_USER_GPIO_Init+0x78>)
 8001934:	f005 fb86 	bl	8007044 <HAL_GPIO_Init>

}
 8001938:	bf00      	nop
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	10210000 	.word	0x10210000
 8001948:	40020800 	.word	0x40020800

0800194c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d903      	bls.n	8001968 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001960:	f06f 0301 	mvn.w	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e025      	b.n	80019b4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	79fa      	ldrb	r2, [r7, #7]
 800196c:	4914      	ldr	r1, [pc, #80]	; (80019c0 <BSP_COM_Init+0x74>)
 800196e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001972:	4814      	ldr	r0, [pc, #80]	; (80019c4 <BSP_COM_Init+0x78>)
 8001974:	4613      	mov	r3, r2
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4403      	add	r3, r0
 800197e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001980:	79fa      	ldrb	r2, [r7, #7]
 8001982:	4613      	mov	r3, r2
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <BSP_COM_Init+0x78>)
 800198c:	4413      	add	r3, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f864 	bl	8001a5c <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001994:	79fa      	ldrb	r2, [r7, #7]
 8001996:	4613      	mov	r3, r2
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <BSP_COM_Init+0x78>)
 80019a0:	4413      	add	r3, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f810 	bl	80019c8 <MX_USART2_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80019ae:	f06f 0303 	mvn.w	r3, #3
 80019b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80019b4:	68fb      	ldr	r3, [r7, #12]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	200002cc 	.word	0x200002cc

080019c8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <MX_USART2_UART_Init+0x58>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f007 fa6c 	bl	8008ee4 <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40004400 	.word	0x40004400

08001a24 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <__io_putchar+0x30>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4613      	mov	r3, r2
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <__io_putchar+0x34>)
 8001a3c:	1898      	adds	r0, r3, r2
 8001a3e:	1d39      	adds	r1, r7, #4
 8001a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a44:	2201      	movs	r2, #1
 8001a46:	f007 faa4 	bl	8008f92 <HAL_UART_Transmit>
  return ch;
 8001a4a:	687b      	ldr	r3, [r7, #4]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000310 	.word	0x20000310
 8001a58:	200002cc 	.word	0x200002cc

08001a5c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <USART2_MspInit+0x88>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <USART2_MspInit+0x88>)
 8001a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a72:	6413      	str	r3, [r2, #64]	; 0x40
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <USART2_MspInit+0x88>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <USART2_MspInit+0x88>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <USART2_MspInit+0x88>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <USART2_MspInit+0x88>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8001aac:	2307      	movs	r3, #7
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <USART2_MspInit+0x8c>)
 8001ab8:	f005 fac4 	bl	8007044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8001abc:	2308      	movs	r3, #8
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001acc:	2307      	movs	r3, #7
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <USART2_MspInit+0x8c>)
 8001ad8:	f005 fab4 	bl	8007044 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	; 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020000 	.word	0x40020000

08001aec <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <BSP_I2C1_Init+0x58>)
 8001af8:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <BSP_I2C1_Init+0x5c>)
 8001afa:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <BSP_I2C1_Init+0x60>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	4912      	ldr	r1, [pc, #72]	; (8001b4c <BSP_I2C1_Init+0x60>)
 8001b04:	600a      	str	r2, [r1, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d117      	bne.n	8001b3a <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001b0a:	480e      	ldr	r0, [pc, #56]	; (8001b44 <BSP_I2C1_Init+0x58>)
 8001b0c:	f006 f9dc 	bl	8007ec8 <HAL_I2C_GetState>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d111      	bne.n	8001b3a <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001b16:	480b      	ldr	r0, [pc, #44]	; (8001b44 <BSP_I2C1_Init+0x58>)
 8001b18:	f000 f8e2 	bl	8001ce0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10b      	bne.n	8001b3a <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001b22:	4808      	ldr	r0, [pc, #32]	; (8001b44 <BSP_I2C1_Init+0x58>)
 8001b24:	f000 f8a8 	bl	8001c78 <MX_I2C1_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001b2e:	f06f 0307 	mvn.w	r3, #7
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	e001      	b.n	8001b3a <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001b3a:	687b      	ldr	r3, [r7, #4]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000314 	.word	0x20000314
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	20000368 	.word	0x20000368

08001b50 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <BSP_I2C1_DeInit+0x48>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d014      	beq.n	8001b8c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <BSP_I2C1_DeInit+0x48>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <BSP_I2C1_DeInit+0x48>)
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <BSP_I2C1_DeInit+0x48>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10b      	bne.n	8001b8c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001b74:	4809      	ldr	r0, [pc, #36]	; (8001b9c <BSP_I2C1_DeInit+0x4c>)
 8001b76:	f000 f8fd 	bl	8001d74 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001b7a:	4808      	ldr	r0, [pc, #32]	; (8001b9c <BSP_I2C1_DeInit+0x4c>)
 8001b7c:	f005 fe40 	bl	8007800 <HAL_I2C_DeInit>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001b86:	f06f 0307 	mvn.w	r3, #7
 8001b8a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001b8c:	687b      	ldr	r3, [r7, #4]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000368 	.word	0x20000368
 8001b9c:	20000314 	.word	0x20000314

08001ba0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af04      	add	r7, sp, #16
 8001ba6:	60ba      	str	r2, [r7, #8]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4603      	mov	r3, r0
 8001bac:	81fb      	strh	r3, [r7, #14]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	81bb      	strh	r3, [r7, #12]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001bba:	89ba      	ldrh	r2, [r7, #12]
 8001bbc:	89f9      	ldrh	r1, [r7, #14]
 8001bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2301      	movs	r3, #1
 8001bce:	480c      	ldr	r0, [pc, #48]	; (8001c00 <BSP_I2C1_WriteReg+0x60>)
 8001bd0:	f005 fe5a 	bl	8007888 <HAL_I2C_Mem_Write>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00c      	beq.n	8001bf4 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001bda:	4809      	ldr	r0, [pc, #36]	; (8001c00 <BSP_I2C1_WriteReg+0x60>)
 8001bdc:	f006 f982 	bl	8007ee4 <HAL_I2C_GetError>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d103      	bne.n	8001bee <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001be6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e002      	b.n	8001bf4 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001bee:	f06f 0303 	mvn.w	r3, #3
 8001bf2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001bf4:	697b      	ldr	r3, [r7, #20]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000314 	.word	0x20000314

08001c04 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af04      	add	r7, sp, #16
 8001c0a:	60ba      	str	r2, [r7, #8]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4603      	mov	r3, r0
 8001c10:	81fb      	strh	r3, [r7, #14]
 8001c12:	460b      	mov	r3, r1
 8001c14:	81bb      	strh	r3, [r7, #12]
 8001c16:	4613      	mov	r3, r2
 8001c18:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001c1e:	89ba      	ldrh	r2, [r7, #12]
 8001c20:	89f9      	ldrh	r1, [r7, #14]
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2301      	movs	r3, #1
 8001c32:	480c      	ldr	r0, [pc, #48]	; (8001c64 <BSP_I2C1_ReadReg+0x60>)
 8001c34:	f005 ff22 	bl	8007a7c <HAL_I2C_Mem_Read>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00c      	beq.n	8001c58 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001c3e:	4809      	ldr	r0, [pc, #36]	; (8001c64 <BSP_I2C1_ReadReg+0x60>)
 8001c40:	f006 f950 	bl	8007ee4 <HAL_I2C_GetError>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d103      	bne.n	8001c52 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001c4a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e002      	b.n	8001c58 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c52:	f06f 0303 	mvn.w	r3, #3
 8001c56:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001c58:	697b      	ldr	r3, [r7, #20]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000314 	.word	0x20000314

08001c68 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001c6c:	f005 f856 	bl	8006d1c <HAL_GetTick>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <MX_I2C1_Init+0x60>)
 8001c88:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <MX_I2C1_Init+0x64>)
 8001c8e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ca2:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f005 fc5b 	bl	8007578 <HAL_I2C_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40005400 	.word	0x40005400
 8001cdc:	00061a80 	.word	0x00061a80

08001ce0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <I2C1_MspInit+0x8c>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <I2C1_MspInit+0x8c>)
 8001cf2:	f043 0302 	orr.w	r3, r3, #2
 8001cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <I2C1_MspInit+0x8c>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0a:	2312      	movs	r3, #18
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001d16:	2304      	movs	r3, #4
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4813      	ldr	r0, [pc, #76]	; (8001d70 <I2C1_MspInit+0x90>)
 8001d22:	f005 f98f 	bl	8007044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2c:	2312      	movs	r3, #18
 8001d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001d38:	2304      	movs	r3, #4
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	480b      	ldr	r0, [pc, #44]	; (8001d70 <I2C1_MspInit+0x90>)
 8001d44:	f005 f97e 	bl	8007044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <I2C1_MspInit+0x8c>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	4a06      	ldr	r2, [pc, #24]	; (8001d6c <I2C1_MspInit+0x8c>)
 8001d52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d56:	6413      	str	r3, [r2, #64]	; 0x40
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <I2C1_MspInit+0x8c>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	; 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020400 	.word	0x40020400

08001d74 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <I2C1_MspDeInit+0x30>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <I2C1_MspDeInit+0x30>)
 8001d82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d86:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d8c:	4806      	ldr	r0, [pc, #24]	; (8001da8 <I2C1_MspDeInit+0x34>)
 8001d8e:	f005 fadd 	bl	800734c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001d92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d96:	4804      	ldr	r0, [pc, #16]	; (8001da8 <I2C1_MspDeInit+0x34>)
 8001d98:	f005 fad8 	bl	800734c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020400 	.word	0x40020400

08001dac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	e00a      	b.n	8001dd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dbe:	f3af 8000 	nop.w
 8001dc2:	4601      	mov	r1, r0
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	60ba      	str	r2, [r7, #8]
 8001dca:	b2ca      	uxtb	r2, r1
 8001dcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dbf0      	blt.n	8001dbe <_read+0x12>
	}

return len;
 8001ddc:	687b      	ldr	r3, [r7, #4]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e009      	b.n	8001e0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	60ba      	str	r2, [r7, #8]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fe0f 	bl	8001a24 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	dbf1      	blt.n	8001df8 <_write+0x12>
	}
	return len;
 8001e14:	687b      	ldr	r3, [r7, #4]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_close>:

int _close(int file)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
	return -1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e46:	605a      	str	r2, [r3, #4]
	return 0;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_isatty>:

int _isatty(int file)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
	return 0;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb8:	f007 fbbc 	bl	8009634 <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e009      	b.n	8001edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <_sbrk+0x64>)
 8001ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20018000 	.word	0x20018000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	2000036c 	.word	0x2000036c
 8001ef0:	20000460 	.word	0x20000460

08001ef4 <LIS2DW12_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d103      	bne.n	8001f10 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e04d      	b.n	8001fac <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	7b1a      	ldrb	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	699a      	ldr	r2, [r3, #24]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a1b      	ldr	r2, [pc, #108]	; (8001fb8 <LIS2DW12_RegisterBusIO+0xc4>)
 8001f4c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a1a      	ldr	r2, [pc, #104]	; (8001fbc <LIS2DW12_RegisterBusIO+0xc8>)
 8001f52:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	e020      	b.n	8001fac <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4798      	blx	r3
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	e016      	b.n	8001fac <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d112      	bne.n	8001fac <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10d      	bne.n	8001fac <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001f90:	2305      	movs	r3, #5
 8001f92:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001f94:	7afb      	ldrb	r3, [r7, #11]
 8001f96:	461a      	mov	r2, r3
 8001f98:	2121      	movs	r1, #33	; 0x21
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fd87 	bl	8002aae <LIS2DW12_Write_Reg>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001fac:	68fb      	ldr	r3, [r7, #12]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	08002e41 	.word	0x08002e41
 8001fbc:	08002e77 	.word	0x08002e77

08001fc0 <LIS2DW12_Init>:
 * @brief  Initialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	331c      	adds	r3, #28
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f001 fa94 	bl	80034fc <lis2dw12_auto_increment_set>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e04b      	b.n	8002078 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	331c      	adds	r3, #28
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 f9a8 	bl	800333c <lis2dw12_block_data_update_set>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	e03f      	b.n	8002078 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	331c      	adds	r3, #28
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f001 faa2 	bl	8003548 <lis2dw12_fifo_mode_set>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	e033      	b.n	8002078 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	331c      	adds	r3, #28
 8002014:	2104      	movs	r1, #4
 8002016:	4618      	mov	r0, r3
 8002018:	f000 ff78 	bl	8002f0c <lis2dw12_power_mode_set>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	e027      	b.n	8002078 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a15      	ldr	r2, [pc, #84]	; (8002080 <LIS2DW12_Init+0xc0>)
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	331c      	adds	r3, #28
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f001 f869 	bl	800311c <lis2dw12_data_rate_set>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8002050:	f04f 33ff 	mov.w	r3, #4294967295
 8002054:	e010      	b.n	8002078 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	331c      	adds	r3, #28
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f001 f993 	bl	8003388 <lis2dw12_full_scale_set>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
 800206c:	e004      	b.n	8002078 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	42c80000 	.word	0x42c80000

08002084 <LIS2DW12_DeInit>:
 * @brief  Deinitialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f888 	bl	80021a2 <LIS2DW12_ACC_Disable>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
 800209c:	e010      	b.n	80020c0 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <LIS2DW12_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	331c      	adds	r3, #28
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f001 f9fe 	bl	80034da <lis2dw12_device_id_get>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295
 80020e8:	e000      	b.n	80020ec <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <LIS2DW12_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2DW12 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2200      	movs	r2, #0
 8002108:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2200      	movs	r2, #0
 800210e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2200      	movs	r2, #0
 800211a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2210      	movs	r2, #16
 8002120:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	4a06      	ldr	r2, [pc, #24]	; (800214c <LIS2DW12_GetCapabilities+0x58>)
 8002134:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	44c80000 	.word	0x44c80000

08002150 <LIS2DW12_ACC_Enable>:
 * @brief  Enable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	e019      	b.n	800219a <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002178:	461a      	mov	r2, r3
 800217a:	eeb0 0a67 	vmov.f32	s0, s15
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fcb0 	bl	8002ae4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <LIS2DW12_ACC_Enable+0x40>
  {
    return LIS2DW12_ERROR;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	e004      	b.n	800219a <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <LIS2DW12_ACC_Disable>:
 * @brief  Disable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e010      	b.n	80021da <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	331c      	adds	r3, #28
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 ffac 	bl	800311c <lis2dw12_data_rate_set>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
 80021ce:	e004      	b.n	80021da <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <LIS2DW12_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	331c      	adds	r3, #28
 80021f6:	f107 020b 	add.w	r2, r7, #11
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f001 f8e9 	bl	80033d4 <lis2dw12_full_scale_get>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8002208:	f04f 33ff 	mov.w	r3, #4294967295
 800220c:	e0a0      	b.n	8002350 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	331c      	adds	r3, #28
 8002212:	f107 020a 	add.w	r2, r7, #10
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fec5 	bl	8002fa8 <lis2dw12_power_mode_get>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	e092      	b.n	8002350 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch(mode)
 800222a:	7abb      	ldrb	r3, [r7, #10]
 800222c:	2b1b      	cmp	r3, #27
 800222e:	f200 8087 	bhi.w	8002340 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <LIS2DW12_ACC_GetSensitivity+0x54>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	080022a9 	.word	0x080022a9
 800223c:	080022f5 	.word	0x080022f5
 8002240:	080022f5 	.word	0x080022f5
 8002244:	080022f5 	.word	0x080022f5
 8002248:	080022f5 	.word	0x080022f5
 800224c:	08002341 	.word	0x08002341
 8002250:	08002341 	.word	0x08002341
 8002254:	08002341 	.word	0x08002341
 8002258:	080022a9 	.word	0x080022a9
 800225c:	080022f5 	.word	0x080022f5
 8002260:	080022f5 	.word	0x080022f5
 8002264:	080022f5 	.word	0x080022f5
 8002268:	08002341 	.word	0x08002341
 800226c:	08002341 	.word	0x08002341
 8002270:	08002341 	.word	0x08002341
 8002274:	08002341 	.word	0x08002341
 8002278:	080022a9 	.word	0x080022a9
 800227c:	080022f5 	.word	0x080022f5
 8002280:	080022f5 	.word	0x080022f5
 8002284:	080022f5 	.word	0x080022f5
 8002288:	080022f5 	.word	0x080022f5
 800228c:	08002341 	.word	0x08002341
 8002290:	08002341 	.word	0x08002341
 8002294:	08002341 	.word	0x08002341
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022f5 	.word	0x080022f5
 80022a0:	080022f5 	.word	0x080022f5
 80022a4:	080022f5 	.word	0x080022f5
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80022a8:	7afb      	ldrb	r3, [r7, #11]
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d81a      	bhi.n	80022e4 <LIS2DW12_ACC_GetSensitivity+0x100>
 80022ae:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 80022b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b4:	080022c5 	.word	0x080022c5
 80022b8:	080022cd 	.word	0x080022cd
 80022bc:	080022d5 	.word	0x080022d5
 80022c0:	080022dd 	.word	0x080022dd
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4a24      	ldr	r2, [pc, #144]	; (8002358 <LIS2DW12_ACC_GetSensitivity+0x174>)
 80022c8:	601a      	str	r2, [r3, #0]
           break;
 80022ca:	e012      	b.n	80022f2 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	4a23      	ldr	r2, [pc, #140]	; (800235c <LIS2DW12_ACC_GetSensitivity+0x178>)
 80022d0:	601a      	str	r2, [r3, #0]
          break;
 80022d2:	e00e      	b.n	80022f2 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4a22      	ldr	r2, [pc, #136]	; (8002360 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 80022d8:	601a      	str	r2, [r3, #0]
           break;
 80022da:	e00a      	b.n	80022f2 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4a21      	ldr	r2, [pc, #132]	; (8002364 <LIS2DW12_ACC_GetSensitivity+0x180>)
 80022e0:	601a      	str	r2, [r3, #0]
          break;
 80022e2:	e006      	b.n	80022f2 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4a20      	ldr	r2, [pc, #128]	; (8002368 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80022e8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
 80022ee:	60fb      	str	r3, [r7, #12]
          break;
 80022f0:	bf00      	nop
      }
      break;
 80022f2:	e02c      	b.n	800234e <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d81a      	bhi.n	8002330 <LIS2DW12_ACC_GetSensitivity+0x14c>
 80022fa:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	08002311 	.word	0x08002311
 8002304:	08002319 	.word	0x08002319
 8002308:	08002321 	.word	0x08002321
 800230c:	08002329 	.word	0x08002329
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4a16      	ldr	r2, [pc, #88]	; (800236c <LIS2DW12_ACC_GetSensitivity+0x188>)
 8002314:	601a      	str	r2, [r3, #0]
           break;
 8002316:	e012      	b.n	800233e <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4a15      	ldr	r2, [pc, #84]	; (8002370 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 800231c:	601a      	str	r2, [r3, #0]
          break;
 800231e:	e00e      	b.n	800233e <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8002324:	601a      	str	r2, [r3, #0]
           break;
 8002326:	e00a      	b.n	800233e <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4a0c      	ldr	r2, [pc, #48]	; (800235c <LIS2DW12_ACC_GetSensitivity+0x178>)
 800232c:	601a      	str	r2, [r3, #0]
          break;
 800232e:	e006      	b.n	800233e <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4a0d      	ldr	r2, [pc, #52]	; (8002368 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002334:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	60fb      	str	r3, [r7, #12]
          break;
 800233c:	bf00      	nop
      }
      break;
 800233e:	e006      	b.n	800234e <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8002344:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	60fb      	str	r3, [r7, #12]
      break;
 800234c:	bf00      	nop
  }

  return ret;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	3f79db23 	.word	0x3f79db23
 800235c:	3ff9db23 	.word	0x3ff9db23
 8002360:	4079db23 	.word	0x4079db23
 8002364:	40f9db23 	.word	0x40f9db23
 8002368:	bf800000 	.word	0xbf800000
 800236c:	3e79db23 	.word	0x3e79db23
 8002370:	3ef9db23 	.word	0x3ef9db23

08002374 <LIS2DW12_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	331c      	adds	r3, #28
 8002386:	f107 020b 	add.w	r2, r7, #11
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f000 ff0b 	bl	80031a8 <lis2dw12_data_rate_get>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
 800239c:	e1d4      	b.n	8002748 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	331c      	adds	r3, #28
 80023a2:	f107 020a 	add.w	r2, r7, #10
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fdfd 	bl	8002fa8 <lis2dw12_power_mode_get>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
 80023b8:	e1c6      	b.n	8002748 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 80023ba:	7afb      	ldrb	r3, [r7, #11]
 80023bc:	2b32      	cmp	r3, #50	; 0x32
 80023be:	f200 81bb 	bhi.w	8002738 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 80023c2:	a201      	add	r2, pc, #4	; (adr r2, 80023c8 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	08002495 	.word	0x08002495
 80023cc:	0800249f 	.word	0x0800249f
 80023d0:	0800253d 	.word	0x0800253d
 80023d4:	08002545 	.word	0x08002545
 80023d8:	0800254d 	.word	0x0800254d
 80023dc:	08002555 	.word	0x08002555
 80023e0:	0800255d 	.word	0x0800255d
 80023e4:	08002565 	.word	0x08002565
 80023e8:	08002601 	.word	0x08002601
 80023ec:	0800269d 	.word	0x0800269d
 80023f0:	08002739 	.word	0x08002739
 80023f4:	08002739 	.word	0x08002739
 80023f8:	08002739 	.word	0x08002739
 80023fc:	08002739 	.word	0x08002739
 8002400:	08002739 	.word	0x08002739
 8002404:	08002739 	.word	0x08002739
 8002408:	08002739 	.word	0x08002739
 800240c:	08002739 	.word	0x08002739
 8002410:	08002495 	.word	0x08002495
 8002414:	08002739 	.word	0x08002739
 8002418:	08002739 	.word	0x08002739
 800241c:	08002739 	.word	0x08002739
 8002420:	08002739 	.word	0x08002739
 8002424:	08002739 	.word	0x08002739
 8002428:	08002739 	.word	0x08002739
 800242c:	08002739 	.word	0x08002739
 8002430:	08002739 	.word	0x08002739
 8002434:	08002739 	.word	0x08002739
 8002438:	08002739 	.word	0x08002739
 800243c:	08002739 	.word	0x08002739
 8002440:	08002739 	.word	0x08002739
 8002444:	08002739 	.word	0x08002739
 8002448:	08002739 	.word	0x08002739
 800244c:	08002739 	.word	0x08002739
 8002450:	08002739 	.word	0x08002739
 8002454:	08002739 	.word	0x08002739
 8002458:	08002739 	.word	0x08002739
 800245c:	08002739 	.word	0x08002739
 8002460:	08002739 	.word	0x08002739
 8002464:	08002739 	.word	0x08002739
 8002468:	08002739 	.word	0x08002739
 800246c:	08002739 	.word	0x08002739
 8002470:	08002739 	.word	0x08002739
 8002474:	08002739 	.word	0x08002739
 8002478:	08002739 	.word	0x08002739
 800247c:	08002739 	.word	0x08002739
 8002480:	08002739 	.word	0x08002739
 8002484:	08002739 	.word	0x08002739
 8002488:	08002739 	.word	0x08002739
 800248c:	08002739 	.word	0x08002739
 8002490:	08002495 	.word	0x08002495
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
      break;
 800249c:	e153      	b.n	8002746 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 800249e:	7abb      	ldrb	r3, [r7, #10]
 80024a0:	2b1b      	cmp	r3, #27
 80024a2:	d843      	bhi.n	800252c <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 80024a4:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 80024a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024aa:	bf00      	nop
 80024ac:	08002525 	.word	0x08002525
 80024b0:	08002525 	.word	0x08002525
 80024b4:	08002525 	.word	0x08002525
 80024b8:	08002525 	.word	0x08002525
 80024bc:	0800251d 	.word	0x0800251d
 80024c0:	0800252d 	.word	0x0800252d
 80024c4:	0800252d 	.word	0x0800252d
 80024c8:	0800252d 	.word	0x0800252d
 80024cc:	08002525 	.word	0x08002525
 80024d0:	08002525 	.word	0x08002525
 80024d4:	08002525 	.word	0x08002525
 80024d8:	08002525 	.word	0x08002525
 80024dc:	0800252d 	.word	0x0800252d
 80024e0:	0800252d 	.word	0x0800252d
 80024e4:	0800252d 	.word	0x0800252d
 80024e8:	0800252d 	.word	0x0800252d
 80024ec:	08002525 	.word	0x08002525
 80024f0:	08002525 	.word	0x08002525
 80024f4:	08002525 	.word	0x08002525
 80024f8:	08002525 	.word	0x08002525
 80024fc:	0800251d 	.word	0x0800251d
 8002500:	0800252d 	.word	0x0800252d
 8002504:	0800252d 	.word	0x0800252d
 8002508:	0800252d 	.word	0x0800252d
 800250c:	08002525 	.word	0x08002525
 8002510:	08002525 	.word	0x08002525
 8002514:	08002525 	.word	0x08002525
 8002518:	08002525 	.word	0x08002525
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4a8c      	ldr	r2, [pc, #560]	; (8002750 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002520:	601a      	str	r2, [r3, #0]
           break;
 8002522:	e00a      	b.n	800253a <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	4a8b      	ldr	r2, [pc, #556]	; (8002754 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 8002528:	601a      	str	r2, [r3, #0]
          break;
 800252a:	e006      	b.n	800253a <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4a8a      	ldr	r2, [pc, #552]	; (8002758 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002530:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
 8002536:	60fb      	str	r3, [r7, #12]
          break;
 8002538:	bf00      	nop
      }
      break;
 800253a:	e104      	b.n	8002746 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4a84      	ldr	r2, [pc, #528]	; (8002750 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8002540:	601a      	str	r2, [r3, #0]
      break;
 8002542:	e100      	b.n	8002746 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	4a85      	ldr	r2, [pc, #532]	; (800275c <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 8002548:	601a      	str	r2, [r3, #0]
      break;
 800254a:	e0fc      	b.n	8002746 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	4a84      	ldr	r2, [pc, #528]	; (8002760 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8002550:	601a      	str	r2, [r3, #0]
      break;
 8002552:	e0f8      	b.n	8002746 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4a83      	ldr	r2, [pc, #524]	; (8002764 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 8002558:	601a      	str	r2, [r3, #0]
      break;
 800255a:	e0f4      	b.n	8002746 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4a82      	ldr	r2, [pc, #520]	; (8002768 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002560:	601a      	str	r2, [r3, #0]
      break;
 8002562:	e0f0      	b.n	8002746 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8002564:	7abb      	ldrb	r3, [r7, #10]
 8002566:	2b1b      	cmp	r3, #27
 8002568:	d842      	bhi.n	80025f0 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 800256a:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	080025e9 	.word	0x080025e9
 8002574:	080025e9 	.word	0x080025e9
 8002578:	080025e9 	.word	0x080025e9
 800257c:	080025e9 	.word	0x080025e9
 8002580:	080025e1 	.word	0x080025e1
 8002584:	080025f1 	.word	0x080025f1
 8002588:	080025f1 	.word	0x080025f1
 800258c:	080025f1 	.word	0x080025f1
 8002590:	080025e9 	.word	0x080025e9
 8002594:	080025e9 	.word	0x080025e9
 8002598:	080025e9 	.word	0x080025e9
 800259c:	080025e9 	.word	0x080025e9
 80025a0:	080025f1 	.word	0x080025f1
 80025a4:	080025f1 	.word	0x080025f1
 80025a8:	080025f1 	.word	0x080025f1
 80025ac:	080025f1 	.word	0x080025f1
 80025b0:	080025e9 	.word	0x080025e9
 80025b4:	080025e9 	.word	0x080025e9
 80025b8:	080025e9 	.word	0x080025e9
 80025bc:	080025e9 	.word	0x080025e9
 80025c0:	080025e1 	.word	0x080025e1
 80025c4:	080025f1 	.word	0x080025f1
 80025c8:	080025f1 	.word	0x080025f1
 80025cc:	080025f1 	.word	0x080025f1
 80025d0:	080025e9 	.word	0x080025e9
 80025d4:	080025e9 	.word	0x080025e9
 80025d8:	080025e9 	.word	0x080025e9
 80025dc:	080025e9 	.word	0x080025e9
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4a62      	ldr	r2, [pc, #392]	; (800276c <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 80025e4:	601a      	str	r2, [r3, #0]
           break;
 80025e6:	e00a      	b.n	80025fe <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4a5f      	ldr	r2, [pc, #380]	; (8002768 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80025ec:	601a      	str	r2, [r3, #0]
          break;
 80025ee:	e006      	b.n	80025fe <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4a59      	ldr	r2, [pc, #356]	; (8002758 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80025f4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	60fb      	str	r3, [r7, #12]
          break;
 80025fc:	bf00      	nop
      }
      break;
 80025fe:	e0a2      	b.n	8002746 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8002600:	7abb      	ldrb	r3, [r7, #10]
 8002602:	2b1b      	cmp	r3, #27
 8002604:	d842      	bhi.n	800268c <LIS2DW12_ACC_GetOutputDataRate+0x318>
 8002606:	a201      	add	r2, pc, #4	; (adr r2, 800260c <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 8002608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260c:	08002685 	.word	0x08002685
 8002610:	08002685 	.word	0x08002685
 8002614:	08002685 	.word	0x08002685
 8002618:	08002685 	.word	0x08002685
 800261c:	0800267d 	.word	0x0800267d
 8002620:	0800268d 	.word	0x0800268d
 8002624:	0800268d 	.word	0x0800268d
 8002628:	0800268d 	.word	0x0800268d
 800262c:	08002685 	.word	0x08002685
 8002630:	08002685 	.word	0x08002685
 8002634:	08002685 	.word	0x08002685
 8002638:	08002685 	.word	0x08002685
 800263c:	0800268d 	.word	0x0800268d
 8002640:	0800268d 	.word	0x0800268d
 8002644:	0800268d 	.word	0x0800268d
 8002648:	0800268d 	.word	0x0800268d
 800264c:	08002685 	.word	0x08002685
 8002650:	08002685 	.word	0x08002685
 8002654:	08002685 	.word	0x08002685
 8002658:	08002685 	.word	0x08002685
 800265c:	0800267d 	.word	0x0800267d
 8002660:	0800268d 	.word	0x0800268d
 8002664:	0800268d 	.word	0x0800268d
 8002668:	0800268d 	.word	0x0800268d
 800266c:	08002685 	.word	0x08002685
 8002670:	08002685 	.word	0x08002685
 8002674:	08002685 	.word	0x08002685
 8002678:	08002685 	.word	0x08002685
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4a3c      	ldr	r2, [pc, #240]	; (8002770 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8002680:	601a      	str	r2, [r3, #0]
           break;
 8002682:	e00a      	b.n	800269a <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	4a38      	ldr	r2, [pc, #224]	; (8002768 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002688:	601a      	str	r2, [r3, #0]
          break;
 800268a:	e006      	b.n	800269a <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4a32      	ldr	r2, [pc, #200]	; (8002758 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8002690:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
 8002696:	60fb      	str	r3, [r7, #12]
          break;
 8002698:	bf00      	nop
      }
      break;
 800269a:	e054      	b.n	8002746 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 800269c:	7abb      	ldrb	r3, [r7, #10]
 800269e:	2b1b      	cmp	r3, #27
 80026a0:	d842      	bhi.n	8002728 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 80026a2:	a201      	add	r2, pc, #4	; (adr r2, 80026a8 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	08002721 	.word	0x08002721
 80026ac:	08002721 	.word	0x08002721
 80026b0:	08002721 	.word	0x08002721
 80026b4:	08002721 	.word	0x08002721
 80026b8:	08002719 	.word	0x08002719
 80026bc:	08002729 	.word	0x08002729
 80026c0:	08002729 	.word	0x08002729
 80026c4:	08002729 	.word	0x08002729
 80026c8:	08002721 	.word	0x08002721
 80026cc:	08002721 	.word	0x08002721
 80026d0:	08002721 	.word	0x08002721
 80026d4:	08002721 	.word	0x08002721
 80026d8:	08002729 	.word	0x08002729
 80026dc:	08002729 	.word	0x08002729
 80026e0:	08002729 	.word	0x08002729
 80026e4:	08002729 	.word	0x08002729
 80026e8:	08002721 	.word	0x08002721
 80026ec:	08002721 	.word	0x08002721
 80026f0:	08002721 	.word	0x08002721
 80026f4:	08002721 	.word	0x08002721
 80026f8:	08002719 	.word	0x08002719
 80026fc:	08002729 	.word	0x08002729
 8002700:	08002729 	.word	0x08002729
 8002704:	08002729 	.word	0x08002729
 8002708:	08002721 	.word	0x08002721
 800270c:	08002721 	.word	0x08002721
 8002710:	08002721 	.word	0x08002721
 8002714:	08002721 	.word	0x08002721
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4a16      	ldr	r2, [pc, #88]	; (8002774 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 800271c:	601a      	str	r2, [r3, #0]
           break;
 800271e:	e00a      	b.n	8002736 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4a11      	ldr	r2, [pc, #68]	; (8002768 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8002724:	601a      	str	r2, [r3, #0]
          break;
 8002726:	e006      	b.n	8002736 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800272c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	60fb      	str	r3, [r7, #12]
          break;
 8002734:	bf00      	nop
      }
      break;
 8002736:	e006      	b.n	8002746 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4a07      	ldr	r2, [pc, #28]	; (8002758 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 800273c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	60fb      	str	r3, [r7, #12]
      break;
 8002744:	bf00      	nop
  }

  return ret;
 8002746:	68fb      	ldr	r3, [r7, #12]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	41480000 	.word	0x41480000
 8002754:	3fcccccd 	.word	0x3fcccccd
 8002758:	bf800000 	.word	0xbf800000
 800275c:	41c80000 	.word	0x41c80000
 8002760:	42480000 	.word	0x42480000
 8002764:	42c80000 	.word	0x42c80000
 8002768:	43480000 	.word	0x43480000
 800276c:	43c80000 	.word	0x43c80000
 8002770:	44480000 	.word	0x44480000
 8002774:	44c80000 	.word	0x44c80000

08002778 <LIS2DW12_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8002784:	2200      	movs	r2, #0
 8002786:	2100      	movs	r1, #0
 8002788:	ed97 0a00 	vldr	s0, [r7]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f805 	bl	800279c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8002792:	4603      	mov	r3, r0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80027a8:	460b      	mov	r3, r1
 80027aa:	71fb      	strb	r3, [r7, #7]
 80027ac:	4613      	mov	r3, r2
 80027ae:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d109      	bne.n	80027ce <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80027ba:	79ba      	ldrb	r2, [r7, #6]
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	4619      	mov	r1, r3
 80027c0:	ed97 0a02 	vldr	s0, [r7, #8]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f98d 	bl	8002ae4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80027ca:	4603      	mov	r3, r0
 80027cc:	e008      	b.n	80027e0 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80027ce:	79ba      	ldrb	r2, [r7, #6]
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	4619      	mov	r1, r3
 80027d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fa9f 	bl	8002d1c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80027de:	4603      	mov	r3, r0
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <LIS2DW12_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	331c      	adds	r3, #28
 80027fa:	f107 020b 	add.w	r2, r7, #11
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fde7 	bl	80033d4 <lis2dw12_full_scale_get>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	e027      	b.n	8002862 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8002812:	7afb      	ldrb	r3, [r7, #11]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d81b      	bhi.n	8002850 <LIS2DW12_ACC_GetFullScale+0x68>
 8002818:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <LIS2DW12_ACC_GetFullScale+0x38>)
 800281a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281e:	bf00      	nop
 8002820:	08002831 	.word	0x08002831
 8002824:	08002839 	.word	0x08002839
 8002828:	08002841 	.word	0x08002841
 800282c:	08002849 	.word	0x08002849
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2202      	movs	r2, #2
 8002834:	601a      	str	r2, [r3, #0]
      break;
 8002836:	e013      	b.n	8002860 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2204      	movs	r2, #4
 800283c:	601a      	str	r2, [r3, #0]
      break;
 800283e:	e00f      	b.n	8002860 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2208      	movs	r2, #8
 8002844:	601a      	str	r2, [r3, #0]
      break;
 8002846:	e00b      	b.n	8002860 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2210      	movs	r2, #16
 800284c:	601a      	str	r2, [r3, #0]
      break;
 800284e:	e007      	b.n	8002860 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	f04f 32ff 	mov.w	r2, #4294967295
 8002856:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
 800285c:	60fb      	str	r3, [r7, #12]
      break;
 800285e:	bf00      	nop
  }

  return ret;
 8002860:	68fb      	ldr	r3, [r7, #12]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop

0800286c <LIS2DW12_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
         : (FullScale <= 4) ? LIS2DW12_4g
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b02      	cmp	r3, #2
 800287a:	dd0b      	ble.n	8002894 <LIS2DW12_ACC_SetFullScale+0x28>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b04      	cmp	r3, #4
 8002880:	dd06      	ble.n	8002890 <LIS2DW12_ACC_SetFullScale+0x24>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b08      	cmp	r3, #8
 8002886:	dc01      	bgt.n	800288c <LIS2DW12_ACC_SetFullScale+0x20>
 8002888:	2302      	movs	r3, #2
 800288a:	e004      	b.n	8002896 <LIS2DW12_ACC_SetFullScale+0x2a>
 800288c:	2303      	movs	r3, #3
 800288e:	e002      	b.n	8002896 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <LIS2DW12_ACC_SetFullScale+0x2a>
 8002894:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8002896:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? LIS2DW12_8g
         :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	331c      	adds	r3, #28
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fd71 	bl	8003388 <lis2dw12_full_scale_set>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80028ac:	f04f 33ff 	mov.w	r3, #4294967295
 80028b0:	e000      	b.n	80028b4 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <LIS2DW12_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	331c      	adds	r3, #28
 80028ce:	f107 020b 	add.w	r2, r7, #11
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fb67 	bl	8002fa8 <lis2dw12_power_mode_get>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	e089      	b.n	80029fa <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	331c      	adds	r3, #28
 80028ea:	f107 020c 	add.w	r2, r7, #12
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 fda7 	bl	8003444 <lis2dw12_acceleration_raw_get>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002900:	e07b      	b.n	80029fa <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch(mode)
 8002902:	7afb      	ldrb	r3, [r7, #11]
 8002904:	2b1b      	cmp	r3, #27
 8002906:	d873      	bhi.n	80029f0 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8002908:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 800290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290e:	bf00      	nop
 8002910:	08002981 	.word	0x08002981
 8002914:	080029b9 	.word	0x080029b9
 8002918:	080029b9 	.word	0x080029b9
 800291c:	080029b9 	.word	0x080029b9
 8002920:	080029b9 	.word	0x080029b9
 8002924:	080029f1 	.word	0x080029f1
 8002928:	080029f1 	.word	0x080029f1
 800292c:	080029f1 	.word	0x080029f1
 8002930:	08002981 	.word	0x08002981
 8002934:	080029b9 	.word	0x080029b9
 8002938:	080029b9 	.word	0x080029b9
 800293c:	080029b9 	.word	0x080029b9
 8002940:	080029f1 	.word	0x080029f1
 8002944:	080029f1 	.word	0x080029f1
 8002948:	080029f1 	.word	0x080029f1
 800294c:	080029f1 	.word	0x080029f1
 8002950:	08002981 	.word	0x08002981
 8002954:	080029b9 	.word	0x080029b9
 8002958:	080029b9 	.word	0x080029b9
 800295c:	080029b9 	.word	0x080029b9
 8002960:	080029b9 	.word	0x080029b9
 8002964:	080029f1 	.word	0x080029f1
 8002968:	080029f1 	.word	0x080029f1
 800296c:	080029f1 	.word	0x080029f1
 8002970:	08002981 	.word	0x08002981
 8002974:	080029b9 	.word	0x080029b9
 8002978:	080029b9 	.word	0x080029b9
 800297c:	080029b9 	.word	0x080029b9
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8002980:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	da00      	bge.n	800298a <LIS2DW12_ACC_GetAxesRaw+0xce>
 8002988:	330f      	adds	r3, #15
 800298a:	111b      	asrs	r3, r3, #4
 800298c:	b21a      	sxth	r2, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8002992:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002996:	2b00      	cmp	r3, #0
 8002998:	da00      	bge.n	800299c <LIS2DW12_ACC_GetAxesRaw+0xe0>
 800299a:	330f      	adds	r3, #15
 800299c:	111b      	asrs	r3, r3, #4
 800299e:	b21a      	sxth	r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80029a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	da00      	bge.n	80029ae <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80029ac:	330f      	adds	r3, #15
 80029ae:	111b      	asrs	r3, r3, #4
 80029b0:	b21a      	sxth	r2, r3
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	809a      	strh	r2, [r3, #4]
      break;
 80029b6:	e01f      	b.n	80029f8 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80029b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	da00      	bge.n	80029c2 <LIS2DW12_ACC_GetAxesRaw+0x106>
 80029c0:	3303      	adds	r3, #3
 80029c2:	109b      	asrs	r3, r3, #2
 80029c4:	b21a      	sxth	r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80029ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	da00      	bge.n	80029d4 <LIS2DW12_ACC_GetAxesRaw+0x118>
 80029d2:	3303      	adds	r3, #3
 80029d4:	109b      	asrs	r3, r3, #2
 80029d6:	b21a      	sxth	r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80029dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	da00      	bge.n	80029e6 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 80029e4:	3303      	adds	r3, #3
 80029e6:	109b      	asrs	r3, r3, #2
 80029e8:	b21a      	sxth	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	809a      	strh	r2, [r3, #4]
      break;
 80029ee:	e003      	b.n	80029f8 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
 80029f4:	617b      	str	r3, [r7, #20]
      break;
 80029f6:	bf00      	nop
  }

  return ret;
 80029f8:	697b      	ldr	r3, [r7, #20]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop

08002a04 <LIS2DW12_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ff4e 	bl	80028bc <LIS2DW12_ACC_GetAxesRaw>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	e03c      	b.n	8002aa6 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8002a2c:	f107 030c 	add.w	r3, r7, #12
 8002a30:	4619      	mov	r1, r3
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff fbd6 	bl	80021e4 <LIS2DW12_ACC_GetSensitivity>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	e030      	b.n	8002aa6 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002a44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a5c:	ee17 2a90 	vmov	r2, s15
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002a64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a7c:	ee17 2a90 	vmov	r2, s15
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002a84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a9c:	ee17 2a90 	vmov	r2, s15
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <LIS2DW12_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	70fb      	strb	r3, [r7, #3]
 8002aba:	4613      	mov	r3, r2
 8002abc:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f103 001c 	add.w	r0, r3, #28
 8002ac4:	1cba      	adds	r2, r7, #2
 8002ac6:	78f9      	ldrb	r1, [r7, #3]
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f000 fa07 	bl	8002edc <lis2dw12_write_reg>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	e000      	b.n	8002adc <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	ed87 0a02 	vstr	s0, [r7, #8]
 8002af0:	460b      	mov	r3, r1
 8002af2:	71fb      	strb	r3, [r7, #7]
 8002af4:	4613      	mov	r3, r2
 8002af6:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d80b      	bhi.n	8002b18 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002b00:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8002b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b06:	bf00      	nop
 8002b08:	08002b45 	.word	0x08002b45
 8002b0c:	08002b71 	.word	0x08002b71
 8002b10:	08002b9d 	.word	0x08002b9d
 8002b14:	08002bc9 	.word	0x08002bc9
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8002b18:	79bb      	ldrb	r3, [r7, #6]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d002      	beq.n	8002b24 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8002b1e:	2304      	movs	r3, #4
 8002b20:	75fb      	strb	r3, [r7, #23]
          break;
 8002b22:	e002      	b.n	8002b2a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002b24:	2314      	movs	r3, #20
 8002b26:	75fb      	strb	r3, [r7, #23]
          break;
 8002b28:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 8002b2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b2e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3a:	d400      	bmi.n	8002b3e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002b3c:	e05a      	b.n	8002bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8002b3e:	4b6f      	ldr	r3, [pc, #444]	; (8002cfc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002b40:	60bb      	str	r3, [r7, #8]
      break;
 8002b42:	e057      	b.n	8002bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8002b44:	79bb      	ldrb	r3, [r7, #6]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d002      	beq.n	8002b50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8002b4e:	e002      	b.n	8002b56 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8002b50:	2313      	movs	r3, #19
 8002b52:	75fb      	strb	r3, [r7, #23]
          break;
 8002b54:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8002b56:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b5a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002d00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b66:	dc00      	bgt.n	8002b6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002b68:	e044      	b.n	8002bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002b6a:	4b66      	ldr	r3, [pc, #408]	; (8002d04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002b6c:	60bb      	str	r3, [r7, #8]
      break;
 8002b6e:	e041      	b.n	8002bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8002b70:	79bb      	ldrb	r3, [r7, #6]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d002      	beq.n	8002b7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8002b76:	2302      	movs	r3, #2
 8002b78:	75fb      	strb	r3, [r7, #23]
          break;
 8002b7a:	e002      	b.n	8002b82 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8002b7c:	2312      	movs	r3, #18
 8002b7e:	75fb      	strb	r3, [r7, #23]
          break;
 8002b80:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8002b82:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b86:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002d00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b92:	dc00      	bgt.n	8002b96 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8002b94:	e02e      	b.n	8002bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002b96:	4b5b      	ldr	r3, [pc, #364]	; (8002d04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002b98:	60bb      	str	r3, [r7, #8]
      break;
 8002b9a:	e02b      	b.n	8002bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8002b9c:	79bb      	ldrb	r3, [r7, #6]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d002      	beq.n	8002ba8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]
          break;
 8002ba6:	e002      	b.n	8002bae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8002ba8:	2311      	movs	r3, #17
 8002baa:	75fb      	strb	r3, [r7, #23]
          break;
 8002bac:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8002bae:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bb2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002d00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbe:	dc00      	bgt.n	8002bc2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002bc0:	e018      	b.n	8002bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002bc2:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002bc4:	60bb      	str	r3, [r7, #8]
      break;
 8002bc6:	e015      	b.n	8002bf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8002bc8:	79bb      	ldrb	r3, [r7, #6]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d002      	beq.n	8002bd4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	75fb      	strb	r3, [r7, #23]
          break;
 8002bd2:	e002      	b.n	8002bda <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	75fb      	strb	r3, [r7, #23]
          break;
 8002bd8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8002bda:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bde:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002d00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bea:	dc00      	bgt.n	8002bee <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002bec:	e001      	b.n	8002bf2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002bee:	4b45      	ldr	r3, [pc, #276]	; (8002d04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002bf0:	60bb      	str	r3, [r7, #8]
      break;
 8002bf2:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8002bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bf8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002d08 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c04:	d801      	bhi.n	8002c0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e04d      	b.n	8002ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c0e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1a:	d801      	bhi.n	8002c20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e042      	b.n	8002ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c24:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c30:	d801      	bhi.n	8002c36 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e037      	b.n	8002ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c36:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c3a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002d0c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c46:	d801      	bhi.n	8002c4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002c48:	2304      	movs	r3, #4
 8002c4a:	e02c      	b.n	8002ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c50:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002d10 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8002c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5c:	d801      	bhi.n	8002c62 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002c5e:	2305      	movs	r3, #5
 8002c60:	e021      	b.n	8002ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c62:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c66:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002d00 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c72:	d801      	bhi.n	8002c78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002c74:	2306      	movs	r3, #6
 8002c76:	e016      	b.n	8002ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c78:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c7c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002d14 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8002c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	d801      	bhi.n	8002c8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	e00b      	b.n	8002ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002c8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c92:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002d18 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8002c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9e:	d801      	bhi.n	8002ca4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	e000      	b.n	8002ca6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002ca4:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8002ca6:	75bb      	strb	r3, [r7, #22]
          : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
          : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
          :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	331c      	adds	r3, #28
 8002cac:	7dba      	ldrb	r2, [r7, #22]
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fa33 	bl	800311c <lis2dw12_data_rate_set>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	e018      	b.n	8002cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	331c      	adds	r3, #28
 8002cc6:	7dfa      	ldrb	r2, [r7, #23]
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f91e 	bl	8002f0c <lis2dw12_power_mode_set>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8002cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cda:	e00b      	b.n	8002cf4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	79ba      	ldrb	r2, [r7, #6]
 8002cee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	41480000 	.word	0x41480000
 8002d00:	43480000 	.word	0x43480000
 8002d04:	43480000 	.word	0x43480000
 8002d08:	3fcccccd 	.word	0x3fcccccd
 8002d0c:	42480000 	.word	0x42480000
 8002d10:	42c80000 	.word	0x42c80000
 8002d14:	43c80000 	.word	0x43c80000
 8002d18:	44480000 	.word	0x44480000

08002d1c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	71fb      	strb	r3, [r7, #7]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	79fa      	ldrb	r2, [r7, #7]
 8002d34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	79ba      	ldrb	r2, [r7, #6]
 8002d3c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 8002d40:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d44:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002e04 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d50:	d801      	bhi.n	8002d56 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002d52:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002d54:	e04d      	b.n	8002df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   25.0f) ?   25.0f
 8002d56:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d5a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d66:	d801      	bhi.n	8002d6c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002d68:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002d6a:	e042      	b.n	8002df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   50.0f) ?   50.0f
 8002d6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d70:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7c:	d801      	bhi.n	8002d82 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002d7e:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002d80:	e037      	b.n	8002df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  100.0f) ?  100.0f
 8002d82:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d86:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002e14 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d92:	d801      	bhi.n	8002d98 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002d94:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002d96:	e02c      	b.n	8002df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  200.0f) ?  200.0f
 8002d98:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d9c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002e1c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da8:	d801      	bhi.n	8002dae <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002dac:	e021      	b.n	8002df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  400.0f) ?  400.0f
 8002dae:	edd7 7a02 	vldr	s15, [r7, #8]
 8002db2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002e24 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dbe:	d801      	bhi.n	8002dc4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002dc2:	e016      	b.n	8002df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  800.0f) ?  800.0f
 8002dc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dc8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002e2c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd4:	d801      	bhi.n	8002dda <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8002dd6:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002dd8:	e00b      	b.n	8002df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                :                    1600.0f;
 8002dda:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dde:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002e34 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dea:	d801      	bhi.n	8002df0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002dee:	e000      	b.n	8002df2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	3fcccccd 	.word	0x3fcccccd
 8002e08:	3fcccccd 	.word	0x3fcccccd
 8002e0c:	41480000 	.word	0x41480000
 8002e10:	41c80000 	.word	0x41c80000
 8002e14:	42480000 	.word	0x42480000
 8002e18:	42480000 	.word	0x42480000
 8002e1c:	42c80000 	.word	0x42c80000
 8002e20:	42c80000 	.word	0x42c80000
 8002e24:	43480000 	.word	0x43480000
 8002e28:	43480000 	.word	0x43480000
 8002e2c:	43c80000 	.word	0x43c80000
 8002e30:	43c80000 	.word	0x43c80000
 8002e34:	44480000 	.word	0x44480000
 8002e38:	44480000 	.word	0x44480000
 8002e3c:	44c80000 	.word	0x44c80000

08002e40 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	72fb      	strb	r3, [r7, #11]
 8002e50:	4613      	mov	r3, r2
 8002e52:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	695c      	ldr	r4, [r3, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	7b1b      	ldrb	r3, [r3, #12]
 8002e60:	b298      	uxth	r0, r3
 8002e62:	7afb      	ldrb	r3, [r7, #11]
 8002e64:	b299      	uxth	r1, r3
 8002e66:	893b      	ldrh	r3, [r7, #8]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	47a0      	blx	r4
 8002e6c:	4603      	mov	r3, r0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd90      	pop	{r4, r7, pc}

08002e76 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e76:	b590      	push	{r4, r7, lr}
 8002e78:	b087      	sub	sp, #28
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	461a      	mov	r2, r3
 8002e82:	460b      	mov	r3, r1
 8002e84:	72fb      	strb	r3, [r7, #11]
 8002e86:	4613      	mov	r3, r2
 8002e88:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	691c      	ldr	r4, [r3, #16]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	7b1b      	ldrb	r3, [r3, #12]
 8002e96:	b298      	uxth	r0, r3
 8002e98:	7afb      	ldrb	r3, [r7, #11]
 8002e9a:	b299      	uxth	r1, r3
 8002e9c:	893b      	ldrh	r3, [r7, #8]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	47a0      	blx	r4
 8002ea2:	4603      	mov	r3, r0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}

08002eac <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	460b      	mov	r3, r1
 8002eba:	72fb      	strb	r3, [r7, #11]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685c      	ldr	r4, [r3, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6898      	ldr	r0, [r3, #8]
 8002ec8:	893b      	ldrh	r3, [r7, #8]
 8002eca:	7af9      	ldrb	r1, [r7, #11]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	47a0      	blx	r4
 8002ed0:	6178      	str	r0, [r7, #20]
  return ret;
 8002ed2:	697b      	ldr	r3, [r7, #20]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd90      	pop	{r4, r7, pc}

08002edc <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	460b      	mov	r3, r1
 8002eea:	72fb      	strb	r3, [r7, #11]
 8002eec:	4613      	mov	r3, r2
 8002eee:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681c      	ldr	r4, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6898      	ldr	r0, [r3, #8]
 8002ef8:	893b      	ldrh	r3, [r7, #8]
 8002efa:	7af9      	ldrb	r1, [r7, #11]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	47a0      	blx	r4
 8002f00:	6178      	str	r0, [r7, #20]
  return ret;
 8002f02:	697b      	ldr	r3, [r7, #20]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}

08002f0c <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002f18:	f107 0210 	add.w	r2, r7, #16
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	2120      	movs	r1, #32
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ffc3 	bl	8002eac <lis2dw12_read_reg>
 8002f26:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d118      	bne.n	8002f60 <lis2dw12_power_mode_set+0x54>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	7c3b      	ldrb	r3, [r7, #16]
 8002f3a:	f362 0383 	bfi	r3, r2, #2, #2
 8002f3e:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	7c3b      	ldrb	r3, [r7, #16]
 8002f4a:	f362 0301 	bfi	r3, r2, #0, #2
 8002f4e:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002f50:	f107 0210 	add.w	r2, r7, #16
 8002f54:	2301      	movs	r3, #1
 8002f56:	2120      	movs	r1, #32
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ffbf 	bl	8002edc <lis2dw12_write_reg>
 8002f5e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d107      	bne.n	8002f76 <lis2dw12_power_mode_set+0x6a>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002f66:	f107 020c 	add.w	r2, r7, #12
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	2125      	movs	r1, #37	; 0x25
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ff9c 	bl	8002eac <lis2dw12_read_reg>
 8002f74:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d110      	bne.n	8002f9e <lis2dw12_power_mode_set+0x92>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	7b3b      	ldrb	r3, [r7, #12]
 8002f88:	f362 0382 	bfi	r3, r2, #2, #1
 8002f8c:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002f8e:	f107 020c 	add.w	r2, r7, #12
 8002f92:	2301      	movs	r3, #1
 8002f94:	2125      	movs	r1, #37	; 0x25
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ffa0 	bl	8002edc <lis2dw12_write_reg>
 8002f9c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002f9e:	697b      	ldr	r3, [r7, #20]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002fb2:	f107 0210 	add.w	r2, r7, #16
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	2120      	movs	r1, #32
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ff76 	bl	8002eac <lis2dw12_read_reg>
 8002fc0:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f040 80a3 	bne.w	8003110 <lis2dw12_power_mode_get+0x168>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002fca:	f107 020c 	add.w	r2, r7, #12
 8002fce:	2301      	movs	r3, #1
 8002fd0:	2125      	movs	r1, #37	; 0x25
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ff6a 	bl	8002eac <lis2dw12_read_reg>
 8002fd8:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002fda:	7b3b      	ldrb	r3, [r7, #12]
 8002fdc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	011a      	lsls	r2, r3, #4
 8002fe4:	7c3b      	ldrb	r3, [r7, #16]
 8002fe6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
             ctrl1.lp_mode)) {
 8002ff0:	7c3a      	ldrb	r2, [r7, #16]
 8002ff2:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8002ff6:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002ff8:	4413      	add	r3, r2
 8002ffa:	2b1b      	cmp	r3, #27
 8002ffc:	f200 8084 	bhi.w	8003108 <lis2dw12_power_mode_get+0x160>
 8003000:	a201      	add	r2, pc, #4	; (adr r2, 8003008 <lis2dw12_power_mode_get+0x60>)
 8003002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003006:	bf00      	nop
 8003008:	08003099 	.word	0x08003099
 800300c:	08003091 	.word	0x08003091
 8003010:	08003089 	.word	0x08003089
 8003014:	08003081 	.word	0x08003081
 8003018:	08003079 	.word	0x08003079
 800301c:	08003109 	.word	0x08003109
 8003020:	08003109 	.word	0x08003109
 8003024:	08003109 	.word	0x08003109
 8003028:	080030b9 	.word	0x080030b9
 800302c:	080030b1 	.word	0x080030b1
 8003030:	080030a9 	.word	0x080030a9
 8003034:	080030a1 	.word	0x080030a1
 8003038:	08003109 	.word	0x08003109
 800303c:	08003109 	.word	0x08003109
 8003040:	08003109 	.word	0x08003109
 8003044:	08003109 	.word	0x08003109
 8003048:	080030e1 	.word	0x080030e1
 800304c:	080030d9 	.word	0x080030d9
 8003050:	080030d1 	.word	0x080030d1
 8003054:	080030c9 	.word	0x080030c9
 8003058:	080030c1 	.word	0x080030c1
 800305c:	08003109 	.word	0x08003109
 8003060:	08003109 	.word	0x08003109
 8003064:	08003109 	.word	0x08003109
 8003068:	08003101 	.word	0x08003101
 800306c:	080030f9 	.word	0x080030f9
 8003070:	080030f1 	.word	0x080030f1
 8003074:	080030e9 	.word	0x080030e9
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2204      	movs	r2, #4
 800307c:	701a      	strb	r2, [r3, #0]
        break;
 800307e:	e048      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2203      	movs	r2, #3
 8003084:	701a      	strb	r2, [r3, #0]
        break;
 8003086:	e044      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2202      	movs	r2, #2
 800308c:	701a      	strb	r2, [r3, #0]
        break;
 800308e:	e040      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
        break;
 8003096:	e03c      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
        break;
 800309e:	e038      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	220b      	movs	r2, #11
 80030a4:	701a      	strb	r2, [r3, #0]
        break;
 80030a6:	e034      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	220a      	movs	r2, #10
 80030ac:	701a      	strb	r2, [r3, #0]
        break;
 80030ae:	e030      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2209      	movs	r2, #9
 80030b4:	701a      	strb	r2, [r3, #0]
        break;
 80030b6:	e02c      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2208      	movs	r2, #8
 80030bc:	701a      	strb	r2, [r3, #0]
        break;
 80030be:	e028      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2214      	movs	r2, #20
 80030c4:	701a      	strb	r2, [r3, #0]
        break;
 80030c6:	e024      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2213      	movs	r2, #19
 80030cc:	701a      	strb	r2, [r3, #0]
        break;
 80030ce:	e020      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2212      	movs	r2, #18
 80030d4:	701a      	strb	r2, [r3, #0]
        break;
 80030d6:	e01c      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2211      	movs	r2, #17
 80030dc:	701a      	strb	r2, [r3, #0]
        break;
 80030de:	e018      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2210      	movs	r2, #16
 80030e4:	701a      	strb	r2, [r3, #0]
        break;
 80030e6:	e014      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	221b      	movs	r2, #27
 80030ec:	701a      	strb	r2, [r3, #0]
        break;
 80030ee:	e010      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	221a      	movs	r2, #26
 80030f4:	701a      	strb	r2, [r3, #0]
        break;
 80030f6:	e00c      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2219      	movs	r2, #25
 80030fc:	701a      	strb	r2, [r3, #0]
        break;
 80030fe:	e008      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2218      	movs	r2, #24
 8003104:	701a      	strb	r2, [r3, #0]
        break;
 8003106:	e004      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2204      	movs	r2, #4
 800310c:	701a      	strb	r2, [r3, #0]
        break;
 800310e:	e000      	b.n	8003112 <lis2dw12_power_mode_get+0x16a>
    }
  }
 8003110:	bf00      	nop

  return ret;
 8003112:	697b      	ldr	r3, [r7, #20]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003128:	f107 0210 	add.w	r2, r7, #16
 800312c:	2301      	movs	r3, #1
 800312e:	2120      	movs	r1, #32
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff febb 	bl	8002eac <lis2dw12_read_reg>
 8003136:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10f      	bne.n	800315e <lis2dw12_data_rate_set+0x42>
    ctrl1.odr = (uint8_t) val;
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	b2da      	uxtb	r2, r3
 8003146:	7c3b      	ldrb	r3, [r7, #16]
 8003148:	f362 1307 	bfi	r3, r2, #4, #4
 800314c:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800314e:	f107 0210 	add.w	r2, r7, #16
 8003152:	2301      	movs	r3, #1
 8003154:	2120      	movs	r1, #32
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff fec0 	bl	8002edc <lis2dw12_write_reg>
 800315c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <lis2dw12_data_rate_set+0x58>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003164:	f107 020c 	add.w	r2, r7, #12
 8003168:	2301      	movs	r3, #1
 800316a:	2122      	movs	r1, #34	; 0x22
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff fe9d 	bl	8002eac <lis2dw12_read_reg>
 8003172:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d110      	bne.n	800319c <lis2dw12_data_rate_set+0x80>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	b2da      	uxtb	r2, r3
 8003184:	7b3b      	ldrb	r3, [r7, #12]
 8003186:	f362 0301 	bfi	r3, r2, #0, #2
 800318a:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800318c:	f107 020c 	add.w	r2, r7, #12
 8003190:	2301      	movs	r3, #1
 8003192:	2122      	movs	r1, #34	; 0x22
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff fea1 	bl	8002edc <lis2dw12_write_reg>
 800319a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800319c:	697b      	ldr	r3, [r7, #20]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80031b2:	f107 0210 	add.w	r2, r7, #16
 80031b6:	2301      	movs	r3, #1
 80031b8:	2120      	movs	r1, #32
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff fe76 	bl	8002eac <lis2dw12_read_reg>
 80031c0:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f040 80b3 	bne.w	8003330 <lis2dw12_data_rate_get+0x188>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80031ca:	f107 020c 	add.w	r2, r7, #12
 80031ce:	2301      	movs	r3, #1
 80031d0:	2122      	movs	r1, #34	; 0x22
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff fe6a 	bl	8002eac <lis2dw12_read_reg>
 80031d8:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 80031da:	7b3b      	ldrb	r3, [r7, #12]
 80031dc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	7c3a      	ldrb	r2, [r7, #16]
 80031e6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	4413      	add	r3, r2
 80031ee:	2b32      	cmp	r3, #50	; 0x32
 80031f0:	f200 809a 	bhi.w	8003328 <lis2dw12_data_rate_get+0x180>
 80031f4:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <lis2dw12_data_rate_get+0x54>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	080032c9 	.word	0x080032c9
 8003200:	080032d1 	.word	0x080032d1
 8003204:	080032d9 	.word	0x080032d9
 8003208:	080032e1 	.word	0x080032e1
 800320c:	080032e9 	.word	0x080032e9
 8003210:	080032f1 	.word	0x080032f1
 8003214:	080032f9 	.word	0x080032f9
 8003218:	08003301 	.word	0x08003301
 800321c:	08003309 	.word	0x08003309
 8003220:	08003311 	.word	0x08003311
 8003224:	08003329 	.word	0x08003329
 8003228:	08003329 	.word	0x08003329
 800322c:	08003329 	.word	0x08003329
 8003230:	08003329 	.word	0x08003329
 8003234:	08003329 	.word	0x08003329
 8003238:	08003329 	.word	0x08003329
 800323c:	08003329 	.word	0x08003329
 8003240:	08003329 	.word	0x08003329
 8003244:	08003321 	.word	0x08003321
 8003248:	08003329 	.word	0x08003329
 800324c:	08003329 	.word	0x08003329
 8003250:	08003329 	.word	0x08003329
 8003254:	08003329 	.word	0x08003329
 8003258:	08003329 	.word	0x08003329
 800325c:	08003329 	.word	0x08003329
 8003260:	08003329 	.word	0x08003329
 8003264:	08003329 	.word	0x08003329
 8003268:	08003329 	.word	0x08003329
 800326c:	08003329 	.word	0x08003329
 8003270:	08003329 	.word	0x08003329
 8003274:	08003329 	.word	0x08003329
 8003278:	08003329 	.word	0x08003329
 800327c:	08003329 	.word	0x08003329
 8003280:	08003329 	.word	0x08003329
 8003284:	08003329 	.word	0x08003329
 8003288:	08003329 	.word	0x08003329
 800328c:	08003329 	.word	0x08003329
 8003290:	08003329 	.word	0x08003329
 8003294:	08003329 	.word	0x08003329
 8003298:	08003329 	.word	0x08003329
 800329c:	08003329 	.word	0x08003329
 80032a0:	08003329 	.word	0x08003329
 80032a4:	08003329 	.word	0x08003329
 80032a8:	08003329 	.word	0x08003329
 80032ac:	08003329 	.word	0x08003329
 80032b0:	08003329 	.word	0x08003329
 80032b4:	08003329 	.word	0x08003329
 80032b8:	08003329 	.word	0x08003329
 80032bc:	08003329 	.word	0x08003329
 80032c0:	08003329 	.word	0x08003329
 80032c4:	08003319 	.word	0x08003319
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
        break;
 80032ce:	e030      	b.n	8003332 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
        break;
 80032d6:	e02c      	b.n	8003332 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2202      	movs	r2, #2
 80032dc:	701a      	strb	r2, [r3, #0]
        break;
 80032de:	e028      	b.n	8003332 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2203      	movs	r2, #3
 80032e4:	701a      	strb	r2, [r3, #0]
        break;
 80032e6:	e024      	b.n	8003332 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2204      	movs	r2, #4
 80032ec:	701a      	strb	r2, [r3, #0]
        break;
 80032ee:	e020      	b.n	8003332 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2205      	movs	r2, #5
 80032f4:	701a      	strb	r2, [r3, #0]
        break;
 80032f6:	e01c      	b.n	8003332 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2206      	movs	r2, #6
 80032fc:	701a      	strb	r2, [r3, #0]
        break;
 80032fe:	e018      	b.n	8003332 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2207      	movs	r2, #7
 8003304:	701a      	strb	r2, [r3, #0]
        break;
 8003306:	e014      	b.n	8003332 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2208      	movs	r2, #8
 800330c:	701a      	strb	r2, [r3, #0]
        break;
 800330e:	e010      	b.n	8003332 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2209      	movs	r2, #9
 8003314:	701a      	strb	r2, [r3, #0]
        break;
 8003316:	e00c      	b.n	8003332 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2232      	movs	r2, #50	; 0x32
 800331c:	701a      	strb	r2, [r3, #0]
        break;
 800331e:	e008      	b.n	8003332 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2212      	movs	r2, #18
 8003324:	701a      	strb	r2, [r3, #0]
        break;
 8003326:	e004      	b.n	8003332 <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
        break;
 800332e:	e000      	b.n	8003332 <lis2dw12_data_rate_get+0x18a>
    }
  }
 8003330:	bf00      	nop

  return ret;
 8003332:	697b      	ldr	r3, [r7, #20]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003348:	f107 0208 	add.w	r2, r7, #8
 800334c:	2301      	movs	r3, #1
 800334e:	2121      	movs	r1, #33	; 0x21
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff fdab 	bl	8002eac <lis2dw12_read_reg>
 8003356:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <lis2dw12_block_data_update_set+0x42>
    reg.bdu = val;
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	b2da      	uxtb	r2, r3
 8003366:	7a3b      	ldrb	r3, [r7, #8]
 8003368:	f362 03c3 	bfi	r3, r2, #3, #1
 800336c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800336e:	f107 0208 	add.w	r2, r7, #8
 8003372:	2301      	movs	r3, #1
 8003374:	2121      	movs	r1, #33	; 0x21
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff fdb0 	bl	8002edc <lis2dw12_write_reg>
 800337c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800337e:	68fb      	ldr	r3, [r7, #12]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003394:	f107 0208 	add.w	r2, r7, #8
 8003398:	2301      	movs	r3, #1
 800339a:	2125      	movs	r1, #37	; 0x25
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff fd85 	bl	8002eac <lis2dw12_read_reg>
 80033a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10f      	bne.n	80033ca <lis2dw12_full_scale_set+0x42>
    reg.fs = (uint8_t) val;
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	7a3b      	ldrb	r3, [r7, #8]
 80033b4:	f362 1305 	bfi	r3, r2, #4, #2
 80033b8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80033ba:	f107 0208 	add.w	r2, r7, #8
 80033be:	2301      	movs	r3, #1
 80033c0:	2125      	movs	r1, #37	; 0x25
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fd8a 	bl	8002edc <lis2dw12_write_reg>
 80033c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033ca:	68fb      	ldr	r3, [r7, #12]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80033de:	f107 0208 	add.w	r2, r7, #8
 80033e2:	2301      	movs	r3, #1
 80033e4:	2125      	movs	r1, #37	; 0x25
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff fd60 	bl	8002eac <lis2dw12_read_reg>
 80033ec:	60f8      	str	r0, [r7, #12]

  switch (reg.fs) {
 80033ee:	7a3b      	ldrb	r3, [r7, #8]
 80033f0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d81a      	bhi.n	8003430 <lis2dw12_full_scale_get+0x5c>
 80033fa:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <lis2dw12_full_scale_get+0x2c>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	08003411 	.word	0x08003411
 8003404:	08003419 	.word	0x08003419
 8003408:	08003421 	.word	0x08003421
 800340c:	08003429 	.word	0x08003429
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
      break;
 8003416:	e00f      	b.n	8003438 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
      break;
 800341e:	e00b      	b.n	8003438 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2202      	movs	r2, #2
 8003424:	701a      	strb	r2, [r3, #0]
      break;
 8003426:	e007      	b.n	8003438 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2203      	movs	r2, #3
 800342c:	701a      	strb	r2, [r3, #0]
      break;
 800342e:	e003      	b.n	8003438 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
      break;
 8003436:	bf00      	nop
  }

  return ret;
 8003438:	68fb      	ldr	r3, [r7, #12]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop

08003444 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800344e:	f107 020c 	add.w	r2, r7, #12
 8003452:	2306      	movs	r3, #6
 8003454:	2128      	movs	r1, #40	; 0x28
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fd28 	bl	8002eac <lis2dw12_read_reg>
 800345c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800345e:	7b7b      	ldrb	r3, [r7, #13]
 8003460:	b21a      	sxth	r2, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800346c:	b29b      	uxth	r3, r3
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	b29a      	uxth	r2, r3
 8003472:	7b3b      	ldrb	r3, [r7, #12]
 8003474:	b29b      	uxth	r3, r3
 8003476:	4413      	add	r3, r2
 8003478:	b29b      	uxth	r3, r3
 800347a:	b21a      	sxth	r2, r3
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	3302      	adds	r3, #2
 8003486:	b212      	sxth	r2, r2
 8003488:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	3302      	adds	r3, #2
 800348e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003492:	b29b      	uxth	r3, r3
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	b29a      	uxth	r2, r3
 8003498:	7bbb      	ldrb	r3, [r7, #14]
 800349a:	b29b      	uxth	r3, r3
 800349c:	4413      	add	r3, r2
 800349e:	b29a      	uxth	r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	3302      	adds	r3, #2
 80034a4:	b212      	sxth	r2, r2
 80034a6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80034a8:	7c7a      	ldrb	r2, [r7, #17]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	3304      	adds	r3, #4
 80034ae:	b212      	sxth	r2, r2
 80034b0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	3304      	adds	r3, #4
 80034b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	b29a      	uxth	r2, r3
 80034c0:	7c3b      	ldrb	r3, [r7, #16]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	3304      	adds	r3, #4
 80034cc:	b212      	sxth	r2, r2
 80034ce:	801a      	strh	r2, [r3, #0]
  return ret;
 80034d0:	697b      	ldr	r3, [r7, #20]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80034e4:	2301      	movs	r3, #1
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	210f      	movs	r1, #15
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff fcde 	bl	8002eac <lis2dw12_read_reg>
 80034f0:	60f8      	str	r0, [r7, #12]
  return ret;
 80034f2:	68fb      	ldr	r3, [r7, #12]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003508:	f107 0208 	add.w	r2, r7, #8
 800350c:	2301      	movs	r3, #1
 800350e:	2121      	movs	r1, #33	; 0x21
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff fccb 	bl	8002eac <lis2dw12_read_reg>
 8003516:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10f      	bne.n	800353e <lis2dw12_auto_increment_set+0x42>
    reg.if_add_inc = val;
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	b2da      	uxtb	r2, r3
 8003526:	7a3b      	ldrb	r3, [r7, #8]
 8003528:	f362 0382 	bfi	r3, r2, #2, #1
 800352c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800352e:	f107 0208 	add.w	r2, r7, #8
 8003532:	2301      	movs	r3, #1
 8003534:	2121      	movs	r1, #33	; 0x21
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff fcd0 	bl	8002edc <lis2dw12_write_reg>
 800353c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800353e:	68fb      	ldr	r3, [r7, #12]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003554:	f107 0208 	add.w	r2, r7, #8
 8003558:	2301      	movs	r3, #1
 800355a:	212e      	movs	r1, #46	; 0x2e
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff fca5 	bl	8002eac <lis2dw12_read_reg>
 8003562:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10f      	bne.n	800358a <lis2dw12_fifo_mode_set+0x42>
    reg.fmode = (uint8_t) val;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	b2da      	uxtb	r2, r3
 8003572:	7a3b      	ldrb	r3, [r7, #8]
 8003574:	f362 1347 	bfi	r3, r2, #5, #3
 8003578:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg,
 800357a:	f107 0208 	add.w	r2, r7, #8
 800357e:	2301      	movs	r3, #1
 8003580:	212e      	movs	r1, #46	; 0x2e
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fcaa 	bl	8002edc <lis2dw12_write_reg>
 8003588:	60f8      	str	r0, [r7, #12]
                             1);
  }

  return ret;
 800358a:	68fb      	ldr	r3, [r7, #12]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <LIS2MDL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e063      	b.n	8003678 <LIS2MDL_RegisterBusIO+0xe4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	7b1a      	ldrb	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a26      	ldr	r2, [pc, #152]	; (8003684 <LIS2MDL_RegisterBusIO+0xf0>)
 80035ec:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a25      	ldr	r2, [pc, #148]	; (8003688 <LIS2MDL_RegisterBusIO+0xf4>)
 80035f2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d103      	bne.n	800360a <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e036      	b.n	8003678 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4798      	blx	r3
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	e02c      	b.n	8003678 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d028      	beq.n	8003678 <LIS2MDL_RegisterBusIO+0xe4>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800362c:	2b00      	cmp	r3, #0
 800362e:	d123      	bne.n	8003678 <LIS2MDL_RegisterBusIO+0xe4>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d10d      	bne.n	8003654 <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003638:	2334      	movs	r3, #52	; 0x34
 800363a:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 800363c:	7afb      	ldrb	r3, [r7, #11]
 800363e:	461a      	mov	r2, r3
 8003640:	2162      	movs	r1, #98	; 0x62
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fb1b 	bl	8003c7e <LIS2MDL_Write_Reg>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d014      	beq.n	8003678 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
 8003652:	e012      	b.n	800367a <LIS2MDL_RegisterBusIO+0xe6>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d101      	bne.n	8003660 <LIS2MDL_RegisterBusIO+0xcc>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	e00c      	b.n	800367a <LIS2MDL_RegisterBusIO+0xe6>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	331c      	adds	r3, #28
 8003664:	2101      	movs	r1, #1
 8003666:	4618      	mov	r0, r3
 8003668:	f000 ff70 	bl	800454c <lis2mdl_i2c_interface_set>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 8003672:	f04f 33ff 	mov.w	r3, #4294967295
 8003676:	e000      	b.n	800367a <LIS2MDL_RegisterBusIO+0xe6>
        }
      }
    }
  }

  return ret;
 8003678:	68fb      	ldr	r3, [r7, #12]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	08003cd5 	.word	0x08003cd5
 8003688:	08003d57 	.word	0x08003d57

0800368c <LIS2MDL_Init>:
 * @brief  Initialize the LIS2MDL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d144      	bne.n	8003726 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800369c:	f107 0208 	add.w	r2, r7, #8
 80036a0:	2301      	movs	r3, #1
 80036a2:	2162      	movs	r1, #98	; 0x62
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fb97 	bl	8003dd8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80036b0:	f04f 33ff 	mov.w	r3, #4294967295
 80036b4:	e06c      	b.n	8003790 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80036b6:	f107 020c 	add.w	r2, r7, #12
 80036ba:	2301      	movs	r3, #1
 80036bc:	2160      	movs	r1, #96	; 0x60
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fb8a 	bl	8003dd8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80036ca:	f04f 33ff 	mov.w	r3, #4294967295
 80036ce:	e05f      	b.n	8003790 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80036d0:	7a3b      	ldrb	r3, [r7, #8]
 80036d2:	f043 0310 	orr.w	r3, r3, #16
 80036d6:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80036d8:	7a3b      	ldrb	r3, [r7, #8]
 80036da:	f36f 0341 	bfc	r3, #1, #1
 80036de:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80036e0:	7b3b      	ldrb	r3, [r7, #12]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f362 0301 	bfi	r3, r2, #0, #2
 80036e8:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80036ea:	7b3b      	ldrb	r3, [r7, #12]
 80036ec:	f043 030c 	orr.w	r3, r3, #12
 80036f0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80036f2:	f107 0208 	add.w	r2, r7, #8
 80036f6:	2301      	movs	r3, #1
 80036f8:	2162      	movs	r1, #98	; 0x62
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fcab 	bl	8004056 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8003706:	f04f 33ff 	mov.w	r3, #4294967295
 800370a:	e041      	b.n	8003790 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800370c:	f107 020c 	add.w	r2, r7, #12
 8003710:	2301      	movs	r3, #1
 8003712:	2160      	movs	r1, #96	; 0x60
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fc9e 	bl	8004056 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d032      	beq.n	8003786 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
 8003724:	e034      	b.n	8003790 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	331c      	adds	r3, #28
 800372a:	2101      	movs	r1, #1
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fe65 	bl	80043fc <lis2mdl_block_data_update_set>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
 800373c:	e028      	b.n	8003790 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	331c      	adds	r3, #28
 8003742:	2102      	movs	r1, #2
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fdd4 	bl	80042f2 <lis2mdl_operating_mode_set>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	e01c      	b.n	8003790 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	331c      	adds	r3, #28
 800375a:	2103      	movs	r1, #3
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fdee 	bl	800433e <lis2mdl_data_rate_set>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8003768:	f04f 33ff 	mov.w	r3, #4294967295
 800376c:	e010      	b.n	8003790 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	331c      	adds	r3, #28
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fec3 	bl	8004500 <lis2mdl_self_test_set>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003780:	f04f 33ff 	mov.w	r3, #4294967295
 8003784:	e004      	b.n	8003790 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <LIS2MDL_DeInit>:
 * @brief  Deinitialize the LIS2MDL magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f8a5 	bl	80038f0 <LIS2MDL_MAG_Disable>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
 80037b0:	e004      	b.n	80037bc <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <LIS2MDL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d10b      	bne.n	80037ee <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80037d6:	2301      	movs	r3, #1
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	214f      	movs	r1, #79	; 0x4f
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fafb 	bl	8003dd8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00e      	beq.n	8003806 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80037e8:	f04f 33ff 	mov.w	r3, #4294967295
 80037ec:	e00c      	b.n	8003808 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	331c      	adds	r3, #28
 80037f2:	6839      	ldr	r1, [r7, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fe72 	bl	80044de <lis2mdl_device_id_get>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295
 8003804:	e000      	b.n	8003808 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <LIS2MDL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2200      	movs	r2, #0
 8003830:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2200      	movs	r2, #0
 8003836:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2232      	movs	r2, #50	; 0x32
 8003842:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	4a04      	ldr	r2, [pc, #16]	; (8003868 <LIS2MDL_GetCapabilities+0x58>)
 8003858:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	42c80000 	.word	0x42c80000

0800386c <LIS2MDL_MAG_Enable>:
 * @brief Enable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	e032      	b.n	80038e8 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b03      	cmp	r3, #3
 8003888:	d11d      	bne.n	80038c6 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800388a:	f107 020c 	add.w	r2, r7, #12
 800388e:	2301      	movs	r3, #1
 8003890:	2160      	movs	r1, #96	; 0x60
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 faa0 	bl	8003dd8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800389e:	f04f 33ff 	mov.w	r3, #4294967295
 80038a2:	e021      	b.n	80038e8 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80038a4:	7b3b      	ldrb	r3, [r7, #12]
 80038a6:	f36f 0301 	bfc	r3, #0, #2
 80038aa:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80038ac:	f107 020c 	add.w	r2, r7, #12
 80038b0:	2301      	movs	r3, #1
 80038b2:	2160      	movs	r1, #96	; 0x60
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fbce 	bl	8004056 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00e      	beq.n	80038de <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
 80038c4:	e010      	b.n	80038e8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	331c      	adds	r3, #28
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fd10 	bl	80042f2 <lis2mdl_operating_mode_set>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80038d8:	f04f 33ff 	mov.w	r3, #4294967295
 80038dc:	e004      	b.n	80038e8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <LIS2MDL_MAG_Disable>:
 * @brief Disable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	e033      	b.n	800396e <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b03      	cmp	r3, #3
 800390c:	d11e      	bne.n	800394c <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800390e:	f107 020c 	add.w	r2, r7, #12
 8003912:	2301      	movs	r3, #1
 8003914:	2160      	movs	r1, #96	; 0x60
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa5e 	bl	8003dd8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8003922:	f04f 33ff 	mov.w	r3, #4294967295
 8003926:	e022      	b.n	800396e <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003928:	7b3b      	ldrb	r3, [r7, #12]
 800392a:	2202      	movs	r2, #2
 800392c:	f362 0301 	bfi	r3, r2, #0, #2
 8003930:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003932:	f107 020c 	add.w	r2, r7, #12
 8003936:	2301      	movs	r3, #1
 8003938:	2160      	movs	r1, #96	; 0x60
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fb8b 	bl	8004056 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00e      	beq.n	8003964 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
 800394a:	e010      	b.n	800396e <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	331c      	adds	r3, #28
 8003950:	2102      	movs	r1, #2
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fccd 	bl	80042f2 <lis2mdl_operating_mode_set>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800395e:	f04f 33ff 	mov.w	r3, #4294967295
 8003962:	e004      	b.n	800396e <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <LIS2MDL_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003986:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <LIS2MDL_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	331c      	adds	r3, #28
 80039aa:	f107 020b 	add.w	r2, r7, #11
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fceb 	bl	800438c <lis2mdl_data_rate_get>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80039bc:	f04f 33ff 	mov.w	r3, #4294967295
 80039c0:	e023      	b.n	8003a0a <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80039c2:	7afb      	ldrb	r3, [r7, #11]
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d81b      	bhi.n	8003a00 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039e1 	.word	0x080039e1
 80039d4:	080039e9 	.word	0x080039e9
 80039d8:	080039f1 	.word	0x080039f1
 80039dc:	080039f9 	.word	0x080039f9
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4a0c      	ldr	r2, [pc, #48]	; (8003a14 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80039e4:	601a      	str	r2, [r3, #0]
      break;
 80039e6:	e00f      	b.n	8003a08 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	4a0b      	ldr	r2, [pc, #44]	; (8003a18 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80039ec:	601a      	str	r2, [r3, #0]
      break;
 80039ee:	e00b      	b.n	8003a08 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80039f4:	601a      	str	r2, [r3, #0]
      break;
 80039f6:	e007      	b.n	8003a08 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80039fc:	601a      	str	r2, [r3, #0]
      break;
 80039fe:	e003      	b.n	8003a08 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	60fb      	str	r3, [r7, #12]
      break;
 8003a06:	bf00      	nop
  }

  return ret;
 8003a08:	68fb      	ldr	r3, [r7, #12]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	41200000 	.word	0x41200000
 8003a18:	41a00000 	.word	0x41a00000
 8003a1c:	42480000 	.word	0x42480000
 8003a20:	42c80000 	.word	0x42c80000

08003a24 <LIS2MDL_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003a30:	edd7 7a00 	vldr	s15, [r7]
 8003a34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a40:	d801      	bhi.n	8003a46 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8003a42:	2300      	movs	r3, #0
 8003a44:	e016      	b.n	8003a74 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003a46:	edd7 7a00 	vldr	s15, [r7]
 8003a4a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a56:	d801      	bhi.n	8003a5c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e00b      	b.n	8003a74 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003a5c:	edd7 7a00 	vldr	s15, [r7]
 8003a60:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003ae8 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8003a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6c:	d801      	bhi.n	8003a72 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e000      	b.n	8003a74 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003a72:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8003a74:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d121      	bne.n	8003ac2 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003a7e:	f107 020c 	add.w	r2, r7, #12
 8003a82:	2301      	movs	r3, #1
 8003a84:	2160      	movs	r1, #96	; 0x60
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f9a6 	bl	8003dd8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	e022      	b.n	8003ade <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	7b3b      	ldrb	r3, [r7, #12]
 8003aa2:	f362 0383 	bfi	r3, r2, #2, #2
 8003aa6:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003aa8:	f107 020c 	add.w	r2, r7, #12
 8003aac:	2301      	movs	r3, #1
 8003aae:	2160      	movs	r1, #96	; 0x60
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fad0 	bl	8004056 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00f      	beq.n	8003adc <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003abc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac0:	e00d      	b.n	8003ade <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	331c      	adds	r3, #28
 8003ac6:	7bfa      	ldrb	r2, [r7, #15]
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fc37 	bl	800433e <lis2mdl_data_rate_set>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	e000      	b.n	8003ade <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	42480000 	.word	0x42480000

08003aec <LIS2MDL_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2232      	movs	r2, #50	; 0x32
 8003afa:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <LIS2MDL_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	331c      	adds	r3, #28
 8003b30:	f107 0208 	add.w	r2, r7, #8
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fc86 	bl	8004448 <lis2mdl_magnetic_raw_get>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8003b42:	f04f 33ff 	mov.w	r3, #4294967295
 8003b46:	e00c      	b.n	8003b62 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003b48:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003b50:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003b58:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b088      	sub	sp, #32
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d137      	bne.n	8003bec <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8003b7c:	f107 0218 	add.w	r2, r7, #24
 8003b80:	2306      	movs	r3, #6
 8003b82:	2168      	movs	r1, #104	; 0x68
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f927 	bl	8003dd8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8003b90:	f04f 33ff 	mov.w	r3, #4294967295
 8003b94:	e06f      	b.n	8003c76 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003b96:	7e7b      	ldrb	r3, [r7, #25]
 8003b98:	b21b      	sxth	r3, r3
 8003b9a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) +  (int16_t)buff[0];
 8003b9c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	7e3b      	ldrb	r3, [r7, #24]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	4413      	add	r3, r2
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	b21b      	sxth	r3, r3
 8003bb0:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003bb2:	7efb      	ldrb	r3, [r7, #27]
 8003bb4:	b21b      	sxth	r3, r3
 8003bb6:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) +  (int16_t)buff[2];
 8003bb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	7ebb      	ldrb	r3, [r7, #26]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	b21b      	sxth	r3, r3
 8003bcc:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8003bce:	7f7b      	ldrb	r3, [r7, #29]
 8003bd0:	b21b      	sxth	r3, r3
 8003bd2:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) +  (int16_t)buff[4];
 8003bd4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	7f3b      	ldrb	r3, [r7, #28]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	b21b      	sxth	r3, r3
 8003be8:	82bb      	strh	r3, [r7, #20]
 8003bea:	e00d      	b.n	8003c08 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	331c      	adds	r3, #28
 8003bf0:	f107 0210 	add.w	r2, r7, #16
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fc26 	bl	8004448 <lis2mdl_magnetic_raw_get>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
 8003c06:	e036      	b.n	8003c76 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003c08:	f107 030c 	add.w	r3, r7, #12
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff feb1 	bl	8003976 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003c14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c18:	ee07 3a90 	vmov	s15, r3
 8003c1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c2c:	ee17 2a90 	vmov	r2, s15
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003c34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c38:	ee07 3a90 	vmov	s15, r3
 8003c3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c40:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c4c:	ee17 2a90 	vmov	r2, s15
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003c54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c6c:	ee17 2a90 	vmov	r2, s15
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <LIS2MDL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	70fb      	strb	r3, [r7, #3]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d10b      	bne.n	8003cae <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003c96:	1cba      	adds	r2, r7, #2
 8003c98:	78f9      	ldrb	r1, [r7, #3]
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f9da 	bl	8004056 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d010      	beq.n	8003cca <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	e00e      	b.n	8003ccc <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f103 001c 	add.w	r0, r3, #28
 8003cb4:	1cba      	adds	r2, r7, #2
 8003cb6:	78f9      	ldrb	r1, [r7, #3]
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f000 fb02 	bl	80042c2 <lis2mdl_write_reg>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc8:	e000      	b.n	8003ccc <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	72fb      	strb	r3, [r7, #11]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10e      	bne.n	8003d12 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	695c      	ldr	r4, [r3, #20]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	7b1b      	ldrb	r3, [r3, #12]
 8003cfc:	b298      	uxth	r0, r3
 8003cfe:	7afb      	ldrb	r3, [r7, #11]
 8003d00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	b299      	uxth	r1, r3
 8003d08:	893b      	ldrh	r3, [r7, #8]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	47a0      	blx	r4
 8003d0e:	4603      	mov	r3, r0
 8003d10:	e01d      	b.n	8003d4e <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d10b      	bne.n	8003d32 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	695c      	ldr	r4, [r3, #20]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	7b1b      	ldrb	r3, [r3, #12]
 8003d22:	b298      	uxth	r0, r3
 8003d24:	7afb      	ldrb	r3, [r7, #11]
 8003d26:	b299      	uxth	r1, r3
 8003d28:	893b      	ldrh	r3, [r7, #8]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	47a0      	blx	r4
 8003d2e:	4603      	mov	r3, r0
 8003d30:	e00d      	b.n	8003d4e <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	695c      	ldr	r4, [r3, #20]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	7b1b      	ldrb	r3, [r3, #12]
 8003d3a:	b298      	uxth	r0, r3
 8003d3c:	7afb      	ldrb	r3, [r7, #11]
 8003d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	b299      	uxth	r1, r3
 8003d46:	893b      	ldrh	r3, [r7, #8]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	47a0      	blx	r4
 8003d4c:	4603      	mov	r3, r0
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd90      	pop	{r4, r7, pc}

08003d56 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003d56:	b590      	push	{r4, r7, lr}
 8003d58:	b087      	sub	sp, #28
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	461a      	mov	r2, r3
 8003d62:	460b      	mov	r3, r1
 8003d64:	72fb      	strb	r3, [r7, #11]
 8003d66:	4613      	mov	r3, r2
 8003d68:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10e      	bne.n	8003d94 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	691c      	ldr	r4, [r3, #16]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	7b1b      	ldrb	r3, [r3, #12]
 8003d7e:	b298      	uxth	r0, r3
 8003d80:	7afb      	ldrb	r3, [r7, #11]
 8003d82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	b299      	uxth	r1, r3
 8003d8a:	893b      	ldrh	r3, [r7, #8]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	47a0      	blx	r4
 8003d90:	4603      	mov	r3, r0
 8003d92:	e01d      	b.n	8003dd0 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d10b      	bne.n	8003db4 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	691c      	ldr	r4, [r3, #16]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	7b1b      	ldrb	r3, [r3, #12]
 8003da4:	b298      	uxth	r0, r3
 8003da6:	7afb      	ldrb	r3, [r7, #11]
 8003da8:	b299      	uxth	r1, r3
 8003daa:	893b      	ldrh	r3, [r7, #8]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	47a0      	blx	r4
 8003db0:	4603      	mov	r3, r0
 8003db2:	e00d      	b.n	8003dd0 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	691c      	ldr	r4, [r3, #16]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	7b1b      	ldrb	r3, [r3, #12]
 8003dbc:	b298      	uxth	r0, r3
 8003dbe:	7afb      	ldrb	r3, [r7, #11]
 8003dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	b299      	uxth	r1, r3
 8003dc8:	893b      	ldrh	r3, [r7, #8]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	47a0      	blx	r4
 8003dce:	4603      	mov	r3, r0
  }
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd90      	pop	{r4, r7, pc}

08003dd8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08c      	sub	sp, #48	; 0x30
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	607a      	str	r2, [r7, #4]
 8003de2:	461a      	mov	r2, r3
 8003de4:	460b      	mov	r3, r1
 8003de6:	72fb      	strb	r3, [r7, #11]
 8003de8:	4613      	mov	r3, r2
 8003dea:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003dec:	2301      	movs	r3, #1
 8003dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003df2:	2340      	movs	r3, #64	; 0x40
 8003df4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003dfe:	233d      	movs	r3, #61	; 0x3d
 8003e00:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003e02:	2315      	movs	r3, #21
 8003e04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003e08:	2316      	movs	r3, #22
 8003e0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003e0e:	2317      	movs	r3, #23
 8003e10:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8003e14:	2314      	movs	r3, #20
 8003e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003e1a:	2344      	movs	r3, #68	; 0x44
 8003e1c:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003e24:	2339      	movs	r3, #57	; 0x39
 8003e26:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003e30:	2329      	movs	r3, #41	; 0x29
 8003e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003e36:	231e      	movs	r3, #30
 8003e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8003e42:	893b      	ldrh	r3, [r7, #8]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003e48:	2310      	movs	r3, #16
 8003e4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003e54:	2340      	movs	r3, #64	; 0x40
 8003e56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f103 001c 	add.w	r0, r3, #28
 8003e60:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003e64:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f000 fa2a 	bl	80042c2 <lis2mdl_write_reg>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003e74:	f04f 33ff 	mov.w	r3, #4294967295
 8003e78:	e0e9      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f103 001c 	add.w	r0, r3, #28
 8003e80:	f107 021f 	add.w	r2, r7, #31
 8003e84:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f000 fa1a 	bl	80042c2 <lis2mdl_write_reg>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003e94:	f04f 33ff 	mov.w	r3, #4294967295
 8003e98:	e0d9      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f103 001c 	add.w	r0, r3, #28
 8003ea0:	f107 020b 	add.w	r2, r7, #11
 8003ea4:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f000 fa0a 	bl	80042c2 <lis2mdl_write_reg>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb8:	e0c9      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f103 001c 	add.w	r0, r3, #28
 8003ec0:	f107 021d 	add.w	r2, r7, #29
 8003ec4:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f000 f9fa 	bl	80042c2 <lis2mdl_write_reg>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed8:	e0b9      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f103 001c 	add.w	r0, r3, #28
 8003ee0:	f107 021e 	add.w	r2, r7, #30
 8003ee4:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f000 f9ea 	bl	80042c2 <lis2mdl_write_reg>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef8:	e0a9      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f103 001c 	add.w	r0, r3, #28
 8003f00:	f107 0220 	add.w	r2, r7, #32
 8003f04:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f000 f9da 	bl	80042c2 <lis2mdl_write_reg>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295
 8003f18:	e099      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f103 001c 	add.w	r0, r3, #28
 8003f20:	f107 021c 	add.w	r2, r7, #28
 8003f24:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f000 f9b2 	bl	8004292 <lis2mdl_read_reg>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003f34:	f04f 33ff 	mov.w	r3, #4294967295
 8003f38:	e089      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003f3a:	7f3b      	ldrb	r3, [r7, #28]
 8003f3c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d102      	bne.n	8003f4a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003f44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003f48:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f103 001c 	add.w	r0, r3, #28
 8003f50:	f107 021c 	add.w	r2, r7, #28
 8003f54:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f000 f9b2 	bl	80042c2 <lis2mdl_write_reg>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295
 8003f68:	e071      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f103 001c 	add.w	r0, r3, #28
 8003f70:	f107 0214 	add.w	r2, r7, #20
 8003f74:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003f78:	2306      	movs	r3, #6
 8003f7a:	f000 f98a 	bl	8004292 <lis2mdl_read_reg>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003f84:	f04f 33ff 	mov.w	r3, #4294967295
 8003f88:	e061      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f103 001c 	add.w	r0, r3, #28
 8003f90:	f107 021b 	add.w	r2, r7, #27
 8003f94:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f000 f97a 	bl	8004292 <lis2mdl_read_reg>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa8:	e051      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  }
  while ((data & xlda) != xlda);
 8003faa:	7efa      	ldrb	r2, [r7, #27]
 8003fac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d1e6      	bne.n	8003f8a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f103 001c 	add.w	r0, r3, #28
 8003fc2:	f107 021b 	add.w	r2, r7, #27
 8003fc6:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f000 f961 	bl	8004292 <lis2mdl_read_reg>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	e038      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  }
  while ((data & sens_hub_endop) != sens_hub_endop);
 8003fdc:	7efa      	ldrb	r2, [r7, #27]
 8003fde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d1e6      	bne.n	8003fbc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f103 001c 	add.w	r0, r3, #28
 8003ff4:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003ff8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f000 f960 	bl	80042c2 <lis2mdl_write_reg>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8004008:	f04f 33ff 	mov.w	r3, #4294967295
 800400c:	e01f      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f103 001c 	add.w	r0, r3, #28
 8004014:	893b      	ldrh	r3, [r7, #8]
 8004016:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	f000 f939 	bl	8004292 <lis2mdl_read_reg>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	e010      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f103 001c 	add.w	r0, r3, #28
 8004032:	f107 0220 	add.w	r2, r7, #32
 8004036:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800403a:	2301      	movs	r3, #1
 800403c:	f000 f941 	bl	80042c2 <lis2mdl_write_reg>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	e000      	b.n	800404e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3730      	adds	r7, #48	; 0x30
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b08c      	sub	sp, #48	; 0x30
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	461a      	mov	r2, r3
 8004062:	460b      	mov	r3, r1
 8004064:	72fb      	strb	r3, [r7, #11]
 8004066:	4613      	mov	r3, r2
 8004068:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004070:	2340      	movs	r3, #64	; 0x40
 8004072:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004076:	2300      	movs	r3, #0
 8004078:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 800407c:	233c      	movs	r3, #60	; 0x3c
 800407e:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004080:	2315      	movs	r3, #21
 8004082:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004086:	2316      	movs	r3, #22
 8004088:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 800408c:	2317      	movs	r3, #23
 800408e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8004092:	2300      	movs	r3, #0
 8004094:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8004096:	2314      	movs	r3, #20
 8004098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 800409c:	2344      	movs	r3, #68	; 0x44
 800409e:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 80040a0:	2339      	movs	r3, #57	; 0x39
 80040a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80040ac:	2329      	movs	r3, #41	; 0x29
 80040ae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80040b2:	231e      	movs	r3, #30
 80040b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80040be:	2310      	movs	r3, #16
 80040c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80040ca:	2340      	movs	r3, #64	; 0x40
 80040cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 80040d0:	230e      	movs	r3, #14
 80040d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f103 001c 	add.w	r0, r3, #28
 80040dc:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80040e0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80040e4:	2301      	movs	r3, #1
 80040e6:	f000 f8ec 	bl	80042c2 <lis2mdl_write_reg>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295
 80040f4:	e0c9      	b.n	800428a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f103 001c 	add.w	r0, r3, #28
 80040fc:	f107 021f 	add.w	r2, r7, #31
 8004100:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8004104:	2301      	movs	r3, #1
 8004106:	f000 f8dc 	bl	80042c2 <lis2mdl_write_reg>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004110:	f04f 33ff 	mov.w	r3, #4294967295
 8004114:	e0b9      	b.n	800428a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f103 001c 	add.w	r0, r3, #28
 800411c:	f107 020b 	add.w	r2, r7, #11
 8004120:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8004124:	2301      	movs	r3, #1
 8004126:	f000 f8cc 	bl	80042c2 <lis2mdl_write_reg>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8004130:	f04f 33ff 	mov.w	r3, #4294967295
 8004134:	e0a9      	b.n	800428a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f103 001c 	add.w	r0, r3, #28
 800413c:	f107 021e 	add.w	r2, r7, #30
 8004140:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004144:	2301      	movs	r3, #1
 8004146:	f000 f8bc 	bl	80042c2 <lis2mdl_write_reg>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004150:	f04f 33ff 	mov.w	r3, #4294967295
 8004154:	e099      	b.n	800428a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f103 001c 	add.w	r0, r3, #28
 800415c:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8004160:	2301      	movs	r3, #1
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	f000 f8ad 	bl	80042c2 <lis2mdl_write_reg>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 800416e:	f04f 33ff 	mov.w	r3, #4294967295
 8004172:	e08a      	b.n	800428a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f103 001c 	add.w	r0, r3, #28
 800417a:	f107 021d 	add.w	r2, r7, #29
 800417e:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8004182:	2301      	movs	r3, #1
 8004184:	f000 f89d 	bl	80042c2 <lis2mdl_write_reg>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 800418e:	f04f 33ff 	mov.w	r3, #4294967295
 8004192:	e07a      	b.n	800428a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f103 001c 	add.w	r0, r3, #28
 800419a:	f107 0220 	add.w	r2, r7, #32
 800419e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80041a2:	2301      	movs	r3, #1
 80041a4:	f000 f88d 	bl	80042c2 <lis2mdl_write_reg>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 80041ae:	f04f 33ff 	mov.w	r3, #4294967295
 80041b2:	e06a      	b.n	800428a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f103 001c 	add.w	r0, r3, #28
 80041ba:	f107 021c 	add.w	r2, r7, #28
 80041be:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80041c2:	2301      	movs	r3, #1
 80041c4:	f000 f865 	bl	8004292 <lis2mdl_read_reg>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	e05a      	b.n	800428a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80041d4:	7f3b      	ldrb	r3, [r7, #28]
 80041d6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80041da:	429a      	cmp	r2, r3
 80041dc:	d102      	bne.n	80041e4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80041de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041e2:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f103 001c 	add.w	r0, r3, #28
 80041ea:	f107 021c 	add.w	r2, r7, #28
 80041ee:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80041f2:	2301      	movs	r3, #1
 80041f4:	f000 f865 	bl	80042c2 <lis2mdl_write_reg>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	e042      	b.n	800428a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f103 001c 	add.w	r0, r3, #28
 800420a:	f107 0214 	add.w	r2, r7, #20
 800420e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004212:	2306      	movs	r3, #6
 8004214:	f000 f83d 	bl	8004292 <lis2mdl_read_reg>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 800421e:	f04f 33ff 	mov.w	r3, #4294967295
 8004222:	e032      	b.n	800428a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f103 001c 	add.w	r0, r3, #28
 800422a:	f107 021b 	add.w	r2, r7, #27
 800422e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004232:	2301      	movs	r3, #1
 8004234:	f000 f82d 	bl	8004292 <lis2mdl_read_reg>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 800423e:	f04f 33ff 	mov.w	r3, #4294967295
 8004242:	e022      	b.n	800428a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  }
  while ((data & xlda) != xlda);
 8004244:	7efa      	ldrb	r2, [r7, #27]
 8004246:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800424a:	4013      	ands	r3, r2
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004252:	429a      	cmp	r2, r3
 8004254:	d1e6      	bne.n	8004224 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f103 001c 	add.w	r0, r3, #28
 800425c:	f107 021b 	add.w	r2, r7, #27
 8004260:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8004264:	2301      	movs	r3, #1
 8004266:	f000 f814 	bl	8004292 <lis2mdl_read_reg>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004270:	f04f 33ff 	mov.w	r3, #4294967295
 8004274:	e009      	b.n	800428a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  }
  while ((data & wr_once_done) != wr_once_done);
 8004276:	7efa      	ldrb	r2, [r7, #27]
 8004278:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800427c:	4013      	ands	r3, r2
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004284:	429a      	cmp	r2, r3
 8004286:	d1e6      	bne.n	8004256 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3730      	adds	r7, #48	; 0x30
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004292:	b590      	push	{r4, r7, lr}
 8004294:	b087      	sub	sp, #28
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	461a      	mov	r2, r3
 800429e:	460b      	mov	r3, r1
 80042a0:	72fb      	strb	r3, [r7, #11]
 80042a2:	4613      	mov	r3, r2
 80042a4:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	685c      	ldr	r4, [r3, #4]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6898      	ldr	r0, [r3, #8]
 80042ae:	893b      	ldrh	r3, [r7, #8]
 80042b0:	7af9      	ldrb	r1, [r7, #11]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	47a0      	blx	r4
 80042b6:	6178      	str	r0, [r7, #20]
  return ret;
 80042b8:	697b      	ldr	r3, [r7, #20]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd90      	pop	{r4, r7, pc}

080042c2 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80042c2:	b590      	push	{r4, r7, lr}
 80042c4:	b087      	sub	sp, #28
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	461a      	mov	r2, r3
 80042ce:	460b      	mov	r3, r1
 80042d0:	72fb      	strb	r3, [r7, #11]
 80042d2:	4613      	mov	r3, r2
 80042d4:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681c      	ldr	r4, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6898      	ldr	r0, [r3, #8]
 80042de:	893b      	ldrh	r3, [r7, #8]
 80042e0:	7af9      	ldrb	r1, [r7, #11]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	47a0      	blx	r4
 80042e6:	6178      	str	r0, [r7, #20]
  return ret;
 80042e8:	697b      	ldr	r3, [r7, #20]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd90      	pop	{r4, r7, pc}

080042f2 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	460b      	mov	r3, r1
 80042fc:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80042fe:	f107 0208 	add.w	r2, r7, #8
 8004302:	2301      	movs	r3, #1
 8004304:	2160      	movs	r1, #96	; 0x60
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff ffc3 	bl	8004292 <lis2mdl_read_reg>
 800430c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10f      	bne.n	8004334 <lis2mdl_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	b2da      	uxtb	r2, r3
 800431c:	7a3b      	ldrb	r3, [r7, #8]
 800431e:	f362 0301 	bfi	r3, r2, #0, #2
 8004322:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004324:	f107 0208 	add.w	r2, r7, #8
 8004328:	2301      	movs	r3, #1
 800432a:	2160      	movs	r1, #96	; 0x60
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ffc8 	bl	80042c2 <lis2mdl_write_reg>
 8004332:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004334:	68fb      	ldr	r3, [r7, #12]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800434a:	f107 0208 	add.w	r2, r7, #8
 800434e:	2301      	movs	r3, #1
 8004350:	2160      	movs	r1, #96	; 0x60
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff ff9d 	bl	8004292 <lis2mdl_read_reg>
 8004358:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10f      	bne.n	8004380 <lis2mdl_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	b2da      	uxtb	r2, r3
 8004368:	7a3b      	ldrb	r3, [r7, #8]
 800436a:	f362 0383 	bfi	r3, r2, #2, #2
 800436e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004370:	f107 0208 	add.w	r2, r7, #8
 8004374:	2301      	movs	r3, #1
 8004376:	2160      	movs	r1, #96	; 0x60
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ffa2 	bl	80042c2 <lis2mdl_write_reg>
 800437e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004380:	68fb      	ldr	r3, [r7, #12]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004396:	f107 0208 	add.w	r2, r7, #8
 800439a:	2301      	movs	r3, #1
 800439c:	2160      	movs	r1, #96	; 0x60
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff ff77 	bl	8004292 <lis2mdl_read_reg>
 80043a4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 80043a6:	7a3b      	ldrb	r3, [r7, #8]
 80043a8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d81a      	bhi.n	80043e8 <lis2mdl_data_rate_get+0x5c>
 80043b2:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <lis2mdl_data_rate_get+0x2c>)
 80043b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b8:	080043c9 	.word	0x080043c9
 80043bc:	080043d1 	.word	0x080043d1
 80043c0:	080043d9 	.word	0x080043d9
 80043c4:	080043e1 	.word	0x080043e1
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2200      	movs	r2, #0
 80043cc:	701a      	strb	r2, [r3, #0]
      break;
 80043ce:	e00f      	b.n	80043f0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
      break;
 80043d6:	e00b      	b.n	80043f0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2202      	movs	r2, #2
 80043dc:	701a      	strb	r2, [r3, #0]
      break;
 80043de:	e007      	b.n	80043f0 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2203      	movs	r2, #3
 80043e4:	701a      	strb	r2, [r3, #0]
      break;
 80043e6:	e003      	b.n	80043f0 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
      break;
 80043ee:	bf00      	nop
  }

  return ret;
 80043f0:	68fb      	ldr	r3, [r7, #12]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop

080043fc <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004408:	f107 0208 	add.w	r2, r7, #8
 800440c:	2301      	movs	r3, #1
 800440e:	2162      	movs	r1, #98	; 0x62
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ff3e 	bl	8004292 <lis2mdl_read_reg>
 8004416:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <lis2mdl_block_data_update_set+0x42>
    reg.bdu = val;
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	b2da      	uxtb	r2, r3
 8004426:	7a3b      	ldrb	r3, [r7, #8]
 8004428:	f362 1304 	bfi	r3, r2, #4, #1
 800442c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800442e:	f107 0208 	add.w	r2, r7, #8
 8004432:	2301      	movs	r3, #1
 8004434:	2162      	movs	r1, #98	; 0x62
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff ff43 	bl	80042c2 <lis2mdl_write_reg>
 800443c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800443e:	68fb      	ldr	r3, [r7, #12]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004452:	f107 020c 	add.w	r2, r7, #12
 8004456:	2306      	movs	r3, #6
 8004458:	2168      	movs	r1, #104	; 0x68
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff ff19 	bl	8004292 <lis2mdl_read_reg>
 8004460:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004462:	7b7b      	ldrb	r3, [r7, #13]
 8004464:	b21a      	sxth	r2, r3
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004470:	b29b      	uxth	r3, r3
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	b29a      	uxth	r2, r3
 8004476:	7b3b      	ldrb	r3, [r7, #12]
 8004478:	b29b      	uxth	r3, r3
 800447a:	4413      	add	r3, r2
 800447c:	b29b      	uxth	r3, r3
 800447e:	b21a      	sxth	r2, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004484:	7bfa      	ldrb	r2, [r7, #15]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	3302      	adds	r3, #2
 800448a:	b212      	sxth	r2, r2
 800448c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	3302      	adds	r3, #2
 8004492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004496:	b29b      	uxth	r3, r3
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	b29a      	uxth	r2, r3
 800449c:	7bbb      	ldrb	r3, [r7, #14]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	3302      	adds	r3, #2
 80044a8:	b212      	sxth	r2, r2
 80044aa:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80044ac:	7c7a      	ldrb	r2, [r7, #17]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	3304      	adds	r3, #4
 80044b2:	b212      	sxth	r2, r2
 80044b4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	3304      	adds	r3, #4
 80044ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	7c3b      	ldrb	r3, [r7, #16]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	4413      	add	r3, r2
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	3304      	adds	r3, #4
 80044d0:	b212      	sxth	r2, r2
 80044d2:	801a      	strh	r2, [r3, #0]
  return ret;
 80044d4:	697b      	ldr	r3, [r7, #20]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80044e8:	2301      	movs	r3, #1
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	214f      	movs	r1, #79	; 0x4f
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fecf 	bl	8004292 <lis2mdl_read_reg>
 80044f4:	60f8      	str	r0, [r7, #12]
  return ret;
 80044f6:	68fb      	ldr	r3, [r7, #12]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800450c:	f107 0208 	add.w	r2, r7, #8
 8004510:	2301      	movs	r3, #1
 8004512:	2162      	movs	r1, #98	; 0x62
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff febc 	bl	8004292 <lis2mdl_read_reg>
 800451a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10f      	bne.n	8004542 <lis2mdl_self_test_set+0x42>
    reg.self_test = val;
 8004522:	78fb      	ldrb	r3, [r7, #3]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	b2da      	uxtb	r2, r3
 800452a:	7a3b      	ldrb	r3, [r7, #8]
 800452c:	f362 0341 	bfi	r3, r2, #1, #1
 8004530:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004532:	f107 0208 	add.w	r2, r7, #8
 8004536:	2301      	movs	r3, #1
 8004538:	2162      	movs	r1, #98	; 0x62
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fec1 	bl	80042c2 <lis2mdl_write_reg>
 8004540:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004542:	68fb      	ldr	r3, [r7, #12]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004558:	f107 0208 	add.w	r2, r7, #8
 800455c:	2301      	movs	r3, #1
 800455e:	2162      	movs	r1, #98	; 0x62
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff fe96 	bl	8004292 <lis2mdl_read_reg>
 8004566:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <lis2mdl_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 800456e:	78fb      	ldrb	r3, [r7, #3]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	b2da      	uxtb	r2, r3
 8004576:	7a3b      	ldrb	r3, [r7, #8]
 8004578:	f362 1345 	bfi	r3, r2, #5, #1
 800457c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800457e:	f107 0208 	add.w	r2, r7, #8
 8004582:	2301      	movs	r3, #1
 8004584:	2162      	movs	r1, #98	; 0x62
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fe9b 	bl	80042c2 <lis2mdl_write_reg>
 800458c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800458e:	68fb      	ldr	r3, [r7, #12]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <LSM6DSO_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d103      	bne.n	80045b4 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80045ac:	f04f 33ff 	mov.w	r3, #4294967295
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	e04d      	b.n	8004650 <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	7b1a      	ldrb	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	695a      	ldr	r2, [r3, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	699a      	ldr	r2, [r3, #24]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a1b      	ldr	r2, [pc, #108]	; (800465c <LSM6DSO_RegisterBusIO+0xc4>)
 80045f0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1a      	ldr	r2, [pc, #104]	; (8004660 <LSM6DSO_RegisterBusIO+0xc8>)
 80045f6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8004606:	f04f 33ff 	mov.w	r3, #4294967295
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e020      	b.n	8004650 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4798      	blx	r3
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 800461a:	f04f 33ff 	mov.w	r3, #4294967295
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e016      	b.n	8004650 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d112      	bne.n	8004650 <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10d      	bne.n	8004650 <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004634:	230c      	movs	r3, #12
 8004636:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8004638:	7afb      	ldrb	r3, [r7, #11]
 800463a:	461a      	mov	r2, r3
 800463c:	2112      	movs	r1, #18
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 ff59 	bl	80054f6 <LSM6DSO_Write_Reg>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 800464a:	f04f 33ff 	mov.w	r3, #4294967295
 800464e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004650:	68fb      	ldr	r3, [r7, #12]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	08005999 	.word	0x08005999
 8004660:	080059cf 	.word	0x080059cf

08004664 <LSM6DSO_Init>:
 * @brief  Initialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	331c      	adds	r3, #28
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	4618      	mov	r0, r3
 8004674:	f001 fe97 	bl	80063a6 <lsm6dso_i3c_disable_set>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 800467e:	f04f 33ff 	mov.w	r3, #4294967295
 8004682:	e060      	b.n	8004746 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	331c      	adds	r3, #28
 8004688:	2101      	movs	r1, #1
 800468a:	4618      	mov	r0, r3
 800468c:	f001 fe65 	bl	800635a <lsm6dso_auto_increment_set>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8004696:	f04f 33ff 	mov.w	r3, #4294967295
 800469a:	e054      	b.n	8004746 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	331c      	adds	r3, #28
 80046a0:	2101      	movs	r1, #1
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fd66 	bl	8006174 <lsm6dso_block_data_update_set>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 80046ae:	f04f 33ff 	mov.w	r3, #4294967295
 80046b2:	e048      	b.n	8004746 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	331c      	adds	r3, #28
 80046b8:	2100      	movs	r1, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 feb9 	bl	8006432 <lsm6dso_fifo_mode_set>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	e03c      	b.n	8004746 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2204      	movs	r2, #4
 80046d0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	331c      	adds	r3, #28
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 fa20 	bl	8005b20 <lsm6dso_xl_data_rate_set>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ea:	e02c      	b.n	8004746 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	331c      	adds	r3, #28
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f001 f9b6 	bl	8005a64 <lsm6dso_xl_full_scale_set>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 80046fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004702:	e020      	b.n	8004746 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2204      	movs	r2, #4
 8004708:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	331c      	adds	r3, #28
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f001 fbd0 	bl	8005eb8 <lsm6dso_gy_data_rate_set>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 800471e:	f04f 33ff 	mov.w	r3, #4294967295
 8004722:	e010      	b.n	8004746 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	331c      	adds	r3, #28
 8004728:	2106      	movs	r1, #6
 800472a:	4618      	mov	r0, r3
 800472c:	f001 fb5c 	bl	8005de8 <lsm6dso_gy_full_scale_set>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8004736:	f04f 33ff 	mov.w	r3, #4294967295
 800473a:	e004      	b.n	8004746 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <LSM6DSO_DeInit>:
 * @brief  Deinitialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f888 	bl	800486c <LSM6DSO_ACC_Disable>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8004762:	f04f 33ff 	mov.w	r3, #4294967295
 8004766:	e015      	b.n	8004794 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fc2e 	bl	8004fca <LSM6DSO_GYRO_Disable>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8004774:	f04f 33ff 	mov.w	r3, #4294967295
 8004778:	e00c      	b.n	8004794 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <LSM6DSO_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	331c      	adds	r3, #28
 80047aa:	6839      	ldr	r1, [r7, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 fdc3 	bl	8006338 <lsm6dso_device_id_get>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295
 80047bc:	e000      	b.n	80047c0 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <LSM6DSO_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSO sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2201      	movs	r2, #1
 80047d6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2201      	movs	r2, #1
 80047dc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2200      	movs	r2, #0
 80047e2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2200      	movs	r2, #0
 80047e8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80047f0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2210      	movs	r2, #16
 80047f6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	4a07      	ldr	r2, [pc, #28]	; (8004820 <LSM6DSO_GetCapabilities+0x58>)
 8004802:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	4a06      	ldr	r2, [pc, #24]	; (8004820 <LSM6DSO_GetCapabilities+0x58>)
 8004808:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	45d02000 	.word	0x45d02000

08004824 <LSM6DSO_ACC_Enable>:
 * @brief  Enable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	e014      	b.n	8004864 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f103 021c 	add.w	r2, r3, #28
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f001 f969 	bl	8005b20 <lsm6dso_xl_data_rate_set>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004854:	f04f 33ff 	mov.w	r3, #4294967295
 8004858:	e004      	b.n	8004864 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <LSM6DSO_ACC_Disable>:
 * @brief  Disable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e01f      	b.n	80048c2 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f103 021c 	add.w	r2, r3, #28
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	332b      	adds	r3, #43	; 0x2b
 800488c:	4619      	mov	r1, r3
 800488e:	4610      	mov	r0, r2
 8004890:	f001 fa42 	bl	8005d18 <lsm6dso_xl_data_rate_get>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800489a:	f04f 33ff 	mov.w	r3, #4294967295
 800489e:	e010      	b.n	80048c2 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	331c      	adds	r3, #28
 80048a4:	2100      	movs	r1, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f001 f93a 	bl	8005b20 <lsm6dso_xl_data_rate_set>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80048b2:	f04f 33ff 	mov.w	r3, #4294967295
 80048b6:	e004      	b.n	80048c2 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <LSM6DSO_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	331c      	adds	r3, #28
 80048de:	f107 020b 	add.w	r2, r7, #11
 80048e2:	4611      	mov	r1, r2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f001 f8e3 	bl	8005ab0 <lsm6dso_xl_full_scale_get>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80048f0:	f04f 33ff 	mov.w	r3, #4294967295
 80048f4:	e023      	b.n	800493e <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80048f6:	7afb      	ldrb	r3, [r7, #11]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d81b      	bhi.n	8004934 <LSM6DSO_ACC_GetSensitivity+0x68>
 80048fc:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <LSM6DSO_ACC_GetSensitivity+0x38>)
 80048fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004902:	bf00      	nop
 8004904:	08004915 	.word	0x08004915
 8004908:	0800492d 	.word	0x0800492d
 800490c:	0800491d 	.word	0x0800491d
 8004910:	08004925 	.word	0x08004925
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	4a0c      	ldr	r2, [pc, #48]	; (8004948 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8004918:	601a      	str	r2, [r3, #0]
      break;
 800491a:	e00f      	b.n	800493c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	4a0b      	ldr	r2, [pc, #44]	; (800494c <LSM6DSO_ACC_GetSensitivity+0x80>)
 8004920:	601a      	str	r2, [r3, #0]
      break;
 8004922:	e00b      	b.n	800493c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	4a0a      	ldr	r2, [pc, #40]	; (8004950 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8004928:	601a      	str	r2, [r3, #0]
      break;
 800492a:	e007      	b.n	800493c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	4a09      	ldr	r2, [pc, #36]	; (8004954 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8004930:	601a      	str	r2, [r3, #0]
      break;
 8004932:	e003      	b.n	800493c <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004934:	f04f 33ff 	mov.w	r3, #4294967295
 8004938:	60fb      	str	r3, [r7, #12]
      break;
 800493a:	bf00      	nop
  }

  return ret;
 800493c:	68fb      	ldr	r3, [r7, #12]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	3d79db23 	.word	0x3d79db23
 800494c:	3df9db23 	.word	0x3df9db23
 8004950:	3e79db23 	.word	0x3e79db23
 8004954:	3ef9db23 	.word	0x3ef9db23

08004958 <LSM6DSO_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	331c      	adds	r3, #28
 800496a:	f107 020b 	add.w	r2, r7, #11
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f001 f9d1 	bl	8005d18 <lsm6dso_xl_data_rate_get>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800497c:	f04f 33ff 	mov.w	r3, #4294967295
 8004980:	e054      	b.n	8004a2c <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004982:	7afb      	ldrb	r3, [r7, #11]
 8004984:	2b0b      	cmp	r3, #11
 8004986:	d84c      	bhi.n	8004a22 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8004988:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800498a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498e:	bf00      	nop
 8004990:	080049c1 	.word	0x080049c1
 8004994:	080049d3 	.word	0x080049d3
 8004998:	080049db 	.word	0x080049db
 800499c:	080049e3 	.word	0x080049e3
 80049a0:	080049eb 	.word	0x080049eb
 80049a4:	080049f3 	.word	0x080049f3
 80049a8:	080049fb 	.word	0x080049fb
 80049ac:	08004a03 	.word	0x08004a03
 80049b0:	08004a0b 	.word	0x08004a0b
 80049b4:	08004a13 	.word	0x08004a13
 80049b8:	08004a1b 	.word	0x08004a1b
 80049bc:	080049cb 	.word	0x080049cb
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
      break;
 80049c8:	e02f      	b.n	8004a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	4a19      	ldr	r2, [pc, #100]	; (8004a34 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80049ce:	601a      	str	r2, [r3, #0]
      break;
 80049d0:	e02b      	b.n	8004a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	4a18      	ldr	r2, [pc, #96]	; (8004a38 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80049d6:	601a      	str	r2, [r3, #0]
      break;
 80049d8:	e027      	b.n	8004a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80049de:	601a      	str	r2, [r3, #0]
      break;
 80049e0:	e023      	b.n	8004a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80049e6:	601a      	str	r2, [r3, #0]
      break;
 80049e8:	e01f      	b.n	8004a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 80049ee:	601a      	str	r2, [r3, #0]
      break;
 80049f0:	e01b      	b.n	8004a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80049f6:	601a      	str	r2, [r3, #0]
      break;
 80049f8:	e017      	b.n	8004a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	4a13      	ldr	r2, [pc, #76]	; (8004a4c <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80049fe:	601a      	str	r2, [r3, #0]
      break;
 8004a00:	e013      	b.n	8004a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	4a12      	ldr	r2, [pc, #72]	; (8004a50 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8004a06:	601a      	str	r2, [r3, #0]
      break;
 8004a08:	e00f      	b.n	8004a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	4a11      	ldr	r2, [pc, #68]	; (8004a54 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8004a0e:	601a      	str	r2, [r3, #0]
      break;
 8004a10:	e00b      	b.n	8004a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	4a10      	ldr	r2, [pc, #64]	; (8004a58 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8004a16:	601a      	str	r2, [r3, #0]
      break;
 8004a18:	e007      	b.n	8004a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	4a0f      	ldr	r2, [pc, #60]	; (8004a5c <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8004a1e:	601a      	str	r2, [r3, #0]
      break;
 8004a20:	e003      	b.n	8004a2a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8004a22:	f04f 33ff 	mov.w	r3, #4294967295
 8004a26:	60fb      	str	r3, [r7, #12]
      break;
 8004a28:	bf00      	nop
  }

  return ret;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	3fcccccd 	.word	0x3fcccccd
 8004a38:	41480000 	.word	0x41480000
 8004a3c:	41d00000 	.word	0x41d00000
 8004a40:	42500000 	.word	0x42500000
 8004a44:	42d00000 	.word	0x42d00000
 8004a48:	43500000 	.word	0x43500000
 8004a4c:	43d08000 	.word	0x43d08000
 8004a50:	44504000 	.word	0x44504000
 8004a54:	44d06000 	.word	0x44d06000
 8004a58:	45505000 	.word	0x45505000
 8004a5c:	45d05800 	.word	0x45d05800

08004a60 <LSM6DSO_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	ed97 0a00 	vldr	s0, [r7]
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f806 	bl	8004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8004a78:	4603      	mov	r3, r0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the accelerometer operating mode
 * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08c      	sub	sp, #48	; 0x30
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a90:	460b      	mov	r3, r1
 8004a92:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  switch (Mode)
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	f000 80ea 	beq.w	8004c78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	f300 8163 	bgt.w	8004d70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d074      	beq.n	8004b9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8004ab2:	e15d      	b.n	8004d70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f103 001c 	add.w	r0, r3, #28
 8004aba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004abe:	2301      	movs	r3, #1
 8004ac0:	2114      	movs	r1, #20
 8004ac2:	f000 ff9f 	bl	8005a04 <lsm6dso_read_reg>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8004acc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad0:	e16c      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004ad2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ad6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d025      	beq.n	8004b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d10b      	bne.n	8004b02 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	331c      	adds	r3, #28
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 f815 	bl	8005b20 <lsm6dso_xl_data_rate_set>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8004afc:	f04f 33ff 	mov.w	r3, #4294967295
 8004b00:	e154      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004b02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b06:	f36f 13c7 	bfc	r3, #7, #1
 8004b0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f103 001c 	add.w	r0, r3, #28
 8004b14:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004b18:	2301      	movs	r3, #1
 8004b1a:	2114      	movs	r1, #20
 8004b1c:	f000 ff8a 	bl	8005a34 <lsm6dso_write_reg>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2a:	e13f      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f103 001c 	add.w	r0, r3, #28
 8004b32:	f107 0220 	add.w	r2, r7, #32
 8004b36:	2301      	movs	r3, #1
 8004b38:	2115      	movs	r1, #21
 8004b3a:	f000 ff63 	bl	8005a04 <lsm6dso_read_reg>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8004b44:	f04f 33ff 	mov.w	r3, #4294967295
 8004b48:	e130      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004b4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d014      	beq.n	8004b82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8004b58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b5c:	f36f 1304 	bfc	r3, #4, #1
 8004b60:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f103 001c 	add.w	r0, r3, #28
 8004b6a:	f107 0220 	add.w	r2, r7, #32
 8004b6e:	2301      	movs	r3, #1
 8004b70:	2115      	movs	r1, #21
 8004b72:	f000 ff5f 	bl	8005a34 <lsm6dso_write_reg>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8004b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b80:	e114      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8004b82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004b86:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b92:	d400      	bmi.n	8004b96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8004b94:	e0f0      	b.n	8004d78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8004b96:	4b87      	ldr	r3, [pc, #540]	; (8004db4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b9a:	e0ed      	b.n	8004d78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f103 001c 	add.w	r0, r3, #28
 8004ba2:	f107 021c 	add.w	r2, r7, #28
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	2114      	movs	r1, #20
 8004baa:	f000 ff2b 	bl	8005a04 <lsm6dso_read_reg>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8004bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb8:	e0f8      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8004bba:	7f3b      	ldrb	r3, [r7, #28]
 8004bbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d023      	beq.n	8004c0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d10b      	bne.n	8004be8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	331c      	adds	r3, #28
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 ffa2 	bl	8005b20 <lsm6dso_xl_data_rate_set>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8004be2:	f04f 33ff 	mov.w	r3, #4294967295
 8004be6:	e0e1      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8004be8:	7f3b      	ldrb	r3, [r7, #28]
 8004bea:	f36f 13c7 	bfc	r3, #7, #1
 8004bee:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f103 001c 	add.w	r0, r3, #28
 8004bf6:	f107 021c 	add.w	r2, r7, #28
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	2114      	movs	r1, #20
 8004bfe:	f000 ff19 	bl	8005a34 <lsm6dso_write_reg>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8004c08:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0c:	e0ce      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f103 001c 	add.w	r0, r3, #28
 8004c14:	f107 0218 	add.w	r2, r7, #24
 8004c18:	2301      	movs	r3, #1
 8004c1a:	2115      	movs	r1, #21
 8004c1c:	f000 fef2 	bl	8005a04 <lsm6dso_read_reg>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8004c26:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2a:	e0bf      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8004c2c:	7e3b      	ldrb	r3, [r7, #24]
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d112      	bne.n	8004c5e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8004c38:	7e3b      	ldrb	r3, [r7, #24]
 8004c3a:	f043 0310 	orr.w	r3, r3, #16
 8004c3e:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f103 001c 	add.w	r0, r3, #28
 8004c46:	f107 0218 	add.w	r2, r7, #24
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	2115      	movs	r1, #21
 8004c4e:	f000 fef1 	bl	8005a34 <lsm6dso_write_reg>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8004c58:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5c:	e0a6      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004c5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004c62:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004db8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6e:	dc00      	bgt.n	8004c72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8004c70:	e082      	b.n	8004d78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004c72:	4b52      	ldr	r3, [pc, #328]	; (8004dbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c76:	e07f      	b.n	8004d78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f103 001c 	add.w	r0, r3, #28
 8004c7e:	f107 0210 	add.w	r2, r7, #16
 8004c82:	2301      	movs	r3, #1
 8004c84:	2115      	movs	r1, #21
 8004c86:	f000 febd 	bl	8005a04 <lsm6dso_read_reg>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8004c90:	f04f 33ff 	mov.w	r3, #4294967295
 8004c94:	e08a      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8004c96:	7c3b      	ldrb	r3, [r7, #16]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d012      	beq.n	8004cc8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8004ca2:	7c3b      	ldrb	r3, [r7, #16]
 8004ca4:	f36f 1304 	bfc	r3, #4, #1
 8004ca8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f103 001c 	add.w	r0, r3, #28
 8004cb0:	f107 0210 	add.w	r2, r7, #16
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	2115      	movs	r1, #21
 8004cb8:	f000 febc 	bl	8005a34 <lsm6dso_write_reg>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8004cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc6:	e071      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d108      	bne.n	8004ce4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f979 	bl	8004fca <LSM6DSO_GYRO_Disable>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce2:	e063      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f103 001c 	add.w	r0, r3, #28
 8004cea:	f107 0214 	add.w	r2, r7, #20
 8004cee:	2301      	movs	r3, #1
 8004cf0:	2114      	movs	r1, #20
 8004cf2:	f000 fe87 	bl	8005a04 <lsm6dso_read_reg>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8004cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004d00:	e054      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8004d02:	7d3b      	ldrb	r3, [r7, #20]
 8004d04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d123      	bne.n	8004d56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d10b      	bne.n	8004d30 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	331c      	adds	r3, #28
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fefe 	bl	8005b20 <lsm6dso_xl_data_rate_set>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8004d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2e:	e03d      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8004d30:	7d3b      	ldrb	r3, [r7, #20]
 8004d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d36:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f103 001c 	add.w	r0, r3, #28
 8004d3e:	f107 0214 	add.w	r2, r7, #20
 8004d42:	2301      	movs	r3, #1
 8004d44:	2114      	movs	r1, #20
 8004d46:	f000 fe75 	bl	8005a34 <lsm6dso_write_reg>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8004d50:	f04f 33ff 	mov.w	r3, #4294967295
 8004d54:	e02a      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004d56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004d5a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004db8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	dc00      	bgt.n	8004d6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8004d68:	e006      	b.n	8004d78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8004d6a:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6e:	e003      	b.n	8004d78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004d70:	f04f 33ff 	mov.w	r3, #4294967295
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004d76:	bf00      	nop
  }

  if(ret == LSM6DSO_ERROR)
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	d102      	bne.n	8004d86 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8004d80:	f04f 33ff 	mov.w	r3, #4294967295
 8004d84:	e012      	b.n	8004dac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d106      	bne.n	8004d9e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004d90:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fbc9 	bl	800552c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8004d9a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004d9c:	e005      	b.n	8004daa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004d9e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fc5a 	bl	800565c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8004da8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3730      	adds	r7, #48	; 0x30
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	41480000 	.word	0x41480000
 8004db8:	43500000 	.word	0x43500000
 8004dbc:	43500000 	.word	0x43500000

08004dc0 <LSM6DSO_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	331c      	adds	r3, #28
 8004dd2:	f107 020b 	add.w	r2, r7, #11
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fe69 	bl	8005ab0 <lsm6dso_xl_full_scale_get>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8004de4:	f04f 33ff 	mov.w	r3, #4294967295
 8004de8:	e023      	b.n	8004e32 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004dea:	7afb      	ldrb	r3, [r7, #11]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d81b      	bhi.n	8004e28 <LSM6DSO_ACC_GetFullScale+0x68>
 8004df0:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <LSM6DSO_ACC_GetFullScale+0x38>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e09 	.word	0x08004e09
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	08004e19 	.word	0x08004e19
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	601a      	str	r2, [r3, #0]
      break;
 8004e0e:	e00f      	b.n	8004e30 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2204      	movs	r2, #4
 8004e14:	601a      	str	r2, [r3, #0]
      break;
 8004e16:	e00b      	b.n	8004e30 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2208      	movs	r2, #8
 8004e1c:	601a      	str	r2, [r3, #0]
      break;
 8004e1e:	e007      	b.n	8004e30 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2210      	movs	r2, #16
 8004e24:	601a      	str	r2, [r3, #0]
      break;
 8004e26:	e003      	b.n	8004e30 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8004e28:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2c:	60fb      	str	r3, [r7, #12]
      break;
 8004e2e:	bf00      	nop
  }

  return ret;
 8004e30:	68fb      	ldr	r3, [r7, #12]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop

08004e3c <LSM6DSO_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	dd0b      	ble.n	8004e64 <LSM6DSO_ACC_SetFullScale+0x28>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	dd06      	ble.n	8004e60 <LSM6DSO_ACC_SetFullScale+0x24>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	dc01      	bgt.n	8004e5c <LSM6DSO_ACC_SetFullScale+0x20>
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e004      	b.n	8004e66 <LSM6DSO_ACC_SetFullScale+0x2a>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e002      	b.n	8004e66 <LSM6DSO_ACC_SetFullScale+0x2a>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e000      	b.n	8004e66 <LSM6DSO_ACC_SetFullScale+0x2a>
 8004e64:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8004e66:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	331c      	adds	r3, #28
 8004e6c:	7bfa      	ldrb	r2, [r7, #15]
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fdf7 	bl	8005a64 <lsm6dso_xl_full_scale_set>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8004e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e80:	e000      	b.n	8004e84 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <LSM6DSO_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	331c      	adds	r3, #28
 8004e9a:	f107 0208 	add.w	r2, r7, #8
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 f9d8 	bl	8006256 <lsm6dso_acceleration_raw_get>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004eac:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb0:	e00c      	b.n	8004ecc <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004eb2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004eba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004ec2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <LSM6DSO_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	331c      	adds	r3, #28
 8004ee8:	f107 0210 	add.w	r2, r7, #16
 8004eec:	4611      	mov	r1, r2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 f9b1 	bl	8006256 <lsm6dso_acceleration_raw_get>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295
 8004efe:	e03c      	b.n	8004f7a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004f00:	f107 030c 	add.w	r3, r7, #12
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fce0 	bl	80048cc <LSM6DSO_ACC_GetSensitivity>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8004f12:	f04f 33ff 	mov.w	r3, #4294967295
 8004f16:	e030      	b.n	8004f7a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004f18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004f1c:	ee07 3a90 	vmov	s15, r3
 8004f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f24:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f30:	ee17 2a90 	vmov	r2, s15
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004f38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f3c:	ee07 3a90 	vmov	s15, r3
 8004f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f50:	ee17 2a90 	vmov	r2, s15
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004f58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f5c:	ee07 3a90 	vmov	s15, r3
 8004f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f64:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f70:	ee17 2a90 	vmov	r2, s15
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <LSM6DSO_GYRO_Enable>:
 * @brief  Enable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b082      	sub	sp, #8
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	e014      	b.n	8004fc2 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f103 021c 	add.w	r2, r3, #28
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	f000 ff86 	bl	8005eb8 <lsm6dso_gy_data_rate_set>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb6:	e004      	b.n	8004fc2 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <LSM6DSO_GYRO_Disable>:
 * @brief  Disable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e01f      	b.n	8005020 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f103 021c 	add.w	r2, r3, #28
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	332c      	adds	r3, #44	; 0x2c
 8004fea:	4619      	mov	r1, r3
 8004fec:	4610      	mov	r0, r2
 8004fee:	f001 f85f 	bl	80060b0 <lsm6dso_gy_data_rate_get>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8004ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffc:	e010      	b.n	8005020 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	331c      	adds	r3, #28
 8005002:	2100      	movs	r1, #0
 8005004:	4618      	mov	r0, r3
 8005006:	f000 ff57 	bl	8005eb8 <lsm6dso_gy_data_rate_set>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005010:	f04f 33ff 	mov.w	r3, #4294967295
 8005014:	e004      	b.n	8005020 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <LSM6DSO_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	331c      	adds	r3, #28
 800503a:	f107 020b 	add.w	r2, r7, #11
 800503e:	4611      	mov	r1, r2
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fef7 	bl	8005e34 <lsm6dso_gy_full_scale_get>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800504c:	f04f 33ff 	mov.w	r3, #4294967295
 8005050:	e02d      	b.n	80050ae <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005052:	7afb      	ldrb	r3, [r7, #11]
 8005054:	2b06      	cmp	r3, #6
 8005056:	d825      	bhi.n	80050a4 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005085 	.word	0x08005085
 8005064:	0800507d 	.word	0x0800507d
 8005068:	0800508d 	.word	0x0800508d
 800506c:	080050a5 	.word	0x080050a5
 8005070:	08005095 	.word	0x08005095
 8005074:	080050a5 	.word	0x080050a5
 8005078:	0800509d 	.word	0x0800509d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	4a0e      	ldr	r2, [pc, #56]	; (80050b8 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8005080:	601a      	str	r2, [r3, #0]
      break;
 8005082:	e013      	b.n	80050ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	4a0d      	ldr	r2, [pc, #52]	; (80050bc <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8005088:	601a      	str	r2, [r3, #0]
      break;
 800508a:	e00f      	b.n	80050ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4a0c      	ldr	r2, [pc, #48]	; (80050c0 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8005090:	601a      	str	r2, [r3, #0]
      break;
 8005092:	e00b      	b.n	80050ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	4a0b      	ldr	r2, [pc, #44]	; (80050c4 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8005098:	601a      	str	r2, [r3, #0]
      break;
 800509a:	e007      	b.n	80050ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80050a0:	601a      	str	r2, [r3, #0]
      break;
 80050a2:	e003      	b.n	80050ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	60fb      	str	r3, [r7, #12]
      break;
 80050aa:	bf00      	nop
  }

  return ret;
 80050ac:	68fb      	ldr	r3, [r7, #12]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	408c0000 	.word	0x408c0000
 80050bc:	410c0000 	.word	0x410c0000
 80050c0:	418c0000 	.word	0x418c0000
 80050c4:	420c0000 	.word	0x420c0000
 80050c8:	428c0000 	.word	0x428c0000

080050cc <LSM6DSO_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	331c      	adds	r3, #28
 80050de:	f107 020b 	add.w	r2, r7, #11
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 ffe3 	bl	80060b0 <lsm6dso_gy_data_rate_get>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80050f0:	f04f 33ff 	mov.w	r3, #4294967295
 80050f4:	e04e      	b.n	8005194 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80050f6:	7afb      	ldrb	r3, [r7, #11]
 80050f8:	2b0a      	cmp	r3, #10
 80050fa:	d846      	bhi.n	800518a <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80050fc:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	08005131 	.word	0x08005131
 8005108:	0800513b 	.word	0x0800513b
 800510c:	08005143 	.word	0x08005143
 8005110:	0800514b 	.word	0x0800514b
 8005114:	08005153 	.word	0x08005153
 8005118:	0800515b 	.word	0x0800515b
 800511c:	08005163 	.word	0x08005163
 8005120:	0800516b 	.word	0x0800516b
 8005124:	08005173 	.word	0x08005173
 8005128:	0800517b 	.word	0x0800517b
 800512c:	08005183 	.word	0x08005183
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
      break;
 8005138:	e02b      	b.n	8005192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	4a17      	ldr	r2, [pc, #92]	; (800519c <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 800513e:	601a      	str	r2, [r3, #0]
      break;
 8005140:	e027      	b.n	8005192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	4a16      	ldr	r2, [pc, #88]	; (80051a0 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8005146:	601a      	str	r2, [r3, #0]
      break;
 8005148:	e023      	b.n	8005192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 800514e:	601a      	str	r2, [r3, #0]
      break;
 8005150:	e01f      	b.n	8005192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8005156:	601a      	str	r2, [r3, #0]
      break;
 8005158:	e01b      	b.n	8005192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	4a13      	ldr	r2, [pc, #76]	; (80051ac <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 800515e:	601a      	str	r2, [r3, #0]
      break;
 8005160:	e017      	b.n	8005192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8005166:	601a      	str	r2, [r3, #0]
      break;
 8005168:	e013      	b.n	8005192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	4a11      	ldr	r2, [pc, #68]	; (80051b4 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 800516e:	601a      	str	r2, [r3, #0]
      break;
 8005170:	e00f      	b.n	8005192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8005176:	601a      	str	r2, [r3, #0]
      break;
 8005178:	e00b      	b.n	8005192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	4a0f      	ldr	r2, [pc, #60]	; (80051bc <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 800517e:	601a      	str	r2, [r3, #0]
      break;
 8005180:	e007      	b.n	8005192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	4a0e      	ldr	r2, [pc, #56]	; (80051c0 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8005186:	601a      	str	r2, [r3, #0]
      break;
 8005188:	e003      	b.n	8005192 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800518a:	f04f 33ff 	mov.w	r3, #4294967295
 800518e:	60fb      	str	r3, [r7, #12]
      break;
 8005190:	bf00      	nop
  }

  return ret;
 8005192:	68fb      	ldr	r3, [r7, #12]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	41480000 	.word	0x41480000
 80051a0:	41d00000 	.word	0x41d00000
 80051a4:	42500000 	.word	0x42500000
 80051a8:	42d00000 	.word	0x42d00000
 80051ac:	43500000 	.word	0x43500000
 80051b0:	43d08000 	.word	0x43d08000
 80051b4:	44504000 	.word	0x44504000
 80051b8:	44d06000 	.word	0x44d06000
 80051bc:	45505000 	.word	0x45505000
 80051c0:	45d05800 	.word	0x45d05800

080051c4 <LSM6DSO_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80051d0:	2100      	movs	r1, #0
 80051d2:	ed97 0a00 	vldr	s0, [r7]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f806 	bl	80051e8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80051dc:	4603      	mov	r3, r0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
 * @param  Odr the output data rate value to be set
 * @param  Mode the gyroscope operating mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80051f4:	460b      	mov	r3, r1
 80051f6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8005206:	2b01      	cmp	r3, #1
 8005208:	d028      	beq.n	800525c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800520a:	e05c      	b.n	80052c6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f103 001c 	add.w	r0, r3, #28
 8005212:	f107 0214 	add.w	r2, r7, #20
 8005216:	2301      	movs	r3, #1
 8005218:	2116      	movs	r1, #22
 800521a:	f000 fbf3 	bl	8005a04 <lsm6dso_read_reg>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8005224:	f04f 33ff 	mov.w	r3, #4294967295
 8005228:	e06c      	b.n	8005304 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800522a:	7d3b      	ldrb	r3, [r7, #20]
 800522c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d04b      	beq.n	80052ce <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8005236:	7d3b      	ldrb	r3, [r7, #20]
 8005238:	f36f 13c7 	bfc	r3, #7, #1
 800523c:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f103 001c 	add.w	r0, r3, #28
 8005244:	f107 0214 	add.w	r2, r7, #20
 8005248:	2301      	movs	r3, #1
 800524a:	2116      	movs	r1, #22
 800524c:	f000 fbf2 	bl	8005a34 <lsm6dso_write_reg>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d03b      	beq.n	80052ce <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8005256:	f04f 33ff 	mov.w	r3, #4294967295
 800525a:	e053      	b.n	8005304 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f103 001c 	add.w	r0, r3, #28
 8005262:	f107 0210 	add.w	r2, r7, #16
 8005266:	2301      	movs	r3, #1
 8005268:	2116      	movs	r1, #22
 800526a:	f000 fbcb 	bl	8005a04 <lsm6dso_read_reg>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8005274:	f04f 33ff 	mov.w	r3, #4294967295
 8005278:	e044      	b.n	8005304 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 800527a:	7c3b      	ldrb	r3, [r7, #16]
 800527c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d112      	bne.n	80052ac <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8005286:	7c3b      	ldrb	r3, [r7, #16]
 8005288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f103 001c 	add.w	r0, r3, #28
 8005294:	f107 0210 	add.w	r2, r7, #16
 8005298:	2301      	movs	r3, #1
 800529a:	2116      	movs	r1, #22
 800529c:	f000 fbca 	bl	8005a34 <lsm6dso_write_reg>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80052a6:	f04f 33ff 	mov.w	r3, #4294967295
 80052aa:	e02b      	b.n	8005304 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80052ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80052b0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800530c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80052b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052bc:	dc00      	bgt.n	80052c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 80052be:	e007      	b.n	80052d0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 80052c0:	4b13      	ldr	r3, [pc, #76]	; (8005310 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	e004      	b.n	80052d0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ca:	61fb      	str	r3, [r7, #28]
      break;
 80052cc:	e000      	b.n	80052d0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80052ce:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d6:	d102      	bne.n	80052de <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 80052d8:	f04f 33ff 	mov.w	r3, #4294967295
 80052dc:	e012      	b.n	8005304 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d106      	bne.n	80052f6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80052e8:	ed97 0a06 	vldr	s0, [r7, #24]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 fa45 	bl	800577c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80052f2:	61f8      	str	r0, [r7, #28]
 80052f4:	e005      	b.n	8005302 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80052f6:	ed97 0a06 	vldr	s0, [r7, #24]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 faca 	bl	8005894 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8005300:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8005302:	69fb      	ldr	r3, [r7, #28]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	43500000 	.word	0x43500000
 8005310:	43500000 	.word	0x43500000

08005314 <LSM6DSO_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	331c      	adds	r3, #28
 8005326:	f107 020b 	add.w	r2, r7, #11
 800532a:	4611      	mov	r1, r2
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fd81 	bl	8005e34 <lsm6dso_gy_full_scale_get>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8005338:	f04f 33ff 	mov.w	r3, #4294967295
 800533c:	e030      	b.n	80053a0 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800533e:	7afb      	ldrb	r3, [r7, #11]
 8005340:	2b06      	cmp	r3, #6
 8005342:	d828      	bhi.n	8005396 <LSM6DSO_GYRO_GetFullScale+0x82>
 8005344:	a201      	add	r2, pc, #4	; (adr r2, 800534c <LSM6DSO_GYRO_GetFullScale+0x38>)
 8005346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534a:	bf00      	nop
 800534c:	08005371 	.word	0x08005371
 8005350:	08005369 	.word	0x08005369
 8005354:	08005379 	.word	0x08005379
 8005358:	08005397 	.word	0x08005397
 800535c:	08005383 	.word	0x08005383
 8005360:	08005397 	.word	0x08005397
 8005364:	0800538d 	.word	0x0800538d
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	227d      	movs	r2, #125	; 0x7d
 800536c:	601a      	str	r2, [r3, #0]
      break;
 800536e:	e016      	b.n	800539e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	22fa      	movs	r2, #250	; 0xfa
 8005374:	601a      	str	r2, [r3, #0]
      break;
 8005376:	e012      	b.n	800539e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800537e:	601a      	str	r2, [r3, #0]
      break;
 8005380:	e00d      	b.n	800539e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005388:	601a      	str	r2, [r3, #0]
      break;
 800538a:	e008      	b.n	800539e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005392:	601a      	str	r2, [r3, #0]
      break;
 8005394:	e003      	b.n	800539e <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8005396:	f04f 33ff 	mov.w	r3, #4294967295
 800539a:	60fb      	str	r3, [r7, #12]
      break;
 800539c:	bf00      	nop
  }

  return ret;
 800539e:	68fb      	ldr	r3, [r7, #12]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <LSM6DSO_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b7d      	cmp	r3, #125	; 0x7d
 80053b6:	dd12      	ble.n	80053de <LSM6DSO_GYRO_SetFullScale+0x36>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2bfa      	cmp	r3, #250	; 0xfa
 80053bc:	dd0d      	ble.n	80053da <LSM6DSO_GYRO_SetFullScale+0x32>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053c4:	dd07      	ble.n	80053d6 <LSM6DSO_GYRO_SetFullScale+0x2e>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053cc:	dc01      	bgt.n	80053d2 <LSM6DSO_GYRO_SetFullScale+0x2a>
 80053ce:	2304      	movs	r3, #4
 80053d0:	e006      	b.n	80053e0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80053d2:	2306      	movs	r3, #6
 80053d4:	e004      	b.n	80053e0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e002      	b.n	80053e0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80053da:	2300      	movs	r3, #0
 80053dc:	e000      	b.n	80053e0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80053de:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80053e0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	331c      	adds	r3, #28
 80053e6:	7bfa      	ldrb	r2, [r7, #15]
 80053e8:	4611      	mov	r1, r2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fcfc 	bl	8005de8 <lsm6dso_gy_full_scale_set>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80053f6:	f04f 33ff 	mov.w	r3, #4294967295
 80053fa:	e000      	b.n	80053fe <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <LSM6DSO_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	331c      	adds	r3, #28
 8005414:	f107 0208 	add.w	r2, r7, #8
 8005418:	4611      	mov	r1, r2
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fed0 	bl	80061c0 <lsm6dso_angular_rate_raw_get>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8005426:	f04f 33ff 	mov.w	r3, #4294967295
 800542a:	e00c      	b.n	8005446 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800542c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005434:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800543c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <LSM6DSO_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b086      	sub	sp, #24
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	331c      	adds	r3, #28
 800545c:	f107 0210 	add.w	r2, r7, #16
 8005460:	4611      	mov	r1, r2
 8005462:	4618      	mov	r0, r3
 8005464:	f000 feac 	bl	80061c0 <lsm6dso_angular_rate_raw_get>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 800546e:	f04f 33ff 	mov.w	r3, #4294967295
 8005472:	e03c      	b.n	80054ee <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005474:	f107 030c 	add.w	r3, r7, #12
 8005478:	4619      	mov	r1, r3
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff fdd4 	bl	8005028 <LSM6DSO_GYRO_GetSensitivity>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
 800548a:	e030      	b.n	80054ee <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800548c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005498:	edd7 7a03 	vldr	s15, [r7, #12]
 800549c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054a4:	ee17 2a90 	vmov	r2, s15
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80054ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80054bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054c4:	ee17 2a90 	vmov	r2, s15
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80054cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80054dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054e4:	ee17 2a90 	vmov	r2, s15
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <LSM6DSO_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	460b      	mov	r3, r1
 8005500:	70fb      	strb	r3, [r7, #3]
 8005502:	4613      	mov	r3, r2
 8005504:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f103 001c 	add.w	r0, r3, #28
 800550c:	1cba      	adds	r2, r7, #2
 800550e:	78f9      	ldrb	r1, [r7, #3]
 8005510:	2301      	movs	r3, #1
 8005512:	f000 fa8f 	bl	8005a34 <lsm6dso_write_reg>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 800551c:	f04f 33ff 	mov.w	r3, #4294967295
 8005520:	e000      	b.n	8005524 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005538:	edd7 7a00 	vldr	s15, [r7]
 800553c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800563c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005548:	d801      	bhi.n	800554e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800554a:	230b      	movs	r3, #11
 800554c:	e063      	b.n	8005616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800554e:	edd7 7a00 	vldr	s15, [r7]
 8005552:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800555a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555e:	d801      	bhi.n	8005564 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005560:	2301      	movs	r3, #1
 8005562:	e058      	b.n	8005616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005564:	edd7 7a00 	vldr	s15, [r7]
 8005568:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800556c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005574:	d801      	bhi.n	800557a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005576:	2302      	movs	r3, #2
 8005578:	e04d      	b.n	8005616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800557a:	edd7 7a00 	vldr	s15, [r7]
 800557e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005640 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558a:	d801      	bhi.n	8005590 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 800558c:	2303      	movs	r3, #3
 800558e:	e042      	b.n	8005616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005590:	edd7 7a00 	vldr	s15, [r7]
 8005594:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005644 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8005598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800559c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a0:	d801      	bhi.n	80055a6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80055a2:	2304      	movs	r3, #4
 80055a4:	e037      	b.n	8005616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80055a6:	edd7 7a00 	vldr	s15, [r7]
 80055aa:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005648 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80055ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b6:	d801      	bhi.n	80055bc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80055b8:	2305      	movs	r3, #5
 80055ba:	e02c      	b.n	8005616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80055bc:	edd7 7a00 	vldr	s15, [r7]
 80055c0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800564c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80055c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055cc:	d801      	bhi.n	80055d2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80055ce:	2306      	movs	r3, #6
 80055d0:	e021      	b.n	8005616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80055d2:	edd7 7a00 	vldr	s15, [r7]
 80055d6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005650 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80055da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e2:	d801      	bhi.n	80055e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80055e4:	2307      	movs	r3, #7
 80055e6:	e016      	b.n	8005616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80055e8:	edd7 7a00 	vldr	s15, [r7]
 80055ec:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005654 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 80055f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f8:	d801      	bhi.n	80055fe <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80055fa:	2308      	movs	r3, #8
 80055fc:	e00b      	b.n	8005616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80055fe:	edd7 7a00 	vldr	s15, [r7]
 8005602:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005658 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8005606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560e:	d801      	bhi.n	8005614 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8005610:	2309      	movs	r3, #9
 8005612:	e000      	b.n	8005616 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005614:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8005616:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
          :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	331c      	adds	r3, #28
 800561c:	7bfa      	ldrb	r2, [r7, #15]
 800561e:	4611      	mov	r1, r2
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fa7d 	bl	8005b20 <lsm6dso_xl_data_rate_set>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 800562c:	f04f 33ff 	mov.w	r3, #4294967295
 8005630:	e000      	b.n	8005634 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	3fcccccd 	.word	0x3fcccccd
 8005640:	42500000 	.word	0x42500000
 8005644:	42d00000 	.word	0x42d00000
 8005648:	43500000 	.word	0x43500000
 800564c:	43d08000 	.word	0x43d08000
 8005650:	44504000 	.word	0x44504000
 8005654:	44d06000 	.word	0x44d06000
 8005658:	45505000 	.word	0x45505000

0800565c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005668:	edd7 7a00 	vldr	s15, [r7]
 800566c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800575c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005678:	d801      	bhi.n	800567e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800567a:	230b      	movs	r3, #11
 800567c:	e063      	b.n	8005746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800567e:	edd7 7a00 	vldr	s15, [r7]
 8005682:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800568a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568e:	d801      	bhi.n	8005694 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005690:	2301      	movs	r3, #1
 8005692:	e058      	b.n	8005746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005694:	edd7 7a00 	vldr	s15, [r7]
 8005698:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800569c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a4:	d801      	bhi.n	80056aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e04d      	b.n	8005746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80056aa:	edd7 7a00 	vldr	s15, [r7]
 80056ae:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005760 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80056b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ba:	d801      	bhi.n	80056c0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80056bc:	2303      	movs	r3, #3
 80056be:	e042      	b.n	8005746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80056c0:	edd7 7a00 	vldr	s15, [r7]
 80056c4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005764 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80056c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d0:	d801      	bhi.n	80056d6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80056d2:	2304      	movs	r3, #4
 80056d4:	e037      	b.n	8005746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80056d6:	edd7 7a00 	vldr	s15, [r7]
 80056da:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005768 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80056de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e6:	d801      	bhi.n	80056ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80056e8:	2305      	movs	r3, #5
 80056ea:	e02c      	b.n	8005746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80056ec:	edd7 7a00 	vldr	s15, [r7]
 80056f0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800576c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 80056f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fc:	d801      	bhi.n	8005702 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80056fe:	2306      	movs	r3, #6
 8005700:	e021      	b.n	8005746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005702:	edd7 7a00 	vldr	s15, [r7]
 8005706:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005770 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800570a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800570e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005712:	d801      	bhi.n	8005718 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005714:	2307      	movs	r3, #7
 8005716:	e016      	b.n	8005746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005718:	edd7 7a00 	vldr	s15, [r7]
 800571c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005774 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8005720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005728:	d801      	bhi.n	800572e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800572a:	2308      	movs	r3, #8
 800572c:	e00b      	b.n	8005746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800572e:	edd7 7a00 	vldr	s15, [r7]
 8005732:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005778 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8005736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800573a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573e:	d801      	bhi.n	8005744 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005740:	2309      	movs	r3, #9
 8005742:	e000      	b.n	8005746 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005744:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	3fcccccd 	.word	0x3fcccccd
 8005760:	42500000 	.word	0x42500000
 8005764:	42d00000 	.word	0x42d00000
 8005768:	43500000 	.word	0x43500000
 800576c:	43d08000 	.word	0x43d08000
 8005770:	44504000 	.word	0x44504000
 8005774:	44d06000 	.word	0x44d06000
 8005778:	45505000 	.word	0x45505000

0800577c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005788:	edd7 7a00 	vldr	s15, [r7]
 800578c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005798:	d801      	bhi.n	800579e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800579a:	2301      	movs	r3, #1
 800579c:	e058      	b.n	8005850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800579e:	edd7 7a00 	vldr	s15, [r7]
 80057a2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80057a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ae:	d801      	bhi.n	80057b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e04d      	b.n	8005850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80057b4:	edd7 7a00 	vldr	s15, [r7]
 80057b8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005878 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80057bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c4:	d801      	bhi.n	80057ca <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80057c6:	2303      	movs	r3, #3
 80057c8:	e042      	b.n	8005850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80057ca:	edd7 7a00 	vldr	s15, [r7]
 80057ce:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800587c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80057d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057da:	d801      	bhi.n	80057e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80057dc:	2304      	movs	r3, #4
 80057de:	e037      	b.n	8005850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80057e0:	edd7 7a00 	vldr	s15, [r7]
 80057e4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005880 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80057e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f0:	d801      	bhi.n	80057f6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80057f2:	2305      	movs	r3, #5
 80057f4:	e02c      	b.n	8005850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80057f6:	edd7 7a00 	vldr	s15, [r7]
 80057fa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005884 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80057fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005806:	d801      	bhi.n	800580c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005808:	2306      	movs	r3, #6
 800580a:	e021      	b.n	8005850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800580c:	edd7 7a00 	vldr	s15, [r7]
 8005810:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005888 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581c:	d801      	bhi.n	8005822 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800581e:	2307      	movs	r3, #7
 8005820:	e016      	b.n	8005850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005822:	edd7 7a00 	vldr	s15, [r7]
 8005826:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800588c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800582a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800582e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005832:	d801      	bhi.n	8005838 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005834:	2308      	movs	r3, #8
 8005836:	e00b      	b.n	8005850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005838:	edd7 7a00 	vldr	s15, [r7]
 800583c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005890 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005848:	d801      	bhi.n	800584e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800584a:	2309      	movs	r3, #9
 800584c:	e000      	b.n	8005850 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800584e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005850:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
          :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	331c      	adds	r3, #28
 8005856:	7bfa      	ldrb	r2, [r7, #15]
 8005858:	4611      	mov	r1, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fb2c 	bl	8005eb8 <lsm6dso_gy_data_rate_set>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8005866:	f04f 33ff 	mov.w	r3, #4294967295
 800586a:	e000      	b.n	800586e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	42500000 	.word	0x42500000
 800587c:	42d00000 	.word	0x42d00000
 8005880:	43500000 	.word	0x43500000
 8005884:	43d08000 	.word	0x43d08000
 8005888:	44504000 	.word	0x44504000
 800588c:	44d06000 	.word	0x44d06000
 8005890:	45505000 	.word	0x45505000

08005894 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80058a0:	edd7 7a00 	vldr	s15, [r7]
 80058a4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80058a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b0:	d801      	bhi.n	80058b6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e058      	b.n	8005968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80058b6:	edd7 7a00 	vldr	s15, [r7]
 80058ba:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80058be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c6:	d801      	bhi.n	80058cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e04d      	b.n	8005968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80058cc:	edd7 7a00 	vldr	s15, [r7]
 80058d0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800597c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80058d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058dc:	d801      	bhi.n	80058e2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80058de:	2303      	movs	r3, #3
 80058e0:	e042      	b.n	8005968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80058e2:	edd7 7a00 	vldr	s15, [r7]
 80058e6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005980 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80058ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f2:	d801      	bhi.n	80058f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80058f4:	2304      	movs	r3, #4
 80058f6:	e037      	b.n	8005968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80058f8:	edd7 7a00 	vldr	s15, [r7]
 80058fc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005984 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005908:	d801      	bhi.n	800590e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800590a:	2305      	movs	r3, #5
 800590c:	e02c      	b.n	8005968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800590e:	edd7 7a00 	vldr	s15, [r7]
 8005912:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005988 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800591a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800591e:	d801      	bhi.n	8005924 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005920:	2306      	movs	r3, #6
 8005922:	e021      	b.n	8005968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005924:	edd7 7a00 	vldr	s15, [r7]
 8005928:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800598c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800592c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005934:	d801      	bhi.n	800593a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005936:	2307      	movs	r3, #7
 8005938:	e016      	b.n	8005968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800593a:	edd7 7a00 	vldr	s15, [r7]
 800593e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005990 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800594a:	d801      	bhi.n	8005950 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800594c:	2308      	movs	r3, #8
 800594e:	e00b      	b.n	8005968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005950:	edd7 7a00 	vldr	s15, [r7]
 8005954:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005994 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005958:	eef4 7ac7 	vcmpe.f32	s15, s14
 800595c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005960:	d801      	bhi.n	8005966 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005962:	2309      	movs	r3, #9
 8005964:	e000      	b.n	8005968 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005966:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                 :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	42500000 	.word	0x42500000
 8005980:	42d00000 	.word	0x42d00000
 8005984:	43500000 	.word	0x43500000
 8005988:	43d08000 	.word	0x43d08000
 800598c:	44504000 	.word	0x44504000
 8005990:	44d06000 	.word	0x44d06000
 8005994:	45505000 	.word	0x45505000

08005998 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005998:	b590      	push	{r4, r7, lr}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	461a      	mov	r2, r3
 80059a4:	460b      	mov	r3, r1
 80059a6:	72fb      	strb	r3, [r7, #11]
 80059a8:	4613      	mov	r3, r2
 80059aa:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	695c      	ldr	r4, [r3, #20]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	7b1b      	ldrb	r3, [r3, #12]
 80059b8:	b298      	uxth	r0, r3
 80059ba:	7afb      	ldrb	r3, [r7, #11]
 80059bc:	b299      	uxth	r1, r3
 80059be:	893b      	ldrh	r3, [r7, #8]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	47a0      	blx	r4
 80059c4:	4603      	mov	r3, r0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd90      	pop	{r4, r7, pc}

080059ce <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80059ce:	b590      	push	{r4, r7, lr}
 80059d0:	b087      	sub	sp, #28
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	461a      	mov	r2, r3
 80059da:	460b      	mov	r3, r1
 80059dc:	72fb      	strb	r3, [r7, #11]
 80059de:	4613      	mov	r3, r2
 80059e0:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	691c      	ldr	r4, [r3, #16]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	7b1b      	ldrb	r3, [r3, #12]
 80059ee:	b298      	uxth	r0, r3
 80059f0:	7afb      	ldrb	r3, [r7, #11]
 80059f2:	b299      	uxth	r1, r3
 80059f4:	893b      	ldrh	r3, [r7, #8]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	47a0      	blx	r4
 80059fa:	4603      	mov	r3, r0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd90      	pop	{r4, r7, pc}

08005a04 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005a04:	b590      	push	{r4, r7, lr}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	607a      	str	r2, [r7, #4]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	460b      	mov	r3, r1
 8005a12:	72fb      	strb	r3, [r7, #11]
 8005a14:	4613      	mov	r3, r2
 8005a16:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685c      	ldr	r4, [r3, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6898      	ldr	r0, [r3, #8]
 8005a20:	893b      	ldrh	r3, [r7, #8]
 8005a22:	7af9      	ldrb	r1, [r7, #11]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	47a0      	blx	r4
 8005a28:	6178      	str	r0, [r7, #20]
  return ret;
 8005a2a:	697b      	ldr	r3, [r7, #20]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd90      	pop	{r4, r7, pc}

08005a34 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005a34:	b590      	push	{r4, r7, lr}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	607a      	str	r2, [r7, #4]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	460b      	mov	r3, r1
 8005a42:	72fb      	strb	r3, [r7, #11]
 8005a44:	4613      	mov	r3, r2
 8005a46:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681c      	ldr	r4, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6898      	ldr	r0, [r3, #8]
 8005a50:	893b      	ldrh	r3, [r7, #8]
 8005a52:	7af9      	ldrb	r1, [r7, #11]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	47a0      	blx	r4
 8005a58:	6178      	str	r0, [r7, #20]
  return ret;
 8005a5a:	697b      	ldr	r3, [r7, #20]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd90      	pop	{r4, r7, pc}

08005a64 <lsm6dso_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005a70:	f107 0208 	add.w	r2, r7, #8
 8005a74:	2301      	movs	r3, #1
 8005a76:	2110      	movs	r1, #16
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff ffc3 	bl	8005a04 <lsm6dso_read_reg>
 8005a7e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10f      	bne.n	8005aa6 <lsm6dso_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	7a3b      	ldrb	r3, [r7, #8]
 8005a90:	f362 0383 	bfi	r3, r2, #2, #2
 8005a94:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005a96:	f107 0208 	add.w	r2, r7, #8
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	2110      	movs	r1, #16
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff ffc8 	bl	8005a34 <lsm6dso_write_reg>
 8005aa4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <lsm6dso_xl_full_scale_get>:
  * @param  val      Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005aba:	f107 0208 	add.w	r2, r7, #8
 8005abe:	2301      	movs	r3, #1
 8005ac0:	2110      	movs	r1, #16
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff ff9e 	bl	8005a04 <lsm6dso_read_reg>
 8005ac8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl) {
 8005aca:	7a3b      	ldrb	r3, [r7, #8]
 8005acc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d81a      	bhi.n	8005b0c <lsm6dso_xl_full_scale_get+0x5c>
 8005ad6:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <lsm6dso_xl_full_scale_get+0x2c>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005aed 	.word	0x08005aed
 8005ae0:	08005af5 	.word	0x08005af5
 8005ae4:	08005afd 	.word	0x08005afd
 8005ae8:	08005b05 	.word	0x08005b05
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]
      break;
 8005af2:	e00f      	b.n	8005b14 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2201      	movs	r2, #1
 8005af8:	701a      	strb	r2, [r3, #0]
      break;
 8005afa:	e00b      	b.n	8005b14 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2202      	movs	r2, #2
 8005b00:	701a      	strb	r2, [r3, #0]
      break;
 8005b02:	e007      	b.n	8005b14 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2203      	movs	r2, #3
 8005b08:	701a      	strb	r2, [r3, #0]
      break;
 8005b0a:	e003      	b.n	8005b14 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
      break;
 8005b12:	bf00      	nop
  }

  return ret;
 8005b14:	68fb      	ldr	r3, [r7, #12]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop

08005b20 <lsm6dso_xl_data_rate_set>:
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_emb_fsm_enable_t fsm_enable;
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005b30:	f107 030c 	add.w	r3, r7, #12
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fca1 	bl	800647e <lsm6dso_fsm_enable_get>
 8005b3c:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f040 80c4 	bne.w	8005cce <lsm6dso_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005b46:	7b3b      	ldrb	r3, [r7, #12]
 8005b48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b4c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8005b4e:	7b3b      	ldrb	r3, [r7, #12]
 8005b50:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005b54:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005b56:	4313      	orrs	r3, r2
 8005b58:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8005b5a:	7b3b      	ldrb	r3, [r7, #12]
 8005b5c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005b60:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8005b62:	4313      	orrs	r3, r2
 8005b64:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8005b66:	7b3b      	ldrb	r3, [r7, #12]
 8005b68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005b6c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005b72:	7b3b      	ldrb	r3, [r7, #12]
 8005b74:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005b78:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8005b7e:	7b3b      	ldrb	r3, [r7, #12]
 8005b80:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005b84:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005b86:	4313      	orrs	r3, r2
 8005b88:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8005b8a:	7b3b      	ldrb	r3, [r7, #12]
 8005b8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005b90:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8005b92:	4313      	orrs	r3, r2
 8005b94:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005b96:	7b3b      	ldrb	r3, [r7, #12]
 8005b98:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005b9c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005ba2:	7b7b      	ldrb	r3, [r7, #13]
 8005ba4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005ba8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005baa:	4313      	orrs	r3, r2
 8005bac:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8005bae:	7b7b      	ldrb	r3, [r7, #13]
 8005bb0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005bb4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8005bba:	7b7b      	ldrb	r3, [r7, #13]
 8005bbc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005bc0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8005bc6:	7b7b      	ldrb	r3, [r7, #13]
 8005bc8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005bcc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8005bd2:	7b7b      	ldrb	r3, [r7, #13]
 8005bd4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005bd8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8005bde:	7b7b      	ldrb	r3, [r7, #13]
 8005be0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005be4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8005be6:	4313      	orrs	r3, r2
 8005be8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8005bea:	7b7b      	ldrb	r3, [r7, #13]
 8005bec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005bf0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8005bf6:	7b7b      	ldrb	r3, [r7, #13]
 8005bf8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005bfc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d163      	bne.n	8005cce <lsm6dso_xl_data_rate_set+0x1ae>
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005c06:	f107 030b 	add.w	r3, r7, #11
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fc57 	bl	80064c0 <lsm6dso_fsm_data_rate_get>
 8005c12:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d159      	bne.n	8005cce <lsm6dso_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8005c1a:	7afb      	ldrb	r3, [r7, #11]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d853      	bhi.n	8005cc8 <lsm6dso_xl_data_rate_set+0x1a8>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <lsm6dso_xl_data_rate_set+0x108>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005c39 	.word	0x08005c39
 8005c2c:	08005c4b 	.word	0x08005c4b
 8005c30:	08005c69 	.word	0x08005c69
 8005c34:	08005c93 	.word	0x08005c93
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF) {
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <lsm6dso_xl_data_rate_set+0x124>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8005c42:	e045      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	75fb      	strb	r3, [r7, #23]
            break;
 8005c48:	e042      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF) {
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <lsm6dso_xl_data_rate_set+0x136>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005c50:	2302      	movs	r3, #2
 8005c52:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8005c54:	e03c      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5) {
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d102      	bne.n	8005c62 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	75fb      	strb	r3, [r7, #23]
            break;
 8005c60:	e036      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	75fb      	strb	r3, [r7, #23]
            break;
 8005c66:	e033      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF) {
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d102      	bne.n	8005c74 <lsm6dso_xl_data_rate_set+0x154>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8005c72:	e02d      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5) {
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d102      	bne.n	8005c80 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	75fb      	strb	r3, [r7, #23]
            break;
 8005c7e:	e027      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz) {
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d102      	bne.n	8005c8c <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8005c86:	2303      	movs	r3, #3
 8005c88:	75fb      	strb	r3, [r7, #23]
            break;
 8005c8a:	e021      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	75fb      	strb	r3, [r7, #23]
            break;
 8005c90:	e01e      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF) {
 8005c92:	78fb      	ldrb	r3, [r7, #3]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <lsm6dso_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005c98:	2304      	movs	r3, #4
 8005c9a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8005c9c:	e018      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5) {
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d102      	bne.n	8005caa <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	75fb      	strb	r3, [r7, #23]
            break;
 8005ca8:	e012      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz) {
 8005caa:	78fb      	ldrb	r3, [r7, #3]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d102      	bne.n	8005cb6 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005cb0:	2304      	movs	r3, #4
 8005cb2:	75fb      	strb	r3, [r7, #23]
            break;
 8005cb4:	e00c      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz) {
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d102      	bne.n	8005cc2 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	75fb      	strb	r3, [r7, #23]
            break;
 8005cc0:	e006      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	75fb      	strb	r3, [r7, #23]
            break;
 8005cc6:	e003      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	75fb      	strb	r3, [r7, #23]
            break;
 8005ccc:	e000      	b.n	8005cd0 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8005cce:	bf00      	nop
    }
  }

  if (ret == 0) {
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d107      	bne.n	8005ce6 <lsm6dso_xl_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005cd6:	f107 0208 	add.w	r2, r7, #8
 8005cda:	2301      	movs	r3, #1
 8005cdc:	2110      	movs	r1, #16
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff fe90 	bl	8005a04 <lsm6dso_read_reg>
 8005ce4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0) {
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10f      	bne.n	8005d0c <lsm6dso_xl_data_rate_set+0x1ec>
    reg.odr_xl = (uint8_t) odr_xl;
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	7a3b      	ldrb	r3, [r7, #8]
 8005cf6:	f362 1307 	bfi	r3, r2, #4, #4
 8005cfa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005cfc:	f107 0208 	add.w	r2, r7, #8
 8005d00:	2301      	movs	r3, #1
 8005d02:	2110      	movs	r1, #16
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff fe95 	bl	8005a34 <lsm6dso_write_reg>
 8005d0a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005d0c:	693b      	ldr	r3, [r7, #16]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop

08005d18 <lsm6dso_xl_data_rate_get>:
  * @param  val      Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005d22:	f107 0208 	add.w	r2, r7, #8
 8005d26:	2301      	movs	r3, #1
 8005d28:	2110      	movs	r1, #16
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff fe6a 	bl	8005a04 <lsm6dso_read_reg>
 8005d30:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl) {
 8005d32:	7a3b      	ldrb	r3, [r7, #8]
 8005d34:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b0b      	cmp	r3, #11
 8005d3c:	d84a      	bhi.n	8005dd4 <lsm6dso_xl_data_rate_get+0xbc>
 8005d3e:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <lsm6dso_xl_data_rate_get+0x2c>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d75 	.word	0x08005d75
 8005d48:	08005d7d 	.word	0x08005d7d
 8005d4c:	08005d85 	.word	0x08005d85
 8005d50:	08005d8d 	.word	0x08005d8d
 8005d54:	08005d95 	.word	0x08005d95
 8005d58:	08005d9d 	.word	0x08005d9d
 8005d5c:	08005da5 	.word	0x08005da5
 8005d60:	08005dad 	.word	0x08005dad
 8005d64:	08005db5 	.word	0x08005db5
 8005d68:	08005dbd 	.word	0x08005dbd
 8005d6c:	08005dc5 	.word	0x08005dc5
 8005d70:	08005dcd 	.word	0x08005dcd
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]
      break;
 8005d7a:	e02f      	b.n	8005ddc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	701a      	strb	r2, [r3, #0]
      break;
 8005d82:	e02b      	b.n	8005ddc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2202      	movs	r2, #2
 8005d88:	701a      	strb	r2, [r3, #0]
      break;
 8005d8a:	e027      	b.n	8005ddc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2203      	movs	r2, #3
 8005d90:	701a      	strb	r2, [r3, #0]
      break;
 8005d92:	e023      	b.n	8005ddc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2204      	movs	r2, #4
 8005d98:	701a      	strb	r2, [r3, #0]
      break;
 8005d9a:	e01f      	b.n	8005ddc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2205      	movs	r2, #5
 8005da0:	701a      	strb	r2, [r3, #0]
      break;
 8005da2:	e01b      	b.n	8005ddc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2206      	movs	r2, #6
 8005da8:	701a      	strb	r2, [r3, #0]
      break;
 8005daa:	e017      	b.n	8005ddc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2207      	movs	r2, #7
 8005db0:	701a      	strb	r2, [r3, #0]
      break;
 8005db2:	e013      	b.n	8005ddc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2208      	movs	r2, #8
 8005db8:	701a      	strb	r2, [r3, #0]
      break;
 8005dba:	e00f      	b.n	8005ddc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2209      	movs	r2, #9
 8005dc0:	701a      	strb	r2, [r3, #0]
      break;
 8005dc2:	e00b      	b.n	8005ddc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	220a      	movs	r2, #10
 8005dc8:	701a      	strb	r2, [r3, #0]
      break;
 8005dca:	e007      	b.n	8005ddc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	220b      	movs	r2, #11
 8005dd0:	701a      	strb	r2, [r3, #0]
      break;
 8005dd2:	e003      	b.n	8005ddc <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
      break;
 8005dda:	bf00      	nop
  }

  return ret;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop

08005de8 <lsm6dso_gy_full_scale_set>:
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005df4:	f107 0208 	add.w	r2, r7, #8
 8005df8:	2301      	movs	r3, #1
 8005dfa:	2111      	movs	r1, #17
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff fe01 	bl	8005a04 <lsm6dso_read_reg>
 8005e02:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10f      	bne.n	8005e2a <lsm6dso_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	7a3b      	ldrb	r3, [r7, #8]
 8005e14:	f362 0343 	bfi	r3, r2, #1, #3
 8005e18:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005e1a:	f107 0208 	add.w	r2, r7, #8
 8005e1e:	2301      	movs	r3, #1
 8005e20:	2111      	movs	r1, #17
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fe06 	bl	8005a34 <lsm6dso_write_reg>
 8005e28:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <lsm6dso_gy_full_scale_get>:
  * @param  val      Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005e3e:	f107 0208 	add.w	r2, r7, #8
 8005e42:	2301      	movs	r3, #1
 8005e44:	2111      	movs	r1, #17
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff fddc 	bl	8005a04 <lsm6dso_read_reg>
 8005e4c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g) {
 8005e4e:	7a3b      	ldrb	r3, [r7, #8]
 8005e50:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b06      	cmp	r3, #6
 8005e58:	d824      	bhi.n	8005ea4 <lsm6dso_gy_full_scale_get+0x70>
 8005e5a:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <lsm6dso_gy_full_scale_get+0x2c>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005e7d 	.word	0x08005e7d
 8005e64:	08005e85 	.word	0x08005e85
 8005e68:	08005e8d 	.word	0x08005e8d
 8005e6c:	08005ea5 	.word	0x08005ea5
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005ea5 	.word	0x08005ea5
 8005e78:	08005e9d 	.word	0x08005e9d
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]
      break;
 8005e82:	e013      	b.n	8005eac <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2201      	movs	r2, #1
 8005e88:	701a      	strb	r2, [r3, #0]
      break;
 8005e8a:	e00f      	b.n	8005eac <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	701a      	strb	r2, [r3, #0]
      break;
 8005e92:	e00b      	b.n	8005eac <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2204      	movs	r2, #4
 8005e98:	701a      	strb	r2, [r3, #0]
      break;
 8005e9a:	e007      	b.n	8005eac <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2206      	movs	r2, #6
 8005ea0:	701a      	strb	r2, [r3, #0]
      break;
 8005ea2:	e003      	b.n	8005eac <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	701a      	strb	r2, [r3, #0]
      break;
 8005eaa:	bf00      	nop
  }

  return ret;
 8005eac:	68fb      	ldr	r3, [r7, #12]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop

08005eb8 <lsm6dso_gy_data_rate_set>:
  * @param  val      change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	75fb      	strb	r3, [r7, #23]
  lsm6dso_emb_fsm_enable_t fsm_enable;
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005ec8:	f107 030c 	add.w	r3, r7, #12
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fad5 	bl	800647e <lsm6dso_fsm_enable_get>
 8005ed4:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f040 80c4 	bne.w	8006066 <lsm6dso_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005ede:	7b3b      	ldrb	r3, [r7, #12]
 8005ee0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005ee4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8005ee6:	7b3b      	ldrb	r3, [r7, #12]
 8005ee8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005eec:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8005ef2:	7b3b      	ldrb	r3, [r7, #12]
 8005ef4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ef8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8005efa:	4313      	orrs	r3, r2
 8005efc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8005efe:	7b3b      	ldrb	r3, [r7, #12]
 8005f00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f04:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8005f06:	4313      	orrs	r3, r2
 8005f08:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005f0a:	7b3b      	ldrb	r3, [r7, #12]
 8005f0c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005f10:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8005f12:	4313      	orrs	r3, r2
 8005f14:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8005f16:	7b3b      	ldrb	r3, [r7, #12]
 8005f18:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f1c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8005f22:	7b3b      	ldrb	r3, [r7, #12]
 8005f24:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005f28:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005f2e:	7b3b      	ldrb	r3, [r7, #12]
 8005f30:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005f34:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8005f36:	4313      	orrs	r3, r2
 8005f38:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005f3a:	7b7b      	ldrb	r3, [r7, #13]
 8005f3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f40:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005f42:	4313      	orrs	r3, r2
 8005f44:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8005f46:	7b7b      	ldrb	r3, [r7, #13]
 8005f48:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005f4c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8005f52:	7b7b      	ldrb	r3, [r7, #13]
 8005f54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f58:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8005f5e:	7b7b      	ldrb	r3, [r7, #13]
 8005f60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f64:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8005f66:	4313      	orrs	r3, r2
 8005f68:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8005f6a:	7b7b      	ldrb	r3, [r7, #13]
 8005f6c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005f70:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8005f72:	4313      	orrs	r3, r2
 8005f74:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8005f76:	7b7b      	ldrb	r3, [r7, #13]
 8005f78:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f7c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8005f82:	7b7b      	ldrb	r3, [r7, #13]
 8005f84:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005f88:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8005f8e:	7b7b      	ldrb	r3, [r7, #13]
 8005f90:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005f94:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8005f96:	4313      	orrs	r3, r2
 8005f98:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d163      	bne.n	8006066 <lsm6dso_gy_data_rate_set+0x1ae>
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005f9e:	f107 030b 	add.w	r3, r7, #11
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fa8b 	bl	80064c0 <lsm6dso_fsm_data_rate_get>
 8005faa:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d159      	bne.n	8006066 <lsm6dso_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8005fb2:	7afb      	ldrb	r3, [r7, #11]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d853      	bhi.n	8006060 <lsm6dso_gy_data_rate_set+0x1a8>
 8005fb8:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <lsm6dso_gy_data_rate_set+0x108>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	08005fd1 	.word	0x08005fd1
 8005fc4:	08005fe3 	.word	0x08005fe3
 8005fc8:	08006001 	.word	0x08006001
 8005fcc:	0800602b 	.word	0x0800602b
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF) {
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d102      	bne.n	8005fdc <lsm6dso_gy_data_rate_set+0x124>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8005fda:	e045      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005fdc:	78fb      	ldrb	r3, [r7, #3]
 8005fde:	75fb      	strb	r3, [r7, #23]
            break;
 8005fe0:	e042      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF) {
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d102      	bne.n	8005fee <lsm6dso_gy_data_rate_set+0x136>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8005fec:	e03c      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5) {
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d102      	bne.n	8005ffa <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	75fb      	strb	r3, [r7, #23]
            break;
 8005ff8:	e036      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	75fb      	strb	r3, [r7, #23]
            break;
 8005ffe:	e033      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF) {
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <lsm6dso_gy_data_rate_set+0x154>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006006:	2303      	movs	r3, #3
 8006008:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800600a:	e02d      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5) {
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d102      	bne.n	8006018 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006012:	2303      	movs	r3, #3
 8006014:	75fb      	strb	r3, [r7, #23]
            break;
 8006016:	e027      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz) {
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	2b02      	cmp	r3, #2
 800601c:	d102      	bne.n	8006024 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800601e:	2303      	movs	r3, #3
 8006020:	75fb      	strb	r3, [r7, #23]
            break;
 8006022:	e021      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	75fb      	strb	r3, [r7, #23]
            break;
 8006028:	e01e      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF) {
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <lsm6dso_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006030:	2304      	movs	r3, #4
 8006032:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8006034:	e018      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5) {
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d102      	bne.n	8006042 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800603c:	2304      	movs	r3, #4
 800603e:	75fb      	strb	r3, [r7, #23]
            break;
 8006040:	e012      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz) {
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d102      	bne.n	800604e <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006048:	2304      	movs	r3, #4
 800604a:	75fb      	strb	r3, [r7, #23]
            break;
 800604c:	e00c      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz) {
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	2b03      	cmp	r3, #3
 8006052:	d102      	bne.n	800605a <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006054:	2304      	movs	r3, #4
 8006056:	75fb      	strb	r3, [r7, #23]
            break;
 8006058:	e006      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800605a:	78fb      	ldrb	r3, [r7, #3]
 800605c:	75fb      	strb	r3, [r7, #23]
            break;
 800605e:	e003      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	75fb      	strb	r3, [r7, #23]
            break;
 8006064:	e000      	b.n	8006068 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8006066:	bf00      	nop
    }
  }

  if (ret == 0) {
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d107      	bne.n	800607e <lsm6dso_gy_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800606e:	f107 0208 	add.w	r2, r7, #8
 8006072:	2301      	movs	r3, #1
 8006074:	2111      	movs	r1, #17
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff fcc4 	bl	8005a04 <lsm6dso_read_reg>
 800607c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0) {
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10f      	bne.n	80060a4 <lsm6dso_gy_data_rate_set+0x1ec>
    reg.odr_g = (uint8_t) odr_gy;
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	b2da      	uxtb	r2, r3
 800608c:	7a3b      	ldrb	r3, [r7, #8]
 800608e:	f362 1307 	bfi	r3, r2, #4, #4
 8006092:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006094:	f107 0208 	add.w	r2, r7, #8
 8006098:	2301      	movs	r3, #1
 800609a:	2111      	movs	r1, #17
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff fcc9 	bl	8005a34 <lsm6dso_write_reg>
 80060a2:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80060a4:	693b      	ldr	r3, [r7, #16]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop

080060b0 <lsm6dso_gy_data_rate_get>:
  * @param  val      Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80060ba:	f107 0208 	add.w	r2, r7, #8
 80060be:	2301      	movs	r3, #1
 80060c0:	2111      	movs	r1, #17
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff fc9e 	bl	8005a04 <lsm6dso_read_reg>
 80060c8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g) {
 80060ca:	7a3b      	ldrb	r3, [r7, #8]
 80060cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b0a      	cmp	r3, #10
 80060d4:	d844      	bhi.n	8006160 <lsm6dso_gy_data_rate_get+0xb0>
 80060d6:	a201      	add	r2, pc, #4	; (adr r2, 80060dc <lsm6dso_gy_data_rate_get+0x2c>)
 80060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060dc:	08006109 	.word	0x08006109
 80060e0:	08006111 	.word	0x08006111
 80060e4:	08006119 	.word	0x08006119
 80060e8:	08006121 	.word	0x08006121
 80060ec:	08006129 	.word	0x08006129
 80060f0:	08006131 	.word	0x08006131
 80060f4:	08006139 	.word	0x08006139
 80060f8:	08006141 	.word	0x08006141
 80060fc:	08006149 	.word	0x08006149
 8006100:	08006151 	.word	0x08006151
 8006104:	08006159 	.word	0x08006159
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2200      	movs	r2, #0
 800610c:	701a      	strb	r2, [r3, #0]
      break;
 800610e:	e02b      	b.n	8006168 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2201      	movs	r2, #1
 8006114:	701a      	strb	r2, [r3, #0]
      break;
 8006116:	e027      	b.n	8006168 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2202      	movs	r2, #2
 800611c:	701a      	strb	r2, [r3, #0]
      break;
 800611e:	e023      	b.n	8006168 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2203      	movs	r2, #3
 8006124:	701a      	strb	r2, [r3, #0]
      break;
 8006126:	e01f      	b.n	8006168 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2204      	movs	r2, #4
 800612c:	701a      	strb	r2, [r3, #0]
      break;
 800612e:	e01b      	b.n	8006168 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2205      	movs	r2, #5
 8006134:	701a      	strb	r2, [r3, #0]
      break;
 8006136:	e017      	b.n	8006168 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2206      	movs	r2, #6
 800613c:	701a      	strb	r2, [r3, #0]
      break;
 800613e:	e013      	b.n	8006168 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2207      	movs	r2, #7
 8006144:	701a      	strb	r2, [r3, #0]
      break;
 8006146:	e00f      	b.n	8006168 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2208      	movs	r2, #8
 800614c:	701a      	strb	r2, [r3, #0]
      break;
 800614e:	e00b      	b.n	8006168 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2209      	movs	r2, #9
 8006154:	701a      	strb	r2, [r3, #0]
      break;
 8006156:	e007      	b.n	8006168 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	220a      	movs	r2, #10
 800615c:	701a      	strb	r2, [r3, #0]
      break;
 800615e:	e003      	b.n	8006168 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2200      	movs	r2, #0
 8006164:	701a      	strb	r2, [r3, #0]
      break;
 8006166:	bf00      	nop
  }

  return ret;
 8006168:	68fb      	ldr	r3, [r7, #12]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop

08006174 <lsm6dso_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006180:	f107 0208 	add.w	r2, r7, #8
 8006184:	2301      	movs	r3, #1
 8006186:	2112      	movs	r1, #18
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff fc3b 	bl	8005a04 <lsm6dso_read_reg>
 800618e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10f      	bne.n	80061b6 <lsm6dso_block_data_update_set+0x42>
    reg.bdu = val;
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	b2da      	uxtb	r2, r3
 800619e:	7a3b      	ldrb	r3, [r7, #8]
 80061a0:	f362 1386 	bfi	r3, r2, #6, #1
 80061a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80061a6:	f107 0208 	add.w	r2, r7, #8
 80061aa:	2301      	movs	r3, #1
 80061ac:	2112      	movs	r1, #18
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff fc40 	bl	8005a34 <lsm6dso_write_reg>
 80061b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80061b6:	68fb      	ldr	r3, [r7, #12]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <lsm6dso_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80061ca:	f107 020c 	add.w	r2, r7, #12
 80061ce:	2306      	movs	r3, #6
 80061d0:	2122      	movs	r1, #34	; 0x22
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff fc16 	bl	8005a04 <lsm6dso_read_reg>
 80061d8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80061da:	7b7b      	ldrb	r3, [r7, #13]
 80061dc:	b21a      	sxth	r2, r3
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	7b3b      	ldrb	r3, [r7, #12]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	4413      	add	r3, r2
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	b21a      	sxth	r2, r3
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80061fc:	7bfa      	ldrb	r2, [r7, #15]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	3302      	adds	r3, #2
 8006202:	b212      	sxth	r2, r2
 8006204:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	3302      	adds	r3, #2
 800620a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800620e:	b29b      	uxth	r3, r3
 8006210:	021b      	lsls	r3, r3, #8
 8006212:	b29a      	uxth	r2, r3
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	b29b      	uxth	r3, r3
 8006218:	4413      	add	r3, r2
 800621a:	b29a      	uxth	r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	3302      	adds	r3, #2
 8006220:	b212      	sxth	r2, r2
 8006222:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006224:	7c7a      	ldrb	r2, [r7, #17]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	3304      	adds	r3, #4
 800622a:	b212      	sxth	r2, r2
 800622c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	3304      	adds	r3, #4
 8006232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006236:	b29b      	uxth	r3, r3
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	b29a      	uxth	r2, r3
 800623c:	7c3b      	ldrb	r3, [r7, #16]
 800623e:	b29b      	uxth	r3, r3
 8006240:	4413      	add	r3, r2
 8006242:	b29a      	uxth	r2, r3
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	3304      	adds	r3, #4
 8006248:	b212      	sxth	r2, r2
 800624a:	801a      	strh	r2, [r3, #0]
  return ret;
 800624c:	697b      	ldr	r3, [r7, #20]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <lsm6dso_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b086      	sub	sp, #24
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8006260:	f107 020c 	add.w	r2, r7, #12
 8006264:	2306      	movs	r3, #6
 8006266:	2128      	movs	r1, #40	; 0x28
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff fbcb 	bl	8005a04 <lsm6dso_read_reg>
 800626e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006270:	7b7b      	ldrb	r3, [r7, #13]
 8006272:	b21a      	sxth	r2, r3
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800627e:	b29b      	uxth	r3, r3
 8006280:	021b      	lsls	r3, r3, #8
 8006282:	b29a      	uxth	r2, r3
 8006284:	7b3b      	ldrb	r3, [r7, #12]
 8006286:	b29b      	uxth	r3, r3
 8006288:	4413      	add	r3, r2
 800628a:	b29b      	uxth	r3, r3
 800628c:	b21a      	sxth	r2, r3
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006292:	7bfa      	ldrb	r2, [r7, #15]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	3302      	adds	r3, #2
 8006298:	b212      	sxth	r2, r2
 800629a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	3302      	adds	r3, #2
 80062a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	4413      	add	r3, r2
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	3302      	adds	r3, #2
 80062b6:	b212      	sxth	r2, r2
 80062b8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80062ba:	7c7a      	ldrb	r2, [r7, #17]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	3304      	adds	r3, #4
 80062c0:	b212      	sxth	r2, r2
 80062c2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	3304      	adds	r3, #4
 80062c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	021b      	lsls	r3, r3, #8
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	7c3b      	ldrb	r3, [r7, #16]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	4413      	add	r3, r2
 80062d8:	b29a      	uxth	r2, r3
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	3304      	adds	r3, #4
 80062de:	b212      	sxth	r2, r2
 80062e0:	801a      	strh	r2, [r3, #0]
  return ret;
 80062e2:	697b      	ldr	r3, [r7, #20]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <lsm6dso_mem_bank_set>:
  *                               reg FUNC_CFG_ACCESS
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg,
 80062f8:	f107 0208 	add.w	r2, r7, #8
 80062fc:	2301      	movs	r3, #1
 80062fe:	2101      	movs	r1, #1
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff fb7f 	bl	8005a04 <lsm6dso_read_reg>
 8006306:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10f      	bne.n	800632e <lsm6dso_mem_bank_set+0x42>
    reg.reg_access = (uint8_t)val;
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	b2da      	uxtb	r2, r3
 8006316:	7a3b      	ldrb	r3, [r7, #8]
 8006318:	f362 1387 	bfi	r3, r2, #6, #2
 800631c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg,
 800631e:	f107 0208 	add.w	r2, r7, #8
 8006322:	2301      	movs	r3, #1
 8006324:	2101      	movs	r1, #1
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff fb84 	bl	8005a34 <lsm6dso_write_reg>
 800632c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800632e:	68fb      	ldr	r3, [r7, #12]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <lsm6dso_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8006342:	2301      	movs	r3, #1
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	210f      	movs	r1, #15
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff fb5b 	bl	8005a04 <lsm6dso_read_reg>
 800634e:	60f8      	str	r0, [r7, #12]
  return ret;
 8006350:	68fb      	ldr	r3, [r7, #12]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <lsm6dso_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	460b      	mov	r3, r1
 8006364:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006366:	f107 0208 	add.w	r2, r7, #8
 800636a:	2301      	movs	r3, #1
 800636c:	2112      	movs	r1, #18
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff fb48 	bl	8005a04 <lsm6dso_read_reg>
 8006374:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10f      	bne.n	800639c <lsm6dso_auto_increment_set+0x42>
    reg.if_inc = val;
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	b2da      	uxtb	r2, r3
 8006384:	7a3b      	ldrb	r3, [r7, #8]
 8006386:	f362 0382 	bfi	r3, r2, #2, #1
 800638a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800638c:	f107 0208 	add.w	r2, r7, #8
 8006390:	2301      	movs	r3, #1
 8006392:	2112      	movs	r1, #18
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff fb4d 	bl	8005a34 <lsm6dso_write_reg>
 800639a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800639c:	68fb      	ldr	r3, [r7, #12]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <lsm6dso_i3c_disable_set>:
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	460b      	mov	r3, r1
 80063b0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl,
 80063b2:	f107 020c 	add.w	r2, r7, #12
 80063b6:	2301      	movs	r3, #1
 80063b8:	2118      	movs	r1, #24
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff fb22 	bl	8005a04 <lsm6dso_read_reg>
 80063c0:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d111      	bne.n	80063ec <lsm6dso_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	09db      	lsrs	r3, r3, #7
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	7b3b      	ldrb	r3, [r7, #12]
 80063d6:	f362 0341 	bfi	r3, r2, #1, #1
 80063da:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl,
 80063dc:	f107 020c 	add.w	r2, r7, #12
 80063e0:	2301      	movs	r3, #1
 80063e2:	2118      	movs	r1, #24
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7ff fb25 	bl	8005a34 <lsm6dso_write_reg>
 80063ea:	6178      	str	r0, [r7, #20]
                            1);
  }

  if (ret == 0) {
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d107      	bne.n	8006402 <lsm6dso_i3c_disable_set+0x5c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80063f2:	f107 0210 	add.w	r2, r7, #16
 80063f6:	2301      	movs	r3, #1
 80063f8:	2162      	movs	r1, #98	; 0x62
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff fb02 	bl	8005a04 <lsm6dso_read_reg>
 8006400:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0) {
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10f      	bne.n	8006428 <lsm6dso_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	b2da      	uxtb	r2, r3
 8006410:	7c3b      	ldrb	r3, [r7, #16]
 8006412:	f362 03c4 	bfi	r3, r2, #3, #2
 8006416:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8006418:	f107 0210 	add.w	r2, r7, #16
 800641c:	2301      	movs	r3, #1
 800641e:	2162      	movs	r1, #98	; 0x62
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff fb07 	bl	8005a34 <lsm6dso_write_reg>
 8006426:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8006428:	697b      	ldr	r3, [r7, #20]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <lsm6dso_fifo_mode_set>:
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	460b      	mov	r3, r1
 800643c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800643e:	f107 0208 	add.w	r2, r7, #8
 8006442:	2301      	movs	r3, #1
 8006444:	210a      	movs	r1, #10
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff fadc 	bl	8005a04 <lsm6dso_read_reg>
 800644c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10f      	bne.n	8006474 <lsm6dso_fifo_mode_set+0x42>
    reg.fifo_mode = (uint8_t)val;
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	b2da      	uxtb	r2, r3
 800645c:	7a3b      	ldrb	r3, [r7, #8]
 800645e:	f362 0302 	bfi	r3, r2, #0, #3
 8006462:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006464:	f107 0208 	add.w	r2, r7, #8
 8006468:	2301      	movs	r3, #1
 800646a:	210a      	movs	r1, #10
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff fae1 	bl	8005a34 <lsm6dso_write_reg>
 8006472:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006474:	68fb      	ldr	r3, [r7, #12]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <lsm6dso_fsm_enable_get>:
  * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006488:	2102      	movs	r1, #2
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff ff2e 	bl	80062ec <lsm6dso_mem_bank_set>
 8006490:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <lsm6dso_fsm_enable_get+0x28>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8006498:	2302      	movs	r3, #2
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	2146      	movs	r1, #70	; 0x46
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff fab0 	bl	8005a04 <lsm6dso_read_reg>
 80064a4:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <lsm6dso_fsm_enable_get+0x38>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80064ac:	2100      	movs	r1, #0
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff ff1c 	bl	80062ec <lsm6dso_mem_bank_set>
 80064b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80064b6:	68fb      	ldr	r3, [r7, #12]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <lsm6dso_fsm_data_rate_get>:
  * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80064ca:	2102      	movs	r1, #2
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff ff0d 	bl	80062ec <lsm6dso_mem_bank_set>
 80064d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d107      	bne.n	80064ea <lsm6dso_fsm_data_rate_get+0x2a>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 80064da:	f107 0208 	add.w	r2, r7, #8
 80064de:	2301      	movs	r3, #1
 80064e0:	215f      	movs	r1, #95	; 0x5f
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff fa8e 	bl	8005a04 <lsm6dso_read_reg>
 80064e8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d12a      	bne.n	8006546 <lsm6dso_fsm_data_rate_get+0x86>
    switch (reg.fsm_odr) {
 80064f0:	7a3b      	ldrb	r3, [r7, #8]
 80064f2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d81b      	bhi.n	8006534 <lsm6dso_fsm_data_rate_get+0x74>
 80064fc:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <lsm6dso_fsm_data_rate_get+0x44>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	08006515 	.word	0x08006515
 8006508:	0800651d 	.word	0x0800651d
 800650c:	08006525 	.word	0x08006525
 8006510:	0800652d 	.word	0x0800652d
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]
        break;
 800651a:	e00f      	b.n	800653c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2201      	movs	r2, #1
 8006520:	701a      	strb	r2, [r3, #0]
        break;
 8006522:	e00b      	b.n	800653c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2202      	movs	r2, #2
 8006528:	701a      	strb	r2, [r3, #0]
        break;
 800652a:	e007      	b.n	800653c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2203      	movs	r2, #3
 8006530:	701a      	strb	r2, [r3, #0]
        break;
 8006532:	e003      	b.n	800653c <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]
        break;
 800653a:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 800653c:	2100      	movs	r1, #0
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff fed4 	bl	80062ec <lsm6dso_mem_bank_set>
 8006544:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006546:	68fb      	ldr	r3, [r7, #12]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <IKS01A3_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08e      	sub	sp, #56	; 0x38
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800655a:	2300      	movs	r3, #0
 800655c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800655e:	2301      	movs	r3, #1
 8006560:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d06e      	beq.n	800664a <IKS01A3_MOTION_SENSOR_Init+0xfa>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b02      	cmp	r3, #2
 8006570:	f200 809d 	bhi.w	80066ae <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <IKS01A3_MOTION_SENSOR_Init+0x32>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d032      	beq.n	80065e6 <IKS01A3_MOTION_SENSOR_Init+0x96>
 8006580:	e095      	b.n	80066ae <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8006582:	6838      	ldr	r0, [r7, #0]
 8006584:	f000 f94e 	bl	8006824 <LSM6DSO_0_Probe>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800658e:	f04f 33ff 	mov.w	r3, #4294967295
 8006592:	e0cc      	b.n	800672e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8006594:	4a68      	ldr	r2, [pc, #416]	; (8006738 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	4967      	ldr	r1, [pc, #412]	; (800673c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80065a6:	f107 010c 	add.w	r1, r7, #12
 80065aa:	4610      	mov	r0, r2
 80065ac:	4798      	blx	r3
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80065b4:	f06f 0306 	mvn.w	r3, #6
 80065b8:	e0b9      	b.n	800672e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80065ba:	7b3b      	ldrb	r3, [r7, #12]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d103      	bne.n	80065c8 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	f043 0302 	orr.w	r3, r3, #2
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80065c8:	7b7b      	ldrb	r3, [r7, #13]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d103      	bne.n	80065d6 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	f043 0301 	orr.w	r3, r3, #1
 80065d4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80065d6:	7bbb      	ldrb	r3, [r7, #14]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d16c      	bne.n	80066b6 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	f043 0304 	orr.w	r3, r3, #4
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80065e4:	e067      	b.n	80066b6 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 80065e6:	6838      	ldr	r0, [r7, #0]
 80065e8:	f000 f9d8 	bl	800699c <LIS2DW12_0_Probe>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295
 80065f6:	e09a      	b.n	800672e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80065f8:	4a4f      	ldr	r2, [pc, #316]	; (8006738 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	494e      	ldr	r1, [pc, #312]	; (800673c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800660a:	f107 010c 	add.w	r1, r7, #12
 800660e:	4610      	mov	r0, r2
 8006610:	4798      	blx	r3
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8006618:	f06f 0306 	mvn.w	r3, #6
 800661c:	e087      	b.n	800672e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800661e:	7b3b      	ldrb	r3, [r7, #12]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d103      	bne.n	800662c <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	f043 0302 	orr.w	r3, r3, #2
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800662c:	7b7b      	ldrb	r3, [r7, #13]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d103      	bne.n	800663a <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d13c      	bne.n	80066ba <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	f043 0304 	orr.w	r3, r3, #4
 8006646:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8006648:	e037      	b.n	80066ba <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800664a:	6838      	ldr	r0, [r7, #0]
 800664c:	f000 fa4a 	bl	8006ae4 <LIS2MDL_0_Probe>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d002      	beq.n	800665c <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8006656:	f04f 33ff 	mov.w	r3, #4294967295
 800665a:	e068      	b.n	800672e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800665c:	4a36      	ldr	r2, [pc, #216]	; (8006738 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	4935      	ldr	r1, [pc, #212]	; (800673c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800666e:	f107 010c 	add.w	r1, r7, #12
 8006672:	4610      	mov	r0, r2
 8006674:	4798      	blx	r3
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800667c:	f06f 0306 	mvn.w	r3, #6
 8006680:	e055      	b.n	800672e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8006682:	7b3b      	ldrb	r3, [r7, #12]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d103      	bne.n	8006690 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	f043 0302 	orr.w	r3, r3, #2
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8006690:	7b7b      	ldrb	r3, [r7, #13]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d103      	bne.n	800669e <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	f043 0301 	orr.w	r3, r3, #1
 800669c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d10c      	bne.n	80066be <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	f043 0304 	orr.w	r3, r3, #4
 80066aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80066ac:	e007      	b.n	80066be <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80066ae:	f06f 0301 	mvn.w	r3, #1
 80066b2:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80066b4:	e004      	b.n	80066c0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80066b6:	bf00      	nop
 80066b8:	e002      	b.n	80066c0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80066ba:	bf00      	nop
 80066bc:	e000      	b.n	80066c0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80066be:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80066c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80066c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c8:	e031      	b.n	800672e <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80066ca:	2300      	movs	r3, #0
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ce:	e02a      	b.n	8006726 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	4013      	ands	r3, r2
 80066d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d8:	429a      	cmp	r2, r3
 80066da:	d11e      	bne.n	800671a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80066dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	4013      	ands	r3, r2
 80066e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d118      	bne.n	800671a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80066e8:	4a15      	ldr	r2, [pc, #84]	; (8006740 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066f0:	4814      	ldr	r0, [pc, #80]	; (8006744 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4613      	mov	r3, r2
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	4413      	add	r3, r2
 80066fa:	440b      	add	r3, r1
 80066fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	490e      	ldr	r1, [pc, #56]	; (800673c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800670a:	4610      	mov	r0, r2
 800670c:	4798      	blx	r3
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8006714:	f06f 0304 	mvn.w	r3, #4
 8006718:	e009      	b.n	800672e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8006720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006722:	3301      	adds	r3, #1
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	2b02      	cmp	r3, #2
 800672a:	d9d1      	bls.n	80066d0 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800672c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800672e:	4618      	mov	r0, r3
 8006730:	3738      	adds	r7, #56	; 0x38
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	200003a0 	.word	0x200003a0
 800673c:	20000370 	.word	0x20000370
 8006740:	200000d0 	.word	0x200000d0
 8006744:	2000037c 	.word	0x2000037c

08006748 <IKS01A3_MOTION_SENSOR_GetCapabilities>:
 * @param  Instance Motion sensor instance
 * @param  Capabilities pointer to motion sensor capabilities
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b02      	cmp	r3, #2
 8006756:	d903      	bls.n	8006760 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006758:	f06f 0301 	mvn.w	r3, #1
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	e014      	b.n	800678a <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8006760:	4a0c      	ldr	r2, [pc, #48]	; (8006794 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x4c>)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	490b      	ldr	r1, [pc, #44]	; (8006798 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x50>)
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	4610      	mov	r0, r2
 8006776:	4798      	blx	r3
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800677e:	f06f 0306 	mvn.w	r3, #6
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	e001      	b.n	800678a <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800678a:	68fb      	ldr	r3, [r7, #12]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	200003a0 	.word	0x200003a0
 8006798:	20000370 	.word	0x20000370

0800679c <IKS01A3_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d903      	bls.n	80067b6 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80067ae:	f06f 0301 	mvn.w	r3, #1
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	e029      	b.n	800680a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80067b6:	4a17      	ldr	r2, [pc, #92]	; (8006814 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4013      	ands	r3, r2
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d11d      	bne.n	8006804 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80067c8:	4a13      	ldr	r2, [pc, #76]	; (8006818 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80067d0:	4812      	ldr	r0, [pc, #72]	; (800681c <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4613      	mov	r3, r2
 80067d6:	005b      	lsls	r3, r3, #1
 80067d8:	4413      	add	r3, r2
 80067da:	440b      	add	r3, r1
 80067dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	490f      	ldr	r1, [pc, #60]	; (8006820 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4610      	mov	r0, r2
 80067ee:	4798      	blx	r3
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80067f6:	f06f 0304 	mvn.w	r3, #4
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	e005      	b.n	800680a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	e002      	b.n	800680a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8006804:	f06f 0301 	mvn.w	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800680a:	697b      	ldr	r3, [r7, #20]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	200003ac 	.word	0x200003ac
 8006818:	200000d0 	.word	0x200000d0
 800681c:	2000037c 	.word	0x2000037c
 8006820:	20000370 	.word	0x20000370

08006824 <LSM6DSO_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b092      	sub	sp, #72	; 0x48
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800682c:	2300      	movs	r3, #0
 800682e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8006830:	2300      	movs	r3, #0
 8006832:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8006834:	23d7      	movs	r3, #215	; 0xd7
 8006836:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 800683a:	4b4a      	ldr	r3, [pc, #296]	; (8006964 <LSM6DSO_0_Probe+0x140>)
 800683c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800683e:	4b4a      	ldr	r3, [pc, #296]	; (8006968 <LSM6DSO_0_Probe+0x144>)
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006842:	4b4a      	ldr	r3, [pc, #296]	; (800696c <LSM6DSO_0_Probe+0x148>)
 8006844:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006846:	4b4a      	ldr	r3, [pc, #296]	; (8006970 <LSM6DSO_0_Probe+0x14c>)
 8006848:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 800684a:	4b4a      	ldr	r3, [pc, #296]	; (8006974 <LSM6DSO_0_Probe+0x150>)
 800684c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800684e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006852:	4619      	mov	r1, r3
 8006854:	4848      	ldr	r0, [pc, #288]	; (8006978 <LSM6DSO_0_Probe+0x154>)
 8006856:	f7fd fe9f 	bl	8004598 <LSM6DSO_RegisterBusIO>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006860:	f06f 0306 	mvn.w	r3, #6
 8006864:	647b      	str	r3, [r7, #68]	; 0x44
 8006866:	e077      	b.n	8006958 <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8006868:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800686c:	4619      	mov	r1, r3
 800686e:	4842      	ldr	r0, [pc, #264]	; (8006978 <LSM6DSO_0_Probe+0x154>)
 8006870:	f7fd ff94 	bl	800479c <LSM6DSO_ReadID>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800687a:	f06f 0306 	mvn.w	r3, #6
 800687e:	647b      	str	r3, [r7, #68]	; 0x44
 8006880:	e06a      	b.n	8006958 <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 8006882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006886:	2b6c      	cmp	r3, #108	; 0x6c
 8006888:	d003      	beq.n	8006892 <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800688a:	f06f 0306 	mvn.w	r3, #6
 800688e:	647b      	str	r3, [r7, #68]	; 0x44
 8006890:	e062      	b.n	8006958 <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8006892:	f107 0308 	add.w	r3, r7, #8
 8006896:	4619      	mov	r1, r3
 8006898:	4837      	ldr	r0, [pc, #220]	; (8006978 <LSM6DSO_0_Probe+0x154>)
 800689a:	f7fd ff95 	bl	80047c8 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800689e:	7a7b      	ldrb	r3, [r7, #9]
 80068a0:	461a      	mov	r2, r3
 80068a2:	7a3b      	ldrb	r3, [r7, #8]
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	431a      	orrs	r2, r3
 80068a8:	7abb      	ldrb	r3, [r7, #10]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4313      	orrs	r3, r2
 80068ae:	4a33      	ldr	r2, [pc, #204]	; (800697c <LSM6DSO_0_Probe+0x158>)
 80068b0:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 80068b2:	4b33      	ldr	r3, [pc, #204]	; (8006980 <LSM6DSO_0_Probe+0x15c>)
 80068b4:	4a30      	ldr	r2, [pc, #192]	; (8006978 <LSM6DSO_0_Probe+0x154>)
 80068b6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 80068b8:	4b32      	ldr	r3, [pc, #200]	; (8006984 <LSM6DSO_0_Probe+0x160>)
 80068ba:	4a33      	ldr	r2, [pc, #204]	; (8006988 <LSM6DSO_0_Probe+0x164>)
 80068bc:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80068be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d11d      	bne.n	8006900 <LSM6DSO_0_Probe+0xdc>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d018      	beq.n	8006900 <LSM6DSO_0_Probe+0xdc>
 80068ce:	7a7b      	ldrb	r3, [r7, #9]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d115      	bne.n	8006900 <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 80068d4:	4b2d      	ldr	r3, [pc, #180]	; (800698c <LSM6DSO_0_Probe+0x168>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	4a2d      	ldr	r2, [pc, #180]	; (8006990 <LSM6DSO_0_Probe+0x16c>)
 80068da:	492e      	ldr	r1, [pc, #184]	; (8006994 <LSM6DSO_0_Probe+0x170>)
 80068dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80068e0:	4b28      	ldr	r3, [pc, #160]	; (8006984 <LSM6DSO_0_Probe+0x160>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a26      	ldr	r2, [pc, #152]	; (8006980 <LSM6DSO_0_Probe+0x15c>)
 80068e8:	6812      	ldr	r2, [r2, #0]
 80068ea:	4610      	mov	r0, r2
 80068ec:	4798      	blx	r3
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80068f4:	f06f 0304 	mvn.w	r3, #4
 80068f8:	647b      	str	r3, [r7, #68]	; 0x44
 80068fa:	e001      	b.n	8006900 <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006902:	2b00      	cmp	r3, #0
 8006904:	d11d      	bne.n	8006942 <LSM6DSO_0_Probe+0x11e>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d018      	beq.n	8006942 <LSM6DSO_0_Probe+0x11e>
 8006910:	7a3b      	ldrb	r3, [r7, #8]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d115      	bne.n	8006942 <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006916:	4b1d      	ldr	r3, [pc, #116]	; (800698c <LSM6DSO_0_Probe+0x168>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	4a1d      	ldr	r2, [pc, #116]	; (8006990 <LSM6DSO_0_Probe+0x16c>)
 800691c:	491e      	ldr	r1, [pc, #120]	; (8006998 <LSM6DSO_0_Probe+0x174>)
 800691e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8006922:	4b18      	ldr	r3, [pc, #96]	; (8006984 <LSM6DSO_0_Probe+0x160>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a15      	ldr	r2, [pc, #84]	; (8006980 <LSM6DSO_0_Probe+0x15c>)
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	4610      	mov	r0, r2
 800692e:	4798      	blx	r3
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006936:	f06f 0304 	mvn.w	r3, #4
 800693a:	647b      	str	r3, [r7, #68]	; 0x44
 800693c:	e001      	b.n	8006942 <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800693e:	2300      	movs	r3, #0
 8006940:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006944:	2b00      	cmp	r3, #0
 8006946:	d107      	bne.n	8006958 <LSM6DSO_0_Probe+0x134>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f003 0304 	and.w	r3, r3, #4
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006952:	f06f 0304 	mvn.w	r3, #4
 8006956:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800695a:	4618      	mov	r0, r3
 800695c:	3748      	adds	r7, #72	; 0x48
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	08001aed 	.word	0x08001aed
 8006968:	08001b51 	.word	0x08001b51
 800696c:	08001c05 	.word	0x08001c05
 8006970:	08001ba1 	.word	0x08001ba1
 8006974:	08001c69 	.word	0x08001c69
 8006978:	200003b8 	.word	0x200003b8
 800697c:	200003ac 	.word	0x200003ac
 8006980:	20000370 	.word	0x20000370
 8006984:	200003a0 	.word	0x200003a0
 8006988:	20000078 	.word	0x20000078
 800698c:	200000d0 	.word	0x200000d0
 8006990:	2000037c 	.word	0x2000037c
 8006994:	200000ac 	.word	0x200000ac
 8006998:	20000088 	.word	0x20000088

0800699c <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b092      	sub	sp, #72	; 0x48
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 80069a8:	2300      	movs	r3, #0
 80069aa:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 80069ac:	2333      	movs	r3, #51	; 0x33
 80069ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 80069b2:	4b3f      	ldr	r3, [pc, #252]	; (8006ab0 <LIS2DW12_0_Probe+0x114>)
 80069b4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80069b6:	4b3f      	ldr	r3, [pc, #252]	; (8006ab4 <LIS2DW12_0_Probe+0x118>)
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80069ba:	4b3f      	ldr	r3, [pc, #252]	; (8006ab8 <LIS2DW12_0_Probe+0x11c>)
 80069bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80069be:	4b3f      	ldr	r3, [pc, #252]	; (8006abc <LIS2DW12_0_Probe+0x120>)
 80069c0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 80069c2:	4b3f      	ldr	r3, [pc, #252]	; (8006ac0 <LIS2DW12_0_Probe+0x124>)
 80069c4:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 80069c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069ca:	4619      	mov	r1, r3
 80069cc:	483d      	ldr	r0, [pc, #244]	; (8006ac4 <LIS2DW12_0_Probe+0x128>)
 80069ce:	f7fb fa91 	bl	8001ef4 <LIS2DW12_RegisterBusIO>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80069d8:	f06f 0306 	mvn.w	r3, #6
 80069dc:	647b      	str	r3, [r7, #68]	; 0x44
 80069de:	e062      	b.n	8006aa6 <LIS2DW12_0_Probe+0x10a>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 80069e0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80069e4:	4619      	mov	r1, r3
 80069e6:	4837      	ldr	r0, [pc, #220]	; (8006ac4 <LIS2DW12_0_Probe+0x128>)
 80069e8:	f7fb fb6e 	bl	80020c8 <LIS2DW12_ReadID>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80069f2:	f06f 0306 	mvn.w	r3, #6
 80069f6:	647b      	str	r3, [r7, #68]	; 0x44
 80069f8:	e055      	b.n	8006aa6 <LIS2DW12_0_Probe+0x10a>
  }
  else if (id != LIS2DW12_ID)
 80069fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069fe:	2b44      	cmp	r3, #68	; 0x44
 8006a00:	d003      	beq.n	8006a0a <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006a02:	f06f 0306 	mvn.w	r3, #6
 8006a06:	647b      	str	r3, [r7, #68]	; 0x44
 8006a08:	e04d      	b.n	8006aa6 <LIS2DW12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8006a0a:	f107 0308 	add.w	r3, r7, #8
 8006a0e:	4619      	mov	r1, r3
 8006a10:	482c      	ldr	r0, [pc, #176]	; (8006ac4 <LIS2DW12_0_Probe+0x128>)
 8006a12:	f7fb fb6f 	bl	80020f4 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006a16:	7a7b      	ldrb	r3, [r7, #9]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	7a3b      	ldrb	r3, [r7, #8]
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	7abb      	ldrb	r3, [r7, #10]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4313      	orrs	r3, r2
 8006a26:	4a28      	ldr	r2, [pc, #160]	; (8006ac8 <LIS2DW12_0_Probe+0x12c>)
 8006a28:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8006a2a:	4b28      	ldr	r3, [pc, #160]	; (8006acc <LIS2DW12_0_Probe+0x130>)
 8006a2c:	4a25      	ldr	r2, [pc, #148]	; (8006ac4 <LIS2DW12_0_Probe+0x128>)
 8006a2e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8006a30:	4b27      	ldr	r3, [pc, #156]	; (8006ad0 <LIS2DW12_0_Probe+0x134>)
 8006a32:	4a28      	ldr	r2, [pc, #160]	; (8006ad4 <LIS2DW12_0_Probe+0x138>)
 8006a34:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8006a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d11e      	bne.n	8006a7a <LIS2DW12_0_Probe+0xde>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d019      	beq.n	8006a7a <LIS2DW12_0_Probe+0xde>
 8006a46:	7a3b      	ldrb	r3, [r7, #8]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d116      	bne.n	8006a7a <LIS2DW12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006a4c:	4b22      	ldr	r3, [pc, #136]	; (8006ad8 <LIS2DW12_0_Probe+0x13c>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	4a22      	ldr	r2, [pc, #136]	; (8006adc <LIS2DW12_0_Probe+0x140>)
 8006a52:	3303      	adds	r3, #3
 8006a54:	4922      	ldr	r1, [pc, #136]	; (8006ae0 <LIS2DW12_0_Probe+0x144>)
 8006a56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8006a5a:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <LIS2DW12_0_Probe+0x134>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a1a      	ldr	r2, [pc, #104]	; (8006acc <LIS2DW12_0_Probe+0x130>)
 8006a62:	6852      	ldr	r2, [r2, #4]
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <LIS2DW12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a6e:	f06f 0304 	mvn.w	r3, #4
 8006a72:	647b      	str	r3, [r7, #68]	; 0x44
 8006a74:	e001      	b.n	8006a7a <LIS2DW12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006a76:	2300      	movs	r3, #0
 8006a78:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d107      	bne.n	8006a90 <LIS2DW12_0_Probe+0xf4>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <LIS2DW12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a8a:	f06f 0304 	mvn.w	r3, #4
 8006a8e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d107      	bne.n	8006aa6 <LIS2DW12_0_Probe+0x10a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <LIS2DW12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006aa0:	f06f 0304 	mvn.w	r3, #4
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3748      	adds	r7, #72	; 0x48
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	08001aed 	.word	0x08001aed
 8006ab4:	08001b51 	.word	0x08001b51
 8006ab8:	08001c05 	.word	0x08001c05
 8006abc:	08001ba1 	.word	0x08001ba1
 8006ac0:	08001c69 	.word	0x08001c69
 8006ac4:	200003e8 	.word	0x200003e8
 8006ac8:	200003ac 	.word	0x200003ac
 8006acc:	20000370 	.word	0x20000370
 8006ad0:	200003a0 	.word	0x200003a0
 8006ad4:	20000010 	.word	0x20000010
 8006ad8:	200000d0 	.word	0x200000d0
 8006adc:	2000037c 	.word	0x2000037c
 8006ae0:	20000020 	.word	0x20000020

08006ae4 <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b092      	sub	sp, #72	; 0x48
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8006aec:	2300      	movs	r3, #0
 8006aee:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8006af0:	2300      	movs	r3, #0
 8006af2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8006af4:	233d      	movs	r3, #61	; 0x3d
 8006af6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8006afa:	4b3f      	ldr	r3, [pc, #252]	; (8006bf8 <LIS2MDL_0_Probe+0x114>)
 8006afc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8006afe:	4b3f      	ldr	r3, [pc, #252]	; (8006bfc <LIS2MDL_0_Probe+0x118>)
 8006b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8006b02:	4b3f      	ldr	r3, [pc, #252]	; (8006c00 <LIS2MDL_0_Probe+0x11c>)
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8006b06:	4b3f      	ldr	r3, [pc, #252]	; (8006c04 <LIS2MDL_0_Probe+0x120>)
 8006b08:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8006b0a:	4b3f      	ldr	r3, [pc, #252]	; (8006c08 <LIS2MDL_0_Probe+0x124>)
 8006b0c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8006b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b12:	4619      	mov	r1, r3
 8006b14:	483d      	ldr	r0, [pc, #244]	; (8006c0c <LIS2MDL_0_Probe+0x128>)
 8006b16:	f7fc fd3d 	bl	8003594 <LIS2MDL_RegisterBusIO>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006b20:	f06f 0306 	mvn.w	r3, #6
 8006b24:	647b      	str	r3, [r7, #68]	; 0x44
 8006b26:	e062      	b.n	8006bee <LIS2MDL_0_Probe+0x10a>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8006b28:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4837      	ldr	r0, [pc, #220]	; (8006c0c <LIS2MDL_0_Probe+0x128>)
 8006b30:	f7fc fe48 	bl	80037c4 <LIS2MDL_ReadID>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006b3a:	f06f 0306 	mvn.w	r3, #6
 8006b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b40:	e055      	b.n	8006bee <LIS2MDL_0_Probe+0x10a>
  }
  else if (id != LIS2MDL_ID)
 8006b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b46:	2b40      	cmp	r3, #64	; 0x40
 8006b48:	d003      	beq.n	8006b52 <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006b4a:	f06f 0306 	mvn.w	r3, #6
 8006b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b50:	e04d      	b.n	8006bee <LIS2MDL_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8006b52:	f107 0308 	add.w	r3, r7, #8
 8006b56:	4619      	mov	r1, r3
 8006b58:	482c      	ldr	r0, [pc, #176]	; (8006c0c <LIS2MDL_0_Probe+0x128>)
 8006b5a:	f7fc fe59 	bl	8003810 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8006b5e:	7a7b      	ldrb	r3, [r7, #9]
 8006b60:	461a      	mov	r2, r3
 8006b62:	7a3b      	ldrb	r3, [r7, #8]
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	431a      	orrs	r2, r3
 8006b68:	7abb      	ldrb	r3, [r7, #10]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	4a28      	ldr	r2, [pc, #160]	; (8006c10 <LIS2MDL_0_Probe+0x12c>)
 8006b70:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8006b72:	4b28      	ldr	r3, [pc, #160]	; (8006c14 <LIS2MDL_0_Probe+0x130>)
 8006b74:	4a25      	ldr	r2, [pc, #148]	; (8006c0c <LIS2MDL_0_Probe+0x128>)
 8006b76:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8006b78:	4b27      	ldr	r3, [pc, #156]	; (8006c18 <LIS2MDL_0_Probe+0x134>)
 8006b7a:	4a28      	ldr	r2, [pc, #160]	; (8006c1c <LIS2MDL_0_Probe+0x138>)
 8006b7c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d11e      	bne.n	8006bc2 <LIS2MDL_0_Probe+0xde>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f003 0304 	and.w	r3, r3, #4
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d019      	beq.n	8006bc2 <LIS2MDL_0_Probe+0xde>
 8006b8e:	7abb      	ldrb	r3, [r7, #10]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d116      	bne.n	8006bc2 <LIS2MDL_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006b94:	4b22      	ldr	r3, [pc, #136]	; (8006c20 <LIS2MDL_0_Probe+0x13c>)
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	4a22      	ldr	r2, [pc, #136]	; (8006c24 <LIS2MDL_0_Probe+0x140>)
 8006b9a:	3306      	adds	r3, #6
 8006b9c:	4922      	ldr	r1, [pc, #136]	; (8006c28 <LIS2MDL_0_Probe+0x144>)
 8006b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8006ba2:	4b1d      	ldr	r3, [pc, #116]	; (8006c18 <LIS2MDL_0_Probe+0x134>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a1a      	ldr	r2, [pc, #104]	; (8006c14 <LIS2MDL_0_Probe+0x130>)
 8006baa:	6892      	ldr	r2, [r2, #8]
 8006bac:	4610      	mov	r0, r2
 8006bae:	4798      	blx	r3
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <LIS2MDL_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006bb6:	f06f 0304 	mvn.w	r3, #4
 8006bba:	647b      	str	r3, [r7, #68]	; 0x44
 8006bbc:	e001      	b.n	8006bc2 <LIS2MDL_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d107      	bne.n	8006bd8 <LIS2MDL_0_Probe+0xf4>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <LIS2MDL_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006bd2:	f06f 0304 	mvn.w	r3, #4
 8006bd6:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d107      	bne.n	8006bee <LIS2MDL_0_Probe+0x10a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <LIS2MDL_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006be8:	f06f 0304 	mvn.w	r3, #4
 8006bec:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3748      	adds	r7, #72	; 0x48
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	08001aed 	.word	0x08001aed
 8006bfc:	08001b51 	.word	0x08001b51
 8006c00:	08001c05 	.word	0x08001c05
 8006c04:	08001ba1 	.word	0x08001ba1
 8006c08:	08001c69 	.word	0x08001c69
 8006c0c:	2000041c 	.word	0x2000041c
 8006c10:	200003ac 	.word	0x200003ac
 8006c14:	20000370 	.word	0x20000370
 8006c18:	200003a0 	.word	0x200003a0
 8006c1c:	20000044 	.word	0x20000044
 8006c20:	200000d0 	.word	0x200000d0
 8006c24:	2000037c 	.word	0x2000037c
 8006c28:	20000054 	.word	0x20000054

08006c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c30:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <SystemInit+0x20>)
 8006c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c36:	4a05      	ldr	r2, [pc, #20]	; (8006c4c <SystemInit+0x20>)
 8006c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006c40:	bf00      	nop
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	e000ed00 	.word	0xe000ed00

08006c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006c54:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <HAL_Init+0x40>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a0d      	ldr	r2, [pc, #52]	; (8006c90 <HAL_Init+0x40>)
 8006c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c60:	4b0b      	ldr	r3, [pc, #44]	; (8006c90 <HAL_Init+0x40>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a0a      	ldr	r2, [pc, #40]	; (8006c90 <HAL_Init+0x40>)
 8006c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c6c:	4b08      	ldr	r3, [pc, #32]	; (8006c90 <HAL_Init+0x40>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a07      	ldr	r2, [pc, #28]	; (8006c90 <HAL_Init+0x40>)
 8006c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c78:	2003      	movs	r0, #3
 8006c7a:	f000 f94f 	bl	8006f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c7e:	2000      	movs	r0, #0
 8006c80:	f000 f808 	bl	8006c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c84:	f7fa fcfc 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40023c00 	.word	0x40023c00

08006c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c9c:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <HAL_InitTick+0x54>)
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	4b12      	ldr	r3, [pc, #72]	; (8006cec <HAL_InitTick+0x58>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 f967 	bl	8006f86 <HAL_SYSTICK_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e00e      	b.n	8006ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b0f      	cmp	r3, #15
 8006cc6:	d80a      	bhi.n	8006cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006cc8:	2200      	movs	r2, #0
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	f000 f92f 	bl	8006f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006cd4:	4a06      	ldr	r2, [pc, #24]	; (8006cf0 <HAL_InitTick+0x5c>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	e000      	b.n	8006ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	200000e4 	.word	0x200000e4
 8006cec:	200000ec 	.word	0x200000ec
 8006cf0:	200000e8 	.word	0x200000e8

08006cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006cf8:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <HAL_IncTick+0x20>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <HAL_IncTick+0x24>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4413      	add	r3, r2
 8006d04:	4a04      	ldr	r2, [pc, #16]	; (8006d18 <HAL_IncTick+0x24>)
 8006d06:	6013      	str	r3, [r2, #0]
}
 8006d08:	bf00      	nop
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	200000ec 	.word	0x200000ec
 8006d18:	20000448 	.word	0x20000448

08006d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8006d20:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <HAL_GetTick+0x14>)
 8006d22:	681b      	ldr	r3, [r3, #0]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000448 	.word	0x20000448

08006d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d3c:	f7ff ffee 	bl	8006d1c <HAL_GetTick>
 8006d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d005      	beq.n	8006d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <HAL_Delay+0x44>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006d5a:	bf00      	nop
 8006d5c:	f7ff ffde 	bl	8006d1c <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d8f7      	bhi.n	8006d5c <HAL_Delay+0x28>
  {
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	200000ec 	.word	0x200000ec

08006d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d8c:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dae:	4a04      	ldr	r2, [pc, #16]	; (8006dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	60d3      	str	r3, [r2, #12]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	e000ed00 	.word	0xe000ed00

08006dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006dc8:	4b04      	ldr	r3, [pc, #16]	; (8006ddc <__NVIC_GetPriorityGrouping+0x18>)
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	0a1b      	lsrs	r3, r3, #8
 8006dce:	f003 0307 	and.w	r3, r3, #7
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	e000ed00 	.word	0xe000ed00

08006de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	db0b      	blt.n	8006e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	f003 021f 	and.w	r2, r3, #31
 8006df8:	4907      	ldr	r1, [pc, #28]	; (8006e18 <__NVIC_EnableIRQ+0x38>)
 8006dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	2001      	movs	r0, #1
 8006e02:	fa00 f202 	lsl.w	r2, r0, r2
 8006e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	e000e100 	.word	0xe000e100

08006e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	6039      	str	r1, [r7, #0]
 8006e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	db0a      	blt.n	8006e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	490c      	ldr	r1, [pc, #48]	; (8006e68 <__NVIC_SetPriority+0x4c>)
 8006e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e3a:	0112      	lsls	r2, r2, #4
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	440b      	add	r3, r1
 8006e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e44:	e00a      	b.n	8006e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	4908      	ldr	r1, [pc, #32]	; (8006e6c <__NVIC_SetPriority+0x50>)
 8006e4c:	79fb      	ldrb	r3, [r7, #7]
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	3b04      	subs	r3, #4
 8006e54:	0112      	lsls	r2, r2, #4
 8006e56:	b2d2      	uxtb	r2, r2
 8006e58:	440b      	add	r3, r1
 8006e5a:	761a      	strb	r2, [r3, #24]
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	e000e100 	.word	0xe000e100
 8006e6c:	e000ed00 	.word	0xe000ed00

08006e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b089      	sub	sp, #36	; 0x24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f003 0307 	and.w	r3, r3, #7
 8006e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f1c3 0307 	rsb	r3, r3, #7
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	bf28      	it	cs
 8006e8e:	2304      	movcs	r3, #4
 8006e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	3304      	adds	r3, #4
 8006e96:	2b06      	cmp	r3, #6
 8006e98:	d902      	bls.n	8006ea0 <NVIC_EncodePriority+0x30>
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	3b03      	subs	r3, #3
 8006e9e:	e000      	b.n	8006ea2 <NVIC_EncodePriority+0x32>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	43da      	mvns	r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	401a      	ands	r2, r3
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec2:	43d9      	mvns	r1, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ec8:	4313      	orrs	r3, r2
         );
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3724      	adds	r7, #36	; 0x24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
	...

08006ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ee8:	d301      	bcc.n	8006eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006eea:	2301      	movs	r3, #1
 8006eec:	e00f      	b.n	8006f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006eee:	4a0a      	ldr	r2, [pc, #40]	; (8006f18 <SysTick_Config+0x40>)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ef6:	210f      	movs	r1, #15
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8006efc:	f7ff ff8e 	bl	8006e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f00:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <SysTick_Config+0x40>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f06:	4b04      	ldr	r3, [pc, #16]	; (8006f18 <SysTick_Config+0x40>)
 8006f08:	2207      	movs	r2, #7
 8006f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	e000e010 	.word	0xe000e010

08006f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff ff29 	bl	8006d7c <__NVIC_SetPriorityGrouping>
}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b086      	sub	sp, #24
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	4603      	mov	r3, r0
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
 8006f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f44:	f7ff ff3e 	bl	8006dc4 <__NVIC_GetPriorityGrouping>
 8006f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	68b9      	ldr	r1, [r7, #8]
 8006f4e:	6978      	ldr	r0, [r7, #20]
 8006f50:	f7ff ff8e 	bl	8006e70 <NVIC_EncodePriority>
 8006f54:	4602      	mov	r2, r0
 8006f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff ff5d 	bl	8006e1c <__NVIC_SetPriority>
}
 8006f62:	bf00      	nop
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	4603      	mov	r3, r0
 8006f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff ff31 	bl	8006de0 <__NVIC_EnableIRQ>
}
 8006f7e:	bf00      	nop
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff ffa2 	bl	8006ed8 <SysTick_Config>
 8006f94:	4603      	mov	r3, r0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b087      	sub	sp, #28
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	607a      	str	r2, [r7, #4]
 8006faa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8006fb0:	7afb      	ldrb	r3, [r7, #11]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d103      	bne.n	8006fbe <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	605a      	str	r2, [r3, #4]
      break;
 8006fbc:	e002      	b.n	8006fc4 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc2:	bf00      	nop
  }

  return status;
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b083      	sub	sp, #12
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e003      	b.n	8006fee <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006fec:	2300      	movs	r3, #0
  }
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
	...

08006ffc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	2201      	movs	r2, #1
 800700e:	fa02 f303 	lsl.w	r3, r2, r3
 8007012:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8007014:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <HAL_EXTI_IRQHandler+0x44>)
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	4013      	ands	r3, r2
 800701c:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d009      	beq.n	8007038 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8007024:	4a06      	ldr	r2, [pc, #24]	; (8007040 <HAL_EXTI_IRQHandler+0x44>)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	4798      	blx	r3
    }
  }
}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40013c00 	.word	0x40013c00

08007044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007044:	b480      	push	{r7}
 8007046:	b089      	sub	sp, #36	; 0x24
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007052:	2300      	movs	r3, #0
 8007054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007056:	2300      	movs	r3, #0
 8007058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800705a:	2300      	movs	r3, #0
 800705c:	61fb      	str	r3, [r7, #28]
 800705e:	e159      	b.n	8007314 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007060:	2201      	movs	r2, #1
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4013      	ands	r3, r2
 8007072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	429a      	cmp	r2, r3
 800707a:	f040 8148 	bne.w	800730e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	2b01      	cmp	r3, #1
 8007088:	d005      	beq.n	8007096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007092:	2b02      	cmp	r3, #2
 8007094:	d130      	bne.n	80070f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	2203      	movs	r2, #3
 80070a2:	fa02 f303 	lsl.w	r3, r2, r3
 80070a6:	43db      	mvns	r3, r3
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	4013      	ands	r3, r2
 80070ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	4313      	orrs	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070cc:	2201      	movs	r2, #1
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	fa02 f303 	lsl.w	r3, r2, r3
 80070d4:	43db      	mvns	r3, r3
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	4013      	ands	r3, r2
 80070da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	091b      	lsrs	r3, r3, #4
 80070e2:	f003 0201 	and.w	r2, r3, #1
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f003 0303 	and.w	r3, r3, #3
 8007100:	2b03      	cmp	r3, #3
 8007102:	d017      	beq.n	8007134 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	2203      	movs	r2, #3
 8007110:	fa02 f303 	lsl.w	r3, r2, r3
 8007114:	43db      	mvns	r3, r3
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	4013      	ands	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	fa02 f303 	lsl.w	r3, r2, r3
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	4313      	orrs	r3, r2
 800712c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f003 0303 	and.w	r3, r3, #3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d123      	bne.n	8007188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	08da      	lsrs	r2, r3, #3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3208      	adds	r2, #8
 8007148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	220f      	movs	r2, #15
 8007158:	fa02 f303 	lsl.w	r3, r2, r3
 800715c:	43db      	mvns	r3, r3
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	4013      	ands	r3, r2
 8007162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	691a      	ldr	r2, [r3, #16]
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	fa02 f303 	lsl.w	r3, r2, r3
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	4313      	orrs	r3, r2
 8007178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	08da      	lsrs	r2, r3, #3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3208      	adds	r2, #8
 8007182:	69b9      	ldr	r1, [r7, #24]
 8007184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	2203      	movs	r2, #3
 8007194:	fa02 f303 	lsl.w	r3, r2, r3
 8007198:	43db      	mvns	r3, r3
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	4013      	ands	r3, r2
 800719e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f003 0203 	and.w	r2, r3, #3
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	fa02 f303 	lsl.w	r3, r2, r3
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80a2 	beq.w	800730e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	4b57      	ldr	r3, [pc, #348]	; (800732c <HAL_GPIO_Init+0x2e8>)
 80071d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d2:	4a56      	ldr	r2, [pc, #344]	; (800732c <HAL_GPIO_Init+0x2e8>)
 80071d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071d8:	6453      	str	r3, [r2, #68]	; 0x44
 80071da:	4b54      	ldr	r3, [pc, #336]	; (800732c <HAL_GPIO_Init+0x2e8>)
 80071dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071e6:	4a52      	ldr	r2, [pc, #328]	; (8007330 <HAL_GPIO_Init+0x2ec>)
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	089b      	lsrs	r3, r3, #2
 80071ec:	3302      	adds	r3, #2
 80071ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	f003 0303 	and.w	r3, r3, #3
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	220f      	movs	r2, #15
 80071fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007202:	43db      	mvns	r3, r3
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	4013      	ands	r3, r2
 8007208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a49      	ldr	r2, [pc, #292]	; (8007334 <HAL_GPIO_Init+0x2f0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d019      	beq.n	8007246 <HAL_GPIO_Init+0x202>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a48      	ldr	r2, [pc, #288]	; (8007338 <HAL_GPIO_Init+0x2f4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d013      	beq.n	8007242 <HAL_GPIO_Init+0x1fe>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a47      	ldr	r2, [pc, #284]	; (800733c <HAL_GPIO_Init+0x2f8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00d      	beq.n	800723e <HAL_GPIO_Init+0x1fa>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a46      	ldr	r2, [pc, #280]	; (8007340 <HAL_GPIO_Init+0x2fc>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d007      	beq.n	800723a <HAL_GPIO_Init+0x1f6>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a45      	ldr	r2, [pc, #276]	; (8007344 <HAL_GPIO_Init+0x300>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d101      	bne.n	8007236 <HAL_GPIO_Init+0x1f2>
 8007232:	2304      	movs	r3, #4
 8007234:	e008      	b.n	8007248 <HAL_GPIO_Init+0x204>
 8007236:	2307      	movs	r3, #7
 8007238:	e006      	b.n	8007248 <HAL_GPIO_Init+0x204>
 800723a:	2303      	movs	r3, #3
 800723c:	e004      	b.n	8007248 <HAL_GPIO_Init+0x204>
 800723e:	2302      	movs	r3, #2
 8007240:	e002      	b.n	8007248 <HAL_GPIO_Init+0x204>
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <HAL_GPIO_Init+0x204>
 8007246:	2300      	movs	r3, #0
 8007248:	69fa      	ldr	r2, [r7, #28]
 800724a:	f002 0203 	and.w	r2, r2, #3
 800724e:	0092      	lsls	r2, r2, #2
 8007250:	4093      	lsls	r3, r2
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	4313      	orrs	r3, r2
 8007256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007258:	4935      	ldr	r1, [pc, #212]	; (8007330 <HAL_GPIO_Init+0x2ec>)
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	089b      	lsrs	r3, r3, #2
 800725e:	3302      	adds	r3, #2
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007266:	4b38      	ldr	r3, [pc, #224]	; (8007348 <HAL_GPIO_Init+0x304>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	43db      	mvns	r3, r3
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	4013      	ands	r3, r2
 8007274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800728a:	4a2f      	ldr	r2, [pc, #188]	; (8007348 <HAL_GPIO_Init+0x304>)
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007290:	4b2d      	ldr	r3, [pc, #180]	; (8007348 <HAL_GPIO_Init+0x304>)
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	43db      	mvns	r3, r3
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	4013      	ands	r3, r2
 800729e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072b4:	4a24      	ldr	r2, [pc, #144]	; (8007348 <HAL_GPIO_Init+0x304>)
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80072ba:	4b23      	ldr	r3, [pc, #140]	; (8007348 <HAL_GPIO_Init+0x304>)
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	43db      	mvns	r3, r3
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	4013      	ands	r3, r2
 80072c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	4313      	orrs	r3, r2
 80072dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80072de:	4a1a      	ldr	r2, [pc, #104]	; (8007348 <HAL_GPIO_Init+0x304>)
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072e4:	4b18      	ldr	r3, [pc, #96]	; (8007348 <HAL_GPIO_Init+0x304>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	43db      	mvns	r3, r3
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	4013      	ands	r3, r2
 80072f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007308:	4a0f      	ldr	r2, [pc, #60]	; (8007348 <HAL_GPIO_Init+0x304>)
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	3301      	adds	r3, #1
 8007312:	61fb      	str	r3, [r7, #28]
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	2b0f      	cmp	r3, #15
 8007318:	f67f aea2 	bls.w	8007060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800731c:	bf00      	nop
 800731e:	bf00      	nop
 8007320:	3724      	adds	r7, #36	; 0x24
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40023800 	.word	0x40023800
 8007330:	40013800 	.word	0x40013800
 8007334:	40020000 	.word	0x40020000
 8007338:	40020400 	.word	0x40020400
 800733c:	40020800 	.word	0x40020800
 8007340:	40020c00 	.word	0x40020c00
 8007344:	40021000 	.word	0x40021000
 8007348:	40013c00 	.word	0x40013c00

0800734c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007356:	2300      	movs	r3, #0
 8007358:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800735e:	2300      	movs	r3, #0
 8007360:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007362:	2300      	movs	r3, #0
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	e0bb      	b.n	80074e0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007368:	2201      	movs	r2, #1
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	fa02 f303 	lsl.w	r3, r2, r3
 8007370:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	4013      	ands	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	429a      	cmp	r2, r3
 8007380:	f040 80ab 	bne.w	80074da <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007384:	4a5c      	ldr	r2, [pc, #368]	; (80074f8 <HAL_GPIO_DeInit+0x1ac>)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	089b      	lsrs	r3, r3, #2
 800738a:	3302      	adds	r3, #2
 800738c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007390:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f003 0303 	and.w	r3, r3, #3
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	220f      	movs	r2, #15
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	4013      	ands	r3, r2
 80073a4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a54      	ldr	r2, [pc, #336]	; (80074fc <HAL_GPIO_DeInit+0x1b0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d019      	beq.n	80073e2 <HAL_GPIO_DeInit+0x96>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a53      	ldr	r2, [pc, #332]	; (8007500 <HAL_GPIO_DeInit+0x1b4>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d013      	beq.n	80073de <HAL_GPIO_DeInit+0x92>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a52      	ldr	r2, [pc, #328]	; (8007504 <HAL_GPIO_DeInit+0x1b8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00d      	beq.n	80073da <HAL_GPIO_DeInit+0x8e>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a51      	ldr	r2, [pc, #324]	; (8007508 <HAL_GPIO_DeInit+0x1bc>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d007      	beq.n	80073d6 <HAL_GPIO_DeInit+0x8a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a50      	ldr	r2, [pc, #320]	; (800750c <HAL_GPIO_DeInit+0x1c0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d101      	bne.n	80073d2 <HAL_GPIO_DeInit+0x86>
 80073ce:	2304      	movs	r3, #4
 80073d0:	e008      	b.n	80073e4 <HAL_GPIO_DeInit+0x98>
 80073d2:	2307      	movs	r3, #7
 80073d4:	e006      	b.n	80073e4 <HAL_GPIO_DeInit+0x98>
 80073d6:	2303      	movs	r3, #3
 80073d8:	e004      	b.n	80073e4 <HAL_GPIO_DeInit+0x98>
 80073da:	2302      	movs	r3, #2
 80073dc:	e002      	b.n	80073e4 <HAL_GPIO_DeInit+0x98>
 80073de:	2301      	movs	r3, #1
 80073e0:	e000      	b.n	80073e4 <HAL_GPIO_DeInit+0x98>
 80073e2:	2300      	movs	r3, #0
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	f002 0203 	and.w	r2, r2, #3
 80073ea:	0092      	lsls	r2, r2, #2
 80073ec:	4093      	lsls	r3, r2
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d132      	bne.n	800745a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80073f4:	4b46      	ldr	r3, [pc, #280]	; (8007510 <HAL_GPIO_DeInit+0x1c4>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	43db      	mvns	r3, r3
 80073fc:	4944      	ldr	r1, [pc, #272]	; (8007510 <HAL_GPIO_DeInit+0x1c4>)
 80073fe:	4013      	ands	r3, r2
 8007400:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007402:	4b43      	ldr	r3, [pc, #268]	; (8007510 <HAL_GPIO_DeInit+0x1c4>)
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	43db      	mvns	r3, r3
 800740a:	4941      	ldr	r1, [pc, #260]	; (8007510 <HAL_GPIO_DeInit+0x1c4>)
 800740c:	4013      	ands	r3, r2
 800740e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007410:	4b3f      	ldr	r3, [pc, #252]	; (8007510 <HAL_GPIO_DeInit+0x1c4>)
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	43db      	mvns	r3, r3
 8007418:	493d      	ldr	r1, [pc, #244]	; (8007510 <HAL_GPIO_DeInit+0x1c4>)
 800741a:	4013      	ands	r3, r2
 800741c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800741e:	4b3c      	ldr	r3, [pc, #240]	; (8007510 <HAL_GPIO_DeInit+0x1c4>)
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	43db      	mvns	r3, r3
 8007426:	493a      	ldr	r1, [pc, #232]	; (8007510 <HAL_GPIO_DeInit+0x1c4>)
 8007428:	4013      	ands	r3, r2
 800742a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	220f      	movs	r2, #15
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800743c:	4a2e      	ldr	r2, [pc, #184]	; (80074f8 <HAL_GPIO_DeInit+0x1ac>)
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	089b      	lsrs	r3, r3, #2
 8007442:	3302      	adds	r3, #2
 8007444:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	43da      	mvns	r2, r3
 800744c:	482a      	ldr	r0, [pc, #168]	; (80074f8 <HAL_GPIO_DeInit+0x1ac>)
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	089b      	lsrs	r3, r3, #2
 8007452:	400a      	ands	r2, r1
 8007454:	3302      	adds	r3, #2
 8007456:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	2103      	movs	r1, #3
 8007464:	fa01 f303 	lsl.w	r3, r1, r3
 8007468:	43db      	mvns	r3, r3
 800746a:	401a      	ands	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	08da      	lsrs	r2, r3, #3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3208      	adds	r2, #8
 8007478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	220f      	movs	r2, #15
 8007486:	fa02 f303 	lsl.w	r3, r2, r3
 800748a:	43db      	mvns	r3, r3
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	08d2      	lsrs	r2, r2, #3
 8007490:	4019      	ands	r1, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3208      	adds	r2, #8
 8007496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	2103      	movs	r1, #3
 80074a4:	fa01 f303 	lsl.w	r3, r1, r3
 80074a8:	43db      	mvns	r3, r3
 80074aa:	401a      	ands	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	2101      	movs	r1, #1
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	fa01 f303 	lsl.w	r3, r1, r3
 80074bc:	43db      	mvns	r3, r3
 80074be:	401a      	ands	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	005b      	lsls	r3, r3, #1
 80074cc:	2103      	movs	r1, #3
 80074ce:	fa01 f303 	lsl.w	r3, r1, r3
 80074d2:	43db      	mvns	r3, r3
 80074d4:	401a      	ands	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	3301      	adds	r3, #1
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2b0f      	cmp	r3, #15
 80074e4:	f67f af40 	bls.w	8007368 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40013800 	.word	0x40013800
 80074fc:	40020000 	.word	0x40020000
 8007500:	40020400 	.word	0x40020400
 8007504:	40020800 	.word	0x40020800
 8007508:	40020c00 	.word	0x40020c00
 800750c:	40021000 	.word	0x40021000
 8007510:	40013c00 	.word	0x40013c00

08007514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	887b      	ldrh	r3, [r7, #2]
 8007526:	4013      	ands	r3, r2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800752c:	2301      	movs	r3, #1
 800752e:	73fb      	strb	r3, [r7, #15]
 8007530:	e001      	b.n	8007536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007536:	7bfb      	ldrb	r3, [r7, #15]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	807b      	strh	r3, [r7, #2]
 8007550:	4613      	mov	r3, r2
 8007552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007554:	787b      	ldrb	r3, [r7, #1]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800755a:	887a      	ldrh	r2, [r7, #2]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007560:	e003      	b.n	800756a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007562:	887b      	ldrh	r3, [r7, #2]
 8007564:	041a      	lsls	r2, r3, #16
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	619a      	str	r2, [r3, #24]
}
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
	...

08007578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e12b      	b.n	80077e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d106      	bne.n	80075a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f95d 	bl	800785e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2224      	movs	r2, #36	; 0x24
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 0201 	bic.w	r2, r2, #1
 80075ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80075dc:	f001 fc5a 	bl	8008e94 <HAL_RCC_GetPCLK1Freq>
 80075e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	4a81      	ldr	r2, [pc, #516]	; (80077ec <HAL_I2C_Init+0x274>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d807      	bhi.n	80075fc <HAL_I2C_Init+0x84>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4a80      	ldr	r2, [pc, #512]	; (80077f0 <HAL_I2C_Init+0x278>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	bf94      	ite	ls
 80075f4:	2301      	movls	r3, #1
 80075f6:	2300      	movhi	r3, #0
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	e006      	b.n	800760a <HAL_I2C_Init+0x92>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4a7d      	ldr	r2, [pc, #500]	; (80077f4 <HAL_I2C_Init+0x27c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	bf94      	ite	ls
 8007604:	2301      	movls	r3, #1
 8007606:	2300      	movhi	r3, #0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e0e7      	b.n	80077e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	4a78      	ldr	r2, [pc, #480]	; (80077f8 <HAL_I2C_Init+0x280>)
 8007616:	fba2 2303 	umull	r2, r3, r2, r3
 800761a:	0c9b      	lsrs	r3, r3, #18
 800761c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	430a      	orrs	r2, r1
 8007630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4a6a      	ldr	r2, [pc, #424]	; (80077ec <HAL_I2C_Init+0x274>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d802      	bhi.n	800764c <HAL_I2C_Init+0xd4>
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	3301      	adds	r3, #1
 800764a:	e009      	b.n	8007660 <HAL_I2C_Init+0xe8>
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007652:	fb02 f303 	mul.w	r3, r2, r3
 8007656:	4a69      	ldr	r2, [pc, #420]	; (80077fc <HAL_I2C_Init+0x284>)
 8007658:	fba2 2303 	umull	r2, r3, r2, r3
 800765c:	099b      	lsrs	r3, r3, #6
 800765e:	3301      	adds	r3, #1
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	6812      	ldr	r2, [r2, #0]
 8007664:	430b      	orrs	r3, r1
 8007666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007672:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	495c      	ldr	r1, [pc, #368]	; (80077ec <HAL_I2C_Init+0x274>)
 800767c:	428b      	cmp	r3, r1
 800767e:	d819      	bhi.n	80076b4 <HAL_I2C_Init+0x13c>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	1e59      	subs	r1, r3, #1
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	005b      	lsls	r3, r3, #1
 800768a:	fbb1 f3f3 	udiv	r3, r1, r3
 800768e:	1c59      	adds	r1, r3, #1
 8007690:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007694:	400b      	ands	r3, r1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <HAL_I2C_Init+0x138>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	1e59      	subs	r1, r3, #1
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80076a8:	3301      	adds	r3, #1
 80076aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ae:	e051      	b.n	8007754 <HAL_I2C_Init+0x1dc>
 80076b0:	2304      	movs	r3, #4
 80076b2:	e04f      	b.n	8007754 <HAL_I2C_Init+0x1dc>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d111      	bne.n	80076e0 <HAL_I2C_Init+0x168>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	1e58      	subs	r0, r3, #1
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6859      	ldr	r1, [r3, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	440b      	add	r3, r1
 80076ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80076ce:	3301      	adds	r3, #1
 80076d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	bf0c      	ite	eq
 80076d8:	2301      	moveq	r3, #1
 80076da:	2300      	movne	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	e012      	b.n	8007706 <HAL_I2C_Init+0x18e>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	1e58      	subs	r0, r3, #1
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6859      	ldr	r1, [r3, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	0099      	lsls	r1, r3, #2
 80076f0:	440b      	add	r3, r1
 80076f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80076f6:	3301      	adds	r3, #1
 80076f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	bf0c      	ite	eq
 8007700:	2301      	moveq	r3, #1
 8007702:	2300      	movne	r3, #0
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <HAL_I2C_Init+0x196>
 800770a:	2301      	movs	r3, #1
 800770c:	e022      	b.n	8007754 <HAL_I2C_Init+0x1dc>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10e      	bne.n	8007734 <HAL_I2C_Init+0x1bc>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	1e58      	subs	r0, r3, #1
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6859      	ldr	r1, [r3, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	440b      	add	r3, r1
 8007724:	fbb0 f3f3 	udiv	r3, r0, r3
 8007728:	3301      	adds	r3, #1
 800772a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800772e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007732:	e00f      	b.n	8007754 <HAL_I2C_Init+0x1dc>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	1e58      	subs	r0, r3, #1
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6859      	ldr	r1, [r3, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	440b      	add	r3, r1
 8007742:	0099      	lsls	r1, r3, #2
 8007744:	440b      	add	r3, r1
 8007746:	fbb0 f3f3 	udiv	r3, r0, r3
 800774a:	3301      	adds	r3, #1
 800774c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	6809      	ldr	r1, [r1, #0]
 8007758:	4313      	orrs	r3, r2
 800775a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	69da      	ldr	r2, [r3, #28]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	431a      	orrs	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6911      	ldr	r1, [r2, #16]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	68d2      	ldr	r2, [r2, #12]
 800778e:	4311      	orrs	r1, r2
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6812      	ldr	r2, [r2, #0]
 8007794:	430b      	orrs	r3, r1
 8007796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	695a      	ldr	r2, [r3, #20]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0201 	orr.w	r2, r2, #1
 80077c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	000186a0 	.word	0x000186a0
 80077f0:	001e847f 	.word	0x001e847f
 80077f4:	003d08ff 	.word	0x003d08ff
 80077f8:	431bde83 	.word	0x431bde83
 80077fc:	10624dd3 	.word	0x10624dd3

08007800 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e021      	b.n	8007856 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2224      	movs	r2, #36	; 0x24
 8007816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0201 	bic.w	r2, r2, #1
 8007828:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f821 	bl	8007872 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800785e:	b480      	push	{r7}
 8007860:	b083      	sub	sp, #12
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
	...

08007888 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af02      	add	r7, sp, #8
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	4608      	mov	r0, r1
 8007892:	4611      	mov	r1, r2
 8007894:	461a      	mov	r2, r3
 8007896:	4603      	mov	r3, r0
 8007898:	817b      	strh	r3, [r7, #10]
 800789a:	460b      	mov	r3, r1
 800789c:	813b      	strh	r3, [r7, #8]
 800789e:	4613      	mov	r3, r2
 80078a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078a2:	f7ff fa3b 	bl	8006d1c <HAL_GetTick>
 80078a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	f040 80d9 	bne.w	8007a68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	2319      	movs	r3, #25
 80078bc:	2201      	movs	r2, #1
 80078be:	496d      	ldr	r1, [pc, #436]	; (8007a74 <HAL_I2C_Mem_Write+0x1ec>)
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 fc99 	bl	80081f8 <I2C_WaitOnFlagUntilTimeout>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80078cc:	2302      	movs	r3, #2
 80078ce:	e0cc      	b.n	8007a6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d101      	bne.n	80078de <HAL_I2C_Mem_Write+0x56>
 80078da:	2302      	movs	r3, #2
 80078dc:	e0c5      	b.n	8007a6a <HAL_I2C_Mem_Write+0x1e2>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d007      	beq.n	8007904 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0201 	orr.w	r2, r2, #1
 8007902:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007912:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2221      	movs	r2, #33	; 0x21
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2240      	movs	r2, #64	; 0x40
 8007920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a3a      	ldr	r2, [r7, #32]
 800792e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007934:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4a4d      	ldr	r2, [pc, #308]	; (8007a78 <HAL_I2C_Mem_Write+0x1f0>)
 8007944:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007946:	88f8      	ldrh	r0, [r7, #6]
 8007948:	893a      	ldrh	r2, [r7, #8]
 800794a:	8979      	ldrh	r1, [r7, #10]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	4603      	mov	r3, r0
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fad0 	bl	8007efc <I2C_RequestMemoryWrite>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d052      	beq.n	8007a08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e081      	b.n	8007a6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 fd1a 	bl	80083a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00d      	beq.n	8007992 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	2b04      	cmp	r3, #4
 800797c:	d107      	bne.n	800798e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800798c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e06b      	b.n	8007a6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	781a      	ldrb	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ac:	3b01      	subs	r3, #1
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d11b      	bne.n	8007a08 <HAL_I2C_Mem_Write+0x180>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d017      	beq.n	8007a08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	781a      	ldrb	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f2:	3b01      	subs	r3, #1
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1aa      	bne.n	8007966 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 fd06 	bl	8008426 <I2C_WaitOnBTFFlagUntilTimeout>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00d      	beq.n	8007a3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	d107      	bne.n	8007a38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e016      	b.n	8007a6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2220      	movs	r2, #32
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	e000      	b.n	8007a6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007a68:	2302      	movs	r3, #2
  }
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	00100002 	.word	0x00100002
 8007a78:	ffff0000 	.word	0xffff0000

08007a7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08c      	sub	sp, #48	; 0x30
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	4608      	mov	r0, r1
 8007a86:	4611      	mov	r1, r2
 8007a88:	461a      	mov	r2, r3
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	817b      	strh	r3, [r7, #10]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	813b      	strh	r3, [r7, #8]
 8007a92:	4613      	mov	r3, r2
 8007a94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a96:	f7ff f941 	bl	8006d1c <HAL_GetTick>
 8007a9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	f040 8208 	bne.w	8007eba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	2319      	movs	r3, #25
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	497b      	ldr	r1, [pc, #492]	; (8007ca0 <HAL_I2C_Mem_Read+0x224>)
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 fb9f 	bl	80081f8 <I2C_WaitOnFlagUntilTimeout>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e1fb      	b.n	8007ebc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d101      	bne.n	8007ad2 <HAL_I2C_Mem_Read+0x56>
 8007ace:	2302      	movs	r3, #2
 8007ad0:	e1f4      	b.n	8007ebc <HAL_I2C_Mem_Read+0x440>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d007      	beq.n	8007af8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2222      	movs	r2, #34	; 0x22
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2240      	movs	r2, #64	; 0x40
 8007b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4a5b      	ldr	r2, [pc, #364]	; (8007ca4 <HAL_I2C_Mem_Read+0x228>)
 8007b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b3a:	88f8      	ldrh	r0, [r7, #6]
 8007b3c:	893a      	ldrh	r2, [r7, #8]
 8007b3e:	8979      	ldrh	r1, [r7, #10]
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	9301      	str	r3, [sp, #4]
 8007b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	4603      	mov	r3, r0
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 fa6c 	bl	8008028 <I2C_RequestMemoryRead>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e1b0      	b.n	8007ebc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d113      	bne.n	8007b8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b62:	2300      	movs	r3, #0
 8007b64:	623b      	str	r3, [r7, #32]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	623b      	str	r3, [r7, #32]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	623b      	str	r3, [r7, #32]
 8007b76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	e184      	b.n	8007e94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d11b      	bne.n	8007bca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ba0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	61fb      	str	r3, [r7, #28]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	61fb      	str	r3, [r7, #28]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	61fb      	str	r3, [r7, #28]
 8007bb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	e164      	b.n	8007e94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d11b      	bne.n	8007c0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007be0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	61bb      	str	r3, [r7, #24]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	61bb      	str	r3, [r7, #24]
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	e144      	b.n	8007e94 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	617b      	str	r3, [r7, #20]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	617b      	str	r3, [r7, #20]
 8007c1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c20:	e138      	b.n	8007e94 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	f200 80f1 	bhi.w	8007e0e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d123      	bne.n	8007c7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 fc35 	bl	80084a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e139      	b.n	8007ebc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	691a      	ldr	r2, [r3, #16]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c64:	3b01      	subs	r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	3b01      	subs	r3, #1
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c7a:	e10b      	b.n	8007e94 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d14e      	bne.n	8007d22 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	4906      	ldr	r1, [pc, #24]	; (8007ca8 <HAL_I2C_Mem_Read+0x22c>)
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 fab2 	bl	80081f8 <I2C_WaitOnFlagUntilTimeout>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d008      	beq.n	8007cac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e10e      	b.n	8007ebc <HAL_I2C_Mem_Read+0x440>
 8007c9e:	bf00      	nop
 8007ca0:	00100002 	.word	0x00100002
 8007ca4:	ffff0000 	.word	0xffff0000
 8007ca8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	691a      	ldr	r2, [r3, #16]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	b2d2      	uxtb	r2, r2
 8007cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	691a      	ldr	r2, [r3, #16]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	b2d2      	uxtb	r2, r2
 8007cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	1c5a      	adds	r2, r3, #1
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d20:	e0b8      	b.n	8007e94 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	2200      	movs	r2, #0
 8007d2a:	4966      	ldr	r1, [pc, #408]	; (8007ec4 <HAL_I2C_Mem_Read+0x448>)
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 fa63 	bl	80081f8 <I2C_WaitOnFlagUntilTimeout>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e0bf      	b.n	8007ebc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	691a      	ldr	r2, [r3, #16]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	3b01      	subs	r3, #1
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d84:	2200      	movs	r2, #0
 8007d86:	494f      	ldr	r1, [pc, #316]	; (8007ec4 <HAL_I2C_Mem_Read+0x448>)
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 fa35 	bl	80081f8 <I2C_WaitOnFlagUntilTimeout>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e091      	b.n	8007ebc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	691a      	ldr	r2, [r3, #16]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	b2d2      	uxtb	r2, r2
 8007db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	b2d2      	uxtb	r2, r2
 8007de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df6:	3b01      	subs	r3, #1
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e0c:	e042      	b.n	8007e94 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 fb48 	bl	80084a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e04c      	b.n	8007ebc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	b2d2      	uxtb	r2, r2
 8007e2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	f003 0304 	and.w	r3, r3, #4
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d118      	bne.n	8007e94 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	691a      	ldr	r2, [r3, #16]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	b2d2      	uxtb	r2, r2
 8007e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f47f aec2 	bne.w	8007c22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e000      	b.n	8007ebc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007eba:	2302      	movs	r3, #2
  }
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3728      	adds	r7, #40	; 0x28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	00010004 	.word	0x00010004

08007ec8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed6:	b2db      	uxtb	r3, r3
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	4608      	mov	r0, r1
 8007f06:	4611      	mov	r1, r2
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	817b      	strh	r3, [r7, #10]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	813b      	strh	r3, [r7, #8]
 8007f12:	4613      	mov	r3, r2
 8007f14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 f960 	bl	80081f8 <I2C_WaitOnFlagUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00d      	beq.n	8007f5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f4c:	d103      	bne.n	8007f56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e05f      	b.n	800801a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f5a:	897b      	ldrh	r3, [r7, #10]
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	461a      	mov	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	6a3a      	ldr	r2, [r7, #32]
 8007f6e:	492d      	ldr	r1, [pc, #180]	; (8008024 <I2C_RequestMemoryWrite+0x128>)
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 f998 	bl	80082a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e04c      	b.n	800801a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f80:	2300      	movs	r3, #0
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	617b      	str	r3, [r7, #20]
 8007f94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f98:	6a39      	ldr	r1, [r7, #32]
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 fa02 	bl	80083a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00d      	beq.n	8007fc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	d107      	bne.n	8007fbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e02b      	b.n	800801a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fc2:	88fb      	ldrh	r3, [r7, #6]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d105      	bne.n	8007fd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fc8:	893b      	ldrh	r3, [r7, #8]
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	611a      	str	r2, [r3, #16]
 8007fd2:	e021      	b.n	8008018 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007fd4:	893b      	ldrh	r3, [r7, #8]
 8007fd6:	0a1b      	lsrs	r3, r3, #8
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fe4:	6a39      	ldr	r1, [r7, #32]
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f9dc 	bl	80083a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00d      	beq.n	800800e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	d107      	bne.n	800800a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008008:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e005      	b.n	800801a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800800e:	893b      	ldrh	r3, [r7, #8]
 8008010:	b2da      	uxtb	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	00010002 	.word	0x00010002

08008028 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b088      	sub	sp, #32
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	4608      	mov	r0, r1
 8008032:	4611      	mov	r1, r2
 8008034:	461a      	mov	r2, r3
 8008036:	4603      	mov	r3, r0
 8008038:	817b      	strh	r3, [r7, #10]
 800803a:	460b      	mov	r3, r1
 800803c:	813b      	strh	r3, [r7, #8]
 800803e:	4613      	mov	r3, r2
 8008040:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008050:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008060:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	2200      	movs	r2, #0
 800806a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 f8c2 	bl	80081f8 <I2C_WaitOnFlagUntilTimeout>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00d      	beq.n	8008096 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008088:	d103      	bne.n	8008092 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008090:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e0aa      	b.n	80081ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008096:	897b      	ldrh	r3, [r7, #10]
 8008098:	b2db      	uxtb	r3, r3
 800809a:	461a      	mov	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80080a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	6a3a      	ldr	r2, [r7, #32]
 80080aa:	4952      	ldr	r1, [pc, #328]	; (80081f4 <I2C_RequestMemoryRead+0x1cc>)
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f000 f8fa 	bl	80082a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e097      	b.n	80081ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080bc:	2300      	movs	r3, #0
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	617b      	str	r3, [r7, #20]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d4:	6a39      	ldr	r1, [r7, #32]
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 f964 	bl	80083a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00d      	beq.n	80080fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d107      	bne.n	80080fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e076      	b.n	80081ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080fe:	88fb      	ldrh	r3, [r7, #6]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d105      	bne.n	8008110 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008104:	893b      	ldrh	r3, [r7, #8]
 8008106:	b2da      	uxtb	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	611a      	str	r2, [r3, #16]
 800810e:	e021      	b.n	8008154 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008110:	893b      	ldrh	r3, [r7, #8]
 8008112:	0a1b      	lsrs	r3, r3, #8
 8008114:	b29b      	uxth	r3, r3
 8008116:	b2da      	uxtb	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800811e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008120:	6a39      	ldr	r1, [r7, #32]
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 f93e 	bl	80083a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00d      	beq.n	800814a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	2b04      	cmp	r3, #4
 8008134:	d107      	bne.n	8008146 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008144:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e050      	b.n	80081ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800814a:	893b      	ldrh	r3, [r7, #8]
 800814c:	b2da      	uxtb	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008156:	6a39      	ldr	r1, [r7, #32]
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f000 f923 	bl	80083a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00d      	beq.n	8008180 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008168:	2b04      	cmp	r3, #4
 800816a:	d107      	bne.n	800817c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800817a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e035      	b.n	80081ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800818e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	2200      	movs	r2, #0
 8008198:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 f82b 	bl	80081f8 <I2C_WaitOnFlagUntilTimeout>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00d      	beq.n	80081c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b6:	d103      	bne.n	80081c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e013      	b.n	80081ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80081c4:	897b      	ldrh	r3, [r7, #10]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	f043 0301 	orr.w	r3, r3, #1
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	6a3a      	ldr	r2, [r7, #32]
 80081d8:	4906      	ldr	r1, [pc, #24]	; (80081f4 <I2C_RequestMemoryRead+0x1cc>)
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 f863 	bl	80082a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e000      	b.n	80081ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	00010002 	.word	0x00010002

080081f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	4613      	mov	r3, r2
 8008206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008208:	e025      	b.n	8008256 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008210:	d021      	beq.n	8008256 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008212:	f7fe fd83 	bl	8006d1c <HAL_GetTick>
 8008216:	4602      	mov	r2, r0
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d302      	bcc.n	8008228 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d116      	bne.n	8008256 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2220      	movs	r2, #32
 8008232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008242:	f043 0220 	orr.w	r2, r3, #32
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e023      	b.n	800829e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	0c1b      	lsrs	r3, r3, #16
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b01      	cmp	r3, #1
 800825e:	d10d      	bne.n	800827c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	43da      	mvns	r2, r3
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	4013      	ands	r3, r2
 800826c:	b29b      	uxth	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	bf0c      	ite	eq
 8008272:	2301      	moveq	r3, #1
 8008274:	2300      	movne	r3, #0
 8008276:	b2db      	uxtb	r3, r3
 8008278:	461a      	mov	r2, r3
 800827a:	e00c      	b.n	8008296 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	43da      	mvns	r2, r3
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	4013      	ands	r3, r2
 8008288:	b29b      	uxth	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	bf0c      	ite	eq
 800828e:	2301      	moveq	r3, #1
 8008290:	2300      	movne	r3, #0
 8008292:	b2db      	uxtb	r3, r3
 8008294:	461a      	mov	r2, r3
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	429a      	cmp	r2, r3
 800829a:	d0b6      	beq.n	800820a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	60f8      	str	r0, [r7, #12]
 80082ae:	60b9      	str	r1, [r7, #8]
 80082b0:	607a      	str	r2, [r7, #4]
 80082b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082b4:	e051      	b.n	800835a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c4:	d123      	bne.n	800830e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	f043 0204 	orr.w	r2, r3, #4
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e046      	b.n	800839c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008314:	d021      	beq.n	800835a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008316:	f7fe fd01 	bl	8006d1c <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	429a      	cmp	r2, r3
 8008324:	d302      	bcc.n	800832c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d116      	bne.n	800835a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2220      	movs	r2, #32
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	f043 0220 	orr.w	r2, r3, #32
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e020      	b.n	800839c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	0c1b      	lsrs	r3, r3, #16
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b01      	cmp	r3, #1
 8008362:	d10c      	bne.n	800837e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	43da      	mvns	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4013      	ands	r3, r2
 8008370:	b29b      	uxth	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	bf14      	ite	ne
 8008376:	2301      	movne	r3, #1
 8008378:	2300      	moveq	r3, #0
 800837a:	b2db      	uxtb	r3, r3
 800837c:	e00b      	b.n	8008396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	43da      	mvns	r2, r3
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	4013      	ands	r3, r2
 800838a:	b29b      	uxth	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	bf14      	ite	ne
 8008390:	2301      	movne	r3, #1
 8008392:	2300      	moveq	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d18d      	bne.n	80082b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083b0:	e02d      	b.n	800840e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f000 f8ce 	bl	8008554 <I2C_IsAcknowledgeFailed>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e02d      	b.n	800841e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d021      	beq.n	800840e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ca:	f7fe fca7 	bl	8006d1c <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d302      	bcc.n	80083e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d116      	bne.n	800840e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	f043 0220 	orr.w	r2, r3, #32
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e007      	b.n	800841e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008418:	2b80      	cmp	r3, #128	; 0x80
 800841a:	d1ca      	bne.n	80083b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008432:	e02d      	b.n	8008490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f000 f88d 	bl	8008554 <I2C_IsAcknowledgeFailed>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e02d      	b.n	80084a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800844a:	d021      	beq.n	8008490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800844c:	f7fe fc66 	bl	8006d1c <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	429a      	cmp	r2, r3
 800845a:	d302      	bcc.n	8008462 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d116      	bne.n	8008490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2220      	movs	r2, #32
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847c:	f043 0220 	orr.w	r2, r3, #32
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e007      	b.n	80084a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	f003 0304 	and.w	r3, r3, #4
 800849a:	2b04      	cmp	r3, #4
 800849c:	d1ca      	bne.n	8008434 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084b4:	e042      	b.n	800853c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	f003 0310 	and.w	r3, r3, #16
 80084c0:	2b10      	cmp	r3, #16
 80084c2:	d119      	bne.n	80084f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f06f 0210 	mvn.w	r2, #16
 80084cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2220      	movs	r2, #32
 80084d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e029      	b.n	800854c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f8:	f7fe fc10 	bl	8006d1c <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	429a      	cmp	r2, r3
 8008506:	d302      	bcc.n	800850e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d116      	bne.n	800853c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	f043 0220 	orr.w	r2, r3, #32
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e007      	b.n	800854c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008546:	2b40      	cmp	r3, #64	; 0x40
 8008548:	d1b5      	bne.n	80084b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800856a:	d11b      	bne.n	80085a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008574:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2220      	movs	r2, #32
 8008580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008590:	f043 0204 	orr.w	r2, r3, #4
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e000      	b.n	80085a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
	...

080085b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e267      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d075      	beq.n	80086be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085d2:	4b88      	ldr	r3, [pc, #544]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f003 030c 	and.w	r3, r3, #12
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d00c      	beq.n	80085f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085de:	4b85      	ldr	r3, [pc, #532]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085e6:	2b08      	cmp	r3, #8
 80085e8:	d112      	bne.n	8008610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085ea:	4b82      	ldr	r3, [pc, #520]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085f6:	d10b      	bne.n	8008610 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085f8:	4b7e      	ldr	r3, [pc, #504]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d05b      	beq.n	80086bc <HAL_RCC_OscConfig+0x108>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d157      	bne.n	80086bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e242      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008618:	d106      	bne.n	8008628 <HAL_RCC_OscConfig+0x74>
 800861a:	4b76      	ldr	r3, [pc, #472]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a75      	ldr	r2, [pc, #468]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	e01d      	b.n	8008664 <HAL_RCC_OscConfig+0xb0>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008630:	d10c      	bne.n	800864c <HAL_RCC_OscConfig+0x98>
 8008632:	4b70      	ldr	r3, [pc, #448]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a6f      	ldr	r2, [pc, #444]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	4b6d      	ldr	r3, [pc, #436]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a6c      	ldr	r2, [pc, #432]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	e00b      	b.n	8008664 <HAL_RCC_OscConfig+0xb0>
 800864c:	4b69      	ldr	r3, [pc, #420]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a68      	ldr	r2, [pc, #416]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	4b66      	ldr	r3, [pc, #408]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a65      	ldr	r2, [pc, #404]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 800865e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d013      	beq.n	8008694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800866c:	f7fe fb56 	bl	8006d1c <HAL_GetTick>
 8008670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008672:	e008      	b.n	8008686 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008674:	f7fe fb52 	bl	8006d1c <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b64      	cmp	r3, #100	; 0x64
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e207      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008686:	4b5b      	ldr	r3, [pc, #364]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0f0      	beq.n	8008674 <HAL_RCC_OscConfig+0xc0>
 8008692:	e014      	b.n	80086be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008694:	f7fe fb42 	bl	8006d1c <HAL_GetTick>
 8008698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800869a:	e008      	b.n	80086ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800869c:	f7fe fb3e 	bl	8006d1c <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b64      	cmp	r3, #100	; 0x64
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e1f3      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086ae:	4b51      	ldr	r3, [pc, #324]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1f0      	bne.n	800869c <HAL_RCC_OscConfig+0xe8>
 80086ba:	e000      	b.n	80086be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d063      	beq.n	8008792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086ca:	4b4a      	ldr	r3, [pc, #296]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f003 030c 	and.w	r3, r3, #12
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00b      	beq.n	80086ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086d6:	4b47      	ldr	r3, [pc, #284]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086de:	2b08      	cmp	r3, #8
 80086e0:	d11c      	bne.n	800871c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086e2:	4b44      	ldr	r3, [pc, #272]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d116      	bne.n	800871c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086ee:	4b41      	ldr	r3, [pc, #260]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d005      	beq.n	8008706 <HAL_RCC_OscConfig+0x152>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d001      	beq.n	8008706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e1c7      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008706:	4b3b      	ldr	r3, [pc, #236]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	4937      	ldr	r1, [pc, #220]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008716:	4313      	orrs	r3, r2
 8008718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800871a:	e03a      	b.n	8008792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d020      	beq.n	8008766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008724:	4b34      	ldr	r3, [pc, #208]	; (80087f8 <HAL_RCC_OscConfig+0x244>)
 8008726:	2201      	movs	r2, #1
 8008728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872a:	f7fe faf7 	bl	8006d1c <HAL_GetTick>
 800872e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008730:	e008      	b.n	8008744 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008732:	f7fe faf3 	bl	8006d1c <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	2b02      	cmp	r3, #2
 800873e:	d901      	bls.n	8008744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e1a8      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008744:	4b2b      	ldr	r3, [pc, #172]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0f0      	beq.n	8008732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008750:	4b28      	ldr	r3, [pc, #160]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	00db      	lsls	r3, r3, #3
 800875e:	4925      	ldr	r1, [pc, #148]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008760:	4313      	orrs	r3, r2
 8008762:	600b      	str	r3, [r1, #0]
 8008764:	e015      	b.n	8008792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008766:	4b24      	ldr	r3, [pc, #144]	; (80087f8 <HAL_RCC_OscConfig+0x244>)
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876c:	f7fe fad6 	bl	8006d1c <HAL_GetTick>
 8008770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008772:	e008      	b.n	8008786 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008774:	f7fe fad2 	bl	8006d1c <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	2b02      	cmp	r3, #2
 8008780:	d901      	bls.n	8008786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e187      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008786:	4b1b      	ldr	r3, [pc, #108]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1f0      	bne.n	8008774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0308 	and.w	r3, r3, #8
 800879a:	2b00      	cmp	r3, #0
 800879c:	d036      	beq.n	800880c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d016      	beq.n	80087d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087a6:	4b15      	ldr	r3, [pc, #84]	; (80087fc <HAL_RCC_OscConfig+0x248>)
 80087a8:	2201      	movs	r2, #1
 80087aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ac:	f7fe fab6 	bl	8006d1c <HAL_GetTick>
 80087b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087b2:	e008      	b.n	80087c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087b4:	f7fe fab2 	bl	8006d1c <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d901      	bls.n	80087c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e167      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087c6:	4b0b      	ldr	r3, [pc, #44]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80087c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0f0      	beq.n	80087b4 <HAL_RCC_OscConfig+0x200>
 80087d2:	e01b      	b.n	800880c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087d4:	4b09      	ldr	r3, [pc, #36]	; (80087fc <HAL_RCC_OscConfig+0x248>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087da:	f7fe fa9f 	bl	8006d1c <HAL_GetTick>
 80087de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087e0:	e00e      	b.n	8008800 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087e2:	f7fe fa9b 	bl	8006d1c <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d907      	bls.n	8008800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e150      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
 80087f4:	40023800 	.word	0x40023800
 80087f8:	42470000 	.word	0x42470000
 80087fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008800:	4b88      	ldr	r3, [pc, #544]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008804:	f003 0302 	and.w	r3, r3, #2
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1ea      	bne.n	80087e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0304 	and.w	r3, r3, #4
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 8097 	beq.w	8008948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800881a:	2300      	movs	r3, #0
 800881c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800881e:	4b81      	ldr	r3, [pc, #516]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10f      	bne.n	800884a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800882a:	2300      	movs	r3, #0
 800882c:	60bb      	str	r3, [r7, #8]
 800882e:	4b7d      	ldr	r3, [pc, #500]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	4a7c      	ldr	r2, [pc, #496]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008838:	6413      	str	r3, [r2, #64]	; 0x40
 800883a:	4b7a      	ldr	r3, [pc, #488]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 800883c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008842:	60bb      	str	r3, [r7, #8]
 8008844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008846:	2301      	movs	r3, #1
 8008848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800884a:	4b77      	ldr	r3, [pc, #476]	; (8008a28 <HAL_RCC_OscConfig+0x474>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008852:	2b00      	cmp	r3, #0
 8008854:	d118      	bne.n	8008888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008856:	4b74      	ldr	r3, [pc, #464]	; (8008a28 <HAL_RCC_OscConfig+0x474>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a73      	ldr	r2, [pc, #460]	; (8008a28 <HAL_RCC_OscConfig+0x474>)
 800885c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008862:	f7fe fa5b 	bl	8006d1c <HAL_GetTick>
 8008866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008868:	e008      	b.n	800887c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800886a:	f7fe fa57 	bl	8006d1c <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d901      	bls.n	800887c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e10c      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800887c:	4b6a      	ldr	r3, [pc, #424]	; (8008a28 <HAL_RCC_OscConfig+0x474>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0f0      	beq.n	800886a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d106      	bne.n	800889e <HAL_RCC_OscConfig+0x2ea>
 8008890:	4b64      	ldr	r3, [pc, #400]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008894:	4a63      	ldr	r2, [pc, #396]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008896:	f043 0301 	orr.w	r3, r3, #1
 800889a:	6713      	str	r3, [r2, #112]	; 0x70
 800889c:	e01c      	b.n	80088d8 <HAL_RCC_OscConfig+0x324>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	2b05      	cmp	r3, #5
 80088a4:	d10c      	bne.n	80088c0 <HAL_RCC_OscConfig+0x30c>
 80088a6:	4b5f      	ldr	r3, [pc, #380]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088aa:	4a5e      	ldr	r2, [pc, #376]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088ac:	f043 0304 	orr.w	r3, r3, #4
 80088b0:	6713      	str	r3, [r2, #112]	; 0x70
 80088b2:	4b5c      	ldr	r3, [pc, #368]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b6:	4a5b      	ldr	r2, [pc, #364]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088b8:	f043 0301 	orr.w	r3, r3, #1
 80088bc:	6713      	str	r3, [r2, #112]	; 0x70
 80088be:	e00b      	b.n	80088d8 <HAL_RCC_OscConfig+0x324>
 80088c0:	4b58      	ldr	r3, [pc, #352]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c4:	4a57      	ldr	r2, [pc, #348]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088c6:	f023 0301 	bic.w	r3, r3, #1
 80088ca:	6713      	str	r3, [r2, #112]	; 0x70
 80088cc:	4b55      	ldr	r3, [pc, #340]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d0:	4a54      	ldr	r2, [pc, #336]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088d2:	f023 0304 	bic.w	r3, r3, #4
 80088d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d015      	beq.n	800890c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e0:	f7fe fa1c 	bl	8006d1c <HAL_GetTick>
 80088e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088e6:	e00a      	b.n	80088fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088e8:	f7fe fa18 	bl	8006d1c <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d901      	bls.n	80088fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e0cb      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088fe:	4b49      	ldr	r3, [pc, #292]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0ee      	beq.n	80088e8 <HAL_RCC_OscConfig+0x334>
 800890a:	e014      	b.n	8008936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800890c:	f7fe fa06 	bl	8006d1c <HAL_GetTick>
 8008910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008912:	e00a      	b.n	800892a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008914:	f7fe fa02 	bl	8006d1c <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008922:	4293      	cmp	r3, r2
 8008924:	d901      	bls.n	800892a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e0b5      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800892a:	4b3e      	ldr	r3, [pc, #248]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 800892c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1ee      	bne.n	8008914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d105      	bne.n	8008948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800893c:	4b39      	ldr	r3, [pc, #228]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 800893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008940:	4a38      	ldr	r2, [pc, #224]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008946:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 80a1 	beq.w	8008a94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008952:	4b34      	ldr	r3, [pc, #208]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f003 030c 	and.w	r3, r3, #12
 800895a:	2b08      	cmp	r3, #8
 800895c:	d05c      	beq.n	8008a18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	2b02      	cmp	r3, #2
 8008964:	d141      	bne.n	80089ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008966:	4b31      	ldr	r3, [pc, #196]	; (8008a2c <HAL_RCC_OscConfig+0x478>)
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800896c:	f7fe f9d6 	bl	8006d1c <HAL_GetTick>
 8008970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008972:	e008      	b.n	8008986 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008974:	f7fe f9d2 	bl	8006d1c <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b02      	cmp	r3, #2
 8008980:	d901      	bls.n	8008986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e087      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008986:	4b27      	ldr	r3, [pc, #156]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1f0      	bne.n	8008974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	69da      	ldr	r2, [r3, #28]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	431a      	orrs	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	019b      	lsls	r3, r3, #6
 80089a2:	431a      	orrs	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a8:	085b      	lsrs	r3, r3, #1
 80089aa:	3b01      	subs	r3, #1
 80089ac:	041b      	lsls	r3, r3, #16
 80089ae:	431a      	orrs	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	061b      	lsls	r3, r3, #24
 80089b6:	491b      	ldr	r1, [pc, #108]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089bc:	4b1b      	ldr	r3, [pc, #108]	; (8008a2c <HAL_RCC_OscConfig+0x478>)
 80089be:	2201      	movs	r2, #1
 80089c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089c2:	f7fe f9ab 	bl	8006d1c <HAL_GetTick>
 80089c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089c8:	e008      	b.n	80089dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089ca:	f7fe f9a7 	bl	8006d1c <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d901      	bls.n	80089dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e05c      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089dc:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0f0      	beq.n	80089ca <HAL_RCC_OscConfig+0x416>
 80089e8:	e054      	b.n	8008a94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ea:	4b10      	ldr	r3, [pc, #64]	; (8008a2c <HAL_RCC_OscConfig+0x478>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089f0:	f7fe f994 	bl	8006d1c <HAL_GetTick>
 80089f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089f6:	e008      	b.n	8008a0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089f8:	f7fe f990 	bl	8006d1c <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d901      	bls.n	8008a0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e045      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a0a:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1f0      	bne.n	80089f8 <HAL_RCC_OscConfig+0x444>
 8008a16:	e03d      	b.n	8008a94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d107      	bne.n	8008a30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e038      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
 8008a24:	40023800 	.word	0x40023800
 8008a28:	40007000 	.word	0x40007000
 8008a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a30:	4b1b      	ldr	r3, [pc, #108]	; (8008aa0 <HAL_RCC_OscConfig+0x4ec>)
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d028      	beq.n	8008a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d121      	bne.n	8008a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d11a      	bne.n	8008a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a60:	4013      	ands	r3, r2
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d111      	bne.n	8008a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a76:	085b      	lsrs	r3, r3, #1
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d107      	bne.n	8008a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d001      	beq.n	8008a94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e000      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	40023800 	.word	0x40023800

08008aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e0cc      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ab8:	4b68      	ldr	r3, [pc, #416]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0307 	and.w	r3, r3, #7
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d90c      	bls.n	8008ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ac6:	4b65      	ldr	r3, [pc, #404]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	b2d2      	uxtb	r2, r2
 8008acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ace:	4b63      	ldr	r3, [pc, #396]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0307 	and.w	r3, r3, #7
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d001      	beq.n	8008ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e0b8      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d020      	beq.n	8008b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d005      	beq.n	8008b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008af8:	4b59      	ldr	r3, [pc, #356]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	4a58      	ldr	r2, [pc, #352]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0308 	and.w	r3, r3, #8
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d005      	beq.n	8008b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b10:	4b53      	ldr	r3, [pc, #332]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	4a52      	ldr	r2, [pc, #328]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b1c:	4b50      	ldr	r3, [pc, #320]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	494d      	ldr	r1, [pc, #308]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d044      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d107      	bne.n	8008b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b42:	4b47      	ldr	r3, [pc, #284]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d119      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e07f      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d003      	beq.n	8008b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d107      	bne.n	8008b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b62:	4b3f      	ldr	r3, [pc, #252]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d109      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e06f      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b72:	4b3b      	ldr	r3, [pc, #236]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e067      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b82:	4b37      	ldr	r3, [pc, #220]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f023 0203 	bic.w	r2, r3, #3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	4934      	ldr	r1, [pc, #208]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b94:	f7fe f8c2 	bl	8006d1c <HAL_GetTick>
 8008b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b9a:	e00a      	b.n	8008bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b9c:	f7fe f8be 	bl	8006d1c <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e04f      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bb2:	4b2b      	ldr	r3, [pc, #172]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f003 020c 	and.w	r2, r3, #12
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d1eb      	bne.n	8008b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bc4:	4b25      	ldr	r3, [pc, #148]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0307 	and.w	r3, r3, #7
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d20c      	bcs.n	8008bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bd2:	4b22      	ldr	r3, [pc, #136]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	b2d2      	uxtb	r2, r2
 8008bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bda:	4b20      	ldr	r3, [pc, #128]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0307 	and.w	r3, r3, #7
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d001      	beq.n	8008bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e032      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d008      	beq.n	8008c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bf8:	4b19      	ldr	r3, [pc, #100]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	4916      	ldr	r1, [pc, #88]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0308 	and.w	r3, r3, #8
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d009      	beq.n	8008c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c16:	4b12      	ldr	r3, [pc, #72]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	490e      	ldr	r1, [pc, #56]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c2a:	f000 f821 	bl	8008c70 <HAL_RCC_GetSysClockFreq>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	091b      	lsrs	r3, r3, #4
 8008c36:	f003 030f 	and.w	r3, r3, #15
 8008c3a:	490a      	ldr	r1, [pc, #40]	; (8008c64 <HAL_RCC_ClockConfig+0x1c0>)
 8008c3c:	5ccb      	ldrb	r3, [r1, r3]
 8008c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c42:	4a09      	ldr	r2, [pc, #36]	; (8008c68 <HAL_RCC_ClockConfig+0x1c4>)
 8008c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c46:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <HAL_RCC_ClockConfig+0x1c8>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe f822 	bl	8006c94 <HAL_InitTick>

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	40023c00 	.word	0x40023c00
 8008c60:	40023800 	.word	0x40023800
 8008c64:	0800babc 	.word	0x0800babc
 8008c68:	200000e4 	.word	0x200000e4
 8008c6c:	200000e8 	.word	0x200000e8

08008c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c74:	b094      	sub	sp, #80	; 0x50
 8008c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c80:	2300      	movs	r3, #0
 8008c82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008c84:	2300      	movs	r3, #0
 8008c86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c88:	4b79      	ldr	r3, [pc, #484]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f003 030c 	and.w	r3, r3, #12
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d00d      	beq.n	8008cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	f200 80e1 	bhi.w	8008e5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d003      	beq.n	8008caa <HAL_RCC_GetSysClockFreq+0x3a>
 8008ca2:	e0db      	b.n	8008e5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ca4:	4b73      	ldr	r3, [pc, #460]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8008ca6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008ca8:	e0db      	b.n	8008e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008caa:	4b73      	ldr	r3, [pc, #460]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x208>)
 8008cac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008cae:	e0d8      	b.n	8008e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008cb0:	4b6f      	ldr	r3, [pc, #444]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008cba:	4b6d      	ldr	r3, [pc, #436]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d063      	beq.n	8008d8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cc6:	4b6a      	ldr	r3, [pc, #424]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	099b      	lsrs	r3, r3, #6
 8008ccc:	2200      	movs	r2, #0
 8008cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8008cda:	2300      	movs	r3, #0
 8008cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008ce2:	4622      	mov	r2, r4
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	f04f 0000 	mov.w	r0, #0
 8008cea:	f04f 0100 	mov.w	r1, #0
 8008cee:	0159      	lsls	r1, r3, #5
 8008cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cf4:	0150      	lsls	r0, r2, #5
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	1a51      	subs	r1, r2, r1
 8008cfe:	6139      	str	r1, [r7, #16]
 8008d00:	4629      	mov	r1, r5
 8008d02:	eb63 0301 	sbc.w	r3, r3, r1
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	f04f 0200 	mov.w	r2, #0
 8008d0c:	f04f 0300 	mov.w	r3, #0
 8008d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d14:	4659      	mov	r1, fp
 8008d16:	018b      	lsls	r3, r1, #6
 8008d18:	4651      	mov	r1, sl
 8008d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008d1e:	4651      	mov	r1, sl
 8008d20:	018a      	lsls	r2, r1, #6
 8008d22:	4651      	mov	r1, sl
 8008d24:	ebb2 0801 	subs.w	r8, r2, r1
 8008d28:	4659      	mov	r1, fp
 8008d2a:	eb63 0901 	sbc.w	r9, r3, r1
 8008d2e:	f04f 0200 	mov.w	r2, #0
 8008d32:	f04f 0300 	mov.w	r3, #0
 8008d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d42:	4690      	mov	r8, r2
 8008d44:	4699      	mov	r9, r3
 8008d46:	4623      	mov	r3, r4
 8008d48:	eb18 0303 	adds.w	r3, r8, r3
 8008d4c:	60bb      	str	r3, [r7, #8]
 8008d4e:	462b      	mov	r3, r5
 8008d50:	eb49 0303 	adc.w	r3, r9, r3
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	f04f 0200 	mov.w	r2, #0
 8008d5a:	f04f 0300 	mov.w	r3, #0
 8008d5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008d62:	4629      	mov	r1, r5
 8008d64:	024b      	lsls	r3, r1, #9
 8008d66:	4621      	mov	r1, r4
 8008d68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	024a      	lsls	r2, r1, #9
 8008d70:	4610      	mov	r0, r2
 8008d72:	4619      	mov	r1, r3
 8008d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d76:	2200      	movs	r2, #0
 8008d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d80:	f7f7 ff62 	bl	8000c48 <__aeabi_uldivmod>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4613      	mov	r3, r2
 8008d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d8c:	e058      	b.n	8008e40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d8e:	4b38      	ldr	r3, [pc, #224]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	099b      	lsrs	r3, r3, #6
 8008d94:	2200      	movs	r2, #0
 8008d96:	4618      	mov	r0, r3
 8008d98:	4611      	mov	r1, r2
 8008d9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008d9e:	623b      	str	r3, [r7, #32]
 8008da0:	2300      	movs	r3, #0
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24
 8008da4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008da8:	4642      	mov	r2, r8
 8008daa:	464b      	mov	r3, r9
 8008dac:	f04f 0000 	mov.w	r0, #0
 8008db0:	f04f 0100 	mov.w	r1, #0
 8008db4:	0159      	lsls	r1, r3, #5
 8008db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008dba:	0150      	lsls	r0, r2, #5
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4641      	mov	r1, r8
 8008dc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8008dcc:	f04f 0200 	mov.w	r2, #0
 8008dd0:	f04f 0300 	mov.w	r3, #0
 8008dd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008dd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008ddc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008de0:	ebb2 040a 	subs.w	r4, r2, sl
 8008de4:	eb63 050b 	sbc.w	r5, r3, fp
 8008de8:	f04f 0200 	mov.w	r2, #0
 8008dec:	f04f 0300 	mov.w	r3, #0
 8008df0:	00eb      	lsls	r3, r5, #3
 8008df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008df6:	00e2      	lsls	r2, r4, #3
 8008df8:	4614      	mov	r4, r2
 8008dfa:	461d      	mov	r5, r3
 8008dfc:	4643      	mov	r3, r8
 8008dfe:	18e3      	adds	r3, r4, r3
 8008e00:	603b      	str	r3, [r7, #0]
 8008e02:	464b      	mov	r3, r9
 8008e04:	eb45 0303 	adc.w	r3, r5, r3
 8008e08:	607b      	str	r3, [r7, #4]
 8008e0a:	f04f 0200 	mov.w	r2, #0
 8008e0e:	f04f 0300 	mov.w	r3, #0
 8008e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e16:	4629      	mov	r1, r5
 8008e18:	028b      	lsls	r3, r1, #10
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e20:	4621      	mov	r1, r4
 8008e22:	028a      	lsls	r2, r1, #10
 8008e24:	4610      	mov	r0, r2
 8008e26:	4619      	mov	r1, r3
 8008e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	61bb      	str	r3, [r7, #24]
 8008e2e:	61fa      	str	r2, [r7, #28]
 8008e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e34:	f7f7 ff08 	bl	8000c48 <__aeabi_uldivmod>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e40:	4b0b      	ldr	r3, [pc, #44]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	0c1b      	lsrs	r3, r3, #16
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008e50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e5a:	e002      	b.n	8008e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e5c:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8008e5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3750      	adds	r7, #80	; 0x50
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e6e:	bf00      	nop
 8008e70:	40023800 	.word	0x40023800
 8008e74:	00f42400 	.word	0x00f42400
 8008e78:	007a1200 	.word	0x007a1200

08008e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e80:	4b03      	ldr	r3, [pc, #12]	; (8008e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e82:	681b      	ldr	r3, [r3, #0]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	200000e4 	.word	0x200000e4

08008e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e98:	f7ff fff0 	bl	8008e7c <HAL_RCC_GetHCLKFreq>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	4b05      	ldr	r3, [pc, #20]	; (8008eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	0a9b      	lsrs	r3, r3, #10
 8008ea4:	f003 0307 	and.w	r3, r3, #7
 8008ea8:	4903      	ldr	r1, [pc, #12]	; (8008eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008eaa:	5ccb      	ldrb	r3, [r1, r3]
 8008eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	40023800 	.word	0x40023800
 8008eb8:	0800bacc 	.word	0x0800bacc

08008ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ec0:	f7ff ffdc 	bl	8008e7c <HAL_RCC_GetHCLKFreq>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	4b05      	ldr	r3, [pc, #20]	; (8008edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	0b5b      	lsrs	r3, r3, #13
 8008ecc:	f003 0307 	and.w	r3, r3, #7
 8008ed0:	4903      	ldr	r1, [pc, #12]	; (8008ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ed2:	5ccb      	ldrb	r3, [r1, r3]
 8008ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	40023800 	.word	0x40023800
 8008ee0:	0800bacc 	.word	0x0800bacc

08008ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e03f      	b.n	8008f76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d106      	bne.n	8008f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f837 	bl	8008f7e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2224      	movs	r2, #36	; 0x24
 8008f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68da      	ldr	r2, [r3, #12]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f90f 	bl	800914c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	691a      	ldr	r2, [r3, #16]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	695a      	ldr	r2, [r3, #20]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2220      	movs	r2, #32
 8008f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b083      	sub	sp, #12
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8008f86:	bf00      	nop
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b08a      	sub	sp, #40	; 0x28
 8008f96:	af02      	add	r7, sp, #8
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	603b      	str	r3, [r7, #0]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b20      	cmp	r3, #32
 8008fb0:	d17c      	bne.n	80090ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <HAL_UART_Transmit+0x2c>
 8008fb8:	88fb      	ldrh	r3, [r7, #6]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d101      	bne.n	8008fc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e075      	b.n	80090ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d101      	bne.n	8008fd0 <HAL_UART_Transmit+0x3e>
 8008fcc:	2302      	movs	r3, #2
 8008fce:	e06e      	b.n	80090ae <HAL_UART_Transmit+0x11c>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2221      	movs	r2, #33	; 0x21
 8008fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fe6:	f7fd fe99 	bl	8006d1c <HAL_GetTick>
 8008fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	88fa      	ldrh	r2, [r7, #6]
 8008ff0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	88fa      	ldrh	r2, [r7, #6]
 8008ff6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009000:	d108      	bne.n	8009014 <HAL_UART_Transmit+0x82>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d104      	bne.n	8009014 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800900a:	2300      	movs	r3, #0
 800900c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	61bb      	str	r3, [r7, #24]
 8009012:	e003      	b.n	800901c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009018:	2300      	movs	r3, #0
 800901a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009024:	e02a      	b.n	800907c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2200      	movs	r2, #0
 800902e:	2180      	movs	r1, #128	; 0x80
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 f840 	bl	80090b6 <UART_WaitOnFlagUntilTimeout>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e036      	b.n	80090ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10b      	bne.n	800905e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009054:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	3302      	adds	r3, #2
 800905a:	61bb      	str	r3, [r7, #24]
 800905c:	e007      	b.n	800906e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	781a      	ldrb	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	3301      	adds	r3, #1
 800906c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009072:	b29b      	uxth	r3, r3
 8009074:	3b01      	subs	r3, #1
 8009076:	b29a      	uxth	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009080:	b29b      	uxth	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1cf      	bne.n	8009026 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2200      	movs	r2, #0
 800908e:	2140      	movs	r1, #64	; 0x40
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 f810 	bl	80090b6 <UART_WaitOnFlagUntilTimeout>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e006      	b.n	80090ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2220      	movs	r2, #32
 80090a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	e000      	b.n	80090ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80090ac:	2302      	movs	r3, #2
  }
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3720      	adds	r7, #32
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b084      	sub	sp, #16
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	603b      	str	r3, [r7, #0]
 80090c2:	4613      	mov	r3, r2
 80090c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c6:	e02c      	b.n	8009122 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ce:	d028      	beq.n	8009122 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d007      	beq.n	80090e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80090d6:	f7fd fe21 	bl	8006d1c <HAL_GetTick>
 80090da:	4602      	mov	r2, r0
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d21d      	bcs.n	8009122 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80090f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	695a      	ldr	r2, [r3, #20]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f022 0201 	bic.w	r2, r2, #1
 8009104:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2220      	movs	r2, #32
 800910a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2220      	movs	r2, #32
 8009112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e00f      	b.n	8009142 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	4013      	ands	r3, r2
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	429a      	cmp	r2, r3
 8009130:	bf0c      	ite	eq
 8009132:	2301      	moveq	r3, #1
 8009134:	2300      	movne	r3, #0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	461a      	mov	r2, r3
 800913a:	79fb      	ldrb	r3, [r7, #7]
 800913c:	429a      	cmp	r2, r3
 800913e:	d0c3      	beq.n	80090c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800914c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009150:	b0c0      	sub	sp, #256	; 0x100
 8009152:	af00      	add	r7, sp, #0
 8009154:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009168:	68d9      	ldr	r1, [r3, #12]
 800916a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	ea40 0301 	orr.w	r3, r0, r1
 8009174:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917a:	689a      	ldr	r2, [r3, #8]
 800917c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	431a      	orrs	r2, r3
 8009184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009188:	695b      	ldr	r3, [r3, #20]
 800918a:	431a      	orrs	r2, r3
 800918c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	4313      	orrs	r3, r2
 8009194:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091a4:	f021 010c 	bic.w	r1, r1, #12
 80091a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091b2:	430b      	orrs	r3, r1
 80091b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c6:	6999      	ldr	r1, [r3, #24]
 80091c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	ea40 0301 	orr.w	r3, r0, r1
 80091d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	4b8f      	ldr	r3, [pc, #572]	; (8009418 <UART_SetConfig+0x2cc>)
 80091dc:	429a      	cmp	r2, r3
 80091de:	d005      	beq.n	80091ec <UART_SetConfig+0xa0>
 80091e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	4b8d      	ldr	r3, [pc, #564]	; (800941c <UART_SetConfig+0x2d0>)
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d104      	bne.n	80091f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091ec:	f7ff fe66 	bl	8008ebc <HAL_RCC_GetPCLK2Freq>
 80091f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80091f4:	e003      	b.n	80091fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091f6:	f7ff fe4d 	bl	8008e94 <HAL_RCC_GetPCLK1Freq>
 80091fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009202:	69db      	ldr	r3, [r3, #28]
 8009204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009208:	f040 810c 	bne.w	8009424 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800920c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009210:	2200      	movs	r2, #0
 8009212:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009216:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800921a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800921e:	4622      	mov	r2, r4
 8009220:	462b      	mov	r3, r5
 8009222:	1891      	adds	r1, r2, r2
 8009224:	65b9      	str	r1, [r7, #88]	; 0x58
 8009226:	415b      	adcs	r3, r3
 8009228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800922a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800922e:	4621      	mov	r1, r4
 8009230:	eb12 0801 	adds.w	r8, r2, r1
 8009234:	4629      	mov	r1, r5
 8009236:	eb43 0901 	adc.w	r9, r3, r1
 800923a:	f04f 0200 	mov.w	r2, #0
 800923e:	f04f 0300 	mov.w	r3, #0
 8009242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800924a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800924e:	4690      	mov	r8, r2
 8009250:	4699      	mov	r9, r3
 8009252:	4623      	mov	r3, r4
 8009254:	eb18 0303 	adds.w	r3, r8, r3
 8009258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800925c:	462b      	mov	r3, r5
 800925e:	eb49 0303 	adc.w	r3, r9, r3
 8009262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009272:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009276:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800927a:	460b      	mov	r3, r1
 800927c:	18db      	adds	r3, r3, r3
 800927e:	653b      	str	r3, [r7, #80]	; 0x50
 8009280:	4613      	mov	r3, r2
 8009282:	eb42 0303 	adc.w	r3, r2, r3
 8009286:	657b      	str	r3, [r7, #84]	; 0x54
 8009288:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800928c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009290:	f7f7 fcda 	bl	8000c48 <__aeabi_uldivmod>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4b61      	ldr	r3, [pc, #388]	; (8009420 <UART_SetConfig+0x2d4>)
 800929a:	fba3 2302 	umull	r2, r3, r3, r2
 800929e:	095b      	lsrs	r3, r3, #5
 80092a0:	011c      	lsls	r4, r3, #4
 80092a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80092b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80092b4:	4642      	mov	r2, r8
 80092b6:	464b      	mov	r3, r9
 80092b8:	1891      	adds	r1, r2, r2
 80092ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80092bc:	415b      	adcs	r3, r3
 80092be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80092c4:	4641      	mov	r1, r8
 80092c6:	eb12 0a01 	adds.w	sl, r2, r1
 80092ca:	4649      	mov	r1, r9
 80092cc:	eb43 0b01 	adc.w	fp, r3, r1
 80092d0:	f04f 0200 	mov.w	r2, #0
 80092d4:	f04f 0300 	mov.w	r3, #0
 80092d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092e4:	4692      	mov	sl, r2
 80092e6:	469b      	mov	fp, r3
 80092e8:	4643      	mov	r3, r8
 80092ea:	eb1a 0303 	adds.w	r3, sl, r3
 80092ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092f2:	464b      	mov	r3, r9
 80092f4:	eb4b 0303 	adc.w	r3, fp, r3
 80092f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009308:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800930c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009310:	460b      	mov	r3, r1
 8009312:	18db      	adds	r3, r3, r3
 8009314:	643b      	str	r3, [r7, #64]	; 0x40
 8009316:	4613      	mov	r3, r2
 8009318:	eb42 0303 	adc.w	r3, r2, r3
 800931c:	647b      	str	r3, [r7, #68]	; 0x44
 800931e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009322:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009326:	f7f7 fc8f 	bl	8000c48 <__aeabi_uldivmod>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	4611      	mov	r1, r2
 8009330:	4b3b      	ldr	r3, [pc, #236]	; (8009420 <UART_SetConfig+0x2d4>)
 8009332:	fba3 2301 	umull	r2, r3, r3, r1
 8009336:	095b      	lsrs	r3, r3, #5
 8009338:	2264      	movs	r2, #100	; 0x64
 800933a:	fb02 f303 	mul.w	r3, r2, r3
 800933e:	1acb      	subs	r3, r1, r3
 8009340:	00db      	lsls	r3, r3, #3
 8009342:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009346:	4b36      	ldr	r3, [pc, #216]	; (8009420 <UART_SetConfig+0x2d4>)
 8009348:	fba3 2302 	umull	r2, r3, r3, r2
 800934c:	095b      	lsrs	r3, r3, #5
 800934e:	005b      	lsls	r3, r3, #1
 8009350:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009354:	441c      	add	r4, r3
 8009356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800935a:	2200      	movs	r2, #0
 800935c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009360:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009364:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009368:	4642      	mov	r2, r8
 800936a:	464b      	mov	r3, r9
 800936c:	1891      	adds	r1, r2, r2
 800936e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009370:	415b      	adcs	r3, r3
 8009372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009374:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009378:	4641      	mov	r1, r8
 800937a:	1851      	adds	r1, r2, r1
 800937c:	6339      	str	r1, [r7, #48]	; 0x30
 800937e:	4649      	mov	r1, r9
 8009380:	414b      	adcs	r3, r1
 8009382:	637b      	str	r3, [r7, #52]	; 0x34
 8009384:	f04f 0200 	mov.w	r2, #0
 8009388:	f04f 0300 	mov.w	r3, #0
 800938c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009390:	4659      	mov	r1, fp
 8009392:	00cb      	lsls	r3, r1, #3
 8009394:	4651      	mov	r1, sl
 8009396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800939a:	4651      	mov	r1, sl
 800939c:	00ca      	lsls	r2, r1, #3
 800939e:	4610      	mov	r0, r2
 80093a0:	4619      	mov	r1, r3
 80093a2:	4603      	mov	r3, r0
 80093a4:	4642      	mov	r2, r8
 80093a6:	189b      	adds	r3, r3, r2
 80093a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093ac:	464b      	mov	r3, r9
 80093ae:	460a      	mov	r2, r1
 80093b0:	eb42 0303 	adc.w	r3, r2, r3
 80093b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80093c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80093cc:	460b      	mov	r3, r1
 80093ce:	18db      	adds	r3, r3, r3
 80093d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80093d2:	4613      	mov	r3, r2
 80093d4:	eb42 0303 	adc.w	r3, r2, r3
 80093d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80093e2:	f7f7 fc31 	bl	8000c48 <__aeabi_uldivmod>
 80093e6:	4602      	mov	r2, r0
 80093e8:	460b      	mov	r3, r1
 80093ea:	4b0d      	ldr	r3, [pc, #52]	; (8009420 <UART_SetConfig+0x2d4>)
 80093ec:	fba3 1302 	umull	r1, r3, r3, r2
 80093f0:	095b      	lsrs	r3, r3, #5
 80093f2:	2164      	movs	r1, #100	; 0x64
 80093f4:	fb01 f303 	mul.w	r3, r1, r3
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	3332      	adds	r3, #50	; 0x32
 80093fe:	4a08      	ldr	r2, [pc, #32]	; (8009420 <UART_SetConfig+0x2d4>)
 8009400:	fba2 2303 	umull	r2, r3, r2, r3
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	f003 0207 	and.w	r2, r3, #7
 800940a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4422      	add	r2, r4
 8009412:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009414:	e105      	b.n	8009622 <UART_SetConfig+0x4d6>
 8009416:	bf00      	nop
 8009418:	40011000 	.word	0x40011000
 800941c:	40011400 	.word	0x40011400
 8009420:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009428:	2200      	movs	r2, #0
 800942a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800942e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009432:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009436:	4642      	mov	r2, r8
 8009438:	464b      	mov	r3, r9
 800943a:	1891      	adds	r1, r2, r2
 800943c:	6239      	str	r1, [r7, #32]
 800943e:	415b      	adcs	r3, r3
 8009440:	627b      	str	r3, [r7, #36]	; 0x24
 8009442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009446:	4641      	mov	r1, r8
 8009448:	1854      	adds	r4, r2, r1
 800944a:	4649      	mov	r1, r9
 800944c:	eb43 0501 	adc.w	r5, r3, r1
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	f04f 0300 	mov.w	r3, #0
 8009458:	00eb      	lsls	r3, r5, #3
 800945a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800945e:	00e2      	lsls	r2, r4, #3
 8009460:	4614      	mov	r4, r2
 8009462:	461d      	mov	r5, r3
 8009464:	4643      	mov	r3, r8
 8009466:	18e3      	adds	r3, r4, r3
 8009468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800946c:	464b      	mov	r3, r9
 800946e:	eb45 0303 	adc.w	r3, r5, r3
 8009472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009482:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009486:	f04f 0200 	mov.w	r2, #0
 800948a:	f04f 0300 	mov.w	r3, #0
 800948e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009492:	4629      	mov	r1, r5
 8009494:	008b      	lsls	r3, r1, #2
 8009496:	4621      	mov	r1, r4
 8009498:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800949c:	4621      	mov	r1, r4
 800949e:	008a      	lsls	r2, r1, #2
 80094a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094a4:	f7f7 fbd0 	bl	8000c48 <__aeabi_uldivmod>
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	4b60      	ldr	r3, [pc, #384]	; (8009630 <UART_SetConfig+0x4e4>)
 80094ae:	fba3 2302 	umull	r2, r3, r3, r2
 80094b2:	095b      	lsrs	r3, r3, #5
 80094b4:	011c      	lsls	r4, r3, #4
 80094b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80094c8:	4642      	mov	r2, r8
 80094ca:	464b      	mov	r3, r9
 80094cc:	1891      	adds	r1, r2, r2
 80094ce:	61b9      	str	r1, [r7, #24]
 80094d0:	415b      	adcs	r3, r3
 80094d2:	61fb      	str	r3, [r7, #28]
 80094d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094d8:	4641      	mov	r1, r8
 80094da:	1851      	adds	r1, r2, r1
 80094dc:	6139      	str	r1, [r7, #16]
 80094de:	4649      	mov	r1, r9
 80094e0:	414b      	adcs	r3, r1
 80094e2:	617b      	str	r3, [r7, #20]
 80094e4:	f04f 0200 	mov.w	r2, #0
 80094e8:	f04f 0300 	mov.w	r3, #0
 80094ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094f0:	4659      	mov	r1, fp
 80094f2:	00cb      	lsls	r3, r1, #3
 80094f4:	4651      	mov	r1, sl
 80094f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094fa:	4651      	mov	r1, sl
 80094fc:	00ca      	lsls	r2, r1, #3
 80094fe:	4610      	mov	r0, r2
 8009500:	4619      	mov	r1, r3
 8009502:	4603      	mov	r3, r0
 8009504:	4642      	mov	r2, r8
 8009506:	189b      	adds	r3, r3, r2
 8009508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800950c:	464b      	mov	r3, r9
 800950e:	460a      	mov	r2, r1
 8009510:	eb42 0303 	adc.w	r3, r2, r3
 8009514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	67bb      	str	r3, [r7, #120]	; 0x78
 8009522:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009524:	f04f 0200 	mov.w	r2, #0
 8009528:	f04f 0300 	mov.w	r3, #0
 800952c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009530:	4649      	mov	r1, r9
 8009532:	008b      	lsls	r3, r1, #2
 8009534:	4641      	mov	r1, r8
 8009536:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800953a:	4641      	mov	r1, r8
 800953c:	008a      	lsls	r2, r1, #2
 800953e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009542:	f7f7 fb81 	bl	8000c48 <__aeabi_uldivmod>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4b39      	ldr	r3, [pc, #228]	; (8009630 <UART_SetConfig+0x4e4>)
 800954c:	fba3 1302 	umull	r1, r3, r3, r2
 8009550:	095b      	lsrs	r3, r3, #5
 8009552:	2164      	movs	r1, #100	; 0x64
 8009554:	fb01 f303 	mul.w	r3, r1, r3
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	011b      	lsls	r3, r3, #4
 800955c:	3332      	adds	r3, #50	; 0x32
 800955e:	4a34      	ldr	r2, [pc, #208]	; (8009630 <UART_SetConfig+0x4e4>)
 8009560:	fba2 2303 	umull	r2, r3, r2, r3
 8009564:	095b      	lsrs	r3, r3, #5
 8009566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800956a:	441c      	add	r4, r3
 800956c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009570:	2200      	movs	r2, #0
 8009572:	673b      	str	r3, [r7, #112]	; 0x70
 8009574:	677a      	str	r2, [r7, #116]	; 0x74
 8009576:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800957a:	4642      	mov	r2, r8
 800957c:	464b      	mov	r3, r9
 800957e:	1891      	adds	r1, r2, r2
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	415b      	adcs	r3, r3
 8009584:	60fb      	str	r3, [r7, #12]
 8009586:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800958a:	4641      	mov	r1, r8
 800958c:	1851      	adds	r1, r2, r1
 800958e:	6039      	str	r1, [r7, #0]
 8009590:	4649      	mov	r1, r9
 8009592:	414b      	adcs	r3, r1
 8009594:	607b      	str	r3, [r7, #4]
 8009596:	f04f 0200 	mov.w	r2, #0
 800959a:	f04f 0300 	mov.w	r3, #0
 800959e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095a2:	4659      	mov	r1, fp
 80095a4:	00cb      	lsls	r3, r1, #3
 80095a6:	4651      	mov	r1, sl
 80095a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095ac:	4651      	mov	r1, sl
 80095ae:	00ca      	lsls	r2, r1, #3
 80095b0:	4610      	mov	r0, r2
 80095b2:	4619      	mov	r1, r3
 80095b4:	4603      	mov	r3, r0
 80095b6:	4642      	mov	r2, r8
 80095b8:	189b      	adds	r3, r3, r2
 80095ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80095bc:	464b      	mov	r3, r9
 80095be:	460a      	mov	r2, r1
 80095c0:	eb42 0303 	adc.w	r3, r2, r3
 80095c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	663b      	str	r3, [r7, #96]	; 0x60
 80095d0:	667a      	str	r2, [r7, #100]	; 0x64
 80095d2:	f04f 0200 	mov.w	r2, #0
 80095d6:	f04f 0300 	mov.w	r3, #0
 80095da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80095de:	4649      	mov	r1, r9
 80095e0:	008b      	lsls	r3, r1, #2
 80095e2:	4641      	mov	r1, r8
 80095e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095e8:	4641      	mov	r1, r8
 80095ea:	008a      	lsls	r2, r1, #2
 80095ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80095f0:	f7f7 fb2a 	bl	8000c48 <__aeabi_uldivmod>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4b0d      	ldr	r3, [pc, #52]	; (8009630 <UART_SetConfig+0x4e4>)
 80095fa:	fba3 1302 	umull	r1, r3, r3, r2
 80095fe:	095b      	lsrs	r3, r3, #5
 8009600:	2164      	movs	r1, #100	; 0x64
 8009602:	fb01 f303 	mul.w	r3, r1, r3
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	011b      	lsls	r3, r3, #4
 800960a:	3332      	adds	r3, #50	; 0x32
 800960c:	4a08      	ldr	r2, [pc, #32]	; (8009630 <UART_SetConfig+0x4e4>)
 800960e:	fba2 2303 	umull	r2, r3, r2, r3
 8009612:	095b      	lsrs	r3, r3, #5
 8009614:	f003 020f 	and.w	r2, r3, #15
 8009618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4422      	add	r2, r4
 8009620:	609a      	str	r2, [r3, #8]
}
 8009622:	bf00      	nop
 8009624:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009628:	46bd      	mov	sp, r7
 800962a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800962e:	bf00      	nop
 8009630:	51eb851f 	.word	0x51eb851f

08009634 <__errno>:
 8009634:	4b01      	ldr	r3, [pc, #4]	; (800963c <__errno+0x8>)
 8009636:	6818      	ldr	r0, [r3, #0]
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	200000f0 	.word	0x200000f0

08009640 <__libc_init_array>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	4d0d      	ldr	r5, [pc, #52]	; (8009678 <__libc_init_array+0x38>)
 8009644:	4c0d      	ldr	r4, [pc, #52]	; (800967c <__libc_init_array+0x3c>)
 8009646:	1b64      	subs	r4, r4, r5
 8009648:	10a4      	asrs	r4, r4, #2
 800964a:	2600      	movs	r6, #0
 800964c:	42a6      	cmp	r6, r4
 800964e:	d109      	bne.n	8009664 <__libc_init_array+0x24>
 8009650:	4d0b      	ldr	r5, [pc, #44]	; (8009680 <__libc_init_array+0x40>)
 8009652:	4c0c      	ldr	r4, [pc, #48]	; (8009684 <__libc_init_array+0x44>)
 8009654:	f002 f8ea 	bl	800b82c <_init>
 8009658:	1b64      	subs	r4, r4, r5
 800965a:	10a4      	asrs	r4, r4, #2
 800965c:	2600      	movs	r6, #0
 800965e:	42a6      	cmp	r6, r4
 8009660:	d105      	bne.n	800966e <__libc_init_array+0x2e>
 8009662:	bd70      	pop	{r4, r5, r6, pc}
 8009664:	f855 3b04 	ldr.w	r3, [r5], #4
 8009668:	4798      	blx	r3
 800966a:	3601      	adds	r6, #1
 800966c:	e7ee      	b.n	800964c <__libc_init_array+0xc>
 800966e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009672:	4798      	blx	r3
 8009674:	3601      	adds	r6, #1
 8009676:	e7f2      	b.n	800965e <__libc_init_array+0x1e>
 8009678:	0800bba8 	.word	0x0800bba8
 800967c:	0800bba8 	.word	0x0800bba8
 8009680:	0800bba8 	.word	0x0800bba8
 8009684:	0800bbac 	.word	0x0800bbac

08009688 <memset>:
 8009688:	4402      	add	r2, r0
 800968a:	4603      	mov	r3, r0
 800968c:	4293      	cmp	r3, r2
 800968e:	d100      	bne.n	8009692 <memset+0xa>
 8009690:	4770      	bx	lr
 8009692:	f803 1b01 	strb.w	r1, [r3], #1
 8009696:	e7f9      	b.n	800968c <memset+0x4>

08009698 <iprintf>:
 8009698:	b40f      	push	{r0, r1, r2, r3}
 800969a:	4b0a      	ldr	r3, [pc, #40]	; (80096c4 <iprintf+0x2c>)
 800969c:	b513      	push	{r0, r1, r4, lr}
 800969e:	681c      	ldr	r4, [r3, #0]
 80096a0:	b124      	cbz	r4, 80096ac <iprintf+0x14>
 80096a2:	69a3      	ldr	r3, [r4, #24]
 80096a4:	b913      	cbnz	r3, 80096ac <iprintf+0x14>
 80096a6:	4620      	mov	r0, r4
 80096a8:	f000 f89a 	bl	80097e0 <__sinit>
 80096ac:	ab05      	add	r3, sp, #20
 80096ae:	9a04      	ldr	r2, [sp, #16]
 80096b0:	68a1      	ldr	r1, [r4, #8]
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 fb4d 	bl	8009d54 <_vfiprintf_r>
 80096ba:	b002      	add	sp, #8
 80096bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096c0:	b004      	add	sp, #16
 80096c2:	4770      	bx	lr
 80096c4:	200000f0 	.word	0x200000f0

080096c8 <sniprintf>:
 80096c8:	b40c      	push	{r2, r3}
 80096ca:	b530      	push	{r4, r5, lr}
 80096cc:	4b17      	ldr	r3, [pc, #92]	; (800972c <sniprintf+0x64>)
 80096ce:	1e0c      	subs	r4, r1, #0
 80096d0:	681d      	ldr	r5, [r3, #0]
 80096d2:	b09d      	sub	sp, #116	; 0x74
 80096d4:	da08      	bge.n	80096e8 <sniprintf+0x20>
 80096d6:	238b      	movs	r3, #139	; 0x8b
 80096d8:	602b      	str	r3, [r5, #0]
 80096da:	f04f 30ff 	mov.w	r0, #4294967295
 80096de:	b01d      	add	sp, #116	; 0x74
 80096e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096e4:	b002      	add	sp, #8
 80096e6:	4770      	bx	lr
 80096e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80096ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80096f0:	bf14      	ite	ne
 80096f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80096f6:	4623      	moveq	r3, r4
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	9307      	str	r3, [sp, #28]
 80096fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009700:	9002      	str	r0, [sp, #8]
 8009702:	9006      	str	r0, [sp, #24]
 8009704:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009708:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800970a:	ab21      	add	r3, sp, #132	; 0x84
 800970c:	a902      	add	r1, sp, #8
 800970e:	4628      	mov	r0, r5
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	f000 f9f5 	bl	8009b00 <_svfiprintf_r>
 8009716:	1c43      	adds	r3, r0, #1
 8009718:	bfbc      	itt	lt
 800971a:	238b      	movlt	r3, #139	; 0x8b
 800971c:	602b      	strlt	r3, [r5, #0]
 800971e:	2c00      	cmp	r4, #0
 8009720:	d0dd      	beq.n	80096de <sniprintf+0x16>
 8009722:	9b02      	ldr	r3, [sp, #8]
 8009724:	2200      	movs	r2, #0
 8009726:	701a      	strb	r2, [r3, #0]
 8009728:	e7d9      	b.n	80096de <sniprintf+0x16>
 800972a:	bf00      	nop
 800972c:	200000f0 	.word	0x200000f0

08009730 <std>:
 8009730:	2300      	movs	r3, #0
 8009732:	b510      	push	{r4, lr}
 8009734:	4604      	mov	r4, r0
 8009736:	e9c0 3300 	strd	r3, r3, [r0]
 800973a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800973e:	6083      	str	r3, [r0, #8]
 8009740:	8181      	strh	r1, [r0, #12]
 8009742:	6643      	str	r3, [r0, #100]	; 0x64
 8009744:	81c2      	strh	r2, [r0, #14]
 8009746:	6183      	str	r3, [r0, #24]
 8009748:	4619      	mov	r1, r3
 800974a:	2208      	movs	r2, #8
 800974c:	305c      	adds	r0, #92	; 0x5c
 800974e:	f7ff ff9b 	bl	8009688 <memset>
 8009752:	4b05      	ldr	r3, [pc, #20]	; (8009768 <std+0x38>)
 8009754:	6263      	str	r3, [r4, #36]	; 0x24
 8009756:	4b05      	ldr	r3, [pc, #20]	; (800976c <std+0x3c>)
 8009758:	62a3      	str	r3, [r4, #40]	; 0x28
 800975a:	4b05      	ldr	r3, [pc, #20]	; (8009770 <std+0x40>)
 800975c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800975e:	4b05      	ldr	r3, [pc, #20]	; (8009774 <std+0x44>)
 8009760:	6224      	str	r4, [r4, #32]
 8009762:	6323      	str	r3, [r4, #48]	; 0x30
 8009764:	bd10      	pop	{r4, pc}
 8009766:	bf00      	nop
 8009768:	0800a2fd 	.word	0x0800a2fd
 800976c:	0800a31f 	.word	0x0800a31f
 8009770:	0800a357 	.word	0x0800a357
 8009774:	0800a37b 	.word	0x0800a37b

08009778 <_cleanup_r>:
 8009778:	4901      	ldr	r1, [pc, #4]	; (8009780 <_cleanup_r+0x8>)
 800977a:	f000 b8af 	b.w	80098dc <_fwalk_reent>
 800977e:	bf00      	nop
 8009780:	0800a655 	.word	0x0800a655

08009784 <__sfmoreglue>:
 8009784:	b570      	push	{r4, r5, r6, lr}
 8009786:	2268      	movs	r2, #104	; 0x68
 8009788:	1e4d      	subs	r5, r1, #1
 800978a:	4355      	muls	r5, r2
 800978c:	460e      	mov	r6, r1
 800978e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009792:	f000 f8e5 	bl	8009960 <_malloc_r>
 8009796:	4604      	mov	r4, r0
 8009798:	b140      	cbz	r0, 80097ac <__sfmoreglue+0x28>
 800979a:	2100      	movs	r1, #0
 800979c:	e9c0 1600 	strd	r1, r6, [r0]
 80097a0:	300c      	adds	r0, #12
 80097a2:	60a0      	str	r0, [r4, #8]
 80097a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097a8:	f7ff ff6e 	bl	8009688 <memset>
 80097ac:	4620      	mov	r0, r4
 80097ae:	bd70      	pop	{r4, r5, r6, pc}

080097b0 <__sfp_lock_acquire>:
 80097b0:	4801      	ldr	r0, [pc, #4]	; (80097b8 <__sfp_lock_acquire+0x8>)
 80097b2:	f000 b8b3 	b.w	800991c <__retarget_lock_acquire_recursive>
 80097b6:	bf00      	nop
 80097b8:	2000044d 	.word	0x2000044d

080097bc <__sfp_lock_release>:
 80097bc:	4801      	ldr	r0, [pc, #4]	; (80097c4 <__sfp_lock_release+0x8>)
 80097be:	f000 b8ae 	b.w	800991e <__retarget_lock_release_recursive>
 80097c2:	bf00      	nop
 80097c4:	2000044d 	.word	0x2000044d

080097c8 <__sinit_lock_acquire>:
 80097c8:	4801      	ldr	r0, [pc, #4]	; (80097d0 <__sinit_lock_acquire+0x8>)
 80097ca:	f000 b8a7 	b.w	800991c <__retarget_lock_acquire_recursive>
 80097ce:	bf00      	nop
 80097d0:	2000044e 	.word	0x2000044e

080097d4 <__sinit_lock_release>:
 80097d4:	4801      	ldr	r0, [pc, #4]	; (80097dc <__sinit_lock_release+0x8>)
 80097d6:	f000 b8a2 	b.w	800991e <__retarget_lock_release_recursive>
 80097da:	bf00      	nop
 80097dc:	2000044e 	.word	0x2000044e

080097e0 <__sinit>:
 80097e0:	b510      	push	{r4, lr}
 80097e2:	4604      	mov	r4, r0
 80097e4:	f7ff fff0 	bl	80097c8 <__sinit_lock_acquire>
 80097e8:	69a3      	ldr	r3, [r4, #24]
 80097ea:	b11b      	cbz	r3, 80097f4 <__sinit+0x14>
 80097ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f0:	f7ff bff0 	b.w	80097d4 <__sinit_lock_release>
 80097f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80097f8:	6523      	str	r3, [r4, #80]	; 0x50
 80097fa:	4b13      	ldr	r3, [pc, #76]	; (8009848 <__sinit+0x68>)
 80097fc:	4a13      	ldr	r2, [pc, #76]	; (800984c <__sinit+0x6c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	62a2      	str	r2, [r4, #40]	; 0x28
 8009802:	42a3      	cmp	r3, r4
 8009804:	bf04      	itt	eq
 8009806:	2301      	moveq	r3, #1
 8009808:	61a3      	streq	r3, [r4, #24]
 800980a:	4620      	mov	r0, r4
 800980c:	f000 f820 	bl	8009850 <__sfp>
 8009810:	6060      	str	r0, [r4, #4]
 8009812:	4620      	mov	r0, r4
 8009814:	f000 f81c 	bl	8009850 <__sfp>
 8009818:	60a0      	str	r0, [r4, #8]
 800981a:	4620      	mov	r0, r4
 800981c:	f000 f818 	bl	8009850 <__sfp>
 8009820:	2200      	movs	r2, #0
 8009822:	60e0      	str	r0, [r4, #12]
 8009824:	2104      	movs	r1, #4
 8009826:	6860      	ldr	r0, [r4, #4]
 8009828:	f7ff ff82 	bl	8009730 <std>
 800982c:	68a0      	ldr	r0, [r4, #8]
 800982e:	2201      	movs	r2, #1
 8009830:	2109      	movs	r1, #9
 8009832:	f7ff ff7d 	bl	8009730 <std>
 8009836:	68e0      	ldr	r0, [r4, #12]
 8009838:	2202      	movs	r2, #2
 800983a:	2112      	movs	r1, #18
 800983c:	f7ff ff78 	bl	8009730 <std>
 8009840:	2301      	movs	r3, #1
 8009842:	61a3      	str	r3, [r4, #24]
 8009844:	e7d2      	b.n	80097ec <__sinit+0xc>
 8009846:	bf00      	nop
 8009848:	0800bad4 	.word	0x0800bad4
 800984c:	08009779 	.word	0x08009779

08009850 <__sfp>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	4607      	mov	r7, r0
 8009854:	f7ff ffac 	bl	80097b0 <__sfp_lock_acquire>
 8009858:	4b1e      	ldr	r3, [pc, #120]	; (80098d4 <__sfp+0x84>)
 800985a:	681e      	ldr	r6, [r3, #0]
 800985c:	69b3      	ldr	r3, [r6, #24]
 800985e:	b913      	cbnz	r3, 8009866 <__sfp+0x16>
 8009860:	4630      	mov	r0, r6
 8009862:	f7ff ffbd 	bl	80097e0 <__sinit>
 8009866:	3648      	adds	r6, #72	; 0x48
 8009868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800986c:	3b01      	subs	r3, #1
 800986e:	d503      	bpl.n	8009878 <__sfp+0x28>
 8009870:	6833      	ldr	r3, [r6, #0]
 8009872:	b30b      	cbz	r3, 80098b8 <__sfp+0x68>
 8009874:	6836      	ldr	r6, [r6, #0]
 8009876:	e7f7      	b.n	8009868 <__sfp+0x18>
 8009878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800987c:	b9d5      	cbnz	r5, 80098b4 <__sfp+0x64>
 800987e:	4b16      	ldr	r3, [pc, #88]	; (80098d8 <__sfp+0x88>)
 8009880:	60e3      	str	r3, [r4, #12]
 8009882:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009886:	6665      	str	r5, [r4, #100]	; 0x64
 8009888:	f000 f847 	bl	800991a <__retarget_lock_init_recursive>
 800988c:	f7ff ff96 	bl	80097bc <__sfp_lock_release>
 8009890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009898:	6025      	str	r5, [r4, #0]
 800989a:	61a5      	str	r5, [r4, #24]
 800989c:	2208      	movs	r2, #8
 800989e:	4629      	mov	r1, r5
 80098a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098a4:	f7ff fef0 	bl	8009688 <memset>
 80098a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098b0:	4620      	mov	r0, r4
 80098b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b4:	3468      	adds	r4, #104	; 0x68
 80098b6:	e7d9      	b.n	800986c <__sfp+0x1c>
 80098b8:	2104      	movs	r1, #4
 80098ba:	4638      	mov	r0, r7
 80098bc:	f7ff ff62 	bl	8009784 <__sfmoreglue>
 80098c0:	4604      	mov	r4, r0
 80098c2:	6030      	str	r0, [r6, #0]
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d1d5      	bne.n	8009874 <__sfp+0x24>
 80098c8:	f7ff ff78 	bl	80097bc <__sfp_lock_release>
 80098cc:	230c      	movs	r3, #12
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	e7ee      	b.n	80098b0 <__sfp+0x60>
 80098d2:	bf00      	nop
 80098d4:	0800bad4 	.word	0x0800bad4
 80098d8:	ffff0001 	.word	0xffff0001

080098dc <_fwalk_reent>:
 80098dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e0:	4606      	mov	r6, r0
 80098e2:	4688      	mov	r8, r1
 80098e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098e8:	2700      	movs	r7, #0
 80098ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098ee:	f1b9 0901 	subs.w	r9, r9, #1
 80098f2:	d505      	bpl.n	8009900 <_fwalk_reent+0x24>
 80098f4:	6824      	ldr	r4, [r4, #0]
 80098f6:	2c00      	cmp	r4, #0
 80098f8:	d1f7      	bne.n	80098ea <_fwalk_reent+0xe>
 80098fa:	4638      	mov	r0, r7
 80098fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009900:	89ab      	ldrh	r3, [r5, #12]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d907      	bls.n	8009916 <_fwalk_reent+0x3a>
 8009906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800990a:	3301      	adds	r3, #1
 800990c:	d003      	beq.n	8009916 <_fwalk_reent+0x3a>
 800990e:	4629      	mov	r1, r5
 8009910:	4630      	mov	r0, r6
 8009912:	47c0      	blx	r8
 8009914:	4307      	orrs	r7, r0
 8009916:	3568      	adds	r5, #104	; 0x68
 8009918:	e7e9      	b.n	80098ee <_fwalk_reent+0x12>

0800991a <__retarget_lock_init_recursive>:
 800991a:	4770      	bx	lr

0800991c <__retarget_lock_acquire_recursive>:
 800991c:	4770      	bx	lr

0800991e <__retarget_lock_release_recursive>:
 800991e:	4770      	bx	lr

08009920 <sbrk_aligned>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	4e0e      	ldr	r6, [pc, #56]	; (800995c <sbrk_aligned+0x3c>)
 8009924:	460c      	mov	r4, r1
 8009926:	6831      	ldr	r1, [r6, #0]
 8009928:	4605      	mov	r5, r0
 800992a:	b911      	cbnz	r1, 8009932 <sbrk_aligned+0x12>
 800992c:	f000 fcd6 	bl	800a2dc <_sbrk_r>
 8009930:	6030      	str	r0, [r6, #0]
 8009932:	4621      	mov	r1, r4
 8009934:	4628      	mov	r0, r5
 8009936:	f000 fcd1 	bl	800a2dc <_sbrk_r>
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	d00a      	beq.n	8009954 <sbrk_aligned+0x34>
 800993e:	1cc4      	adds	r4, r0, #3
 8009940:	f024 0403 	bic.w	r4, r4, #3
 8009944:	42a0      	cmp	r0, r4
 8009946:	d007      	beq.n	8009958 <sbrk_aligned+0x38>
 8009948:	1a21      	subs	r1, r4, r0
 800994a:	4628      	mov	r0, r5
 800994c:	f000 fcc6 	bl	800a2dc <_sbrk_r>
 8009950:	3001      	adds	r0, #1
 8009952:	d101      	bne.n	8009958 <sbrk_aligned+0x38>
 8009954:	f04f 34ff 	mov.w	r4, #4294967295
 8009958:	4620      	mov	r0, r4
 800995a:	bd70      	pop	{r4, r5, r6, pc}
 800995c:	20000454 	.word	0x20000454

08009960 <_malloc_r>:
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	1ccd      	adds	r5, r1, #3
 8009966:	f025 0503 	bic.w	r5, r5, #3
 800996a:	3508      	adds	r5, #8
 800996c:	2d0c      	cmp	r5, #12
 800996e:	bf38      	it	cc
 8009970:	250c      	movcc	r5, #12
 8009972:	2d00      	cmp	r5, #0
 8009974:	4607      	mov	r7, r0
 8009976:	db01      	blt.n	800997c <_malloc_r+0x1c>
 8009978:	42a9      	cmp	r1, r5
 800997a:	d905      	bls.n	8009988 <_malloc_r+0x28>
 800997c:	230c      	movs	r3, #12
 800997e:	603b      	str	r3, [r7, #0]
 8009980:	2600      	movs	r6, #0
 8009982:	4630      	mov	r0, r6
 8009984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009988:	4e2e      	ldr	r6, [pc, #184]	; (8009a44 <_malloc_r+0xe4>)
 800998a:	f000 ff3f 	bl	800a80c <__malloc_lock>
 800998e:	6833      	ldr	r3, [r6, #0]
 8009990:	461c      	mov	r4, r3
 8009992:	bb34      	cbnz	r4, 80099e2 <_malloc_r+0x82>
 8009994:	4629      	mov	r1, r5
 8009996:	4638      	mov	r0, r7
 8009998:	f7ff ffc2 	bl	8009920 <sbrk_aligned>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	4604      	mov	r4, r0
 80099a0:	d14d      	bne.n	8009a3e <_malloc_r+0xde>
 80099a2:	6834      	ldr	r4, [r6, #0]
 80099a4:	4626      	mov	r6, r4
 80099a6:	2e00      	cmp	r6, #0
 80099a8:	d140      	bne.n	8009a2c <_malloc_r+0xcc>
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	4631      	mov	r1, r6
 80099ae:	4638      	mov	r0, r7
 80099b0:	eb04 0803 	add.w	r8, r4, r3
 80099b4:	f000 fc92 	bl	800a2dc <_sbrk_r>
 80099b8:	4580      	cmp	r8, r0
 80099ba:	d13a      	bne.n	8009a32 <_malloc_r+0xd2>
 80099bc:	6821      	ldr	r1, [r4, #0]
 80099be:	3503      	adds	r5, #3
 80099c0:	1a6d      	subs	r5, r5, r1
 80099c2:	f025 0503 	bic.w	r5, r5, #3
 80099c6:	3508      	adds	r5, #8
 80099c8:	2d0c      	cmp	r5, #12
 80099ca:	bf38      	it	cc
 80099cc:	250c      	movcc	r5, #12
 80099ce:	4629      	mov	r1, r5
 80099d0:	4638      	mov	r0, r7
 80099d2:	f7ff ffa5 	bl	8009920 <sbrk_aligned>
 80099d6:	3001      	adds	r0, #1
 80099d8:	d02b      	beq.n	8009a32 <_malloc_r+0xd2>
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	442b      	add	r3, r5
 80099de:	6023      	str	r3, [r4, #0]
 80099e0:	e00e      	b.n	8009a00 <_malloc_r+0xa0>
 80099e2:	6822      	ldr	r2, [r4, #0]
 80099e4:	1b52      	subs	r2, r2, r5
 80099e6:	d41e      	bmi.n	8009a26 <_malloc_r+0xc6>
 80099e8:	2a0b      	cmp	r2, #11
 80099ea:	d916      	bls.n	8009a1a <_malloc_r+0xba>
 80099ec:	1961      	adds	r1, r4, r5
 80099ee:	42a3      	cmp	r3, r4
 80099f0:	6025      	str	r5, [r4, #0]
 80099f2:	bf18      	it	ne
 80099f4:	6059      	strne	r1, [r3, #4]
 80099f6:	6863      	ldr	r3, [r4, #4]
 80099f8:	bf08      	it	eq
 80099fa:	6031      	streq	r1, [r6, #0]
 80099fc:	5162      	str	r2, [r4, r5]
 80099fe:	604b      	str	r3, [r1, #4]
 8009a00:	4638      	mov	r0, r7
 8009a02:	f104 060b 	add.w	r6, r4, #11
 8009a06:	f000 ff07 	bl	800a818 <__malloc_unlock>
 8009a0a:	f026 0607 	bic.w	r6, r6, #7
 8009a0e:	1d23      	adds	r3, r4, #4
 8009a10:	1af2      	subs	r2, r6, r3
 8009a12:	d0b6      	beq.n	8009982 <_malloc_r+0x22>
 8009a14:	1b9b      	subs	r3, r3, r6
 8009a16:	50a3      	str	r3, [r4, r2]
 8009a18:	e7b3      	b.n	8009982 <_malloc_r+0x22>
 8009a1a:	6862      	ldr	r2, [r4, #4]
 8009a1c:	42a3      	cmp	r3, r4
 8009a1e:	bf0c      	ite	eq
 8009a20:	6032      	streq	r2, [r6, #0]
 8009a22:	605a      	strne	r2, [r3, #4]
 8009a24:	e7ec      	b.n	8009a00 <_malloc_r+0xa0>
 8009a26:	4623      	mov	r3, r4
 8009a28:	6864      	ldr	r4, [r4, #4]
 8009a2a:	e7b2      	b.n	8009992 <_malloc_r+0x32>
 8009a2c:	4634      	mov	r4, r6
 8009a2e:	6876      	ldr	r6, [r6, #4]
 8009a30:	e7b9      	b.n	80099a6 <_malloc_r+0x46>
 8009a32:	230c      	movs	r3, #12
 8009a34:	603b      	str	r3, [r7, #0]
 8009a36:	4638      	mov	r0, r7
 8009a38:	f000 feee 	bl	800a818 <__malloc_unlock>
 8009a3c:	e7a1      	b.n	8009982 <_malloc_r+0x22>
 8009a3e:	6025      	str	r5, [r4, #0]
 8009a40:	e7de      	b.n	8009a00 <_malloc_r+0xa0>
 8009a42:	bf00      	nop
 8009a44:	20000450 	.word	0x20000450

08009a48 <__ssputs_r>:
 8009a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a4c:	688e      	ldr	r6, [r1, #8]
 8009a4e:	429e      	cmp	r6, r3
 8009a50:	4682      	mov	sl, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	4690      	mov	r8, r2
 8009a56:	461f      	mov	r7, r3
 8009a58:	d838      	bhi.n	8009acc <__ssputs_r+0x84>
 8009a5a:	898a      	ldrh	r2, [r1, #12]
 8009a5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a60:	d032      	beq.n	8009ac8 <__ssputs_r+0x80>
 8009a62:	6825      	ldr	r5, [r4, #0]
 8009a64:	6909      	ldr	r1, [r1, #16]
 8009a66:	eba5 0901 	sub.w	r9, r5, r1
 8009a6a:	6965      	ldr	r5, [r4, #20]
 8009a6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a74:	3301      	adds	r3, #1
 8009a76:	444b      	add	r3, r9
 8009a78:	106d      	asrs	r5, r5, #1
 8009a7a:	429d      	cmp	r5, r3
 8009a7c:	bf38      	it	cc
 8009a7e:	461d      	movcc	r5, r3
 8009a80:	0553      	lsls	r3, r2, #21
 8009a82:	d531      	bpl.n	8009ae8 <__ssputs_r+0xa0>
 8009a84:	4629      	mov	r1, r5
 8009a86:	f7ff ff6b 	bl	8009960 <_malloc_r>
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	b950      	cbnz	r0, 8009aa4 <__ssputs_r+0x5c>
 8009a8e:	230c      	movs	r3, #12
 8009a90:	f8ca 3000 	str.w	r3, [sl]
 8009a94:	89a3      	ldrh	r3, [r4, #12]
 8009a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a9a:	81a3      	strh	r3, [r4, #12]
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa4:	6921      	ldr	r1, [r4, #16]
 8009aa6:	464a      	mov	r2, r9
 8009aa8:	f000 fe88 	bl	800a7bc <memcpy>
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab6:	81a3      	strh	r3, [r4, #12]
 8009ab8:	6126      	str	r6, [r4, #16]
 8009aba:	6165      	str	r5, [r4, #20]
 8009abc:	444e      	add	r6, r9
 8009abe:	eba5 0509 	sub.w	r5, r5, r9
 8009ac2:	6026      	str	r6, [r4, #0]
 8009ac4:	60a5      	str	r5, [r4, #8]
 8009ac6:	463e      	mov	r6, r7
 8009ac8:	42be      	cmp	r6, r7
 8009aca:	d900      	bls.n	8009ace <__ssputs_r+0x86>
 8009acc:	463e      	mov	r6, r7
 8009ace:	6820      	ldr	r0, [r4, #0]
 8009ad0:	4632      	mov	r2, r6
 8009ad2:	4641      	mov	r1, r8
 8009ad4:	f000 fe80 	bl	800a7d8 <memmove>
 8009ad8:	68a3      	ldr	r3, [r4, #8]
 8009ada:	1b9b      	subs	r3, r3, r6
 8009adc:	60a3      	str	r3, [r4, #8]
 8009ade:	6823      	ldr	r3, [r4, #0]
 8009ae0:	4433      	add	r3, r6
 8009ae2:	6023      	str	r3, [r4, #0]
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	e7db      	b.n	8009aa0 <__ssputs_r+0x58>
 8009ae8:	462a      	mov	r2, r5
 8009aea:	f000 fee7 	bl	800a8bc <_realloc_r>
 8009aee:	4606      	mov	r6, r0
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d1e1      	bne.n	8009ab8 <__ssputs_r+0x70>
 8009af4:	6921      	ldr	r1, [r4, #16]
 8009af6:	4650      	mov	r0, sl
 8009af8:	f000 fe94 	bl	800a824 <_free_r>
 8009afc:	e7c7      	b.n	8009a8e <__ssputs_r+0x46>
	...

08009b00 <_svfiprintf_r>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	4698      	mov	r8, r3
 8009b06:	898b      	ldrh	r3, [r1, #12]
 8009b08:	061b      	lsls	r3, r3, #24
 8009b0a:	b09d      	sub	sp, #116	; 0x74
 8009b0c:	4607      	mov	r7, r0
 8009b0e:	460d      	mov	r5, r1
 8009b10:	4614      	mov	r4, r2
 8009b12:	d50e      	bpl.n	8009b32 <_svfiprintf_r+0x32>
 8009b14:	690b      	ldr	r3, [r1, #16]
 8009b16:	b963      	cbnz	r3, 8009b32 <_svfiprintf_r+0x32>
 8009b18:	2140      	movs	r1, #64	; 0x40
 8009b1a:	f7ff ff21 	bl	8009960 <_malloc_r>
 8009b1e:	6028      	str	r0, [r5, #0]
 8009b20:	6128      	str	r0, [r5, #16]
 8009b22:	b920      	cbnz	r0, 8009b2e <_svfiprintf_r+0x2e>
 8009b24:	230c      	movs	r3, #12
 8009b26:	603b      	str	r3, [r7, #0]
 8009b28:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2c:	e0d1      	b.n	8009cd2 <_svfiprintf_r+0x1d2>
 8009b2e:	2340      	movs	r3, #64	; 0x40
 8009b30:	616b      	str	r3, [r5, #20]
 8009b32:	2300      	movs	r3, #0
 8009b34:	9309      	str	r3, [sp, #36]	; 0x24
 8009b36:	2320      	movs	r3, #32
 8009b38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b40:	2330      	movs	r3, #48	; 0x30
 8009b42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009cec <_svfiprintf_r+0x1ec>
 8009b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b4a:	f04f 0901 	mov.w	r9, #1
 8009b4e:	4623      	mov	r3, r4
 8009b50:	469a      	mov	sl, r3
 8009b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b56:	b10a      	cbz	r2, 8009b5c <_svfiprintf_r+0x5c>
 8009b58:	2a25      	cmp	r2, #37	; 0x25
 8009b5a:	d1f9      	bne.n	8009b50 <_svfiprintf_r+0x50>
 8009b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b60:	d00b      	beq.n	8009b7a <_svfiprintf_r+0x7a>
 8009b62:	465b      	mov	r3, fp
 8009b64:	4622      	mov	r2, r4
 8009b66:	4629      	mov	r1, r5
 8009b68:	4638      	mov	r0, r7
 8009b6a:	f7ff ff6d 	bl	8009a48 <__ssputs_r>
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f000 80aa 	beq.w	8009cc8 <_svfiprintf_r+0x1c8>
 8009b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b76:	445a      	add	r2, fp
 8009b78:	9209      	str	r2, [sp, #36]	; 0x24
 8009b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f000 80a2 	beq.w	8009cc8 <_svfiprintf_r+0x1c8>
 8009b84:	2300      	movs	r3, #0
 8009b86:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b8e:	f10a 0a01 	add.w	sl, sl, #1
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	9307      	str	r3, [sp, #28]
 8009b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b9c:	4654      	mov	r4, sl
 8009b9e:	2205      	movs	r2, #5
 8009ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba4:	4851      	ldr	r0, [pc, #324]	; (8009cec <_svfiprintf_r+0x1ec>)
 8009ba6:	f7f6 fb1b 	bl	80001e0 <memchr>
 8009baa:	9a04      	ldr	r2, [sp, #16]
 8009bac:	b9d8      	cbnz	r0, 8009be6 <_svfiprintf_r+0xe6>
 8009bae:	06d0      	lsls	r0, r2, #27
 8009bb0:	bf44      	itt	mi
 8009bb2:	2320      	movmi	r3, #32
 8009bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bb8:	0711      	lsls	r1, r2, #28
 8009bba:	bf44      	itt	mi
 8009bbc:	232b      	movmi	r3, #43	; 0x2b
 8009bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8009bc8:	d015      	beq.n	8009bf6 <_svfiprintf_r+0xf6>
 8009bca:	9a07      	ldr	r2, [sp, #28]
 8009bcc:	4654      	mov	r4, sl
 8009bce:	2000      	movs	r0, #0
 8009bd0:	f04f 0c0a 	mov.w	ip, #10
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bda:	3b30      	subs	r3, #48	; 0x30
 8009bdc:	2b09      	cmp	r3, #9
 8009bde:	d94e      	bls.n	8009c7e <_svfiprintf_r+0x17e>
 8009be0:	b1b0      	cbz	r0, 8009c10 <_svfiprintf_r+0x110>
 8009be2:	9207      	str	r2, [sp, #28]
 8009be4:	e014      	b.n	8009c10 <_svfiprintf_r+0x110>
 8009be6:	eba0 0308 	sub.w	r3, r0, r8
 8009bea:	fa09 f303 	lsl.w	r3, r9, r3
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	9304      	str	r3, [sp, #16]
 8009bf2:	46a2      	mov	sl, r4
 8009bf4:	e7d2      	b.n	8009b9c <_svfiprintf_r+0x9c>
 8009bf6:	9b03      	ldr	r3, [sp, #12]
 8009bf8:	1d19      	adds	r1, r3, #4
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	9103      	str	r1, [sp, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	bfbb      	ittet	lt
 8009c02:	425b      	neglt	r3, r3
 8009c04:	f042 0202 	orrlt.w	r2, r2, #2
 8009c08:	9307      	strge	r3, [sp, #28]
 8009c0a:	9307      	strlt	r3, [sp, #28]
 8009c0c:	bfb8      	it	lt
 8009c0e:	9204      	strlt	r2, [sp, #16]
 8009c10:	7823      	ldrb	r3, [r4, #0]
 8009c12:	2b2e      	cmp	r3, #46	; 0x2e
 8009c14:	d10c      	bne.n	8009c30 <_svfiprintf_r+0x130>
 8009c16:	7863      	ldrb	r3, [r4, #1]
 8009c18:	2b2a      	cmp	r3, #42	; 0x2a
 8009c1a:	d135      	bne.n	8009c88 <_svfiprintf_r+0x188>
 8009c1c:	9b03      	ldr	r3, [sp, #12]
 8009c1e:	1d1a      	adds	r2, r3, #4
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	9203      	str	r2, [sp, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	bfb8      	it	lt
 8009c28:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c2c:	3402      	adds	r4, #2
 8009c2e:	9305      	str	r3, [sp, #20]
 8009c30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009cfc <_svfiprintf_r+0x1fc>
 8009c34:	7821      	ldrb	r1, [r4, #0]
 8009c36:	2203      	movs	r2, #3
 8009c38:	4650      	mov	r0, sl
 8009c3a:	f7f6 fad1 	bl	80001e0 <memchr>
 8009c3e:	b140      	cbz	r0, 8009c52 <_svfiprintf_r+0x152>
 8009c40:	2340      	movs	r3, #64	; 0x40
 8009c42:	eba0 000a 	sub.w	r0, r0, sl
 8009c46:	fa03 f000 	lsl.w	r0, r3, r0
 8009c4a:	9b04      	ldr	r3, [sp, #16]
 8009c4c:	4303      	orrs	r3, r0
 8009c4e:	3401      	adds	r4, #1
 8009c50:	9304      	str	r3, [sp, #16]
 8009c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c56:	4826      	ldr	r0, [pc, #152]	; (8009cf0 <_svfiprintf_r+0x1f0>)
 8009c58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c5c:	2206      	movs	r2, #6
 8009c5e:	f7f6 fabf 	bl	80001e0 <memchr>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d038      	beq.n	8009cd8 <_svfiprintf_r+0x1d8>
 8009c66:	4b23      	ldr	r3, [pc, #140]	; (8009cf4 <_svfiprintf_r+0x1f4>)
 8009c68:	bb1b      	cbnz	r3, 8009cb2 <_svfiprintf_r+0x1b2>
 8009c6a:	9b03      	ldr	r3, [sp, #12]
 8009c6c:	3307      	adds	r3, #7
 8009c6e:	f023 0307 	bic.w	r3, r3, #7
 8009c72:	3308      	adds	r3, #8
 8009c74:	9303      	str	r3, [sp, #12]
 8009c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c78:	4433      	add	r3, r6
 8009c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7c:	e767      	b.n	8009b4e <_svfiprintf_r+0x4e>
 8009c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c82:	460c      	mov	r4, r1
 8009c84:	2001      	movs	r0, #1
 8009c86:	e7a5      	b.n	8009bd4 <_svfiprintf_r+0xd4>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	3401      	adds	r4, #1
 8009c8c:	9305      	str	r3, [sp, #20]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	f04f 0c0a 	mov.w	ip, #10
 8009c94:	4620      	mov	r0, r4
 8009c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c9a:	3a30      	subs	r2, #48	; 0x30
 8009c9c:	2a09      	cmp	r2, #9
 8009c9e:	d903      	bls.n	8009ca8 <_svfiprintf_r+0x1a8>
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d0c5      	beq.n	8009c30 <_svfiprintf_r+0x130>
 8009ca4:	9105      	str	r1, [sp, #20]
 8009ca6:	e7c3      	b.n	8009c30 <_svfiprintf_r+0x130>
 8009ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cac:	4604      	mov	r4, r0
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e7f0      	b.n	8009c94 <_svfiprintf_r+0x194>
 8009cb2:	ab03      	add	r3, sp, #12
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	4b0f      	ldr	r3, [pc, #60]	; (8009cf8 <_svfiprintf_r+0x1f8>)
 8009cba:	a904      	add	r1, sp, #16
 8009cbc:	4638      	mov	r0, r7
 8009cbe:	f3af 8000 	nop.w
 8009cc2:	1c42      	adds	r2, r0, #1
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	d1d6      	bne.n	8009c76 <_svfiprintf_r+0x176>
 8009cc8:	89ab      	ldrh	r3, [r5, #12]
 8009cca:	065b      	lsls	r3, r3, #25
 8009ccc:	f53f af2c 	bmi.w	8009b28 <_svfiprintf_r+0x28>
 8009cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cd2:	b01d      	add	sp, #116	; 0x74
 8009cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd8:	ab03      	add	r3, sp, #12
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	462a      	mov	r2, r5
 8009cde:	4b06      	ldr	r3, [pc, #24]	; (8009cf8 <_svfiprintf_r+0x1f8>)
 8009ce0:	a904      	add	r1, sp, #16
 8009ce2:	4638      	mov	r0, r7
 8009ce4:	f000 f9d4 	bl	800a090 <_printf_i>
 8009ce8:	e7eb      	b.n	8009cc2 <_svfiprintf_r+0x1c2>
 8009cea:	bf00      	nop
 8009cec:	0800bb38 	.word	0x0800bb38
 8009cf0:	0800bb42 	.word	0x0800bb42
 8009cf4:	00000000 	.word	0x00000000
 8009cf8:	08009a49 	.word	0x08009a49
 8009cfc:	0800bb3e 	.word	0x0800bb3e

08009d00 <__sfputc_r>:
 8009d00:	6893      	ldr	r3, [r2, #8]
 8009d02:	3b01      	subs	r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	b410      	push	{r4}
 8009d08:	6093      	str	r3, [r2, #8]
 8009d0a:	da08      	bge.n	8009d1e <__sfputc_r+0x1e>
 8009d0c:	6994      	ldr	r4, [r2, #24]
 8009d0e:	42a3      	cmp	r3, r4
 8009d10:	db01      	blt.n	8009d16 <__sfputc_r+0x16>
 8009d12:	290a      	cmp	r1, #10
 8009d14:	d103      	bne.n	8009d1e <__sfputc_r+0x1e>
 8009d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d1a:	f000 bb33 	b.w	800a384 <__swbuf_r>
 8009d1e:	6813      	ldr	r3, [r2, #0]
 8009d20:	1c58      	adds	r0, r3, #1
 8009d22:	6010      	str	r0, [r2, #0]
 8009d24:	7019      	strb	r1, [r3, #0]
 8009d26:	4608      	mov	r0, r1
 8009d28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <__sfputs_r>:
 8009d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d30:	4606      	mov	r6, r0
 8009d32:	460f      	mov	r7, r1
 8009d34:	4614      	mov	r4, r2
 8009d36:	18d5      	adds	r5, r2, r3
 8009d38:	42ac      	cmp	r4, r5
 8009d3a:	d101      	bne.n	8009d40 <__sfputs_r+0x12>
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	e007      	b.n	8009d50 <__sfputs_r+0x22>
 8009d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d44:	463a      	mov	r2, r7
 8009d46:	4630      	mov	r0, r6
 8009d48:	f7ff ffda 	bl	8009d00 <__sfputc_r>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d1f3      	bne.n	8009d38 <__sfputs_r+0xa>
 8009d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d54 <_vfiprintf_r>:
 8009d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d58:	460d      	mov	r5, r1
 8009d5a:	b09d      	sub	sp, #116	; 0x74
 8009d5c:	4614      	mov	r4, r2
 8009d5e:	4698      	mov	r8, r3
 8009d60:	4606      	mov	r6, r0
 8009d62:	b118      	cbz	r0, 8009d6c <_vfiprintf_r+0x18>
 8009d64:	6983      	ldr	r3, [r0, #24]
 8009d66:	b90b      	cbnz	r3, 8009d6c <_vfiprintf_r+0x18>
 8009d68:	f7ff fd3a 	bl	80097e0 <__sinit>
 8009d6c:	4b89      	ldr	r3, [pc, #548]	; (8009f94 <_vfiprintf_r+0x240>)
 8009d6e:	429d      	cmp	r5, r3
 8009d70:	d11b      	bne.n	8009daa <_vfiprintf_r+0x56>
 8009d72:	6875      	ldr	r5, [r6, #4]
 8009d74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d76:	07d9      	lsls	r1, r3, #31
 8009d78:	d405      	bmi.n	8009d86 <_vfiprintf_r+0x32>
 8009d7a:	89ab      	ldrh	r3, [r5, #12]
 8009d7c:	059a      	lsls	r2, r3, #22
 8009d7e:	d402      	bmi.n	8009d86 <_vfiprintf_r+0x32>
 8009d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d82:	f7ff fdcb 	bl	800991c <__retarget_lock_acquire_recursive>
 8009d86:	89ab      	ldrh	r3, [r5, #12]
 8009d88:	071b      	lsls	r3, r3, #28
 8009d8a:	d501      	bpl.n	8009d90 <_vfiprintf_r+0x3c>
 8009d8c:	692b      	ldr	r3, [r5, #16]
 8009d8e:	b9eb      	cbnz	r3, 8009dcc <_vfiprintf_r+0x78>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4630      	mov	r0, r6
 8009d94:	f000 fb5a 	bl	800a44c <__swsetup_r>
 8009d98:	b1c0      	cbz	r0, 8009dcc <_vfiprintf_r+0x78>
 8009d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d9c:	07dc      	lsls	r4, r3, #31
 8009d9e:	d50e      	bpl.n	8009dbe <_vfiprintf_r+0x6a>
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	b01d      	add	sp, #116	; 0x74
 8009da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009daa:	4b7b      	ldr	r3, [pc, #492]	; (8009f98 <_vfiprintf_r+0x244>)
 8009dac:	429d      	cmp	r5, r3
 8009dae:	d101      	bne.n	8009db4 <_vfiprintf_r+0x60>
 8009db0:	68b5      	ldr	r5, [r6, #8]
 8009db2:	e7df      	b.n	8009d74 <_vfiprintf_r+0x20>
 8009db4:	4b79      	ldr	r3, [pc, #484]	; (8009f9c <_vfiprintf_r+0x248>)
 8009db6:	429d      	cmp	r5, r3
 8009db8:	bf08      	it	eq
 8009dba:	68f5      	ldreq	r5, [r6, #12]
 8009dbc:	e7da      	b.n	8009d74 <_vfiprintf_r+0x20>
 8009dbe:	89ab      	ldrh	r3, [r5, #12]
 8009dc0:	0598      	lsls	r0, r3, #22
 8009dc2:	d4ed      	bmi.n	8009da0 <_vfiprintf_r+0x4c>
 8009dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dc6:	f7ff fdaa 	bl	800991e <__retarget_lock_release_recursive>
 8009dca:	e7e9      	b.n	8009da0 <_vfiprintf_r+0x4c>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd0:	2320      	movs	r3, #32
 8009dd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dda:	2330      	movs	r3, #48	; 0x30
 8009ddc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009fa0 <_vfiprintf_r+0x24c>
 8009de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009de4:	f04f 0901 	mov.w	r9, #1
 8009de8:	4623      	mov	r3, r4
 8009dea:	469a      	mov	sl, r3
 8009dec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009df0:	b10a      	cbz	r2, 8009df6 <_vfiprintf_r+0xa2>
 8009df2:	2a25      	cmp	r2, #37	; 0x25
 8009df4:	d1f9      	bne.n	8009dea <_vfiprintf_r+0x96>
 8009df6:	ebba 0b04 	subs.w	fp, sl, r4
 8009dfa:	d00b      	beq.n	8009e14 <_vfiprintf_r+0xc0>
 8009dfc:	465b      	mov	r3, fp
 8009dfe:	4622      	mov	r2, r4
 8009e00:	4629      	mov	r1, r5
 8009e02:	4630      	mov	r0, r6
 8009e04:	f7ff ff93 	bl	8009d2e <__sfputs_r>
 8009e08:	3001      	adds	r0, #1
 8009e0a:	f000 80aa 	beq.w	8009f62 <_vfiprintf_r+0x20e>
 8009e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e10:	445a      	add	r2, fp
 8009e12:	9209      	str	r2, [sp, #36]	; 0x24
 8009e14:	f89a 3000 	ldrb.w	r3, [sl]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 80a2 	beq.w	8009f62 <_vfiprintf_r+0x20e>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f04f 32ff 	mov.w	r2, #4294967295
 8009e24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e28:	f10a 0a01 	add.w	sl, sl, #1
 8009e2c:	9304      	str	r3, [sp, #16]
 8009e2e:	9307      	str	r3, [sp, #28]
 8009e30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e34:	931a      	str	r3, [sp, #104]	; 0x68
 8009e36:	4654      	mov	r4, sl
 8009e38:	2205      	movs	r2, #5
 8009e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3e:	4858      	ldr	r0, [pc, #352]	; (8009fa0 <_vfiprintf_r+0x24c>)
 8009e40:	f7f6 f9ce 	bl	80001e0 <memchr>
 8009e44:	9a04      	ldr	r2, [sp, #16]
 8009e46:	b9d8      	cbnz	r0, 8009e80 <_vfiprintf_r+0x12c>
 8009e48:	06d1      	lsls	r1, r2, #27
 8009e4a:	bf44      	itt	mi
 8009e4c:	2320      	movmi	r3, #32
 8009e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e52:	0713      	lsls	r3, r2, #28
 8009e54:	bf44      	itt	mi
 8009e56:	232b      	movmi	r3, #43	; 0x2b
 8009e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e60:	2b2a      	cmp	r3, #42	; 0x2a
 8009e62:	d015      	beq.n	8009e90 <_vfiprintf_r+0x13c>
 8009e64:	9a07      	ldr	r2, [sp, #28]
 8009e66:	4654      	mov	r4, sl
 8009e68:	2000      	movs	r0, #0
 8009e6a:	f04f 0c0a 	mov.w	ip, #10
 8009e6e:	4621      	mov	r1, r4
 8009e70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e74:	3b30      	subs	r3, #48	; 0x30
 8009e76:	2b09      	cmp	r3, #9
 8009e78:	d94e      	bls.n	8009f18 <_vfiprintf_r+0x1c4>
 8009e7a:	b1b0      	cbz	r0, 8009eaa <_vfiprintf_r+0x156>
 8009e7c:	9207      	str	r2, [sp, #28]
 8009e7e:	e014      	b.n	8009eaa <_vfiprintf_r+0x156>
 8009e80:	eba0 0308 	sub.w	r3, r0, r8
 8009e84:	fa09 f303 	lsl.w	r3, r9, r3
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	9304      	str	r3, [sp, #16]
 8009e8c:	46a2      	mov	sl, r4
 8009e8e:	e7d2      	b.n	8009e36 <_vfiprintf_r+0xe2>
 8009e90:	9b03      	ldr	r3, [sp, #12]
 8009e92:	1d19      	adds	r1, r3, #4
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	9103      	str	r1, [sp, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	bfbb      	ittet	lt
 8009e9c:	425b      	neglt	r3, r3
 8009e9e:	f042 0202 	orrlt.w	r2, r2, #2
 8009ea2:	9307      	strge	r3, [sp, #28]
 8009ea4:	9307      	strlt	r3, [sp, #28]
 8009ea6:	bfb8      	it	lt
 8009ea8:	9204      	strlt	r2, [sp, #16]
 8009eaa:	7823      	ldrb	r3, [r4, #0]
 8009eac:	2b2e      	cmp	r3, #46	; 0x2e
 8009eae:	d10c      	bne.n	8009eca <_vfiprintf_r+0x176>
 8009eb0:	7863      	ldrb	r3, [r4, #1]
 8009eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009eb4:	d135      	bne.n	8009f22 <_vfiprintf_r+0x1ce>
 8009eb6:	9b03      	ldr	r3, [sp, #12]
 8009eb8:	1d1a      	adds	r2, r3, #4
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	9203      	str	r2, [sp, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	bfb8      	it	lt
 8009ec2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ec6:	3402      	adds	r4, #2
 8009ec8:	9305      	str	r3, [sp, #20]
 8009eca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fb0 <_vfiprintf_r+0x25c>
 8009ece:	7821      	ldrb	r1, [r4, #0]
 8009ed0:	2203      	movs	r2, #3
 8009ed2:	4650      	mov	r0, sl
 8009ed4:	f7f6 f984 	bl	80001e0 <memchr>
 8009ed8:	b140      	cbz	r0, 8009eec <_vfiprintf_r+0x198>
 8009eda:	2340      	movs	r3, #64	; 0x40
 8009edc:	eba0 000a 	sub.w	r0, r0, sl
 8009ee0:	fa03 f000 	lsl.w	r0, r3, r0
 8009ee4:	9b04      	ldr	r3, [sp, #16]
 8009ee6:	4303      	orrs	r3, r0
 8009ee8:	3401      	adds	r4, #1
 8009eea:	9304      	str	r3, [sp, #16]
 8009eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef0:	482c      	ldr	r0, [pc, #176]	; (8009fa4 <_vfiprintf_r+0x250>)
 8009ef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ef6:	2206      	movs	r2, #6
 8009ef8:	f7f6 f972 	bl	80001e0 <memchr>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d03f      	beq.n	8009f80 <_vfiprintf_r+0x22c>
 8009f00:	4b29      	ldr	r3, [pc, #164]	; (8009fa8 <_vfiprintf_r+0x254>)
 8009f02:	bb1b      	cbnz	r3, 8009f4c <_vfiprintf_r+0x1f8>
 8009f04:	9b03      	ldr	r3, [sp, #12]
 8009f06:	3307      	adds	r3, #7
 8009f08:	f023 0307 	bic.w	r3, r3, #7
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	9303      	str	r3, [sp, #12]
 8009f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f12:	443b      	add	r3, r7
 8009f14:	9309      	str	r3, [sp, #36]	; 0x24
 8009f16:	e767      	b.n	8009de8 <_vfiprintf_r+0x94>
 8009f18:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	2001      	movs	r0, #1
 8009f20:	e7a5      	b.n	8009e6e <_vfiprintf_r+0x11a>
 8009f22:	2300      	movs	r3, #0
 8009f24:	3401      	adds	r4, #1
 8009f26:	9305      	str	r3, [sp, #20]
 8009f28:	4619      	mov	r1, r3
 8009f2a:	f04f 0c0a 	mov.w	ip, #10
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f34:	3a30      	subs	r2, #48	; 0x30
 8009f36:	2a09      	cmp	r2, #9
 8009f38:	d903      	bls.n	8009f42 <_vfiprintf_r+0x1ee>
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0c5      	beq.n	8009eca <_vfiprintf_r+0x176>
 8009f3e:	9105      	str	r1, [sp, #20]
 8009f40:	e7c3      	b.n	8009eca <_vfiprintf_r+0x176>
 8009f42:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f46:	4604      	mov	r4, r0
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e7f0      	b.n	8009f2e <_vfiprintf_r+0x1da>
 8009f4c:	ab03      	add	r3, sp, #12
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	462a      	mov	r2, r5
 8009f52:	4b16      	ldr	r3, [pc, #88]	; (8009fac <_vfiprintf_r+0x258>)
 8009f54:	a904      	add	r1, sp, #16
 8009f56:	4630      	mov	r0, r6
 8009f58:	f3af 8000 	nop.w
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	1c78      	adds	r0, r7, #1
 8009f60:	d1d6      	bne.n	8009f10 <_vfiprintf_r+0x1bc>
 8009f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f64:	07d9      	lsls	r1, r3, #31
 8009f66:	d405      	bmi.n	8009f74 <_vfiprintf_r+0x220>
 8009f68:	89ab      	ldrh	r3, [r5, #12]
 8009f6a:	059a      	lsls	r2, r3, #22
 8009f6c:	d402      	bmi.n	8009f74 <_vfiprintf_r+0x220>
 8009f6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f70:	f7ff fcd5 	bl	800991e <__retarget_lock_release_recursive>
 8009f74:	89ab      	ldrh	r3, [r5, #12]
 8009f76:	065b      	lsls	r3, r3, #25
 8009f78:	f53f af12 	bmi.w	8009da0 <_vfiprintf_r+0x4c>
 8009f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f7e:	e711      	b.n	8009da4 <_vfiprintf_r+0x50>
 8009f80:	ab03      	add	r3, sp, #12
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	462a      	mov	r2, r5
 8009f86:	4b09      	ldr	r3, [pc, #36]	; (8009fac <_vfiprintf_r+0x258>)
 8009f88:	a904      	add	r1, sp, #16
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f000 f880 	bl	800a090 <_printf_i>
 8009f90:	e7e4      	b.n	8009f5c <_vfiprintf_r+0x208>
 8009f92:	bf00      	nop
 8009f94:	0800baf8 	.word	0x0800baf8
 8009f98:	0800bb18 	.word	0x0800bb18
 8009f9c:	0800bad8 	.word	0x0800bad8
 8009fa0:	0800bb38 	.word	0x0800bb38
 8009fa4:	0800bb42 	.word	0x0800bb42
 8009fa8:	00000000 	.word	0x00000000
 8009fac:	08009d2f 	.word	0x08009d2f
 8009fb0:	0800bb3e 	.word	0x0800bb3e

08009fb4 <_printf_common>:
 8009fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb8:	4616      	mov	r6, r2
 8009fba:	4699      	mov	r9, r3
 8009fbc:	688a      	ldr	r2, [r1, #8]
 8009fbe:	690b      	ldr	r3, [r1, #16]
 8009fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	bfb8      	it	lt
 8009fc8:	4613      	movlt	r3, r2
 8009fca:	6033      	str	r3, [r6, #0]
 8009fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fd0:	4607      	mov	r7, r0
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	b10a      	cbz	r2, 8009fda <_printf_common+0x26>
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	6033      	str	r3, [r6, #0]
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	0699      	lsls	r1, r3, #26
 8009fde:	bf42      	ittt	mi
 8009fe0:	6833      	ldrmi	r3, [r6, #0]
 8009fe2:	3302      	addmi	r3, #2
 8009fe4:	6033      	strmi	r3, [r6, #0]
 8009fe6:	6825      	ldr	r5, [r4, #0]
 8009fe8:	f015 0506 	ands.w	r5, r5, #6
 8009fec:	d106      	bne.n	8009ffc <_printf_common+0x48>
 8009fee:	f104 0a19 	add.w	sl, r4, #25
 8009ff2:	68e3      	ldr	r3, [r4, #12]
 8009ff4:	6832      	ldr	r2, [r6, #0]
 8009ff6:	1a9b      	subs	r3, r3, r2
 8009ff8:	42ab      	cmp	r3, r5
 8009ffa:	dc26      	bgt.n	800a04a <_printf_common+0x96>
 8009ffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a000:	1e13      	subs	r3, r2, #0
 800a002:	6822      	ldr	r2, [r4, #0]
 800a004:	bf18      	it	ne
 800a006:	2301      	movne	r3, #1
 800a008:	0692      	lsls	r2, r2, #26
 800a00a:	d42b      	bmi.n	800a064 <_printf_common+0xb0>
 800a00c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a010:	4649      	mov	r1, r9
 800a012:	4638      	mov	r0, r7
 800a014:	47c0      	blx	r8
 800a016:	3001      	adds	r0, #1
 800a018:	d01e      	beq.n	800a058 <_printf_common+0xa4>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	68e5      	ldr	r5, [r4, #12]
 800a01e:	6832      	ldr	r2, [r6, #0]
 800a020:	f003 0306 	and.w	r3, r3, #6
 800a024:	2b04      	cmp	r3, #4
 800a026:	bf08      	it	eq
 800a028:	1aad      	subeq	r5, r5, r2
 800a02a:	68a3      	ldr	r3, [r4, #8]
 800a02c:	6922      	ldr	r2, [r4, #16]
 800a02e:	bf0c      	ite	eq
 800a030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a034:	2500      	movne	r5, #0
 800a036:	4293      	cmp	r3, r2
 800a038:	bfc4      	itt	gt
 800a03a:	1a9b      	subgt	r3, r3, r2
 800a03c:	18ed      	addgt	r5, r5, r3
 800a03e:	2600      	movs	r6, #0
 800a040:	341a      	adds	r4, #26
 800a042:	42b5      	cmp	r5, r6
 800a044:	d11a      	bne.n	800a07c <_printf_common+0xc8>
 800a046:	2000      	movs	r0, #0
 800a048:	e008      	b.n	800a05c <_printf_common+0xa8>
 800a04a:	2301      	movs	r3, #1
 800a04c:	4652      	mov	r2, sl
 800a04e:	4649      	mov	r1, r9
 800a050:	4638      	mov	r0, r7
 800a052:	47c0      	blx	r8
 800a054:	3001      	adds	r0, #1
 800a056:	d103      	bne.n	800a060 <_printf_common+0xac>
 800a058:	f04f 30ff 	mov.w	r0, #4294967295
 800a05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a060:	3501      	adds	r5, #1
 800a062:	e7c6      	b.n	8009ff2 <_printf_common+0x3e>
 800a064:	18e1      	adds	r1, r4, r3
 800a066:	1c5a      	adds	r2, r3, #1
 800a068:	2030      	movs	r0, #48	; 0x30
 800a06a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a06e:	4422      	add	r2, r4
 800a070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a078:	3302      	adds	r3, #2
 800a07a:	e7c7      	b.n	800a00c <_printf_common+0x58>
 800a07c:	2301      	movs	r3, #1
 800a07e:	4622      	mov	r2, r4
 800a080:	4649      	mov	r1, r9
 800a082:	4638      	mov	r0, r7
 800a084:	47c0      	blx	r8
 800a086:	3001      	adds	r0, #1
 800a088:	d0e6      	beq.n	800a058 <_printf_common+0xa4>
 800a08a:	3601      	adds	r6, #1
 800a08c:	e7d9      	b.n	800a042 <_printf_common+0x8e>
	...

0800a090 <_printf_i>:
 800a090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a094:	7e0f      	ldrb	r7, [r1, #24]
 800a096:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a098:	2f78      	cmp	r7, #120	; 0x78
 800a09a:	4691      	mov	r9, r2
 800a09c:	4680      	mov	r8, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	469a      	mov	sl, r3
 800a0a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0a6:	d807      	bhi.n	800a0b8 <_printf_i+0x28>
 800a0a8:	2f62      	cmp	r7, #98	; 0x62
 800a0aa:	d80a      	bhi.n	800a0c2 <_printf_i+0x32>
 800a0ac:	2f00      	cmp	r7, #0
 800a0ae:	f000 80d8 	beq.w	800a262 <_printf_i+0x1d2>
 800a0b2:	2f58      	cmp	r7, #88	; 0x58
 800a0b4:	f000 80a3 	beq.w	800a1fe <_printf_i+0x16e>
 800a0b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0c0:	e03a      	b.n	800a138 <_printf_i+0xa8>
 800a0c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0c6:	2b15      	cmp	r3, #21
 800a0c8:	d8f6      	bhi.n	800a0b8 <_printf_i+0x28>
 800a0ca:	a101      	add	r1, pc, #4	; (adr r1, 800a0d0 <_printf_i+0x40>)
 800a0cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0d0:	0800a129 	.word	0x0800a129
 800a0d4:	0800a13d 	.word	0x0800a13d
 800a0d8:	0800a0b9 	.word	0x0800a0b9
 800a0dc:	0800a0b9 	.word	0x0800a0b9
 800a0e0:	0800a0b9 	.word	0x0800a0b9
 800a0e4:	0800a0b9 	.word	0x0800a0b9
 800a0e8:	0800a13d 	.word	0x0800a13d
 800a0ec:	0800a0b9 	.word	0x0800a0b9
 800a0f0:	0800a0b9 	.word	0x0800a0b9
 800a0f4:	0800a0b9 	.word	0x0800a0b9
 800a0f8:	0800a0b9 	.word	0x0800a0b9
 800a0fc:	0800a249 	.word	0x0800a249
 800a100:	0800a16d 	.word	0x0800a16d
 800a104:	0800a22b 	.word	0x0800a22b
 800a108:	0800a0b9 	.word	0x0800a0b9
 800a10c:	0800a0b9 	.word	0x0800a0b9
 800a110:	0800a26b 	.word	0x0800a26b
 800a114:	0800a0b9 	.word	0x0800a0b9
 800a118:	0800a16d 	.word	0x0800a16d
 800a11c:	0800a0b9 	.word	0x0800a0b9
 800a120:	0800a0b9 	.word	0x0800a0b9
 800a124:	0800a233 	.word	0x0800a233
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	1d1a      	adds	r2, r3, #4
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	602a      	str	r2, [r5, #0]
 800a130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a138:	2301      	movs	r3, #1
 800a13a:	e0a3      	b.n	800a284 <_printf_i+0x1f4>
 800a13c:	6820      	ldr	r0, [r4, #0]
 800a13e:	6829      	ldr	r1, [r5, #0]
 800a140:	0606      	lsls	r6, r0, #24
 800a142:	f101 0304 	add.w	r3, r1, #4
 800a146:	d50a      	bpl.n	800a15e <_printf_i+0xce>
 800a148:	680e      	ldr	r6, [r1, #0]
 800a14a:	602b      	str	r3, [r5, #0]
 800a14c:	2e00      	cmp	r6, #0
 800a14e:	da03      	bge.n	800a158 <_printf_i+0xc8>
 800a150:	232d      	movs	r3, #45	; 0x2d
 800a152:	4276      	negs	r6, r6
 800a154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a158:	485e      	ldr	r0, [pc, #376]	; (800a2d4 <_printf_i+0x244>)
 800a15a:	230a      	movs	r3, #10
 800a15c:	e019      	b.n	800a192 <_printf_i+0x102>
 800a15e:	680e      	ldr	r6, [r1, #0]
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a166:	bf18      	it	ne
 800a168:	b236      	sxthne	r6, r6
 800a16a:	e7ef      	b.n	800a14c <_printf_i+0xbc>
 800a16c:	682b      	ldr	r3, [r5, #0]
 800a16e:	6820      	ldr	r0, [r4, #0]
 800a170:	1d19      	adds	r1, r3, #4
 800a172:	6029      	str	r1, [r5, #0]
 800a174:	0601      	lsls	r1, r0, #24
 800a176:	d501      	bpl.n	800a17c <_printf_i+0xec>
 800a178:	681e      	ldr	r6, [r3, #0]
 800a17a:	e002      	b.n	800a182 <_printf_i+0xf2>
 800a17c:	0646      	lsls	r6, r0, #25
 800a17e:	d5fb      	bpl.n	800a178 <_printf_i+0xe8>
 800a180:	881e      	ldrh	r6, [r3, #0]
 800a182:	4854      	ldr	r0, [pc, #336]	; (800a2d4 <_printf_i+0x244>)
 800a184:	2f6f      	cmp	r7, #111	; 0x6f
 800a186:	bf0c      	ite	eq
 800a188:	2308      	moveq	r3, #8
 800a18a:	230a      	movne	r3, #10
 800a18c:	2100      	movs	r1, #0
 800a18e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a192:	6865      	ldr	r5, [r4, #4]
 800a194:	60a5      	str	r5, [r4, #8]
 800a196:	2d00      	cmp	r5, #0
 800a198:	bfa2      	ittt	ge
 800a19a:	6821      	ldrge	r1, [r4, #0]
 800a19c:	f021 0104 	bicge.w	r1, r1, #4
 800a1a0:	6021      	strge	r1, [r4, #0]
 800a1a2:	b90e      	cbnz	r6, 800a1a8 <_printf_i+0x118>
 800a1a4:	2d00      	cmp	r5, #0
 800a1a6:	d04d      	beq.n	800a244 <_printf_i+0x1b4>
 800a1a8:	4615      	mov	r5, r2
 800a1aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1ae:	fb03 6711 	mls	r7, r3, r1, r6
 800a1b2:	5dc7      	ldrb	r7, [r0, r7]
 800a1b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1b8:	4637      	mov	r7, r6
 800a1ba:	42bb      	cmp	r3, r7
 800a1bc:	460e      	mov	r6, r1
 800a1be:	d9f4      	bls.n	800a1aa <_printf_i+0x11a>
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	d10b      	bne.n	800a1dc <_printf_i+0x14c>
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	07de      	lsls	r6, r3, #31
 800a1c8:	d508      	bpl.n	800a1dc <_printf_i+0x14c>
 800a1ca:	6923      	ldr	r3, [r4, #16]
 800a1cc:	6861      	ldr	r1, [r4, #4]
 800a1ce:	4299      	cmp	r1, r3
 800a1d0:	bfde      	ittt	le
 800a1d2:	2330      	movle	r3, #48	; 0x30
 800a1d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1dc:	1b52      	subs	r2, r2, r5
 800a1de:	6122      	str	r2, [r4, #16]
 800a1e0:	f8cd a000 	str.w	sl, [sp]
 800a1e4:	464b      	mov	r3, r9
 800a1e6:	aa03      	add	r2, sp, #12
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	4640      	mov	r0, r8
 800a1ec:	f7ff fee2 	bl	8009fb4 <_printf_common>
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	d14c      	bne.n	800a28e <_printf_i+0x1fe>
 800a1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f8:	b004      	add	sp, #16
 800a1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1fe:	4835      	ldr	r0, [pc, #212]	; (800a2d4 <_printf_i+0x244>)
 800a200:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a204:	6829      	ldr	r1, [r5, #0]
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	f851 6b04 	ldr.w	r6, [r1], #4
 800a20c:	6029      	str	r1, [r5, #0]
 800a20e:	061d      	lsls	r5, r3, #24
 800a210:	d514      	bpl.n	800a23c <_printf_i+0x1ac>
 800a212:	07df      	lsls	r7, r3, #31
 800a214:	bf44      	itt	mi
 800a216:	f043 0320 	orrmi.w	r3, r3, #32
 800a21a:	6023      	strmi	r3, [r4, #0]
 800a21c:	b91e      	cbnz	r6, 800a226 <_printf_i+0x196>
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	f023 0320 	bic.w	r3, r3, #32
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	2310      	movs	r3, #16
 800a228:	e7b0      	b.n	800a18c <_printf_i+0xfc>
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	f043 0320 	orr.w	r3, r3, #32
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	2378      	movs	r3, #120	; 0x78
 800a234:	4828      	ldr	r0, [pc, #160]	; (800a2d8 <_printf_i+0x248>)
 800a236:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a23a:	e7e3      	b.n	800a204 <_printf_i+0x174>
 800a23c:	0659      	lsls	r1, r3, #25
 800a23e:	bf48      	it	mi
 800a240:	b2b6      	uxthmi	r6, r6
 800a242:	e7e6      	b.n	800a212 <_printf_i+0x182>
 800a244:	4615      	mov	r5, r2
 800a246:	e7bb      	b.n	800a1c0 <_printf_i+0x130>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	6826      	ldr	r6, [r4, #0]
 800a24c:	6961      	ldr	r1, [r4, #20]
 800a24e:	1d18      	adds	r0, r3, #4
 800a250:	6028      	str	r0, [r5, #0]
 800a252:	0635      	lsls	r5, r6, #24
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	d501      	bpl.n	800a25c <_printf_i+0x1cc>
 800a258:	6019      	str	r1, [r3, #0]
 800a25a:	e002      	b.n	800a262 <_printf_i+0x1d2>
 800a25c:	0670      	lsls	r0, r6, #25
 800a25e:	d5fb      	bpl.n	800a258 <_printf_i+0x1c8>
 800a260:	8019      	strh	r1, [r3, #0]
 800a262:	2300      	movs	r3, #0
 800a264:	6123      	str	r3, [r4, #16]
 800a266:	4615      	mov	r5, r2
 800a268:	e7ba      	b.n	800a1e0 <_printf_i+0x150>
 800a26a:	682b      	ldr	r3, [r5, #0]
 800a26c:	1d1a      	adds	r2, r3, #4
 800a26e:	602a      	str	r2, [r5, #0]
 800a270:	681d      	ldr	r5, [r3, #0]
 800a272:	6862      	ldr	r2, [r4, #4]
 800a274:	2100      	movs	r1, #0
 800a276:	4628      	mov	r0, r5
 800a278:	f7f5 ffb2 	bl	80001e0 <memchr>
 800a27c:	b108      	cbz	r0, 800a282 <_printf_i+0x1f2>
 800a27e:	1b40      	subs	r0, r0, r5
 800a280:	6060      	str	r0, [r4, #4]
 800a282:	6863      	ldr	r3, [r4, #4]
 800a284:	6123      	str	r3, [r4, #16]
 800a286:	2300      	movs	r3, #0
 800a288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a28c:	e7a8      	b.n	800a1e0 <_printf_i+0x150>
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	462a      	mov	r2, r5
 800a292:	4649      	mov	r1, r9
 800a294:	4640      	mov	r0, r8
 800a296:	47d0      	blx	sl
 800a298:	3001      	adds	r0, #1
 800a29a:	d0ab      	beq.n	800a1f4 <_printf_i+0x164>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	079b      	lsls	r3, r3, #30
 800a2a0:	d413      	bmi.n	800a2ca <_printf_i+0x23a>
 800a2a2:	68e0      	ldr	r0, [r4, #12]
 800a2a4:	9b03      	ldr	r3, [sp, #12]
 800a2a6:	4298      	cmp	r0, r3
 800a2a8:	bfb8      	it	lt
 800a2aa:	4618      	movlt	r0, r3
 800a2ac:	e7a4      	b.n	800a1f8 <_printf_i+0x168>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	4632      	mov	r2, r6
 800a2b2:	4649      	mov	r1, r9
 800a2b4:	4640      	mov	r0, r8
 800a2b6:	47d0      	blx	sl
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	d09b      	beq.n	800a1f4 <_printf_i+0x164>
 800a2bc:	3501      	adds	r5, #1
 800a2be:	68e3      	ldr	r3, [r4, #12]
 800a2c0:	9903      	ldr	r1, [sp, #12]
 800a2c2:	1a5b      	subs	r3, r3, r1
 800a2c4:	42ab      	cmp	r3, r5
 800a2c6:	dcf2      	bgt.n	800a2ae <_printf_i+0x21e>
 800a2c8:	e7eb      	b.n	800a2a2 <_printf_i+0x212>
 800a2ca:	2500      	movs	r5, #0
 800a2cc:	f104 0619 	add.w	r6, r4, #25
 800a2d0:	e7f5      	b.n	800a2be <_printf_i+0x22e>
 800a2d2:	bf00      	nop
 800a2d4:	0800bb49 	.word	0x0800bb49
 800a2d8:	0800bb5a 	.word	0x0800bb5a

0800a2dc <_sbrk_r>:
 800a2dc:	b538      	push	{r3, r4, r5, lr}
 800a2de:	4d06      	ldr	r5, [pc, #24]	; (800a2f8 <_sbrk_r+0x1c>)
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	4608      	mov	r0, r1
 800a2e6:	602b      	str	r3, [r5, #0]
 800a2e8:	f7f7 fdce 	bl	8001e88 <_sbrk>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d102      	bne.n	800a2f6 <_sbrk_r+0x1a>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	b103      	cbz	r3, 800a2f6 <_sbrk_r+0x1a>
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	20000458 	.word	0x20000458

0800a2fc <__sread>:
 800a2fc:	b510      	push	{r4, lr}
 800a2fe:	460c      	mov	r4, r1
 800a300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a304:	f000 fb0a 	bl	800a91c <_read_r>
 800a308:	2800      	cmp	r0, #0
 800a30a:	bfab      	itete	ge
 800a30c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a30e:	89a3      	ldrhlt	r3, [r4, #12]
 800a310:	181b      	addge	r3, r3, r0
 800a312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a316:	bfac      	ite	ge
 800a318:	6563      	strge	r3, [r4, #84]	; 0x54
 800a31a:	81a3      	strhlt	r3, [r4, #12]
 800a31c:	bd10      	pop	{r4, pc}

0800a31e <__swrite>:
 800a31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a322:	461f      	mov	r7, r3
 800a324:	898b      	ldrh	r3, [r1, #12]
 800a326:	05db      	lsls	r3, r3, #23
 800a328:	4605      	mov	r5, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	4616      	mov	r6, r2
 800a32e:	d505      	bpl.n	800a33c <__swrite+0x1e>
 800a330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a334:	2302      	movs	r3, #2
 800a336:	2200      	movs	r2, #0
 800a338:	f000 f9c8 	bl	800a6cc <_lseek_r>
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a346:	81a3      	strh	r3, [r4, #12]
 800a348:	4632      	mov	r2, r6
 800a34a:	463b      	mov	r3, r7
 800a34c:	4628      	mov	r0, r5
 800a34e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a352:	f000 b869 	b.w	800a428 <_write_r>

0800a356 <__sseek>:
 800a356:	b510      	push	{r4, lr}
 800a358:	460c      	mov	r4, r1
 800a35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a35e:	f000 f9b5 	bl	800a6cc <_lseek_r>
 800a362:	1c43      	adds	r3, r0, #1
 800a364:	89a3      	ldrh	r3, [r4, #12]
 800a366:	bf15      	itete	ne
 800a368:	6560      	strne	r0, [r4, #84]	; 0x54
 800a36a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a36e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a372:	81a3      	strheq	r3, [r4, #12]
 800a374:	bf18      	it	ne
 800a376:	81a3      	strhne	r3, [r4, #12]
 800a378:	bd10      	pop	{r4, pc}

0800a37a <__sclose>:
 800a37a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a37e:	f000 b8d3 	b.w	800a528 <_close_r>
	...

0800a384 <__swbuf_r>:
 800a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a386:	460e      	mov	r6, r1
 800a388:	4614      	mov	r4, r2
 800a38a:	4605      	mov	r5, r0
 800a38c:	b118      	cbz	r0, 800a396 <__swbuf_r+0x12>
 800a38e:	6983      	ldr	r3, [r0, #24]
 800a390:	b90b      	cbnz	r3, 800a396 <__swbuf_r+0x12>
 800a392:	f7ff fa25 	bl	80097e0 <__sinit>
 800a396:	4b21      	ldr	r3, [pc, #132]	; (800a41c <__swbuf_r+0x98>)
 800a398:	429c      	cmp	r4, r3
 800a39a:	d12b      	bne.n	800a3f4 <__swbuf_r+0x70>
 800a39c:	686c      	ldr	r4, [r5, #4]
 800a39e:	69a3      	ldr	r3, [r4, #24]
 800a3a0:	60a3      	str	r3, [r4, #8]
 800a3a2:	89a3      	ldrh	r3, [r4, #12]
 800a3a4:	071a      	lsls	r2, r3, #28
 800a3a6:	d52f      	bpl.n	800a408 <__swbuf_r+0x84>
 800a3a8:	6923      	ldr	r3, [r4, #16]
 800a3aa:	b36b      	cbz	r3, 800a408 <__swbuf_r+0x84>
 800a3ac:	6923      	ldr	r3, [r4, #16]
 800a3ae:	6820      	ldr	r0, [r4, #0]
 800a3b0:	1ac0      	subs	r0, r0, r3
 800a3b2:	6963      	ldr	r3, [r4, #20]
 800a3b4:	b2f6      	uxtb	r6, r6
 800a3b6:	4283      	cmp	r3, r0
 800a3b8:	4637      	mov	r7, r6
 800a3ba:	dc04      	bgt.n	800a3c6 <__swbuf_r+0x42>
 800a3bc:	4621      	mov	r1, r4
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f000 f948 	bl	800a654 <_fflush_r>
 800a3c4:	bb30      	cbnz	r0, 800a414 <__swbuf_r+0x90>
 800a3c6:	68a3      	ldr	r3, [r4, #8]
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	60a3      	str	r3, [r4, #8]
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	6022      	str	r2, [r4, #0]
 800a3d2:	701e      	strb	r6, [r3, #0]
 800a3d4:	6963      	ldr	r3, [r4, #20]
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	4283      	cmp	r3, r0
 800a3da:	d004      	beq.n	800a3e6 <__swbuf_r+0x62>
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	07db      	lsls	r3, r3, #31
 800a3e0:	d506      	bpl.n	800a3f0 <__swbuf_r+0x6c>
 800a3e2:	2e0a      	cmp	r6, #10
 800a3e4:	d104      	bne.n	800a3f0 <__swbuf_r+0x6c>
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	f000 f933 	bl	800a654 <_fflush_r>
 800a3ee:	b988      	cbnz	r0, 800a414 <__swbuf_r+0x90>
 800a3f0:	4638      	mov	r0, r7
 800a3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3f4:	4b0a      	ldr	r3, [pc, #40]	; (800a420 <__swbuf_r+0x9c>)
 800a3f6:	429c      	cmp	r4, r3
 800a3f8:	d101      	bne.n	800a3fe <__swbuf_r+0x7a>
 800a3fa:	68ac      	ldr	r4, [r5, #8]
 800a3fc:	e7cf      	b.n	800a39e <__swbuf_r+0x1a>
 800a3fe:	4b09      	ldr	r3, [pc, #36]	; (800a424 <__swbuf_r+0xa0>)
 800a400:	429c      	cmp	r4, r3
 800a402:	bf08      	it	eq
 800a404:	68ec      	ldreq	r4, [r5, #12]
 800a406:	e7ca      	b.n	800a39e <__swbuf_r+0x1a>
 800a408:	4621      	mov	r1, r4
 800a40a:	4628      	mov	r0, r5
 800a40c:	f000 f81e 	bl	800a44c <__swsetup_r>
 800a410:	2800      	cmp	r0, #0
 800a412:	d0cb      	beq.n	800a3ac <__swbuf_r+0x28>
 800a414:	f04f 37ff 	mov.w	r7, #4294967295
 800a418:	e7ea      	b.n	800a3f0 <__swbuf_r+0x6c>
 800a41a:	bf00      	nop
 800a41c:	0800baf8 	.word	0x0800baf8
 800a420:	0800bb18 	.word	0x0800bb18
 800a424:	0800bad8 	.word	0x0800bad8

0800a428 <_write_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4d07      	ldr	r5, [pc, #28]	; (800a448 <_write_r+0x20>)
 800a42c:	4604      	mov	r4, r0
 800a42e:	4608      	mov	r0, r1
 800a430:	4611      	mov	r1, r2
 800a432:	2200      	movs	r2, #0
 800a434:	602a      	str	r2, [r5, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	f7f7 fcd5 	bl	8001de6 <_write>
 800a43c:	1c43      	adds	r3, r0, #1
 800a43e:	d102      	bne.n	800a446 <_write_r+0x1e>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	b103      	cbz	r3, 800a446 <_write_r+0x1e>
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	20000458 	.word	0x20000458

0800a44c <__swsetup_r>:
 800a44c:	4b32      	ldr	r3, [pc, #200]	; (800a518 <__swsetup_r+0xcc>)
 800a44e:	b570      	push	{r4, r5, r6, lr}
 800a450:	681d      	ldr	r5, [r3, #0]
 800a452:	4606      	mov	r6, r0
 800a454:	460c      	mov	r4, r1
 800a456:	b125      	cbz	r5, 800a462 <__swsetup_r+0x16>
 800a458:	69ab      	ldr	r3, [r5, #24]
 800a45a:	b913      	cbnz	r3, 800a462 <__swsetup_r+0x16>
 800a45c:	4628      	mov	r0, r5
 800a45e:	f7ff f9bf 	bl	80097e0 <__sinit>
 800a462:	4b2e      	ldr	r3, [pc, #184]	; (800a51c <__swsetup_r+0xd0>)
 800a464:	429c      	cmp	r4, r3
 800a466:	d10f      	bne.n	800a488 <__swsetup_r+0x3c>
 800a468:	686c      	ldr	r4, [r5, #4]
 800a46a:	89a3      	ldrh	r3, [r4, #12]
 800a46c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a470:	0719      	lsls	r1, r3, #28
 800a472:	d42c      	bmi.n	800a4ce <__swsetup_r+0x82>
 800a474:	06dd      	lsls	r5, r3, #27
 800a476:	d411      	bmi.n	800a49c <__swsetup_r+0x50>
 800a478:	2309      	movs	r3, #9
 800a47a:	6033      	str	r3, [r6, #0]
 800a47c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a480:	81a3      	strh	r3, [r4, #12]
 800a482:	f04f 30ff 	mov.w	r0, #4294967295
 800a486:	e03e      	b.n	800a506 <__swsetup_r+0xba>
 800a488:	4b25      	ldr	r3, [pc, #148]	; (800a520 <__swsetup_r+0xd4>)
 800a48a:	429c      	cmp	r4, r3
 800a48c:	d101      	bne.n	800a492 <__swsetup_r+0x46>
 800a48e:	68ac      	ldr	r4, [r5, #8]
 800a490:	e7eb      	b.n	800a46a <__swsetup_r+0x1e>
 800a492:	4b24      	ldr	r3, [pc, #144]	; (800a524 <__swsetup_r+0xd8>)
 800a494:	429c      	cmp	r4, r3
 800a496:	bf08      	it	eq
 800a498:	68ec      	ldreq	r4, [r5, #12]
 800a49a:	e7e6      	b.n	800a46a <__swsetup_r+0x1e>
 800a49c:	0758      	lsls	r0, r3, #29
 800a49e:	d512      	bpl.n	800a4c6 <__swsetup_r+0x7a>
 800a4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4a2:	b141      	cbz	r1, 800a4b6 <__swsetup_r+0x6a>
 800a4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4a8:	4299      	cmp	r1, r3
 800a4aa:	d002      	beq.n	800a4b2 <__swsetup_r+0x66>
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f000 f9b9 	bl	800a824 <_free_r>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	6363      	str	r3, [r4, #52]	; 0x34
 800a4b6:	89a3      	ldrh	r3, [r4, #12]
 800a4b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4bc:	81a3      	strh	r3, [r4, #12]
 800a4be:	2300      	movs	r3, #0
 800a4c0:	6063      	str	r3, [r4, #4]
 800a4c2:	6923      	ldr	r3, [r4, #16]
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	89a3      	ldrh	r3, [r4, #12]
 800a4c8:	f043 0308 	orr.w	r3, r3, #8
 800a4cc:	81a3      	strh	r3, [r4, #12]
 800a4ce:	6923      	ldr	r3, [r4, #16]
 800a4d0:	b94b      	cbnz	r3, 800a4e6 <__swsetup_r+0x9a>
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4dc:	d003      	beq.n	800a4e6 <__swsetup_r+0x9a>
 800a4de:	4621      	mov	r1, r4
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	f000 f92b 	bl	800a73c <__smakebuf_r>
 800a4e6:	89a0      	ldrh	r0, [r4, #12]
 800a4e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4ec:	f010 0301 	ands.w	r3, r0, #1
 800a4f0:	d00a      	beq.n	800a508 <__swsetup_r+0xbc>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	60a3      	str	r3, [r4, #8]
 800a4f6:	6963      	ldr	r3, [r4, #20]
 800a4f8:	425b      	negs	r3, r3
 800a4fa:	61a3      	str	r3, [r4, #24]
 800a4fc:	6923      	ldr	r3, [r4, #16]
 800a4fe:	b943      	cbnz	r3, 800a512 <__swsetup_r+0xc6>
 800a500:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a504:	d1ba      	bne.n	800a47c <__swsetup_r+0x30>
 800a506:	bd70      	pop	{r4, r5, r6, pc}
 800a508:	0781      	lsls	r1, r0, #30
 800a50a:	bf58      	it	pl
 800a50c:	6963      	ldrpl	r3, [r4, #20]
 800a50e:	60a3      	str	r3, [r4, #8]
 800a510:	e7f4      	b.n	800a4fc <__swsetup_r+0xb0>
 800a512:	2000      	movs	r0, #0
 800a514:	e7f7      	b.n	800a506 <__swsetup_r+0xba>
 800a516:	bf00      	nop
 800a518:	200000f0 	.word	0x200000f0
 800a51c:	0800baf8 	.word	0x0800baf8
 800a520:	0800bb18 	.word	0x0800bb18
 800a524:	0800bad8 	.word	0x0800bad8

0800a528 <_close_r>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4d06      	ldr	r5, [pc, #24]	; (800a544 <_close_r+0x1c>)
 800a52c:	2300      	movs	r3, #0
 800a52e:	4604      	mov	r4, r0
 800a530:	4608      	mov	r0, r1
 800a532:	602b      	str	r3, [r5, #0]
 800a534:	f7f7 fc73 	bl	8001e1e <_close>
 800a538:	1c43      	adds	r3, r0, #1
 800a53a:	d102      	bne.n	800a542 <_close_r+0x1a>
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	b103      	cbz	r3, 800a542 <_close_r+0x1a>
 800a540:	6023      	str	r3, [r4, #0]
 800a542:	bd38      	pop	{r3, r4, r5, pc}
 800a544:	20000458 	.word	0x20000458

0800a548 <__sflush_r>:
 800a548:	898a      	ldrh	r2, [r1, #12]
 800a54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a54e:	4605      	mov	r5, r0
 800a550:	0710      	lsls	r0, r2, #28
 800a552:	460c      	mov	r4, r1
 800a554:	d458      	bmi.n	800a608 <__sflush_r+0xc0>
 800a556:	684b      	ldr	r3, [r1, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	dc05      	bgt.n	800a568 <__sflush_r+0x20>
 800a55c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a55e:	2b00      	cmp	r3, #0
 800a560:	dc02      	bgt.n	800a568 <__sflush_r+0x20>
 800a562:	2000      	movs	r0, #0
 800a564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a56a:	2e00      	cmp	r6, #0
 800a56c:	d0f9      	beq.n	800a562 <__sflush_r+0x1a>
 800a56e:	2300      	movs	r3, #0
 800a570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a574:	682f      	ldr	r7, [r5, #0]
 800a576:	602b      	str	r3, [r5, #0]
 800a578:	d032      	beq.n	800a5e0 <__sflush_r+0x98>
 800a57a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	075a      	lsls	r2, r3, #29
 800a580:	d505      	bpl.n	800a58e <__sflush_r+0x46>
 800a582:	6863      	ldr	r3, [r4, #4]
 800a584:	1ac0      	subs	r0, r0, r3
 800a586:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a588:	b10b      	cbz	r3, 800a58e <__sflush_r+0x46>
 800a58a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a58c:	1ac0      	subs	r0, r0, r3
 800a58e:	2300      	movs	r3, #0
 800a590:	4602      	mov	r2, r0
 800a592:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a594:	6a21      	ldr	r1, [r4, #32]
 800a596:	4628      	mov	r0, r5
 800a598:	47b0      	blx	r6
 800a59a:	1c43      	adds	r3, r0, #1
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	d106      	bne.n	800a5ae <__sflush_r+0x66>
 800a5a0:	6829      	ldr	r1, [r5, #0]
 800a5a2:	291d      	cmp	r1, #29
 800a5a4:	d82c      	bhi.n	800a600 <__sflush_r+0xb8>
 800a5a6:	4a2a      	ldr	r2, [pc, #168]	; (800a650 <__sflush_r+0x108>)
 800a5a8:	40ca      	lsrs	r2, r1
 800a5aa:	07d6      	lsls	r6, r2, #31
 800a5ac:	d528      	bpl.n	800a600 <__sflush_r+0xb8>
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	6062      	str	r2, [r4, #4]
 800a5b2:	04d9      	lsls	r1, r3, #19
 800a5b4:	6922      	ldr	r2, [r4, #16]
 800a5b6:	6022      	str	r2, [r4, #0]
 800a5b8:	d504      	bpl.n	800a5c4 <__sflush_r+0x7c>
 800a5ba:	1c42      	adds	r2, r0, #1
 800a5bc:	d101      	bne.n	800a5c2 <__sflush_r+0x7a>
 800a5be:	682b      	ldr	r3, [r5, #0]
 800a5c0:	b903      	cbnz	r3, 800a5c4 <__sflush_r+0x7c>
 800a5c2:	6560      	str	r0, [r4, #84]	; 0x54
 800a5c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5c6:	602f      	str	r7, [r5, #0]
 800a5c8:	2900      	cmp	r1, #0
 800a5ca:	d0ca      	beq.n	800a562 <__sflush_r+0x1a>
 800a5cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5d0:	4299      	cmp	r1, r3
 800a5d2:	d002      	beq.n	800a5da <__sflush_r+0x92>
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	f000 f925 	bl	800a824 <_free_r>
 800a5da:	2000      	movs	r0, #0
 800a5dc:	6360      	str	r0, [r4, #52]	; 0x34
 800a5de:	e7c1      	b.n	800a564 <__sflush_r+0x1c>
 800a5e0:	6a21      	ldr	r1, [r4, #32]
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	47b0      	blx	r6
 800a5e8:	1c41      	adds	r1, r0, #1
 800a5ea:	d1c7      	bne.n	800a57c <__sflush_r+0x34>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0c4      	beq.n	800a57c <__sflush_r+0x34>
 800a5f2:	2b1d      	cmp	r3, #29
 800a5f4:	d001      	beq.n	800a5fa <__sflush_r+0xb2>
 800a5f6:	2b16      	cmp	r3, #22
 800a5f8:	d101      	bne.n	800a5fe <__sflush_r+0xb6>
 800a5fa:	602f      	str	r7, [r5, #0]
 800a5fc:	e7b1      	b.n	800a562 <__sflush_r+0x1a>
 800a5fe:	89a3      	ldrh	r3, [r4, #12]
 800a600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a604:	81a3      	strh	r3, [r4, #12]
 800a606:	e7ad      	b.n	800a564 <__sflush_r+0x1c>
 800a608:	690f      	ldr	r7, [r1, #16]
 800a60a:	2f00      	cmp	r7, #0
 800a60c:	d0a9      	beq.n	800a562 <__sflush_r+0x1a>
 800a60e:	0793      	lsls	r3, r2, #30
 800a610:	680e      	ldr	r6, [r1, #0]
 800a612:	bf08      	it	eq
 800a614:	694b      	ldreq	r3, [r1, #20]
 800a616:	600f      	str	r7, [r1, #0]
 800a618:	bf18      	it	ne
 800a61a:	2300      	movne	r3, #0
 800a61c:	eba6 0807 	sub.w	r8, r6, r7
 800a620:	608b      	str	r3, [r1, #8]
 800a622:	f1b8 0f00 	cmp.w	r8, #0
 800a626:	dd9c      	ble.n	800a562 <__sflush_r+0x1a>
 800a628:	6a21      	ldr	r1, [r4, #32]
 800a62a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a62c:	4643      	mov	r3, r8
 800a62e:	463a      	mov	r2, r7
 800a630:	4628      	mov	r0, r5
 800a632:	47b0      	blx	r6
 800a634:	2800      	cmp	r0, #0
 800a636:	dc06      	bgt.n	800a646 <__sflush_r+0xfe>
 800a638:	89a3      	ldrh	r3, [r4, #12]
 800a63a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a63e:	81a3      	strh	r3, [r4, #12]
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	e78e      	b.n	800a564 <__sflush_r+0x1c>
 800a646:	4407      	add	r7, r0
 800a648:	eba8 0800 	sub.w	r8, r8, r0
 800a64c:	e7e9      	b.n	800a622 <__sflush_r+0xda>
 800a64e:	bf00      	nop
 800a650:	20400001 	.word	0x20400001

0800a654 <_fflush_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	690b      	ldr	r3, [r1, #16]
 800a658:	4605      	mov	r5, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	b913      	cbnz	r3, 800a664 <_fflush_r+0x10>
 800a65e:	2500      	movs	r5, #0
 800a660:	4628      	mov	r0, r5
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	b118      	cbz	r0, 800a66e <_fflush_r+0x1a>
 800a666:	6983      	ldr	r3, [r0, #24]
 800a668:	b90b      	cbnz	r3, 800a66e <_fflush_r+0x1a>
 800a66a:	f7ff f8b9 	bl	80097e0 <__sinit>
 800a66e:	4b14      	ldr	r3, [pc, #80]	; (800a6c0 <_fflush_r+0x6c>)
 800a670:	429c      	cmp	r4, r3
 800a672:	d11b      	bne.n	800a6ac <_fflush_r+0x58>
 800a674:	686c      	ldr	r4, [r5, #4]
 800a676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d0ef      	beq.n	800a65e <_fflush_r+0xa>
 800a67e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a680:	07d0      	lsls	r0, r2, #31
 800a682:	d404      	bmi.n	800a68e <_fflush_r+0x3a>
 800a684:	0599      	lsls	r1, r3, #22
 800a686:	d402      	bmi.n	800a68e <_fflush_r+0x3a>
 800a688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a68a:	f7ff f947 	bl	800991c <__retarget_lock_acquire_recursive>
 800a68e:	4628      	mov	r0, r5
 800a690:	4621      	mov	r1, r4
 800a692:	f7ff ff59 	bl	800a548 <__sflush_r>
 800a696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a698:	07da      	lsls	r2, r3, #31
 800a69a:	4605      	mov	r5, r0
 800a69c:	d4e0      	bmi.n	800a660 <_fflush_r+0xc>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	059b      	lsls	r3, r3, #22
 800a6a2:	d4dd      	bmi.n	800a660 <_fflush_r+0xc>
 800a6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6a6:	f7ff f93a 	bl	800991e <__retarget_lock_release_recursive>
 800a6aa:	e7d9      	b.n	800a660 <_fflush_r+0xc>
 800a6ac:	4b05      	ldr	r3, [pc, #20]	; (800a6c4 <_fflush_r+0x70>)
 800a6ae:	429c      	cmp	r4, r3
 800a6b0:	d101      	bne.n	800a6b6 <_fflush_r+0x62>
 800a6b2:	68ac      	ldr	r4, [r5, #8]
 800a6b4:	e7df      	b.n	800a676 <_fflush_r+0x22>
 800a6b6:	4b04      	ldr	r3, [pc, #16]	; (800a6c8 <_fflush_r+0x74>)
 800a6b8:	429c      	cmp	r4, r3
 800a6ba:	bf08      	it	eq
 800a6bc:	68ec      	ldreq	r4, [r5, #12]
 800a6be:	e7da      	b.n	800a676 <_fflush_r+0x22>
 800a6c0:	0800baf8 	.word	0x0800baf8
 800a6c4:	0800bb18 	.word	0x0800bb18
 800a6c8:	0800bad8 	.word	0x0800bad8

0800a6cc <_lseek_r>:
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	4d07      	ldr	r5, [pc, #28]	; (800a6ec <_lseek_r+0x20>)
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	4608      	mov	r0, r1
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	602a      	str	r2, [r5, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	f7f7 fbc6 	bl	8001e6c <_lseek>
 800a6e0:	1c43      	adds	r3, r0, #1
 800a6e2:	d102      	bne.n	800a6ea <_lseek_r+0x1e>
 800a6e4:	682b      	ldr	r3, [r5, #0]
 800a6e6:	b103      	cbz	r3, 800a6ea <_lseek_r+0x1e>
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	20000458 	.word	0x20000458

0800a6f0 <__swhatbuf_r>:
 800a6f0:	b570      	push	{r4, r5, r6, lr}
 800a6f2:	460e      	mov	r6, r1
 800a6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f8:	2900      	cmp	r1, #0
 800a6fa:	b096      	sub	sp, #88	; 0x58
 800a6fc:	4614      	mov	r4, r2
 800a6fe:	461d      	mov	r5, r3
 800a700:	da08      	bge.n	800a714 <__swhatbuf_r+0x24>
 800a702:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a706:	2200      	movs	r2, #0
 800a708:	602a      	str	r2, [r5, #0]
 800a70a:	061a      	lsls	r2, r3, #24
 800a70c:	d410      	bmi.n	800a730 <__swhatbuf_r+0x40>
 800a70e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a712:	e00e      	b.n	800a732 <__swhatbuf_r+0x42>
 800a714:	466a      	mov	r2, sp
 800a716:	f000 f913 	bl	800a940 <_fstat_r>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	dbf1      	blt.n	800a702 <__swhatbuf_r+0x12>
 800a71e:	9a01      	ldr	r2, [sp, #4]
 800a720:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a724:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a728:	425a      	negs	r2, r3
 800a72a:	415a      	adcs	r2, r3
 800a72c:	602a      	str	r2, [r5, #0]
 800a72e:	e7ee      	b.n	800a70e <__swhatbuf_r+0x1e>
 800a730:	2340      	movs	r3, #64	; 0x40
 800a732:	2000      	movs	r0, #0
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	b016      	add	sp, #88	; 0x58
 800a738:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a73c <__smakebuf_r>:
 800a73c:	898b      	ldrh	r3, [r1, #12]
 800a73e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a740:	079d      	lsls	r5, r3, #30
 800a742:	4606      	mov	r6, r0
 800a744:	460c      	mov	r4, r1
 800a746:	d507      	bpl.n	800a758 <__smakebuf_r+0x1c>
 800a748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a74c:	6023      	str	r3, [r4, #0]
 800a74e:	6123      	str	r3, [r4, #16]
 800a750:	2301      	movs	r3, #1
 800a752:	6163      	str	r3, [r4, #20]
 800a754:	b002      	add	sp, #8
 800a756:	bd70      	pop	{r4, r5, r6, pc}
 800a758:	ab01      	add	r3, sp, #4
 800a75a:	466a      	mov	r2, sp
 800a75c:	f7ff ffc8 	bl	800a6f0 <__swhatbuf_r>
 800a760:	9900      	ldr	r1, [sp, #0]
 800a762:	4605      	mov	r5, r0
 800a764:	4630      	mov	r0, r6
 800a766:	f7ff f8fb 	bl	8009960 <_malloc_r>
 800a76a:	b948      	cbnz	r0, 800a780 <__smakebuf_r+0x44>
 800a76c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a770:	059a      	lsls	r2, r3, #22
 800a772:	d4ef      	bmi.n	800a754 <__smakebuf_r+0x18>
 800a774:	f023 0303 	bic.w	r3, r3, #3
 800a778:	f043 0302 	orr.w	r3, r3, #2
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	e7e3      	b.n	800a748 <__smakebuf_r+0xc>
 800a780:	4b0d      	ldr	r3, [pc, #52]	; (800a7b8 <__smakebuf_r+0x7c>)
 800a782:	62b3      	str	r3, [r6, #40]	; 0x28
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	6020      	str	r0, [r4, #0]
 800a788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a78c:	81a3      	strh	r3, [r4, #12]
 800a78e:	9b00      	ldr	r3, [sp, #0]
 800a790:	6163      	str	r3, [r4, #20]
 800a792:	9b01      	ldr	r3, [sp, #4]
 800a794:	6120      	str	r0, [r4, #16]
 800a796:	b15b      	cbz	r3, 800a7b0 <__smakebuf_r+0x74>
 800a798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a79c:	4630      	mov	r0, r6
 800a79e:	f000 f8e1 	bl	800a964 <_isatty_r>
 800a7a2:	b128      	cbz	r0, 800a7b0 <__smakebuf_r+0x74>
 800a7a4:	89a3      	ldrh	r3, [r4, #12]
 800a7a6:	f023 0303 	bic.w	r3, r3, #3
 800a7aa:	f043 0301 	orr.w	r3, r3, #1
 800a7ae:	81a3      	strh	r3, [r4, #12]
 800a7b0:	89a0      	ldrh	r0, [r4, #12]
 800a7b2:	4305      	orrs	r5, r0
 800a7b4:	81a5      	strh	r5, [r4, #12]
 800a7b6:	e7cd      	b.n	800a754 <__smakebuf_r+0x18>
 800a7b8:	08009779 	.word	0x08009779

0800a7bc <memcpy>:
 800a7bc:	440a      	add	r2, r1
 800a7be:	4291      	cmp	r1, r2
 800a7c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7c4:	d100      	bne.n	800a7c8 <memcpy+0xc>
 800a7c6:	4770      	bx	lr
 800a7c8:	b510      	push	{r4, lr}
 800a7ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7d2:	4291      	cmp	r1, r2
 800a7d4:	d1f9      	bne.n	800a7ca <memcpy+0xe>
 800a7d6:	bd10      	pop	{r4, pc}

0800a7d8 <memmove>:
 800a7d8:	4288      	cmp	r0, r1
 800a7da:	b510      	push	{r4, lr}
 800a7dc:	eb01 0402 	add.w	r4, r1, r2
 800a7e0:	d902      	bls.n	800a7e8 <memmove+0x10>
 800a7e2:	4284      	cmp	r4, r0
 800a7e4:	4623      	mov	r3, r4
 800a7e6:	d807      	bhi.n	800a7f8 <memmove+0x20>
 800a7e8:	1e43      	subs	r3, r0, #1
 800a7ea:	42a1      	cmp	r1, r4
 800a7ec:	d008      	beq.n	800a800 <memmove+0x28>
 800a7ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7f6:	e7f8      	b.n	800a7ea <memmove+0x12>
 800a7f8:	4402      	add	r2, r0
 800a7fa:	4601      	mov	r1, r0
 800a7fc:	428a      	cmp	r2, r1
 800a7fe:	d100      	bne.n	800a802 <memmove+0x2a>
 800a800:	bd10      	pop	{r4, pc}
 800a802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a80a:	e7f7      	b.n	800a7fc <memmove+0x24>

0800a80c <__malloc_lock>:
 800a80c:	4801      	ldr	r0, [pc, #4]	; (800a814 <__malloc_lock+0x8>)
 800a80e:	f7ff b885 	b.w	800991c <__retarget_lock_acquire_recursive>
 800a812:	bf00      	nop
 800a814:	2000044c 	.word	0x2000044c

0800a818 <__malloc_unlock>:
 800a818:	4801      	ldr	r0, [pc, #4]	; (800a820 <__malloc_unlock+0x8>)
 800a81a:	f7ff b880 	b.w	800991e <__retarget_lock_release_recursive>
 800a81e:	bf00      	nop
 800a820:	2000044c 	.word	0x2000044c

0800a824 <_free_r>:
 800a824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a826:	2900      	cmp	r1, #0
 800a828:	d044      	beq.n	800a8b4 <_free_r+0x90>
 800a82a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a82e:	9001      	str	r0, [sp, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	f1a1 0404 	sub.w	r4, r1, #4
 800a836:	bfb8      	it	lt
 800a838:	18e4      	addlt	r4, r4, r3
 800a83a:	f7ff ffe7 	bl	800a80c <__malloc_lock>
 800a83e:	4a1e      	ldr	r2, [pc, #120]	; (800a8b8 <_free_r+0x94>)
 800a840:	9801      	ldr	r0, [sp, #4]
 800a842:	6813      	ldr	r3, [r2, #0]
 800a844:	b933      	cbnz	r3, 800a854 <_free_r+0x30>
 800a846:	6063      	str	r3, [r4, #4]
 800a848:	6014      	str	r4, [r2, #0]
 800a84a:	b003      	add	sp, #12
 800a84c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a850:	f7ff bfe2 	b.w	800a818 <__malloc_unlock>
 800a854:	42a3      	cmp	r3, r4
 800a856:	d908      	bls.n	800a86a <_free_r+0x46>
 800a858:	6825      	ldr	r5, [r4, #0]
 800a85a:	1961      	adds	r1, r4, r5
 800a85c:	428b      	cmp	r3, r1
 800a85e:	bf01      	itttt	eq
 800a860:	6819      	ldreq	r1, [r3, #0]
 800a862:	685b      	ldreq	r3, [r3, #4]
 800a864:	1949      	addeq	r1, r1, r5
 800a866:	6021      	streq	r1, [r4, #0]
 800a868:	e7ed      	b.n	800a846 <_free_r+0x22>
 800a86a:	461a      	mov	r2, r3
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	b10b      	cbz	r3, 800a874 <_free_r+0x50>
 800a870:	42a3      	cmp	r3, r4
 800a872:	d9fa      	bls.n	800a86a <_free_r+0x46>
 800a874:	6811      	ldr	r1, [r2, #0]
 800a876:	1855      	adds	r5, r2, r1
 800a878:	42a5      	cmp	r5, r4
 800a87a:	d10b      	bne.n	800a894 <_free_r+0x70>
 800a87c:	6824      	ldr	r4, [r4, #0]
 800a87e:	4421      	add	r1, r4
 800a880:	1854      	adds	r4, r2, r1
 800a882:	42a3      	cmp	r3, r4
 800a884:	6011      	str	r1, [r2, #0]
 800a886:	d1e0      	bne.n	800a84a <_free_r+0x26>
 800a888:	681c      	ldr	r4, [r3, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	6053      	str	r3, [r2, #4]
 800a88e:	4421      	add	r1, r4
 800a890:	6011      	str	r1, [r2, #0]
 800a892:	e7da      	b.n	800a84a <_free_r+0x26>
 800a894:	d902      	bls.n	800a89c <_free_r+0x78>
 800a896:	230c      	movs	r3, #12
 800a898:	6003      	str	r3, [r0, #0]
 800a89a:	e7d6      	b.n	800a84a <_free_r+0x26>
 800a89c:	6825      	ldr	r5, [r4, #0]
 800a89e:	1961      	adds	r1, r4, r5
 800a8a0:	428b      	cmp	r3, r1
 800a8a2:	bf04      	itt	eq
 800a8a4:	6819      	ldreq	r1, [r3, #0]
 800a8a6:	685b      	ldreq	r3, [r3, #4]
 800a8a8:	6063      	str	r3, [r4, #4]
 800a8aa:	bf04      	itt	eq
 800a8ac:	1949      	addeq	r1, r1, r5
 800a8ae:	6021      	streq	r1, [r4, #0]
 800a8b0:	6054      	str	r4, [r2, #4]
 800a8b2:	e7ca      	b.n	800a84a <_free_r+0x26>
 800a8b4:	b003      	add	sp, #12
 800a8b6:	bd30      	pop	{r4, r5, pc}
 800a8b8:	20000450 	.word	0x20000450

0800a8bc <_realloc_r>:
 800a8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c0:	4680      	mov	r8, r0
 800a8c2:	4614      	mov	r4, r2
 800a8c4:	460e      	mov	r6, r1
 800a8c6:	b921      	cbnz	r1, 800a8d2 <_realloc_r+0x16>
 800a8c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	f7ff b847 	b.w	8009960 <_malloc_r>
 800a8d2:	b92a      	cbnz	r2, 800a8e0 <_realloc_r+0x24>
 800a8d4:	f7ff ffa6 	bl	800a824 <_free_r>
 800a8d8:	4625      	mov	r5, r4
 800a8da:	4628      	mov	r0, r5
 800a8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e0:	f000 f850 	bl	800a984 <_malloc_usable_size_r>
 800a8e4:	4284      	cmp	r4, r0
 800a8e6:	4607      	mov	r7, r0
 800a8e8:	d802      	bhi.n	800a8f0 <_realloc_r+0x34>
 800a8ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8ee:	d812      	bhi.n	800a916 <_realloc_r+0x5a>
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	4640      	mov	r0, r8
 800a8f4:	f7ff f834 	bl	8009960 <_malloc_r>
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d0ed      	beq.n	800a8da <_realloc_r+0x1e>
 800a8fe:	42bc      	cmp	r4, r7
 800a900:	4622      	mov	r2, r4
 800a902:	4631      	mov	r1, r6
 800a904:	bf28      	it	cs
 800a906:	463a      	movcs	r2, r7
 800a908:	f7ff ff58 	bl	800a7bc <memcpy>
 800a90c:	4631      	mov	r1, r6
 800a90e:	4640      	mov	r0, r8
 800a910:	f7ff ff88 	bl	800a824 <_free_r>
 800a914:	e7e1      	b.n	800a8da <_realloc_r+0x1e>
 800a916:	4635      	mov	r5, r6
 800a918:	e7df      	b.n	800a8da <_realloc_r+0x1e>
	...

0800a91c <_read_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	4d07      	ldr	r5, [pc, #28]	; (800a93c <_read_r+0x20>)
 800a920:	4604      	mov	r4, r0
 800a922:	4608      	mov	r0, r1
 800a924:	4611      	mov	r1, r2
 800a926:	2200      	movs	r2, #0
 800a928:	602a      	str	r2, [r5, #0]
 800a92a:	461a      	mov	r2, r3
 800a92c:	f7f7 fa3e 	bl	8001dac <_read>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d102      	bne.n	800a93a <_read_r+0x1e>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	b103      	cbz	r3, 800a93a <_read_r+0x1e>
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	20000458 	.word	0x20000458

0800a940 <_fstat_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d07      	ldr	r5, [pc, #28]	; (800a960 <_fstat_r+0x20>)
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	4611      	mov	r1, r2
 800a94c:	602b      	str	r3, [r5, #0]
 800a94e:	f7f7 fa72 	bl	8001e36 <_fstat>
 800a952:	1c43      	adds	r3, r0, #1
 800a954:	d102      	bne.n	800a95c <_fstat_r+0x1c>
 800a956:	682b      	ldr	r3, [r5, #0]
 800a958:	b103      	cbz	r3, 800a95c <_fstat_r+0x1c>
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	bd38      	pop	{r3, r4, r5, pc}
 800a95e:	bf00      	nop
 800a960:	20000458 	.word	0x20000458

0800a964 <_isatty_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4d06      	ldr	r5, [pc, #24]	; (800a980 <_isatty_r+0x1c>)
 800a968:	2300      	movs	r3, #0
 800a96a:	4604      	mov	r4, r0
 800a96c:	4608      	mov	r0, r1
 800a96e:	602b      	str	r3, [r5, #0]
 800a970:	f7f7 fa71 	bl	8001e56 <_isatty>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d102      	bne.n	800a97e <_isatty_r+0x1a>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	b103      	cbz	r3, 800a97e <_isatty_r+0x1a>
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	20000458 	.word	0x20000458

0800a984 <_malloc_usable_size_r>:
 800a984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a988:	1f18      	subs	r0, r3, #4
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	bfbc      	itt	lt
 800a98e:	580b      	ldrlt	r3, [r1, r0]
 800a990:	18c0      	addlt	r0, r0, r3
 800a992:	4770      	bx	lr

0800a994 <trunc>:
 800a994:	ec51 0b10 	vmov	r0, r1, d0
 800a998:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a99c:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800a9a0:	2b13      	cmp	r3, #19
 800a9a2:	b5d0      	push	{r4, r6, r7, lr}
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	dc10      	bgt.n	800a9ca <trunc+0x36>
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	bfa5      	ittet	ge
 800a9ac:	4a11      	ldrge	r2, [pc, #68]	; (800a9f4 <trunc+0x60>)
 800a9ae:	fa42 f303 	asrge.w	r3, r2, r3
 800a9b2:	2100      	movlt	r1, #0
 800a9b4:	2100      	movge	r1, #0
 800a9b6:	bfb9      	ittee	lt
 800a9b8:	2000      	movlt	r0, #0
 800a9ba:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800a9be:	2000      	movge	r0, #0
 800a9c0:	ea24 0103 	bicge.w	r1, r4, r3
 800a9c4:	ec41 0b10 	vmov	d0, r0, r1
 800a9c8:	bdd0      	pop	{r4, r6, r7, pc}
 800a9ca:	2b33      	cmp	r3, #51	; 0x33
 800a9cc:	dd08      	ble.n	800a9e0 <trunc+0x4c>
 800a9ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9d2:	d1f7      	bne.n	800a9c4 <trunc+0x30>
 800a9d4:	ee10 2a10 	vmov	r2, s0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	f7f5 fc57 	bl	800028c <__adddf3>
 800a9de:	e7f1      	b.n	800a9c4 <trunc+0x30>
 800a9e0:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e8:	fa23 f202 	lsr.w	r2, r3, r2
 800a9ec:	ea20 0602 	bic.w	r6, r0, r2
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	e7e7      	b.n	800a9c4 <trunc+0x30>
 800a9f4:	000fffff 	.word	0x000fffff

0800a9f8 <pow>:
 800a9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fa:	ed2d 8b02 	vpush	{d8}
 800a9fe:	eeb0 8a40 	vmov.f32	s16, s0
 800aa02:	eef0 8a60 	vmov.f32	s17, s1
 800aa06:	ec55 4b11 	vmov	r4, r5, d1
 800aa0a:	f000 f865 	bl	800aad8 <__ieee754_pow>
 800aa0e:	4622      	mov	r2, r4
 800aa10:	462b      	mov	r3, r5
 800aa12:	4620      	mov	r0, r4
 800aa14:	4629      	mov	r1, r5
 800aa16:	ec57 6b10 	vmov	r6, r7, d0
 800aa1a:	f7f6 f887 	bl	8000b2c <__aeabi_dcmpun>
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d13b      	bne.n	800aa9a <pow+0xa2>
 800aa22:	ec51 0b18 	vmov	r0, r1, d8
 800aa26:	2200      	movs	r2, #0
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f7f6 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa2e:	b1b8      	cbz	r0, 800aa60 <pow+0x68>
 800aa30:	2200      	movs	r2, #0
 800aa32:	2300      	movs	r3, #0
 800aa34:	4620      	mov	r0, r4
 800aa36:	4629      	mov	r1, r5
 800aa38:	f7f6 f846 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d146      	bne.n	800aace <pow+0xd6>
 800aa40:	ec45 4b10 	vmov	d0, r4, r5
 800aa44:	f000 fe61 	bl	800b70a <finite>
 800aa48:	b338      	cbz	r0, 800aa9a <pow+0xa2>
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4620      	mov	r0, r4
 800aa50:	4629      	mov	r1, r5
 800aa52:	f7f6 f843 	bl	8000adc <__aeabi_dcmplt>
 800aa56:	b300      	cbz	r0, 800aa9a <pow+0xa2>
 800aa58:	f7fe fdec 	bl	8009634 <__errno>
 800aa5c:	2322      	movs	r3, #34	; 0x22
 800aa5e:	e01b      	b.n	800aa98 <pow+0xa0>
 800aa60:	ec47 6b10 	vmov	d0, r6, r7
 800aa64:	f000 fe51 	bl	800b70a <finite>
 800aa68:	b9e0      	cbnz	r0, 800aaa4 <pow+0xac>
 800aa6a:	eeb0 0a48 	vmov.f32	s0, s16
 800aa6e:	eef0 0a68 	vmov.f32	s1, s17
 800aa72:	f000 fe4a 	bl	800b70a <finite>
 800aa76:	b1a8      	cbz	r0, 800aaa4 <pow+0xac>
 800aa78:	ec45 4b10 	vmov	d0, r4, r5
 800aa7c:	f000 fe45 	bl	800b70a <finite>
 800aa80:	b180      	cbz	r0, 800aaa4 <pow+0xac>
 800aa82:	4632      	mov	r2, r6
 800aa84:	463b      	mov	r3, r7
 800aa86:	4630      	mov	r0, r6
 800aa88:	4639      	mov	r1, r7
 800aa8a:	f7f6 f84f 	bl	8000b2c <__aeabi_dcmpun>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	d0e2      	beq.n	800aa58 <pow+0x60>
 800aa92:	f7fe fdcf 	bl	8009634 <__errno>
 800aa96:	2321      	movs	r3, #33	; 0x21
 800aa98:	6003      	str	r3, [r0, #0]
 800aa9a:	ecbd 8b02 	vpop	{d8}
 800aa9e:	ec47 6b10 	vmov	d0, r6, r7
 800aaa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	4639      	mov	r1, r7
 800aaac:	f7f6 f80c 	bl	8000ac8 <__aeabi_dcmpeq>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d0f2      	beq.n	800aa9a <pow+0xa2>
 800aab4:	eeb0 0a48 	vmov.f32	s0, s16
 800aab8:	eef0 0a68 	vmov.f32	s1, s17
 800aabc:	f000 fe25 	bl	800b70a <finite>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d0ea      	beq.n	800aa9a <pow+0xa2>
 800aac4:	ec45 4b10 	vmov	d0, r4, r5
 800aac8:	f000 fe1f 	bl	800b70a <finite>
 800aacc:	e7c3      	b.n	800aa56 <pow+0x5e>
 800aace:	4f01      	ldr	r7, [pc, #4]	; (800aad4 <pow+0xdc>)
 800aad0:	2600      	movs	r6, #0
 800aad2:	e7e2      	b.n	800aa9a <pow+0xa2>
 800aad4:	3ff00000 	.word	0x3ff00000

0800aad8 <__ieee754_pow>:
 800aad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aadc:	ed2d 8b06 	vpush	{d8-d10}
 800aae0:	b089      	sub	sp, #36	; 0x24
 800aae2:	ed8d 1b00 	vstr	d1, [sp]
 800aae6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800aaea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800aaee:	ea58 0102 	orrs.w	r1, r8, r2
 800aaf2:	ec57 6b10 	vmov	r6, r7, d0
 800aaf6:	d115      	bne.n	800ab24 <__ieee754_pow+0x4c>
 800aaf8:	19b3      	adds	r3, r6, r6
 800aafa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800aafe:	4152      	adcs	r2, r2
 800ab00:	4299      	cmp	r1, r3
 800ab02:	4b89      	ldr	r3, [pc, #548]	; (800ad28 <__ieee754_pow+0x250>)
 800ab04:	4193      	sbcs	r3, r2
 800ab06:	f080 84d2 	bcs.w	800b4ae <__ieee754_pow+0x9d6>
 800ab0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab0e:	4630      	mov	r0, r6
 800ab10:	4639      	mov	r1, r7
 800ab12:	f7f5 fbbb 	bl	800028c <__adddf3>
 800ab16:	ec41 0b10 	vmov	d0, r0, r1
 800ab1a:	b009      	add	sp, #36	; 0x24
 800ab1c:	ecbd 8b06 	vpop	{d8-d10}
 800ab20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab24:	4b81      	ldr	r3, [pc, #516]	; (800ad2c <__ieee754_pow+0x254>)
 800ab26:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ab2a:	429c      	cmp	r4, r3
 800ab2c:	ee10 aa10 	vmov	sl, s0
 800ab30:	463d      	mov	r5, r7
 800ab32:	dc06      	bgt.n	800ab42 <__ieee754_pow+0x6a>
 800ab34:	d101      	bne.n	800ab3a <__ieee754_pow+0x62>
 800ab36:	2e00      	cmp	r6, #0
 800ab38:	d1e7      	bne.n	800ab0a <__ieee754_pow+0x32>
 800ab3a:	4598      	cmp	r8, r3
 800ab3c:	dc01      	bgt.n	800ab42 <__ieee754_pow+0x6a>
 800ab3e:	d10f      	bne.n	800ab60 <__ieee754_pow+0x88>
 800ab40:	b172      	cbz	r2, 800ab60 <__ieee754_pow+0x88>
 800ab42:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ab46:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ab4a:	ea55 050a 	orrs.w	r5, r5, sl
 800ab4e:	d1dc      	bne.n	800ab0a <__ieee754_pow+0x32>
 800ab50:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab54:	18db      	adds	r3, r3, r3
 800ab56:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ab5a:	4152      	adcs	r2, r2
 800ab5c:	429d      	cmp	r5, r3
 800ab5e:	e7d0      	b.n	800ab02 <__ieee754_pow+0x2a>
 800ab60:	2d00      	cmp	r5, #0
 800ab62:	da3b      	bge.n	800abdc <__ieee754_pow+0x104>
 800ab64:	4b72      	ldr	r3, [pc, #456]	; (800ad30 <__ieee754_pow+0x258>)
 800ab66:	4598      	cmp	r8, r3
 800ab68:	dc51      	bgt.n	800ac0e <__ieee754_pow+0x136>
 800ab6a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ab6e:	4598      	cmp	r8, r3
 800ab70:	f340 84ac 	ble.w	800b4cc <__ieee754_pow+0x9f4>
 800ab74:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ab78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ab7c:	2b14      	cmp	r3, #20
 800ab7e:	dd0f      	ble.n	800aba0 <__ieee754_pow+0xc8>
 800ab80:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ab84:	fa22 f103 	lsr.w	r1, r2, r3
 800ab88:	fa01 f303 	lsl.w	r3, r1, r3
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	f040 849d 	bne.w	800b4cc <__ieee754_pow+0x9f4>
 800ab92:	f001 0101 	and.w	r1, r1, #1
 800ab96:	f1c1 0302 	rsb	r3, r1, #2
 800ab9a:	9304      	str	r3, [sp, #16]
 800ab9c:	b182      	cbz	r2, 800abc0 <__ieee754_pow+0xe8>
 800ab9e:	e05f      	b.n	800ac60 <__ieee754_pow+0x188>
 800aba0:	2a00      	cmp	r2, #0
 800aba2:	d15b      	bne.n	800ac5c <__ieee754_pow+0x184>
 800aba4:	f1c3 0314 	rsb	r3, r3, #20
 800aba8:	fa48 f103 	asr.w	r1, r8, r3
 800abac:	fa01 f303 	lsl.w	r3, r1, r3
 800abb0:	4543      	cmp	r3, r8
 800abb2:	f040 8488 	bne.w	800b4c6 <__ieee754_pow+0x9ee>
 800abb6:	f001 0101 	and.w	r1, r1, #1
 800abba:	f1c1 0302 	rsb	r3, r1, #2
 800abbe:	9304      	str	r3, [sp, #16]
 800abc0:	4b5c      	ldr	r3, [pc, #368]	; (800ad34 <__ieee754_pow+0x25c>)
 800abc2:	4598      	cmp	r8, r3
 800abc4:	d132      	bne.n	800ac2c <__ieee754_pow+0x154>
 800abc6:	f1b9 0f00 	cmp.w	r9, #0
 800abca:	f280 8478 	bge.w	800b4be <__ieee754_pow+0x9e6>
 800abce:	4959      	ldr	r1, [pc, #356]	; (800ad34 <__ieee754_pow+0x25c>)
 800abd0:	4632      	mov	r2, r6
 800abd2:	463b      	mov	r3, r7
 800abd4:	2000      	movs	r0, #0
 800abd6:	f7f5 fe39 	bl	800084c <__aeabi_ddiv>
 800abda:	e79c      	b.n	800ab16 <__ieee754_pow+0x3e>
 800abdc:	2300      	movs	r3, #0
 800abde:	9304      	str	r3, [sp, #16]
 800abe0:	2a00      	cmp	r2, #0
 800abe2:	d13d      	bne.n	800ac60 <__ieee754_pow+0x188>
 800abe4:	4b51      	ldr	r3, [pc, #324]	; (800ad2c <__ieee754_pow+0x254>)
 800abe6:	4598      	cmp	r8, r3
 800abe8:	d1ea      	bne.n	800abc0 <__ieee754_pow+0xe8>
 800abea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800abee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800abf2:	ea53 030a 	orrs.w	r3, r3, sl
 800abf6:	f000 845a 	beq.w	800b4ae <__ieee754_pow+0x9d6>
 800abfa:	4b4f      	ldr	r3, [pc, #316]	; (800ad38 <__ieee754_pow+0x260>)
 800abfc:	429c      	cmp	r4, r3
 800abfe:	dd08      	ble.n	800ac12 <__ieee754_pow+0x13a>
 800ac00:	f1b9 0f00 	cmp.w	r9, #0
 800ac04:	f2c0 8457 	blt.w	800b4b6 <__ieee754_pow+0x9de>
 800ac08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac0c:	e783      	b.n	800ab16 <__ieee754_pow+0x3e>
 800ac0e:	2302      	movs	r3, #2
 800ac10:	e7e5      	b.n	800abde <__ieee754_pow+0x106>
 800ac12:	f1b9 0f00 	cmp.w	r9, #0
 800ac16:	f04f 0000 	mov.w	r0, #0
 800ac1a:	f04f 0100 	mov.w	r1, #0
 800ac1e:	f6bf af7a 	bge.w	800ab16 <__ieee754_pow+0x3e>
 800ac22:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ac26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ac2a:	e774      	b.n	800ab16 <__ieee754_pow+0x3e>
 800ac2c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ac30:	d106      	bne.n	800ac40 <__ieee754_pow+0x168>
 800ac32:	4632      	mov	r2, r6
 800ac34:	463b      	mov	r3, r7
 800ac36:	4630      	mov	r0, r6
 800ac38:	4639      	mov	r1, r7
 800ac3a:	f7f5 fcdd 	bl	80005f8 <__aeabi_dmul>
 800ac3e:	e76a      	b.n	800ab16 <__ieee754_pow+0x3e>
 800ac40:	4b3e      	ldr	r3, [pc, #248]	; (800ad3c <__ieee754_pow+0x264>)
 800ac42:	4599      	cmp	r9, r3
 800ac44:	d10c      	bne.n	800ac60 <__ieee754_pow+0x188>
 800ac46:	2d00      	cmp	r5, #0
 800ac48:	db0a      	blt.n	800ac60 <__ieee754_pow+0x188>
 800ac4a:	ec47 6b10 	vmov	d0, r6, r7
 800ac4e:	b009      	add	sp, #36	; 0x24
 800ac50:	ecbd 8b06 	vpop	{d8-d10}
 800ac54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac58:	f000 bc6c 	b.w	800b534 <__ieee754_sqrt>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	9304      	str	r3, [sp, #16]
 800ac60:	ec47 6b10 	vmov	d0, r6, r7
 800ac64:	f000 fd48 	bl	800b6f8 <fabs>
 800ac68:	ec51 0b10 	vmov	r0, r1, d0
 800ac6c:	f1ba 0f00 	cmp.w	sl, #0
 800ac70:	d129      	bne.n	800acc6 <__ieee754_pow+0x1ee>
 800ac72:	b124      	cbz	r4, 800ac7e <__ieee754_pow+0x1a6>
 800ac74:	4b2f      	ldr	r3, [pc, #188]	; (800ad34 <__ieee754_pow+0x25c>)
 800ac76:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d123      	bne.n	800acc6 <__ieee754_pow+0x1ee>
 800ac7e:	f1b9 0f00 	cmp.w	r9, #0
 800ac82:	da05      	bge.n	800ac90 <__ieee754_pow+0x1b8>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	2000      	movs	r0, #0
 800ac8a:	492a      	ldr	r1, [pc, #168]	; (800ad34 <__ieee754_pow+0x25c>)
 800ac8c:	f7f5 fdde 	bl	800084c <__aeabi_ddiv>
 800ac90:	2d00      	cmp	r5, #0
 800ac92:	f6bf af40 	bge.w	800ab16 <__ieee754_pow+0x3e>
 800ac96:	9b04      	ldr	r3, [sp, #16]
 800ac98:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ac9c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aca0:	4323      	orrs	r3, r4
 800aca2:	d108      	bne.n	800acb6 <__ieee754_pow+0x1de>
 800aca4:	4602      	mov	r2, r0
 800aca6:	460b      	mov	r3, r1
 800aca8:	4610      	mov	r0, r2
 800acaa:	4619      	mov	r1, r3
 800acac:	f7f5 faec 	bl	8000288 <__aeabi_dsub>
 800acb0:	4602      	mov	r2, r0
 800acb2:	460b      	mov	r3, r1
 800acb4:	e78f      	b.n	800abd6 <__ieee754_pow+0xfe>
 800acb6:	9b04      	ldr	r3, [sp, #16]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	f47f af2c 	bne.w	800ab16 <__ieee754_pow+0x3e>
 800acbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acc2:	4619      	mov	r1, r3
 800acc4:	e727      	b.n	800ab16 <__ieee754_pow+0x3e>
 800acc6:	0feb      	lsrs	r3, r5, #31
 800acc8:	3b01      	subs	r3, #1
 800acca:	9306      	str	r3, [sp, #24]
 800accc:	9a06      	ldr	r2, [sp, #24]
 800acce:	9b04      	ldr	r3, [sp, #16]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	d102      	bne.n	800acda <__ieee754_pow+0x202>
 800acd4:	4632      	mov	r2, r6
 800acd6:	463b      	mov	r3, r7
 800acd8:	e7e6      	b.n	800aca8 <__ieee754_pow+0x1d0>
 800acda:	4b19      	ldr	r3, [pc, #100]	; (800ad40 <__ieee754_pow+0x268>)
 800acdc:	4598      	cmp	r8, r3
 800acde:	f340 80fb 	ble.w	800aed8 <__ieee754_pow+0x400>
 800ace2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ace6:	4598      	cmp	r8, r3
 800ace8:	4b13      	ldr	r3, [pc, #76]	; (800ad38 <__ieee754_pow+0x260>)
 800acea:	dd0c      	ble.n	800ad06 <__ieee754_pow+0x22e>
 800acec:	429c      	cmp	r4, r3
 800acee:	dc0f      	bgt.n	800ad10 <__ieee754_pow+0x238>
 800acf0:	f1b9 0f00 	cmp.w	r9, #0
 800acf4:	da0f      	bge.n	800ad16 <__ieee754_pow+0x23e>
 800acf6:	2000      	movs	r0, #0
 800acf8:	b009      	add	sp, #36	; 0x24
 800acfa:	ecbd 8b06 	vpop	{d8-d10}
 800acfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad02:	f000 bcf0 	b.w	800b6e6 <__math_oflow>
 800ad06:	429c      	cmp	r4, r3
 800ad08:	dbf2      	blt.n	800acf0 <__ieee754_pow+0x218>
 800ad0a:	4b0a      	ldr	r3, [pc, #40]	; (800ad34 <__ieee754_pow+0x25c>)
 800ad0c:	429c      	cmp	r4, r3
 800ad0e:	dd19      	ble.n	800ad44 <__ieee754_pow+0x26c>
 800ad10:	f1b9 0f00 	cmp.w	r9, #0
 800ad14:	dcef      	bgt.n	800acf6 <__ieee754_pow+0x21e>
 800ad16:	2000      	movs	r0, #0
 800ad18:	b009      	add	sp, #36	; 0x24
 800ad1a:	ecbd 8b06 	vpop	{d8-d10}
 800ad1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad22:	f000 bcd7 	b.w	800b6d4 <__math_uflow>
 800ad26:	bf00      	nop
 800ad28:	fff00000 	.word	0xfff00000
 800ad2c:	7ff00000 	.word	0x7ff00000
 800ad30:	433fffff 	.word	0x433fffff
 800ad34:	3ff00000 	.word	0x3ff00000
 800ad38:	3fefffff 	.word	0x3fefffff
 800ad3c:	3fe00000 	.word	0x3fe00000
 800ad40:	41e00000 	.word	0x41e00000
 800ad44:	4b60      	ldr	r3, [pc, #384]	; (800aec8 <__ieee754_pow+0x3f0>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	f7f5 fa9e 	bl	8000288 <__aeabi_dsub>
 800ad4c:	a354      	add	r3, pc, #336	; (adr r3, 800aea0 <__ieee754_pow+0x3c8>)
 800ad4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad52:	4604      	mov	r4, r0
 800ad54:	460d      	mov	r5, r1
 800ad56:	f7f5 fc4f 	bl	80005f8 <__aeabi_dmul>
 800ad5a:	a353      	add	r3, pc, #332	; (adr r3, 800aea8 <__ieee754_pow+0x3d0>)
 800ad5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad60:	4606      	mov	r6, r0
 800ad62:	460f      	mov	r7, r1
 800ad64:	4620      	mov	r0, r4
 800ad66:	4629      	mov	r1, r5
 800ad68:	f7f5 fc46 	bl	80005f8 <__aeabi_dmul>
 800ad6c:	4b57      	ldr	r3, [pc, #348]	; (800aecc <__ieee754_pow+0x3f4>)
 800ad6e:	4682      	mov	sl, r0
 800ad70:	468b      	mov	fp, r1
 800ad72:	2200      	movs	r2, #0
 800ad74:	4620      	mov	r0, r4
 800ad76:	4629      	mov	r1, r5
 800ad78:	f7f5 fc3e 	bl	80005f8 <__aeabi_dmul>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	a14b      	add	r1, pc, #300	; (adr r1, 800aeb0 <__ieee754_pow+0x3d8>)
 800ad82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad86:	f7f5 fa7f 	bl	8000288 <__aeabi_dsub>
 800ad8a:	4622      	mov	r2, r4
 800ad8c:	462b      	mov	r3, r5
 800ad8e:	f7f5 fc33 	bl	80005f8 <__aeabi_dmul>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	2000      	movs	r0, #0
 800ad98:	494d      	ldr	r1, [pc, #308]	; (800aed0 <__ieee754_pow+0x3f8>)
 800ad9a:	f7f5 fa75 	bl	8000288 <__aeabi_dsub>
 800ad9e:	4622      	mov	r2, r4
 800ada0:	4680      	mov	r8, r0
 800ada2:	4689      	mov	r9, r1
 800ada4:	462b      	mov	r3, r5
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 fc25 	bl	80005f8 <__aeabi_dmul>
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	4640      	mov	r0, r8
 800adb4:	4649      	mov	r1, r9
 800adb6:	f7f5 fc1f 	bl	80005f8 <__aeabi_dmul>
 800adba:	a33f      	add	r3, pc, #252	; (adr r3, 800aeb8 <__ieee754_pow+0x3e0>)
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	f7f5 fc1a 	bl	80005f8 <__aeabi_dmul>
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	4650      	mov	r0, sl
 800adca:	4659      	mov	r1, fp
 800adcc:	f7f5 fa5c 	bl	8000288 <__aeabi_dsub>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4680      	mov	r8, r0
 800add6:	4689      	mov	r9, r1
 800add8:	4630      	mov	r0, r6
 800adda:	4639      	mov	r1, r7
 800addc:	f7f5 fa56 	bl	800028c <__adddf3>
 800ade0:	2000      	movs	r0, #0
 800ade2:	4632      	mov	r2, r6
 800ade4:	463b      	mov	r3, r7
 800ade6:	4604      	mov	r4, r0
 800ade8:	460d      	mov	r5, r1
 800adea:	f7f5 fa4d 	bl	8000288 <__aeabi_dsub>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	4640      	mov	r0, r8
 800adf4:	4649      	mov	r1, r9
 800adf6:	f7f5 fa47 	bl	8000288 <__aeabi_dsub>
 800adfa:	9b04      	ldr	r3, [sp, #16]
 800adfc:	9a06      	ldr	r2, [sp, #24]
 800adfe:	3b01      	subs	r3, #1
 800ae00:	4313      	orrs	r3, r2
 800ae02:	4682      	mov	sl, r0
 800ae04:	468b      	mov	fp, r1
 800ae06:	f040 81e7 	bne.w	800b1d8 <__ieee754_pow+0x700>
 800ae0a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800aec0 <__ieee754_pow+0x3e8>
 800ae0e:	eeb0 8a47 	vmov.f32	s16, s14
 800ae12:	eef0 8a67 	vmov.f32	s17, s15
 800ae16:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ae1a:	2600      	movs	r6, #0
 800ae1c:	4632      	mov	r2, r6
 800ae1e:	463b      	mov	r3, r7
 800ae20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae24:	f7f5 fa30 	bl	8000288 <__aeabi_dsub>
 800ae28:	4622      	mov	r2, r4
 800ae2a:	462b      	mov	r3, r5
 800ae2c:	f7f5 fbe4 	bl	80005f8 <__aeabi_dmul>
 800ae30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae34:	4680      	mov	r8, r0
 800ae36:	4689      	mov	r9, r1
 800ae38:	4650      	mov	r0, sl
 800ae3a:	4659      	mov	r1, fp
 800ae3c:	f7f5 fbdc 	bl	80005f8 <__aeabi_dmul>
 800ae40:	4602      	mov	r2, r0
 800ae42:	460b      	mov	r3, r1
 800ae44:	4640      	mov	r0, r8
 800ae46:	4649      	mov	r1, r9
 800ae48:	f7f5 fa20 	bl	800028c <__adddf3>
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	463b      	mov	r3, r7
 800ae50:	4680      	mov	r8, r0
 800ae52:	4689      	mov	r9, r1
 800ae54:	4620      	mov	r0, r4
 800ae56:	4629      	mov	r1, r5
 800ae58:	f7f5 fbce 	bl	80005f8 <__aeabi_dmul>
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	4604      	mov	r4, r0
 800ae60:	460d      	mov	r5, r1
 800ae62:	4602      	mov	r2, r0
 800ae64:	4649      	mov	r1, r9
 800ae66:	4640      	mov	r0, r8
 800ae68:	f7f5 fa10 	bl	800028c <__adddf3>
 800ae6c:	4b19      	ldr	r3, [pc, #100]	; (800aed4 <__ieee754_pow+0x3fc>)
 800ae6e:	4299      	cmp	r1, r3
 800ae70:	ec45 4b19 	vmov	d9, r4, r5
 800ae74:	4606      	mov	r6, r0
 800ae76:	460f      	mov	r7, r1
 800ae78:	468b      	mov	fp, r1
 800ae7a:	f340 82f1 	ble.w	800b460 <__ieee754_pow+0x988>
 800ae7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ae82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ae86:	4303      	orrs	r3, r0
 800ae88:	f000 81e4 	beq.w	800b254 <__ieee754_pow+0x77c>
 800ae8c:	ec51 0b18 	vmov	r0, r1, d8
 800ae90:	2200      	movs	r2, #0
 800ae92:	2300      	movs	r3, #0
 800ae94:	f7f5 fe22 	bl	8000adc <__aeabi_dcmplt>
 800ae98:	3800      	subs	r0, #0
 800ae9a:	bf18      	it	ne
 800ae9c:	2001      	movne	r0, #1
 800ae9e:	e72b      	b.n	800acf8 <__ieee754_pow+0x220>
 800aea0:	60000000 	.word	0x60000000
 800aea4:	3ff71547 	.word	0x3ff71547
 800aea8:	f85ddf44 	.word	0xf85ddf44
 800aeac:	3e54ae0b 	.word	0x3e54ae0b
 800aeb0:	55555555 	.word	0x55555555
 800aeb4:	3fd55555 	.word	0x3fd55555
 800aeb8:	652b82fe 	.word	0x652b82fe
 800aebc:	3ff71547 	.word	0x3ff71547
 800aec0:	00000000 	.word	0x00000000
 800aec4:	bff00000 	.word	0xbff00000
 800aec8:	3ff00000 	.word	0x3ff00000
 800aecc:	3fd00000 	.word	0x3fd00000
 800aed0:	3fe00000 	.word	0x3fe00000
 800aed4:	408fffff 	.word	0x408fffff
 800aed8:	4bd5      	ldr	r3, [pc, #852]	; (800b230 <__ieee754_pow+0x758>)
 800aeda:	402b      	ands	r3, r5
 800aedc:	2200      	movs	r2, #0
 800aede:	b92b      	cbnz	r3, 800aeec <__ieee754_pow+0x414>
 800aee0:	4bd4      	ldr	r3, [pc, #848]	; (800b234 <__ieee754_pow+0x75c>)
 800aee2:	f7f5 fb89 	bl	80005f8 <__aeabi_dmul>
 800aee6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aeea:	460c      	mov	r4, r1
 800aeec:	1523      	asrs	r3, r4, #20
 800aeee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aef2:	4413      	add	r3, r2
 800aef4:	9305      	str	r3, [sp, #20]
 800aef6:	4bd0      	ldr	r3, [pc, #832]	; (800b238 <__ieee754_pow+0x760>)
 800aef8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aefc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800af00:	429c      	cmp	r4, r3
 800af02:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800af06:	dd08      	ble.n	800af1a <__ieee754_pow+0x442>
 800af08:	4bcc      	ldr	r3, [pc, #816]	; (800b23c <__ieee754_pow+0x764>)
 800af0a:	429c      	cmp	r4, r3
 800af0c:	f340 8162 	ble.w	800b1d4 <__ieee754_pow+0x6fc>
 800af10:	9b05      	ldr	r3, [sp, #20]
 800af12:	3301      	adds	r3, #1
 800af14:	9305      	str	r3, [sp, #20]
 800af16:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800af1a:	2400      	movs	r4, #0
 800af1c:	00e3      	lsls	r3, r4, #3
 800af1e:	9307      	str	r3, [sp, #28]
 800af20:	4bc7      	ldr	r3, [pc, #796]	; (800b240 <__ieee754_pow+0x768>)
 800af22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af26:	ed93 7b00 	vldr	d7, [r3]
 800af2a:	4629      	mov	r1, r5
 800af2c:	ec53 2b17 	vmov	r2, r3, d7
 800af30:	eeb0 9a47 	vmov.f32	s18, s14
 800af34:	eef0 9a67 	vmov.f32	s19, s15
 800af38:	4682      	mov	sl, r0
 800af3a:	f7f5 f9a5 	bl	8000288 <__aeabi_dsub>
 800af3e:	4652      	mov	r2, sl
 800af40:	4606      	mov	r6, r0
 800af42:	460f      	mov	r7, r1
 800af44:	462b      	mov	r3, r5
 800af46:	ec51 0b19 	vmov	r0, r1, d9
 800af4a:	f7f5 f99f 	bl	800028c <__adddf3>
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	2000      	movs	r0, #0
 800af54:	49bb      	ldr	r1, [pc, #748]	; (800b244 <__ieee754_pow+0x76c>)
 800af56:	f7f5 fc79 	bl	800084c <__aeabi_ddiv>
 800af5a:	ec41 0b1a 	vmov	d10, r0, r1
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	4630      	mov	r0, r6
 800af64:	4639      	mov	r1, r7
 800af66:	f7f5 fb47 	bl	80005f8 <__aeabi_dmul>
 800af6a:	2300      	movs	r3, #0
 800af6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af70:	9302      	str	r3, [sp, #8]
 800af72:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800af76:	46ab      	mov	fp, r5
 800af78:	106d      	asrs	r5, r5, #1
 800af7a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800af7e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800af82:	ec41 0b18 	vmov	d8, r0, r1
 800af86:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800af8a:	2200      	movs	r2, #0
 800af8c:	4640      	mov	r0, r8
 800af8e:	4649      	mov	r1, r9
 800af90:	4614      	mov	r4, r2
 800af92:	461d      	mov	r5, r3
 800af94:	f7f5 fb30 	bl	80005f8 <__aeabi_dmul>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	4630      	mov	r0, r6
 800af9e:	4639      	mov	r1, r7
 800afa0:	f7f5 f972 	bl	8000288 <__aeabi_dsub>
 800afa4:	ec53 2b19 	vmov	r2, r3, d9
 800afa8:	4606      	mov	r6, r0
 800afaa:	460f      	mov	r7, r1
 800afac:	4620      	mov	r0, r4
 800afae:	4629      	mov	r1, r5
 800afb0:	f7f5 f96a 	bl	8000288 <__aeabi_dsub>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4650      	mov	r0, sl
 800afba:	4659      	mov	r1, fp
 800afbc:	f7f5 f964 	bl	8000288 <__aeabi_dsub>
 800afc0:	4642      	mov	r2, r8
 800afc2:	464b      	mov	r3, r9
 800afc4:	f7f5 fb18 	bl	80005f8 <__aeabi_dmul>
 800afc8:	4602      	mov	r2, r0
 800afca:	460b      	mov	r3, r1
 800afcc:	4630      	mov	r0, r6
 800afce:	4639      	mov	r1, r7
 800afd0:	f7f5 f95a 	bl	8000288 <__aeabi_dsub>
 800afd4:	ec53 2b1a 	vmov	r2, r3, d10
 800afd8:	f7f5 fb0e 	bl	80005f8 <__aeabi_dmul>
 800afdc:	ec53 2b18 	vmov	r2, r3, d8
 800afe0:	ec41 0b19 	vmov	d9, r0, r1
 800afe4:	ec51 0b18 	vmov	r0, r1, d8
 800afe8:	f7f5 fb06 	bl	80005f8 <__aeabi_dmul>
 800afec:	a37c      	add	r3, pc, #496	; (adr r3, 800b1e0 <__ieee754_pow+0x708>)
 800afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff2:	4604      	mov	r4, r0
 800aff4:	460d      	mov	r5, r1
 800aff6:	f7f5 faff 	bl	80005f8 <__aeabi_dmul>
 800affa:	a37b      	add	r3, pc, #492	; (adr r3, 800b1e8 <__ieee754_pow+0x710>)
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	f7f5 f944 	bl	800028c <__adddf3>
 800b004:	4622      	mov	r2, r4
 800b006:	462b      	mov	r3, r5
 800b008:	f7f5 faf6 	bl	80005f8 <__aeabi_dmul>
 800b00c:	a378      	add	r3, pc, #480	; (adr r3, 800b1f0 <__ieee754_pow+0x718>)
 800b00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b012:	f7f5 f93b 	bl	800028c <__adddf3>
 800b016:	4622      	mov	r2, r4
 800b018:	462b      	mov	r3, r5
 800b01a:	f7f5 faed 	bl	80005f8 <__aeabi_dmul>
 800b01e:	a376      	add	r3, pc, #472	; (adr r3, 800b1f8 <__ieee754_pow+0x720>)
 800b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b024:	f7f5 f932 	bl	800028c <__adddf3>
 800b028:	4622      	mov	r2, r4
 800b02a:	462b      	mov	r3, r5
 800b02c:	f7f5 fae4 	bl	80005f8 <__aeabi_dmul>
 800b030:	a373      	add	r3, pc, #460	; (adr r3, 800b200 <__ieee754_pow+0x728>)
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	f7f5 f929 	bl	800028c <__adddf3>
 800b03a:	4622      	mov	r2, r4
 800b03c:	462b      	mov	r3, r5
 800b03e:	f7f5 fadb 	bl	80005f8 <__aeabi_dmul>
 800b042:	a371      	add	r3, pc, #452	; (adr r3, 800b208 <__ieee754_pow+0x730>)
 800b044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b048:	f7f5 f920 	bl	800028c <__adddf3>
 800b04c:	4622      	mov	r2, r4
 800b04e:	4606      	mov	r6, r0
 800b050:	460f      	mov	r7, r1
 800b052:	462b      	mov	r3, r5
 800b054:	4620      	mov	r0, r4
 800b056:	4629      	mov	r1, r5
 800b058:	f7f5 face 	bl	80005f8 <__aeabi_dmul>
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	4630      	mov	r0, r6
 800b062:	4639      	mov	r1, r7
 800b064:	f7f5 fac8 	bl	80005f8 <__aeabi_dmul>
 800b068:	4642      	mov	r2, r8
 800b06a:	4604      	mov	r4, r0
 800b06c:	460d      	mov	r5, r1
 800b06e:	464b      	mov	r3, r9
 800b070:	ec51 0b18 	vmov	r0, r1, d8
 800b074:	f7f5 f90a 	bl	800028c <__adddf3>
 800b078:	ec53 2b19 	vmov	r2, r3, d9
 800b07c:	f7f5 fabc 	bl	80005f8 <__aeabi_dmul>
 800b080:	4622      	mov	r2, r4
 800b082:	462b      	mov	r3, r5
 800b084:	f7f5 f902 	bl	800028c <__adddf3>
 800b088:	4642      	mov	r2, r8
 800b08a:	4682      	mov	sl, r0
 800b08c:	468b      	mov	fp, r1
 800b08e:	464b      	mov	r3, r9
 800b090:	4640      	mov	r0, r8
 800b092:	4649      	mov	r1, r9
 800b094:	f7f5 fab0 	bl	80005f8 <__aeabi_dmul>
 800b098:	4b6b      	ldr	r3, [pc, #428]	; (800b248 <__ieee754_pow+0x770>)
 800b09a:	2200      	movs	r2, #0
 800b09c:	4606      	mov	r6, r0
 800b09e:	460f      	mov	r7, r1
 800b0a0:	f7f5 f8f4 	bl	800028c <__adddf3>
 800b0a4:	4652      	mov	r2, sl
 800b0a6:	465b      	mov	r3, fp
 800b0a8:	f7f5 f8f0 	bl	800028c <__adddf3>
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	460d      	mov	r5, r1
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	4640      	mov	r0, r8
 800b0b8:	4649      	mov	r1, r9
 800b0ba:	f7f5 fa9d 	bl	80005f8 <__aeabi_dmul>
 800b0be:	4b62      	ldr	r3, [pc, #392]	; (800b248 <__ieee754_pow+0x770>)
 800b0c0:	4680      	mov	r8, r0
 800b0c2:	4689      	mov	r9, r1
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	f7f5 f8dd 	bl	8000288 <__aeabi_dsub>
 800b0ce:	4632      	mov	r2, r6
 800b0d0:	463b      	mov	r3, r7
 800b0d2:	f7f5 f8d9 	bl	8000288 <__aeabi_dsub>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	460b      	mov	r3, r1
 800b0da:	4650      	mov	r0, sl
 800b0dc:	4659      	mov	r1, fp
 800b0de:	f7f5 f8d3 	bl	8000288 <__aeabi_dsub>
 800b0e2:	ec53 2b18 	vmov	r2, r3, d8
 800b0e6:	f7f5 fa87 	bl	80005f8 <__aeabi_dmul>
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	4606      	mov	r6, r0
 800b0ee:	460f      	mov	r7, r1
 800b0f0:	462b      	mov	r3, r5
 800b0f2:	ec51 0b19 	vmov	r0, r1, d9
 800b0f6:	f7f5 fa7f 	bl	80005f8 <__aeabi_dmul>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	4630      	mov	r0, r6
 800b100:	4639      	mov	r1, r7
 800b102:	f7f5 f8c3 	bl	800028c <__adddf3>
 800b106:	4606      	mov	r6, r0
 800b108:	460f      	mov	r7, r1
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4640      	mov	r0, r8
 800b110:	4649      	mov	r1, r9
 800b112:	f7f5 f8bb 	bl	800028c <__adddf3>
 800b116:	a33e      	add	r3, pc, #248	; (adr r3, 800b210 <__ieee754_pow+0x738>)
 800b118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11c:	2000      	movs	r0, #0
 800b11e:	4604      	mov	r4, r0
 800b120:	460d      	mov	r5, r1
 800b122:	f7f5 fa69 	bl	80005f8 <__aeabi_dmul>
 800b126:	4642      	mov	r2, r8
 800b128:	ec41 0b18 	vmov	d8, r0, r1
 800b12c:	464b      	mov	r3, r9
 800b12e:	4620      	mov	r0, r4
 800b130:	4629      	mov	r1, r5
 800b132:	f7f5 f8a9 	bl	8000288 <__aeabi_dsub>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	4630      	mov	r0, r6
 800b13c:	4639      	mov	r1, r7
 800b13e:	f7f5 f8a3 	bl	8000288 <__aeabi_dsub>
 800b142:	a335      	add	r3, pc, #212	; (adr r3, 800b218 <__ieee754_pow+0x740>)
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	f7f5 fa56 	bl	80005f8 <__aeabi_dmul>
 800b14c:	a334      	add	r3, pc, #208	; (adr r3, 800b220 <__ieee754_pow+0x748>)
 800b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b152:	4606      	mov	r6, r0
 800b154:	460f      	mov	r7, r1
 800b156:	4620      	mov	r0, r4
 800b158:	4629      	mov	r1, r5
 800b15a:	f7f5 fa4d 	bl	80005f8 <__aeabi_dmul>
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	4630      	mov	r0, r6
 800b164:	4639      	mov	r1, r7
 800b166:	f7f5 f891 	bl	800028c <__adddf3>
 800b16a:	9a07      	ldr	r2, [sp, #28]
 800b16c:	4b37      	ldr	r3, [pc, #220]	; (800b24c <__ieee754_pow+0x774>)
 800b16e:	4413      	add	r3, r2
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	f7f5 f88a 	bl	800028c <__adddf3>
 800b178:	4682      	mov	sl, r0
 800b17a:	9805      	ldr	r0, [sp, #20]
 800b17c:	468b      	mov	fp, r1
 800b17e:	f7f5 f9d1 	bl	8000524 <__aeabi_i2d>
 800b182:	9a07      	ldr	r2, [sp, #28]
 800b184:	4b32      	ldr	r3, [pc, #200]	; (800b250 <__ieee754_pow+0x778>)
 800b186:	4413      	add	r3, r2
 800b188:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b18c:	4606      	mov	r6, r0
 800b18e:	460f      	mov	r7, r1
 800b190:	4652      	mov	r2, sl
 800b192:	465b      	mov	r3, fp
 800b194:	ec51 0b18 	vmov	r0, r1, d8
 800b198:	f7f5 f878 	bl	800028c <__adddf3>
 800b19c:	4642      	mov	r2, r8
 800b19e:	464b      	mov	r3, r9
 800b1a0:	f7f5 f874 	bl	800028c <__adddf3>
 800b1a4:	4632      	mov	r2, r6
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	f7f5 f870 	bl	800028c <__adddf3>
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	4632      	mov	r2, r6
 800b1b0:	463b      	mov	r3, r7
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	460d      	mov	r5, r1
 800b1b6:	f7f5 f867 	bl	8000288 <__aeabi_dsub>
 800b1ba:	4642      	mov	r2, r8
 800b1bc:	464b      	mov	r3, r9
 800b1be:	f7f5 f863 	bl	8000288 <__aeabi_dsub>
 800b1c2:	ec53 2b18 	vmov	r2, r3, d8
 800b1c6:	f7f5 f85f 	bl	8000288 <__aeabi_dsub>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	4650      	mov	r0, sl
 800b1d0:	4659      	mov	r1, fp
 800b1d2:	e610      	b.n	800adf6 <__ieee754_pow+0x31e>
 800b1d4:	2401      	movs	r4, #1
 800b1d6:	e6a1      	b.n	800af1c <__ieee754_pow+0x444>
 800b1d8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b228 <__ieee754_pow+0x750>
 800b1dc:	e617      	b.n	800ae0e <__ieee754_pow+0x336>
 800b1de:	bf00      	nop
 800b1e0:	4a454eef 	.word	0x4a454eef
 800b1e4:	3fca7e28 	.word	0x3fca7e28
 800b1e8:	93c9db65 	.word	0x93c9db65
 800b1ec:	3fcd864a 	.word	0x3fcd864a
 800b1f0:	a91d4101 	.word	0xa91d4101
 800b1f4:	3fd17460 	.word	0x3fd17460
 800b1f8:	518f264d 	.word	0x518f264d
 800b1fc:	3fd55555 	.word	0x3fd55555
 800b200:	db6fabff 	.word	0xdb6fabff
 800b204:	3fdb6db6 	.word	0x3fdb6db6
 800b208:	33333303 	.word	0x33333303
 800b20c:	3fe33333 	.word	0x3fe33333
 800b210:	e0000000 	.word	0xe0000000
 800b214:	3feec709 	.word	0x3feec709
 800b218:	dc3a03fd 	.word	0xdc3a03fd
 800b21c:	3feec709 	.word	0x3feec709
 800b220:	145b01f5 	.word	0x145b01f5
 800b224:	be3e2fe0 	.word	0xbe3e2fe0
 800b228:	00000000 	.word	0x00000000
 800b22c:	3ff00000 	.word	0x3ff00000
 800b230:	7ff00000 	.word	0x7ff00000
 800b234:	43400000 	.word	0x43400000
 800b238:	0003988e 	.word	0x0003988e
 800b23c:	000bb679 	.word	0x000bb679
 800b240:	0800bb70 	.word	0x0800bb70
 800b244:	3ff00000 	.word	0x3ff00000
 800b248:	40080000 	.word	0x40080000
 800b24c:	0800bb90 	.word	0x0800bb90
 800b250:	0800bb80 	.word	0x0800bb80
 800b254:	a3b5      	add	r3, pc, #724	; (adr r3, 800b52c <__ieee754_pow+0xa54>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	4640      	mov	r0, r8
 800b25c:	4649      	mov	r1, r9
 800b25e:	f7f5 f815 	bl	800028c <__adddf3>
 800b262:	4622      	mov	r2, r4
 800b264:	ec41 0b1a 	vmov	d10, r0, r1
 800b268:	462b      	mov	r3, r5
 800b26a:	4630      	mov	r0, r6
 800b26c:	4639      	mov	r1, r7
 800b26e:	f7f5 f80b 	bl	8000288 <__aeabi_dsub>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	ec51 0b1a 	vmov	r0, r1, d10
 800b27a:	f7f5 fc4d 	bl	8000b18 <__aeabi_dcmpgt>
 800b27e:	2800      	cmp	r0, #0
 800b280:	f47f ae04 	bne.w	800ae8c <__ieee754_pow+0x3b4>
 800b284:	4aa4      	ldr	r2, [pc, #656]	; (800b518 <__ieee754_pow+0xa40>)
 800b286:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b28a:	4293      	cmp	r3, r2
 800b28c:	f340 8108 	ble.w	800b4a0 <__ieee754_pow+0x9c8>
 800b290:	151b      	asrs	r3, r3, #20
 800b292:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b296:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b29a:	fa4a f303 	asr.w	r3, sl, r3
 800b29e:	445b      	add	r3, fp
 800b2a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b2a4:	4e9d      	ldr	r6, [pc, #628]	; (800b51c <__ieee754_pow+0xa44>)
 800b2a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b2aa:	4116      	asrs	r6, r2
 800b2ac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	ea23 0106 	bic.w	r1, r3, r6
 800b2b6:	f1c2 0214 	rsb	r2, r2, #20
 800b2ba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b2be:	fa4a fa02 	asr.w	sl, sl, r2
 800b2c2:	f1bb 0f00 	cmp.w	fp, #0
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	bfb8      	it	lt
 800b2d0:	f1ca 0a00 	rsblt	sl, sl, #0
 800b2d4:	f7f4 ffd8 	bl	8000288 <__aeabi_dsub>
 800b2d8:	ec41 0b19 	vmov	d9, r0, r1
 800b2dc:	4642      	mov	r2, r8
 800b2de:	464b      	mov	r3, r9
 800b2e0:	ec51 0b19 	vmov	r0, r1, d9
 800b2e4:	f7f4 ffd2 	bl	800028c <__adddf3>
 800b2e8:	a37b      	add	r3, pc, #492	; (adr r3, 800b4d8 <__ieee754_pow+0xa00>)
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	2000      	movs	r0, #0
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	f7f5 f980 	bl	80005f8 <__aeabi_dmul>
 800b2f8:	ec53 2b19 	vmov	r2, r3, d9
 800b2fc:	4606      	mov	r6, r0
 800b2fe:	460f      	mov	r7, r1
 800b300:	4620      	mov	r0, r4
 800b302:	4629      	mov	r1, r5
 800b304:	f7f4 ffc0 	bl	8000288 <__aeabi_dsub>
 800b308:	4602      	mov	r2, r0
 800b30a:	460b      	mov	r3, r1
 800b30c:	4640      	mov	r0, r8
 800b30e:	4649      	mov	r1, r9
 800b310:	f7f4 ffba 	bl	8000288 <__aeabi_dsub>
 800b314:	a372      	add	r3, pc, #456	; (adr r3, 800b4e0 <__ieee754_pow+0xa08>)
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	f7f5 f96d 	bl	80005f8 <__aeabi_dmul>
 800b31e:	a372      	add	r3, pc, #456	; (adr r3, 800b4e8 <__ieee754_pow+0xa10>)
 800b320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b324:	4680      	mov	r8, r0
 800b326:	4689      	mov	r9, r1
 800b328:	4620      	mov	r0, r4
 800b32a:	4629      	mov	r1, r5
 800b32c:	f7f5 f964 	bl	80005f8 <__aeabi_dmul>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4640      	mov	r0, r8
 800b336:	4649      	mov	r1, r9
 800b338:	f7f4 ffa8 	bl	800028c <__adddf3>
 800b33c:	4604      	mov	r4, r0
 800b33e:	460d      	mov	r5, r1
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	4630      	mov	r0, r6
 800b346:	4639      	mov	r1, r7
 800b348:	f7f4 ffa0 	bl	800028c <__adddf3>
 800b34c:	4632      	mov	r2, r6
 800b34e:	463b      	mov	r3, r7
 800b350:	4680      	mov	r8, r0
 800b352:	4689      	mov	r9, r1
 800b354:	f7f4 ff98 	bl	8000288 <__aeabi_dsub>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	4620      	mov	r0, r4
 800b35e:	4629      	mov	r1, r5
 800b360:	f7f4 ff92 	bl	8000288 <__aeabi_dsub>
 800b364:	4642      	mov	r2, r8
 800b366:	4606      	mov	r6, r0
 800b368:	460f      	mov	r7, r1
 800b36a:	464b      	mov	r3, r9
 800b36c:	4640      	mov	r0, r8
 800b36e:	4649      	mov	r1, r9
 800b370:	f7f5 f942 	bl	80005f8 <__aeabi_dmul>
 800b374:	a35e      	add	r3, pc, #376	; (adr r3, 800b4f0 <__ieee754_pow+0xa18>)
 800b376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37a:	4604      	mov	r4, r0
 800b37c:	460d      	mov	r5, r1
 800b37e:	f7f5 f93b 	bl	80005f8 <__aeabi_dmul>
 800b382:	a35d      	add	r3, pc, #372	; (adr r3, 800b4f8 <__ieee754_pow+0xa20>)
 800b384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b388:	f7f4 ff7e 	bl	8000288 <__aeabi_dsub>
 800b38c:	4622      	mov	r2, r4
 800b38e:	462b      	mov	r3, r5
 800b390:	f7f5 f932 	bl	80005f8 <__aeabi_dmul>
 800b394:	a35a      	add	r3, pc, #360	; (adr r3, 800b500 <__ieee754_pow+0xa28>)
 800b396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39a:	f7f4 ff77 	bl	800028c <__adddf3>
 800b39e:	4622      	mov	r2, r4
 800b3a0:	462b      	mov	r3, r5
 800b3a2:	f7f5 f929 	bl	80005f8 <__aeabi_dmul>
 800b3a6:	a358      	add	r3, pc, #352	; (adr r3, 800b508 <__ieee754_pow+0xa30>)
 800b3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ac:	f7f4 ff6c 	bl	8000288 <__aeabi_dsub>
 800b3b0:	4622      	mov	r2, r4
 800b3b2:	462b      	mov	r3, r5
 800b3b4:	f7f5 f920 	bl	80005f8 <__aeabi_dmul>
 800b3b8:	a355      	add	r3, pc, #340	; (adr r3, 800b510 <__ieee754_pow+0xa38>)
 800b3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3be:	f7f4 ff65 	bl	800028c <__adddf3>
 800b3c2:	4622      	mov	r2, r4
 800b3c4:	462b      	mov	r3, r5
 800b3c6:	f7f5 f917 	bl	80005f8 <__aeabi_dmul>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	4640      	mov	r0, r8
 800b3d0:	4649      	mov	r1, r9
 800b3d2:	f7f4 ff59 	bl	8000288 <__aeabi_dsub>
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	460d      	mov	r5, r1
 800b3da:	4602      	mov	r2, r0
 800b3dc:	460b      	mov	r3, r1
 800b3de:	4640      	mov	r0, r8
 800b3e0:	4649      	mov	r1, r9
 800b3e2:	f7f5 f909 	bl	80005f8 <__aeabi_dmul>
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	ec41 0b19 	vmov	d9, r0, r1
 800b3ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	f7f4 ff48 	bl	8000288 <__aeabi_dsub>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	ec51 0b19 	vmov	r0, r1, d9
 800b400:	f7f5 fa24 	bl	800084c <__aeabi_ddiv>
 800b404:	4632      	mov	r2, r6
 800b406:	4604      	mov	r4, r0
 800b408:	460d      	mov	r5, r1
 800b40a:	463b      	mov	r3, r7
 800b40c:	4640      	mov	r0, r8
 800b40e:	4649      	mov	r1, r9
 800b410:	f7f5 f8f2 	bl	80005f8 <__aeabi_dmul>
 800b414:	4632      	mov	r2, r6
 800b416:	463b      	mov	r3, r7
 800b418:	f7f4 ff38 	bl	800028c <__adddf3>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	4620      	mov	r0, r4
 800b422:	4629      	mov	r1, r5
 800b424:	f7f4 ff30 	bl	8000288 <__aeabi_dsub>
 800b428:	4642      	mov	r2, r8
 800b42a:	464b      	mov	r3, r9
 800b42c:	f7f4 ff2c 	bl	8000288 <__aeabi_dsub>
 800b430:	460b      	mov	r3, r1
 800b432:	4602      	mov	r2, r0
 800b434:	493a      	ldr	r1, [pc, #232]	; (800b520 <__ieee754_pow+0xa48>)
 800b436:	2000      	movs	r0, #0
 800b438:	f7f4 ff26 	bl	8000288 <__aeabi_dsub>
 800b43c:	ec41 0b10 	vmov	d0, r0, r1
 800b440:	ee10 3a90 	vmov	r3, s1
 800b444:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b44c:	da2b      	bge.n	800b4a6 <__ieee754_pow+0x9ce>
 800b44e:	4650      	mov	r0, sl
 800b450:	f000 f966 	bl	800b720 <scalbn>
 800b454:	ec51 0b10 	vmov	r0, r1, d0
 800b458:	ec53 2b18 	vmov	r2, r3, d8
 800b45c:	f7ff bbed 	b.w	800ac3a <__ieee754_pow+0x162>
 800b460:	4b30      	ldr	r3, [pc, #192]	; (800b524 <__ieee754_pow+0xa4c>)
 800b462:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b466:	429e      	cmp	r6, r3
 800b468:	f77f af0c 	ble.w	800b284 <__ieee754_pow+0x7ac>
 800b46c:	4b2e      	ldr	r3, [pc, #184]	; (800b528 <__ieee754_pow+0xa50>)
 800b46e:	440b      	add	r3, r1
 800b470:	4303      	orrs	r3, r0
 800b472:	d009      	beq.n	800b488 <__ieee754_pow+0x9b0>
 800b474:	ec51 0b18 	vmov	r0, r1, d8
 800b478:	2200      	movs	r2, #0
 800b47a:	2300      	movs	r3, #0
 800b47c:	f7f5 fb2e 	bl	8000adc <__aeabi_dcmplt>
 800b480:	3800      	subs	r0, #0
 800b482:	bf18      	it	ne
 800b484:	2001      	movne	r0, #1
 800b486:	e447      	b.n	800ad18 <__ieee754_pow+0x240>
 800b488:	4622      	mov	r2, r4
 800b48a:	462b      	mov	r3, r5
 800b48c:	f7f4 fefc 	bl	8000288 <__aeabi_dsub>
 800b490:	4642      	mov	r2, r8
 800b492:	464b      	mov	r3, r9
 800b494:	f7f5 fb36 	bl	8000b04 <__aeabi_dcmpge>
 800b498:	2800      	cmp	r0, #0
 800b49a:	f43f aef3 	beq.w	800b284 <__ieee754_pow+0x7ac>
 800b49e:	e7e9      	b.n	800b474 <__ieee754_pow+0x99c>
 800b4a0:	f04f 0a00 	mov.w	sl, #0
 800b4a4:	e71a      	b.n	800b2dc <__ieee754_pow+0x804>
 800b4a6:	ec51 0b10 	vmov	r0, r1, d0
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	e7d4      	b.n	800b458 <__ieee754_pow+0x980>
 800b4ae:	491c      	ldr	r1, [pc, #112]	; (800b520 <__ieee754_pow+0xa48>)
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	f7ff bb30 	b.w	800ab16 <__ieee754_pow+0x3e>
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	f7ff bb2c 	b.w	800ab16 <__ieee754_pow+0x3e>
 800b4be:	4630      	mov	r0, r6
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	f7ff bb28 	b.w	800ab16 <__ieee754_pow+0x3e>
 800b4c6:	9204      	str	r2, [sp, #16]
 800b4c8:	f7ff bb7a 	b.w	800abc0 <__ieee754_pow+0xe8>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f7ff bb64 	b.w	800ab9a <__ieee754_pow+0xc2>
 800b4d2:	bf00      	nop
 800b4d4:	f3af 8000 	nop.w
 800b4d8:	00000000 	.word	0x00000000
 800b4dc:	3fe62e43 	.word	0x3fe62e43
 800b4e0:	fefa39ef 	.word	0xfefa39ef
 800b4e4:	3fe62e42 	.word	0x3fe62e42
 800b4e8:	0ca86c39 	.word	0x0ca86c39
 800b4ec:	be205c61 	.word	0xbe205c61
 800b4f0:	72bea4d0 	.word	0x72bea4d0
 800b4f4:	3e663769 	.word	0x3e663769
 800b4f8:	c5d26bf1 	.word	0xc5d26bf1
 800b4fc:	3ebbbd41 	.word	0x3ebbbd41
 800b500:	af25de2c 	.word	0xaf25de2c
 800b504:	3f11566a 	.word	0x3f11566a
 800b508:	16bebd93 	.word	0x16bebd93
 800b50c:	3f66c16c 	.word	0x3f66c16c
 800b510:	5555553e 	.word	0x5555553e
 800b514:	3fc55555 	.word	0x3fc55555
 800b518:	3fe00000 	.word	0x3fe00000
 800b51c:	000fffff 	.word	0x000fffff
 800b520:	3ff00000 	.word	0x3ff00000
 800b524:	4090cbff 	.word	0x4090cbff
 800b528:	3f6f3400 	.word	0x3f6f3400
 800b52c:	652b82fe 	.word	0x652b82fe
 800b530:	3c971547 	.word	0x3c971547

0800b534 <__ieee754_sqrt>:
 800b534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b538:	ec55 4b10 	vmov	r4, r5, d0
 800b53c:	4e55      	ldr	r6, [pc, #340]	; (800b694 <__ieee754_sqrt+0x160>)
 800b53e:	43ae      	bics	r6, r5
 800b540:	ee10 0a10 	vmov	r0, s0
 800b544:	ee10 3a10 	vmov	r3, s0
 800b548:	462a      	mov	r2, r5
 800b54a:	4629      	mov	r1, r5
 800b54c:	d110      	bne.n	800b570 <__ieee754_sqrt+0x3c>
 800b54e:	ee10 2a10 	vmov	r2, s0
 800b552:	462b      	mov	r3, r5
 800b554:	f7f5 f850 	bl	80005f8 <__aeabi_dmul>
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	4620      	mov	r0, r4
 800b55e:	4629      	mov	r1, r5
 800b560:	f7f4 fe94 	bl	800028c <__adddf3>
 800b564:	4604      	mov	r4, r0
 800b566:	460d      	mov	r5, r1
 800b568:	ec45 4b10 	vmov	d0, r4, r5
 800b56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b570:	2d00      	cmp	r5, #0
 800b572:	dc10      	bgt.n	800b596 <__ieee754_sqrt+0x62>
 800b574:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b578:	4330      	orrs	r0, r6
 800b57a:	d0f5      	beq.n	800b568 <__ieee754_sqrt+0x34>
 800b57c:	b15d      	cbz	r5, 800b596 <__ieee754_sqrt+0x62>
 800b57e:	ee10 2a10 	vmov	r2, s0
 800b582:	462b      	mov	r3, r5
 800b584:	ee10 0a10 	vmov	r0, s0
 800b588:	f7f4 fe7e 	bl	8000288 <__aeabi_dsub>
 800b58c:	4602      	mov	r2, r0
 800b58e:	460b      	mov	r3, r1
 800b590:	f7f5 f95c 	bl	800084c <__aeabi_ddiv>
 800b594:	e7e6      	b.n	800b564 <__ieee754_sqrt+0x30>
 800b596:	1512      	asrs	r2, r2, #20
 800b598:	d074      	beq.n	800b684 <__ieee754_sqrt+0x150>
 800b59a:	07d4      	lsls	r4, r2, #31
 800b59c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b5a0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b5a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b5a8:	bf5e      	ittt	pl
 800b5aa:	0fda      	lsrpl	r2, r3, #31
 800b5ac:	005b      	lslpl	r3, r3, #1
 800b5ae:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b5b2:	2400      	movs	r4, #0
 800b5b4:	0fda      	lsrs	r2, r3, #31
 800b5b6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b5ba:	107f      	asrs	r7, r7, #1
 800b5bc:	005b      	lsls	r3, r3, #1
 800b5be:	2516      	movs	r5, #22
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b5c6:	1886      	adds	r6, r0, r2
 800b5c8:	428e      	cmp	r6, r1
 800b5ca:	bfde      	ittt	le
 800b5cc:	1b89      	suble	r1, r1, r6
 800b5ce:	18b0      	addle	r0, r6, r2
 800b5d0:	18a4      	addle	r4, r4, r2
 800b5d2:	0049      	lsls	r1, r1, #1
 800b5d4:	3d01      	subs	r5, #1
 800b5d6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b5da:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b5de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b5e2:	d1f0      	bne.n	800b5c6 <__ieee754_sqrt+0x92>
 800b5e4:	462a      	mov	r2, r5
 800b5e6:	f04f 0e20 	mov.w	lr, #32
 800b5ea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b5ee:	4281      	cmp	r1, r0
 800b5f0:	eb06 0c05 	add.w	ip, r6, r5
 800b5f4:	dc02      	bgt.n	800b5fc <__ieee754_sqrt+0xc8>
 800b5f6:	d113      	bne.n	800b620 <__ieee754_sqrt+0xec>
 800b5f8:	459c      	cmp	ip, r3
 800b5fa:	d811      	bhi.n	800b620 <__ieee754_sqrt+0xec>
 800b5fc:	f1bc 0f00 	cmp.w	ip, #0
 800b600:	eb0c 0506 	add.w	r5, ip, r6
 800b604:	da43      	bge.n	800b68e <__ieee754_sqrt+0x15a>
 800b606:	2d00      	cmp	r5, #0
 800b608:	db41      	blt.n	800b68e <__ieee754_sqrt+0x15a>
 800b60a:	f100 0801 	add.w	r8, r0, #1
 800b60e:	1a09      	subs	r1, r1, r0
 800b610:	459c      	cmp	ip, r3
 800b612:	bf88      	it	hi
 800b614:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b618:	eba3 030c 	sub.w	r3, r3, ip
 800b61c:	4432      	add	r2, r6
 800b61e:	4640      	mov	r0, r8
 800b620:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b624:	f1be 0e01 	subs.w	lr, lr, #1
 800b628:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b62c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b630:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b634:	d1db      	bne.n	800b5ee <__ieee754_sqrt+0xba>
 800b636:	430b      	orrs	r3, r1
 800b638:	d006      	beq.n	800b648 <__ieee754_sqrt+0x114>
 800b63a:	1c50      	adds	r0, r2, #1
 800b63c:	bf13      	iteet	ne
 800b63e:	3201      	addne	r2, #1
 800b640:	3401      	addeq	r4, #1
 800b642:	4672      	moveq	r2, lr
 800b644:	f022 0201 	bicne.w	r2, r2, #1
 800b648:	1063      	asrs	r3, r4, #1
 800b64a:	0852      	lsrs	r2, r2, #1
 800b64c:	07e1      	lsls	r1, r4, #31
 800b64e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b652:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b656:	bf48      	it	mi
 800b658:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b65c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b660:	4614      	mov	r4, r2
 800b662:	e781      	b.n	800b568 <__ieee754_sqrt+0x34>
 800b664:	0ad9      	lsrs	r1, r3, #11
 800b666:	3815      	subs	r0, #21
 800b668:	055b      	lsls	r3, r3, #21
 800b66a:	2900      	cmp	r1, #0
 800b66c:	d0fa      	beq.n	800b664 <__ieee754_sqrt+0x130>
 800b66e:	02cd      	lsls	r5, r1, #11
 800b670:	d50a      	bpl.n	800b688 <__ieee754_sqrt+0x154>
 800b672:	f1c2 0420 	rsb	r4, r2, #32
 800b676:	fa23 f404 	lsr.w	r4, r3, r4
 800b67a:	1e55      	subs	r5, r2, #1
 800b67c:	4093      	lsls	r3, r2
 800b67e:	4321      	orrs	r1, r4
 800b680:	1b42      	subs	r2, r0, r5
 800b682:	e78a      	b.n	800b59a <__ieee754_sqrt+0x66>
 800b684:	4610      	mov	r0, r2
 800b686:	e7f0      	b.n	800b66a <__ieee754_sqrt+0x136>
 800b688:	0049      	lsls	r1, r1, #1
 800b68a:	3201      	adds	r2, #1
 800b68c:	e7ef      	b.n	800b66e <__ieee754_sqrt+0x13a>
 800b68e:	4680      	mov	r8, r0
 800b690:	e7bd      	b.n	800b60e <__ieee754_sqrt+0xda>
 800b692:	bf00      	nop
 800b694:	7ff00000 	.word	0x7ff00000

0800b698 <with_errno>:
 800b698:	b570      	push	{r4, r5, r6, lr}
 800b69a:	4604      	mov	r4, r0
 800b69c:	460d      	mov	r5, r1
 800b69e:	4616      	mov	r6, r2
 800b6a0:	f7fd ffc8 	bl	8009634 <__errno>
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	6006      	str	r6, [r0, #0]
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	bd70      	pop	{r4, r5, r6, pc}

0800b6ac <xflow>:
 800b6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6ae:	4614      	mov	r4, r2
 800b6b0:	461d      	mov	r5, r3
 800b6b2:	b108      	cbz	r0, 800b6b8 <xflow+0xc>
 800b6b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b6b8:	e9cd 2300 	strd	r2, r3, [sp]
 800b6bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	f7f4 ff98 	bl	80005f8 <__aeabi_dmul>
 800b6c8:	2222      	movs	r2, #34	; 0x22
 800b6ca:	b003      	add	sp, #12
 800b6cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6d0:	f7ff bfe2 	b.w	800b698 <with_errno>

0800b6d4 <__math_uflow>:
 800b6d4:	b508      	push	{r3, lr}
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b6dc:	f7ff ffe6 	bl	800b6ac <xflow>
 800b6e0:	ec41 0b10 	vmov	d0, r0, r1
 800b6e4:	bd08      	pop	{r3, pc}

0800b6e6 <__math_oflow>:
 800b6e6:	b508      	push	{r3, lr}
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b6ee:	f7ff ffdd 	bl	800b6ac <xflow>
 800b6f2:	ec41 0b10 	vmov	d0, r0, r1
 800b6f6:	bd08      	pop	{r3, pc}

0800b6f8 <fabs>:
 800b6f8:	ec51 0b10 	vmov	r0, r1, d0
 800b6fc:	ee10 2a10 	vmov	r2, s0
 800b700:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b704:	ec43 2b10 	vmov	d0, r2, r3
 800b708:	4770      	bx	lr

0800b70a <finite>:
 800b70a:	b082      	sub	sp, #8
 800b70c:	ed8d 0b00 	vstr	d0, [sp]
 800b710:	9801      	ldr	r0, [sp, #4]
 800b712:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b716:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b71a:	0fc0      	lsrs	r0, r0, #31
 800b71c:	b002      	add	sp, #8
 800b71e:	4770      	bx	lr

0800b720 <scalbn>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	ec55 4b10 	vmov	r4, r5, d0
 800b726:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b72a:	4606      	mov	r6, r0
 800b72c:	462b      	mov	r3, r5
 800b72e:	b99a      	cbnz	r2, 800b758 <scalbn+0x38>
 800b730:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b734:	4323      	orrs	r3, r4
 800b736:	d036      	beq.n	800b7a6 <scalbn+0x86>
 800b738:	4b39      	ldr	r3, [pc, #228]	; (800b820 <scalbn+0x100>)
 800b73a:	4629      	mov	r1, r5
 800b73c:	ee10 0a10 	vmov	r0, s0
 800b740:	2200      	movs	r2, #0
 800b742:	f7f4 ff59 	bl	80005f8 <__aeabi_dmul>
 800b746:	4b37      	ldr	r3, [pc, #220]	; (800b824 <scalbn+0x104>)
 800b748:	429e      	cmp	r6, r3
 800b74a:	4604      	mov	r4, r0
 800b74c:	460d      	mov	r5, r1
 800b74e:	da10      	bge.n	800b772 <scalbn+0x52>
 800b750:	a32b      	add	r3, pc, #172	; (adr r3, 800b800 <scalbn+0xe0>)
 800b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b756:	e03a      	b.n	800b7ce <scalbn+0xae>
 800b758:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b75c:	428a      	cmp	r2, r1
 800b75e:	d10c      	bne.n	800b77a <scalbn+0x5a>
 800b760:	ee10 2a10 	vmov	r2, s0
 800b764:	4620      	mov	r0, r4
 800b766:	4629      	mov	r1, r5
 800b768:	f7f4 fd90 	bl	800028c <__adddf3>
 800b76c:	4604      	mov	r4, r0
 800b76e:	460d      	mov	r5, r1
 800b770:	e019      	b.n	800b7a6 <scalbn+0x86>
 800b772:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b776:	460b      	mov	r3, r1
 800b778:	3a36      	subs	r2, #54	; 0x36
 800b77a:	4432      	add	r2, r6
 800b77c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b780:	428a      	cmp	r2, r1
 800b782:	dd08      	ble.n	800b796 <scalbn+0x76>
 800b784:	2d00      	cmp	r5, #0
 800b786:	a120      	add	r1, pc, #128	; (adr r1, 800b808 <scalbn+0xe8>)
 800b788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b78c:	da1c      	bge.n	800b7c8 <scalbn+0xa8>
 800b78e:	a120      	add	r1, pc, #128	; (adr r1, 800b810 <scalbn+0xf0>)
 800b790:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b794:	e018      	b.n	800b7c8 <scalbn+0xa8>
 800b796:	2a00      	cmp	r2, #0
 800b798:	dd08      	ble.n	800b7ac <scalbn+0x8c>
 800b79a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b79e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b7a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b7a6:	ec45 4b10 	vmov	d0, r4, r5
 800b7aa:	bd70      	pop	{r4, r5, r6, pc}
 800b7ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b7b0:	da19      	bge.n	800b7e6 <scalbn+0xc6>
 800b7b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b7b6:	429e      	cmp	r6, r3
 800b7b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b7bc:	dd0a      	ble.n	800b7d4 <scalbn+0xb4>
 800b7be:	a112      	add	r1, pc, #72	; (adr r1, 800b808 <scalbn+0xe8>)
 800b7c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e2      	bne.n	800b78e <scalbn+0x6e>
 800b7c8:	a30f      	add	r3, pc, #60	; (adr r3, 800b808 <scalbn+0xe8>)
 800b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ce:	f7f4 ff13 	bl	80005f8 <__aeabi_dmul>
 800b7d2:	e7cb      	b.n	800b76c <scalbn+0x4c>
 800b7d4:	a10a      	add	r1, pc, #40	; (adr r1, 800b800 <scalbn+0xe0>)
 800b7d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d0b8      	beq.n	800b750 <scalbn+0x30>
 800b7de:	a10e      	add	r1, pc, #56	; (adr r1, 800b818 <scalbn+0xf8>)
 800b7e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7e4:	e7b4      	b.n	800b750 <scalbn+0x30>
 800b7e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b7ea:	3236      	adds	r2, #54	; 0x36
 800b7ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b7f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	4b0c      	ldr	r3, [pc, #48]	; (800b828 <scalbn+0x108>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	e7e8      	b.n	800b7ce <scalbn+0xae>
 800b7fc:	f3af 8000 	nop.w
 800b800:	c2f8f359 	.word	0xc2f8f359
 800b804:	01a56e1f 	.word	0x01a56e1f
 800b808:	8800759c 	.word	0x8800759c
 800b80c:	7e37e43c 	.word	0x7e37e43c
 800b810:	8800759c 	.word	0x8800759c
 800b814:	fe37e43c 	.word	0xfe37e43c
 800b818:	c2f8f359 	.word	0xc2f8f359
 800b81c:	81a56e1f 	.word	0x81a56e1f
 800b820:	43500000 	.word	0x43500000
 800b824:	ffff3cb0 	.word	0xffff3cb0
 800b828:	3c900000 	.word	0x3c900000

0800b82c <_init>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	bf00      	nop
 800b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b832:	bc08      	pop	{r3}
 800b834:	469e      	mov	lr, r3
 800b836:	4770      	bx	lr

0800b838 <_fini>:
 800b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83a:	bf00      	nop
 800b83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83e:	bc08      	pop	{r3}
 800b840:	469e      	mov	lr, r3
 800b842:	4770      	bx	lr
